[
  {
    "sha": "dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDc3YjVlZDI5OWRkM2Q1ZTAzNTFkYWVmMmQyNzQ3MTU5YWQ5N2Y5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:24Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:24Z"
      },
      "message": "wallet rpc: add new helper function for handling txid/vout dictionaries",
      "tree": {
        "sha": "b0922418dcd2353dc923edbeee7b4657ad75189f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0922418dcd2353dc923edbeee7b4657ad75189f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr0KrwACgkQV692LbM1\nMyJNNQ//So7rfV+YtRbMBxR6OOeZHj0SbfcJLZuNtYamSAJYi4tQrkks2HaiRJ2o\n7NOdCv9C7b+4ZmMP3YO57JmGIUVzUphhUueQZ4OQqommS1GVCZhoBHL1BIJ7cUID\nUaNWEdC5ZkR9GfM//n+oksKYDmgImXiLbaXYYmMqt3p8YVJwE5wd3ErOVi5HSwNz\n+4lFOnD2HvUwr7oIaTmwBS9uznUxkg8WVLzHZGxUoJei+wfl7VgOgY7uB4zE12XU\nnwsv5/W6JqLvV3vVzkFLOeZECLBm/eY7vHVAqNp/X6n0hRJjnMJNfLLsBI6FvrSI\n7tneQyF5cnmgA8ASIa7hLaETAbQvYRhIp5bX67W5zHrAMPRFRLrht/NRuoCoxJUV\nz3YFUzGfPOAgQbAWLNkRFfkjJ7rWZAvnd4kxzhznFDiidlpjYsGfXtB6g8Hh1eKU\nebdLxgXz4mB+acGwv8VKDmdqQordH3t0iXrK2JeW0ZXlGE6TXGX0JGaXCzPfBsSB\n3/t+X/gH7iM1iKCJo5SCaIocLh1QIvx91EQLfO/hcA3h6mC8tjWDsvj4pbmcoFbM\nNkm9lA5vkIa71ll8yaRQd5JpdVzzb3V110z93ZIiYciqowlRbNxC6xU047HryB27\n6mt9T/kd5/DU11CWjnMQBRgrmmzXPTCSqyt35alw52xO+kxrCW4=\n=qxYE\n-----END PGP SIGNATURE-----",
        "payload": "tree b0922418dcd2353dc923edbeee7b4657ad75189f\nparent 196c5a947a071f7c9c5b211f0a47787a7d540ecb\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951164 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951164 +0900\n\nwallet rpc: add new helper function for handling txid/vout dictionaries\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd77b5ed299dd3d5e0351daef2d2747159ad97f9/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "196c5a947a071f7c9c5b211f0a47787a7d540ecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/196c5a947a071f7c9c5b211f0a47787a7d540ecb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/196c5a947a071f7c9c5b211f0a47787a7d540ecb"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7370d22e5c42b6bf986a7ceffbc6dd1cfcdf114",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd77b5ed299dd3d5e0351daef2d2747159ad97f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd77b5ed299dd3d5e0351daef2d2747159ad97f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
        "patch": "@@ -485,6 +485,55 @@ static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &\n     return tx;\n }\n \n+/**\n+ * Validate and return a COutPoint based on a UniValue txid/vout dictionary\n+ *\n+ * @param  pwallet      The wallet.\n+ * @param  outpoint     The outpoint in dictionary form with keys txid and vout.\n+ * @param  allow_locked Whether or not locked outputs should throw a JSONRPCError\n+ */\n+COutPoint ValidateOutPointReference(CWallet* const pwallet, const UniValue& outpoint, bool allow_locked = false)\n+{\n+    RPCTypeCheckObj(outpoint,\n+        {\n+            {\"txid\", UniValueType(UniValue::VSTR)},\n+            {\"vout\", UniValueType(UniValue::VNUM)},\n+        });\n+\n+    const std::string& txid = find_value(outpoint, \"txid\").get_str();\n+    if (!IsHex(txid)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n+    }\n+\n+    const int output = find_value(outpoint, \"vout\").get_int();\n+    if (output < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n+    }\n+\n+    const COutPoint outpt(uint256S(txid), output);\n+\n+    const auto it = pwallet->mapWallet.find(outpt.hash);\n+    if (it == pwallet->mapWallet.end()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, unknown transaction\");\n+    }\n+\n+    const CWalletTx& trans = it->second;\n+\n+    if (outpt.n >= trans.tx->vout.size()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n+    }\n+\n+    if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n+    }\n+\n+    if (!allow_locked && pwallet->IsLockedCoin(outpt.hash, outpt.n)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output is locked\");\n+    }\n+\n+    return outpt;\n+}\n+\n static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);"
      }
    ]
  },
  {
    "sha": "db07bc7315aec3c9ca5f3338794a35445c521b75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjA3YmM3MzE1YWVjM2M5Y2E1ZjMzMzg3OTRhMzU0NDVjNTIxYjc1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T07:51:11Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:25Z"
      },
      "message": "wallet rpc: lockunspent switch to using new helper function for outpoints",
      "tree": {
        "sha": "042044fb0012fe8ad329a05a247d4c95c2d661ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/042044fb0012fe8ad329a05a247d4c95c2d661ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db07bc7315aec3c9ca5f3338794a35445c521b75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr0Kr0ACgkQV692LbM1\nMyLr/A//RhO0MPba1ZwsOpXzPyYRT+Ua5UKHXRS/BHvT9ezOGHbK3cGkaZzHvTM9\nHQVI8CKg3WLTNYVEr2L2o1Q5jU6UURR5gAPexVup5mS01k1M0rmf8B73/pg0W/4y\nmDQ5N0JOkNb+DeU+69oy1L9yTuAdlkfYpDsVplm+g2S793AWBMqQrXRIQrUdfYzT\nKL9p/BgMT8d5WH3b5SQc9bLNnCc091YSRwpWXJnCYWm0zBq7fb5To09YVgNWEzsB\nUc87J83nNzSSqUaihLvJXd1JWukNdbu/SRhL5JMKcRYIGpja7zzNGyWZ7gmWJILY\n2t+FHb++96T/fiyutWGsjJ1rtSxD+C28iyQFxa8Vc4q+cEw+OsRmtXCBPENgioou\nqveDn8zNvVSOD7ja13UgbdqgaNLnHdl9g7igZ9oB7JNRG+VUFtN/Ox5rbvabO78R\njRafjgYTg7W59KOsD2m2pMsXWnWH6g8DheuOAwuSs34OJK91T8kYBkJjUGI3d4BW\nBP7+TPFkte7fTVsSnfw6dIQe62sCasghf20a0ORx4mqjoB1jjATf0i10IQBNaVpe\nUS6TBiWRIvDzBJqVr4zNwNLODwkKjk7DfEdQTnGiD5jHdLN8fflrjuQ6zsBNkKoB\nX9f606RY097PmEoXKRXjLa5e875Qnn1Gg/G7EXaMcNxpKuEq4aw=\n=hmbY\n-----END PGP SIGNATURE-----",
        "payload": "tree 042044fb0012fe8ad329a05a247d4c95c2d661ae\nparent dd77b5ed299dd3d5e0351daef2d2747159ad97f9\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525938671 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951165 +0900\n\nwallet rpc: lockunspent switch to using new helper function for outpoints\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db07bc7315aec3c9ca5f3338794a35445c521b75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db07bc7315aec3c9ca5f3338794a35445c521b75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db07bc7315aec3c9ca5f3338794a35445c521b75/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd77b5ed299dd3d5e0351daef2d2747159ad97f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd77b5ed299dd3d5e0351daef2d2747159ad97f9"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 1,
      "deletions": 34
    },
    "files": [
      {
        "sha": "3c185913fd00a86ff6ea0fbbee34519ad35088bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 34,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db07bc7315aec3c9ca5f3338794a35445c521b75/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db07bc7315aec3c9ca5f3338794a35445c521b75/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=db07bc7315aec3c9ca5f3338794a35445c521b75",
        "patch": "@@ -2813,40 +2813,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n     outputs.reserve(output_params.size());\n \n     for (unsigned int idx = 0; idx < output_params.size(); idx++) {\n-        const UniValue& o = output_params[idx].get_obj();\n-\n-        RPCTypeCheckObj(o,\n-            {\n-                {\"txid\", UniValueType(UniValue::VSTR)},\n-                {\"vout\", UniValueType(UniValue::VNUM)},\n-            });\n-\n-        const std::string& txid = find_value(o, \"txid\").get_str();\n-        if (!IsHex(txid)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n-        }\n-\n-        const int nOutput = find_value(o, \"vout\").get_int();\n-        if (nOutput < 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n-        }\n-\n-        const COutPoint outpt(uint256S(txid), nOutput);\n-\n-        const auto it = pwallet->mapWallet.find(outpt.hash);\n-        if (it == pwallet->mapWallet.end()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, unknown transaction\");\n-        }\n-\n-        const CWalletTx& trans = it->second;\n-\n-        if (outpt.n >= trans.tx->vout.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n-        }\n-\n-        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n-        }\n+        COutPoint outpt = ValidateOutPointReference(pwallet, output_params[idx].get_obj(), true);\n \n         const bool is_locked = pwallet->IsLockedCoin(outpt.hash, outpt.n);\n "
      }
    ]
  },
  {
    "sha": "27167924a7b2d6a122eb64814212b37c8287469f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzE2NzkyNGE3YjJkNmExMjJlYjY0ODE0MjEyYjM3YzgyODc0Njlm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T10:07:55Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:25Z"
      },
      "message": "coincontrol: Add m_max_inputs flag",
      "tree": {
        "sha": "b3cafc9f98c3d27547bd68cc496709681116c3d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3cafc9f98c3d27547bd68cc496709681116c3d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27167924a7b2d6a122eb64814212b37c8287469f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr0Kr0ACgkQV692LbM1\nMyJiKw//YtOG312os8IJxGgnBvYIw2zUGT8fLsqVOCX4+sYddiCtxQio6Me+eOrR\nV+8sdejRrXlHpQYI9SfwYJF2AES67y3lz/idTtsQWSk+3+BrczmgPt/lIma0d/sV\nz5bsLSxoFqKghPjmEtVBOaSFam5/c5uxSiFJLgaHz9S3RvKYYG0UJGXJL+dHH6Xa\nJ/AI3iIsFXqexqicQEHuwvHr06feU0ORH6rUMOdIblz1mcgjzS9B0NAuAVmmFWIc\nb9L1IA+zZg62j3rHKFE1K6tRoNnRJ80YFZULFFFvO7LL/B/hScOu1AprDsFcKBHZ\nIQDehUOjiBnygPQLCKnAGE2bLR0MTT762O79eRKCFg1cdfc2q6oyoKUBBeP/QY9q\nddvejYtWbpQ/yVIfqRmYvL2CSXiClBWg2JKVE67pHC3cr+sd6CyVSo5J9OTnc6ra\nmquxHpjI8isoyMZhuTUuhYPAPGFQxF0K/Z4powBRarI0mV62Pv+r6jzS5xMmXxcc\nYkpWaAEjRZb39Sv5uP/Zu9u4I/fYiZEtsDRUVG9MqFugCf9MVxr19S+EI8X60cH4\nzClLwVQwNvMa2YrCT1ZxWScXDRRUs+xwflH3xc9hVaKiIutNog1N0hFVI6eYZc4w\nJXU/0SJaKRu9qVimn91pQ7vIQds2VTTM/PE/McxzYwzDyRf7fFs=\n=ERXt\n-----END PGP SIGNATURE-----",
        "payload": "tree b3cafc9f98c3d27547bd68cc496709681116c3d6\nparent db07bc7315aec3c9ca5f3338794a35445c521b75\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525946875 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951165 +0900\n\ncoincontrol: Add m_max_inputs flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27167924a7b2d6a122eb64814212b37c8287469f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27167924a7b2d6a122eb64814212b37c8287469f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27167924a7b2d6a122eb64814212b37c8287469f/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db07bc7315aec3c9ca5f3338794a35445c521b75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db07bc7315aec3c9ca5f3338794a35445c521b75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db07bc7315aec3c9ca5f3338794a35445c521b75"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f9f1bdbedb6285e0a98dc1055acb102166f0cf30",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27167924a7b2d6a122eb64814212b37c8287469f/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27167924a7b2d6a122eb64814212b37c8287469f/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=27167924a7b2d6a122eb64814212b37c8287469f",
        "patch": "@@ -34,6 +34,8 @@ class CCoinControl\n     boost::optional<bool> m_signal_bip125_rbf;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n+    //! The maximum number of inputs that may be used (unset means infinity)\n+    boost::optional<unsigned int> m_max_inputs;\n \n     CCoinControl()\n     {\n@@ -52,6 +54,7 @@ class CCoinControl\n         m_confirm_target.reset();\n         m_signal_bip125_rbf.reset();\n         m_fee_mode = FeeEstimateMode::UNSET;\n+        m_max_inputs.reset();\n     }\n \n     bool HasSelected() const"
      }
    ]
  },
  {
    "sha": "df04df28043400dc0cdc9ec3d7371623efe95337",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjA0ZGYyODA0MzQwMGRjMGNkYzllYzNkNzM3MTYyM2VmZTk1MzM3",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T10:10:25Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:25Z"
      },
      "message": "wallet: Abide by max_inputs constraint in coin selection",
      "tree": {
        "sha": "25123e070b0e28c44df761e82c8de6f131773fb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25123e070b0e28c44df761e82c8de6f131773fb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df04df28043400dc0cdc9ec3d7371623efe95337",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr0Kr0ACgkQV692LbM1\nMyK5tw//bKXgovKZU86Rr1/uYkldGIcWmU2PN/ssIaipDg0e4kVdQFH+rYaPP6s3\ndHG6/shFiZRFPHCcovXaw1wycjaNzWa/R8F4dYlHbk/WlUVCtlyL3xcKvje7BUWq\nOtxnf60o0ZLA9KzBfQ9dSVCBJtifQJjtvKwAC/PMx8f4j/VcmWWdT6kTNf/PInpB\nrCdV3tXuXcDH5kB928ioWKZjWiuY6thX2K2A10QTWprw2wR+FLQkZQCNGn5O/oJA\nEOhU2GusF3LJvtd/O12D/a3hOZvlyrYGZq6pjQy5pMXOPRXwQFd47syhJXtSC4TY\nJ47Bpn1ipcDxPm0zCgb3mXWmirhLeE0/Tw8LZ3VM6OAXF3wAo3Joaf2B89yeFHCC\nyviBl/hrXNpMXtVrNAlMDSXPbgDtjgiDvijzPQgKiBc/ZhZ7tKaZefFqXlQq2uvx\ni7kHK8jC5Wg9m9E4I8jt5Wn9Dedccg9Y+JP4KsOGk0lIUkJZwnPmqphNyElw/3z4\njLZokK21CrseeFOgFXJeuPsZGuvh96uxRZ+CJnVVA9doVoXeBLKeENqhvtzsxcGI\nZpwQdFMD8yStAsE/mZHTfF6JJPQzcn4JFOBdWvJfQVJJxH6ouSRf4giEXTJV8ogT\nXPTQYG3Gz8MSJTWhqKzBvu5Wq/LeCE/qa3bhCN2nO4OzgOIBVPg=\n=XKIu\n-----END PGP SIGNATURE-----",
        "payload": "tree 25123e070b0e28c44df761e82c8de6f131773fb5\nparent 27167924a7b2d6a122eb64814212b37c8287469f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525947025 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951165 +0900\n\nwallet: Abide by max_inputs constraint in coin selection\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df04df28043400dc0cdc9ec3d7371623efe95337",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df04df28043400dc0cdc9ec3d7371623efe95337",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df04df28043400dc0cdc9ec3d7371623efe95337/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27167924a7b2d6a122eb64814212b37c8287469f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27167924a7b2d6a122eb64814212b37c8287469f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27167924a7b2d6a122eb64814212b37c8287469f"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 36,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e36f0dac080401a75f468aa9a34af655581a9767",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 9,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=df04df28043400dc0cdc9ec3d7371623efe95337",
        "patch": "@@ -59,11 +59,12 @@ struct {\n \n static const size_t TOTAL_TRIES = 100000;\n \n-bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, const size_t& max_inputs, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n {\n     out_set.clear();\n     CAmount curr_value = 0;\n \n+    size_t selected_count = 0;\n     std::vector<bool> curr_selection; // select the utxo at this index\n     curr_selection.reserve(utxo_pool.size());\n     CAmount actual_target = not_input_fees + target_value;\n@@ -107,6 +108,9 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n             }\n             curr_waste -= (curr_value - actual_target); // Remove the excess value as we will be selecting different coins now\n             backtrack = true;\n+        } else if (max_inputs && selected_count == max_inputs) {\n+            // We are not allowed to select any more inputs, so we look at other solutions\n+            backtrack = true;\n         }\n \n         // Backtracking, moving backwards\n@@ -122,6 +126,7 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n             }\n \n             // Output was included on previous iterations, try excluding now.\n+            selected_count--;\n             curr_selection.back() = false;\n             CInputCoin& utxo = utxo_pool.at(curr_selection.size() - 1);\n             curr_value -= utxo.effective_value;\n@@ -140,6 +145,7 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n                 curr_selection.push_back(false);\n             } else {\n                 // Inclusion branch first (Largest First Exploration)\n+                selected_count++;\n                 curr_selection.push_back(true);\n                 curr_value += utxo.effective_value;\n                 curr_waste += utxo.fee - utxo.long_term_fee;\n@@ -165,23 +171,30 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n }\n \n static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000, size_t max_inputs = 0)\n {\n     std::vector<char> vfIncluded;\n \n     vfBest.assign(vValue.size(), true);\n     nBest = nTotalLower;\n+    // for input count constricted, we peel off from end; it's shuffled, so it\n+    // should be fine\n+    for (size_t i = vValue.size(); max_inputs && i > max_inputs; --i) {\n+        vfBest[i-1] = false;\n+        nBest -= vValue[i-1].txout.nValue;\n+    }\n \n     FastRandomContext insecure_rand;\n \n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n+        size_t selected_count = 0;\n         vfIncluded.assign(vValue.size(), false);\n         CAmount nTotal = 0;\n         bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n+        for (int nPass = 0; nPass < 2 && !fReachedTarget && (!max_inputs || selected_count < max_inputs); nPass++)\n         {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n+            for (unsigned int i = 0; i < vValue.size() && (!max_inputs || selected_count < max_inputs); i++)\n             {\n                 //The solver here uses a randomized algorithm,\n                 //the randomness serves no real security purpose but is just\n@@ -193,15 +206,17 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n                 {\n                     nTotal += vValue[i].txout.nValue;\n                     vfIncluded[i] = true;\n+                    selected_count++;\n                     if (nTotal >= nTargetValue)\n                     {\n                         fReachedTarget = true;\n-                        if (nTotal < nBest)\n+                        if (nTotal < nBest || nBest < nTargetValue)\n                         {\n                             nBest = nTotal;\n                             vfBest = vfIncluded;\n                         }\n                         nTotal -= vValue[i].txout.nValue;\n+                        selected_count--;\n                         vfIncluded[i] = false;\n                     }\n                 }\n@@ -210,7 +225,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n     }\n }\n \n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)\n+bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, const size_t& max_inputs, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n@@ -241,7 +256,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins\n         }\n     }\n \n-    if (nTotalLower == nTargetValue)\n+    if (nTotalLower == nTargetValue && vValue.size() <= max_inputs)\n     {\n         for (const auto& input : vValue)\n         {\n@@ -265,17 +280,22 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins\n     std::vector<char> vfBest;\n     CAmount nBest;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n+    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000, max_inputs);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest, 1000, max_inputs);\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (coinLowestLarger &&\n         ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n     {\n+        setCoinsRet.clear();\n+        nValueRet = 0;\n         setCoinsRet.insert(coinLowestLarger.get());\n         nValueRet += coinLowestLarger->txout.nValue;\n+    } else if (nBest < nTargetValue) {\n+        // No coinLowestLarger, and best is < target value\n+        return false;\n     }\n     else {\n         for (unsigned int i = 0; i < vValue.size(); i++)"
      },
      {
        "sha": "52a39ce9429fadbc534d7e6192cda6c18399bbba",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=df04df28043400dc0cdc9ec3d7371623efe95337",
        "patch": "@@ -47,8 +47,8 @@ class CInputCoin {\n     }\n };\n \n-bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, const size_t& max_inputs, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n \n // Original coin selection algorithm as a fallback\n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n+bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, const size_t& max_inputs, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n #endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "a3eab494c0e82fd88140a4b3f18defa3577608ec",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=df04df28043400dc0cdc9ec3d7371623efe95337",
        "patch": "@@ -2505,7 +2505,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         // Calculate the fees for things that aren't inputs\n         CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n         bnb_used = true;\n-        return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, coin_selection_params.max_inputs, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n         // Filter by the min conf specs and add to utxo_pool\n         for (const COutput &output : vCoins)\n@@ -2517,7 +2517,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n             utxo_pool.push_back(coin);\n         }\n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, utxo_pool, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue, utxo_pool, coin_selection_params.max_inputs, setCoinsRet, nValueRet);\n     }\n }\n \n@@ -2770,6 +2770,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, &coin_control);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+            if (coin_control.m_max_inputs) coin_selection_params.max_inputs = *coin_control.m_max_inputs;\n \n             // Create change script that will be used if we need change\n             // TODO: pass in scriptChange instead of reservekey so"
      },
      {
        "sha": "7768ec566ee7571d9289a40a5f4ad8509fbaa02c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df04df28043400dc0cdc9ec3d7371623efe95337/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=df04df28043400dc0cdc9ec3d7371623efe95337",
        "patch": "@@ -641,8 +641,9 @@ struct CoinSelectionParams\n     size_t change_spend_size = 0;\n     CFeeRate effective_fee = CFeeRate(0);\n     size_t tx_noinputs_size = 0;\n+    size_t max_inputs = 0; //!< if non-zero, puts a cap on number of inputs may be spent\n \n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size, size_t max_inputs_in = 0) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size), max_inputs(max_inputs_in) {}\n     CoinSelectionParams() {}\n };\n "
      }
    ]
  },
  {
    "sha": "d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjljYjZiMGQ0ZjZjOTFmNmUzNTBkMmIzODViNTc5MmY3ZWI5Mzk5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T10:10:59Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:25Z"
      },
      "message": "test: Update tests to include new max_input argument",
      "tree": {
        "sha": "c831ffc94d2c4231197996dff63255a3329f0511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c831ffc94d2c4231197996dff63255a3329f0511"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr0Kr0ACgkQV692LbM1\nMyI3LBAAjSXcJPfVCdpo0mDJlT3On5l+BnjIOI337wimru+j2pxedVxKdwgrjNkS\njRTz/67KUQA6pWjMBfCxIo1Ogh/QmjmuW2SKTvFOxcHm1fWWAu3moYsXh+W1Lzyp\nacjMpqjdAbV4RQQAR74Kxlco569fWmGnPmQlrrWEsVBrcsJQhXzIz4WWM4S5R22n\nreM19YGfMUqpZgmozPlZDFnRTXVXsfMDOLTcYVEoSnz2oq7wK+H2rJFZR1HsSJH+\n7vjetfVpNRSrAcg1J1x95voI4wc9HNz1eAbZUM4T8t2+i2KnBZejfRPJId+cPFI3\nxX502hSLxnjXz+v0cdqMrlvrZLXJvFxnk/0g8FbXekGtgd+dvT7efMN/M+ks1cC4\n4nvaB424n/B9zvJpEpOCh6bIMLm2TBpDW/L7DOc+2qd93jt3U9IhyQz56oTRT+yd\ngB0KQZ5nusyH3BIQuVTAaHWpTN5uGLQyxdZ7pfXG/KrYw5GaaJKRyVL016LmpmFJ\nFY8ec9NRuaGTf0ioW2kRORKhMbFJcRJvw9RxQ12b3SmLsDeM7iB0WmMLY62V2wkz\nsZ4SntIHt1x0VmAfj8J15Q0XiWexlgYIGJnrfI20BemX6OVDSEobkJ5CB/0iPUsS\nyP5PCZdexDu4w0p71Nx15RlUtwylatq0XtQgKdGIGLMQtRNwYHA=\n=jjg7\n-----END PGP SIGNATURE-----",
        "payload": "tree c831ffc94d2c4231197996dff63255a3329f0511\nparent df04df28043400dc0cdc9ec3d7371623efe95337\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525947059 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951165 +0900\n\ntest: Update tests to include new max_input argument\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df04df28043400dc0cdc9ec3d7371623efe95337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df04df28043400dc0cdc9ec3d7371623efe95337",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df04df28043400dc0cdc9ec3d7371623efe95337"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 92,
      "deletions": 13
    },
    "files": [
      {
        "sha": "cf7d2708f7d51cb8222a9db4a958de5e2066f220",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
        "patch": "@@ -96,7 +96,7 @@ static void BnBExhaustion(benchmark::State& state)\n     while (state.KeepRunning()) {\n         // Benchmark\n         CAmount target = make_hard_case(17, utxo_pool);\n-        SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees); // Should exhaust\n+        SelectCoinsBnB(utxo_pool, target, 0, 0, selection, value_ret, not_input_fees); // Should exhaust\n \n         // Cleanup\n         utxo_pool.clear();"
      },
      {
        "sha": "56699558ee8cb02f1451ffdeafbc87abbf4e0e86",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 12,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
        "patch": "@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n \n     // Empty utxo pool\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     selection.clear();\n \n     // Add utxos\n@@ -132,28 +132,28 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Select 1 Cent\n     add_coin(1 * CENT, 1, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 5 Cent\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 11 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     actual_selection.clear();\n     selection.clear();\n \n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n@@ -173,18 +173,18 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(5 * CENT, 5, actual_selection);\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 5000, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 5000, 0, selection, value_ret, not_input_fees));\n \n     // Select 0.25 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 0.25 * CENT, 0.5 * CENT, 0, selection, value_ret, not_input_fees));\n     actual_selection.clear();\n     selection.clear();\n \n     // Iteration exhaustion test\n     CAmount target = make_hard_case(17, utxo_pool);\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should exhaust\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, target, 0, 0, selection, value_ret, not_input_fees)); // Should exhaust\n     target = make_hard_case(14, utxo_pool);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, target, 0, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n \n     // Test same value early bailout optimization\n     add_coin(7 * CENT, 7, actual_selection);\n@@ -200,7 +200,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 50000; ++i) {\n         add_coin(5 * CENT, 7, utxo_pool);\n     }\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 30 * CENT, 5000, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 30 * CENT, 5000, 0, selection, value_ret, not_input_fees));\n \n     ////////////////////\n     // Behavior tests //\n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     // Run 100 times, to make sure it is never finding a solution\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees));\n+        BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 2 * CENT, 0, selection, value_ret, not_input_fees));\n     }\n \n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n@@ -238,6 +238,85 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_CHECK(!coin_selection_params_bnb.use_bnb);\n }\n \n+// Constraint tests\n+BOOST_AUTO_TEST_CASE(constraints)\n+{\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup\n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    CAmount not_input_fees = 0;\n+\n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool, 1 input max\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, 1, selection, value_ret, not_input_fees));\n+    selection.clear();\n+\n+    // Add utxos\n+    add_coin(1 * CENT, 1, utxo_pool);\n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+\n+    // Select 2 Cent, maximum 1 input\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, 1, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 4 Cent, maximum 1 input\n+    add_coin(4 * CENT, 4, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 4 * CENT, 0.5 * CENT, 1, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 5 Cent, maximum 1 input (fails)\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, 1, selection, value_ret, not_input_fees));\n+\n+    // Select 5 Cent, maximum 2 inputs\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, 2, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 9 Cent, fail until 3 inputs allowed\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 9 * CENT, 0.5 * CENT, 1, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 9 * CENT, 0.5 * CENT, 2, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 9 * CENT, 0.5 * CENT, 3, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    // Select 10 Cent, fail until 3 inputs allowed, selection check with 4 inputs allowed\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, 1, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, 2, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, 3, selection, value_ret, not_input_fees));\n+    selection.clear();\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, 4, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+}\n+\n BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n {\n     CoinSet setCoinsRet, setCoinsRet2;"
      }
    ]
  },
  {
    "sha": "0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2ZjODI4NDllYTdlZTFhYTM4NWExZTg3YmM5MmE0NmRmMzY0Yjli",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:17:48Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T11:19:26Z"
      },
      "message": "wallet rpc: Add constraints support in send RPC calls",
      "tree": {
        "sha": "c24b749698b783956aa6cab0364eb018e3649165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c24b749698b783956aa6cab0364eb018e3649165"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr0Kr4ACgkQV692LbM1\nMyJBrRAAiCB13xOYZuwD8jOUeJEA7dID0QzryilwXgnDcFxbh16gl++POJyKE/Ks\nk2aslWDYu5Jn76/DC8Nv0Dh28UjI2Os9m+3cgL2/Yh65iBWBYNWd13GqI2WgCScl\nRZM2tTuNcc3Mzj/h6wsTkXE3dCXSuaEIhi8LJBXgZUaOwfzQ/fLr8DvbJPXmIIDQ\nCEZDi6IqiwyxFjbFm1vDAt1GeEtrXBpMKa6CR/SkCcwq3C0RyaFbCVE65zNzPJ6F\nTz6/q1Ea4yb27/86+0zbTv7gmT6UN+ZANTVO6v53L15UBdQcqbZ+B88R/sIxY0I+\nMgKjFd0yctCdf69BRsQaTT55TcNptDWcdT4PuCvcmJx8qTpwIyZrlqA4p+pCrdG0\nTCIaiGjE1IXNxJMjzKvo1wdV2pXti+FRRBCL0OYDn6tkGlpaMAw9LLcnlYZfLboO\noYdiUWpIvhaCXZE+q14268VZ/g+y6fHY6dXM0WiRC7duWm3MwMwHCZmdynm8SoN1\nTgcp+kodXRes07N2ggjhEStAEiaOKrAqJcvFklih4zh94wLWlBNNqXJKM9Y1NPRu\nsDwdm0YFdKqVQ4khvyGy66jfk2NUpWrcN/Ufk19j6t8zCpXa5G9FxKJ631RDhtLt\n9/oz8icMxvb6rkgXYj6gwMK4F69YhqM+X3/cNMXnxCDs42cJx0g=\n=QY+k\n-----END PGP SIGNATURE-----",
        "payload": "tree c24b749698b783956aa6cab0364eb018e3649165\nparent d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951068 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525951166 +0900\n\nwallet rpc: Add constraints support in send RPC calls\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d29cb6b0d4f6c91f6e350d2b385b5792f7eb9399"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 74,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1357868160c7241106bf50d1fbb772bbe7d2fd9b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
        "patch": "@@ -37,6 +37,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 4, \"subtractfeefromamount\" },\n     { \"sendtoaddress\", 5 , \"replaceable\" },\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n+    { \"sendtoaddress\", 8, \"constraints\" },\n     { \"settxfee\", 0, \"amount\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbyaccount\", 1, \"minconf\" },\n@@ -78,6 +79,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n+    { \"sendmany\", 8, \"constraints\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },\n     { \"createmultisig\", 0, \"nrequired\" },"
      },
      {
        "sha": "c19fac77f14791642960a9ffd108a3ac498600e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 8,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
        "patch": "@@ -473,8 +473,11 @@ static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &\n     vecSend.push_back(recipient);\n     CTransactionRef tx;\n     if (!pwallet->CreateTransaction(vecSend, tx, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n-        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance) {\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n+        } else if (coin_control.m_max_inputs) {\n+            strError += \" (constraints may be causing this error; consider lessening or removing them)\";\n+        }\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n@@ -541,7 +544,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 9)\n         throw std::runtime_error(\n             \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n@@ -562,6 +565,14 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"9. \\\"constraints\\\": {       (object, optional) Add additional constraints to the coin selection:\\n\"\n+            \"     \\\"inputs\\\": [        (array, optional) List of inputs which must be used. No other inputs are allowed.\\n\"\n+            \"       {                  (object) An input in the form of a transaction id and index.\\n\"\n+            \"         \\\"txid\\\":\\\"hex\\\"   (string) The transaction id.\\n\"\n+            \"         \\\"vout\\\":n         (numeric) The index.\\n\"\n+            \"       }, ... ]\\n\"\n+            \"     \\\"max_inputs\\\": n,     (numeric, optional) Restrict the maximum number of inputs which may be used.\\n\"\n+            \"   }\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -614,6 +625,27 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         }\n     }\n \n+    if (!request.params[8].isNull()) {\n+        const UniValue& constraints = request.params[8].get_obj();\n+        const auto& keys = constraints.getKeys();\n+        for (size_t i = 0; i < keys.size(); ++i) {\n+            const UniValue& c = constraints[keys[i]];\n+            if (keys[i] == \"inputs\") {\n+                coin_control.fAllowOtherInputs = false;\n+                for (size_t j = 0; j < c.size(); ++j) {\n+                    coin_control.Select(ValidateOutPointReference(pwallet, c[j].get_obj()));\n+                }\n+            } else if (keys[i] == \"max_inputs\") {\n+                int n = c.get_int();\n+                if (n < 1) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid constraint: max_inputs must be greater than 0\");\n+                }\n+                coin_control.m_max_inputs = n;\n+            } else {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid constraint: unknown key %s\", keys[i]));\n+            }\n+        }\n+    }\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -1118,7 +1150,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n     std::string help_text;\n     if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        help_text = \"sendmany \\\"\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n+        help_text = \"sendmany \\\"\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\" \\\"constraints\\\" )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\\n\"\n             \"Note that the \\\"fromaccount\\\" argument has been removed in V0.17. To use this RPC with a \\\"fromaccount\\\" argument, restart\\n\"\n             \"bitcoind with -deprecatedrpc=accounts\\n\"\n@@ -1146,6 +1178,14 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"9. \\\"constraints\\\": {       (object, optional) Add additional constraints to the coin selection:\\n\"\n+            \"     \\\"inputs\\\": [        (array, optional) List of inputs which must be used. No other inputs are allowed.\\n\"\n+            \"       {                  (object) An input in the form of a transaction id and index.\\n\"\n+            \"         \\\"txid\\\":\\\"hex\\\"   (string) The transaction id.\\n\"\n+            \"         \\\"vout\\\":n         (numeric) The index.\\n\"\n+            \"       }, ... ]\\n\"\n+            \"     \\\"max_inputs\\\": n,     (numeric, optional) Restrict the maximum number of inputs which may be used.\\n\"\n+            \"   }\\n\"\n              \"\\nResult:\\n\"\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n@@ -1159,7 +1199,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\");\n     } else {\n-        help_text = \"sendmany \\\"\\\" \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n+        help_text = \"sendmany \\\"\\\" \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\" \\\"constraints\\\" )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -1199,7 +1239,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\");\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8) throw std::runtime_error(help_text);\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 9) throw std::runtime_error(help_text);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1243,6 +1283,28 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         }\n     }\n \n+    if (!request.params[8].isNull()) {\n+        const UniValue& constraints = request.params[8].get_obj();\n+        const auto& keys = constraints.getKeys();\n+        for (size_t i = 0; i < keys.size(); ++i) {\n+            const UniValue& c = constraints[keys[i]];\n+            if (keys[i] == \"inputs\") {\n+                coin_control.fAllowOtherInputs = false;\n+                for (size_t j = 0; j < c.size(); ++j) {\n+                    coin_control.Select(ValidateOutPointReference(pwallet, c[j].get_obj()));\n+                }\n+            } else if (keys[i] == \"max_inputs\") {\n+                int n = c.get_int();\n+                if (n < 1) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid constraint: max_inputs must be greater than 0\");\n+                }\n+                coin_control.m_max_inputs = n;\n+            } else {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid constraint: unknown key %s\", keys[i]));\n+            }\n+        }\n+    }\n+\n     std::set<CTxDestination> destinations;\n     std::vector<CRecipient> vecSend;\n \n@@ -1293,8 +1355,10 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     std::string strFailReason;\n     CTransactionRef tx;\n     bool fCreated = pwallet->CreateTransaction(vecSend, tx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n-    if (!fCreated)\n+    if (!fCreated) {\n+        if (!request.params[8].isNull()) strFailReason += \" (constraints may be causing this error; consider lessening or removing them)\";\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n+    }\n     CValidationState state;\n     if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, std::move(strAccount), keyChange, g_connman.get(), state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n@@ -4145,8 +4209,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount|dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount|dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"constraints\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"constraints\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },"
      }
    ]
  },
  {
    "sha": "e96ca3e978bdc17325a55f8feedfac34b75ef072",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTZjYTNlOTc4YmRjMTczMjVhNTVmOGZlZWRmYWMzNGI3NWVmMDcy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T10:34:25Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-11T05:20:53Z"
      },
      "message": "test: Add test cases for sending with constraints",
      "tree": {
        "sha": "fcc79cea7db70df1e09704dfc3663e5d48de91f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcc79cea7db70df1e09704dfc3663e5d48de91f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e96ca3e978bdc17325a55f8feedfac34b75ef072",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr1KDUACgkQV692LbM1\nMyL+Mg//Y5lQ3SIWWDyeE5LxDCDEBSh1wvs6IN5lTZlqUSxY77vwcQxXWxBEGTVk\nb1J4BnPbmPiDOiLXRXFHQE0VoUqedfBybNQyxuABa7LGeDNrXAf5/yC6BVYx3KeH\nfmxpawfrffbyKVR2Hb7J5qrufXrMMtdiZQAh9z9uY2xjRpqS22W6vVKpslz262ns\nppALp6jC2y6eKrv2ifVqARmEqkOQ5nGFo7eMjVsOgnjixCcWMf1+HrXNheP4YOLT\nnxVu2vHaOeLoa+7Kg+2BkVzUMsiqNYpbhqGmaa4bZFe79PRwL8RqOQxPByj+KbLf\nYGJQ/NW940kNx8QGtWfSE2+lhbbxh+3nQUgEITqdRJ2zGcBZ3/K1PFXc+JXnsxIi\nVpolE067fyYyv4MVYabIbiK53AVA7yQDutA3fPzm5wp4cUMfEsaCgRGSGeUmJtc8\nxqT1x4dF/sEniPyE6xvrtnu5/bwL7NHnkQkzecSxs6ae4H2p8VuV9IGOp5FwroEX\nxrUBkrtlZ8LfMtIWUmy49sDZJ6uS8CIeX2tWwMekg+K/ZfpK0h1WM9YsCJgVdTFW\n2y2fb3PHUZ1+j+rVX6hi8FzTKe2qOr1853Af67rcGuIC6f7VlFD4pGtRcJP8CbMV\nF6dUUSZN1jaF85/ZpF9ZINeD92dvxRxHunQlk1bw47Pd7ryVv2Y=\n=d84f\n-----END PGP SIGNATURE-----",
        "payload": "tree fcc79cea7db70df1e09704dfc3663e5d48de91f4\nparent 0cfc82849ea7ee1aa385a1e87bc92a46df364b9b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1525948465 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526016053 +0900\n\ntest: Add test cases for sending with constraints\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e96ca3e978bdc17325a55f8feedfac34b75ef072",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e96ca3e978bdc17325a55f8feedfac34b75ef072",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e96ca3e978bdc17325a55f8feedfac34b75ef072/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cfc82849ea7ee1aa385a1e87bc92a46df364b9b"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 135,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3e69be3e546e44b44c663d4d0eb2b9bc1cdec6fe",
        "filename": "test/functional/feature_send_constraints.py",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e96ca3e978bdc17325a55f8feedfac34b75ef072/test/functional/feature_send_constraints.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e96ca3e978bdc17325a55f8feedfac34b75ef072/test/functional/feature_send_constraints.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_send_constraints.py?ref=e96ca3e978bdc17325a55f8feedfac34b75ef072",
        "patch": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the constraints argument in send*\"\"\"\n+\n+import random\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+def sendtoaddress_fun(sender, receiver, amount, constraints):\n+    sender.sendtoaddress(address=receiver.getnewaddress(), amount=round(amount, 8), constraints=constraints)\n+\n+def sendmany_fun(sender, receiver, amount, constraints):\n+    sender.sendmany(dummy=\"\", amounts={receiver.getnewaddress(): round(Decimal(amount)/2, 8), receiver.getnewaddress(): round(Decimal(amount)/2, 8)}, constraints=constraints)\n+\n+class SendConstraintsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def prep(self, amounts):\n+        \"\"\"\n+        Prepare the given amounts in node 1 from node 0, then generate (confirm)\n+        and sync up.\n+        \"\"\"\n+        self.sync_all()\n+        [self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), i) for i in amounts]\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+    def iterate(self, fun, label, rpccode):\n+\n+        # Clean-up\n+        self.sync_all()\n+        n1b = self.nodes[1].getbalance()\n+        if n1b > 0.01:\n+            self.nodes[1].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=n1b, subtractfeefromamount=True)\n+            self.sync_all()\n+\n+        ########################\n+        # MAX INPUT CONSTRAINT #\n+        ########################\n+\n+        self.log.info(\"%s::test max input constraint\" % (label))\n+\n+        # Arrange 2 utxos in node 1\n+        self.prep([1.1, 2])\n+\n+        # Attempt to send 3 coins back to node 0 with max_inputs=1 - fails\n+        assert_raises_rpc_error(rpccode, \"Insufficient funds\", fun, self.nodes[1], self.nodes[0], 3, {\"max_inputs\":1})\n+\n+        # Attempt the same with max_inputs=2 - succeeds\n+        fun(self.nodes[1], self.nodes[0], 3, {\"max_inputs\":2})\n+\n+        # Arrange 3 utxos in node 1\n+        self.prep([1.1, 2, 100])\n+\n+        # Attempt to send 101 coins back to node 0 with max_inputs=1 - fails\n+        assert_raises_rpc_error(rpccode, \"Insufficient funds\", fun, self.nodes[1], self.nodes[0], 101, {\"max_inputs\":1})\n+\n+        # Attempt to send 3 coins back to node 0 with max_inputs=1 - succeeds\n+        fun(self.nodes[1], self.nodes[0], 3, {\"max_inputs\":1})\n+\n+        # node 1 should now have 1.1, 2, ~97\n+        # Attempt to send 100 coins with max_inputs=1..2 - fails\n+        assert_raises_rpc_error(rpccode, \"Insufficient funds\", fun, self.nodes[1], self.nodes[0], 100, {\"max_inputs\":1})\n+        assert_raises_rpc_error(rpccode, \"Insufficient funds\", fun, self.nodes[1], self.nodes[0], 100, {\"max_inputs\":2})\n+\n+        # Attempt to send 100 coins with max_inputs=3 - succeeds\n+        fun(self.nodes[1], self.nodes[0], 100, {\"max_inputs\":3})\n+\n+        ##############################\n+        # SELECTED INPUTS CONSTRAINT #\n+        ##############################\n+\n+        self.log.info(\"%s::test selected (whitelisted) input constraint (one input)\" % (label))\n+\n+        # Send some amounts to node 1\n+        self.prep([i + 1 for i in range(20)])\n+\n+        # Pick each and send it with arbitrary fee to node 0\n+        utxos = self.nodes[1].listunspent()\n+        utxolen = len(utxos)\n+        while utxolen > 0:\n+            idx = random.choice(range(utxolen))\n+            u = utxos[idx]\n+            del utxos[idx]\n+            utxolen -= 1\n+            txid = u[\"txid\"]\n+            vout = u[\"vout\"]\n+            amount = u[\"amount\"]\n+            if amount > 0.001:\n+                withfees = amount - Decimal(\"0.00010000\")\n+                fun(self.nodes[1], self.nodes[0], withfees, {\"inputs\":[{\"txid\":txid,\"vout\":vout}]})\n+\n+        self.log.info(\"%s::test selected (whitelisted) input constraint (two inputs)\" % (label))\n+\n+        # Send some amounts to node 1 again\n+        self.prep([i + 1 for i in range(20)])\n+\n+        # Pick two at a time and send with arbitrary fee to node 0\n+        utxos = self.nodes[1].listunspent()\n+        utxolen = len(utxos)\n+        while utxolen > 1:\n+            idx = random.choice(range(utxolen))\n+            u = utxos[idx]\n+            del utxos[idx]\n+            utxolen -= 1\n+            idx = random.choice(range(utxolen))\n+            u2 = utxos[idx]\n+            del utxos[idx]\n+            utxolen -= 1\n+            txid = u[\"txid\"]\n+            vout = u[\"vout\"]\n+            amount = u[\"amount\"]\n+            txid2 = u2[\"txid\"]\n+            vout2 = u2[\"vout\"]\n+            amount2 = u2[\"amount\"]\n+            if amount + amount2 > 0.001:\n+                withfees = amount + amount2 - Decimal(\"0.00010000\")\n+                fun(self.nodes[1], self.nodes[0], withfees, {\"inputs\":[{\"txid\":txid,\"vout\":vout}, {\"txid\":txid2,\"vout\":vout2}]})\n+\n+    def run_test(self):\n+        self.nodes[0].generate(110)\n+        self.iterate(sendtoaddress_fun, \"sendtoaddress\", -4)\n+        self.iterate(sendmany_fun, \"sendmany\", -6)\n+\n+if __name__ == '__main__':\n+    SendConstraintsTest().main()"
      },
      {
        "sha": "f12d928b2b0804c9904d57502570c3e82496ec96",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e96ca3e978bdc17325a55f8feedfac34b75ef072/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e96ca3e978bdc17325a55f8feedfac34b75ef072/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e96ca3e978bdc17325a55f8feedfac34b75ef072",
        "patch": "@@ -101,6 +101,7 @@\n     'interface_http.py',\n     'rpc_users.py',\n     'feature_proxy.py',\n+    'feature_send_constraints.py',\n     'rpc_signrawtransaction.py',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',"
      }
    ]
  }
]