[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584382373",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-584382373",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18112",
    "id": 584382373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDM4MjM3Mw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-10T22:10:04Z",
    "updated_at": "2020-02-14T00:19:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584382373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585869249",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-585869249",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18112",
    "id": 585869249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTg2OTI0OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-13T17:16:35Z",
    "updated_at": "2020-02-13T17:16:35Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585869249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586666028",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-586666028",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18112",
    "id": 586666028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjY2NjAyOA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-16T03:56:02Z",
    "updated_at": "2020-02-16T03:56:02Z",
    "author_association": "MEMBER",
    "body": "@ryanofsky That's amazing, it looks so much cleaner than my approach. I've taken your code and restructured it as commits in this PR.\r\n\r\nI've also replaced `Uint48Formatter` with a `CustomUintFormatter` in serialize.h instead, as a separate commit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586666028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593498483",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-593498483",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18112",
    "id": 593498483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzQ5ODQ4Mw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-02T16:45:43Z",
    "updated_at": "2020-03-02T16:45:43Z",
    "author_association": "MEMBER",
    "body": "ACK 353f376277ad9b87e03c9ccbc1028c4b6d12e8ea, nice change\r\nThanks @ryanofsky for the suggestion making it even more concise.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593498483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379142464",
    "pull_request_review_id": 358581908,
    "id": 379142464,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MjQ2NA==",
    "diff_hunk": "@@ -547,21 +547,29 @@ class BigEndian\n     }\n };\n \n-class CCompactSize\n+/** Formatter for integers in CompactSize format. */\n+struct CompactSizeFormatter\n {\n-protected:\n-    uint64_t &n;\n-public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 25,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "99fa6174c51fc62dbe966498b5c528532bcc30e7",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert CCompactSize to proper formatter\" (8b8ebf016c1de3c3827beff7666c0adb628355bf)\r\n\r\nI'd consider dropping the static asserts here, because they don't really make sense for deserializing (they do make sense in the `Ser` function below). I don't thinks a reason to disallow deserializing into variables wider than 64 bits or signed variables if the value fits.",
    "created_at": "2020-02-13T21:58:42Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379142464",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379142464"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379142464"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379142464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 556,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 557,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379144218",
    "pull_request_review_id": 358581908,
    "id": 379144218,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NDIxOA==",
    "diff_hunk": "@@ -547,21 +547,29 @@ class BigEndian\n     }\n };\n \n-class CCompactSize\n+/** Formatter for integers in CompactSize format. */\n+struct CompactSizeFormatter\n {\n-protected:\n-    uint64_t &n;\n-public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 31,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "99fa6174c51fc62dbe966498b5c528532bcc30e7",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert CCompactSize to proper formatter\" (8b8ebf016c1de3c3827beff7666c0adb628355bf)\r\n\r\nIt's unlikely to make a difference in practice unless `I` is some crazy type that starts above 0, but I'd add `|| n < std::numeric_limits<I>::min()` to be complete here",
    "created_at": "2020-02-13T22:02:19Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379144218",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379144218"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379144218"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379144218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 560,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379149016",
    "pull_request_review_id": 358581908,
    "id": 379149016,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTAxNg==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 9,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nI think you could drop this class and use DefaultFormatter below instead",
    "created_at": "2020-02-13T22:13:25Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379149016",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379149016"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379149016"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379149016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 14,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379162025",
    "pull_request_review_id": 358581908,
    "id": 379162025,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MjAyNQ==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 20,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nWould drop these lines. There should be no problem serializing a value smaller than 48 bits as 48 bits (or serializing a signed value value that's positive). I think a runtime check would be more appropriate:\r\n\r\n```c++\r\nif (v >> 48 || v < 0) {\r\n    throw std::ios_base::failure(\"Uint48Formatter value out of range\");\r\n}\r\n```",
    "created_at": "2020-02-13T22:46:21Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379162025",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379162025"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379162025"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379162025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 24,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379583265",
    "pull_request_review_id": 358581908,
    "id": 379583265,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4MzI2NQ==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 31,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nThese checks seem too strict. Could just check for a big enough range and not care about the format\r\n\r\n```c++\r\nstatic_assert(std::numeric_limits<I>::max() >= 0xffffffffffff && std::numeric_limits<I>::min() <= 0, \"Uint48Formatter needs a 48+ bit type\");\r\n```\r\n\r\n",
    "created_at": "2020-02-14T18:36:41Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379583265",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379583265"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379583265"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379583265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 34,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379587383",
    "pull_request_review_id": 358581908,
    "id": 379587383,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NzM4Mw==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        v = (uint64_t(msb) << 32) | uint64_t(lsb);\n+    }\n+};\n+\n+struct DifferentialSerTransform\n+{\n+    uint16_t m_subtract = 0;\n+\n+    uint16_t operator()(uint16_t val)\n+    {\n+        uint16_t tmp = val - m_subtract;",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 49,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nShould this raise an error if `val <= tmp`? It seems like the serializer shouldn't create a sequence that the deserializer would reject.",
    "created_at": "2020-02-14T18:46:28Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379587383",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379587383"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379587383"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379587383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379601414",
    "pull_request_review_id": 358581908,
    "id": 379601414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTQxNA==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        v = (uint64_t(msb) << 32) | uint64_t(lsb);\n+    }\n+};\n+\n+struct DifferentialSerTransform\n+{\n+    uint16_t m_subtract = 0;\n+\n+    uint16_t operator()(uint16_t val)",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 47,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nMaybe not worth extra effort or complexity, but I think the transforms would be safer and actually more understandable if they were templated. Safer because by hardcoding uint16_t as the sequence and diff types, lets c++ get away with truncating wider values to 16 bits with no checking. I think the ideal would look something like:\r\n\r\n```c++\r\ntemplate<typename DT> struct DifferentialSerTransform {\r\n   template<typename T> DT operator()(T val);\r\n};\r\n\r\ntemplate<typename T> struct DifferentialUnserTransform {\r\n  template<typename DT> T operator()(DT diff);\r\n};\r\n```",
    "created_at": "2020-02-14T19:18:51Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379601414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379601414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379601414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379601414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379623376",
    "pull_request_review_id": 358581908,
    "id": 379623376,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMzM3Ng==",
    "diff_hunk": "@@ -105,16 +103,22 @@ struct PrefilledTransaction {\n     uint16_t index;\n     CTransactionRef tx;\n \n-    ADD_SERIALIZE_METHODS;\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << COMPACTSIZE(index) << Using<TransactionCompression>(tx);\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        uint64_t idx = index;\n-        READWRITE(COMPACTSIZE(idx));\n-        if (idx > std::numeric_limits<uint16_t>::max())\n+    template<typename Stream>\n+    void Unserialize(Stream& s)",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 158,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nThere should be no need to have custom serialize and deserialize methods, and do overflow checking with a temporary variable now that `CompactSizeFormatter` has the same checking. The following seems to be sufficient:\r\n\r\n```c++\r\nSERIALIZE_METHODS(PrefilledTransaction, obj) { READWRITE(COMPACTSIZE(obj.index), obj.tx); }\r\n```",
    "created_at": "2020-02-14T20:10:41Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379623376",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379623376"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379623376"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379623376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 95,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379630763",
    "pull_request_review_id": 358581908,
    "id": 379630763,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMDc2Mw==",
    "diff_hunk": "@@ -153,43 +157,21 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << Using<VectorFormatter<Uint48Formatter>>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> Using<VectorFormatter<Uint48Formatter>>(shorttxids) >> prefilledtxn;",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 217,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings.h to new serialization framework\" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\r\n\r\nMaybe a matter of preference, but it might be nice to avoid needing to repeat `s << header...`  `ss >> header...` serialization order. Could do:\r\n\r\n```c++\r\nSERIALIZE_METHODS(CBlockHeaderAndShortTxIDs, obj)\r\n{\r\n    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\r\n    READWRITE(obj.header, obj.nonce, Using<VectorFormatter<Uint48Formatter>>(obj.shorttxids), obj.prefilledtxn);\r\n    if (ser_action.ForRead()) {\r\n        if (obj.BlockTxCount() > std::numeric_limits<uint16_t>::max()) {\r\n            throw std::ios_base::failure(\"indexes overflowed 16 bits\");\r\n        }\r\n        obj.FillShortTxIDSelector();\r\n    }\r\n}\r\n```",
    "created_at": "2020-02-14T20:29:55Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379630763",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379630763"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379630763"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379630763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 136,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714117",
    "pull_request_review_id": 359300467,
    "id": 379714117,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDExNw==",
    "diff_hunk": "@@ -547,21 +547,29 @@ class BigEndian\n     }\n };\n \n-class CCompactSize\n+/** Formatter for integers in CompactSize format. */\n+struct CompactSizeFormatter\n {\n-protected:\n-    uint64_t &n;\n-public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 25,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "99fa6174c51fc62dbe966498b5c528532bcc30e7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-02-15T03:24:10Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714117",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714117"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714117"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 556,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 557,
    "side": "RIGHT",
    "in_reply_to_id": 379142464
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714125",
    "pull_request_review_id": 359300474,
    "id": 379714125,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDEyNQ==",
    "diff_hunk": "@@ -547,21 +547,29 @@ class BigEndian\n     }\n };\n \n-class CCompactSize\n+/** Formatter for integers in CompactSize format. */\n+struct CompactSizeFormatter\n {\n-protected:\n-    uint64_t &n;\n-public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 31,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "99fa6174c51fc62dbe966498b5c528532bcc30e7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-02-15T03:24:18Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714125",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714125"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714125"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 560,
    "side": "RIGHT",
    "in_reply_to_id": 379144218
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714138",
    "pull_request_review_id": 359300500,
    "id": 379714138,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDEzOA==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 9,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, by adding a type alias (keeping it obvious where new implementations would go).",
    "created_at": "2020-02-15T03:24:44Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714138",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714138"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714138"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 14,
    "side": "RIGHT",
    "in_reply_to_id": 379149016
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714139",
    "pull_request_review_id": 359300502,
    "id": 379714139,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDEzOQ==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 20,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-02-15T03:24:52Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714139",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714139"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714139"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 24,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 379162025
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714197",
    "pull_request_review_id": 359300542,
    "id": 379714197,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDE5Nw==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        v = (uint64_t(msb) << 32) | uint64_t(lsb);\n+    }\n+};\n+\n+struct DifferentialSerTransform\n+{\n+    uint16_t m_subtract = 0;\n+\n+    uint16_t operator()(uint16_t val)\n+    {\n+        uint16_t tmp = val - m_subtract;",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 49,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the code is written assuming that the data fed to the serializer is sane.\r\n\r\nI've merged the two differential transforms into one; I think this is more readable too.",
    "created_at": "2020-02-15T03:25:54Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714197",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714197"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714197"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 379587383
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714278",
    "pull_request_review_id": 359300601,
    "id": 379714278,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDI3OA==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        v = (uint64_t(msb) << 32) | uint64_t(lsb);\n+    }\n+};\n+\n+struct DifferentialSerTransform\n+{\n+    uint16_t m_subtract = 0;\n+\n+    uint16_t operator()(uint16_t val)",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 47,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That doesn't really work, because `VectorFormatter` needs the input and output of the transform to be identical (or at least compatible)...  suspect there is a way to make it infer what the input type to the transform on deserialization is, but right now, it creates a `V::value_type` to deserialize into.",
    "created_at": "2020-02-15T03:27:30Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714278",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714278"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714278"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT",
    "in_reply_to_id": 379601414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714290",
    "pull_request_review_id": 359300610,
    "id": 379714290,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDI5MA==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 31,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-02-15T03:27:39Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714290",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714290"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714290"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 34,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 379583265
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714574",
    "pull_request_review_id": 359300868,
    "id": 379714574,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDU3NA==",
    "diff_hunk": "@@ -105,16 +103,22 @@ struct PrefilledTransaction {\n     uint16_t index;\n     CTransactionRef tx;\n \n-    ADD_SERIALIZE_METHODS;\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << COMPACTSIZE(index) << Using<TransactionCompression>(tx);\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        uint64_t idx = index;\n-        READWRITE(COMPACTSIZE(idx));\n-        if (idx > std::numeric_limits<uint16_t>::max())\n+    template<typename Stream>\n+    void Unserialize(Stream& s)",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 158,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice, done!",
    "created_at": "2020-02-15T03:34:03Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714574",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714574"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714574"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 95,
    "side": "RIGHT",
    "in_reply_to_id": 379623376
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714783",
    "pull_request_review_id": 359301046,
    "id": 379714783,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDc4Mw==",
    "diff_hunk": "@@ -153,43 +157,21 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << Using<VectorFormatter<Uint48Formatter>>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> Using<VectorFormatter<Uint48Formatter>>(shorttxids) >> prefilledtxn;",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 217,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah indeed, that works because `shorttxidkX` are mutable, which they probably shouldn't be. But no need to fix that here.\r\n\r\nDone.",
    "created_at": "2020-02-15T03:38:58Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714783",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714783"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714783"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379714783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 136,
    "side": "RIGHT",
    "in_reply_to_id": 379630763
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379873178",
    "pull_request_review_id": 359378669,
    "id": 379873178,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3MzE3OA==",
    "diff_hunk": "@@ -11,17 +11,60 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n+};\n+\n+struct Uint48Formatter\n+{\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n+\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48Formatter needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48Formatter needs a 48+ bit type\");\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        v = (uint64_t(msb) << 32) | uint64_t(lsb);\n+    }\n+};\n+\n+struct DifferentialSerTransform\n+{\n+    uint16_t m_subtract = 0;\n+\n+    uint16_t operator()(uint16_t val)",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 47,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "f3480e04d7d8973a715037b58adbb1457b12109a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No longer relevant in new code.",
    "created_at": "2020-02-16T03:53:40Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379873178",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379873178"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379873178"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379873178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT",
    "in_reply_to_id": 379601414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383402583",
    "pull_request_review_id": 363563041,
    "id": 383402583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMjU4Mw==",
    "diff_hunk": "@@ -513,6 +513,28 @@ struct VarIntFormatter\n     }\n };\n \n+template<int Bytes>\n+struct CustomUintFormatter\n+{\n+    static_assert(Bytes > 0 && Bytes <= 8, \"CustomUintFormatter Bytes out of range\");\n+    static constexpr uint64_t MASK = 0xffffffffffffffff >> (8 * (8 - Bytes));\n+\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        if (v < 0 || (v & ~I(MASK)) != 0) throw std::ios_base::failure(\"CustomUintFormatter value out of range\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 12,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "96b18829d750baea8577cf409d85c0cd5186b67c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add CustomUintFormatter\" (96b18829d750baea8577cf409d85c0cd5186b67c)\r\n\r\nCould replace `(v & ~I(MASK)) != 0` with `v <= MASK` to be more consistent with other assert and avoid making an assumption about representation of `v`.",
    "created_at": "2020-02-24T17:21:13Z",
    "updated_at": "2020-02-25T22:10:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r383402583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383402583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r383402583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383402583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 524,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384157716",
    "pull_request_review_id": 364487398,
    "id": 384157716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1NzcxNg==",
    "diff_hunk": "@@ -513,6 +513,28 @@ struct VarIntFormatter\n     }\n };\n \n+template<int Bytes>\n+struct CustomUintFormatter\n+{\n+    static_assert(Bytes > 0 && Bytes <= 8, \"CustomUintFormatter Bytes out of range\");\n+    static constexpr uint64_t MASK = 0xffffffffffffffff >> (8 * (8 - Bytes));\n+\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        if (v < 0 || (v & ~I(MASK)) != 0) throw std::ios_base::failure(\"CustomUintFormatter value out of range\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 12,
    "commit_id": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "original_commit_id": "96b18829d750baea8577cf409d85c0cd5186b67c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, also renamed MASK to MAX.",
    "created_at": "2020-02-25T22:11:20Z",
    "updated_at": "2020-02-25T22:11:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r384157716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384157716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18112#discussion_r384157716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18112"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384157716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 524,
    "side": "RIGHT",
    "in_reply_to_id": 383402583
  }
]