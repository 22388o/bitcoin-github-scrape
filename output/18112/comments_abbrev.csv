DrahtBot,2020-02-10 22:10:04,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-584382373,584382373,
sipa,2020-02-13 17:16:35,Rebased.,https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-585869249,585869249,
sipa,2020-02-16 03:56:02,"@ryanofsky That's amazing, it looks so much cleaner than my approach. I've taken your code and restructured it as commits in this PR.\n\nI've also replaced `Uint48Formatter` with a `CustomUintFormatter` in serialize.h instead, as a separate commit.",https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-586666028,586666028,
laanwj,2020-03-02 16:45:43,"ACK 353f376277ad9b87e03c9ccbc1028c4b6d12e8ea, nice change\nThanks @ryanofsky for the suggestion making it even more concise.",https://github.com/bitcoin/bitcoin/pull/18112#issuecomment-593498483,593498483,
ryanofsky,2020-02-13 21:58:42,"In commit ""Convert CCompactSize to proper formatter"" (8b8ebf016c1de3c3827beff7666c0adb628355bf)\n\nI'd consider dropping the static asserts here, because they don't really make sense for deserializing (they do make sense in the `Ser` function below). I don't thinks a reason to disallow deserializing into variables wider than 64 bits or signed variables if the value fits.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379142464,379142464,src/serialize.h
ryanofsky,2020-02-13 22:02:19,"In commit ""Convert CCompactSize to proper formatter"" (8b8ebf016c1de3c3827beff7666c0adb628355bf)\n\nIt's unlikely to make a difference in practice unless `I` is some crazy type that starts above 0, but I'd add `|| n < std::numeric_limits<I>::min()` to be complete here",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379144218,379144218,src/serialize.h
ryanofsky,2020-02-13 22:13:25,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nI think you could drop this class and use DefaultFormatter below instead",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379149016,379149016,src/blockencodings.h
ryanofsky,2020-02-13 22:46:21,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nWould drop these lines. There should be no problem serializing a value smaller than 48 bits as 48 bits (or serializing a signed value value that's positive). I think a runtime check would be more appropriate:\n\n```c++\nif (v >> 48 || v < 0) {\n    throw std::ios_base::failure(""U",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379162025,379162025,src/blockencodings.h
ryanofsky,2020-02-14 18:36:41,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nThese checks seem too strict. Could just check for a big enough range and not care about the format\n\n```c++\nstatic_assert(std::numeric_limits<I>::max() >= 0xffffffffffff && std::numeric_limits<I>::min() <= 0, ""Uint48Formatter needs a 48+ bit type"");\n```\n\n",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379583265,379583265,src/blockencodings.h
ryanofsky,2020-02-14 18:46:28,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nShould this raise an error if `val <= tmp`? It seems like the serializer shouldn't create a sequence that the deserializer would reject.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379587383,379587383,src/blockencodings.h
ryanofsky,2020-02-14 19:18:51,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nMaybe not worth extra effort or complexity, but I think the transforms would be safer and actually more understandable if they were templated. Safer because by hardcoding uint16_t as the sequence and diff types, lets c++ get away with truncating wider values to 16 bits with no checki",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379601414,379601414,src/blockencodings.h
ryanofsky,2020-02-14 20:10:41,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nThere should be no need to have custom serialize and deserialize methods, and do overflow checking with a temporary variable now that `CompactSizeFormatter` has the same checking. The following seems to be sufficient:\n\n```c++\nSERIALIZE_METHODS(PrefilledTransaction, obj) { READW",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379623376,379623376,src/blockencodings.h
ryanofsky,2020-02-14 20:29:55,"In commit ""Convert blockencodings.h to new serialization framework"" (d46dfeccaf1992ba92bff7e0d4988ae3f66b327a)\n\nMaybe a matter of preference, but it might be nice to avoid needing to repeat `s << header...`  `ss >> header...` serialization order. Could do:\n\n```c++\nSERIALIZE_METHODS(CBlockHeaderAndShortTxIDs, obj)\n{\n    static_assert(SHORTTXIDS_LENGTH == 6, ""shorttxids serialization a",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379630763,379630763,src/blockencodings.h
sipa,2020-02-15 03:24:10,Done.,https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714117,379714117,src/serialize.h
sipa,2020-02-15 03:24:18,Done.,https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714125,379714125,src/serialize.h
sipa,2020-02-15 03:24:44,"Done, by adding a type alias (keeping it obvious where new implementations would go).",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714138,379714138,src/blockencodings.h
sipa,2020-02-15 03:24:52,Done.,https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714139,379714139,src/blockencodings.h
sipa,2020-02-15 03:25:54,"I think the code is written assuming that the data fed to the serializer is sane.\n\nI've merged the two differential transforms into one; I think this is more readable too.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714197,379714197,src/blockencodings.h
sipa,2020-02-15 03:27:30,"That doesn't really work, because `VectorFormatter` needs the input and output of the transform to be identical (or at least compatible)...  suspect there is a way to make it infer what the input type to the transform on deserialization is, but right now, it creates a `V::value_type` to deserialize into.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714278,379714278,src/blockencodings.h
sipa,2020-02-15 03:27:39,Done.,https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714290,379714290,src/blockencodings.h
sipa,2020-02-15 03:34:03,"Nice, done!",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714574,379714574,src/blockencodings.h
sipa,2020-02-15 03:38:58,"Ah indeed, that works because `shorttxidkX` are mutable, which they probably shouldn't be. But no need to fix that here.\n\nDone.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379714783,379714783,src/blockencodings.h
sipa,2020-02-16 03:53:40,No longer relevant in new code.,https://github.com/bitcoin/bitcoin/pull/18112#discussion_r379873178,379873178,src/blockencodings.h
ryanofsky,2020-02-24 17:21:13,"In commit ""Add CustomUintFormatter"" (96b18829d750baea8577cf409d85c0cd5186b67c)\n\nCould replace `(v & ~I(MASK)) != 0` with `v <= MASK` to be more consistent with other assert and avoid making an assumption about representation of `v`.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r383402583,383402583,src/serialize.h
sipa,2020-02-25 22:11:20,"Done, also renamed MASK to MAX.",https://github.com/bitcoin/bitcoin/pull/18112#discussion_r384157716,384157716,src/serialize.h
