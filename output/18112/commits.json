[
  {
    "sha": "3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2E1NzRjZWYwYjQ0MjNmMjFiMmMzZWZkOGY1YzlmNzFkNTJmMjE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-04T03:49:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-15T03:22:39Z"
      },
      "message": "Convert CCompactSize to proper formatter",
      "tree": {
        "sha": "1fa046d2fb7193492dacb4ab27456bd096654440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fa046d2fb7193492dacb4ab27456bd096654440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c20809da85ac708386fa1ca80f7242917f90761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c20809da85ac708386fa1ca80f7242917f90761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c20809da85ac708386fa1ca80f7242917f90761"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 18,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e0e29bcf4a3f28ffd69ec75837faeb5d48c17a11",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
        "patch": "@@ -495,7 +495,7 @@ static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&\n \n #define VARINT_MODE(obj, mode) Using<VarIntFormatter<mode>>(obj)\n #define VARINT(obj) Using<VarIntFormatter<VarIntMode::DEFAULT>>(obj)\n-#define COMPACTSIZE(obj) CCompactSize(REF(obj))\n+#define COMPACTSIZE(obj) Using<CompactSizeFormatter>(obj)\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n \n /** Serialization wrapper class for integers in VarInt format. */\n@@ -547,21 +547,26 @@ class BigEndian\n     }\n };\n \n-class CCompactSize\n+/** Formatter for integers in CompactSize format. */\n+struct CompactSizeFormatter\n {\n-protected:\n-    uint64_t &n;\n-public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n-\n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n < std::numeric_limits<I>::min() || n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        v = n;\n     }\n \n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    template<typename Stream, typename I>\n+    void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+\n+        WriteCompactSize<Stream>(s, v);\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "56dd9f04c701aa3ac340e95065bf83de20373c8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmRkOWYwNGM3MDFhYTNhYzM0MGU5NTA2NWJmODNkZTIwMzczYzhi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-16T03:09:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-16T03:49:24Z"
      },
      "message": "Make VectorFormatter support stateful formatters",
      "tree": {
        "sha": "d8515059063517e9b2388efb54e365152af1a77b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8515059063517e9b2388efb54e365152af1a77b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56dd9f04c701aa3ac340e95065bf83de20373c8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56dd9f04c701aa3ac340e95065bf83de20373c8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56dd9f04c701aa3ac340e95065bf83de20373c8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56dd9f04c701aa3ac340e95065bf83de20373c8b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca574cef0b4423f21b2c3efd8f5c9f71d52f219"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6d690e7f96f160145e0acb8e73f4a6f6840df464",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56dd9f04c701aa3ac340e95065bf83de20373c8b/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56dd9f04c701aa3ac340e95065bf83de20373c8b/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=56dd9f04c701aa3ac340e95065bf83de20373c8b",
        "patch": "@@ -424,15 +424,20 @@ class prevector {\n         return first;\n     }\n \n-    void push_back(const T& value) {\n+    template<typename... Args>\n+    void emplace_back(Args&&... args) {\n         size_type new_size = size() + 1;\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        new(item_ptr(size())) T(value);\n+        new(item_ptr(size())) T(std::forward<Args>(args)...);\n         _size++;\n     }\n \n+    void push_back(const T& value) {\n+        emplace_back(value);\n+    }\n+\n     void pop_back() {\n         erase(end() - 1, end());\n     }"
      },
      {
        "sha": "d7d1be7c4b54893edae1a8e2bb1f2bf7e853e174",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56dd9f04c701aa3ac340e95065bf83de20373c8b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56dd9f04c701aa3ac340e95065bf83de20373c8b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=56dd9f04c701aa3ac340e95065bf83de20373c8b",
        "patch": "@@ -613,23 +613,25 @@ BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n  * as a vector of VarInt-encoded integers.\n  *\n  * V is not required to be an std::vector type. It works for any class that\n- * exposes a value_type, size, reserve, push_back, and const iterators.\n+ * exposes a value_type, size, reserve, emplace_back, back, and const iterators.\n  */\n template<class Formatter>\n struct VectorFormatter\n {\n     template<typename Stream, typename V>\n     void Ser(Stream& s, const V& v)\n     {\n+        Formatter formatter;\n         WriteCompactSize(s, v.size());\n         for (const typename V::value_type& elem : v) {\n-            s << Using<Formatter>(elem);\n+            formatter.Ser(s, elem);\n         }\n     }\n \n     template<typename Stream, typename V>\n     void Unser(Stream& s, V& v)\n     {\n+        Formatter formatter;\n         v.clear();\n         size_t size = ReadCompactSize(s);\n         size_t allocated = 0;\n@@ -641,9 +643,8 @@ struct VectorFormatter\n             allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));\n             v.reserve(allocated);\n             while (v.size() < allocated) {\n-                typename V::value_type val;\n-                s >> Using<Formatter>(val);\n-                v.push_back(std::move(val));\n+                v.emplace_back();\n+                formatter.Unser(s, v.back());\n             }\n         }\n     };"
      }
    ]
  },
  {
    "sha": "10633398f2dddf929d3f535aa48d138ad5e6c50f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDYzMzM5OGYyZGRkZjkyOWQzZjUzNWFhNDhkMTM4YWQ1ZTZjNTBm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-16T03:05:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-16T03:49:24Z"
      },
      "message": "Add DifferenceFormatter",
      "tree": {
        "sha": "c0f0d66e2920d53d43fca2fdd0596b0a4f8afe55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0f0d66e2920d53d43fca2fdd0596b0a4f8afe55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10633398f2dddf929d3f535aa48d138ad5e6c50f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10633398f2dddf929d3f535aa48d138ad5e6c50f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10633398f2dddf929d3f535aa48d138ad5e6c50f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10633398f2dddf929d3f535aa48d138ad5e6c50f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56dd9f04c701aa3ac340e95065bf83de20373c8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56dd9f04c701aa3ac340e95065bf83de20373c8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56dd9f04c701aa3ac340e95065bf83de20373c8b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "606c11b417116f2246d81543e7e57988e23d2c07",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10633398f2dddf929d3f535aa48d138ad5e6c50f/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10633398f2dddf929d3f535aa48d138ad5e6c50f/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=10633398f2dddf929d3f535aa48d138ad5e6c50f",
        "patch": "@@ -25,6 +25,28 @@ struct TransactionCompressor {\n     }\n };\n \n+class DifferenceFormatter\n+{\n+    uint64_t m_shift = 0;\n+\n+public:\n+    template<typename Stream, typename I>\n+    void Ser(Stream& s, I v)\n+    {\n+        if (v < m_shift || v >= std::numeric_limits<uint64_t>::max()) throw std::ios_base::failure(\"differential value overflow\");\n+        WriteCompactSize(s, v - m_shift);\n+        m_shift = uint64_t(v) + 1;\n+    }\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        uint64_t n = ReadCompactSize(s);\n+        m_shift += n;\n+        if (m_shift < n || m_shift >= std::numeric_limits<uint64_t>::max() || m_shift < std::numeric_limits<I>::min() || m_shift > std::numeric_limits<I>::max()) throw std::ios_base::failure(\"differential value overflow\");\n+        v = I(m_shift++);\n+    }\n+};\n+\n class BlockTransactionsRequest {\n public:\n     // A BlockTransactionsRequest message"
      }
    ]
  },
  {
    "sha": "e574fff53eec4a27c83b765cb69e31d8399047ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTc0ZmZmNTNlZWM0YTI3YzgzYjc2NWNiNjllMzFkODM5OTA0N2Vh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-16T03:48:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-25T22:10:38Z"
      },
      "message": "Add CustomUintFormatter",
      "tree": {
        "sha": "a50fc863df6e4bfaa6d671dcedb43460083528d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a50fc863df6e4bfaa6d671dcedb43460083528d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e574fff53eec4a27c83b765cb69e31d8399047ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e574fff53eec4a27c83b765cb69e31d8399047ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e574fff53eec4a27c83b765cb69e31d8399047ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e574fff53eec4a27c83b765cb69e31d8399047ea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10633398f2dddf929d3f535aa48d138ad5e6c50f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10633398f2dddf929d3f535aa48d138ad5e6c50f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10633398f2dddf929d3f535aa48d138ad5e6c50f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2e4b14e5862e05c731c554e62eaf630d141377c5",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e574fff53eec4a27c83b765cb69e31d8399047ea/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e574fff53eec4a27c83b765cb69e31d8399047ea/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=e574fff53eec4a27c83b765cb69e31d8399047ea",
        "patch": "@@ -513,6 +513,28 @@ struct VarIntFormatter\n     }\n };\n \n+template<int Bytes>\n+struct CustomUintFormatter\n+{\n+    static_assert(Bytes > 0 && Bytes <= 8, \"CustomUintFormatter Bytes out of range\");\n+    static constexpr uint64_t MAX = 0xffffffffffffffff >> (8 * (8 - Bytes));\n+\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        if (v < 0 || v > MAX) throw std::ios_base::failure(\"CustomUintFormatter value out of range\");\n+        uint64_t raw = htole64(v);\n+        s.write((const char*)&raw, Bytes);\n+    }\n+\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::numeric_limits<I>::max() >= MAX && std::numeric_limits<I>::min() <= 0, \"CustomUintFormatter type too small\");\n+        uint64_t raw = 0;\n+        s.read((char*)&raw, Bytes);\n+        v = le64toh(raw);\n+    }\n+};\n+\n /** Serialization wrapper class for big-endian integers.\n  *\n  * Use this wrapper around integer types that are stored in memory in native"
      }
    ]
  },
  {
    "sha": "353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTNmMzc2Mjc3YWQ5Yjg3ZTAzYzljY2JjMTAyOGM0YjZkMTJlOGVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-04T03:41:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-25T22:10:44Z"
      },
      "message": "Convert blockencodings.h to new serialization framework",
      "tree": {
        "sha": "dad0c3dd5be51cf94765985aa156e0b7d8bfb786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dad0c3dd5be51cf94765985aa156e0b7d8bfb786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/353f376277ad9b87e03c9ccbc1028c4b6d12e8ea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e574fff53eec4a27c83b765cb69e31d8399047ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e574fff53eec4a27c83b765cb69e31d8399047ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e574fff53eec4a27c83b765cb69e31d8399047ea"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 16,
      "deletions": 110
    },
    "files": [
      {
        "sha": "be50166cfc6014b9ad27c0c15bda4580e5bcb521",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 16,
        "deletions": 110,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/353f376277ad9b87e03c9ccbc1028c4b6d12e8ea/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/353f376277ad9b87e03c9ccbc1028c4b6d12e8ea/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=353f376277ad9b87e03c9ccbc1028c4b6d12e8ea",
        "patch": "@@ -10,20 +10,9 @@\n \n class CTxMemPool;\n \n-// Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n-    }\n-};\n+// Transaction compression schemes for compact block relay can be introduced by writing\n+// an actual formatter here.\n+using TransactionCompression = DefaultFormatter;\n \n class DifferenceFormatter\n {\n@@ -53,39 +42,9 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n-        uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            int32_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (int32_t(indexes[j]) + offset > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = int32_t(indexes[j]) + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n-        }\n+    SERIALIZE_METHODS(BlockTransactionsRequest, obj)\n+    {\n+        READWRITE(obj.blockhash, Using<VectorFormatter<DifferenceFormatter>>(obj.indexes));\n     }\n };\n \n@@ -99,24 +58,9 @@ class BlockTransactions {\n     explicit BlockTransactions(const BlockTransactionsRequest& req) :\n         blockhash(req.blockhash), txn(req.indexes.size()) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n-        uint64_t txn_size = (uint64_t)txn.size();\n-        READWRITE(COMPACTSIZE(txn_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (txn.size() < txn_size) {\n-                txn.resize(std::min((uint64_t)(1000 + txn.size()), txn_size));\n-                for (; i < txn.size(); i++)\n-                    READWRITE(TransactionCompressor(txn[i]));\n-            }\n-        } else {\n-            for (size_t i = 0; i < txn.size(); i++)\n-                READWRITE(TransactionCompressor(txn[i]));\n-        }\n+    SERIALIZE_METHODS(BlockTransactions, obj)\n+    {\n+        READWRITE(obj.blockhash, Using<VectorFormatter<TransactionCompression>>(obj.txn));\n     }\n };\n \n@@ -127,17 +71,7 @@ struct PrefilledTransaction {\n     uint16_t index;\n     CTransactionRef tx;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        uint64_t idx = index;\n-        READWRITE(COMPACTSIZE(idx));\n-        if (idx > std::numeric_limits<uint16_t>::max())\n-            throw std::ios_base::failure(\"index overflowed 16-bits\");\n-        index = idx;\n-        READWRITE(TransactionCompressor(tx));\n-    }\n+    SERIALIZE_METHODS(PrefilledTransaction, obj) { READWRITE(COMPACTSIZE(obj.index), Using<TransactionCompression>(obj.tx)); }\n };\n \n typedef enum ReadStatus_t\n@@ -175,43 +109,15 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n+    SERIALIZE_METHODS(CBlockHeaderAndShortTxIDs, obj)\n+    {\n+        READWRITE(obj.header, obj.nonce, Using<VectorFormatter<CustomUintFormatter<SHORTTXIDS_LENGTH>>>(obj.shorttxids), obj.prefilledtxn);\n         if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n+            if (obj.BlockTxCount() > std::numeric_limits<uint16_t>::max()) {\n+                throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n             }\n+            obj.FillShortTxIDSelector();\n         }\n-\n-        READWRITE(prefilledtxn);\n-\n-        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n-            throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-\n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n     }\n };\n "
      }
    ]
  }
]