[
  {
    "sha": "3d796f89962842e91e7d88e57c1d2d579f01052e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDc5NmY4OTk2Mjg0MmU5MWU3ZDg4ZTU3YzFkMmQ1NzlmMDEwNTJl",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-20T06:42:31Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-31T00:14:20Z"
      },
      "message": "overhaul serialization code\n\nThe implementation of each class' serialization/deserialization is no longer\npassed within a macro. The implementation now lies within a template of form:\n\ntemplate <typename T, typename Stream, typename Operation>\ninline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n    size_t nSerSize = 0;\n    /* CODE */\n    return nSerSize;\n}\n\nIn cases when codepath should depend on whether or not we are just deserializing\n(old fGetSize, fWrite, fRead flags) an additional clause can be used:\nbool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n\nThe IMPLEMENT_SERIALIZE macro will now be a freestanding clause added within\nclass' body (similiar to Qt's Q_OBJECT) to implement GetSerializeSize,\nSerialize and Unserialize. These are now wrappers around\nthe \"SerializationOp\" template.",
      "tree": {
        "sha": "d4be736c23fbc4d453a1e4e281eafb4f51cdffd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4be736c23fbc4d453a1e4e281eafb4f51cdffd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d796f89962842e91e7d88e57c1d2d579f01052e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d796f89962842e91e7d88e57c1d2d579f01052e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d796f89962842e91e7d88e57c1d2d579f01052e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d796f89962842e91e7d88e57c1d2d579f01052e/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f3d47677973cb894fdbb437b9b322e2062a1bf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3d47677973cb894fdbb437b9b322e2062a1bf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f3d47677973cb894fdbb437b9b322e2062a1bf1"
      }
    ],
    "stats": {
      "total": 737,
      "additions": 463,
      "deletions": 274
    },
    "files": [
      {
        "sha": "4287cbc1b33a881e690218f4be5a69dac76c886e",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -46,13 +46,18 @@ class CAddrInfo : public CAddress\n \n public:\n \n-    IMPLEMENT_SERIALIZE(\n-        CAddress* pthis = (CAddress*)(this);\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        CAddress* pthis = (CAddress*)(thisPtr);\n         READWRITE(*pthis);\n-        READWRITE(source);\n-        READWRITE(nLastSuccess);\n-        READWRITE(nAttempts);\n-    )\n+        READWRITE(thisPtr->source);\n+        READWRITE(thisPtr->nLastSuccess);\n+        READWRITE(thisPtr->nAttempts);\n+        return nSerSize;\n+    }\n \n     void Init()\n     {"
      },
      {
        "sha": "4c8267fd062fa3c2e8290fa0f627bafd426c1db6",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 29,
        "deletions": 21,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -47,23 +47,27 @@ class CUnsignedAlert\n     std::string strReserved;\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nRelayUntil);\n-        READWRITE(nExpiration);\n-        READWRITE(nID);\n-        READWRITE(nCancel);\n-        READWRITE(setCancel);\n-        READWRITE(nMinVer);\n-        READWRITE(nMaxVer);\n-        READWRITE(setSubVer);\n-        READWRITE(nPriority);\n-\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n-        READWRITE(LIMITED_STRING(strStatusBar, 256));\n-        READWRITE(LIMITED_STRING(strReserved, 256));\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->nVersion);\n+        nVersion = thisPtr->nVersion;\n+        READWRITE(thisPtr->nRelayUntil);\n+        READWRITE(thisPtr->nExpiration);\n+        READWRITE(thisPtr->nID);\n+        READWRITE(thisPtr->nCancel);\n+        READWRITE(thisPtr->setCancel);\n+        READWRITE(thisPtr->nMinVer);\n+        READWRITE(thisPtr->nMaxVer);\n+        READWRITE(thisPtr->setSubVer);\n+        READWRITE(thisPtr->nPriority);\n+\n+        READWRITE(LIMITED_STRING(thisPtr->strComment, 65536));\n+        READWRITE(LIMITED_STRING(thisPtr->strStatusBar, 256));\n+        READWRITE(LIMITED_STRING(thisPtr->strReserved, 256));\n+        return nSerSize;\n+    }\n \n     void SetNull();\n \n@@ -83,10 +87,14 @@ class CAlert : public CUnsignedAlert\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(vchMsg);\n-        READWRITE(vchSig);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->vchMsg);\n+        READWRITE(thisPtr->vchSig);\n+        return nSerSize;\n+    }\n \n     void SetNull();\n     bool IsNull() const;"
      },
      {
        "sha": "dafea6702929f16aa2aa53c0f8df481e906a4a9f",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -63,12 +63,16 @@ class CBloomFilter\n     CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(vData);\n-        READWRITE(nHashFuncs);\n-        READWRITE(nTweak);\n-        READWRITE(nFlags);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->vData);\n+        READWRITE(thisPtr->nHashFuncs);\n+        READWRITE(thisPtr->nTweak);\n+        READWRITE(thisPtr->nFlags);\n+        return nSerSize;\n+    }\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);"
      },
      {
        "sha": "1caf9da6c0fa66e239b582be84e7fed19d8ca636",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 118,
        "deletions": 50,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -30,7 +30,16 @@ class COutPoint\n \n     COutPoint() { SetNull(); }\n     COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n-    IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n+\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(FLATDATA(*thisPtr));\n+        return nSerSize;\n+    }\n+\n     void SetNull() { hash = 0; n = (uint32_t) -1; }\n     bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n \n@@ -85,11 +94,15 @@ class CTxIn\n     CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->prevout);\n+        READWRITE(thisPtr->scriptSig);\n+        READWRITE(thisPtr->nSequence);\n+        return nSerSize;\n+    }\n \n     bool IsFinal() const\n     {\n@@ -136,7 +149,14 @@ class CFeeRate\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n     std::string ToString() const;\n \n-    IMPLEMENT_SERIALIZE( READWRITE(nSatoshisPerK); )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->nSatoshisPerK);\n+        return nSerSize;\n+    }\n };\n \n \n@@ -157,10 +177,14 @@ class CTxOut\n     CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->nValue);\n+        READWRITE(thisPtr->scriptPubKey);\n+        return nSerSize;\n+    }\n \n     void SetNull()\n     {\n@@ -237,15 +261,23 @@ class CTransaction\n \n     CTransaction& operator=(const CTransaction& tx);\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n-        nVersion = this->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+        READWRITE(*const_cast<int32_t*>(&thisPtr->nVersion));\n+        nVersion = thisPtr->nVersion;\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&thisPtr->vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&thisPtr->vout));\n+        READWRITE(*const_cast<uint32_t*>(&thisPtr->nLockTime));\n         if (fRead)\n-            UpdateHash();\n-    )\n+            thisPtr->UpdateHash();\n+\n+        return nSerSize;\n+    }\n \n     bool IsNull() const {\n         return vin.empty() && vout.empty();\n@@ -292,13 +324,20 @@ struct CMutableTransaction\n     CMutableTransaction();\n     CMutableTransaction(const CTransaction& tx);\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n-    )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n+        READWRITE(thisPtr->nVersion);\n+        nVersion = thisPtr->nVersion;\n+        READWRITE(thisPtr->vin);\n+        READWRITE(thisPtr->vout);\n+        READWRITE(thisPtr->nLockTime);\n+\n+        return nSerSize;\n+    }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the\n      * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n@@ -318,18 +357,24 @@ class CTxOutCompressor\n \n     CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n \n-    IMPLEMENT_SERIALIZE(({\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+        size_t nSerSize = 0;\n         if (!fRead) {\n-            uint64_t nVal = CompressAmount(txout.nValue);\n+            uint64_t nVal = CompressAmount(thisPtr->txout.nValue);\n             READWRITE(VARINT(nVal));\n         } else {\n             uint64_t nVal = 0;\n             READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n+            thisPtr->txout.nValue = DecompressAmount(nVal);\n         }\n-        CScriptCompressor cscript(REF(txout.scriptPubKey));\n+        CScriptCompressor cscript(REF(thisPtr->txout.scriptPubKey));\n         READWRITE(cscript);\n-    });)\n+        return nSerSize;\n+    }\n };\n \n /** Undo information for a CTxIn\n@@ -382,9 +427,14 @@ class CTxUndo\n     // undo information for all txins\n     std::vector<CTxInUndo> vprevout;\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(vprevout);\n-    )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->vprevout);\n+        return nSerSize;\n+    }\n };\n \n \n@@ -413,15 +463,21 @@ class CBlockHeader\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(hashPrevBlock);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n+        READWRITE(thisPtr->nVersion);\n+        nVersion = thisPtr->nVersion;\n+        READWRITE(thisPtr->hashPrevBlock);\n+        READWRITE(thisPtr->hashMerkleRoot);\n+        READWRITE(thisPtr->nTime);\n+        READWRITE(thisPtr->nBits);\n+        READWRITE(thisPtr->nNonce);\n+\n+        return nSerSize;\n+    }\n \n     void SetNull()\n     {\n@@ -468,10 +524,16 @@ class CBlock : public CBlockHeader\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(*(CBlockHeader*)this);\n-        READWRITE(vtx);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n+        READWRITE(*(CBlockHeader*)thisPtr);\n+        READWRITE(thisPtr->vtx);\n+\n+        return nSerSize;\n+    }\n \n     void SetNull()\n     {\n@@ -516,11 +578,17 @@ struct CBlockLocator\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(vHave);\n-    )\n+        READWRITE(thisPtr->vHave);\n+\n+        return nSerSize;\n+    }\n \n     void SetNull()\n     {"
      },
      {
        "sha": "c3f4ed971ca24408910490d39c6723043100ad4f",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -44,13 +44,18 @@ class CMasterKey\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(vchCryptedKey);\n-        READWRITE(vchSalt);\n-        READWRITE(nDerivationMethod);\n-        READWRITE(nDeriveIterations);\n-        READWRITE(vchOtherDerivationParameters);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->vchCryptedKey);\n+        READWRITE(thisPtr->vchSalt);\n+        READWRITE(thisPtr->nDerivationMethod);\n+        READWRITE(thisPtr->nDeriveIterations);\n+        READWRITE(thisPtr->vchOtherDerivationParameters);\n+        return nSerSize;\n+    }\n+\n     CMasterKey()\n     {\n         // 25000 rounds is just under 0.1 seconds on a 1.86 GHz Pentium M"
      },
      {
        "sha": "88e3159e3fd1445e31713da5b396be79d0016189",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 89,
        "deletions": 49,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -197,10 +197,15 @@ struct CDiskBlockPos\n     int nFile;\n     unsigned int nPos;\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(VARINT(nFile));\n-        READWRITE(VARINT(nPos));\n-    )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(VARINT(thisPtr->nFile));\n+        READWRITE(VARINT(thisPtr->nPos));\n+        return nSerSize;\n+    }\n \n     CDiskBlockPos() {\n         SetNull();\n@@ -227,10 +232,15 @@ struct CDiskTxPos : public CDiskBlockPos\n {\n     unsigned int nTxOffset; // after header\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(*(CDiskBlockPos*)this);\n-        READWRITE(VARINT(nTxOffset));\n-    )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(*(CDiskBlockPos*)thisPtr);\n+        READWRITE(VARINT(thisPtr->nTxOffset));\n+        return nSerSize;\n+    }\n \n     CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n     }\n@@ -307,9 +317,14 @@ class CBlockUndo\n public:\n     std::vector<CTxUndo> vtxundo; // for all but the coinbase\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(vtxundo);\n-    )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->vtxundo);\n+        return nSerSize;\n+    }\n \n     bool WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock);\n     bool ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock);\n@@ -411,24 +426,32 @@ class CPartialMerkleTree\n public:\n \n     // serialization implementation\n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(nTransactions);\n-        READWRITE(vHash);\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+        READWRITE(thisPtr->nTransactions);\n+        READWRITE(thisPtr->vHash);\n         std::vector<unsigned char> vBytes;\n         if (fRead) {\n             READWRITE(vBytes);\n-            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(this));\n+            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(thisPtr));\n             us.vBits.resize(vBytes.size() * 8);\n             for (unsigned int p = 0; p < us.vBits.size(); p++)\n                 us.vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n             us.fBad = false;\n         } else {\n-            vBytes.resize((vBits.size()+7)/8);\n-            for (unsigned int p = 0; p < vBits.size(); p++)\n-                vBytes[p / 8] |= vBits[p] << (p % 8);\n+            vBytes.resize((thisPtr->vBits.size()+7)/8);\n+            for (unsigned int p = 0; p < thisPtr->vBits.size(); p++)\n+                vBytes[p / 8] |= thisPtr->vBits[p] << (p % 8);\n             READWRITE(vBytes);\n         }\n-    )\n+\n+        return nSerSize;\n+    }\n \n     // Construct a partial merkle tree from a list of transaction id's, and a mask that selects a subset of them\n     CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch);\n@@ -484,15 +507,22 @@ class CBlockFileInfo\n     uint64_t nTimeFirst;         // earliest time of block in file\n     uint64_t nTimeLast;          // latest time of block in file\n \n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(VARINT(nBlocks));\n-        READWRITE(VARINT(nSize));\n-        READWRITE(VARINT(nUndoSize));\n-        READWRITE(VARINT(nHeightFirst));\n-        READWRITE(VARINT(nHeightLast));\n-        READWRITE(VARINT(nTimeFirst));\n-        READWRITE(VARINT(nTimeLast));\n-     )\n+    IMPLEMENT_SERIALIZE\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n+        READWRITE(VARINT(thisPtr->nBlocks));\n+        READWRITE(VARINT(thisPtr->nSize));\n+        READWRITE(VARINT(thisPtr->nUndoSize));\n+        READWRITE(VARINT(thisPtr->nHeightFirst));\n+        READWRITE(VARINT(thisPtr->nHeightLast));\n+        READWRITE(VARINT(thisPtr->nTimeFirst));\n+        READWRITE(VARINT(thisPtr->nTimeLast));\n+\n+        return nSerSize;\n+    }\n \n      void SetNull() {\n          nBlocks = 0;\n@@ -756,28 +786,34 @@ class CDiskBlockIndex : public CBlockIndex\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n         if (!(nType & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n \n-        READWRITE(VARINT(nHeight));\n-        READWRITE(VARINT(nStatus));\n-        READWRITE(VARINT(nTx));\n-        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(nFile));\n-        if (nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(nDataPos));\n-        if (nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(nUndoPos));\n+        READWRITE(VARINT(thisPtr->nHeight));\n+        READWRITE(VARINT(thisPtr->nStatus));\n+        READWRITE(VARINT(thisPtr->nTx));\n+        if (thisPtr->nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n+            READWRITE(VARINT(thisPtr->nFile));\n+        if (thisPtr->nStatus & BLOCK_HAVE_DATA)\n+            READWRITE(VARINT(thisPtr->nDataPos));\n+        if (thisPtr->nStatus & BLOCK_HAVE_UNDO)\n+            READWRITE(VARINT(thisPtr->nUndoPos));\n \n         // block header\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrev);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    )\n+        READWRITE(thisPtr->nVersion);\n+        READWRITE(thisPtr->hashPrev);\n+        READWRITE(thisPtr->hashMerkleRoot);\n+        READWRITE(thisPtr->nTime);\n+        READWRITE(thisPtr->nBits);\n+        READWRITE(thisPtr->nNonce);\n+\n+        return nSerSize;\n+    }\n \n     uint256 GetBlockHash() const\n     {\n@@ -976,10 +1012,14 @@ class CMerkleBlock\n     CMerkleBlock(const CBlock& block, CBloomFilter& filter);\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(header);\n-        READWRITE(txn);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->header);\n+        READWRITE(thisPtr->txn);\n+        return nSerSize;\n+    }\n };\n \n "
      },
      {
        "sha": "6f8c13250269b188eacb1d17ea9aa9e80889e174",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -89,9 +89,13 @@ class CNetAddr\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n         IMPLEMENT_SERIALIZE\n-            (\n-             READWRITE(FLATDATA(ip));\n-            )\n+\n+        template <typename T, typename Stream, typename Operation>\n+        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+            size_t nSerSize = 0;\n+            READWRITE(FLATDATA(thisPtr->ip));\n+            return nSerSize;\n+        }\n };\n \n class CSubNet\n@@ -149,14 +153,19 @@ class CService : public CNetAddr\n         CService(const struct sockaddr_in6& addr);\n \n         IMPLEMENT_SERIALIZE\n-            (\n-             CService* pthis = const_cast<CService*>(this);\n-             READWRITE(FLATDATA(ip));\n-             unsigned short portN = htons(port);\n-             READWRITE(portN);\n-             if (fRead)\n+\n+        template <typename T, typename Stream, typename Operation>\n+        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+            bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+            size_t nSerSize = 0;\n+            CService* pthis = const_cast<CService*>(thisPtr);\n+            READWRITE(FLATDATA(thisPtr->ip));\n+            unsigned short portN = htons(thisPtr->port);\n+            READWRITE(portN);\n+            if (fRead)\n                  pthis->port = ntohs(portN);\n-            )\n+            return nSerSize;\n+        }\n };\n \n typedef CService proxyType;"
      },
      {
        "sha": "851fca9d9e4862bf7bd893c172559d9cecb51cf8",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 38,
        "deletions": 23,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -36,12 +36,16 @@ class CMessageHeader\n         bool IsValid() const;\n \n         IMPLEMENT_SERIALIZE\n-            (\n-             READWRITE(FLATDATA(pchMessageStart));\n-             READWRITE(FLATDATA(pchCommand));\n-             READWRITE(nMessageSize);\n-             READWRITE(nChecksum);\n-            )\n+\n+        template <typename T, typename Stream, typename Operation>\n+        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+            size_t nSerSize = 0;\n+            READWRITE(FLATDATA(thisPtr->pchMessageStart));\n+            READWRITE(FLATDATA(thisPtr->pchCommand));\n+            READWRITE(thisPtr->nMessageSize);\n+            READWRITE(thisPtr->nChecksum);\n+            return nSerSize;\n+        }\n \n     // TODO: make private (improves encapsulation)\n     public:\n@@ -84,19 +88,26 @@ class CAddress : public CService\n         void Init();\n \n         IMPLEMENT_SERIALIZE\n-            (\n-             CAddress* pthis = const_cast<CAddress*>(this);\n-             CService* pip = (CService*)pthis;\n-             if (fRead)\n-                 pthis->Init();\n-             if (nType & SER_DISK)\n-                 READWRITE(nVersion);\n-             if ((nType & SER_DISK) ||\n-                 (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n-                 READWRITE(nTime);\n-             READWRITE(nServices);\n-             READWRITE(*pip);\n-            )\n+\n+        template <typename T, typename Stream, typename Operation>\n+        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+            size_t nSerSize = 0;\n+            bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+            CAddress* pthis = const_cast<CAddress*>(thisPtr);\n+            CService* pip = (CService*)pthis;\n+            if (fRead)\n+                pthis->Init();\n+            if (nType & SER_DISK)\n+                READWRITE(nVersion);\n+            if ((nType & SER_DISK) ||\n+                (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n+            READWRITE(thisPtr->nTime);\n+            READWRITE(thisPtr->nServices);\n+            READWRITE(*pip);\n+\n+            return nSerSize;\n+        }\n \n     // TODO: make private (improves encapsulation)\n     public:\n@@ -118,10 +129,14 @@ class CInv\n         CInv(const std::string& strType, const uint256& hashIn);\n \n         IMPLEMENT_SERIALIZE\n-        (\n-            READWRITE(type);\n-            READWRITE(hash);\n-        )\n+\n+        template <typename T, typename Stream, typename Operation>\n+        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+            size_t nSerSize = 0;\n+            READWRITE(thisPtr->type);\n+            READWRITE(thisPtr->hash);\n+            return nSerSize;\n+        }\n \n         friend bool operator<(const CInv& a, const CInv& b);\n "
      },
      {
        "sha": "50962334f51d4d7b807671575827d48cd9648650",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -25,20 +25,27 @@ class RecentRequestEntry\n     SendCoinsRecipient recipient;\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        RecentRequestEntry* pthis = const_cast<RecentRequestEntry*>(this);\n \n-        unsigned int nDate = date.toTime_t();\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+        RecentRequestEntry* pthis = const_cast<RecentRequestEntry*>(thisPtr);\n+\n+        unsigned int nDate = thisPtr->date.toTime_t();\n \n         READWRITE(pthis->nVersion);\n         nVersion = pthis->nVersion;\n-        READWRITE(id);\n+        READWRITE(thisPtr->id);\n         READWRITE(nDate);\n-        READWRITE(recipient);\n+        READWRITE(thisPtr->recipient);\n \n         if (fRead)\n             pthis->date = QDateTime::fromTime_t(nDate);\n-    )\n+\n+        return nSerSize;\n+    }\n };\n \n class RecentRequestEntryLessThan"
      },
      {
        "sha": "543843733c74091c0a1f4bc11a2ab9cbe2bce032",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -60,8 +60,13 @@ class SendCoinsRecipient\n     int nVersion;\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        SendCoinsRecipient* pthis = const_cast<SendCoinsRecipient*>(this);\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+        SendCoinsRecipient* pthis = const_cast<SendCoinsRecipient*>(thisPtr);\n \n         std::string sAddress = pthis->address.toStdString();\n         std::string sLabel = pthis->label.toStdString();\n@@ -75,7 +80,7 @@ class SendCoinsRecipient\n         nVersion = pthis->nVersion;\n         READWRITE(sAddress);\n         READWRITE(sLabel);\n-        READWRITE(amount);\n+        READWRITE(thisPtr->amount);\n         READWRITE(sMessage);\n         READWRITE(sPaymentRequest);\n         READWRITE(sAuthenticatedMerchant);\n@@ -89,7 +94,9 @@ class SendCoinsRecipient\n                 pthis->paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n             pthis->authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n         }\n-    )\n+\n+        return nSerSize;\n+    }\n };\n \n /** Interface to Bitcoin wallet from Qt view code. */"
      },
      {
        "sha": "7e0ecc2edfdc359ead923450f75cab109ddef1f9",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 28,
        "deletions": 40,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -22,6 +22,7 @@\n \n #include <boost/tuple/tuple.hpp>\n #include <boost/type_traits/is_fundamental.hpp>\n+#include <boost/typeof/typeof.hpp>\n \n class CAutoFile;\n class CDataStream;\n@@ -37,6 +38,14 @@ inline T& REF(const T& val)\n     return const_cast<T&>(val);\n }\n \n+// Used to acquire a const pointer \"this\" and generate a const\n+// serialization operation from a template\n+template<typename T>\n+inline T MAKE_CONST(T val)\n+{\n+    return const_cast<const T>(val);\n+}\n+\n /** Get begin pointer of vector (non-const version).\n  * @note These functions avoid the undefined case of indexing into an empty\n  * vector, as well as that of indexing after the end of the vector.\n@@ -79,48 +88,27 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n-#define IMPLEMENT_SERIALIZE(statements)    \\\n-    unsigned int GetSerializeSize(int nType, int nVersion) const  \\\n-    {                                           \\\n-        CSerActionGetSerializeSize ser_action;  \\\n-        const bool fGetSize = true;             \\\n-        const bool fWrite = false;              \\\n-        const bool fRead = false;               \\\n-        unsigned int nSerSize = 0;              \\\n-        ser_streamplaceholder s;                \\\n-        assert(fGetSize||fWrite||fRead); /* suppress warning */ \\\n-        s.nType = nType;                        \\\n-        s.nVersion = nVersion;                  \\\n-        {statements}                            \\\n-        return nSerSize;                        \\\n-    }                                           \\\n-    template<typename Stream>                   \\\n-    void Serialize(Stream& s, int nType, int nVersion) const  \\\n-    {                                           \\\n-        CSerActionSerialize ser_action;         \\\n-        const bool fGetSize = false;            \\\n-        const bool fWrite = true;               \\\n-        const bool fRead = false;               \\\n-        unsigned int nSerSize = 0;              \\\n-        assert(fGetSize||fWrite||fRead); /* suppress warning */ \\\n-        {statements}                            \\\n-    }                                           \\\n-    template<typename Stream>                   \\\n-    void Unserialize(Stream& s, int nType, int nVersion)  \\\n-    {                                           \\\n-        CSerActionUnserialize ser_action;       \\\n-        const bool fGetSize = false;            \\\n-        const bool fWrite = false;              \\\n-        const bool fRead = true;                \\\n-        unsigned int nSerSize = 0;              \\\n-        assert(fGetSize||fWrite||fRead); /* suppress warning */ \\\n-        {statements}                            \\\n-    }\n-\n #define READWRITE(obj)      (nSerSize += ::SerReadWrite(s, (obj), nType, nVersion, ser_action))\n \n-\n-\n+/* Implement three methods for serializable objects. These are actually wrappers over\n+ * \"SerializationOp\" template, which implements the body of each class' serialization\n+ * code. Adding \"IMPLEMENT_SERIALIZE\" in the body of the class causes these wrappers to be\n+ * added as members. */\n+#define IMPLEMENT_SERIALIZE                                                                         \\\n+    size_t GetSerializeSize(int nType, int nVersion) const {                                        \\\n+        ser_streamplaceholder s;                                                                    \\\n+        s.nType = nType;                                                                            \\\n+        s.nVersion = nVersion;                                                                      \\\n+        return SerializationOp(MAKE_CONST(this), s, CSerActionGetSerializeSize(), nType, nVersion); \\\n+    }                                                                                               \\\n+    template<typename Stream>                                                                       \\\n+    void Serialize(Stream& s, int nType, int nVersion) const {                                      \\\n+        SerializationOp(MAKE_CONST(this), s, CSerActionSerialize(), nType, nVersion);               \\\n+    }                                                                                               \\\n+    template<typename Stream>                                                                       \\\n+    void Unserialize(Stream& s, int nType, int nVersion) {                                          \\\n+        SerializationOp(this, s, CSerActionUnserialize(), nType, nVersion);                         \\\n+    }\n \n \n "
      },
      {
        "sha": "36b0bafe5ae2788a7d4b5b322b9c1981e45a07ad",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 76,
        "deletions": 47,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -64,12 +64,16 @@ class CKeyPool\n     CKeyPool(const CPubKey& vchPubKeyIn);\n \n     IMPLEMENT_SERIALIZE\n-    (\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-    )\n+        READWRITE(thisPtr->nTime);\n+        READWRITE(thisPtr->vchPubKey);\n+        return nSerSize;\n+    }\n };\n \n /** Address book data */\n@@ -489,16 +493,20 @@ class CMerkleTx : public CTransaction\n         fMerkleVerified = false;\n     }\n \n-\n     IMPLEMENT_SERIALIZE\n-    (\n-        nSerSize += SerReadWrite(s, *(CTransaction*)this, nType, nVersion, ser_action);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    )\n \n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+\n+        nSerSize += SerReadWrite(s, *(CTransaction*)thisPtr, nType, nVersion, ser_action);\n+        nVersion = thisPtr->nVersion;\n+        READWRITE(thisPtr->hashBlock);\n+        READWRITE(thisPtr->vMerkleBranch);\n+        READWRITE(thisPtr->nIndex);\n+\n+        return nSerSize;\n+    }\n \n     int SetMerkleBranch(const CBlock* pblock=NULL);\n \n@@ -513,7 +521,6 @@ class CMerkleTx : public CTransaction\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n };\n \n-\n /** A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n@@ -604,8 +611,13 @@ class CWalletTx : public CMerkleTx\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        CWalletTx* pthis = const_cast<CWalletTx*>(this);\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+        CWalletTx* pthis = const_cast<CWalletTx*>(thisPtr);\n         if (fRead)\n             pthis->Init(NULL);\n         char fSpent = false;\n@@ -616,18 +628,18 @@ class CWalletTx : public CMerkleTx\n \n             WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n-            if (nTimeSmart)\n-                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+            if (thisPtr->nTimeSmart)\n+                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", thisPtr->nTimeSmart);\n         }\n \n-        nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n+        nSerSize += SerReadWrite(s, *(CMerkleTx*)thisPtr, nType, nVersion,ser_action);\n         std::vector<CMerkleTx> vUnused; // Used to be vtxPrev\n         READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n+        READWRITE(thisPtr->mapValue);\n+        READWRITE(thisPtr->vOrderForm);\n+        READWRITE(thisPtr->fTimeReceivedIsTxTime);\n+        READWRITE(thisPtr->nTimeReceived);\n+        READWRITE(thisPtr->fFromMe);\n         READWRITE(fSpent);\n \n         if (fRead)\n@@ -636,15 +648,17 @@ class CWalletTx : public CMerkleTx\n \n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n-            pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n+            pthis->nTimeSmart = thisPtr->mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n         }\n \n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n         pthis->mapValue.erase(\"n\");\n         pthis->mapValue.erase(\"timesmart\");\n-    )\n+\n+        return nSerSize;\n+    }\n \n     // make sure balances are recalculated\n     void MarkDirty()\n@@ -891,14 +905,18 @@ class CWalletKey\n     CWalletKey(int64_t nExpires=0);\n \n     IMPLEMENT_SERIALIZE\n-    (\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(vchPrivKey);\n-        READWRITE(nTimeCreated);\n-        READWRITE(nTimeExpires);\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n-    )\n+        READWRITE(thisPtr->vchPrivKey);\n+        READWRITE(thisPtr->nTimeCreated);\n+        READWRITE(thisPtr->nTimeExpires);\n+        READWRITE(LIMITED_STRING(thisPtr->strComment, 65536));\n+        return nSerSize;\n+    }\n };\n \n \n@@ -925,11 +943,15 @@ class CAccount\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(vchPubKey);\n-    )\n+        READWRITE(thisPtr->vchPubKey);\n+        return nSerSize;\n+    }\n };\n \n \n@@ -966,38 +988,43 @@ class CAccountingEntry\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        CAccountingEntry& me = *const_cast<CAccountingEntry*>(this);\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+\n+        CAccountingEntry& me = *const_cast<CAccountingEntry*>(thisPtr);\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         // Note: strAccount is serialized as part of the key, not here.\n-        READWRITE(nCreditDebit);\n-        READWRITE(nTime);\n-        READWRITE(LIMITED_STRING(strOtherAccount, 65536));\n+        READWRITE(thisPtr->nCreditDebit);\n+        READWRITE(thisPtr->nTime);\n+        READWRITE(LIMITED_STRING(thisPtr->strOtherAccount, 65536));\n \n         if (!fRead)\n         {\n-            WriteOrderPos(nOrderPos, me.mapValue);\n+            WriteOrderPos(thisPtr->nOrderPos, me.mapValue);\n \n-            if (!(mapValue.empty() && _ssExtra.empty()))\n+            if (!(thisPtr->mapValue.empty() && thisPtr->_ssExtra.empty()))\n             {\n                 CDataStream ss(nType, nVersion);\n                 ss.insert(ss.begin(), '\\0');\n-                ss << mapValue;\n-                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n+                ss << thisPtr->mapValue;\n+                ss.insert(ss.end(), thisPtr->_ssExtra.begin(), thisPtr->_ssExtra.end());\n                 me.strComment.append(ss.str());\n             }\n         }\n \n-        READWRITE(LIMITED_STRING(strComment, 65536));\n+        READWRITE(LIMITED_STRING(thisPtr->strComment, 65536));\n \n-        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n+        size_t nSepPos = thisPtr->strComment.find(\"\\0\", 0, 1);\n         if (fRead)\n         {\n             me.mapValue.clear();\n             if (std::string::npos != nSepPos)\n             {\n-                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                CDataStream ss(std::vector<char>(thisPtr->strComment.begin() + nSepPos + 1, thisPtr->strComment.end()), nType, nVersion);\n                 ss >> me.mapValue;\n                 me._ssExtra = std::vector<char>(ss.begin(), ss.end());\n             }\n@@ -1007,7 +1034,9 @@ class CAccountingEntry\n             me.strComment.erase(nSepPos);\n \n         me.mapValue.erase(\"n\");\n-    )\n+\n+        return nSerSize;\n+    }\n \n private:\n     std::vector<char> _ssExtra;"
      },
      {
        "sha": "e14c137ba8dde78b740516de855ae898dac1dfb3",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d796f89962842e91e7d88e57c1d2d579f01052e/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d796f89962842e91e7d88e57c1d2d579f01052e/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=3d796f89962842e91e7d88e57c1d2d579f01052e",
        "patch": "@@ -55,11 +55,15 @@ class CKeyMetadata\n     }\n \n     IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nCreateTime);\n-    )\n+\n+    template <typename T, typename Stream, typename Operation>\n+    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        size_t nSerSize = 0;\n+        READWRITE(thisPtr->nVersion);\n+        nVersion = thisPtr->nVersion;\n+        READWRITE(thisPtr->nCreateTime);\n+        return nSerSize;\n+    }\n \n     void SetNull()\n     {"
      }
    ]
  },
  {
    "sha": "5d96b4ae0188fcad36105642c5d69249d37fdbb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDk2YjRhZTAxODhmY2FkMzYxMDU2NDJjNWQ2OTI0OWQzN2ZkYmI1",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-20T16:09:29Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-31T00:16:10Z"
      },
      "message": "remove fields of ser_streamplaceholder\n\nThe nType and nVersion fields of stream objects are never accessed\nfrom outside the class (or perhaps from the inside too, I haven't checked).\nThus no need to have them in a placeholder, whose only purpose is to\nfill the \"Stream\" template parameter in serialization implementation.",
      "tree": {
        "sha": "22fd956f7a95ff38479139068c08709a869429fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22fd956f7a95ff38479139068c08709a869429fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d96b4ae0188fcad36105642c5d69249d37fdbb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d96b4ae0188fcad36105642c5d69249d37fdbb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d96b4ae0188fcad36105642c5d69249d37fdbb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d96b4ae0188fcad36105642c5d69249d37fdbb5/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d796f89962842e91e7d88e57c1d2d579f01052e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d796f89962842e91e7d88e57c1d2d579f01052e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d796f89962842e91e7d88e57c1d2d579f01052e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 1,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c0666d30a5c6f3fe3ade41c1361ae33f0cf2e1f5",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d96b4ae0188fcad36105642c5d69249d37fdbb5/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d96b4ae0188fcad36105642c5d69249d37fdbb5/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=5d96b4ae0188fcad36105642c5d69249d37fdbb5",
        "patch": "@@ -97,8 +97,6 @@ enum\n #define IMPLEMENT_SERIALIZE                                                                         \\\n     size_t GetSerializeSize(int nType, int nVersion) const {                                        \\\n         ser_streamplaceholder s;                                                                    \\\n-        s.nType = nType;                                                                            \\\n-        s.nVersion = nVersion;                                                                      \\\n         return SerializationOp(MAKE_CONST(this), s, CSerActionGetSerializeSize(), nType, nVersion); \\\n     }                                                                                               \\\n     template<typename Stream>                                                                       \\\n@@ -835,13 +833,7 @@ inline unsigned int SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSe\n     return 0;\n }\n \n-struct ser_streamplaceholder\n-{\n-    int nType;\n-    int nVersion;\n-};\n-\n-\n+struct ser_streamplaceholder { };\n \n \n "
      }
    ]
  },
  {
    "sha": "84881f8c472cc67dc757686eb7dc3b495b13cab8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDg4MWY4YzQ3MmNjNjdkYzc1NzY4NmViN2RjM2I0OTViMTNjYWI4",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-20T20:44:38Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-31T00:16:17Z"
      },
      "message": "rework overhauled serialization methods to non-static\n\nThanks to Pieter Wuille for most of the work on this commit.\nI did not fixup the overhaul commit, because a rebase conflicted\nwith \"remove fields of ser_streamplaceholder\".\nI prefer not to risk making a mistake while resolving it.",
      "tree": {
        "sha": "9aa2ae012cc4817464cb60e9d838fa92464a9477",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9aa2ae012cc4817464cb60e9d838fa92464a9477"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84881f8c472cc67dc757686eb7dc3b495b13cab8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84881f8c472cc67dc757686eb7dc3b495b13cab8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84881f8c472cc67dc757686eb7dc3b495b13cab8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84881f8c472cc67dc757686eb7dc3b495b13cab8/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d96b4ae0188fcad36105642c5d69249d37fdbb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d96b4ae0188fcad36105642c5d69249d37fdbb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d96b4ae0188fcad36105642c5d69249d37fdbb5"
      }
    ],
    "stats": {
      "total": 540,
      "additions": 270,
      "deletions": 270
    },
    "files": [
      {
        "sha": "05af436aebaac444adefa41d1cdb95ba9624b005",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -46,16 +46,16 @@ class CAddrInfo : public CAddress\n \n public:\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        CAddress* pthis = (CAddress*)(thisPtr);\n+        CAddress* pthis = (CAddress*)(this);\n         READWRITE(*pthis);\n-        READWRITE(thisPtr->source);\n-        READWRITE(thisPtr->nLastSuccess);\n-        READWRITE(thisPtr->nAttempts);\n+        READWRITE(source);\n+        READWRITE(nLastSuccess);\n+        READWRITE(nAttempts);\n         return nSerSize;\n     }\n "
      },
      {
        "sha": "46ec4fbde00845c97491c2181d4456d0409d0c8a",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -46,26 +46,26 @@ class CUnsignedAlert\n     std::string strStatusBar;\n     std::string strReserved;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->nVersion);\n-        nVersion = thisPtr->nVersion;\n-        READWRITE(thisPtr->nRelayUntil);\n-        READWRITE(thisPtr->nExpiration);\n-        READWRITE(thisPtr->nID);\n-        READWRITE(thisPtr->nCancel);\n-        READWRITE(thisPtr->setCancel);\n-        READWRITE(thisPtr->nMinVer);\n-        READWRITE(thisPtr->nMaxVer);\n-        READWRITE(thisPtr->setSubVer);\n-        READWRITE(thisPtr->nPriority);\n-\n-        READWRITE(LIMITED_STRING(thisPtr->strComment, 65536));\n-        READWRITE(LIMITED_STRING(thisPtr->strStatusBar, 256));\n-        READWRITE(LIMITED_STRING(thisPtr->strReserved, 256));\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nRelayUntil);\n+        READWRITE(nExpiration);\n+        READWRITE(nID);\n+        READWRITE(nCancel);\n+        READWRITE(setCancel);\n+        READWRITE(nMinVer);\n+        READWRITE(nMaxVer);\n+        READWRITE(setSubVer);\n+        READWRITE(nPriority);\n+\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n+        READWRITE(LIMITED_STRING(strStatusBar, 256));\n+        READWRITE(LIMITED_STRING(strReserved, 256));\n         return nSerSize;\n     }\n \n@@ -86,13 +86,13 @@ class CAlert : public CUnsignedAlert\n         SetNull();\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->vchMsg);\n-        READWRITE(thisPtr->vchSig);\n+        READWRITE(vchMsg);\n+        READWRITE(vchSig);\n         return nSerSize;\n     }\n "
      },
      {
        "sha": "8dbf74f4943bd4a37427b016c88d991941eade3d",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -62,15 +62,15 @@ class CBloomFilter\n     CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak, unsigned char nFlagsIn);\n     CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->vData);\n-        READWRITE(thisPtr->nHashFuncs);\n-        READWRITE(thisPtr->nTweak);\n-        READWRITE(thisPtr->nFlags);\n+        READWRITE(vData);\n+        READWRITE(nHashFuncs);\n+        READWRITE(nTweak);\n+        READWRITE(nFlags);\n         return nSerSize;\n     }\n "
      },
      {
        "sha": "e56be1a4eca089471649a4adba7aa06e2225506d",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 65,
        "deletions": 65,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -31,12 +31,12 @@ class COutPoint\n     COutPoint() { SetNull(); }\n     COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(FLATDATA(*thisPtr));\n+        READWRITE(FLATDATA(*this));\n         return nSerSize;\n     }\n \n@@ -93,14 +93,14 @@ class CTxIn\n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n     CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->prevout);\n-        READWRITE(thisPtr->scriptSig);\n-        READWRITE(thisPtr->nSequence);\n+        READWRITE(prevout);\n+        READWRITE(scriptSig);\n+        READWRITE(nSequence);\n         return nSerSize;\n     }\n \n@@ -149,12 +149,12 @@ class CFeeRate\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n     std::string ToString() const;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->nSatoshisPerK);\n+        READWRITE(nSatoshisPerK);\n         return nSerSize;\n     }\n };\n@@ -176,13 +176,13 @@ class CTxOut\n \n     CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->nValue);\n-        READWRITE(thisPtr->scriptPubKey);\n+        READWRITE(nValue);\n+        READWRITE(scriptPubKey);\n         return nSerSize;\n     }\n \n@@ -261,20 +261,20 @@ class CTransaction\n \n     CTransaction& operator=(const CTransaction& tx);\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-        READWRITE(*const_cast<int32_t*>(&thisPtr->nVersion));\n-        nVersion = thisPtr->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&thisPtr->vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&thisPtr->vout));\n-        READWRITE(*const_cast<uint32_t*>(&thisPtr->nLockTime));\n+        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n+        nVersion = this->nVersion;\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n+        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n         if (fRead)\n-            thisPtr->UpdateHash();\n+            UpdateHash();\n \n         return nSerSize;\n     }\n@@ -324,17 +324,17 @@ struct CMutableTransaction\n     CMutableTransaction();\n     CMutableTransaction(const CTransaction& tx);\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n-        READWRITE(thisPtr->nVersion);\n-        nVersion = thisPtr->nVersion;\n-        READWRITE(thisPtr->vin);\n-        READWRITE(thisPtr->vout);\n-        READWRITE(thisPtr->nLockTime);\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(vin);\n+        READWRITE(vout);\n+        READWRITE(nLockTime);\n \n         return nSerSize;\n     }\n@@ -357,21 +357,21 @@ class CTxOutCompressor\n \n     CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n         size_t nSerSize = 0;\n         if (!fRead) {\n-            uint64_t nVal = CompressAmount(thisPtr->txout.nValue);\n+            uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));\n         } else {\n             uint64_t nVal = 0;\n             READWRITE(VARINT(nVal));\n-            thisPtr->txout.nValue = DecompressAmount(nVal);\n+            txout.nValue = DecompressAmount(nVal);\n         }\n-        CScriptCompressor cscript(REF(thisPtr->txout.scriptPubKey));\n+        CScriptCompressor cscript(REF(txout.scriptPubKey));\n         READWRITE(cscript);\n         return nSerSize;\n     }\n@@ -427,12 +427,12 @@ class CTxUndo\n     // undo information for all txins\n     std::vector<CTxInUndo> vprevout;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->vprevout);\n+        READWRITE(vprevout);\n         return nSerSize;\n     }\n };\n@@ -462,19 +462,19 @@ class CBlockHeader\n         SetNull();\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n-        READWRITE(thisPtr->nVersion);\n-        nVersion = thisPtr->nVersion;\n-        READWRITE(thisPtr->hashPrevBlock);\n-        READWRITE(thisPtr->hashMerkleRoot);\n-        READWRITE(thisPtr->nTime);\n-        READWRITE(thisPtr->nBits);\n-        READWRITE(thisPtr->nNonce);\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(hashPrevBlock);\n+        READWRITE(hashMerkleRoot);\n+        READWRITE(nTime);\n+        READWRITE(nBits);\n+        READWRITE(nNonce);\n \n         return nSerSize;\n     }\n@@ -523,14 +523,14 @@ class CBlock : public CBlockHeader\n         *((CBlockHeader*)this) = header;\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n-        READWRITE(*(CBlockHeader*)thisPtr);\n-        READWRITE(thisPtr->vtx);\n+        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(vtx);\n \n         return nSerSize;\n     }\n@@ -577,15 +577,15 @@ struct CBlockLocator\n         vHave = vHaveIn;\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(thisPtr->vHave);\n+        READWRITE(vHave);\n \n         return nSerSize;\n     }"
      },
      {
        "sha": "ce4c6315aa69c58cc0b1d3d7b379f83afc5681f3",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -43,16 +43,16 @@ class CMasterKey\n     // such as the various parameters to scrypt\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->vchCryptedKey);\n-        READWRITE(thisPtr->vchSalt);\n-        READWRITE(thisPtr->nDerivationMethod);\n-        READWRITE(thisPtr->nDeriveIterations);\n-        READWRITE(thisPtr->vchOtherDerivationParameters);\n+        READWRITE(vchCryptedKey);\n+        READWRITE(vchSalt);\n+        READWRITE(nDerivationMethod);\n+        READWRITE(nDeriveIterations);\n+        READWRITE(vchOtherDerivationParameters);\n         return nSerSize;\n     }\n "
      },
      {
        "sha": "8a5fa0e7e0fc63d6938f6e720eb6839c63ee9c27",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 56,
        "deletions": 56,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -197,13 +197,13 @@ struct CDiskBlockPos\n     int nFile;\n     unsigned int nPos;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(VARINT(thisPtr->nFile));\n-        READWRITE(VARINT(thisPtr->nPos));\n+        READWRITE(VARINT(nFile));\n+        READWRITE(VARINT(nPos));\n         return nSerSize;\n     }\n \n@@ -232,13 +232,13 @@ struct CDiskTxPos : public CDiskBlockPos\n {\n     unsigned int nTxOffset; // after header\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(*(CDiskBlockPos*)thisPtr);\n-        READWRITE(VARINT(thisPtr->nTxOffset));\n+        READWRITE(*(CDiskBlockPos*)this);\n+        READWRITE(VARINT(nTxOffset));\n         return nSerSize;\n     }\n \n@@ -317,12 +317,12 @@ class CBlockUndo\n public:\n     std::vector<CTxUndo> vtxundo; // for all but the coinbase\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->vtxundo);\n+        READWRITE(vtxundo);\n         return nSerSize;\n     }\n \n@@ -426,27 +426,27 @@ class CPartialMerkleTree\n public:\n \n     // serialization implementation\n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-        READWRITE(thisPtr->nTransactions);\n-        READWRITE(thisPtr->vHash);\n+        READWRITE(nTransactions);\n+        READWRITE(vHash);\n         std::vector<unsigned char> vBytes;\n         if (fRead) {\n             READWRITE(vBytes);\n-            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(thisPtr));\n+            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(this));\n             us.vBits.resize(vBytes.size() * 8);\n             for (unsigned int p = 0; p < us.vBits.size(); p++)\n                 us.vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n             us.fBad = false;\n         } else {\n-            vBytes.resize((thisPtr->vBits.size()+7)/8);\n-            for (unsigned int p = 0; p < thisPtr->vBits.size(); p++)\n-                vBytes[p / 8] |= thisPtr->vBits[p] << (p % 8);\n+            vBytes.resize((vBits.size()+7)/8);\n+            for (unsigned int p = 0; p < vBits.size(); p++)\n+                vBytes[p / 8] |= vBits[p] << (p % 8);\n             READWRITE(vBytes);\n         }\n \n@@ -507,19 +507,19 @@ class CBlockFileInfo\n     uint64_t nTimeFirst;         // earliest time of block in file\n     uint64_t nTimeLast;          // latest time of block in file\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n-        READWRITE(VARINT(thisPtr->nBlocks));\n-        READWRITE(VARINT(thisPtr->nSize));\n-        READWRITE(VARINT(thisPtr->nUndoSize));\n-        READWRITE(VARINT(thisPtr->nHeightFirst));\n-        READWRITE(VARINT(thisPtr->nHeightLast));\n-        READWRITE(VARINT(thisPtr->nTimeFirst));\n-        READWRITE(VARINT(thisPtr->nTimeLast));\n+        READWRITE(VARINT(nBlocks));\n+        READWRITE(VARINT(nSize));\n+        READWRITE(VARINT(nUndoSize));\n+        READWRITE(VARINT(nHeightFirst));\n+        READWRITE(VARINT(nHeightLast));\n+        READWRITE(VARINT(nTimeFirst));\n+        READWRITE(VARINT(nTimeLast));\n \n         return nSerSize;\n     }\n@@ -785,32 +785,32 @@ class CDiskBlockIndex : public CBlockIndex\n         hashPrev = (pprev ? pprev->GetBlockHash() : 0);\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n         if (!(nType & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n \n-        READWRITE(VARINT(thisPtr->nHeight));\n-        READWRITE(VARINT(thisPtr->nStatus));\n-        READWRITE(VARINT(thisPtr->nTx));\n-        if (thisPtr->nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(thisPtr->nFile));\n-        if (thisPtr->nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(thisPtr->nDataPos));\n-        if (thisPtr->nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(thisPtr->nUndoPos));\n+        READWRITE(VARINT(nHeight));\n+        READWRITE(VARINT(nStatus));\n+        READWRITE(VARINT(nTx));\n+        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n+            READWRITE(VARINT(nFile));\n+        if (nStatus & BLOCK_HAVE_DATA)\n+            READWRITE(VARINT(nDataPos));\n+        if (nStatus & BLOCK_HAVE_UNDO)\n+            READWRITE(VARINT(nUndoPos));\n \n         // block header\n-        READWRITE(thisPtr->nVersion);\n-        READWRITE(thisPtr->hashPrev);\n-        READWRITE(thisPtr->hashMerkleRoot);\n-        READWRITE(thisPtr->nTime);\n-        READWRITE(thisPtr->nBits);\n-        READWRITE(thisPtr->nNonce);\n+        READWRITE(this->nVersion);\n+        READWRITE(hashPrev);\n+        READWRITE(hashMerkleRoot);\n+        READWRITE(nTime);\n+        READWRITE(nBits);\n+        READWRITE(nNonce);\n \n         return nSerSize;\n     }\n@@ -1011,13 +1011,13 @@ class CMerkleBlock\n     // thus the filter will likely be modified.\n     CMerkleBlock(const CBlock& block, CBloomFilter& filter);\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->header);\n-        READWRITE(thisPtr->txn);\n+        READWRITE(header);\n+        READWRITE(txn);\n         return nSerSize;\n     }\n };"
      },
      {
        "sha": "b4ba711261b3e790920cf393dbf6436e7814bc5f",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -88,12 +88,12 @@ class CNetAddr\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b);\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n-        IMPLEMENT_SERIALIZE\n+        IMPLEMENT_SERIALIZE;\n \n-        template <typename T, typename Stream, typename Operation>\n-        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        template <typename Stream, typename Operation>\n+        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             size_t nSerSize = 0;\n-            READWRITE(FLATDATA(thisPtr->ip));\n+            READWRITE(FLATDATA(ip));\n             return nSerSize;\n         }\n };\n@@ -152,15 +152,15 @@ class CService : public CNetAddr\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n         CService(const struct sockaddr_in6& addr);\n \n-        IMPLEMENT_SERIALIZE\n+        IMPLEMENT_SERIALIZE;\n \n-        template <typename T, typename Stream, typename Operation>\n-        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        template <typename Stream, typename Operation>\n+        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n             size_t nSerSize = 0;\n-            CService* pthis = const_cast<CService*>(thisPtr);\n-            READWRITE(FLATDATA(thisPtr->ip));\n-            unsigned short portN = htons(thisPtr->port);\n+            CService* pthis = const_cast<CService*>(this);\n+            READWRITE(FLATDATA(ip));\n+            unsigned short portN = htons(port);\n             READWRITE(portN);\n             if (fRead)\n                  pthis->port = ntohs(portN);"
      },
      {
        "sha": "0f5c5559d1d8f2133232ff16b5af1b29253e8f1e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -35,15 +35,15 @@ class CMessageHeader\n         std::string GetCommand() const;\n         bool IsValid() const;\n \n-        IMPLEMENT_SERIALIZE\n+        IMPLEMENT_SERIALIZE;\n \n-        template <typename T, typename Stream, typename Operation>\n-        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        template <typename Stream, typename Operation>\n+        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             size_t nSerSize = 0;\n-            READWRITE(FLATDATA(thisPtr->pchMessageStart));\n-            READWRITE(FLATDATA(thisPtr->pchCommand));\n-            READWRITE(thisPtr->nMessageSize);\n-            READWRITE(thisPtr->nChecksum);\n+            READWRITE(FLATDATA(pchMessageStart));\n+            READWRITE(FLATDATA(pchCommand));\n+            READWRITE(nMessageSize);\n+            READWRITE(nChecksum);\n             return nSerSize;\n         }\n \n@@ -87,23 +87,23 @@ class CAddress : public CService\n \n         void Init();\n \n-        IMPLEMENT_SERIALIZE\n+        IMPLEMENT_SERIALIZE;\n \n-        template <typename T, typename Stream, typename Operation>\n-        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        template <typename Stream, typename Operation>\n+        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             size_t nSerSize = 0;\n             bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-            CAddress* pthis = const_cast<CAddress*>(thisPtr);\n+            CAddress* pthis = const_cast<CAddress*>(this);\n             CService* pip = (CService*)pthis;\n             if (fRead)\n                 pthis->Init();\n             if (nType & SER_DISK)\n                 READWRITE(nVersion);\n             if ((nType & SER_DISK) ||\n                 (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n-            READWRITE(thisPtr->nTime);\n-            READWRITE(thisPtr->nServices);\n+            READWRITE(nTime);\n+            READWRITE(nServices);\n             READWRITE(*pip);\n \n             return nSerSize;\n@@ -128,13 +128,13 @@ class CInv\n         CInv(int typeIn, const uint256& hashIn);\n         CInv(const std::string& strType, const uint256& hashIn);\n \n-        IMPLEMENT_SERIALIZE\n+        IMPLEMENT_SERIALIZE;\n \n-        template <typename T, typename Stream, typename Operation>\n-        inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+        template <typename Stream, typename Operation>\n+        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             size_t nSerSize = 0;\n-            READWRITE(thisPtr->type);\n-            READWRITE(thisPtr->hash);\n+            READWRITE(type);\n+            READWRITE(hash);\n             return nSerSize;\n         }\n "
      },
      {
        "sha": "581d7b2c5e4812c1fc1a8a070b3345267fb202a6",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -24,22 +24,22 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-        RecentRequestEntry* pthis = const_cast<RecentRequestEntry*>(thisPtr);\n+        RecentRequestEntry* pthis = const_cast<RecentRequestEntry*>(this);\n \n-        unsigned int nDate = thisPtr->date.toTime_t();\n+        unsigned int nDate = date.toTime_t();\n \n         READWRITE(pthis->nVersion);\n         nVersion = pthis->nVersion;\n-        READWRITE(thisPtr->id);\n+        READWRITE(id);\n         READWRITE(nDate);\n-        READWRITE(thisPtr->recipient);\n+        READWRITE(recipient);\n \n         if (fRead)\n             pthis->date = QDateTime::fromTime_t(nDate);"
      },
      {
        "sha": "553b56654498fb0aaab929a957c77cd7573da6d6",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -59,14 +59,14 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-        SendCoinsRecipient* pthis = const_cast<SendCoinsRecipient*>(thisPtr);\n+        SendCoinsRecipient* pthis = const_cast<SendCoinsRecipient*>(this);\n \n         std::string sAddress = pthis->address.toStdString();\n         std::string sLabel = pthis->label.toStdString();\n@@ -80,7 +80,7 @@ class SendCoinsRecipient\n         nVersion = pthis->nVersion;\n         READWRITE(sAddress);\n         READWRITE(sLabel);\n-        READWRITE(thisPtr->amount);\n+        READWRITE(amount);\n         READWRITE(sMessage);\n         READWRITE(sPaymentRequest);\n         READWRITE(sAuthenticatedMerchant);"
      },
      {
        "sha": "6eefa18135d79cc09051d69ad50acc88dab679b0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -38,12 +38,12 @@ inline T& REF(const T& val)\n     return const_cast<T&>(val);\n }\n \n-// Used to acquire a const pointer \"this\" and generate a const\n-// serialization operation from a template\n+// Used to acquire a non-const pointer \"this\" to generate bodies\n+// of const serialization operations from a template\n template<typename T>\n-inline T MAKE_CONST(T val)\n+inline T* NCONST_PTR(const T* val)\n {\n-    return const_cast<const T>(val);\n+    return const_cast<T*>(val);\n }\n \n /** Get begin pointer of vector (non-const version).\n@@ -97,15 +97,15 @@ enum\n #define IMPLEMENT_SERIALIZE                                                                         \\\n     size_t GetSerializeSize(int nType, int nVersion) const {                                        \\\n         ser_streamplaceholder s;                                                                    \\\n-        return SerializationOp(MAKE_CONST(this), s, CSerActionGetSerializeSize(), nType, nVersion); \\\n+        return NCONST_PTR(this)->SerializationOp(s, CSerActionGetSerializeSize(), nType, nVersion); \\\n     }                                                                                               \\\n     template<typename Stream>                                                                       \\\n     void Serialize(Stream& s, int nType, int nVersion) const {                                      \\\n-        SerializationOp(MAKE_CONST(this), s, CSerActionSerialize(), nType, nVersion);               \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);               \\\n     }                                                                                               \\\n     template<typename Stream>                                                                       \\\n     void Unserialize(Stream& s, int nType, int nVersion) {                                          \\\n-        SerializationOp(this, s, CSerActionUnserialize(), nType, nVersion);                         \\\n+        SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                               \\\n     }\n \n "
      },
      {
        "sha": "d30a28218fbcff085bff23710b85e5a44a33cc9f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 51,
        "deletions": 51,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -63,15 +63,15 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn);\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(thisPtr->nTime);\n-        READWRITE(thisPtr->vchPubKey);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n         return nSerSize;\n     }\n };\n@@ -493,17 +493,17 @@ class CMerkleTx : public CTransaction\n         fMerkleVerified = false;\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n \n-        nSerSize += SerReadWrite(s, *(CTransaction*)thisPtr, nType, nVersion, ser_action);\n-        nVersion = thisPtr->nVersion;\n-        READWRITE(thisPtr->hashBlock);\n-        READWRITE(thisPtr->vMerkleBranch);\n-        READWRITE(thisPtr->nIndex);\n+        nSerSize += SerReadWrite(s, *(CTransaction*)this, nType, nVersion, ser_action);\n+        nVersion = this->nVersion;\n+        READWRITE(hashBlock);\n+        READWRITE(vMerkleBranch);\n+        READWRITE(nIndex);\n \n         return nSerSize;\n     }\n@@ -610,14 +610,14 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-        CWalletTx* pthis = const_cast<CWalletTx*>(thisPtr);\n+        CWalletTx* pthis = const_cast<CWalletTx*>(this);\n         if (fRead)\n             pthis->Init(NULL);\n         char fSpent = false;\n@@ -628,18 +628,18 @@ class CWalletTx : public CMerkleTx\n \n             WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n-            if (thisPtr->nTimeSmart)\n-                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", thisPtr->nTimeSmart);\n+            if (nTimeSmart)\n+                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        nSerSize += SerReadWrite(s, *(CMerkleTx*)thisPtr, nType, nVersion,ser_action);\n+        nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n         std::vector<CMerkleTx> vUnused; // Used to be vtxPrev\n         READWRITE(vUnused);\n-        READWRITE(thisPtr->mapValue);\n-        READWRITE(thisPtr->vOrderForm);\n-        READWRITE(thisPtr->fTimeReceivedIsTxTime);\n-        READWRITE(thisPtr->nTimeReceived);\n-        READWRITE(thisPtr->fFromMe);\n+        READWRITE(mapValue);\n+        READWRITE(vOrderForm);\n+        READWRITE(fTimeReceivedIsTxTime);\n+        READWRITE(nTimeReceived);\n+        READWRITE(fFromMe);\n         READWRITE(fSpent);\n \n         if (fRead)\n@@ -648,7 +648,7 @@ class CWalletTx : public CMerkleTx\n \n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n-            pthis->nTimeSmart = thisPtr->mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n+            pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n         }\n \n         pthis->mapValue.erase(\"fromaccount\");\n@@ -904,17 +904,17 @@ class CWalletKey\n \n     CWalletKey(int64_t nExpires=0);\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(thisPtr->vchPrivKey);\n-        READWRITE(thisPtr->nTimeCreated);\n-        READWRITE(thisPtr->nTimeExpires);\n-        READWRITE(LIMITED_STRING(thisPtr->strComment, 65536));\n+        READWRITE(vchPrivKey);\n+        READWRITE(nTimeCreated);\n+        READWRITE(nTimeExpires);\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n         return nSerSize;\n     }\n };\n@@ -942,14 +942,14 @@ class CAccount\n         vchPubKey = CPubKey();\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(thisPtr->vchPubKey);\n+        READWRITE(vchPubKey);\n         return nSerSize;\n     }\n };\n@@ -987,44 +987,44 @@ class CAccountingEntry\n         nEntryNo = 0;\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n         bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n \n-        CAccountingEntry& me = *const_cast<CAccountingEntry*>(thisPtr);\n+        CAccountingEntry& me = *const_cast<CAccountingEntry*>(this);\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         // Note: strAccount is serialized as part of the key, not here.\n-        READWRITE(thisPtr->nCreditDebit);\n-        READWRITE(thisPtr->nTime);\n-        READWRITE(LIMITED_STRING(thisPtr->strOtherAccount, 65536));\n+        READWRITE(nCreditDebit);\n+        READWRITE(nTime);\n+        READWRITE(LIMITED_STRING(strOtherAccount, 65536));\n \n         if (!fRead)\n         {\n-            WriteOrderPos(thisPtr->nOrderPos, me.mapValue);\n+            WriteOrderPos(nOrderPos, me.mapValue);\n \n-            if (!(thisPtr->mapValue.empty() && thisPtr->_ssExtra.empty()))\n+            if (!(mapValue.empty() && _ssExtra.empty()))\n             {\n                 CDataStream ss(nType, nVersion);\n                 ss.insert(ss.begin(), '\\0');\n-                ss << thisPtr->mapValue;\n-                ss.insert(ss.end(), thisPtr->_ssExtra.begin(), thisPtr->_ssExtra.end());\n+                ss << mapValue;\n+                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n                 me.strComment.append(ss.str());\n             }\n         }\n \n-        READWRITE(LIMITED_STRING(thisPtr->strComment, 65536));\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n \n-        size_t nSepPos = thisPtr->strComment.find(\"\\0\", 0, 1);\n+        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n         if (fRead)\n         {\n             me.mapValue.clear();\n             if (std::string::npos != nSepPos)\n             {\n-                CDataStream ss(std::vector<char>(thisPtr->strComment.begin() + nSepPos + 1, thisPtr->strComment.end()), nType, nVersion);\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n                 ss >> me.mapValue;\n                 me._ssExtra = std::vector<char>(ss.begin(), ss.end());\n             }"
      },
      {
        "sha": "2dd257c2c194968b57dac8cf85fae2c11e6c85eb",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84881f8c472cc67dc757686eb7dc3b495b13cab8/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "patch": "@@ -54,14 +54,14 @@ class CKeyMetadata\n         nCreateTime = nCreateTime_;\n     }\n \n-    IMPLEMENT_SERIALIZE\n+    IMPLEMENT_SERIALIZE;\n \n-    template <typename T, typename Stream, typename Operation>\n-    inline static size_t SerializationOp(T thisPtr, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    template <typename Stream, typename Operation>\n+    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         size_t nSerSize = 0;\n-        READWRITE(thisPtr->nVersion);\n-        nVersion = thisPtr->nVersion;\n-        READWRITE(thisPtr->nCreateTime);\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n         return nSerSize;\n     }\n "
      }
    ]
  },
  {
    "sha": "31e9a8384a77947f6777d035992f4734618ed206",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWU5YTgzODRhNzc5NDdmNjc3N2QwMzU5OTJmNDczNDYxOGVkMjA2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-08-20T22:49:32Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-31T00:18:42Z"
      },
      "message": "Use CSizeComputer to avoid counting sizes in SerializationOp",
      "tree": {
        "sha": "9a055fbae630bad4b7982a5aae1294a9579382cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a055fbae630bad4b7982a5aae1294a9579382cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31e9a8384a77947f6777d035992f4734618ed206",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e9a8384a77947f6777d035992f4734618ed206",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31e9a8384a77947f6777d035992f4734618ed206",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e9a8384a77947f6777d035992f4734618ed206/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84881f8c472cc67dc757686eb7dc3b495b13cab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84881f8c472cc67dc757686eb7dc3b495b13cab8"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 81,
      "deletions": 184
    },
    "files": [
      {
        "sha": "2b6e45664c2e5a9ada16498d1193ffcf17b1c61b",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -49,14 +49,11 @@ class CAddrInfo : public CAddress\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        CAddress* pthis = (CAddress*)(this);\n-        READWRITE(*pthis);\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CAddress*)this);\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n         READWRITE(nAttempts);\n-        return nSerSize;\n     }\n \n     void Init()"
      },
      {
        "sha": "b25ac41f6b08e09bc86930590eed344a83701ea9",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -49,8 +49,7 @@ class CUnsignedAlert\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nRelayUntil);\n@@ -66,7 +65,6 @@ class CUnsignedAlert\n         READWRITE(LIMITED_STRING(strComment, 65536));\n         READWRITE(LIMITED_STRING(strStatusBar, 256));\n         READWRITE(LIMITED_STRING(strReserved, 256));\n-        return nSerSize;\n     }\n \n     void SetNull();\n@@ -89,11 +87,9 @@ class CAlert : public CUnsignedAlert\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vchMsg);\n         READWRITE(vchSig);\n-        return nSerSize;\n     }\n \n     void SetNull();"
      },
      {
        "sha": "a5269d08d48a9fb7f3e3847092115fdf4747f591",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -65,13 +65,11 @@ class CBloomFilter\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n         READWRITE(nTweak);\n         READWRITE(nFlags);\n-        return nSerSize;\n     }\n \n     void insert(const std::vector<unsigned char>& vKey);"
      },
      {
        "sha": "486782e5b734e3a8648c187765cf5e4758873516",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 13,
        "deletions": 44,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -34,10 +34,8 @@ class COutPoint\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(FLATDATA(*this));\n-        return nSerSize;\n     }\n \n     void SetNull() { hash = 0; n = (uint32_t) -1; }\n@@ -96,12 +94,10 @@ class CTxIn\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(prevout);\n         READWRITE(scriptSig);\n         READWRITE(nSequence);\n-        return nSerSize;\n     }\n \n     bool IsFinal() const\n@@ -152,10 +148,8 @@ class CFeeRate\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(nSatoshisPerK);\n-        return nSerSize;\n     }\n };\n \n@@ -179,11 +173,9 @@ class CTxOut\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(nValue);\n         READWRITE(scriptPubKey);\n-        return nSerSize;\n     }\n \n     void SetNull()\n@@ -264,9 +256,8 @@ class CTransaction\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n \n         READWRITE(*const_cast<int32_t*>(&this->nVersion));\n         nVersion = this->nVersion;\n@@ -275,8 +266,6 @@ class CTransaction\n         READWRITE(*const_cast<uint32_t*>(&nLockTime));\n         if (fRead)\n             UpdateHash();\n-\n-        return nSerSize;\n     }\n \n     bool IsNull() const {\n@@ -327,16 +316,12 @@ struct CMutableTransaction\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(vin);\n         READWRITE(vout);\n         READWRITE(nLockTime);\n-\n-        return nSerSize;\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the\n@@ -360,9 +345,8 @@ class CTxOutCompressor\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n         if (!fRead) {\n             uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));\n@@ -373,7 +357,6 @@ class CTxOutCompressor\n         }\n         CScriptCompressor cscript(REF(txout.scriptPubKey));\n         READWRITE(cscript);\n-        return nSerSize;\n     }\n };\n \n@@ -430,10 +413,8 @@ class CTxUndo\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vprevout);\n-        return nSerSize;\n     }\n };\n \n@@ -465,18 +446,14 @@ class CBlockHeader\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n         READWRITE(nBits);\n         READWRITE(nNonce);\n-\n-        return nSerSize;\n     }\n \n     void SetNull()\n@@ -526,13 +503,9 @@ class CBlock : public CBlockHeader\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(*(CBlockHeader*)this);\n         READWRITE(vtx);\n-\n-        return nSerSize;\n     }\n \n     void SetNull()\n@@ -580,14 +553,10 @@ struct CBlockLocator\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vHave);\n-\n-        return nSerSize;\n     }\n \n     void SetNull()"
      },
      {
        "sha": "b00f92721cb9070e4de688b093d180b49372a6f8",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -46,14 +46,12 @@ class CMasterKey\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vchCryptedKey);\n         READWRITE(vchSalt);\n         READWRITE(nDerivationMethod);\n         READWRITE(nDeriveIterations);\n         READWRITE(vchOtherDerivationParameters);\n-        return nSerSize;\n     }\n \n     CMasterKey()"
      },
      {
        "sha": "cea8a649e318fe8ead759e8534f01f7a38571673",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 27,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -200,11 +200,9 @@ struct CDiskBlockPos\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(VARINT(nFile));\n         READWRITE(VARINT(nPos));\n-        return nSerSize;\n     }\n \n     CDiskBlockPos() {\n@@ -235,11 +233,9 @@ struct CDiskTxPos : public CDiskBlockPos\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(*(CDiskBlockPos*)this);\n         READWRITE(VARINT(nTxOffset));\n-        return nSerSize;\n     }\n \n     CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n@@ -320,10 +316,8 @@ class CBlockUndo\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vtxundo);\n-        return nSerSize;\n     }\n \n     bool WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock);\n@@ -429,9 +423,8 @@ class CPartialMerkleTree\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n \n         READWRITE(nTransactions);\n         READWRITE(vHash);\n@@ -449,8 +442,6 @@ class CPartialMerkleTree\n                 vBytes[p / 8] |= vBits[p] << (p % 8);\n             READWRITE(vBytes);\n         }\n-\n-        return nSerSize;\n     }\n \n     // Construct a partial merkle tree from a list of transaction id's, and a mask that selects a subset of them\n@@ -510,18 +501,14 @@ class CBlockFileInfo\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(VARINT(nBlocks));\n         READWRITE(VARINT(nSize));\n         READWRITE(VARINT(nUndoSize));\n         READWRITE(VARINT(nHeightFirst));\n         READWRITE(VARINT(nHeightLast));\n         READWRITE(VARINT(nTimeFirst));\n         READWRITE(VARINT(nTimeLast));\n-\n-        return nSerSize;\n     }\n \n      void SetNull() {\n@@ -788,9 +775,7 @@ class CDiskBlockIndex : public CBlockIndex\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n \n@@ -811,8 +796,6 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(nTime);\n         READWRITE(nBits);\n         READWRITE(nNonce);\n-\n-        return nSerSize;\n     }\n \n     uint256 GetBlockHash() const\n@@ -1014,11 +997,9 @@ class CMerkleBlock\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(header);\n         READWRITE(txn);\n-        return nSerSize;\n     }\n };\n "
      },
      {
        "sha": "1ea37519a699d3880869b6deaeb9bb44c4eb9cd2",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -91,10 +91,8 @@ class CNetAddr\n         IMPLEMENT_SERIALIZE;\n \n         template <typename Stream, typename Operation>\n-        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            size_t nSerSize = 0;\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n-            return nSerSize;\n         }\n };\n \n@@ -155,16 +153,13 @@ class CService : public CNetAddr\n         IMPLEMENT_SERIALIZE;\n \n         template <typename Stream, typename Operation>\n-        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n-            size_t nSerSize = 0;\n-            CService* pthis = const_cast<CService*>(this);\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+            bool fRead = ser_action.ForRead();\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n             READWRITE(portN);\n             if (fRead)\n-                 pthis->port = ntohs(portN);\n-            return nSerSize;\n+                 port = ntohs(portN);\n         }\n };\n "
      },
      {
        "sha": "e4b0991774997b5473ae12d9c43bd9b1326081c1",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -38,13 +38,11 @@ class CMessageHeader\n         IMPLEMENT_SERIALIZE;\n \n         template <typename Stream, typename Operation>\n-        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            size_t nSerSize = 0;\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(pchMessageStart));\n             READWRITE(FLATDATA(pchCommand));\n             READWRITE(nMessageSize);\n             READWRITE(nChecksum);\n-            return nSerSize;\n         }\n \n     // TODO: make private (improves encapsulation)\n@@ -90,12 +88,10 @@ class CAddress : public CService\n         IMPLEMENT_SERIALIZE;\n \n         template <typename Stream, typename Operation>\n-        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            size_t nSerSize = 0;\n-            bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+            bool fRead = ser_action.ForRead();\n \n             CAddress* pthis = const_cast<CAddress*>(this);\n-            CService* pip = (CService*)pthis;\n             if (fRead)\n                 pthis->Init();\n             if (nType & SER_DISK)\n@@ -104,9 +100,7 @@ class CAddress : public CService\n                 (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n             READWRITE(nTime);\n             READWRITE(nServices);\n-            READWRITE(*pip);\n-\n-            return nSerSize;\n+            READWRITE(*(CService*)this);\n         }\n \n     // TODO: make private (improves encapsulation)\n@@ -131,11 +125,9 @@ class CInv\n         IMPLEMENT_SERIALIZE;\n \n         template <typename Stream, typename Operation>\n-        inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            size_t nSerSize = 0;\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(type);\n             READWRITE(hash);\n-            return nSerSize;\n         }\n \n         friend bool operator<(const CInv& a, const CInv& b);"
      },
      {
        "sha": "a558aa4942389c1acdb3a92ed28b88bef70f09ce",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -27,9 +27,8 @@ class RecentRequestEntry\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n \n         RecentRequestEntry* pthis = const_cast<RecentRequestEntry*>(this);\n \n@@ -42,9 +41,7 @@ class RecentRequestEntry\n         READWRITE(recipient);\n \n         if (fRead)\n-            pthis->date = QDateTime::fromTime_t(nDate);\n-\n-        return nSerSize;\n+            date = QDateTime::fromTime_t(nDate);\n     }\n };\n "
      },
      {
        "sha": "2a9ac4650f36dcf89c06fdfc33b4439dbd2e84f7",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -62,9 +62,8 @@ class SendCoinsRecipient\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n \n         SendCoinsRecipient* pthis = const_cast<SendCoinsRecipient*>(this);\n \n@@ -94,8 +93,6 @@ class SendCoinsRecipient\n                 pthis->paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n             pthis->authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n         }\n-\n-        return nSerSize;\n     }\n };\n "
      },
      {
        "sha": "4e6ca57a49e7e1043d0aa84cdcff51b92cdf74de",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 23,
        "deletions": 28,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -22,7 +22,6 @@\n \n #include <boost/tuple/tuple.hpp>\n #include <boost/type_traits/is_fundamental.hpp>\n-#include <boost/typeof/typeof.hpp>\n \n class CAutoFile;\n class CDataStream;\n@@ -88,24 +87,25 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n-#define READWRITE(obj)      (nSerSize += ::SerReadWrite(s, (obj), nType, nVersion, ser_action))\n+#define READWRITE(obj)      (::SerReadWrite(s, (obj), nType, nVersion, ser_action))\n \n /* Implement three methods for serializable objects. These are actually wrappers over\n  * \"SerializationOp\" template, which implements the body of each class' serialization\n  * code. Adding \"IMPLEMENT_SERIALIZE\" in the body of the class causes these wrappers to be\n  * added as members. */\n-#define IMPLEMENT_SERIALIZE                                                                         \\\n-    size_t GetSerializeSize(int nType, int nVersion) const {                                        \\\n-        ser_streamplaceholder s;                                                                    \\\n-        return NCONST_PTR(this)->SerializationOp(s, CSerActionGetSerializeSize(), nType, nVersion); \\\n-    }                                                                                               \\\n-    template<typename Stream>                                                                       \\\n-    void Serialize(Stream& s, int nType, int nVersion) const {                                      \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);               \\\n-    }                                                                                               \\\n-    template<typename Stream>                                                                       \\\n-    void Unserialize(Stream& s, int nType, int nVersion) {                                          \\\n-        SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                               \\\n+#define IMPLEMENT_SERIALIZE                                                          \\\n+    size_t GetSerializeSize(int nType, int nVersion) const {                         \\\n+        CSizeComputer s(nType, nVersion);                                            \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n+        return s.size();                                                             \\\n+    }                                                                                \\\n+    template<typename Stream>                                                        \\\n+    void Serialize(Stream& s, int nType, int nVersion) const {                       \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n+    }                                                                                \\\n+    template<typename Stream>                                                        \\\n+    void Unserialize(Stream& s, int nType, int nVersion) {                           \\\n+        SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n \n@@ -809,32 +809,27 @@ void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)\n //\n // Support for IMPLEMENT_SERIALIZE and READWRITE macro\n //\n-class CSerActionGetSerializeSize { };\n-class CSerActionSerialize { };\n-class CSerActionUnserialize { };\n-\n-template<typename Stream, typename T>\n-inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionGetSerializeSize ser_action)\n+struct CSerActionSerialize\n {\n-    return ::GetSerializeSize(obj, nType, nVersion);\n-}\n+    bool ForRead() const { return false; }\n+};\n+struct CSerActionUnserialize\n+{\n+    bool ForRead() const { return true; }\n+};\n \n template<typename Stream, typename T>\n-inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)\n+inline void SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)\n {\n     ::Serialize(s, obj, nType, nVersion);\n-    return 0;\n }\n \n template<typename Stream, typename T>\n-inline unsigned int SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)\n+inline void SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)\n {\n     ::Unserialize(s, obj, nType, nVersion);\n-    return 0;\n }\n \n-struct ser_streamplaceholder { };\n-\n \n \n "
      },
      {
        "sha": "aa811ee584ae7cfe6657bf30fbb9033b60fa1f4b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 16,
        "deletions": 32,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -66,13 +66,11 @@ class CKeyPool\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(nTime);\n         READWRITE(vchPubKey);\n-        return nSerSize;\n     }\n };\n \n@@ -496,16 +494,12 @@ class CMerkleTx : public CTransaction\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-\n-        nSerSize += SerReadWrite(s, *(CTransaction*)this, nType, nVersion, ser_action);\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CTransaction*)this);\n         nVersion = this->nVersion;\n         READWRITE(hashBlock);\n         READWRITE(vMerkleBranch);\n         READWRITE(nIndex);\n-\n-        return nSerSize;\n     }\n \n     int SetMerkleBranch(const CBlock* pblock=NULL);\n@@ -613,9 +607,8 @@ class CWalletTx : public CMerkleTx\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n \n         CWalletTx* pthis = const_cast<CWalletTx*>(this);\n         if (fRead)\n@@ -632,7 +625,7 @@ class CWalletTx : public CMerkleTx\n                 pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n+        READWRITE(*(CMerkleTx*)this);\n         std::vector<CMerkleTx> vUnused; // Used to be vtxPrev\n         READWRITE(vUnused);\n         READWRITE(mapValue);\n@@ -651,13 +644,11 @@ class CWalletTx : public CMerkleTx\n             pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n         }\n \n-        pthis->mapValue.erase(\"fromaccount\");\n-        pthis->mapValue.erase(\"version\");\n-        pthis->mapValue.erase(\"spent\");\n-        pthis->mapValue.erase(\"n\");\n-        pthis->mapValue.erase(\"timesmart\");\n-\n-        return nSerSize;\n+        mapValue.erase(\"fromaccount\");\n+        mapValue.erase(\"version\");\n+        mapValue.erase(\"spent\");\n+        mapValue.erase(\"n\");\n+        mapValue.erase(\"timesmart\");\n     }\n \n     // make sure balances are recalculated\n@@ -907,15 +898,13 @@ class CWalletKey\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPrivKey);\n         READWRITE(nTimeCreated);\n         READWRITE(nTimeExpires);\n         READWRITE(LIMITED_STRING(strComment, 65536));\n-        return nSerSize;\n     }\n };\n \n@@ -945,12 +934,10 @@ class CAccount\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPubKey);\n-        return nSerSize;\n     }\n };\n \n@@ -990,9 +977,8 @@ class CAccountingEntry\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n-        bool fRead = boost::is_same<Operation, CSerActionUnserialize>();\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        bool fRead = ser_action.ForRead();\n \n         CAccountingEntry& me = *const_cast<CAccountingEntry*>(this);\n         if (!(nType & SER_GETHASH))\n@@ -1033,9 +1019,7 @@ class CAccountingEntry\n         if (std::string::npos != nSepPos)\n             me.strComment.erase(nSepPos);\n \n-        me.mapValue.erase(\"n\");\n-\n-        return nSerSize;\n+        mapValue.erase(\"n\");\n     }\n \n private:"
      },
      {
        "sha": "c2f427ae77a35743f02a68187629d173c6c1b9f3",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e9a8384a77947f6777d035992f4734618ed206/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e9a8384a77947f6777d035992f4734618ed206/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=31e9a8384a77947f6777d035992f4734618ed206",
        "patch": "@@ -57,12 +57,10 @@ class CKeyMetadata\n     IMPLEMENT_SERIALIZE;\n \n     template <typename Stream, typename Operation>\n-    inline size_t SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        size_t nSerSize = 0;\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nCreateTime);\n-        return nSerSize;\n     }\n \n     void SetNull()"
      }
    ]
  }
]