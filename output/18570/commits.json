[
  {
    "sha": "1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTg2OGJiYmIxYjNhYmRjYzIzMTA5YzEwYzE3MTVmNWEzZjg0MDdi",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-04-27T08:45:03Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T07:36:16Z"
      },
      "message": "rpc: return block hash & height in getbalances, gettransaction & getwalletinfo JSONs",
      "tree": {
        "sha": "b1a8ca19579efcc5af3b41bb1db64b4df8c33a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1a8ca19579efcc5af3b41bb1db64b4df8c33a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl63rvAACgkQJiaFvHjt\nEfuxxgf/dE6fkjxd/5Y/C5a1cohFFPZXu6qNGfIvcIZDtZJ+9YL/0vh2aHlGlRM1\nORvt0ljzrZm57bxtag7TSxHrANLlmc0Svcp4xvoeGVx+Aquj4zaph4FA8B4N9XzR\nlnDvYrPTnfhjXxAzbwKLasVFJArK7Pye+3eDXBd3ggq75boCLwujCT1GNGHCHaNh\nUWMcu3Ig6VahZ49kDVzjdTHLwmppCgRGdBjgkeaeZDGAES2dygudgg6hnerT68Tc\n2WWZLGvFcZ7+ca6fV9/QBEoQ2bCyI85j/Pk/2/vgfOQKx5JdyCJrOP8KE5GNrKxq\nD/3x1NYnptm0SZnNDApTANTNIAyNoA==\n=cWyu\n-----END PGP SIGNATURE-----",
        "payload": "tree b1a8ca19579efcc5af3b41bb1db64b4df8c33a13\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor Harris <brakmic@gmail.com> 1587977103 +0200\ncommitter Harris <brakmic@gmail.com> 1589096176 +0200\n\nrpc: return block hash & height in getbalances, gettransaction & getwalletinfo JSONs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 62,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ba73f2707e72f368a0ad43d93c151a12d1252b8b",
        "filename": "doc/release-notes-18570.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/doc/release-notes-18570.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/doc/release-notes-18570.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18570.md?ref=1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
        "patch": "@@ -0,0 +1,6 @@\n+- The `getbalances` RPC now returns a `lastprocessedblock` JSON object which contains the wallet's last processed block\n+  hash and height at the time the balances were calculated. This result shouldn't be cached because importing new keys could invalidate it.\n+- The `gettransaction` RPC now returns a `lastprocessedblock` JSON object which contains the wallet's last processed block\n+  hash and height at the time the transaction information was generated.\n+- The `getwalletinfo` RPC now returns a `lastprocessedblock` JSON object which contains the wallet's last processed block\n+  hash and height at the time the wallet information was generated.\n\\ No newline at end of file"
      },
      {
        "sha": "00424df2832cc95d06b2f9993f1baa66722993c3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
        "patch": "@@ -54,6 +54,19 @@ static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValu\n     return avoid_reuse;\n }\n \n+static const RPCResult RESULT_LAST_PROCESSED_BLOCK { RPCResult::Type::OBJ, \"lastprocessedblock\", \"hash and height of the block this information was generated on\",{\n+    {RPCResult::Type::STR_HEX, \"hash\", \"hash of the block this information was generated on\"},\n+    {RPCResult::Type::NUM, \"height\", \"height of the block this information was generated on\"}}\n+};\n+\n+void AppendLastProcessedBlock(UniValue& entry, const CWallet& wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    AssertLockHeld(wallet.cs_wallet);\n+    UniValue lastprocessedblock{UniValue::VOBJ};\n+    lastprocessedblock.pushKV(\"hash\", wallet.GetLastBlockHash().GetHex());\n+    lastprocessedblock.pushKV(\"height\", wallet.GetLastBlockHeight());\n+    entry.pushKV(\"lastprocessedblock\", lastprocessedblock);\n+}\n \n /** Used by RPC commands that have an include_watchonly parameter.\n  *  We default to true for watchonly wallets if include_watchonly isn't\n@@ -1674,6 +1687,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"Equivalent to the RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\"},\n                         }},\n+                        RESULT_LAST_PROCESSED_BLOCK,\n                     })\n                 },\n                 RPCExamples{\n@@ -1730,6 +1744,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n         TxToUniv(*wtx.tx, uint256(), decoded, false);\n         entry.pushKV(\"decoded\", decoded);\n     }\n+    AppendLastProcessedBlock(entry, *pwallet);\n \n     return entry;\n }\n@@ -2354,6 +2369,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n                     {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n                 }},\n+                RESULT_LAST_PROCESSED_BLOCK,\n             }\n             },\n         RPCExamples{\n@@ -2390,6 +2406,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         balances_watchonly.pushKV(\"immature\", ValueFromAmount(bal.m_watchonly_immature));\n         balances.pushKV(\"watchonly\", balances_watchonly);\n     }\n+    AppendLastProcessedBlock(balances, wallet);\n     return balances;\n }\n \n@@ -2429,6 +2446,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                             {RPCResult::Type::NUM, \"progress\", \"scanning progress percentage [0.0, 1.0]\"},\n                         }},\n                         {RPCResult::Type::BOOL, \"descriptors\", \"whether this wallet uses descriptors for scriptPubKey management\"},\n+                        RESULT_LAST_PROCESSED_BLOCK,\n                     }},\n                 },\n                 RPCExamples{\n@@ -2485,6 +2503,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n         obj.pushKV(\"scanning\", false);\n     }\n     obj.pushKV(\"descriptors\", pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+    AppendLastProcessedBlock(obj, *pwallet);\n     return obj;\n }\n "
      },
      {
        "sha": "464c387712cbb802acd7b6b5409c431d7e21bd55",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
        "patch": "@@ -10,6 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n+    assert_is_hash_string,\n     assert_raises_rpc_error,\n     connect_nodes,\n     sync_blocks,\n@@ -158,8 +160,13 @@ def test_balances(*, fee_node_1=0):\n             expected_balances_1 = {'mine':      {'immature':          Decimal('0E-8'),\n                                                  'trusted':           Decimal('0E-8'),  # node 1's send had an unsafe input\n                                                  'untrusted_pending': Decimal('30.0') - fee_node_1}}  # Doesn't include output of node 0's send since it was spent\n-            assert_equal(self.nodes[0].getbalances(), expected_balances_0)\n-            assert_equal(self.nodes[1].getbalances(), expected_balances_1)\n+            balances_0 = self.nodes[0].getbalances()\n+            balances_1 = self.nodes[1].getbalances()\n+            # remove lastprocessedblock keys (they will be tested later)\n+            del balances_0['lastprocessedblock']\n+            del balances_1['lastprocessedblock']\n+            assert_equal(balances_0, expected_balances_0)\n+            assert_equal(balances_1, expected_balances_1)\n             # getbalance without any arguments includes unconfirmed transactions, but not untrusted transactions\n             assert_equal(self.nodes[0].getbalance(), Decimal('9.99'))  # change from node 0's send\n             assert_equal(self.nodes[1].getbalance(), Decimal('0'))  # node 1's send had an unsafe input\n@@ -271,5 +278,32 @@ def test_balances(*, fee_node_1=0):\n         assert_equal(self.nodes[0].getbalance(minconf=0), total_amount + 1)  # The reorg recovered our fee of 1 coin\n \n \n+        #Tests the lastprocessedblock JSON object in getbalances, getwalletinfo\n+        #and gettransaction by checking for valid hex strings and by comparing\n+        #the hashes & heights between generated blocks.\n+        self.log.info(\"Test getbalances returns expected lastprocessedblock json object\")\n+        self.nodes[0].generatetoaddress(2, self.nodes[0].get_deterministic_priv_key().address)\n+        balances = self.nodes[0].getbalances()\n+        assert_greater_than(balances['mine']['immature'], 0)\n+\n+        prev_hash = self.nodes[0].getbestblockhash()\n+        prev_height = self.nodes[0].getblock(prev_hash)['height']\n+        self.nodes[0].generatetoaddress(5, self.nodes[0].get_deterministic_priv_key().address)\n+        lastblock = self.nodes[0].getbalances()['lastprocessedblock']\n+        assert_is_hash_string(lastblock['hash'])\n+        assert_equal((prev_hash == lastblock['hash']), False)\n+        assert_greater_than(lastblock['height'], prev_height)\n+\n+        self.log.info(\"Test getwalletinfo returns expected lastprocessedblock json object\")\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_greater_than(walletinfo['lastprocessedblock']['height'], 0)\n+        assert_is_hash_string(walletinfo['lastprocessedblock']['hash'])\n+\n+        self.log.info(\"Test gettransaction returns expected lastprocessedblock json object\")\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        self.nodes[0].generatetoaddress(6, self.nodes[0].get_deterministic_priv_key().address)\n+        tx_info = self.nodes[0].gettransaction(txid)\n+        assert_is_hash_string(tx_info['lastprocessedblock']['hash'])\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      },
      {
        "sha": "5b7e6187c42be445368372526889395eec4f6b7c",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e868bbbb1b3abdcc23109c10c1715f5a3f8407b/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=1e868bbbb1b3abdcc23109c10c1715f5a3f8407b",
        "patch": "@@ -510,7 +510,7 @@ def run_test(self):\n                                  \"category\": baz[\"category\"],\n                                  \"vout\":     baz[\"vout\"]}\n         expected_fields = frozenset({'amount', 'bip125-replaceable', 'confirmations', 'details', 'fee',\n-                                     'hex', 'time', 'timereceived', 'trusted', 'txid', 'walletconflicts'})\n+                                     'hex', 'lastprocessedblock', 'time', 'timereceived', 'trusted', 'txid', 'walletconflicts'})\n         verbose_field = \"decoded\"\n         expected_verbose_fields = expected_fields | {verbose_field}\n "
      }
    ]
  }
]