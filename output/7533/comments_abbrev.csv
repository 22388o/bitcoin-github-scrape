jameshilliard,2016-03-09T05:14:52Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-194116350,194116350,
promag,2016-03-09T08:04:43Z,"@luke-jr why not turn the second argument an JSON object to be more scalable. For instance, I was planning to add option unlockUnspents.\n",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-194170462,194170462,
jameshilliard,2016-07-05T18:32:39Z,Is this something that we might be able to get in 0.13? Without something like this the alternative for pool operators is usually to patch out the problematic is-standard check blocking the send which is usually not desired.\n,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-230563129,230563129,
laanwj,2016-07-11T12:55:43Z,"Sorry, no, this missed the feature freeze for 0.13 by a long haul.\n",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-231726081,231726081,
MarcoFalke,2016-10-22T17:58:24Z,Needs rebase on top of master instead of 0.13\n,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-255543638,255543638,
luke-jr,2016-11-12T07:05:10Z,@jameshilliard Knots has had this for a while. Miners should probably be using it anyway.\n\n@MarcoFalke Rebased.\n,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-260106400,260106400,
paveljanik,2016-12-10T19:51:56Z,"Concept ACK\nNeeds rebase.\n",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-266233322,266233322,
luke-jr,2016-12-26T18:58:06Z,"Rebased.\n\nCould be combined with #9422 to restore policy-bypassing transactions after a restart, but I consider that beyond the scope of this PR, and something to address after both get merged.",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-269234736,269234736,
sipa,2017-04-09T14:36:12Z,"I'm not convinced about the need to ignore based on the exact reason (as that is likely something that's hard to maintain, as reasons change over time). How about just a boolean to bypass standardness/fee/mempool policy rules (but keep consensus and script execution flags for upgradability)?",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-292789614,292789614,
TheBlueMatt,2017-07-11T17:45:29Z,Agree with @sipa. This is not going to be maintainable for API clients. Are you planning on rebasing this luke?,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-314520218,314520218,
luke-jr,2017-08-14T14:22:12Z,"Typically people only want to bypass a specific policy, and not others. For example, a miner might want to bypass the fee checks or bypass the ancestor limit on replacements, but not other policies.\n\nWill have a rebase done soon.",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-322203646,322203646,
jameshilliard,2017-08-14T21:46:53Z,"I don't think it's all that important to have the ability to have granular overrides, if that's important to some miners it can be implemented externally, most of the time a miner will just want to force add the transaction and will have already checked that it violates policy rules(often by looking at the failure reason when they try and send it normally).",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-322318861,322318861,
luke-jr,2017-08-16T18:34:27Z,"@jameshilliard It can't be added externally... Looking at the *first* failure reason won't tell you if it violates other policies as well.\n\nAnyhow, rebase is ready for review, and refactored somewhat so hopefully it's also easier to review.",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-322860684,322860684,
sipa,2017-09-21T19:47:53Z,"I think the ability to override specific rejection reasons is overkill, and risks creating an interface that is unmaintainable.\n\nA boolean to say ""ignore all policy, accept if consensus-valid"" would be fine, though.",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-331262043,331262043,
laanwj,2017-09-21T19:58:11Z,"Agree with @sipa, making this too granular makes this unmaintainable as rejection reasons might come and go, or implemented differently, as policy changes. After all, policy is not standardized.\n(on the other hand ,the interface would be expected to change based on policy changes...)",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-331264593,331264593,
DuncanBetts,2018-01-08T14:05:39Z,"I've just been mulling over this. How about giving node operators a hook, and allowing them to implement this sort of functionality themselves if they need it. I note that no node operators aside luke have requested this functionality here. I don't know how practical my suggestion is.",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-355975013,355975013,
ghost,2018-01-25T08:43:50Z,this seems kool lets merge it ,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-360399077,360399077,
Sjors,2018-03-08T21:26:01Z,"Needs love (as in, needs rebase and addressing concerns). A simpler alternative is probably the best way to move this forward. Some examples of use cases would be nice too; ""node operators who wish to manually accept transactions that don't meet their typical policies"" is a bit vague.",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-371629753,371629753,
laanwj,2018-08-31T10:48:03Z,"Closing and adding ""up for grabs"", this is the oldest PR and has been inactive for quite long, too",https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-417627169,417627169,
MarcoFalke,2020-12-23T16:15:29Z,Did something like this in #20753 ,https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-750369490,750369490,
MarcoFalke,2016-03-30T09:02:14Z,"Wouldn't it make sense to finally get rid of `fLimitFree`, which is only hardcoded to `false` for the wallet and sendrawtransaction?\n",https://github.com/bitcoin/bitcoin/pull/7533#discussion_r57856636,57856636,src/main.h
luke-jr,2016-11-12T06:13:54Z,"It does already support ignoring ""rate limited free transaction"" failures, but fLimitFree not only bypasses such failures, it also exempts the transaction from the rate limiting count entirely.\n",https://github.com/bitcoin/bitcoin/pull/7533#discussion_r87687717,87687717,src/main.h
