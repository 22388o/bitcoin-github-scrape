[
  {
    "sha": "963da741dd942e3294e09f4d7665228a2baba5dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjNkYTc0MWRkOTQyZTMyOTRlMDlmNGQ3NjY1MjI4YTJiYWJhNWRk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-14T14:09:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-21T20:40:25Z"
      },
      "message": "AcceptToMemoryPool: Standardise rejection reason format\n\nBIP22-like",
      "tree": {
        "sha": "88455e9255c6aa033d4b512f802da0fe38413f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88455e9255c6aa033d4b512f802da0fe38413f8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/963da741dd942e3294e09f4d7665228a2baba5dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/963da741dd942e3294e09f4d7665228a2baba5dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/963da741dd942e3294e09f4d7665228a2baba5dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/963da741dd942e3294e09f4d7665228a2baba5dd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "263a78b5daa9f2c1530cb81f3b55cf26a6918d21",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/963da741dd942e3294e09f4d7665228a2baba5dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/963da741dd942e3294e09f4d7665228a2baba5dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=963da741dd942e3294e09f4d7665228a2baba5dd",
        "patch": "@@ -613,12 +613,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"fee-too-low-for-mempool\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n         if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"fee-too-low-for-relay\");\n         }\n \n         if (nAbsurdFee && nFees > nAbsurdFee)\n@@ -701,7 +701,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 if (newFeeRate <= oldFeeRate)\n                 {\n                     return state.DoS(0, false,\n-                            REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                            REJECT_INSUFFICIENTFEE, \"fee-too-low-for-replacement\", false,\n                             strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n                                   hash.ToString(),\n                                   newFeeRate.ToString(),\n@@ -730,7 +730,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 }\n             } else {\n                 return state.DoS(0, false,\n-                        REJECT_NONSTANDARD, \"too many potential replacements\", false,\n+                        REJECT_NONSTANDARD, \"too-many-replacements\", false,\n                         strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n                             hash.ToString(),\n                             nConflictingCount,\n@@ -762,7 +762,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             if (nModifiedFees < nConflictingFees)\n             {\n                 return state.DoS(0, false,\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                                 REJECT_INSUFFICIENTFEE, \"fee-too-low-for-replacement\", false,\n                                  strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n                                           hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n             }\n@@ -773,7 +773,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n                 return state.DoS(0, false,\n-                        REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                        REJECT_INSUFFICIENTFEE, \"fee-too-low-for-replacement\", false,\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n@@ -862,7 +862,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         if (!fOverrideMempoolLimit) {\n             LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"fee-too-low-for-mempool-full\");\n         }\n     }\n "
      },
      {
        "sha": "34fe4634e483a77e7020bc334f9e585976cbdf01",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/963da741dd942e3294e09f4d7665228a2baba5dd/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/963da741dd942e3294e09f4d7665228a2baba5dd/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=963da741dd942e3294e09f4d7665228a2baba5dd",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_jsonrpc(-26, \"66: fee-too-low-for-relay\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "717571e46ba31f66e2d69cc0134881738f760bf5",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/963da741dd942e3294e09f4d7665228a2baba5dd/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/963da741dd942e3294e09f4d7665228a2baba5dd/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=963da741dd942e3294e09f4d7665228a2baba5dd",
        "patch": "@@ -124,7 +124,7 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_jsonrpc(-26, \"fee-too-low-for-replacement\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n@@ -167,7 +167,7 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_jsonrpc(-26, \"fee-too-low-for-replacement\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n@@ -228,7 +228,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_jsonrpc(-26, \"fee-too-low-for-replacement\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n@@ -256,7 +256,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_jsonrpc(-26, \"too-many-replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -280,7 +280,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_jsonrpc(-26, \"fee-too-low-for-replacement\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -385,7 +385,7 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_jsonrpc(-26, \"too-many-replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n@@ -482,7 +482,7 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_jsonrpc(-26, \"fee-too-low-for-replacement\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n@@ -509,7 +509,7 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_jsonrpc(-26, \"fee-too-low-for-replacement\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))"
      }
    ]
  },
  {
    "sha": "c59e7166253e962043b5fdccd5de8a21969d21e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTllNzE2NjI1M2U5NjIwNDNiNWZkY2NkNWRlOGEyMTk2OWQyMWUw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-16T23:49:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-21T20:40:25Z"
      },
      "message": "AreInputsStandard: Return specific reject reasons",
      "tree": {
        "sha": "c9e88ed7fcc72eb9f6e43a88243e4538ffe60492",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9e88ed7fcc72eb9f6e43a88243e4538ffe60492"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c59e7166253e962043b5fdccd5de8a21969d21e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59e7166253e962043b5fdccd5de8a21969d21e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c59e7166253e962043b5fdccd5de8a21969d21e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59e7166253e962043b5fdccd5de8a21969d21e0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "963da741dd942e3294e09f4d7665228a2baba5dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/963da741dd942e3294e09f4d7665228a2baba5dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/963da741dd942e3294e09f4d7665228a2baba5dd"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "04a0b018f88b6b241152cb4033c7b37d60549cf4",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59e7166253e962043b5fdccd5de8a21969d21e0/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59e7166253e962043b5fdccd5de8a21969d21e0/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c59e7166253e962043b5fdccd5de8a21969d21e0",
        "patch": "@@ -160,7 +160,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -173,19 +173,26 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         txnouttype whichType;\n         // get the scriptPubKey corresponding to this input:\n         const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n+        if (!Solver(prevScript, whichType, vSolutions)) {\n+            out_reason = reason_prefix + \"script-unknown\";\n             return false;\n+        }\n \n         if (whichType == TX_SCRIPTHASH)\n         {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE)) {\n+                out_reason = reason_prefix + \"scriptsig-failure\";\n                 return false;\n-            if (stack.empty())\n+            }\n+            if (stack.empty()) {\n+                out_reason = reason_prefix + \"scriptcheck-missing\";\n                 return false;\n+            }\n             CScript subscript(stack.back().begin(), stack.back().end());\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+                out_reason = reason_prefix + \"scriptcheck-sigops\";\n                 return false;\n             }\n         }"
      },
      {
        "sha": "d4588c3ec01f1275634c9767ff71989315642b45",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59e7166253e962043b5fdccd5de8a21969d21e0/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59e7166253e962043b5fdccd5de8a21969d21e0/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=c59e7166253e962043b5fdccd5de8a21969d21e0",
        "patch": "@@ -89,7 +89,13 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason);\n+\n+inline bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs) {\n+    std::string reason;\n+    return AreInputsStandard(tx, mapInputs, reason, reason);\n+}\n+\n     /**\n      * Check if the transaction is over standard P2WSH resources limit:\n      * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements"
      },
      {
        "sha": "f3ee9682f68818bad566db4e0d1ddead9be446dd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59e7166253e962043b5fdccd5de8a21969d21e0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59e7166253e962043b5fdccd5de8a21969d21e0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c59e7166253e962043b5fdccd5de8a21969d21e0",
        "patch": "@@ -572,8 +572,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+        if (fRequireStandard && !AreInputsStandard(tx, view, \"bad-txns-input-\", reason)) {\n+            return state.Invalid(false, REJECT_NONSTANDARD, reason);\n+        }\n \n         // Check for non-standard witness in P2WSH\n         if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))"
      }
    ]
  },
  {
    "sha": "e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzg2ZTcyNmQ0YTBiOGU2OGFhODdiZDM4ZGZhYzRhZWVjYzc2YmU2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-17T03:24:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-21T20:40:25Z"
      },
      "message": "AcceptToMemoryPool: Refactor overrideable rejections (previously fOverrideMempoolLimit) with flexible set of rejections to ignore",
      "tree": {
        "sha": "18a5669d76edd5e9cc3b5dc8c9910258061cddf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18a5669d76edd5e9cc3b5dc8c9910258061cddf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c59e7166253e962043b5fdccd5de8a21969d21e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59e7166253e962043b5fdccd5de8a21969d21e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c59e7166253e962043b5fdccd5de8a21969d21e0"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 170,
      "deletions": 86
    },
    "files": [
      {
        "sha": "72d34128fd5c4e27ac050222575ad0bbdf8ed7c6",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 52,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -69,6 +69,9 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n      * script can be anything; an attacker could use a very\n      * expensive-to-check-upon-redemption script like:\n      *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     *\n+     * Note this must assign whichType even if returning false, in case\n+     * IsStandardTx ignores the \"scriptpubkey\" rejection.\n      */\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n@@ -96,71 +99,94 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)\n-{\n-    if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n+namespace {\n+    inline bool MaybeReject_(std::string& out_reason, const std::string& reason, const std::string& reason_prefix, const ignore_rejects_type& ignore_rejects) {\n+        if (ignore_rejects.count(reason_prefix + reason)) {\n+            return false;\n+        }\n+\n+        out_reason = reason_prefix + reason;\n+        return true;\n     }\n+}\n \n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_WEIGHT mitigates CPU exhaustion attacks.\n-    unsigned int sz = GetTransactionWeight(tx);\n-    if (sz >= MAX_STANDARD_TX_WEIGHT) {\n-        reason = \"tx-size\";\n-        return false;\n+#define MaybeReject(reason)  do {  \\\n+    if (MaybeReject_(out_reason, reason, reason_prefix, ignore_rejects)) {  \\\n+        return false;  \\\n+    }  \\\n+} while(0)\n+\n+bool IsStandardTx(const CTransaction& tx, std::string& out_reason, const bool witnessEnabled, const ignore_rejects_type& ignore_rejects)\n+{\n+    const std::string reason_prefix;\n+\n+    if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n+        MaybeReject(\"version\");\n     }\n \n-    for (const CTxIn& txin : tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys (remember the 520 byte limit on redeemScript size). That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard.\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n+    if (!ignore_rejects.count(\"tx-size\")) {\n+        // Extremely large transactions with lots of inputs can cost the network\n+        // almost as much to process as they cost the sender in fees, because\n+        // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+        // to MAX_STANDARD_TX_WEIGHT mitigates CPU exhaustion attacks.\n+        unsigned int sz = GetTransactionWeight(tx);\n+        if (sz >= MAX_STANDARD_TX_WEIGHT) {\n+            out_reason = \"tx-size\";\n             return false;\n         }\n     }\n \n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    for (const CTxOut& txout : tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n+    bool fCheckPushOnly = !ignore_rejects.count(\"scriptsig-not-pushonly\");\n+    if ((!ignore_rejects.count(\"scriptsig-size\")) || fCheckPushOnly) {\n+        for (const CTxIn& txin : tx.vin)\n+        {\n+            // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+            // keys (remember the 520 byte limit on redeemScript size). That works\n+            // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+            // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+            // future-proofing. That's also enough to spend a 20-of-20\n+            // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+            // considered standard.\n+            if (txin.scriptSig.size() > 1650) {\n+                MaybeReject(\"scriptsig-size\");\n+            }\n+            if (fCheckPushOnly && !txin.scriptSig.IsPushOnly()) {\n+                out_reason = \"scriptsig-not-pushonly\";\n+                return false;\n+            }\n         }\n+    }\n \n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (IsDust(txout, ::dustRelayFee)) {\n-            reason = \"dust\";\n-            return false;\n+    if (!(ignore_rejects.count(\"scriptpubkey\") && ignore_rejects.count(\"bare-multisig\") && ignore_rejects.count(\"dust\") && ignore_rejects.count(\"multi-op-return\"))) {\n+        unsigned int nDataOut = 0;\n+        txnouttype whichType;\n+        for (const CTxOut& txout : tx.vout) {\n+            if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n+                MaybeReject(\"scriptpubkey\");\n+            }\n+\n+            if (whichType == TX_NULL_DATA)\n+                nDataOut++;\n+            else {\n+                if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n+                    MaybeReject(\"bare-multisig\");\n+                }\n+                if (IsDust(txout, ::dustRelayFee)) {\n+                    MaybeReject(\"dust\");\n+                }\n+            }\n         }\n-    }\n \n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n+        // only one OP_RETURN txout is permitted\n+        if (nDataOut > 1) {\n+            MaybeReject(\"multi-op-return\");\n+        }\n     }\n \n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason, const ignore_rejects_type& ignore_rejects)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -174,26 +200,32 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs,\n         // get the scriptPubKey corresponding to this input:\n         const CScript& prevScript = prev.scriptPubKey;\n         if (!Solver(prevScript, whichType, vSolutions)) {\n-            out_reason = reason_prefix + \"script-unknown\";\n-            return false;\n+            MaybeReject(\"script-unknown\");\n         }\n \n         if (whichType == TX_SCRIPTHASH)\n         {\n+            if (!tx.vin[i].scriptSig.IsPushOnly()) {\n+                // The only way we got this far, is if the user ignored scriptsig-not-pushonly.\n+                // However, this case is invalid, and will be caught later on.\n+                // But for now, we don't want to run the [possibly expensive] script here.\n+                continue;\n+            }\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n             if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE)) {\n+                // This case is also invalid or a bug\n                 out_reason = reason_prefix + \"scriptsig-failure\";\n                 return false;\n             }\n             if (stack.empty()) {\n+                // Also invalid\n                 out_reason = reason_prefix + \"scriptcheck-missing\";\n                 return false;\n             }\n             CScript subscript(stack.back().begin(), stack.back().end());\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n-                out_reason = reason_prefix + \"scriptcheck-sigops\";\n-                return false;\n+                MaybeReject(\"scriptcheck-sigops\");\n             }\n         }\n     }"
      },
      {
        "sha": "f92707d495b0b5812606cad71fafdc10a00913ea",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -12,6 +12,7 @@\n #include \"script/standard.h\"\n \n #include <string>\n+#include <unordered_set>\n \n class CCoinsViewCache;\n class CTxOut;\n@@ -74,6 +75,9 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n \n+typedef std::unordered_set<std::string> ignore_rejects_type;\n+static const ignore_rejects_type empty_ignore_rejects;\n+\n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFee);\n@@ -83,13 +87,13 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false, const ignore_rejects_type& ignore_rejects=empty_ignore_rejects);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason, const ignore_rejects_type& ignore_rejects=empty_ignore_rejects);\n \n inline bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs) {\n     std::string reason;"
      },
      {
        "sha": "fd7b52c7024cdcd07a52d3f79a473dd8260e877b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -937,7 +937,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         CValidationState state;\n         bool fMissingInputs;\n         bool fLimitFree = true;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, nullptr, false, nMaxRawTxFee)) {\n+        ignore_rejects_type ignore_rejects;\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, nullptr, nMaxRawTxFee, ignore_rejects)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "2ea8f327def4f2de6fbd2d615c860c1d3ab363a1",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -29,7 +29,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, nullptr, nullptr, true, 0);\n+    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, nullptr, nullptr, 0, ignore_rejects_type({rejectmsg_mempoolfull}));\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "41a9de4f663939187ab4c507aa589a01134a7686",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 25,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -378,7 +378,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, *it, false, nullptr, nullptr, true)) {\n+        if (!fAddToMempool || (*it)->IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, *it, false, nullptr, nullptr, 0, ignore_rejects_type({rejectmsg_mempoolfull}))) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -437,9 +437,28 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n     return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n }\n \n+namespace {\n+    inline bool MaybeReject_(unsigned int reject_code, const std::string& reason, bool corruption_possible, const std::string& debug_msg, const ignore_rejects_type& ignore_rejects, CValidationState& state) {\n+        if (ignore_rejects.count(reason)) {\n+            return false;\n+        }\n+\n+        return state.DoS(0, true, reject_code, reason, corruption_possible, debug_msg);\n+    }\n+}\n+\n+#define MaybeRejectDbg(reject_code, reason, corruption_possible, debug_msg)  do {  \\\n+    if (MaybeReject_(reject_code, reason, corruption_possible, debug_msg, ignore_rejects, state)) {  \\\n+        return false;  \\\n+    }  \\\n+} while(0)\n+\n+#define MaybeReject(reject_code, reason)  MaybeRejectDbg(reject_code, reason, false, \"\")\n+\n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n+                              const CAmount& nAbsurdFee, const ignore_rejects_type& ignore_rejects,\n+                              std::vector<COutPoint>& coins_to_uncache)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -457,19 +476,20 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n     if (!gArgs.GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n+        MaybeRejectDbg(REJECT_NONSTANDARD, \"no-witness-yet\", true, \"\");\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     std::string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n+    if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled, ignore_rejects)) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n+    }\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n     if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+        MaybeReject(REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     if (pool.exists(hash)) {\n@@ -488,6 +508,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             const CTransaction *ptxConflicting = itConflicting->second;\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n+                if (!ignore_rejects.count(\"txn-mempool-conflict\")) {\n+\n                 // Allow opt-out of transaction replacement by setting\n                 // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n                 //\n@@ -516,6 +538,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     return state.Invalid(false, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n                 }\n \n+                }  // ignore_rejects\n+\n                 setConflicts.insert(ptxConflicting->GetHash());\n             }\n         }\n@@ -567,18 +591,20 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // be mined yet.\n         // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n         // CoinsViewCache instead of create its own\n+        // NOTE: The miner doesn't check this again, so for now it may not be overridden.\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view, \"bad-txns-input-\", reason)) {\n+        if (fRequireStandard && !AreInputsStandard(tx, view, \"bad-txns-input-\", reason, ignore_rejects)) {\n             return state.Invalid(false, REJECT_NONSTANDARD, reason);\n         }\n \n         // Check for non-standard witness in P2WSH\n-        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n+        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view)) {\n+            MaybeRejectDbg(REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true, \"\");\n+        }\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n@@ -609,30 +635,31 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n         if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+            MaybeRejectDbg(REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"fee-too-low-for-mempool\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+            MaybeRejectDbg(REJECT_INSUFFICIENTFEE, \"fee-too-low-for-mempool\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n         if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"fee-too-low-for-relay\");\n+            MaybeReject(REJECT_INSUFFICIENTFEE, \"fee-too-low-for-relay\");\n         }\n \n         if (nAbsurdFee && nFees > nAbsurdFee)\n-            return state.Invalid(false,\n-                REJECT_HIGHFEE, \"absurdly-high-fee\",\n-                strprintf(\"%d > %d\", nFees, nAbsurdFee));\n+            MaybeRejectDbg(REJECT_HIGHFEE, rejectmsg_absurdfee, false, strprintf(\"%d > %d\", nFees, nAbsurdFee));\n \n         // Calculate in-mempool ancestors, up to a limit.\n         CTxMemPool::setEntries setAncestors;\n         size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n         size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n         size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n+        if (ignore_rejects.count(\"too-long-mempool-chain\")) {\n+            nLimitAncestors = nLimitAncestorSize = nLimitDescendants = nLimitDescendantSize = std::numeric_limits<uint64_t>::max();\n+        }\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n@@ -701,7 +728,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n                 if (newFeeRate <= oldFeeRate)\n                 {\n-                    return state.DoS(0, false,\n+                    MaybeRejectDbg(\n                             REJECT_INSUFFICIENTFEE, \"fee-too-low-for-replacement\", false,\n                             strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n                                   hash.ToString(),\n@@ -719,7 +746,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             // This potentially overestimates the number of actual descendants\n             // but we just want to be conservative to avoid doing too much\n             // work.\n-            if (nConflictingCount <= maxDescendantsToVisit) {\n+            if (nConflictingCount <= maxDescendantsToVisit || ignore_rejects.count(\"too-many-replacements\")) {\n                 // If not too many to replace, then calculate the set of\n                 // transactions that would have to be evicted\n                 for (CTxMemPool::txiter it : setIterConflicting) {\n@@ -738,6 +765,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                             maxDescendantsToVisit));\n             }\n \n+            if (!ignore_rejects.count(\"replacement-adds-unconfirmed\")) {\n+\n             for (unsigned int j = 0; j < tx.vin.size(); j++)\n             {\n                 // We don't want to accept replacements that require low\n@@ -757,12 +786,14 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 }\n             }\n \n+            }  // ignore_rejects\n+\n             // The replacement must pay greater fees than the transactions it\n             // replaces - if we did the bandwidth used by those conflicting\n             // transactions would not be paid for.\n             if (nModifiedFees < nConflictingFees)\n             {\n-                return state.DoS(0, false,\n+                MaybeRejectDbg(\n                                  REJECT_INSUFFICIENTFEE, \"fee-too-low-for-replacement\", false,\n                                  strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n                                           hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n@@ -773,7 +804,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n             if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n-                return state.DoS(0, false,\n+                MaybeRejectDbg(\n                         REJECT_INSUFFICIENTFEE, \"fee-too-low-for-replacement\", false,\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n@@ -860,10 +891,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);\n \n         // trim mempool and check if tx was trimmed\n-        if (!fOverrideMempoolLimit) {\n+        if (!ignore_rejects.count(rejectmsg_mempoolfull)) {\n             LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"fee-too-low-for-mempool-full\");\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, rejectmsg_mempoolfull);\n         }\n     }\n \n@@ -875,10 +906,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        const CAmount nAbsurdFee, const ignore_rejects_type& ignore_rejects)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, coins_to_uncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, nAbsurdFee, ignore_rejects, coins_to_uncache);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -891,10 +922,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        const CAmount nAbsurdFee, const ignore_rejects_type& ignore_rejects)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, nAbsurdFee, ignore_rejects);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -4300,7 +4331,7 @@ bool LoadMempool(void)\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, nullptr, nTime, nullptr, false, 0);\n+                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, nullptr, nTime, nullptr, 0, empty_ignore_rejects);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "982dbcd2f7b1c99eccce867c39bd2b08556e2d2b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -15,6 +15,7 @@\n #include \"fs.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n #include \"policy/feerate.h\"\n+#include \"policy/policy.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n #include \"versionbits.h\"\n@@ -300,8 +301,22 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = nullptr,\n-                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n+                        const CAmount nAbsurdFee, const ignore_rejects_type& ignore_rejects);\n+\n+// Previously, the signature was ATMP(pool, state, tx, limitfree,\n+// missinginputs, txnreplaced, overridemempoollimit, absurdfee) so calls could in theory\n+// satisfy absurdfee with `true` which would be broken. To avoid the risk,\n+// absurdfee is only optional if ignorerejects is also provided (which cannot\n+// be cast implicitly from CAmount).\n+static inline bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n+                                      bool fLimitFree, bool* pfMissingInputs,\n+                                      std::list<CTransactionRef>* plTxnReplaced = nullptr) {\n+    return AcceptToMemoryPool(pool, state, tx, fLimitFree, pfMissingInputs, plTxnReplaced, 0, empty_ignore_rejects);\n+}\n+\n+static const std::string rejectmsg_absurdfee = \"absurdly-high-fee\";\n+static const std::string rejectmsg_mempoolfull = \"fee-too-low-for-mempool-full\";\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "8ba21fb859943269b042015141e824fcb2a27772",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -4333,7 +4333,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state, const ignore_rejects_type& ignore_rejects)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, true, nullptr, nullptr, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, tx, true, nullptr, nullptr, nAbsurdFee, ignore_rejects);\n }"
      },
      {
        "sha": "9573afea2856c52d97ffa766c37450f7a8c5f712",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"amount.h\"\n #include \"policy/feerate.h\"\n+#include \"policy/policy.h\"\n #include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n@@ -253,7 +254,7 @@ class CMerkleTx\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state, const ignore_rejects_type& ignore_rejects=empty_ignore_rejects);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }"
      }
    ]
  },
  {
    "sha": "916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTZmMTJmYTY3NTY0NWJjNGYzYTE5ZDQyYTI0YTRlZmFhN2Y2Y2Yz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-16T03:10:43Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-21T20:40:25Z"
      },
      "message": "AcceptToMemoryPool: Replace fLimitFree[=false] with rejectmsg_gratis in ignore_rejects",
      "tree": {
        "sha": "ce59855cf7b414df4a79983d1440bc50d3bc7682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce59855cf7b414df4a79983d1440bc50d3bc7682"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 18,
      "deletions": 29
    },
    "files": [
      {
        "sha": "a5b1ea50475d2922ce366caf273b286d17632407",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "patch": "@@ -1807,7 +1807,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs, &lRemovedTxn)) {\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -1845,7 +1845,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2, &lRemovedTxn)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn)) {\n                         LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {"
      },
      {
        "sha": "e3ef9a252a924006d7fca884a82cffb1b19616cf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "patch": "@@ -936,9 +936,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        bool fLimitFree = true;\n         ignore_rejects_type ignore_rejects;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, nullptr, nMaxRawTxFee, ignore_rejects)) {\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs, nullptr, nMaxRawTxFee, ignore_rejects)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "424c4310a15273ce54f6e5564bcbb4b9492d5ea4",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "patch": "@@ -29,7 +29,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, nullptr, nullptr, 0, ignore_rejects_type({rejectmsg_mempoolfull}));\n+    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr, nullptr, 0, ignore_rejects_type({rejectmsg_mempoolfull, rejectmsg_gratis}));\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "3a10d5913e80a6951ef2411baf88cc6cfa66221b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "patch": "@@ -378,7 +378,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, *it, false, nullptr, nullptr, 0, ignore_rejects_type({rejectmsg_mempoolfull}))) {\n+        if (!fAddToMempool || (*it)->IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, *it, nullptr, nullptr, 0, ignore_rejects_type({rejectmsg_mempoolfull, rejectmsg_gratis}))) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -455,7 +455,7 @@ namespace {\n \n #define MaybeReject(reject_code, reason)  MaybeRejectDbg(reject_code, reason, false, \"\")\n \n-static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                               const CAmount& nAbsurdFee, const ignore_rejects_type& ignore_rejects,\n                               std::vector<COutPoint>& coins_to_uncache)\n@@ -644,8 +644,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            MaybeReject(REJECT_INSUFFICIENTFEE, \"fee-too-low-for-relay\");\n+        if (nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n+            MaybeReject(REJECT_INSUFFICIENTFEE, rejectmsg_gratis);\n         }\n \n         if (nAbsurdFee && nFees > nAbsurdFee)\n@@ -904,12 +904,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n }\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         const CAmount nAbsurdFee, const ignore_rejects_type& ignore_rejects)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, nAbsurdFee, ignore_rejects, coins_to_uncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, nAbsurdFee, ignore_rejects, coins_to_uncache);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -920,12 +920,12 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         const CAmount nAbsurdFee, const ignore_rejects_type& ignore_rejects)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, nAbsurdFee, ignore_rejects);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, nAbsurdFee, ignore_rejects);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -4331,7 +4331,7 @@ bool LoadMempool(void)\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, nullptr, nTime, nullptr, 0, empty_ignore_rejects);\n+                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr, nTime, nullptr, 0, empty_ignore_rejects);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "630acf805dd291bbda9afda33f42655e78388771",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "patch": "@@ -300,22 +300,12 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        const CAmount nAbsurdFee, const ignore_rejects_type& ignore_rejects);\n-\n-// Previously, the signature was ATMP(pool, state, tx, limitfree,\n-// missinginputs, txnreplaced, overridemempoollimit, absurdfee) so calls could in theory\n-// satisfy absurdfee with `true` which would be broken. To avoid the risk,\n-// absurdfee is only optional if ignorerejects is also provided (which cannot\n-// be cast implicitly from CAmount).\n-static inline bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n-                                      bool fLimitFree, bool* pfMissingInputs,\n-                                      std::list<CTransactionRef>* plTxnReplaced = nullptr) {\n-    return AcceptToMemoryPool(pool, state, tx, fLimitFree, pfMissingInputs, plTxnReplaced, 0, empty_ignore_rejects);\n-}\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n+                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = nullptr,\n+                        const CAmount nAbsurdFee=0, const ignore_rejects_type& ignore_rejects=empty_ignore_rejects);\n \n static const std::string rejectmsg_absurdfee = \"absurdly-high-fee\";\n+static const std::string rejectmsg_gratis = \"fee-too-low-for-relay\";\n static const std::string rejectmsg_mempoolfull = \"fee-too-low-for-mempool-full\";\n \n /** Convert CValidationState to a human-readable message for logging */"
      },
      {
        "sha": "ef4756f019966b5654f084da7a9287881ca0f99a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "patch": "@@ -4335,5 +4335,5 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state, const ignore_rejects_type& ignore_rejects)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, true, nullptr, nullptr, nAbsurdFee, ignore_rejects);\n+    return ::AcceptToMemoryPool(mempool, state, tx, nullptr, nullptr, nAbsurdFee, ignore_rejects);\n }"
      }
    ]
  },
  {
    "sha": "38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGI4ZmM5ZWM0NDA1ZjI0NmJkNmFjYWMwMGQ4YzQ0ODQwNGYyZTFl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-18T08:22:29Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-21T20:40:25Z"
      },
      "message": "Make bad-witness-nonstandard rejection more specific, and support overriding some",
      "tree": {
        "sha": "7ae189dd68472544451c25d5b72b320cc47a3018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ae189dd68472544451c25d5b72b320cc47a3018"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/916f12fa675645bc4f3a19d42a24a4efaa7f6cf3"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 28,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4d670373f2a55310151921b60f48467263fa3927",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
        "patch": "@@ -233,7 +233,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs,\n     return true;\n }\n \n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason, const ignore_rejects_type& ignore_rejects)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases are skipped\n@@ -256,9 +256,15 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n             // If the check fails at this stage, we know that this txid must be a bad one.\n             if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+            {\n+                out_reason = reason_prefix + \"scriptsig-failure\";\n                 return false;\n+            }\n             if (stack.empty())\n+            {\n+                out_reason = reason_prefix + \"scriptcheck-missing\";\n                 return false;\n+            }\n             prevScript = CScript(stack.back().begin(), stack.back().end());\n         }\n \n@@ -267,18 +273,27 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n         // Non-witness program must not be associated with any witness\n         if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram))\n+        {\n+            out_reason = reason_prefix + \"nonwitness-input\";\n             return false;\n+        }\n \n         // Check P2WSH standard limits\n         if (witnessversion == 0 && witnessprogram.size() == 32) {\n             if (tx.vin[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n-                return false;\n+            {\n+                MaybeReject(\"script-size\");\n+            }\n             size_t sizeWitnessStack = tx.vin[i].scriptWitness.stack.size() - 1;\n             if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n-                return false;\n+            {\n+                MaybeReject(\"stackitem-count\");\n+            }\n             for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n                 if (tx.vin[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n-                    return false;\n+                {\n+                    MaybeReject(\"stackitem-size\");\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "19018cef183c168c67daf42c2c191bd419dd4e77",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
        "patch": "@@ -105,7 +105,7 @@ inline bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& map\n      * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n      * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,\n      */\n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, const std::string& reason_prefix, std::string& out_reason, const ignore_rejects_type& ignore_rejects=empty_ignore_rejects);\n \n extern CFeeRate incrementalRelayFee;\n extern CFeeRate dustRelayFee;"
      },
      {
        "sha": "c8b6efd4bd60aec6a27181253d92841e91de7cf9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
        "patch": "@@ -602,8 +602,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n \n         // Check for non-standard witness in P2WSH\n-        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view)) {\n-            MaybeRejectDbg(REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true, \"\");\n+        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view, \"bad-witness-\", reason, ignore_rejects)) {\n+            return state.DoS(0, false, REJECT_NONSTANDARD, reason, true);\n         }\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);"
      },
      {
        "sha": "980373ac26f4f384c493e82c6c8966efb3e30516",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b8fc9ec4405f246bd6acac00d8c448404f2e1e/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
        "patch": "@@ -1819,13 +1819,13 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-stackitem-count')\n         # Non-standard nodes should accept\n         self.test_node.test_transaction_acceptance(p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-stackitem-size')\n         # Non-standard nodes should accept\n         self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n@@ -1839,24 +1839,24 @@ def test_non_standard_witness(self):\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-script-size')\n         # Non-standard nodes should accept\n         self.test_node.test_transaction_acceptance(p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-stackitem-count')\n         self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-stackitem-size')\n         self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n         self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n         self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n         self.std_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-script-size')\n         self.test_node.test_transaction_acceptance(p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node"
      }
    ]
  },
  {
    "sha": "89e516ffcb1c14bf89e1a4c18711158d6b40fc84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWU1MTZmZmNiMWMxNGJmODllMWE0YzE4NzExMTU4ZDZiNDBmYzg0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-17T03:50:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-21T20:40:25Z"
      },
      "message": "RPC: sendrawtransaction: Replace boolean allowhighfees with an Array of rejections to ignore (in a backward compatible manner)",
      "tree": {
        "sha": "96024586a4f76136da1ecc93fb438ef07b7ec27c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96024586a4f76136da1ecc93fb438ef07b7ec27c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89e516ffcb1c14bf89e1a4c18711158d6b40fc84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e516ffcb1c14bf89e1a4c18711158d6b40fc84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89e516ffcb1c14bf89e1a4c18711158d6b40fc84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e516ffcb1c14bf89e1a4c18711158d6b40fc84/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b8fc9ec4405f246bd6acac00d8c448404f2e1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38b8fc9ec4405f246bd6acac00d8c448404f2e1e"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "180f81d623df1e4fb9012dc837dec4433cd308dc",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89e516ffcb1c14bf89e1a4c18711158d6b40fc84/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89e516ffcb1c14bf89e1a4c18711158d6b40fc84/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=89e516ffcb1c14bf89e1a4c18711158d6b40fc84",
        "patch": "@@ -95,6 +95,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 3, \"replaceable\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"sendrawtransaction\", 1, \"ignore_rejects\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },"
      },
      {
        "sha": "52e813eebba76b7847ab0d631de503499f156b8f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89e516ffcb1c14bf89e1a4c18711158d6b40fc84/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89e516ffcb1c14bf89e1a4c18711158d6b40fc84/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=89e516ffcb1c14bf89e1a4c18711158d6b40fc84",
        "patch": "@@ -892,12 +892,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n+            \"sendrawtransaction \\\"hexstring\\\" ( [\\\"ignore_reject\\\",...] )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n             \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n-            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n+            \"2. \\\"ignore_reject\\\" (string, optional) Rejection conditions to ignore, eg 'absurdly-high-fee'\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n             \"\\nExamples:\\n\"\n@@ -912,7 +912,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     // parse hex string from parameter\n     CMutableTransaction mtx;\n@@ -922,8 +922,24 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     const uint256& hashTx = tx->GetHash();\n \n     CAmount nMaxRawTxFee = maxTxFee;\n-    if (request.params.size() > 1 && request.params[1].get_bool())\n-        nMaxRawTxFee = 0;\n+\n+    ignore_rejects_type ignore_rejects;\n+    const UniValue& json_ign_rejs = request.params[1];\n+    if (!json_ign_rejs.isNull()) {\n+        if (json_ign_rejs.isBool()) {\n+            // This parameter used to be boolean allowhighfees\n+            if (json_ign_rejs.isTrue()) {\n+                ignore_rejects.insert(rejectmsg_absurdfee);\n+            }\n+        } else {\n+            RPCTypeCheckArgument(json_ign_rejs, UniValue::VARR);\n+\n+            for (size_t i = 0; i < json_ign_rejs.size(); ++i) {\n+                const UniValue& json_ign_rej = json_ign_rejs[i];\n+                ignore_rejects.insert(json_ign_rej.get_str());\n+            }\n+        }\n+    }\n \n     CCoinsViewCache &view = *pcoinsTip;\n     bool fHaveChain = false;\n@@ -936,7 +952,6 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        ignore_rejects_type ignore_rejects;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs, nullptr, nMaxRawTxFee, ignore_rejects)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n@@ -968,7 +983,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,  {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"ignore_rejects|allowhighfees\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  true,  {\"txs\"} },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n "
      }
    ]
  }
]