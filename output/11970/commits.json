[
  {
    "sha": "fcfb952bca922682e61c77e59a59f4e7fa6619c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2ZiOTUyYmNhOTIyNjgyZTYxYzc3ZTU5YTU5ZjRlN2ZhNjYxOWM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-20T23:38:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-08T20:17:14Z"
      },
      "message": "Improve TestNodeCLI output parsing\n\nParse JSONRPCException errors, and avoid JSON decode exception if RPC method\nreturns a plain string.",
      "tree": {
        "sha": "3d9f1a26add16cbfbbc6961d7e8248a45f05d472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d9f1a26add16cbfbbc6961d7e8248a45f05d472"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcfb952bca922682e61c77e59a59f4e7fa6619c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcfb952bca922682e61c77e59a59f4e7fa6619c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcfb952bca922682e61c77e59a59f4e7fa6619c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcfb952bca922682e61c77e59a59f4e7fa6619c7/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45173fa6fca9537abb0a0554f731d14b9f89c456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45173fa6fca9537abb0a0554f731d14b9f89c456",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45173fa6fca9537abb0a0554f731d14b9f89c456"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "66f99f30115a7cf6a3da6149d3391e41247de11e",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcfb952bca922682e61c77e59a59f4e7fa6619c7/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcfb952bca922682e61c77e59a59f4e7fa6619c7/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fcfb952bca922682e61c77e59a59f4e7fa6619c7",
        "patch": "@@ -10,6 +10,7 @@\n import json\n import logging\n import os\n+import re\n import subprocess\n import time\n \n@@ -22,6 +23,9 @@\n     p2p_port,\n )\n \n+# For Python 3.4 compatibility\n+JSONDecodeError = getattr(json, \"JSONDecodeError\", ValueError)\n+\n BITCOIND_PROC_WAIT_TIMEOUT = 60\n \n class TestNode():\n@@ -222,6 +226,13 @@ def send_cli(self, command, *args, **kwargs):\n         cli_stdout, cli_stderr = process.communicate(input=self.input)\n         returncode = process.poll()\n         if returncode:\n+            match = re.match(r'error code: ([-0-9]+)\\nerror message:\\n(.*)', cli_stderr)\n+            if match:\n+                code, message = match.groups()\n+                raise JSONRPCException(dict(code=int(code), message=message))\n             # Ignore cli_stdout, raise with cli_stderr\n             raise subprocess.CalledProcessError(returncode, self.binary, output=cli_stderr)\n-        return json.loads(cli_stdout, parse_float=decimal.Decimal)\n+        try:\n+            return json.loads(cli_stdout, parse_float=decimal.Decimal)\n+        except JSONDecodeError:\n+            return cli_stdout.rstrip(\"\\n\")"
      }
    ]
  },
  {
    "sha": "ca9085afc53eb20c1fc745ae469e9587a05b7f24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTkwODVhZmM1M2ViMjBjMWZjNzQ1YWU0NjllOTU4N2EwNWI3ZjI0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-20T23:41:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-08T20:17:14Z"
      },
      "message": "Prevent TestNodeCLI.args mixups\n\nChange TestNodeCLI.__call__() to return a new instance instead of modifying the\nexisting instance. This way, it's possible to create different cli objects that\nhave their own options (for example -rpcwallet options to connect to different\nwallets), and options set for a single call (`node.cli(options).method(args)`)\nwill no longer leak into future calls.",
      "tree": {
        "sha": "6a24a3722451db06f974314923dc9d3ffa2893c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a24a3722451db06f974314923dc9d3ffa2893c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca9085afc53eb20c1fc745ae469e9587a05b7f24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9085afc53eb20c1fc745ae469e9587a05b7f24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9085afc53eb20c1fc745ae469e9587a05b7f24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9085afc53eb20c1fc745ae469e9587a05b7f24/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcfb952bca922682e61c77e59a59f4e7fa6619c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcfb952bca922682e61c77e59a59f4e7fa6619c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcfb952bca922682e61c77e59a59f4e7fa6619c7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1723f50eba19d800d1fbf13d2ff2edd9ff72fdba",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca9085afc53eb20c1fc745ae469e9587a05b7f24/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca9085afc53eb20c1fc745ae469e9587a05b7f24/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=ca9085afc53eb20c1fc745ae469e9587a05b7f24",
        "patch": "@@ -203,9 +203,10 @@ def __init__(self, binary, datadir):\n \n     def __call__(self, *args, input=None):\n         # TestNodeCLI is callable with bitcoin-cli command-line args\n-        self.args = [str(arg) for arg in args]\n-        self.input = input\n-        return self\n+        cli = TestNodeCLI(self.binary, self.datadir)\n+        cli.args = [str(arg) for arg in args]\n+        cli.input = input\n+        return cli\n \n     def __getattr__(self, command):\n         def dispatcher(*args, **kwargs):"
      }
    ]
  },
  {
    "sha": "ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjlhMzYzZmY3MGUxYjcyYTEyODMwOThlNjliYmUxNGQxYzE2YmNj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-21T09:54:43Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-08T20:17:14Z"
      },
      "message": "TestNodeCLI batch emulation\n\nSupport same get_request and batch methods as AuthServiceProxy",
      "tree": {
        "sha": "f3188bfaa69bbd1d481076dc5b51807a3119d236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3188bfaa69bbd1d481076dc5b51807a3119d236"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca9085afc53eb20c1fc745ae469e9587a05b7f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9085afc53eb20c1fc745ae469e9587a05b7f24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9085afc53eb20c1fc745ae469e9587a05b7f24"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 20,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fd44bff32ba08c2f23bd1fc2343f6ad41dab1a0d",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
        "patch": "@@ -191,6 +191,16 @@ def disconnect_p2ps(self):\n             p.peer_disconnect()\n         del self.p2ps[:]\n \n+class TestNodeCLIAttr:\n+    def __init__(self, cli, command):\n+        self.cli = cli\n+        self.command = command\n+\n+    def __call__(self, *args, **kwargs):\n+        return self.cli.send_cli(self.command, *args, **kwargs)\n+\n+    def get_request(self, *args, **kwargs):\n+        return lambda: self(*args, **kwargs)\n \n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n@@ -209,9 +219,16 @@ def __call__(self, *args, input=None):\n         return cli\n \n     def __getattr__(self, command):\n-        def dispatcher(*args, **kwargs):\n-            return self.send_cli(command, *args, **kwargs)\n-        return dispatcher\n+        return TestNodeCLIAttr(self, command)\n+\n+    def batch(self, requests):\n+        results = []\n+        for request in requests:\n+           try:\n+               results.append(dict(result=request()))\n+           except JSONRPCException as e:\n+               results.append(dict(error=e))\n+        return results\n \n     def send_cli(self, command, *args, **kwargs):\n         \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\""
      }
    ]
  },
  {
    "sha": "f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmFkZTljZTFhNjc5YTAyNmM4NGU1YmFhOWY4NTk1ZmEyYmU3OGE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-11T17:14:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-08T22:35:27Z"
      },
      "message": "[tests] allow tests to be run with --usecli\n\ntest_framework accepts a new --usecli parameter. Running the test with\nthis parameter will cause all RPCs to be sent through bitcoin-cli rather\nthan directly over http. By default, individual test cases do not\nsupport --usecli, and self.supports_cli must be set to True in the\nset_test_params method.\n\nWe can make supports_cli default to True in future once we know which\ntests will fail with use_cli.",
      "tree": {
        "sha": "547fff7483a8857f9cec0d1bbeb7c14903be741d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/547fff7483a8857f9cec0d1bbeb7c14903be741d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 24,
      "deletions": 9
    },
    "files": [
      {
        "sha": "9665c50a922ab9359a6e9bb6b5b2f29ca9bac1c1",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
        "patch": "@@ -16,6 +16,7 @@ class CreateCache(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 0\n+        self.supports_cli = True\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "5d4f8e67203c04ad924bb222fd7e151e7e90643d",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
        "patch": "@@ -62,6 +62,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n+        self.supports_cli = False\n         self.set_test_params()\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n@@ -91,6 +92,8 @@ def main(self):\n                           help=\"Location of the test framework config file\")\n         parser.add_option(\"--pdbonfailure\", dest=\"pdbonfailure\", default=False, action=\"store_true\",\n                           help=\"Attach a python debugger if test fails\")\n+        parser.add_option(\"--usecli\", dest=\"usecli\", default=False, action=\"store_true\",\n+                          help=\"use bitcoin-cli instead of RPC for all commands\")\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n@@ -113,6 +116,8 @@ def main(self):\n         success = TestStatus.FAILED\n \n         try:\n+            if self.options.usecli and not self.supports_cli:\n+                raise SkipTest(\"--usecli specified but test does not support using CLI\")\n             self.setup_chain()\n             self.setup_network()\n             self.run_test()\n@@ -213,7 +218,7 @@ def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, bin\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n \n     def start_node(self, i, extra_args=None, stderr=None):\n         \"\"\"Start a bitcoind\"\"\""
      },
      {
        "sha": "589a8f39699b9b651fad23f5e7b392e776e3096a",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
        "patch": "@@ -42,7 +42,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir):\n+    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir, use_cli=False):\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n@@ -62,6 +62,7 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n         self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n+        self.use_cli = use_cli\n \n         self.running = False\n         self.process = None\n@@ -73,9 +74,12 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.p2ps = []\n \n     def __getattr__(self, name):\n-        \"\"\"Dispatches any unrecognised messages to the RPC connection.\"\"\"\n-        assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n-        return getattr(self.rpc, name)\n+        \"\"\"Dispatches any unrecognised messages to the RPC connection or a CLI instance.\"\"\"\n+        if self.use_cli:\n+            return getattr(self.cli, name)\n+        else:\n+            assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n+            return getattr(self.rpc, name)\n \n     def start(self, extra_args=None, stderr=None):\n         \"\"\"Start the node.\"\"\"\n@@ -114,10 +118,13 @@ def wait_for_rpc_connection(self):\n         raise AssertionError(\"Unable to connect to bitcoind\")\n \n     def get_wallet_rpc(self, wallet_name):\n-        assert self.rpc_connected\n-        assert self.rpc\n-        wallet_path = \"wallet/%s\" % wallet_name\n-        return self.rpc / wallet_path\n+        if self.use_cli:\n+            return self.cli(\"-rpcwallet={}\".format(wallet_name))\n+        else:\n+            assert self.rpc_connected\n+            assert self.rpc\n+            wallet_path = \"wallet/%s\" % wallet_name\n+            return self.rpc / wallet_path\n \n     def stop_node(self):\n         \"\"\"Stop the node.\"\"\"\n@@ -210,6 +217,7 @@ def __init__(self, binary, datadir):\n         self.binary = binary\n         self.datadir = datadir\n         self.input = None\n+        self.log = logging.getLogger('TestFramework.bitcoincli')\n \n     def __call__(self, *args, input=None):\n         # TestNodeCLI is callable with bitcoin-cli command-line args\n@@ -240,6 +248,7 @@ def send_cli(self, command, *args, **kwargs):\n         if named_args:\n             p_args += [\"-named\"]\n         p_args += [command] + pos_args + named_args\n+        self.log.debug(\"Running bitcoin-cli command: %s\" % command)\n         process = subprocess.Popen(p_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n         cli_stdout, cli_stderr = process.communicate(input=self.input)\n         returncode = process.poll()"
      }
    ]
  },
  {
    "sha": "a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTRkYmZmMzllYTA1MGI3NGIzMmJiMGY0Y2JiNTlmNGE5YWQzODY1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-20T23:37:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-08T22:35:27Z"
      },
      "message": "Allow multiwallet.py to be used with --usecli\n\nAdd test coverage for bitcoin-cli multiwallet calls.",
      "tree": {
        "sha": "0f4d912177d33190aa651332da181790ee670184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f4d912177d33190aa651332da181790ee670184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "12d9e9f48d4b3bbf85c26cd79eef210d8a29ec3d",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 27,
        "deletions": 21,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865",
        "patch": "@@ -17,69 +17,75 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w']]\n+        self.supports_cli = True\n \n     def run_test(self):\n-        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n+        node = self.nodes[0]\n+\n+        data_dir = lambda *p: os.path.join(node.datadir, 'regtest', *p)\n+        wallet_dir = lambda *p: data_dir('wallets', *p)\n+        wallet = lambda name: node.get_wallet_rpc(name)\n+\n+        assert_equal(set(node.listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n \n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n-        wallet_dir = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'wallets')\n-        os.mkdir(os.path.join(wallet_dir, 'w11'))\n+        os.mkdir(wallet_dir('w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(os.path.join(wallet_dir, 'w2'), os.path.join(wallet_dir, 'w22'))\n+        shutil.copyfile(wallet_dir('w2'), wallet_dir('w22'))\n         self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(os.path.join(wallet_dir, 'w1'), os.path.join(wallet_dir, 'w12'))\n+        os.symlink(wallet_dir('w1'), wallet_dir('w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n         # should not initialize if the specified walletdir does not exist\n         self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n         # should not initialize if the specified walletdir is not a directory\n-        not_a_dir = os.path.join(wallet_dir, 'notadir')\n+        not_a_dir = wallet_dir('notadir')\n         open(not_a_dir, 'a').close()\n-        self.assert_start_raises_init_error(0, ['-walletdir='+not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n+        self.assert_start_raises_init_error(0, ['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n-        wallet_dir2 = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')\n-        os.rename(wallet_dir, wallet_dir2)\n+        wallet_dir2 = data_dir('walletdir')\n+        os.rename(wallet_dir(), wallet_dir2)\n         self.start_node(0, ['-wallet=w4', '-wallet=w5'])\n-        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n-        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n+        w5 = wallet(\"w5\")\n         w5.generate(1)\n         self.stop_node(0)\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n-        os.rename(wallet_dir2, wallet_dir)\n-        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest')])\n-        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n-        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        os.rename(wallet_dir2, wallet_dir())\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n+        assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n+        w5 = wallet(\"w5\")\n         w5_info = w5.getwalletinfo()\n         assert_equal(w5_info['immature_balance'], 50)\n \n         self.stop_node(0)\n \n         self.start_node(0, self.extra_args[0])\n \n-        w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n-        w2 = self.nodes[0].get_wallet_rpc(\"w2\")\n-        w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n-        w4 = self.nodes[0].get_wallet_rpc(\"w\")\n-        wallet_bad = self.nodes[0].get_wallet_rpc(\"bad\")\n+        w1 = wallet(\"w1\")\n+        w2 = wallet(\"w2\")\n+        w3 = wallet(\"w3\")\n+        w4 = wallet(\"w\")\n+        wallet_bad = wallet(\"bad\")\n \n         w1.generate(1)\n \n         # accessing invalid wallet fails\n         assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n-        assert_raises_rpc_error(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n         # check w1 wallet balance\n         w1_info = w1.getwalletinfo()"
      },
      {
        "sha": "458c296d0d11c9344aa954574dfb92b2a31dac6a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865",
        "patch": "@@ -92,6 +92,7 @@\n     'mempool_reorg.py',\n     'mempool_persist.py',\n     'multiwallet.py',\n+    'multiwallet.py --usecli',\n     'httpbasics.py',\n     'multi_rpc.py',\n     'proxy_test.py',"
      }
    ]
  }
]