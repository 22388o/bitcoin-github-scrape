jonasschnelli,2017-12-21T19:13:20Z,utACK b67bd3d62c998ad4b91a94c879505544c28b2ba4,https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-353433551,353433551,
MarcoFalke,2018-01-04T14:05:46Z,Concept ACK 963315dbc7d020a6569975fd1f75f656937edbb1,https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-355290119,355290119,
jnewbery,2018-01-08T20:55:19Z,"I'm a weak concept NACK on the new variants logic. It seems to add a lot of machinery and obscures the test flow logic for just this one test case. Perhaps if there are wider use cases it makes sense to add this, but if it's just for this test, I don't think it makes sense.\n\nAn alternative approach is to add a new parameter `--usecli` to the test framework, which could be used by any test (or ",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-356093466,356093466,
ryanofsky,2018-01-08T21:19:17Z,Branch looks good to me. Do you want to PR it? Happy to close this if so.,https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-356099740,356099740,
promag,2018-01-08T21:21:39Z,"@jnewbery the test [test/functional/address_types.py](https://github.com/bitcoin/bitcoin/pull/11403/files#diff-e3da38b280555e81d6b794e1117ed0a8) sounds like a candidate from a *matrix* type of test. But, as you point out, it isn't worth losing the simplicity of the test framework.\n  ",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-356100356,356100356,
jnewbery,2018-01-08T21:42:30Z,"> Do you want to PR it?\n\nDo you mind pushing it to this PR? I'm happy to handle any review comments on my commits.",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-356105723,356105723,
ryanofsky,2018-01-08T22:02:21Z,"Reset to [jnewbery pr11970.1](https://github.com/jnewbery/bitcoin/commits/pr11970.1),  963315dbc7d020a6569975fd1f75f656937edbb1 -> f4bad3125af167c2e5cf5dc153aebeff1a5d4ac8, [pr/mcli.2](https://github.com/ryanofsky/bitcoin/commits/pr/mcli.2) -> [pr/mcli.3](https://github.com/ryanofsky/bitcoin/commits/pr/mcli.3)\n",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-356110869,356110869,
promag,2018-01-08T23:08:31Z,"ACK a14dbff.\n\nRunning a single also works as expected IMO:\n```sh\n./test/functional/abandonconflict.py --usecli && echo should not echo\n2018-01-08 23:05:51.549000 TestFramework (WARNING): Test Skipped: --usecli specified but test does not support using CLI\n2018-01-08 23:05:51.549000 TestFramework (INFO): Stopping nodes\n2018-01-08 23:05:51.549000 TestFramework (INFO): Cleaning up\n201",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-356125778,356125778,
jnewbery,2018-01-11T22:21:05Z,"ACK a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865 (obviously, since I authored it!)",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-357080627,357080627,
MarcoFalke,2018-01-12T22:23:23Z,"```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nutACK a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJaWTVJAAoJENLqSFDnUoslFMUP/3Hu8h6cSYR9WEKdLvai2oM2\nZSECynk2MWyLH2vuRw0b5Mw/+eEoEgQsd/CTrRsQLJTr0xg6ymFK6FBhiZYM4++k\nSSG8WtpoMiWokOvkqTMz4v/plLs5oa9t++HYq13L/hVoi0p9oFbUxa/0/dgIDeyP\ngL+cPkLKN2jYWUy0e9y0KJIWWpscZeuYmKzxxsT6xyjsx9fwfrW2Ud",https://github.com/bitcoin/bitcoin/pull/11970#issuecomment-357371121,357371121,
promag,2018-01-04T01:32:57Z,Rebase with #12076 instead?,https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159566758,159566758,test/functional/multiwallet.py
MarcoFalke,2018-01-04T14:04:10Z,"I'd prefer if this was renamed to `status`.\n\nAlso, we don't support different statūs for variants, since the test runner has to print one status per test script. Thus, I'd prefer if the result of `run_variant` was appended to the list `status` and then (outside the for loop):\n\n* All statūs the same => `sys.exit(TEST_EXIT_${STATUS})`\n* Different statūs, probably best to exit with failure.",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159658871,159658871,test/functional/test_framework/test_framework.py
MarcoFalke,2018-01-04T14:04:41Z,"Skipping a test for different variant will result in `FAILED` instead of `SKIPPED`, no?\n  ",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159658997,159658997,test/functional/test_framework/test_framework.py
promag,2018-01-04T14:16:39Z,"BTW, I thought of:\n```py\nself.matrix = { mode: ['rpc', 'cli'], foo: ... }\n```\nWhich would generate all combinations.",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159661561,159661561,test/functional/multiwallet.py
ryanofsky,2018-01-04T14:24:00Z,"> Rebase with #12076 instead?\n\nI think #11687 does a better job of cleaning up this particular test than #12076. But in general my preference is to resolve conflicts when they arise instead of adding unnecessary dependencies between prs to avoid conflicts. Better for prs to be smaller, more targeted, with fewer dependencies when this is possible, because reviewing changes requires more effort ",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159663152,159663152,test/functional/multiwallet.py
ryanofsky,2018-01-04T14:28:28Z,"Will rename. The behavior you're describing is what I was intending and what should happen after fixing the bug below (no need for an array/list just to return one status).\n  ",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159664092,159664092,test/functional/test_framework/test_framework.py
ryanofsky,2018-01-04T14:30:34Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159664577,159664577,test/functional/test_framework/test_framework.py
ryanofsky,2018-01-04T14:36:12Z,"What is the suggestion? That seems identical to current test except it renames things and adds a foo.\n  ",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159665856,159665856,test/functional/multiwallet.py
promag,2018-01-04T14:50:26Z,"Sorry if it was not clear. The suggestion is to support combinations. A more decent example:\n```py\nself.matrix = { a: ['a1', 'a2'], b: ['b1', 'b2', 'b3'] }\n```\nThis would call 6 times `run_test`.",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159669270,159669270,test/functional/multiwallet.py
MarcoFalke,2018-01-04T14:56:19Z,"Could be added when needed, i.e. later.\n  ",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159670727,159670727,test/functional/multiwallet.py
promag,2018-01-04T15:00:27Z,"Sure, I didn't mean to do it here. Variants is enough in this PR.",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r159671852,159671852,test/functional/multiwallet.py
promag,2018-01-08T22:10:50Z,"In commit ""[tests] allow tests to be run with --usecli""\n\nImprove comment.",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r160269483,160269483,test/functional/test_framework/test_node.py
promag,2018-01-08T22:16:57Z,Why `SkipTest`? IMO should fail immediately in the test runner. ,https://github.com/bitcoin/bitcoin/pull/11970#discussion_r160270729,160270729,test/functional/test_framework/test_framework.py
jnewbery,2018-01-08T22:39:45Z,"This allows `--usecli` to be passed to test_runner and any tests that don't support `--usecli` will be skipped:\n\n```\n./test_runner.py --usecli\n[...]\nTEST                           | STATUS    | DURATION\n\nabandonconflict.py             | ○ Skipped | 2 s\nbip65-cltv-p2p.py              | ○ Skipped | 2 s\n[...]\nmultiwallet.py                 | ✓ Passed  | 4 s\nmultiwallet.py --usec",https://github.com/bitcoin/bitcoin/pull/11970#discussion_r160275350,160275350,test/functional/test_framework/test_framework.py
jnewbery,2018-01-08T22:39:53Z,fixed,https://github.com/bitcoin/bitcoin/pull/11970#discussion_r160275386,160275386,test/functional/test_framework/test_node.py
