[
  {
    "sha": "ace3f4cbdf476ea8b954d98dfaa931076f87a080",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2UzZjRjYmRmNDc2ZWE4Yjk1NGQ5OGRmYWE5MzEwNzZmODdhMDgw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-24T21:56:37Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-25T14:10:19Z"
      },
      "message": "test: improve assertions in feature_blockfilterindex_prune.py",
      "tree": {
        "sha": "2f4d31c99459794847616302cbb72b6b135fa31c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f4d31c99459794847616302cbb72b6b135fa31c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ace3f4cbdf476ea8b954d98dfaa931076f87a080",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmA3r9EACgkQT1chs9Dj\nkh2YRRAAyCHTxMhQzu+9X1/3CcGPVNmGnvdP2QUrQD/Jmis6aUjaKb3PFXsNFsPq\nMF7FxLo4E1oGWTv2PoO1fa68XkPMCJVl8F1YUbMzhjEK2MO8SpJOPIDVgF5kYWIe\nkWgMvP6duEKvY3878mQFli9SmUm7REfUo5PdFZ4HyZg0c7G2f06ceVAMn0jx8PjD\nJ+zfVTl9Dp11r43TLQB8v6DUczLGf/PgqwWZW5EYLQQzSfYAZyCSFKX/yjZKyE5g\nJX6h8PBoZ/0axed1/VBbF+V6trCeRjNcquXBNf2Q028ZcIAJAHKMHrvA4j2EzBZc\n7u96t89SjSAuXZaVRbUoPmcsUbfe36dUDceLP2VM9SaqrgXdToGg+r6rjJzvQ3A4\nfv0/FoMiDsAuXh/HvlY2Nw/NgAssxYPu41MW+cfzuHSx/CnJRHgbJdDB4Qp3nQOm\nnTXBe7foqHMYyPjzn0j/pbZRShA2l2upWh8YzIs7JyVT6Rry/3xg2ua+N6Pb0hni\nL+aM/dN4hJiBJRFk+O7fLs0z6CkBi12i/z8w9167+P7nBBxEYgX5peCedtg4raw4\n4nRPJnCSdFLn1IktzcnU2v5JGR8/7OnrB8sW3SuMD0oAD6ebEl+fNVA9cD6emsFY\nHD0d1KqrSlEhH5UriLGmHRKIHz7hVt1KgeJQr0v1Rm34mxbiW7k=\n=UEh8\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIL7WxhC/MdKWkAM9j9LFnbGVhsxN3PveHl6wj9Fh1JycCP/wECht3JdqUm8a\nPUo3mDNvGfMI8SA6nT4c35Ie5n5G97sUPPSNCxZxgAQKrZtKQyOj2Nj3OgjxBGA3\nr9LwCDiWDBWR/E/JAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQax0uQrd8HhLE+uZ/RGVxxQjxIMBQ0MnJUbnM\npZC79B+1N7GZKIncU5RhdbMfzUvzQD3nCPEEYDeh//AIl+XBkd+YNZEAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BB7\nGYhZxRzFFsPXGsZOF2MhCPEEYDev0/AIHCRaJjMlasoAg9/jDS75DI4jImh0dHBz\nOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEPRKpwizXy4onehOEGsnCNgI\n8SANe9vTOJVuYZoY7IePVku8iSGRWsVn1MKyQf/smGSD+gjxBGA3r9LwCD36bqbv\npvWIAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2f4d31c99459794847616302cbb72b6b135fa31c\nparent 1b1d8bde1c940345cad57b165dc6b5eaf9782857\nauthor Jon Atack <jon@atack.com> 1614203797 +0100\ncommitter Jon Atack <jon@atack.com> 1614262219 +0100\n\ntest: improve assertions in feature_blockfilterindex_prune.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ace3f4cbdf476ea8b954d98dfaa931076f87a080",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ace3f4cbdf476ea8b954d98dfaa931076f87a080",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ace3f4cbdf476ea8b954d98dfaa931076f87a080/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b1d8bde1c940345cad57b165dc6b5eaf9782857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b1d8bde1c940345cad57b165dc6b5eaf9782857",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b1d8bde1c940345cad57b165dc6b5eaf9782857"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "449ae9fbef3335c8dde013eedb2e9fe536240711",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ace3f4cbdf476ea8b954d98dfaa931076f87a080/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ace3f4cbdf476ea8b954d98dfaa931076f87a080/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=ace3f4cbdf476ea8b954d98dfaa931076f87a080",
        "patch": "@@ -16,36 +16,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-fastprune\", \"-prune=1\"], [\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"]]\n \n+    def sync_index(self, height):\n+        expected = {'basic block filter index': {'synced': True, 'best_block_height': height}}\n+        self.wait_until(lambda: self.nodes[1].getindexinfo() == expected)\n+\n     def run_test(self):\n         self.log.info(\"check if we can access a blockfilter when pruning is enabled but no blocks are actually pruned\")\n-        self.wait_until(lambda: self.nodes[1].getindexinfo() == {'basic block filter index': {'synced': True, 'best_block_height': 200}})\n-        assert len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']) > 0\n+        self.sync_index(height=200)\n+        assert_greater_than(len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']), 0)\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n         self.nodes[1].generate(250)\n         self.sync_all()\n         self.nodes[1].generate(250)\n         self.sync_all()\n-        self.wait_until(lambda: self.nodes[1].getindexinfo() == {'basic block filter index': {'synced': True, 'best_block_height': 700}})\n+        self.sync_index(height=700)\n+\n         self.log.info(\"prune some blocks\")\n         pruneheight = self.nodes[1].pruneblockchain(400)\n         assert_equal(pruneheight, 250)\n+\n         self.log.info(\"check if we can access the tips blockfilter when we have pruned some blocks\")\n-        assert len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']) > 0\n+        assert_greater_than(len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']), 0)\n+\n         self.log.info(\"check if we can access the blockfilter of a pruned block\")\n-        assert len(self.nodes[1].getblockfilter(self.nodes[1].getblockhash(2))['filter']) > 0\n+        assert_greater_than(len(self.nodes[1].getblockfilter(self.nodes[1].getblockhash(2))['filter']), 0)\n+\n         self.log.info(\"start node without blockfilterindex\")\n         self.stop_node(1)\n         self.start_node(1, extra_args=self.extra_args[0])\n+\n         self.log.info(\"make sure accessing the blockfilters throws an error\")\n         assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\", self.nodes[1].getblockfilter, self.nodes[1].getblockhash(2))\n         self.nodes[1].generate(1000)\n+\n         self.log.info(\"prune below the blockfilterindexes best block while blockfilters are disabled\")\n         pruneheight_new = self.nodes[1].pruneblockchain(1000)\n         assert_greater_than(pruneheight_new, pruneheight)\n         self.stop_node(1)\n+\n         self.log.info(\"make sure we get an init error when starting the node again with block filters\")\n         with self.nodes[1].assert_debug_log([\"basic block filter index best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\"]):\n             self.nodes[1].assert_start_raises_init_error(extra_args=self.extra_args[1])\n+\n         self.log.info(\"make sure the node starts again with the -reindex arg\")\n         reindex_args = self.extra_args[1]\n         reindex_args.append(\"-reindex\")"
      }
    ]
  },
  {
    "sha": "88c4b9b761964d0b3011126796f272cfca2a9fa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGM0YjliNzYxOTY0ZDBiMzAxMTEyNjc5NmYyNzJjZmNhMmE5ZmEy",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-25T14:00:37Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-25T17:05:59Z"
      },
      "message": "test: remove unneeded node from feature_blockfilterindex_prune.py",
      "tree": {
        "sha": "5f04f90a69536ae2026c2da9b211a4ba1e39fdf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f04f90a69536ae2026c2da9b211a4ba1e39fdf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88c4b9b761964d0b3011126796f272cfca2a9fa2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmA32P0ACgkQT1chs9Dj\nkh1GBRAAsgUkoXp/MAIraLqvs33cnGvxqOm5SS153rFEG5uHTuEbaWGB33LM34bU\nO0FNdibEBBD45w1AUw19UnCeGJONKI1YzHRLfqCq5dG0WoCW95YggdAaGCSaVZl+\nlhYptH4PxX5d363PexiNlOM/liyzut3tYJqpYzYaGDdJh6wA8JZf5Mzpx1n32j6+\n4wJSVL/MO7iqJgH4J/78fItGCcfQbkn7GmbZ3xqyLtZ+Ly1JcJ3FoHNvqWvyymZd\nakTvqnebbWUjum+3HALLtcogy4J+2fnNTlAZZeH6a0PmuJk9fbTCzgXCvQeDiTFy\n57W+INeIcRqyAi/lBQ9+iurAzMQKls4X60dyLSPX4Sliq22+bncj264CkR0OKHS5\nOn1OtKZinT5NU2Hevn1R/QOUtGhu/4Hf0EMh9QN5y/+c67mhVn8vk1NZhRXAorA7\n/ekT0fZF974I8Kc4s2bxIMl7ytoc8pWTIgXws8tuGxhLZIbRqszDYTMDgi2plcfY\n6rNFnEdfQ3OrgWYaNhu2zuSBAENe8y69CTI/67cRiWLlg78ojru4mfpH+acv5kPH\ns646R5jpBApJXh0ypqnlwq0B5NDiquczJp7tw2FRoWc3LmhtEJoX4KJl6iI7EZgS\ni6n1ACnVsVFgGNwlBvAqBBMMSGe/PYhrUTulnmHsJ+k9jpjExL0=\n=8LUD\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKLWlTBT2wa1e4BXDaEnnr8vw9EUx4Mr4T8jGr4wzem+CP/wEFSUna5wRVJ6\njyifMZI9p40I8QRgN9j/8AgUDOInJ9/JhgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQlAwXj8FsHi4XWSa7\nq3IPNQjxBGA32P/wCPxgdMRlUHsPAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQl54tFQvjx6nivsgV1FWt0gjxBGA3yyvwCFzZ\nBFsDfjkcAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BDihDIxjx5VYLGRIN/SAO7TCPAg9vl+ef7ALEC2COpTMj52l8pE\nGdGkwB09mfA7UwV5ls8I8CDS4lRVZHmPeK0SmREJwExrtIFMV+LQ1/jS4jtPvQUB\n5wjxBGA32P/wCD4LuoJ+kGtPAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5f04f90a69536ae2026c2da9b211a4ba1e39fdf5\nparent ace3f4cbdf476ea8b954d98dfaa931076f87a080\nauthor Jon Atack <jon@atack.com> 1614261637 +0100\ncommitter Jon Atack <jon@atack.com> 1614272759 +0100\n\ntest: remove unneeded node from feature_blockfilterindex_prune.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c4b9b761964d0b3011126796f272cfca2a9fa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88c4b9b761964d0b3011126796f272cfca2a9fa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c4b9b761964d0b3011126796f272cfca2a9fa2/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ace3f4cbdf476ea8b954d98dfaa931076f87a080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ace3f4cbdf476ea8b954d98dfaa931076f87a080",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ace3f4cbdf476ea8b954d98dfaa931076f87a080"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 17,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d13d191b2024572360071b191289e10b488c21e2",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 17,
        "deletions": 20,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c4b9b761964d0b3011126796f272cfca2a9fa2/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c4b9b761964d0b3011126796f272cfca2a9fa2/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=88c4b9b761964d0b3011126796f272cfca2a9fa2",
        "patch": "@@ -13,55 +13,52 @@\n \n class FeatureBlockfilterindexPruneTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 2\n-        self.extra_args = [[\"-fastprune\", \"-prune=1\"], [\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"]]\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"]]\n \n     def sync_index(self, height):\n         expected = {'basic block filter index': {'synced': True, 'best_block_height': height}}\n-        self.wait_until(lambda: self.nodes[1].getindexinfo() == expected)\n+        self.wait_until(lambda: self.nodes[0].getindexinfo() == expected)\n \n     def run_test(self):\n         self.log.info(\"check if we can access a blockfilter when pruning is enabled but no blocks are actually pruned\")\n         self.sync_index(height=200)\n-        assert_greater_than(len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']), 0)\n+        assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n-        self.nodes[1].generate(250)\n+        self.nodes[0].generate(250)\n         self.sync_all()\n-        self.nodes[1].generate(250)\n+        self.nodes[0].generate(250)\n         self.sync_all()\n         self.sync_index(height=700)\n \n         self.log.info(\"prune some blocks\")\n-        pruneheight = self.nodes[1].pruneblockchain(400)\n+        pruneheight = self.nodes[0].pruneblockchain(400)\n         assert_equal(pruneheight, 250)\n \n         self.log.info(\"check if we can access the tips blockfilter when we have pruned some blocks\")\n-        assert_greater_than(len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']), 0)\n+        assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n \n         self.log.info(\"check if we can access the blockfilter of a pruned block\")\n-        assert_greater_than(len(self.nodes[1].getblockfilter(self.nodes[1].getblockhash(2))['filter']), 0)\n+        assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getblockhash(2))['filter']), 0)\n \n         self.log.info(\"start node without blockfilterindex\")\n-        self.stop_node(1)\n-        self.start_node(1, extra_args=self.extra_args[0])\n+        self.restart_node(0, extra_args=[\"-fastprune\", \"-prune=1\"])\n \n         self.log.info(\"make sure accessing the blockfilters throws an error\")\n-        assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\", self.nodes[1].getblockfilter, self.nodes[1].getblockhash(2))\n-        self.nodes[1].generate(1000)\n+        assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\", self.nodes[0].getblockfilter, self.nodes[0].getblockhash(2))\n+        self.nodes[0].generate(1000)\n \n         self.log.info(\"prune below the blockfilterindexes best block while blockfilters are disabled\")\n-        pruneheight_new = self.nodes[1].pruneblockchain(1000)\n+        pruneheight_new = self.nodes[0].pruneblockchain(1000)\n         assert_greater_than(pruneheight_new, pruneheight)\n-        self.stop_node(1)\n+        self.stop_node(0)\n \n         self.log.info(\"make sure we get an init error when starting the node again with block filters\")\n-        with self.nodes[1].assert_debug_log([\"basic block filter index best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\"]):\n-            self.nodes[1].assert_start_raises_init_error(extra_args=self.extra_args[1])\n+        with self.nodes[0].assert_debug_log([\"basic block filter index best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\"]):\n+            self.nodes[0].assert_start_raises_init_error(extra_args=[\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"])\n \n         self.log.info(\"make sure the node starts again with the -reindex arg\")\n-        reindex_args = self.extra_args[1]\n-        reindex_args.append(\"-reindex\")\n-        self.start_node(1, extra_args=reindex_args)\n+        self.start_node(0, extra_args = [\"-fastprune\", \"-prune=1\", \"-blockfilterindex\", \"-reindex\"])\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]