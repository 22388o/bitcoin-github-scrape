DrahtBot,2020-03-07 02:44:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18338 (wip: Fix wallet unload race condition by promag)\n* #18279 (Ensure wallet and chain tip are in sync by bvbfan)\n\n",https://github.com/bitcoin/bitcoin/pull/18280#issuecomment-596037394,596037394,
ryanofsky,2020-03-10 15:30:55,"> Alternative to #18279. Similar to #15700. More details in #18065. Possibly fixes #16307.\n\nAbout to look into this but this PR description seems like it is going to take a lot of digging to understand.\n\nIs it possible to summarize in a paragraph what this change is doing, what problem it fixes, and how it compares to the alternative? Thank you! :pray:",https://github.com/bitcoin/bitcoin/pull/18280#issuecomment-597150670,597150670,
promag,2020-03-10 16:18:25,"Sorry @ryanofsky, should have tagged wip. Will address your comments and address each required change once this is good. Thanks for reviewing and your comments - will also revisit #15719.",https://github.com/bitcoin/bitcoin/pull/18280#issuecomment-597176774,597176774,
promag,2020-03-10 20:31:07,Updated OP. Reduced the scope to just fix #16307. Will submit other PRs with relevant changes from previous commits.,https://github.com/bitcoin/bitcoin/pull/18280#issuecomment-597299563,597299563,
promag,2020-03-11 15:16:48,Updated to include dc62f3ce5228a611d973a154eb338e1fd34df38f which ensures that `SyncWithValidationInterfaceQueue` doesn't hang due to `!AreThreadsServicingQueue`.,https://github.com/bitcoin/bitcoin/pull/18280#issuecomment-597693595,597693595,
promag,2020-03-13 08:46:31,Replaced by #18338.,https://github.com/bitcoin/bitcoin/pull/18280#issuecomment-598613080,598613080,
bvbfan,2020-03-06 15:13:32,You don't need make promise or calls function if `g_signals.m_internals` is nullptr.,https://github.com/bitcoin/bitcoin/pull/18280#discussion_r388959593,388959593,src/validationinterface.cpp
promag,2020-03-06 15:34:55,Done.,https://github.com/bitcoin/bitcoin/pull/18280#discussion_r388972769,388972769,src/validationinterface.cpp
ryanofsky,2020-03-10 15:35:13,"This comment is no longer true, and seems like it means there can now be missing notifications. I wonder if a different approach would be to send the loadwallet notification before locking the chain & scanning instead of after?",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r390406472,390406472,src/wallet/wallet.cpp
ryanofsky,2020-03-11 16:58:32,"In commit ""Handle no threads serving in MaybeScheduleProcessQueue"" (dc62f3ce5228a611d973a154eb338e1fd34df38f)\n\nI think it would make more sense to add this logic at the bottom of `AddToProcessQueue` (and avoid calling `MaybeScheduleProcessQueue` in no thread case) than having it at the top of `MaybeScheduleProcessQueue` and returning early.\n\nFew reasons:\n\n- Having this logic doesn't se",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391120925,391120925,src/scheduler.cpp
ryanofsky,2020-03-11 17:39:21,"In commit ""Handle no threads serving in MaybeScheduleProcessQueue"" (201eebf13b2723d7fe821d7222600fa04fadc0b0)\n\nCommit message subject is out of date since `MaybeScheduleProcessQueue` is no longer changing.\n\nAlso I'm surprised by ""SyncWithValidationInterfaceQueue is called after\nscheduler thread exists, which happen at shutdown"" since I would hope wallets are getting unloaded before the s",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391148440,391148440,src/scheduler.cpp
ryanofsky,2020-03-11 17:44:39,"In commit ""Handle no threads serving in MaybeScheduleProcessQueue"" (201eebf13b2723d7fe821d7222600fa04fadc0b0)\n\nIf we can make this code:\n\n```c++\nif (m_pscheduler->AreThreadsServicingQueue()) [\n    MaybeScheduleProcessQueue();\n} else {\n    EmptyQueue();\n}\n```\n\nit would be more obvious what's going on here.\n\nOtherwise if the unconditional `MaybeScheduleProcessQueue` call ",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391151878,391151878,src/scheduler.cpp
bvbfan,2020-03-11 18:23:12,Should it be inside `EmptyQueue`,https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391175327,391175327,src/scheduler.cpp
ryanofsky,2020-03-11 19:04:53,"> Should it be inside `EmptyQueue`\n\nI wouldn't change emptyqueue because it's called other places which don't need this logic, and I can't see how the behavior would fit in there (how you could coherently describe it or change the emptyqueue name to reflect it)",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391198452,391198452,src/scheduler.cpp
promag,2020-03-11 19:28:39,Changed. However if the scheduler thread is stopped after `AreThreadsServicingQueue` then the function won't be called right?,https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391210613,391210613,src/scheduler.cpp
bvbfan,2020-03-12 06:28:39,"Test wallet_multiwallet fails due to this code path, see my changes in EmptyQueue, you should schedule process queue when event queue is not empty, the logic is reversed there.",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391422843,391422843,src/scheduler.cpp
bvbfan,2020-03-12 14:55:44,"> I wouldn't change emptyqueue because it's called other places\n\nWhere? It's called in `FlushBackgroundCallbacks` only in init.cpp i'm pretty sure it will not affect anything wrong.",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391678408,391678408,src/scheduler.cpp
ryanofsky,2020-03-12 15:12:59,"> > I wouldn't change emptyqueue because it's called other places\n> \n> Where? It's called in `FlushBackgroundCallbacks` only in init.cpp i'm pretty sure it will not affect anything wrong.\n\nNot saying it's wrong, saying I don't understand how it makes sense for what how the EmptyQueue function is named, or what it currently does, or how it's called other places.\n\nMaybe your suggestion t",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391690701,391690701,src/scheduler.cpp
promag,2020-03-12 15:16:20,"> since I would hope wallets are getting unloaded before the scheduler stops\n\nNot currently the case.\n\n> Probably beyond the scope of this PR to address, though\n\nAgree, I've tried and it caused some other failures.\n\n> Commit message subject is out of date since MaybeScheduleProcessQueue is no longer changing.\n\nOps need to update.",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391693024,391693024,src/scheduler.cpp
ryanofsky,2020-03-12 15:35:49,"> Test wallet_multiwallet fails due to this code path, see my changes in EmptyQueue, you should schedule process queue when event queue is not empty, the logic is reversed there.\n\nwallet_multiwallet.py is failing on appveyor with ""'unloadwallet' RPC took longer than 60.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)""\n\nhttps://ci.appveyor.com/proje",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391706163,391706163,src/scheduler.cpp
bvbfan,2020-03-12 15:36:28,"It makes much more sense compare to current version\n```\nvoid SingleThreadedSchedulerClient::EmptyQueue() {\n    if (!m_pscheduler->AreThreadsServicingQueue())\n        return;\n    auto pendingCallbacks = [this]() -> bool {\n        LOCK(m_cs_callbacks_pending);\n        return !m_callbacks_pending.empty();\n    };\n    bool should_continue = pendingCallbacks();\n    while (should_cont",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391706553,391706553,src/scheduler.cpp
promag,2020-03-12 15:40:17,Iv'e been trying to reproduce appveyor error wihtout any luck.,https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391709067,391709067,src/scheduler.cpp
ryanofsky,2020-03-12 16:04:15,"In commit ""Handle no threads serving in MaybeScheduleProcessQueue"" (03cd591f47f852e0a2c2e6262367eff4acefca62)\n\nWas experimenting and wrote a small test for this change:\n\n```c++\n// Ensure scheduled tasks run even when there are no scheduler threads\nBOOST_AUTO_TEST_CASE(singlethreadedscheduler_nothreads)\n{\n    CScheduler scheduler;\n    SingleThreadedSchedulerClient client(&schedule",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391725203,391725203,src/scheduler.cpp
ryanofsky,2020-03-12 17:16:50,"> 1. You don't need to do stupid things, like here one,\n>    `if (!m_pscheduler->AreThreadsServicingQueue())`\n> 2. You don't need to check against is there pending callbacks it's done there, so if you don't have pending ones you don't need to enter eventually endless waiting.\n\n@bvbfan, I'm confused by what you are saying here. You seem to be saying you don't need two things, but your code ",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391771779,391771779,src/scheduler.cpp
bvbfan,2020-03-12 17:56:15,">  I'm confused by what you are saying here. You seem to be saying you don't need two things, but your code sample is doing both those things. \n\nI mean you don't need to do these things outside else, i was not clear. These 2 things should be done here in `EmptyQueue`\n\n> More importantly, I can't figure out what this suggestion has to do with wallet_multiwallet.py\n\n```\nif (m_pschedule",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391795447,391795447,src/scheduler.cpp
ryanofsky,2020-03-12 18:31:29,"> ```\n>        ProcessQueue(); // <--- here is the bigger mistake, it tries to process events before it's checked that has pending callbacks, you can enter this and wait to infinity (since app is shutting down) it should be checked for pendings before process queue\n> ```\n\nExplain this more? `ProcessQueue` doesn't wait for callbacks if there aren't any, it just runs a  callbacks if there is",https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391814619,391814619,src/scheduler.cpp
