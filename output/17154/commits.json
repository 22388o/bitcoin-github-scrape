[
  {
    "sha": "8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmJhOTFiMjJkMjJhOGRmZWE3Yzk0N2I1NDJiMTAyMmJmYzFjMGVh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-03T21:29:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-16T14:57:27Z"
      },
      "message": "[wallet] Fix whitespace in CWallet::CommitTransaction()\n\nReviewer hint: use --ignore-all-space git diff option for review.",
      "tree": {
        "sha": "bb25131ae55005d0e19aa52a0de78fef79231ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb25131ae55005d0e19aa52a0de78fef79231ae5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c34b88620dc8435b83e6744895f2ecd3c9ec8de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34b88620dc8435b83e6744895f2ecd3c9ec8de7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c34b88620dc8435b83e6744895f2ecd3c9ec8de7"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 26,
      "deletions": 31
    },
    "files": [
      {
        "sha": "f77c413593fcdd02011ee630f7ee4658465dbaac",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 31,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
        "patch": "@@ -3291,45 +3291,40 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n  */\n bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state)\n {\n-    {\n-        auto locked_chain = chain().lock();\n-        LOCK(cs_wallet);\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n \n-        CWalletTx wtxNew(this, std::move(tx));\n-        wtxNew.mapValue = std::move(mapValue);\n-        wtxNew.vOrderForm = std::move(orderForm);\n-        wtxNew.fTimeReceivedIsTxTime = true;\n-        wtxNew.fFromMe = true;\n+    CWalletTx wtxNew(this, std::move(tx));\n+    wtxNew.mapValue = std::move(mapValue);\n+    wtxNew.vOrderForm = std::move(orderForm);\n+    wtxNew.fTimeReceivedIsTxTime = true;\n+    wtxNew.fFromMe = true;\n \n-        WalletLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n-        {\n+    WalletLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n \n-            // Add tx to wallet, because if it has change it's also ours,\n-            // otherwise just for transaction history.\n-            AddToWallet(wtxNew);\n+    // Add tx to wallet, because if it has change it's also ours,\n+    // otherwise just for transaction history.\n+    AddToWallet(wtxNew);\n \n-            // Notify that old coins are spent\n-            for (const CTxIn& txin : wtxNew.tx->vin)\n-            {\n-                CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n-                coin.BindWallet(this);\n-                NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n-            }\n-        }\n+    // Notify that old coins are spent\n+    for (const CTxIn& txin : wtxNew.tx->vin) {\n+        CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n+        coin.BindWallet(this);\n+        NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n+    }\n \n-        // Get the inserted-CWalletTx from mapWallet so that the\n-        // fInMempool flag is cached properly\n-        CWalletTx& wtx = mapWallet.at(wtxNew.GetHash());\n+    // Get the inserted-CWalletTx from mapWallet so that the\n+    // fInMempool flag is cached properly\n+    CWalletTx& wtx = mapWallet.at(wtxNew.GetHash());\n \n-        if (fBroadcastTransactions)\n-        {\n-            std::string err_string;\n-            if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n-                WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n-                // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n-            }\n+    if (fBroadcastTransactions) {\n+        std::string err_string;\n+        if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n+            WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n+            // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n         }\n     }\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmY0ODZhMDJiNDYzZmZlYWY4MmVjMTFmYzZmNzRmNDM5YzAzN2Fl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-03T21:51:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-18T13:26:32Z"
      },
      "message": "[wallet] Add doxygen comment to CWallet::CommitTransaction()",
      "tree": {
        "sha": "b74abe8df6f3422d5b28c0633dd3979c5aacea66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b74abe8df6f3422d5b28c0633dd3979c5aacea66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f486a02b463ffeaf82ec11fc6f74f439c037ae/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bba91b22d22a8dfea7c947b542b1022bfc1c0ea"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a9ea56b6ab19bd644770d813ee8d5081dae2bfb7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f486a02b463ffeaf82ec11fc6f74f439c037ae/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f486a02b463ffeaf82ec11fc6f74f439c037ae/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
        "patch": "@@ -3286,9 +3286,6 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     return true;\n }\n \n-/**\n- * Call after CreateTransaction unless you want to abort\n- */\n bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state)\n {\n     auto locked_chain = chain().lock();"
      },
      {
        "sha": "d12c6077bf551a3ee4ae92d067783cd658e73e68",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f486a02b463ffeaf82ec11fc6f74f439c037ae/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f486a02b463ffeaf82ec11fc6f74f439c037ae/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
        "patch": "@@ -1147,6 +1147,16 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n      */\n     bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n+    /**\n+     * Submit the transaction to the node's mempool and then relay to peers.\n+     * Should be called after CreateTransaction unless you want to abort\n+     * broadcasting the transaction.\n+     *\n+     * @param tx[in] The transaction to be broadcast.\n+     * @param mapValue[in] key-values to be set on the transaction.\n+     * @param orderForm[in] BIP 70 / BIP 21 order form details to be set on the transaction.\n+     * @param state[in,out] CValidationState object returning information about whether the transaction was accepted\n+     */\n     bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const"
      }
    ]
  },
  {
    "sha": "d1734f9a3b138ab046f38ee44a09bc3847bf938a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTczNGY5YTNiMTM4YWIwNDZmMzhlZTQ0YTA5YmMzODQ3YmY5Mzhh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-03T21:55:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-18T13:26:32Z"
      },
      "message": "[wallet] Remove return value from CommitTransaction()\n\nCommitTransaction returns a bool to indicate success, but since commit\nb3a74100b8 it only returns true, even if the transaction was not\nsuccessfully broadcast. This commit changes CommitTransaction() to return\nvoid.\n\nAll dead code in `if (!CommitTransaction())` branches has been removed.",
      "tree": {
        "sha": "172eb76ab4c70e926fe292d8e535cae48ee879fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/172eb76ab4c70e926fe292d8e535cae48ee879fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1734f9a3b138ab046f38ee44a09bc3847bf938a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1734f9a3b138ab046f38ee44a09bc3847bf938a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1734f9a3b138ab046f38ee44a09bc3847bf938a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1734f9a3b138ab046f38ee44a09bc3847bf938a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f486a02b463ffeaf82ec11fc6f74f439c037ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f486a02b463ffeaf82ec11fc6f74f439c037ae"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 21,
      "deletions": 45
    },
    "files": [
      {
        "sha": "1830de8a27de399c7f27580af0418c181550f548",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -218,19 +218,14 @@ class WalletImpl : public Wallet\n         }\n         return tx;\n     }\n-    bool commitTransaction(CTransactionRef tx,\n+    void commitTransaction(CTransactionRef tx,\n         WalletValueMap value_map,\n-        WalletOrderForm order_form,\n-        std::string& reject_reason) override\n+        WalletOrderForm order_form) override\n     {\n         auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         CValidationState state;\n-        if (!m_wallet->CommitTransaction(std::move(tx), std::move(value_map), std::move(order_form), state)) {\n-            reject_reason = state.GetRejectReason();\n-            return false;\n-        }\n-        return true;\n+        m_wallet->CommitTransaction(std::move(tx), std::move(value_map), std::move(order_form), state);\n     }\n     bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet->TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override"
      },
      {
        "sha": "a96b93b4c3d75def89053ea4805e3071ea484827",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -141,10 +141,9 @@ class Wallet\n         std::string& fail_reason) = 0;\n \n     //! Commit transaction.\n-    virtual bool commitTransaction(CTransactionRef tx,\n+    virtual void commitTransaction(CTransactionRef tx,\n         WalletValueMap value_map,\n-        WalletOrderForm order_form,\n-        std::string& reject_reason) = 0;\n+        WalletOrderForm order_form) = 0;\n \n     //! Return whether transaction can be abandoned.\n     virtual bool transactionCanBeAbandoned(const uint256& txid) = 0;"
      },
      {
        "sha": "80ea6cd2e609e4ca06a945d2a141205f29cd1e7e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -558,8 +558,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n     msgParams.second = CClientUIInterface::MSG_WARNING;\n \n     // This comment is specific to SendCoinsDialog usage of WalletModel::SendCoinsReturn.\n-    // WalletModel::TransactionCommitFailed is used only in WalletModel::sendCoins()\n-    // all others are used only in WalletModel::prepareTransaction()\n+    // All status values are used only in WalletModel::prepareTransaction()\n     switch(sendCoinsReturn.status)\n     {\n     case WalletModel::InvalidAddress:\n@@ -581,10 +580,6 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"Transaction creation failed!\");\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n-    case WalletModel::TransactionCommitFailed:\n-        msgParams.first = tr(\"The transaction was rejected with the following reason: %1\").arg(sendCoinsReturn.reasonCommitFailed);\n-        msgParams.second = CClientUIInterface::MSG_ERROR;\n-        break;\n     case WalletModel::AbsurdFee:\n         msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->wallet().getDefaultMaxTxFee()));\n         break;"
      },
      {
        "sha": "5bc72125f6830539f53326e7b480e5c94cfb5082",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -260,9 +260,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         }\n \n         auto& newTx = transaction.getWtx();\n-        std::string rejectReason;\n-        if (!wallet().commitTransaction(newTx, {} /* mapValue */, std::move(vOrderForm), rejectReason))\n-            return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(rejectReason));\n+        wallet().commitTransaction(newTx, {} /* mapValue */, std::move(vOrderForm));\n \n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n         ssTx << *newTx;"
      },
      {
        "sha": "d8dd6c74a3f6f8079536a4643e6bd94bf4f29164",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -139,7 +139,6 @@ class WalletModel : public QObject\n         AmountWithFeeExceedsBalance,\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n-        TransactionCommitFailed,\n         AbsurdFee,\n         PaymentRequestExpired\n     };"
      },
      {
        "sha": "c9cd042b031b4d9020cd0783c0968e1569494bbe",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -394,11 +394,7 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n     mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n \n     CValidationState state;\n-    if (!wallet.CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, state)) {\n-        // NOTE: CommitTransaction never returns false, so this should never happen.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n-        return Result::WALLET_ERROR;\n-    }\n+    wallet.CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, state);\n \n     bumped_txid = tx->GetHash();\n     if (state.IsInvalid()) {"
      },
      {
        "sha": "62066ddcc78fc504451199e4d4ea2319033d6b2c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -343,10 +343,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state)) {\n-        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n-    }\n+    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state);\n     return tx;\n }\n \n@@ -928,11 +925,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state)) {\n-        strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n-        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n-    }\n-\n+    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state);\n     return tx->GetHash().GetHex();\n }\n "
      },
      {
        "sha": "f31cd1e1b630d69edec54fa971706d5873d69328",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -452,7 +452,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n             BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, fee, changePos, error, dummy));\n         }\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, state));\n+        wallet->CommitTransaction(tx, {}, {}, state);\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "9c5de45c280760552f932fd6be96f91a0c118c80",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -3286,7 +3286,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     return true;\n }\n \n-bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state)\n+void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state)\n {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n@@ -3314,15 +3314,16 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     // fInMempool flag is cached properly\n     CWalletTx& wtx = mapWallet.at(wtxNew.GetHash());\n \n-    if (fBroadcastTransactions) {\n-        std::string err_string;\n-        if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n-            WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n-            // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n-        }\n+    if (!fBroadcastTransactions) {\n+        // Don't submit tx to the mempool\n+        return;\n     }\n \n-    return true;\n+    std::string err_string;\n+    if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n+        WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n+        // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n+    }\n }\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)"
      },
      {
        "sha": "8113e60aa61a87fd69b80369b30e187f8f3ebc53",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1734f9a3b138ab046f38ee44a09bc3847bf938a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "patch": "@@ -1157,7 +1157,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n      * @param orderForm[in] BIP 70 / BIP 21 order form details to be set on the transaction.\n      * @param state[in,out] CValidationState object returning information about whether the transaction was accepted\n      */\n-    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state);\n+    void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  },
  {
    "sha": "9e95931865186d7a9a6dc54b64bd96507e9fea4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTk1OTMxODY1MTg2ZDdhOWE2ZGM1NGI2NGJkOTY1MDdlOWZlYTRi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-18T13:37:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-18T13:43:01Z"
      },
      "message": "[wallet] Remove `state` argument from CWallet::CommitTransaction\n\nThe `state` return argument has not been set since commit 611291c198.\nRemove it (and the one place that it's used in a calling function).",
      "tree": {
        "sha": "c6cf3fe27d4cdd98a358592fb880703605a87cf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6cf3fe27d4cdd98a358592fb880703605a87cf7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e95931865186d7a9a6dc54b64bd96507e9fea4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e95931865186d7a9a6dc54b64bd96507e9fea4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e95931865186d7a9a6dc54b64bd96507e9fea4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e95931865186d7a9a6dc54b64bd96507e9fea4b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1734f9a3b138ab046f38ee44a09bc3847bf938a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1734f9a3b138ab046f38ee44a09bc3847bf938a"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 8,
      "deletions": 24
    },
    "files": [
      {
        "sha": "530f19e2d61185ce41b052b4a35e712fab9aaf52",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=9e95931865186d7a9a6dc54b64bd96507e9fea4b",
        "patch": "@@ -5,7 +5,6 @@\n #include <interfaces/wallet.h>\n \n #include <amount.h>\n-#include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <policy/feerate.h>\n@@ -224,8 +223,7 @@ class WalletImpl : public Wallet\n     {\n         auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n-        CValidationState state;\n-        m_wallet->CommitTransaction(std::move(tx), std::move(value_map), std::move(order_form), state);\n+        m_wallet->CommitTransaction(std::move(tx), std::move(value_map), std::move(order_form));\n     }\n     bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet->TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override"
      },
      {
        "sha": "0a4bb3f396f20c7da5421f0082750e5807d07cc2",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=9e95931865186d7a9a6dc54b64bd96507e9fea4b",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n@@ -393,17 +392,10 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n     mapValue_t mapValue = oldWtx.mapValue;\n     mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n \n-    CValidationState state;\n-    wallet.CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, state);\n-\n-    bumped_txid = tx->GetHash();\n-    if (state.IsInvalid()) {\n-        // This can happen if the mempool rejected the transaction.  Report\n-        // what happened in the \"errors\" response.\n-        errors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n-    }\n+    wallet.CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm);\n \n     // mark the original tx as bumped\n+    bumped_txid = tx->GetHash();\n     if (!wallet.MarkReplaced(oldWtx.GetHash(), bumped_txid)) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about"
      },
      {
        "sha": "35d550a2e3d96d1ac62fecc6d1de1f6af405fb0f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9e95931865186d7a9a6dc54b64bd96507e9fea4b",
        "patch": "@@ -4,7 +4,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <amount.h>\n-#include <consensus/validation.h>\n #include <core_io.h>\n #include <init.h>\n #include <interfaces/chain.h>\n@@ -342,8 +341,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n-    CValidationState state;\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state);\n+    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n     return tx;\n }\n \n@@ -924,8 +922,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    CValidationState state;\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state);\n+    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n     return tx->GetHash().GetHex();\n }\n "
      },
      {
        "sha": "a2b2a7b227733bde6f88a0d19fb61b9c230ece49",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9e95931865186d7a9a6dc54b64bd96507e9fea4b",
        "patch": "@@ -8,7 +8,6 @@\n #include <stdint.h>\n #include <vector>\n \n-#include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <policy/policy.h>\n #include <rpc/server.h>\n@@ -451,8 +450,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n             auto locked_chain = m_chain->lock();\n             BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, fee, changePos, error, dummy));\n         }\n-        CValidationState state;\n-        wallet->CommitTransaction(tx, {}, {}, state);\n+        wallet->CommitTransaction(tx, {}, {});\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "413013e32eb06efa326e9ec56b2f937aa44d63f7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9e95931865186d7a9a6dc54b64bd96507e9fea4b",
        "patch": "@@ -3286,7 +3286,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     return true;\n }\n \n-void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state)\n+void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm)\n {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);"
      },
      {
        "sha": "c7834a5d02729dcce75f4d2d9181f10de343ebea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e95931865186d7a9a6dc54b64bd96507e9fea4b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9e95931865186d7a9a6dc54b64bd96507e9fea4b",
        "patch": "@@ -1155,9 +1155,8 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n      * @param tx[in] The transaction to be broadcast.\n      * @param mapValue[in] key-values to be set on the transaction.\n      * @param orderForm[in] BIP 70 / BIP 21 order form details to be set on the transaction.\n-     * @param state[in,out] CValidationState object returning information about whether the transaction was accepted\n      */\n-    void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state);\n+    void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  }
]