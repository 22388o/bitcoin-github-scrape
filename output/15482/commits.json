[
  {
    "sha": "0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmYwYjNjNDEyZGViOGUwMTZiYzRhZjVhMTdmYWVjM2Y4NGZjZTlj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-26T19:05:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-26T19:06:30Z"
      },
      "message": "Increase timeout of featuer_assumevalid test to fix flaky tests\n\nIncreases timeout for travis after\nb6f0db69a9c9cdf101371720351935121590d3aa (apparently) didn't\nincrease it enough.",
      "tree": {
        "sha": "e433f13b937d0c07d5d40daf5afbdf0662ff0b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e433f13b937d0c07d5d40daf5afbdf0662ff0b96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f470ecc534d49cb5f7045ea9564481acd3e2b4b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0eb3dd440bcbf6d861e356ec3f06d94bc5f85a9f",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
        "patch": "@@ -180,7 +180,7 @@ def run_test(self):\n         for i in range(2202):\n             p2p1.send_message(msg_block(self.blocks[i]))\n         # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n-        p2p1.sync_with_ping(150)\n+        p2p1.sync_with_ping(200)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n         # Send blocks to node2. Block 102 will be rejected."
      }
    ]
  },
  {
    "sha": "1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDcyZGQ4YjJkM2I3ZmY1ZjJmMTNiYzNmMWE3MzFkNDRiYmQzNWM2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-21T19:32:37Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-26T19:06:30Z"
      },
      "message": "Restrict timestamp when mining a diff-adjustment block to prev-600\n\nThis prepares us for a potential future timewarp-fixing softfork by\nensuring that we always refuse to mine blocks which refuse to\nexploit timewarp, no matter the behavior of other miners. Note that\nwe allow timestamp to go backwards by 600 seconds on the\ndifficulty-adjustment blocks to avoid bricking any existing\nhardware which relies on the ability to roll nTime by up to 600\nseconds.\n\nNote that it is possible that the eventual softfork to fix timewarp\nhas a looser resetriction than the 600 seconds enforced here,\nhowever it seems unlikely we will apply a tighter one, and its fine\nif we restrict things further on the mining end than in consensus.",
      "tree": {
        "sha": "39c5cc74c93ea288b2a8915d0ade1681876be12c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39c5cc74c93ea288b2a8915d0ade1681876be12c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf0b3c412deb8e016bc4af5a17faec3f84fce9c"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 71,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac508bad0b12d3d4f8d71a24199816e085363047",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
        "patch": "@@ -33,6 +33,9 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n {\n     int64_t nOldTime = pblock->nTime;\n     int64_t nNewTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    if (pindexPrev->nHeight % consensusParams.DifficultyAdjustmentInterval() == consensusParams.DifficultyAdjustmentInterval() - 1) {\n+        nNewTime = std::max(nNewTime, (int64_t)pindexPrev->nTime - 600);\n+    }\n \n     if (nOldTime < nNewTime)\n         pblock->nTime = nNewTime;"
      },
      {
        "sha": "fe81a7f8af5ae7faedd3fb26551eb4484d5b82ca",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
        "patch": "@@ -652,7 +652,11 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n     result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n     result.pushKV(\"target\", hashTarget.GetHex());\n-    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    if (pindexPrev->nHeight % consensusParams.DifficultyAdjustmentInterval() == consensusParams.DifficultyAdjustmentInterval() - 1) {\n+        result.pushKV(\"mintime\", std::max((int64_t)pindexPrev->GetMedianTimePast()+1, (int64_t)pindexPrev->nTime - 600));\n+    } else {\n+        result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    }\n     result.pushKV(\"mutable\", aMutable);\n     result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;"
      },
      {
        "sha": "f3777627cf7b3aaa354a0de0a470f2a2fa79ba45",
        "filename": "test/functional/mining_timewarp_fork.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/test/functional/mining_timewarp_fork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/test/functional/mining_timewarp_fork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_timewarp_fork.py?ref=1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test getblocktemplate complies with potential future timewarp-fixing\n+   softforks (modulo 600 second nTime decrease).\n+\n+   We first mine a chain up to the difficulty-adjustment block and set\n+   the last block's timestamp 2 hours in the future, then check the times\n+   returned by getblocktemplate. Note that we cannot check the actual\n+   retarget behavior as difficulty adjustments do not occur on regtest\n+   (though it still technically has a difficulty adjustment interval).\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes_bi,\n+)\n+\n+\n+class TimewarpMiningTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info('Create some old blocks')\n+        block_1 = self.nodes[0].generate(1)[0]\n+        for i in range(2013):\n+            self.nodes[0].generate(1)\n+        last_block_time = self.nodes[0].getblockheader(block_1)[\"time\"] + 7199\n+\n+        self.log.info('Create a block 7199 seconds in the future')\n+        self.nodes[0].setmocktime(last_block_time)\n+        block_2015 = self.nodes[0].generate(1)[0]\n+        assert_equal(self.nodes[0].getblockheader(block_2015)[\"time\"], last_block_time)\n+\n+        mining_info = self.nodes[0].getmininginfo()\n+        assert_equal(mining_info['blocks'], 2015)\n+        assert_equal(mining_info['currentblocktx'], 0)\n+        assert_equal(mining_info['currentblockweight'], 4000)\n+\n+        self.restart_node(0)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        self.log.info('Check that mintime and curtime are last-block - 600 seconds')\n+        # Now test that mintime and curtime are last_block_time - 600\n+        template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n+        assert_equal(template[\"curtime\"], last_block_time - 600)\n+        assert_equal(template[\"mintime\"], last_block_time - 600)\n+\n+        self.log.info('Generate a 2016th block and check that the next block\\'s time goes back to now')\n+        block_2016 = self.nodes[0].generate(1)[0]\n+        assert_equal(self.nodes[0].getblockheader(block_2016)[\"time\"], last_block_time - 600)\n+\n+        # Assume test doesn't take 2 hours and check that we let time jump backwards\n+        # now that we mined the difficulty-adjustment block\n+        block_2017 = self.nodes[0].generate(1)[0]\n+        assert(self.nodes[0].getblockheader(block_2017)[\"time\"] < last_block_time - 600)\n+\n+if __name__ == '__main__':\n+    TimewarpMiningTest().main()"
      },
      {
        "sha": "0ce5e3761e0f0c2d035520bdef38a8ca7ef01292",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
        "patch": "@@ -161,6 +161,7 @@\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',\n     'mining_basic.py',\n+    'mining_timewarp_fork.py',\n     'wallet_bumpfee.py',\n     'rpc_named_arguments.py',\n     'wallet_listsinceblock.py',"
      }
    ]
  },
  {
    "sha": "570eae77629f0f882c4e8983fa2b13a4e558893c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzBlYWU3NzYyOWYwZjg4MmM0ZTg5ODNmYTJiMTNhNGU1NTg4OTNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-24T23:01:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-26T19:06:30Z"
      },
      "message": "Ensure the script-fail reason is correct on mandatory flags\n\nPreviously, if we fail both due to a\nSTANDARD_NOT_MANDATORY_SCRIPT_VERIFY_FLAGS and a\nMANDATORY_SCRIPT_VERIFY_FLAGS, we would potentially return the\nnon-mandatory error as the reason for\nmandatory-script-verify-flag-failed. This ensures we always return\nthe correct error.",
      "tree": {
        "sha": "c41bbd4f448947cbfa54c623a6d15796be69c6cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c41bbd4f448947cbfa54c623a6d15796be69c6cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/570eae77629f0f882c4e8983fa2b13a4e558893c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/570eae77629f0f882c4e8983fa2b13a4e558893c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/570eae77629f0f882c4e8983fa2b13a4e558893c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/570eae77629f0f882c4e8983fa2b13a4e558893c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d72dd8b2d3b7ff5f2f13bc3f1a731d44bbd35c6"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "78bd97033d8bebbc9cf2b71758dfafaf850bd929",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/570eae77629f0f882c4e8983fa2b13a4e558893c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/570eae77629f0f882c4e8983fa2b13a4e558893c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=570eae77629f0f882c4e8983fa2b13a4e558893c",
        "patch": "@@ -1425,8 +1425,11 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // non-upgraded nodes.\n                         CScriptCheck check2(coin.out, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n-                        if (check2())\n+                        if (check2()) {\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n+                        } else {\n+                            return state.DoS(100, false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check2.GetScriptError())));\n+                        }\n                     }\n                     // Failures of other flags indicate a transaction that is\n                     // invalid in new blocks, e.g. an invalid P2SH. We DoS ban"
      }
    ]
  },
  {
    "sha": "f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWIzOTQwNTQ0YWQwMGFiMTBlNTBkOWIxMmM1YjgwNmIwZGE2ZDQx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-25T22:30:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-26T19:06:30Z"
      },
      "message": "Avoid creating <= 64-byte transactions in most functional tests.",
      "tree": {
        "sha": "d5809a91720b065991f5e6e59cf47d38042a71bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5809a91720b065991f5e6e59cf47d38042a71bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "570eae77629f0f882c4e8983fa2b13a4e558893c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/570eae77629f0f882c4e8983fa2b13a4e558893c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/570eae77629f0f882c4e8983fa2b13a4e558893c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d311ed3f950cf7f917e0f714731076caeeeb0040",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
        "patch": "@@ -43,7 +43,7 @@\n     msg_headers\n )\n from test_framework.mininode import P2PInterface\n-from test_framework.script import (CScript, OP_TRUE)\n+from test_framework.script import (CScript, OP_TRUE, OP_DROP)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -131,7 +131,7 @@ def run_test(self):\n         # Create a transaction spending the coinbase output with an invalid (null) signature\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.block1.vtx[0].sha256, 0), scriptSig=b\"\"))\n-        tx.vout.append(CTxOut(49 * 100000000, CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(49 * 100000000, CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])))\n         tx.calc_sha256()\n \n         block102 = create_block(self.tip, create_coinbase(height), self.block_time)"
      },
      {
        "sha": "a3250084425104e76be5411b3eb72c39e60a9aeb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
        "patch": "@@ -328,7 +328,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n-        tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])))\n         tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n \n@@ -496,7 +496,7 @@ def test_v0_outputs_arent_spendable(self):\n         # Now try to spend the outputs. This should fail since SCRIPT_VERIFY_WITNESS is always enabled.\n         p2wsh_tx = CTransaction()\n         p2wsh_tx.vin = [CTxIn(COutPoint(txid, 0), b'')]\n-        p2wsh_tx.vout = [CTxOut(value, CScript([OP_TRUE]))]\n+        p2wsh_tx.vout = [CTxOut(value, CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP]))]\n         p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n         p2wsh_tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n         p2wsh_tx.rehash()\n@@ -813,7 +813,7 @@ def test_witness_commitments(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n \n         # Let's construct a witness program\n-        witness_program = CScript([OP_TRUE])\n+        witness_program = CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n@@ -1114,7 +1114,7 @@ def test_max_witness_push_length(self):\n \n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n-        tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE])))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])))\n         tx2.wit.vtxinwit.append(CTxInWitness())\n         # First try a 521-byte stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a' * (MAX_SCRIPT_ELEMENT_SIZE + 1), witness_program]\n@@ -1155,7 +1155,7 @@ def test_max_witness_program_length(self):\n \n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n-        tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE])))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])))\n         tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a'] * 44 + [long_witness_program]\n         tx2.rehash()\n@@ -1444,7 +1444,7 @@ def test_premature_coinbase_witness_spend(self):\n \n         block = self.build_next_block()\n         # Change the output of the block to be a witness output.\n-        witness_program = CScript([OP_TRUE])\n+        witness_program = CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n         block.vtx[0].vout[0].scriptPubKey = script_pubkey\n@@ -1716,7 +1716,7 @@ def test_signature_version_1(self):\n         sign_p2pk_witness_input(witness_program, tx, 0, SIGHASH_ALL, temp_utxos[0].nValue, key)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n-        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE, OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])))\n \n         script = get_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)"
      },
      {
        "sha": "c6ab504f02d4f3fd6e8313851906304d855cfe28",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b3940544ad00ab10e50d9b12c5b806b0da6d41/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
        "patch": "@@ -36,6 +36,7 @@\n     OP_CHECKSIG,\n     OP_RETURN,\n     OP_TRUE,\n+    OP_DROP,\n     hash160,\n )\n from .util import assert_equal\n@@ -120,12 +121,13 @@ def create_coinbase(height, pubkey=None):\n     if (pubkey is not None):\n         coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n     else:\n-        coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n+        # Use three OP_TRUEs to ensure we're always > 64 bytes in non-witness size\n+        coinbaseoutput.scriptPubKey = CScript([OP_TRUE, OP_TRUE, OP_DROP])\n     coinbase.vout = [coinbaseoutput]\n     coinbase.calc_sha256()\n     return coinbase\n \n-def create_tx_with_script(prevtx, n, script_sig=b\"\", *, amount, script_pub_key=CScript()):\n+def create_tx_with_script(prevtx, n, script_sig=b\"\", *, amount, script_pub_key=CScript([OP_TRUE, OP_DROP, OP_TRUE, OP_DROP])):\n     \"\"\"Return one-input, one-output transaction object\n        spending the prevtx's n-th output with the given amount.\n "
      }
    ]
  },
  {
    "sha": "1f63030817c6a42d19c10bd16cb8fff700602081",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjYzMDMwODE3YzZhNDJkMTljMTBiZDE2Y2I4ZmZmNzAwNjAyMDgx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-25T22:32:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-02-26T19:06:30Z"
      },
      "message": "Implement BIPXXX's new softfork rules (The Great Consensus Cleanup)\n\nSome notes:\n * Three tests use non-push opcodes in scriptSigs, so those have\n   the fork explicitly disabled.\n * The 64-byte transaction check is executed in a new\n   ContextualBlockPreCheck which must be run before CheckBlock (at\n   least in the final checking before writing the block to disk).\n   This function is a bit awkward but is seemingly the simplest way\n   to implement the new check, with the caveat that, because the\n   new function is called before CheckBlock, it can never return a\n   non-CorruptionPossible error state.",
      "tree": {
        "sha": "7865ad9c70370d938b5ada04d8c6cea935819691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7865ad9c70370d938b5ada04d8c6cea935819691"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f63030817c6a42d19c10bd16cb8fff700602081",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f63030817c6a42d19c10bd16cb8fff700602081",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f63030817c6a42d19c10bd16cb8fff700602081",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f63030817c6a42d19c10bd16cb8fff700602081/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b3940544ad00ab10e50d9b12c5b806b0da6d41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b3940544ad00ab10e50d9b12c5b806b0da6d41"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 90,
      "deletions": 14
    },
    "files": [
      {
        "sha": "87cd72cf08b5e85278a6ef5fca3b246e6d35bb78",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -90,6 +90,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n+        // Deployment of BIPXXX\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].bit = 3;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].nStartTime = 1564617600; // August 1st, 2019\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].nTimeout = 1596240000; // August 1st, 2020\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n@@ -207,6 +212,11 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n+        // Deployment of BIPXXX\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].bit = 3;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].nStartTime = 1559347200; // June 1st, 2019\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].nTimeout = 1590969600; // June 1st, 2020\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000007dbe94253893cbd463\");\n \n@@ -297,6 +307,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].bit = 3;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CLEANUPS].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");"
      },
      {
        "sha": "f1468bd4980ba4cdedccf95c86e6993f3a3cd27b",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -18,6 +18,7 @@ enum DeploymentPos\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n+    DEPLOYMENT_CLEANUPS, // Deployment of BIPXXX.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };"
      },
      {
        "sha": "ac44724b5d34358ff8c28563bfbf1362e89c5e93",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -66,7 +66,9 @@ static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VE\n                                                              SCRIPT_VERIFY_WITNESS |\n                                                              SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n                                                              SCRIPT_VERIFY_WITNESS_PUBKEYTYPE |\n-                                                             SCRIPT_VERIFY_CONST_SCRIPTCODE;\n+                                                             SCRIPT_VERIFY_CONST_SCRIPTCODE |\n+                                                             SCRIPT_VERIFY_DEFINED_SIGHASH |\n+                                                             SCRIPT_VERIFY_SIGPUSHONLY;\n \n /** For convenience, standard but not mandatory verify flags. */\n static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "9cc74777af68abb2e8c1bf2620f40e918894d655",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -52,12 +52,17 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), // enforce NULLDUMMY (BIP147)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_SIGPUSHONLY         = (1U << 5), // enforce scriptSig IsPushOnly (BIPXXX)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CONST_SCRIPTCODE    = (1U << 16), // enforce const scriptCode (BIPXXX)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DEFINED_SIGHASH     = (1U << 17), // enforce defined sighashes (BIPXXX)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                 = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |\n                                                                bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n-                                                               bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS\n+                                                               bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                               bitcoinconsensus_SCRIPT_FLAGS_VERIFY_SIGPUSHONLY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CONST_SCRIPTCODE |\n+                                                               bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DEFINED_SIGHASH\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      },
      {
        "sha": "5722d2541a1c801800e0c69b2bbee6b4654a1876",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -208,7 +208,7 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {\n         // serror is set\n         return false;\n-    } else if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsDefinedHashtypeSignature(vchSig)) {\n+    } else if ((flags & (SCRIPT_VERIFY_STRICTENC | SCRIPT_VERIFY_DEFINED_SIGHASH)) != 0 && !IsDefinedHashtypeSignature(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_HASHTYPE);\n     }\n     return true;"
      },
      {
        "sha": "4cbbdcda238d4aea1acb8922e071a7c0bbd27237",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -115,6 +115,10 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Using an undefined hashtype in a checksig operation causes script failure.\n+    // This is implied by SCRIPT_VERIFY_STRICTENC\n+    SCRIPT_VERIFY_DEFINED_SIGHASH = (1U << 17),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      },
      {
        "sha": "d6dabbcb3633074cd79ee820b54ed3039f40edd9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 1,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -1772,6 +1772,11 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n+    // Start enforcing BIPXXX using versionbits logic.\n+    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_CLEANUPS, versionbitscache) == ThresholdState::ACTIVE) {\n+        flags |= SCRIPT_VERIFY_SIGPUSHONLY | SCRIPT_VERIFY_CONST_SCRIPTCODE | SCRIPT_VERIFY_DEFINED_SIGHASH;\n+    }\n+\n     if (IsNullDummyEnabled(pindex->pprev, consensusparams)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n@@ -1781,6 +1786,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n \n \n \n+static bool ContextualBlockPreCheck(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n+\n static int64_t nTimeCheck = 0;\n static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n@@ -1814,6 +1821,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // is enforced in ContextualCheckBlockHeader(); we wouldn't want to\n     // re-enforce that rule here (at least until we make it impossible for\n     // GetAdjustedTime() to go backward).\n+    if (!ContextualBlockPreCheck(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+        return error(\"%s: Consensus::ContextualBlockPreCheck: %s\", __func__, FormatStateMessage(state));\n+    }\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck)) {\n         if (state.CorruptionPossible()) {\n             // We don't write down blocks to disk if they may have been\n@@ -3238,6 +3248,16 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n+    // Check timestamp against prev for difficulty-adjustment blocks to prevent\n+    // timewarp attacks (BIPXXX).\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLEANUPS, versionbitscache) == ThresholdState::ACTIVE) {\n+        if (pindexPrev->nHeight % consensusParams.DifficultyAdjustmentInterval() == consensusParams.DifficultyAdjustmentInterval() - 1) {\n+            if (block.GetBlockTime() < pindexPrev->GetBlockTime() - 600) {\n+                return state.Invalid(false, REJECT_INVALID, \"time-timewarp-attack\", \"block's timestamp is too early on diff adjustment block\");\n+            }\n+        }\n+    }\n+\n     // Check timestamp\n     if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n@@ -3253,6 +3273,28 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     return true;\n }\n \n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a\n+ * non-malleable error condition.\n+ */\n+static bool ContextualBlockPreCheck(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+{\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLEANUPS, versionbitscache) == ThresholdState::ACTIVE) {\n+      for (const auto& tx : block.vtx) {\n+            if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) <= 64) {\n+                return state.DoS(0, false, REJECT_INVALID, \"64-byte-transaction\", true, strprintf(\"%s : transaction <= 64 bytes without witness\", __func__));\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n /** NOTE: This function is not currently invoked by ConnectBlock(), so we\n  *  should consider upgrade issues if we change which consensus rules are\n  *  enforced in this function (eg by adding a new consensus rule). See comment\n@@ -3508,7 +3550,8 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n         if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n+    if (!ContextualBlockPreCheck(block, state, chainparams.GetConsensus(), pindex->pprev) ||\n+        !CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3591,6 +3634,8 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n+    if (!ContextualBlockPreCheck(block, state, chainparams.GetConsensus(), pindexPrev))\n+        return error(\"%s: Consensus::ContextualBlockPreCheck: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n@@ -4019,6 +4064,9 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n+        if (nCheckLevel >= 1 && !ContextualBlockPreCheck(block, state, chainparams.GetConsensus(), pindex->pprev))\n+            return error(\"%s: *** found bad block at %d due to soft-fork, hash=%s (%s)\\n\", __func__,\n+                         pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));"
      },
      {
        "sha": "e55de690752a2e19c5bcbbc4c81917585fac460e",
        "filename": "src/versionbitsinfo.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -18,5 +18,9 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n     {\n         /*.name =*/ \"segwit\",\n         /*.gbt_force =*/ true,\n+    },\n+    {\n+        /*.name =*/ \"cleanups\",\n+        /*.gbt_force =*/ true,\n     }\n };"
      },
      {
        "sha": "cf484c4d86a6d89786db303e235ded22b27787d4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -78,7 +78,7 @@ class FullBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [[]]\n+        self.extra_args = [['-vbparams=cleanups:0:0']] # Don't enforce new cleanup softfork rules\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node"
      },
      {
        "sha": "74839a2b547ea20bdabbcdf2dc3b20b336500d57",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -15,7 +15,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    bytes_to_hex_str,\n     hex_str_to_bytes,\n )\n \n@@ -58,7 +57,9 @@ def cltv_validate(node, tx, height):\n class BIP65Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        # Use only one script thread to get the exact reject reason for testing\n+        # Also, we run some non-push opcodes in scriptSigs so disable the cleanups rules\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1', '-vbparams=cleanups:0:0']]\n         self.setup_clean_chain = True\n \n     def skip_test_if_missing_module(self):\n@@ -109,12 +110,9 @@ def run_test(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        # First we show that this tx is valid except for CLTV by getting it\n-        # rejected from the mempool for exactly that reason.\n-        assert_equal(\n-            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Negative locktime)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[bytes_to_hex_str(spendtx.serialize())], allowhighfees=True)\n-        )\n+        # Sadly, we can't check that the mempool rejects spendtx due to negative locktime\n+        # as non-push-scriptSig is checked first, but as its built in the same way as the\n+        # accepted transaction above, this should be OK.\n \n         # Now we verify that a block with this transaction is also invalid.\n         block.vtx.append(spendtx)"
      },
      {
        "sha": "f0bce558899cabf676a0153ff29ee37757263176",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f63030817c6a42d19c10bd16cb8fff700602081/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f63030817c6a42d19c10bd16cb8fff700602081/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=1f63030817c6a42d19c10bd16cb8fff700602081",
        "patch": "@@ -143,7 +143,8 @@ class BIP68_112_113Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n+        # We run some non-push opcodes in scriptSigs so disable the cleanups rules\n+        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy', '-vbparams=cleanups:0:0']]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  }
]