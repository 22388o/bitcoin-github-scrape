[
  {
    "sha": "2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYThlMzVhMTFkNGJkNDgyODYzMTY1NGZjN2I4YjhmZThmMGEyNDYw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-16T15:34:28Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-16T15:34:28Z"
      },
      "message": "Fix importwallet edge case rescan bug\n\nStart importwallet rescans at the first block with timestamp greater or equal\nto the wallet birthday instead of the last block with timestamp less or equal.\nThis fixes an edge case bug where importwallet could fail to start the rescan\nearly enough if there are blocks with decreasing timestamps or multiple blocks\nwith the same timestamp.",
      "tree": {
        "sha": "21fadce0eef49d4a633a032c08de17ba0e0de552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21fadce0eef49d4a633a032c08de17ba0e0de552"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41987aa92f0d6c0bee4d4b4889355fbd1dedeede",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41987aa92f0d6c0bee4d4b4889355fbd1dedeede",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41987aa92f0d6c0bee4d4b4889355fbd1dedeede"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 65,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d46cf69efbfe08fc9fc99b83975e3a5076f80366",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460",
        "patch": "@@ -536,14 +536,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n     }\n     file.close();\n     pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n-\n-    CBlockIndex *pindex = chainActive.Tip();\n-    while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - TIMESTAMP_WINDOW)\n-        pindex = pindex->pprev;\n-\n     pwallet->UpdateTimeFirstKey(nTimeBegin);\n \n-    LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n+    CBlockIndex *pindex = chainActive.FindEarliestAtLeast(nTimeBegin - TIMESTAMP_WINDOW);\n+\n+    LogPrintf(\"Rescanning last %i blocks\\n\", pindex ? chainActive.Height() - pindex->nHeight + 1 : 0);\n     pwallet->ScanForWalletTransactions(pindex);\n     pwallet->MarkDirty();\n "
      },
      {
        "sha": "b077d152d9fe074296ca764d101efd39932b87ad",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2a8e35a11d4bd4828631654fc7b8b8fe8f0a2460",
        "patch": "@@ -19,6 +19,8 @@\n #include <univalue.h>\n \n extern UniValue importmulti(const JSONRPCRequest& request);\n+extern UniValue dumpwallet(const JSONRPCRequest& request);\n+extern UniValue importwallet(const JSONRPCRequest& request);\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n #define RUN_TESTS 100\n@@ -437,6 +439,66 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     }\n }\n \n+// Verify importwallet RPC starts rescan at earliest block with timestamp\n+// greater or equal than key birthday. Previously there was a bug where\n+// importwallet RPC would start the scan at the latest block with timestamp less\n+// than or equal to key birthday.\n+BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n+{\n+    CWallet *pwalletMainBackup = ::pwalletMain;\n+    LOCK(cs_main);\n+\n+    // Create two blocks with same timestamp to verify that importwallet rescan\n+    // will pick up both blocks, not just the first.\n+    const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n+    SetMockTime(BLOCK_TIME);\n+    coinbaseTxns.emplace_back(*CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+    coinbaseTxns.emplace_back(*CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+\n+    // Set key birthday to block time increased by the timestamp window, so\n+    // rescan will start at the block time.\n+    const int64_t KEY_TIME = BLOCK_TIME + TIMESTAMP_WINDOW;\n+    SetMockTime(KEY_TIME);\n+    coinbaseTxns.emplace_back(*CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+\n+    // Import key into wallet and call dumpwallet to create backup file.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+\n+        JSONRPCRequest request;\n+        request.params.setArray();\n+        request.params.push_back(\"wallet.backup\");\n+        ::pwalletMain = &wallet;\n+        ::dumpwallet(request);\n+    }\n+\n+    // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n+    // were scanned, and no prior blocks were scanned.\n+    {\n+        CWallet wallet;\n+\n+        JSONRPCRequest request;\n+        request.params.setArray();\n+        request.params.push_back(\"wallet.backup\");\n+        ::pwalletMain = &wallet;\n+        ::importwallet(request);\n+\n+        BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3);\n+        BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103);\n+        for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n+            bool found = wallet.GetWalletTx(coinbaseTxns[i].GetHash());\n+            bool expected = i >= 100;\n+            BOOST_CHECK_EQUAL(found, expected);\n+        }\n+    }\n+\n+    SetMockTime(0);\n+    ::pwalletMain = pwalletMainBackup;\n+}\n+\n // Check that GetImmatureCredit() returns a newly calculated value instead of\n // the cached value after a MarkDirty() call.\n //"
      }
    ]
  }
]