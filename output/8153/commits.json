[
  {
    "sha": "faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY4MmU4ZmM4MTliMmYxZjhiNjA5ODNhYzcyY2IxMTFjNDdlOGJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-03T17:07:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-06T17:40:35Z"
      },
      "message": "[rpc] fundrawtransaction: Fix help text and interface",
      "tree": {
        "sha": "cfc1184675887875aa874b3fd25d452844ec2235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfc1184675887875aa874b3fd25d452844ec2235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52c3f348bec33fab5ae0a9f1b9f14b9a74c0083f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52c3f348bec33fab5ae0a9f1b9f14b9a74c0083f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52c3f348bec33fab5ae0a9f1b9f14b9a74c0083f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3040752dcb4705c7a3619371e591333e6ae21056",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
        "patch": "@@ -681,7 +681,7 @@ def run_test(self):\n         inputs = []\n         outputs = {self.nodes[2].getnewaddress() : 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx, )\n+        result = self.nodes[3].fundrawtransaction(rawtx) # 1000 sat via settxfee\n         result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2000})\n         result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10000})\n         assert_equal(result['fee']*2, result2['fee'])"
      },
      {
        "sha": "68895ac526577a35163a07fcec1cab80b348395a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
        "patch": "@@ -2369,13 +2369,13 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"      (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"           (numeric, optional, default 0=estimate) Set a specific feerate (fee per KB)\\n\"\n+                            \"     \\\"feeRate\\\"           (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (satoshis per KB)\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n                             \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n                             \"\\\"hex\\\"             \\n\""
      }
    ]
  },
  {
    "sha": "fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdmNGY1NzdjYmFiMmI0YmMwM2I1NDI3NzA0YzJlYzE2NjgwYzM0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-06T15:50:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-07T11:12:57Z"
      },
      "message": "[rpc] fundrawtransaction feeRate: Use BTC/kB\n\nAlso introduce UniValueType\n\nUniValueType is a wrapper for UniValue::VType which allows setting\na typeAny flag. This flag indicates the type does not matter.\n\n(Used by RPCTypeCheckObj)",
      "tree": {
        "sha": "9ceac88ffe807278f80ca8d3afb3aa4a6de14207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ceac88ffe807278f80ca8d3afb3aa4a6de14207"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 50,
      "deletions": 20
    },
    "files": [
      {
        "sha": "998f822afe81d87e0143df46fa5870e56ab3a6dc",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
        "patch": "@@ -681,9 +681,9 @@ def run_test(self):\n         inputs = []\n         outputs = {self.nodes[2].getnewaddress() : 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx) # 1000 sat via settxfee\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2000})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10000})\n+        result = self.nodes[3].fundrawtransaction(rawtx) # uses min_relay_tx_fee (set by settxfee)\n+        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee})\n+        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10*min_relay_tx_fee})\n         assert_equal(result['fee']*2, result2['fee'])\n         assert_equal(result['fee']*10, result3['fee'])\n "
      },
      {
        "sha": "f92ddb282e8da062e52a860bb741460013fc53dd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
        "patch": "@@ -675,7 +675,12 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n             UniValue prevOut = p.get_obj();\n \n-            RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR));\n+            RPCTypeCheckObj(prevOut,\n+                {\n+                    {\"txid\", UniValueType(UniValue::VSTR)},\n+                    {\"vout\", UniValueType(UniValue::VNUM)},\n+                    {\"scriptPubKey\", UniValueType(UniValue::VSTR)},\n+                });\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -703,7 +708,13 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n-                RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n+                RPCTypeCheckObj(prevOut,\n+                    {\n+                        {\"txid\", UniValueType(UniValue::VSTR)},\n+                        {\"vout\", UniValueType(UniValue::VNUM)},\n+                        {\"scriptPubKey\", UniValueType(UniValue::VSTR)},\n+                        {\"redeemScript\", UniValueType(UniValue::VSTR)},\n+                    });\n                 UniValue v = find_value(prevOut, \"redeemScript\");\n                 if (!v.isNull()) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));"
      },
      {
        "sha": "23149baa6d9459caa8827b296ed94bd0bd0dc656",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
        "patch": "@@ -88,20 +88,18 @@ void RPCTypeCheck(const UniValue& params,\n }\n \n void RPCTypeCheckObj(const UniValue& o,\n-                  const map<string, UniValue::VType>& typesExpected,\n-                  bool fAllowNull,\n-                  bool fStrict)\n+    const map<string, UniValueType>& typesExpected,\n+    bool fAllowNull,\n+    bool fStrict)\n {\n-    BOOST_FOREACH(const PAIRTYPE(string, UniValue::VType)& t, typesExpected)\n-    {\n+    for (const auto& t : typesExpected) {\n         const UniValue& v = find_value(o, t.first);\n         if (!fAllowNull && v.isNull())\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n \n-        if (!((v.type() == t.second) || (fAllowNull && (v.isNull()))))\n-        {\n+        if (!(t.second.typeAny || v.type() == t.second.type || (fAllowNull && v.isNull()))) {\n             string err = strprintf(\"Expected type %s for %s, got %s\",\n-                                   uvTypeName(t.second), t.first, uvTypeName(v.type()));\n+                uvTypeName(t.second.type), t.first, uvTypeName(v.type()));\n             throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n     }"
      },
      {
        "sha": "b5ccc153d07ef57929d160ff3e553deed8cdad76",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
        "patch": "@@ -32,6 +32,15 @@ namespace RPCServer\n class CBlockIndex;\n class CNetAddr;\n \n+/** Wrapper for UniValue::VType, which includes typeAny:\n+ * Used to denote don't care type. Only used by RPCTypeCheckObj */\n+struct UniValueType {\n+    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n+    UniValueType() : typeAny(true) {}\n+    bool typeAny;\n+    UniValue::VType type;\n+};\n+\n class JSONRequest\n {\n public:\n@@ -60,17 +69,17 @@ bool RPCIsInWarmup(std::string *statusOut);\n /**\n  * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n  * the right number of arguments are passed, just that any passed are the correct type.\n- * Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n  */\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n /*\n   Check for expected keys/value types in an Object.\n-  Use like: RPCTypeCheckObj(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n */\n void RPCTypeCheckObj(const UniValue& o,\n-                  const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false, bool fStrict=false);\n+    const std::map<std::string, UniValueType>& typesExpected,\n+    bool fAllowNull = false,\n+    bool fStrict = false);\n \n /** Opaque base class for timers returned by NewTimerFunc.\n  * This provides no methods at the moment, but makes sure that delete"
      },
      {
        "sha": "1300e39aa94120276c275496189ffea69266dd09",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7f4f577cbab2b4bc03b5427704c2ec16680c34/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa7f4f577cbab2b4bc03b5427704c2ec16680c34",
        "patch": "@@ -2069,7 +2069,11 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const UniValue& o = output.get_obj();\n \n-        RPCTypeCheckObj(o, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM));\n+        RPCTypeCheckObj(o,\n+            {\n+                {\"txid\", UniValueType(UniValue::VSTR)},\n+                {\"vout\", UniValueType(UniValue::VNUM)},\n+            });\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))\n@@ -2369,7 +2373,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"      (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"           (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (satoshis per KB)\\n\"\n+                            \"     \\\"feeRate\\\"           (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2409,7 +2413,15 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n         UniValue options = params[1];\n \n-        RPCTypeCheckObj(options, boost::assign::map_list_of(\"changeAddress\", UniValue::VSTR)(\"changePosition\", UniValue::VNUM)(\"includeWatching\", UniValue::VBOOL)(\"lockUnspents\", UniValue::VBOOL)(\"feeRate\", UniValue::VNUM), true, true);\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"changeAddress\", UniValueType(UniValue::VSTR)},\n+                {\"changePosition\", UniValueType(UniValue::VNUM)},\n+                {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n+                {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n+                {\"feeRate\", UniValueType()}, // will be checked below\n+            },\n+            true, true);\n \n         if (options.exists(\"changeAddress\")) {\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n@@ -2431,7 +2443,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n         if (options.exists(\"feeRate\"))\n         {\n-            feeRate = CFeeRate(options[\"feeRate\"].get_real());\n+            feeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             overrideEstimatedFeerate = true;\n         }\n       }"
      }
    ]
  }
]