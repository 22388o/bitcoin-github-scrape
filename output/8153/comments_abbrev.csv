luke-jr,2016-06-06T18:17:24Z,"Should actually be BTC (or satoshis?) per byte, since we no longer do it per kB...\n",https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224042609,224042609,
sipa,2016-06-06T18:18:39Z,"All RPC arguments use BTC/kByte, no?\n",https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224042955,224042955,
jonasschnelli,2016-06-06T18:19:36Z,It should be the same format than bitcoind spit out when one calls `estimatefee`.\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224043222,224043222,
MarcoFalke,2016-06-06T19:51:20Z,@jonasschnelli et al: Added a commit so I don't have to modify the univalue subtree. (Added a UniValueType wrapper instead)\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224068168,224068168,
laanwj,2016-06-07T06:46:53Z,"BTC/kB is fine, we use that for fee rates on the interface everywhere. The point of this change is to reduce the variety of different ways in which the same is expressed on the interface, not come up with something new.\n\nutACK https://github.com/bitcoin/bitcoin/pull/8153/commits/faf82e8fc819b2f1f8b60983ac72cb111c47e8ba\n",https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224194564,224194564,
MarcoFalke,2016-06-07T07:05:57Z,I think @luke-jr was referring to kB no longer being the smallest unit. Currently we use Byte to be the smallest unit.\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224197690,224197690,
MarcoFalke,2016-06-07T07:17:34Z,(Force pushed after fixing comment-nit)\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224199760,224199760,
jonasschnelli,2016-06-07T09:11:23Z,"Not sure if I got this right, but why not just removing the `""feeRate""` from the `RPCTypeCheckObj` check (it's optional anyways)? I don't see the reason for the new `UniValueType` type.\n",https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224223730,224223730,
MarcoFalke,2016-06-07T09:27:45Z,We also want to suppress passing in unrecognized parameters. (Try removing it and see where the rpc tests fail. Hint: `fStrict` is set to `true`)\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224227592,224227592,
jonasschnelli,2016-06-07T09:32:32Z,Ah. Right. Makes sense.\nIs there no way to avoid the `UniValueType` wrapper? Using UniValue::VNULL for a type-independent check? Or would a C++11 union be simpler?\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224228680,224228680,
jonasschnelli,2016-06-07T10:55:14Z,Nice!\nutACK fa51551b7f5c2dbfae01f5cee8ee8251868609e2\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224246704,224246704,
laanwj,2016-06-08T12:15:19Z,utACK fa7f4f5\n,https://github.com/bitcoin/bitcoin/pull/8153#issuecomment-224571233,224571233,
fanquake,2016-06-07T02:27:05Z,nit s/sat/set\n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66001494,66001494,qa/rpc-tests/fundrawtransaction.py
paveljanik,2016-06-07T04:03:02Z,"it is probably satoshis. But not very clear, yes.\n",https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66007017,66007017,qa/rpc-tests/fundrawtransaction.py
MarcoFalke,2016-06-07T07:06:11Z,"Thanks, will fix the comment.\n",https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66019326,66019326,qa/rpc-tests/fundrawtransaction.py
laanwj,2016-06-07T07:14:34Z,Looks muc hbetter in c++11 syntax\n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66020090,66020090,src/rpc/rawtransaction.cpp
sipa,2016-06-07T09:38:40Z,typedef is not needed for structs and classes in C++.\n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66039098,66039098,src/rpc/server.h
MarcoFalke,2016-06-07T10:11:20Z,Fixed.\n\nAlso changed to `union` as suggested by @jonasschnelli \n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66043555,66043555,src/rpc/server.h
sipa,2016-06-07T11:02:53Z,This is not valid. You can only access fields of a union that you know was the last one assigned to. Testing both typeAny and type certains violates that property at least once.\n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66049933,66049933,src/rpc/server.cpp
MarcoFalke,2016-06-07T11:29:09Z,"Right, I should probably just do `s/union/struct/` to revert to struct.\n",https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66053320,66053320,src/rpc/server.cpp
laanwj,2016-06-07T12:00:53Z,"I agree. It's very easy to violate the requirements of using an union accidentally, resulting in horrible hard to debug issues, I'd prefer not using them unless it's a place where the additional memory usage is critical. I don't think that's the case here.\n",https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66057155,66057155,src/rpc/server.cpp
laanwj,2016-06-07T12:22:05Z,"We slipped up with the review for #7967, shouldn't have allowed using get_real here. Good that this is being replaced.\n",https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66059776,66059776,src/wallet/rpcwallet.cpp
MarcoFalke,2016-06-07T12:26:33Z,done. Hope I got it right this time. :+1: \n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66060533,66060533,src/rpc/server.cpp
MarcoFalke,2016-06-07T12:32:17Z,"On the other hand, imagine if someone noticed it while reviewing #7967: The pull probably would have never made it into 0.13 before feature freeze, because adding the anytype is a non-trivial refactor and review is hard to do when there is substantial refactoring going on while adding new features.\n\nLooking at it from this perspective, it makes sense to have two pulls to aid review.\n",https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66061358,66061358,src/wallet/rpcwallet.cpp
laanwj,2016-06-07T13:28:28Z,I agree\n,https://github.com/bitcoin/bitcoin/pull/8153#discussion_r66069651,66069651,src/wallet/rpcwallet.cpp
