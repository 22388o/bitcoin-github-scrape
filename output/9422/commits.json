[
  {
    "sha": "80ded01e65aad53dd7620e037700357991476f16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGRlZDAxZTY1YWFkNTNkZDc2MjBlMDM3NzAwMzU3OTkxNDc2ZjE2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-12-25T04:55:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-03-03T18:19:00Z"
      },
      "message": "Refactor {Dump,Load}Mempool to be more extensible",
      "tree": {
        "sha": "3bde32664de1b649b64d9034054323485396a3f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bde32664de1b649b64d9034054323485396a3f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ded01e65aad53dd7620e037700357991476f16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ded01e65aad53dd7620e037700357991476f16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ded01e65aad53dd7620e037700357991476f16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ded01e65aad53dd7620e037700357991476f16/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d9c4185fadaf243bb97c226e2fef16b65299699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9c4185fadaf243bb97c226e2fef16b65299699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d9c4185fadaf243bb97c226e2fef16b65299699"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 87,
      "deletions": 43
    },
    "files": [
      {
        "sha": "342262a12aefc0fe529447497ecea143384bf430",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 43,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ded01e65aad53dd7620e037700357991476f16/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ded01e65aad53dd7620e037700357991476f16/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=80ded01e65aad53dd7620e037700357991476f16",
        "patch": "@@ -4531,7 +4531,7 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n     return VersionBitsStateSinceHeight(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n-static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n+static const uint64_t MEMPOOL_DUMP_VERSION = 2;\n \n bool LoadMempool(void)\n {\n@@ -4556,50 +4556,80 @@ bool LoadMempool(void)\n         if (version != MEMPOOL_DUMP_VERSION) {\n             return false;\n         }\n-        uint64_t num;\n-        file >> num;\n-        while (num--) {\n-            CTransactionRef tx;\n-            int64_t nTime;\n-            int64_t nFeeDelta;\n-            file >> tx;\n-            file >> nTime;\n-            file >> nFeeDelta;\n-\n-            CAmount amountdelta = nFeeDelta;\n-            if (amountdelta) {\n-                mempool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n+        std::map<std::string, std::vector<unsigned char>> mapData;\n+        file >> mapData;\n+\n+        auto it = mapData.find(\"deltas\");\n+        if (it != mapData.end()) {\n+            try {\n+                CDataStream ss(it->second, SER_DISK, CLIENT_VERSION);\n+                std::map<uint256, std::pair<double, CAmount>> mapDeltas;\n+                ss >> mapDeltas;\n+                LOCK(mempool.cs);\n+                for (const auto& it : mapDeltas) {\n+                    const uint256& txid = it.first;\n+                    const CAmount& amountdelta = it.second.second;\n+                    mempool.PrioritiseTransaction(txid, amountdelta);\n+                }\n+            } catch (const std::exception& e) {\n+                LogPrintf(\"Failed to deserialize mempool %s from disk: %s. Continuing anyway.\\n\", \"deltas\", e.what());\n             }\n-            CValidationState state;\n-            if (nTime + nExpiryTimeout > nNow) {\n-                LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */);\n-                if (state.IsValid()) {\n-                    ++count;\n-                } else {\n+        }\n+\n+        it = mapData.find(\"txs\");\n+        if (it != mapData.end()) {\n+            std::vector<std::map<std::string, std::vector<unsigned char>>> txMapDatas;\n+            try {\n+                CDataStream(it->second, SER_DISK, CLIENT_VERSION) >> txMapDatas;\n+            } catch (const std::exception& e) {\n+                LogPrintf(\"Failed to deserialize mempool %s from disk: %s. Continuing anyway.\\n\", \"transactions\", e.what());\n+            }\n+            for (auto mapTxData : txMapDatas) {\n+                try {\n+                    it = mapTxData.find(\"t\");\n+                    if (it == mapTxData.end()) {\n+                        throw std::runtime_error(\"mapTxData \\\"t\\\" key missing\");\n+                    }\n+                    int64_t nTime;\n+                    CDataStream(it->second, SER_DISK, CLIENT_VERSION) >> nTime;\n+                    if (nTime + nExpiryTimeout <= nNow) {\n+                        ++expired;\n+                        continue;\n+                    }\n+\n+                    it = mapTxData.find(\"\");\n+                    if (it == mapTxData.end()) {\n+                        throw std::runtime_error(\"mapTxData null key missing\");\n+                    }\n+                    CDataStream ssTx(it->second, SER_DISK, CLIENT_VERSION);\n+                    CTransactionRef tx;\n+                    ssTx >> tx;\n+\n                     // mempool may contain the transaction already, e.g. from\n                     // wallet(s) having loaded it while we were processing\n                     // mempool transactions; consider these as valid, instead of\n-                    // failed, but mark them as 'already there'\n+                    // failing, but mark them as 'already there'\n                     if (mempool.exists(tx->GetHash())) {\n+                        ++count;\n                         ++already_there;\n-                    } else {\n-                        ++failed;\n+                        continue;\n                     }\n+\n+                    CValidationState state;\n+                    LOCK(cs_main);\n+                    AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n+                                               nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */);\n+                    if (!state.IsValid()) {\n+                        throw std::runtime_error(state.GetRejectReason());\n+                    }\n+                    ++count;\n+                } catch (const std::exception& e) {\n+                    ++failed;\n                 }\n-            } else {\n-                ++expired;\n             }\n             if (ShutdownRequested())\n                 return false;\n         }\n-        std::map<uint256, CAmount> mapDeltas;\n-        file >> mapDeltas;\n-\n-        for (const auto& i : mapDeltas) {\n-            mempool.PrioritiseTransaction(i.first, i.second);\n-        }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n         return false;\n@@ -4609,24 +4639,45 @@ bool LoadMempool(void)\n     return true;\n }\n \n+template <class T>\n+std::vector<unsigned char> SerializeToVector(T o) {\n+    CDataStream ss(SER_DISK, CLIENT_VERSION);\n+    ss << o;\n+    return std::vector<unsigned char>(ss.begin(), ss.end());\n+}\n+\n bool DumpMempool(void)\n {\n     int64_t start = GetTimeMicros();\n \n-    std::map<uint256, CAmount> mapDeltas;\n     std::vector<TxMempoolInfo> vinfo;\n+    std::map<uint256, std::pair<double, CAmount>> mapDeltas;\n \n     {\n         LOCK(mempool.cs);\n         for (const auto &i : mempool.mapDeltas) {\n-            mapDeltas[i.first] = i.second;\n+            mapDeltas[i.first] = std::make_pair(0.0, i.second);\n         }\n         vinfo = mempool.infoAll();\n     }\n \n     int64_t mid = GetTimeMicros();\n \n     try {\n+        std::map<std::string, std::vector<unsigned char>> mapData;\n+        mapData[\"deltas\"] = SerializeToVector(mapDeltas);\n+        {\n+            std::vector<std::map<std::string, std::vector<unsigned char>>> txMapDatas;\n+            for (TxMempoolInfo info : vinfo) {\n+                std::map<std::string, std::vector<unsigned char>> mapTxData;\n+                mapTxData[\"\"] = SerializeToVector(*(info.tx));\n+                mapTxData[\"t\"] = SerializeToVector(info.nTime);\n+                txMapDatas.push_back(std::move(mapTxData));\n+            }\n+\n+            mapData[\"txs\"] = SerializeToVector(txMapDatas);\n+        }\n+\n         FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat.new\", \"wb\");\n         if (!filestr) {\n             return false;\n@@ -4637,15 +4688,8 @@ bool DumpMempool(void)\n         uint64_t version = MEMPOOL_DUMP_VERSION;\n         file << version;\n \n-        file << (uint64_t)vinfo.size();\n-        for (const auto& i : vinfo) {\n-            file << *(i.tx);\n-            file << (int64_t)i.nTime;\n-            file << (int64_t)i.nFeeDelta;\n-            mapDeltas.erase(i.tx->GetHash());\n-        }\n+        file << mapData;\n \n-        file << mapDeltas;\n         FileCommit(file.Get());\n         file.fclose();\n         RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\");"
      }
    ]
  },
  {
    "sha": "1d34442931e6b6b16893568a4719f447747097e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDM0NDQyOTMxZTZiNmIxNjg5MzU2OGE0NzE5ZjQ0Nzc0NzA5N2U1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-12-25T06:04:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-03-03T18:19:00Z"
      },
      "message": "Store mempool min fee state in mempool.dat",
      "tree": {
        "sha": "537e0816fd8ca899b28c8d1c3868e85e22b6df03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/537e0816fd8ca899b28c8d1c3868e85e22b6df03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d34442931e6b6b16893568a4719f447747097e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d34442931e6b6b16893568a4719f447747097e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d34442931e6b6b16893568a4719f447747097e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d34442931e6b6b16893568a4719f447747097e5/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ded01e65aad53dd7620e037700357991476f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ded01e65aad53dd7620e037700357991476f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ded01e65aad53dd7620e037700357991476f16"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 32,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb0e1a207149fd0ee4f4a1d897a93d77e94638cd",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d34442931e6b6b16893568a4719f447747097e5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d34442931e6b6b16893568a4719f447747097e5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1d34442931e6b6b16893568a4719f447747097e5",
        "patch": "@@ -598,6 +598,22 @@ class CTxMemPool\n      *  already in it.  */\n     void CalculateDescendants(txiter it, setEntries &setDescendants);\n \n+    template<typename Stream>\n+    void DumpMinFeeInternal(Stream& s) const {\n+        LOCK(cs);\n+        s << rollingMinimumFeeRate;\n+        s << blockSinceLastRollingFeeBump;\n+        s << lastRollingFeeUpdate;\n+    }\n+\n+    template<typename Stream>\n+    void LoadMinFeeInternal(Stream& s) {\n+        LOCK(cs);\n+        s >> rollingMinimumFeeRate;\n+        s >> blockSinceLastRollingFeeBump;\n+        s >> lastRollingFeeUpdate;\n+    }\n+\n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n       *  The incrementalRelayFee policy variable is used to bound the time it"
      },
      {
        "sha": "8a108fd57a4034f7fcfefb79e68a86d57d357b77",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d34442931e6b6b16893568a4719f447747097e5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d34442931e6b6b16893568a4719f447747097e5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1d34442931e6b6b16893568a4719f447747097e5",
        "patch": "@@ -4559,7 +4559,17 @@ bool LoadMempool(void)\n         std::map<std::string, std::vector<unsigned char>> mapData;\n         file >> mapData;\n \n-        auto it = mapData.find(\"deltas\");\n+        auto it = mapData.find(\"minfee\");\n+        if (it != mapData.end()) {\n+            try {\n+                CDataStream ss(it->second, SER_DISK, CLIENT_VERSION);\n+                mempool.LoadMinFeeInternal(ss);\n+            } catch (const std::exception& e) {\n+                LogPrintf(\"Failed to deserialize mempool %s from disk: %s. Continuing anyway.\\n\", \"minfee\", e.what());\n+            }\n+        }\n+\n+        it = mapData.find(\"deltas\");\n         if (it != mapData.end()) {\n             try {\n                 CDataStream ss(it->second, SER_DISK, CLIENT_VERSION);\n@@ -4677,6 +4687,11 @@ bool DumpMempool(void)\n \n             mapData[\"txs\"] = SerializeToVector(txMapDatas);\n         }\n+        {\n+            CDataStream ss(SER_DISK, CLIENT_VERSION);\n+            mempool.DumpMinFeeInternal(ss);\n+            mapData[\"minfee\"] = std::vector<unsigned char>(ss.begin(), ss.end());\n+        }\n \n         FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat.new\", \"wb\");\n         if (!filestr) {"
      }
    ]
  }
]