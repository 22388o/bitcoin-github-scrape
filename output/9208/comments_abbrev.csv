sdaftuar,2016-11-29T02:05:12Z,"~~I just realized there's a potential issue here with the callbacks for conflicted transactions; in the case where a disconnected block transaction ends up conflicting with some tx in a block on the reorg, the call to ATMP will fail (because some input is spent) but not be reported via SyncTransaction() as a conflicted transaction.~~\n\nEDIT: After some discussion with @morcos I think there's no",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-263455075,263455075,
sdaftuar,2017-01-04T21:05:25Z,"Rebased, and removed WIP tag as this is now ready for review.",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-270486202,270486202,
dcousens,2017-01-04T21:48:30Z,"concept ACK,  will review",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-270496625,270496625,
gmaxwell,2017-01-08T09:08:55Z,Needs rebase. utACK.   ,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-271139397,271139397,
sdaftuar,2017-01-08T15:13:24Z,Rebased,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-271156931,271156931,
ryanofsky,2017-02-28T22:33:30Z,"utACK 37a90f1ad0b57de2ab4294dfa4a97d2e666dd479\n\nPR makes sense, and nothing has changed except a few comments since my last review (for 4d70f47a94cc739e92f7d3f8f4f7b11cf7457ca9).\n\nOne thing I don't understand is why the pruning test needs to change when it sounds like you are saying the disconnect pool memory bound is large enough that losing transactions ""shouldn't practically occur."" Are",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-283182978,283182978,
sdaftuar,2017-03-01T18:34:33Z,"Rebased.\n\n@ryanofsky The changes to pruning.py are because:\n * Policy limits get applied differently than before; we used to ignore some of the chain limits when adding transactions back to the mempool during a reorg (because we wouldn't look for in-mempool descendants until the end).\n * The pruning test is trying to build really big blocks in a number of places, to make the chain big enou",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-283428044,283428044,
sdaftuar,2017-03-07T19:38:41Z,Rebased after #9602.,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-284835087,284835087,
sdaftuar,2017-03-11T02:27:40Z,Rebased again to pick up the `pruning.py` fix from #9972 ,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-285834888,285834888,
sdaftuar,2017-03-13T11:03:42Z,"@sipa Thanks for reviewing (yikes, I think I must have done my second rebase on Friday using an older branch).  All the comments should be addressed in the last two fixup commits; let me know if I should go ahead and squash.",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-286076957,286076957,
morcos,2017-03-13T15:27:42Z,fast review utACK,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-286142016,286142016,
dcousens,2017-03-24T07:05:04Z,Needs rebase?,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-288948732,288948732,
sdaftuar,2017-03-28T19:17:21Z,"First, I rebased https://github.com/sdaftuar/bitcoin/commits/fd-rebased.2 -> https://github.com/sdaftuar/bitcoin/commits/fd-rebased.3, no actual conflicts.\n\nThen I added 4 fixup commits to address the nits mentioned so far.  I also added an assertion that a DisconnectedBlockTransactions object can't be destroyed if it's non-empty...  Not sure how good an idea that is, but I thought it might ca",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-289875652,289875652,
sdaftuar,2017-03-28T19:21:30Z,Squashed all those commits down (https://github.com/sdaftuar/bitcoin/commits/fd-rebased.4 -> https://github.com/bitcoin/bitcoin/pull/9208/commits/5685657564e7a19635529eabea6af829a3a4996c),https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-289876759,289876759,
TheBlueMatt,2017-04-12T22:26:01Z,"utACK 65a4dcc46f1ef942d52d8445cdc4a2ef385c816b, though please squash it with e4a0440fab759a0a3c2d4d03f9bd7463d84dde9a",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-293724921,293724921,
sdaftuar,2017-04-13T02:03:54Z,Squashed 65a4dcc -> 688417b,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-293756387,293756387,
morcos,2017-04-13T15:12:58Z,"utACK 688417b modulo performance nit\n",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-293924519,293924519,
sdaftuar,2017-04-13T15:55:51Z,Squashed 15b46d94b53af6429f808bb47ebc2a40da9dc791 -> 75b072df512442829bf288f82ed8ce0830512763,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-293937004,293937004,
morcos,2017-04-17T17:25:29Z,"utACK 75b072d\n",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-294534382,294534382,
sdaftuar,2017-04-21T12:59:01Z,"Fixed @theuni's nit in ea1b122 (https://github.com/sdaftuar/bitcoin/commits/fd-rebased.7), and squashed  in 2cb9509",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-296183745,296183745,
sdaftuar,2017-05-04T21:12:13Z,Rebased again due to merge conflict in pruning.py,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-299310568,299310568,
sdaftuar,2017-05-12T01:25:09Z,Anything else needed here?,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-300959118,300959118,
TheBlueMatt,2017-05-29T21:26:26Z,re-utACK c1235e3f2dd5b01b63b020d1b8f7283e8badaf09,https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-304733199,304733199,
morcos,2017-05-30T15:20:09Z,"\nre-utACK c1235e3",https://github.com/bitcoin/bitcoin/pull/9208#issuecomment-304912645,304912645,
TheBlueMatt,2017-02-28T19:31:53Z,DRY: Maybe use removeEntry here?,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r103533832,103533832,src/txmempool.h
ryanofsky,2017-03-08T18:15:48Z,"In commit ""Store disconnected block transactions outside mempool during reorg"":\n\nIt looks like the new `MemPoolRemovalReason::REORG` argument for removeRecursive got dropped during the rebase. (Shame that we don't a have test that would catch this, and that the argument is optional to begin with.)\n\n",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r104984128,104984128,src/validation.cpp
sdaftuar,2017-03-11T02:28:03Z,Thanks for catching this!  Fixed.,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105523003,105523003,src/validation.cpp
sipa,2017-03-12T04:53:29Z,Pass the CTransactionRef by reference? That will avoid an atomic inc/dec when copying/destroing the CTransactionRef.,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105548855,105548855,src/txmempool.h
sipa,2017-03-12T05:13:35Z,"`const CTransactionRef&` here as well, or `queuedTx.insert(std::move(tx))` below.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105549132,105549132,src/txmempool.h
sipa,2017-03-12T06:24:26Z,I don't see `MemPoolRemovalReason::REORG` anywhere?,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105550013,105550013,src/validation.cpp
morcos,2017-03-13T15:25:53Z,"nit: Any reason to put `ReacceptToMemoryPool` here and not under `if (fBlocksDisconnected)`?\nIt might make the logic slightly clearer.\n\n",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105688521,105688521,src/validation.cpp
TheBlueMatt,2017-03-13T15:46:49Z,"I dont think this is always true. Callers dont always enforce this (eg ActivateBestChains in net_processing, PreciousBlock from RPC, etc,e tc) and callees dont either (eg DisconnectBlock's UndoReadFromDisk doesnt appear to generate an AbortNode). These might actually also be bugs, but I think you're introducing a stronger assumption than previously here.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105694341,105694341,src/validation.cpp
TheBlueMatt,2017-03-13T16:10:48Z,"Hmm, thats a super confusing API now....maybe either pass in a pointer to a DisconnectedBlockTransactions as both fBare and the pool?",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105700916,105700916,src/validation.cpp
TheBlueMatt,2017-03-13T16:11:28Z,"nit: Yeesh, isnt that a bit high? Maybe like 10MB - if we reorg something larger than 2/3 blocks throwing away tons of txn is fine by me.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r105701085,105701085,src/validation.h
sdaftuar,2017-03-28T19:16:01Z,Fixed,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108512804,108512804,src/validation.cpp
sdaftuar,2017-03-28T19:16:05Z,"I'm going to leave this, since `removeEntry` takes an iterator into a different multi_index index, and I'd rather removeForBlock be as fast as possible.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108512817,108512817,src/txmempool.h
sdaftuar,2017-03-28T19:16:20Z,"Fixed.  I do think that a failure in DisconnectTip() should always cause shutdown, as we can no longer be sure we're in consensus, but no need to worry about that here.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108512872,108512872,src/validation.cpp
sdaftuar,2017-03-28T19:16:24Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108512887,108512887,src/validation.cpp
sdaftuar,2017-03-28T19:16:28Z,Dropping it to 20 (segwit blocks can be bigger).,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108512900,108512900,src/validation.h
TheBlueMatt,2017-03-30T00:54:46Z,"We'll now assert() on L2445 when we return false if ConnectTip fails, instead of gracefully AbortNode()ing.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108821343,108821343,src/validation.cpp
sdaftuar,2017-03-30T18:07:42Z,"I don't know what the best answer here is.  I could call ReacceptToMemoryPool(), but doing so after we've invoked AbortNode() seems either annoying (trying to lookup UTXOs from disk when we're potentially having disk trouble seems bad), or potentially problematic (is it okay to trigger SyncTransaction() callbacks when our on-disk state is potentially corrupt?). \n\nOne idea: check to see if fShu",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r108997062,108997062,src/validation.cpp
TheBlueMatt,2017-03-30T20:31:32Z,"For posterity: meeting conclusion, broadly, appeared to be that we should move forward with AbortNode() eventually migrating towards being used only for non-critical errors that result in a ""we should shutdown soonish"", and critical errors such as on-disk corruption should be an assert(false), ie that we should move forward here ensuring that the mempool is consistent when we return.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r109029835,109029835,src/validation.cpp
sdaftuar,2017-03-30T21:13:47Z,"@TheBlueMatt I pushed up a commit that addresses the edge-cases better, I think -- it now will just erase from the mempool to become consistent again.  Also patches up the missing `mempool.removeForReorg` calls in a couple places, and moves all the reorg consistency handling into one function to get rid of some code duplication.",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r109039071,109039071,src/validation.cpp
morcos,2017-04-13T15:05:31Z,probably should shortcut to skip this loop if disconnectpool is empty which is the common case in connecttip,https://github.com/bitcoin/bitcoin/pull/9208#discussion_r111411972,111411972,src/txmempool.h
sdaftuar,2017-04-13T15:54:07Z,"Agreed, fixed in 15b46d94b53af6429f808bb47ebc2a40da9dc791",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r111423418,111423418,src/txmempool.h
theuni,2017-04-20T17:12:11Z,"Watch the null deref:\n```c++\nreturn p ? memusage::DynamicUsage(p) + RecursiveDynamicUsage(*p) : 0;\n```",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r112508318,112508318,src/core_memusage.h
sdaftuar,2017-04-21T12:52:00Z,"Thanks, fixed in ea1b122",https://github.com/bitcoin/bitcoin/pull/9208#discussion_r112680054,112680054,src/core_memusage.h
