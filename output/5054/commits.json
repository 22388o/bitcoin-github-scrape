[
  {
    "sha": "8a87099fa95e113b85e4a64659b99909cca9d445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTg3MDk5ZmE5NWUxMTNiODVlNGE2NDY1OWI5OTkwOWNjYTlkNDQ1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-28T05:00:02Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-08T00:29:38Z"
      },
      "message": "Make CTransaction(const CMutableTransaction &tx) explicit",
      "tree": {
        "sha": "beafd57742366d611f08f73da09eab799993fd84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beafd57742366d611f08f73da09eab799993fd84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a87099fa95e113b85e4a64659b99909cca9d445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a87099fa95e113b85e4a64659b99909cca9d445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a87099fa95e113b85e4a64659b99909cca9d445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a87099fa95e113b85e4a64659b99909cca9d445/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c6cbff0e52d4b69fd823426341a4d62d29b2c16"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 140,
      "deletions": 86
    },
    "files": [
      {
        "sha": "60da413235e5ab16ce7d6dd8ab08dba41fc92ac3",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -327,13 +327,14 @@ vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n {\n     int nHashType = SIGHASH_ALL;\n+    const CTransaction txConst(tx);\n \n     if (flagStr.size() > 0)\n         if (!findSighashFlags(nHashType, flagStr))\n             throw runtime_error(\"unknown sighash flag/sign option\");\n \n     vector<CTransaction> txVariants;\n-    txVariants.push_back(tx);\n+    txVariants.push_back(txConst);\n \n     // mergedTx will end up with all the signatures; it\n     // starts as a clone of the raw tx:\n@@ -433,9 +434,9 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            txin.scriptSig = CombineSignatures(prevPubKey, txConst, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txConst, i)))\n             fComplete = false;\n     }\n \n@@ -572,7 +573,8 @@ static int CommandLineRawTx(int argc, char* argv[])\n             MutateTx(tx, key, value);\n         }\n \n-        OutputTx(tx);\n+        const CTransaction txConst(tx);\n+        OutputTx(txConst);\n     }\n \n     catch (boost::thread_interrupted) {"
      },
      {
        "sha": "29e41e1d3db62c9fb728555df0210b85b982a436",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -82,7 +82,7 @@ class CMainParams : public CChainParams {\n         txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n         txNew.vout[0].nValue = 50 * COIN;\n         txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-        genesis.vtx.push_back(txNew);\n+        genesis.vtx.push_back(CTransaction(txNew));\n         genesis.hashPrevBlock = 0;\n         genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n         genesis.nVersion = 1;"
      },
      {
        "sha": "af52eb87843cd6ac8067821c968f94638699c03e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -251,7 +251,7 @@ class CTransaction\n     CTransaction();\n \n     /** Convert a CMutableTransaction into a CTransaction. */\n-    CTransaction(const CMutableTransaction &tx);\n+    explicit CTransaction(const CMutableTransaction &tx);\n \n     CTransaction& operator=(const CTransaction& tx);\n "
      },
      {
        "sha": "9d7cd9f29eedcfe410835c00ea8a6b64d6d8c7cb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -275,6 +275,11 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64_t nBlockTime = 0);\n \n+inline bool IsFinalTx(CMutableTransaction& tx, int nBlockHeight = 0, int64_t nBlockTime = 0)\n+{\n+    return IsFinalTx(CTransaction(tx), nBlockHeight, nBlockTime);\n+}\n+\n /** Undo information for a CBlock */\n class CBlockUndo\n {"
      },
      {
        "sha": "5650101d1582ad17d65e312b715166ef5e1c1112",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -303,7 +303,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n         txNew.vin[0].scriptSig = CScript() << OP_0 << OP_0;\n-        pblock->vtx[0] = txNew;\n+        pblock->vtx[0] = CTransaction(txNew);\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n@@ -340,7 +340,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n-    pblock->vtx[0] = txCoinbase;\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "d233a9615889f2d9f5751ee89cf66e180f08d71a",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -376,7 +376,8 @@ Value createrawtransaction(const Array& params, bool fHelp)\n         rawTx.vout.push_back(out);\n     }\n \n-    return EncodeHexTx(rawTx);\n+    CTransaction tx(rawTx);\n+    return EncodeHexTx(tx);\n }\n \n Value decoderawtransaction(const Array& params, bool fHelp)\n@@ -671,6 +672,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n \n+    CTransaction tx(mergedTx);\n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n         CTxIn& txin = mergedTx.vin[i];\n@@ -688,14 +690,14 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            txin.scriptSig = CombineSignatures(prevPubKey, tx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(tx, i)))\n             fComplete = false;\n     }\n \n     Object result;\n-    result.push_back(Pair(\"hex\", EncodeHexTx(mergedTx)));\n+    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n     result.push_back(Pair(\"complete\", fComplete));\n \n     return result;"
      },
      {
        "sha": "328c44f2f48a453782c0db4c21ba57ebab692216",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -91,10 +91,11 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n     return false;\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& _txTo, unsigned int nIn, int nHashType)\n {\n-    assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n+    assert(nIn < _txTo.vin.size());\n+    CTxIn& txin = _txTo.vin[nIn];\n+    CTransaction txTo(_txTo);\n \n     // Leave out the signature from the hash, since a signature can't sign itself.\n     // The checksig op will also drop the signatures from its hash.\n@@ -166,6 +167,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     map<valtype, valtype> sigs;\n+    CTransaction tx(txTo);\n     BOOST_FOREACH(const valtype& sig, allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n@@ -174,7 +176,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (SignatureChecker(tx, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "bb00391d6a76a01b17ad488f67f257b76f90393f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -34,6 +34,12 @@ struct COrphanTx {\n extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n \n+bool AddOrphanTx(const CMutableTransaction& txIn, NodeId peer)\n+{\n+    const CTransaction tx(txIn);\n+    return AddOrphanTx(tx, peer);\n+}\n+\n CService ip(uint32_t i)\n {\n     struct in_addr s;"
      },
      {
        "sha": "7f1d930279160574d530d1b1b4713635b4999205",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -130,7 +130,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -140,15 +140,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -159,7 +159,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -172,12 +172,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(script.GetID());\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -188,10 +188,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -217,7 +217,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n \n     // time locked\n@@ -231,7 +231,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(CTransaction(tx2), 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));"
      },
      {
        "sha": "a2414ebea3beebed504c4de18139466a8dce8f1f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -25,8 +25,7 @@ typedef vector<unsigned char> valtype;\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n \n-CScript\n-sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n+CScript sign_multisig(CScript scriptPubKey, vector<CKey> keys, const CTransaction& transaction, int whichIn)\n {\n     uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n \n@@ -79,53 +78,58 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     CScript s;\n \n     // Test a AND b:\n+    const CTransaction txAnd(txTo[0]);\n+    const SignatureChecker checkerAnd(txAnd, 0);\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n-    s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)));\n+    s = sign_multisig(a_and_b, keys, txAnd, 0);\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, checkerAnd));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n-        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 1: %d\", i));\n+        s = sign_multisig(a_and_b, keys, txAnd, 0);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, checkerAnd), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n-        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 2: %d\", i));\n+        s = sign_multisig(a_and_b, keys, txAnd, 0);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, checkerAnd), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n+    const CTransaction txOr(txTo[1]);\n+    const SignatureChecker checkerOr(txOr, 0);\n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n-        s = sign_multisig(a_or_b, keys, txTo[1], 0);\n+        s = sign_multisig(a_or_b, keys, txOr, 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, checkerOr), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, checkerOr), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, checkerOr));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n-\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, checkerOr));\n \n+    const CTransaction txEscrow(txTo[2]);\n+    const SignatureChecker checkerEscrow(txEscrow, 0);\n     for (int i = 0; i < 4; i++)\n         for (int j = 0; j < 4; j++)\n         {\n             keys.clear();\n             keys += key[i],key[j];\n-            s = sign_multisig(escrow, keys, txTo[2], 0);\n+            s = sign_multisig(escrow, keys, txEscrow, 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, checkerEscrow), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, checkerEscrow), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n \n@@ -298,9 +302,10 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n         txTo[i].vout[0].nValue = 1;\n     }\n \n+    const CTransaction txFromConst(txFrom);\n     for (int i = 0; i < 3; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFromConst, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n     }\n }\n "
      },
      {
        "sha": "3065a7aca025a26c4a0add153981d39e512b55aa",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 13,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -42,9 +42,20 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0));\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(CTransaction(txTo), 0));\n }\n \n+inline bool AreInputsStandard(const CMutableTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    const CTransaction txConst(tx);\n+    return AreInputsStandard(txConst, mapInputs);\n+}\n+\n+inline unsigned int GetP2SHSigOpCount(const CMutableTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    const CTransaction txConst(tx);\n+    return GetP2SHSigOpCount(txConst, inputs);\n+}\n \n BOOST_AUTO_TEST_SUITE(script_P2SH_tests)\n \n@@ -88,7 +99,8 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    const CTransaction txFromConst(txFrom);\n+    BOOST_CHECK(IsStandardTx(txFromConst, reason));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -104,7 +116,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n     for (int i = 0; i < 8; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFromConst, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n     }\n     // All of the above should be OK, and the txTos have valid signatures\n     // Check to make sure signature verification fails if we use the wrong ScriptSig:\n@@ -113,7 +125,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n+            bool sigOK = CScriptCheck(CCoins(txFromConst, 0), CTransaction(txTo[i]), 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else\n@@ -181,7 +193,8 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    const CTransaction txFromConst(txFrom);\n+    BOOST_CHECK(IsStandardTx(txFromConst, reason));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -198,8 +211,9 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n     for (int i = 0; i < 4; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFromConst, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        const CTransaction txConst(txTo[i]);\n+        BOOST_CHECK_MESSAGE(IsStandardTx(txConst, reason), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -312,8 +326,8 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n-\n-    coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n+    const CTransaction txFromConst(txFrom);\n+    coins.SetCoins(txFrom.GetHash(), CCoins(txFromConst, 0));\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);\n@@ -325,18 +339,19 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         txTo.vin[i].prevout.n = i;\n         txTo.vin[i].prevout.hash = txFrom.GetHash();\n     }\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 0));\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 1));\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2));\n+    BOOST_CHECK(SignSignature(keystore, txFromConst, txTo, 0));\n+    BOOST_CHECK(SignSignature(keystore, txFromConst, txTo, 1));\n+    BOOST_CHECK(SignSignature(keystore, txFromConst, txTo, 2));\n     // SignSignature doesn't know how to sign these. We're\n     // not testing validating signatures, so just create\n     // dummy signatures that DO include the correct P2SH scripts:\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n+    const CTransaction txConst(txTo);\n     BOOST_CHECK(::AreInputsStandard(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n-    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n+    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txConst, coins), 22U);\n \n     // Make sure adding crap to the scriptSigs makes them non-standard:\n     for (int i = 0; i < 3; i++)"
      },
      {
        "sha": "da77f05f7587a462369ffcf571a811e85c20c577",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 17,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -70,7 +70,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+CTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n {\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n@@ -84,7 +84,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     txSpend.vout[0].scriptPubKey = CScript();\n     txSpend.vout[0].nValue = 0;\n \n-    return txSpend;\n+    return CTransaction(txSpend);\n }\n \n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n@@ -159,9 +159,9 @@ class TestBuilder\n     TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n     {\n         if (P2SH) {\n-            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << redeemScript.GetID() << OP_EQUAL);\n+            creditTx = CTransaction(BuildCreditingTransaction(CScript() << OP_HASH160 << redeemScript.GetID() << OP_EQUAL));\n         } else {\n-            creditTx = BuildCreditingTransaction(redeemScript);\n+            creditTx = CTransaction(BuildCreditingTransaction(redeemScript));\n         }\n         spendTx = BuildSpendingTransaction(CScript(), creditTx);\n     }\n@@ -186,7 +186,7 @@ class TestBuilder\n \n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        uint256 hash = SignatureHash(scriptPubKey, CTransaction(spendTx), 0, nHashType);\n         std::vector<unsigned char> vchSig, r, s;\n         do {\n             key.Sign(hash, vchSig, lenS <= 32);\n@@ -522,11 +522,13 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     scriptPubKey12 << OP_1 << key1.GetPubKey() << key2.GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom12 = BuildCreditingTransaction(scriptPubKey12);\n-    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n+    CMutableTransaction txTo12Mutable = BuildSpendingTransaction(CScript(), txFrom12);\n+    CTransaction txTo12 = CTransaction(txTo12Mutable);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n     BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n-    txTo12.vout[0].nValue = 2;\n+    txTo12Mutable.vout[0].nValue = 2;\n+    txTo12 = CTransaction(txTo12Mutable);\n     BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n@@ -548,7 +550,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     scriptPubKey23 << OP_2 << key1.GetPubKey() << key2.GetPubKey() << key3.GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n-    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n+    CTransaction txTo23 = CTransaction(BuildSpendingTransaction(CScript(), txFrom23));\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n@@ -610,38 +612,41 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         keystore.AddKey(key);\n     }\n \n-    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n-    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), txFrom);\n-    CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n-    CScript& scriptSig = txTo.vin[0].scriptSig;\n+    CMutableTransaction txFromMutable = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n+    CTransaction txFrom = CTransaction(txFromMutable);\n+    CMutableTransaction txToMutable = BuildSpendingTransaction(CScript(), txFromMutable);\n+    CTransaction txTo = CTransaction(txToMutable);\n+    CScript& scriptPubKey = txFromMutable.vout[0].scriptPubKey;\n+    CScript& scriptSig = txToMutable.vin[0].scriptSig;\n \n     CScript empty;\n     CScript combined = CombineSignatures(scriptPubKey, txTo, 0, empty, empty);\n     BOOST_CHECK(combined.empty());\n \n     // Single signature case:\n-    SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n+    SignSignature(keystore, txFrom, txToMutable, 0); // changes scriptSig\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n-    SignSignature(keystore, txFrom, txTo, 0);\n+    SignSignature(keystore, txFrom, txToMutable, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << keys[0].GetPubKey() << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(pkSingle.GetID());\n-    SignSignature(keystore, txFrom, txTo, 0);\n+    txFrom = CTransaction(txFromMutable);\n+    SignSignature(keystore, txFrom, txToMutable, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     scriptSigCopy = scriptSig;\n-    SignSignature(keystore, txFrom, txTo, 0);\n+    SignSignature(keystore, txFrom, txToMutable, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n@@ -653,8 +658,9 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n+    txFrom = CTransaction(txFromMutable);\n     keystore.AddCScript(scriptPubKey);\n-    SignSignature(keystore, txFrom, txTo, 0);\n+    SignSignature(keystore, txFrom, txToMutable, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);"
      },
      {
        "sha": "f4058fd5cb71b98413b0a149707dc28c7eb9be43",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -22,14 +22,13 @@ using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n \n // Old script.cpp SignatureHash function\n-uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 static SignatureHashOld(CScript scriptCode, CMutableTransaction txTmp, unsigned int nIn, int nHashType)\n {\n-    if (nIn >= txTo.vin.size())\n+    if (nIn >= txTmp.vin.size())\n     {\n         printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n         return 1;\n     }\n-    CMutableTransaction txTmp(txTo);\n \n     // In case concatenating two scripts ends up with two codeseparators,\n     // or an extra one at the end, this prevents all those possible incompatibilities.\n@@ -139,7 +138,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n-        sh = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, CTransaction(txTo), nIn, nHashType);\n         #if defined(PRINT_SIGHASH_JSON)\n         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n         ss << txTo;"
      },
      {
        "sha": "d8c4f7c21053115927e2d9581806a2a31d930857",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -34,6 +34,18 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY);\n \n+inline bool AreInputsStandard(const CMutableTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    const CTransaction txConst(tx);\n+    return AreInputsStandard(txConst, mapInputs);\n+}\n+\n+inline bool IsStandardTx(const CMutableTransaction& tx, string& reason)\n+{\n+    const CTransaction txConst(tx);\n+    return IsStandardTx(txConst, reason);\n+}\n+\n unsigned int ParseScriptFlags(string strFlags)\n {\n     if (strFlags.empty()) {\n@@ -228,11 +240,11 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(CheckTransaction(CTransaction(tx), state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!CheckTransaction(CTransaction(tx), state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //\n@@ -261,14 +273,14 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n     dummyTransactions[0].vout[0].scriptPubKey << key[0].GetPubKey() << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50*CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << key[1].GetPubKey() << OP_CHECKSIG;\n-    coinsRet.SetCoins(dummyTransactions[0].GetHash(), CCoins(dummyTransactions[0], 0));\n+    coinsRet.SetCoins(dummyTransactions[0].GetHash(), CCoins(CTransaction(dummyTransactions[0]), 0));\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n     dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n     dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n+    coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(CTransaction(dummyTransactions[1]), 0));\n \n     return dummyTransactions;\n }\n@@ -296,7 +308,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].scriptPubKey << OP_1;\n \n     BOOST_CHECK(AreInputsStandard(t1, coins));\n-    BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n+    BOOST_CHECK_EQUAL(coins.GetValueIn(CTransaction(t1)), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;"
      },
      {
        "sha": "b39e3ef2ab80a907402d07d5b793eeae95d67f17",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a87099fa95e113b85e4a64659b99909cca9d445/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=8a87099fa95e113b85e4a64659b99909cca9d445",
        "patch": "@@ -40,7 +40,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n+    CWalletTx* wtx = new CWalletTx(&wallet, CTransaction(tx));\n     if (fIsFromMe)\n     {\n         wtx->fDebitCached = true;"
      }
    ]
  }
]