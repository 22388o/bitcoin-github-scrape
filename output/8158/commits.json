[
  {
    "sha": "f717be3c1ed74de20ae635a2169b6f62534836b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzE3YmUzYzFlZDc0ZGUyMGFlNjM1YTIxNjliNmY2MjUzNDgzNmI5",
    "commit": {
      "author": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-03-29T13:36:41Z"
      },
      "committer": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-06-06T15:47:02Z"
      },
      "message": "[Wallet] Simplified calls to retrieve credit and balance",
      "tree": {
        "sha": "f2280c133cef750945b4ee9afd4dce9867ee1f95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2280c133cef750945b4ee9afd4dce9867ee1f95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f717be3c1ed74de20ae635a2169b6f62534836b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f717be3c1ed74de20ae635a2169b6f62534836b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f717be3c1ed74de20ae635a2169b6f62534836b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f717be3c1ed74de20ae635a2169b6f62534836b9/comments",
    "author": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77b637f20e8cb91cf007bf416b603ca362385cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b637f20e8cb91cf007bf416b603ca362385cdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77b637f20e8cb91cf007bf416b603ca362385cdb"
      }
    ],
    "stats": {
      "total": 174,
      "additions": 50,
      "deletions": 124
    },
    "files": [
      {
        "sha": "cca46367232b6f04a7269871ebec69409fd7b5e8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f717be3c1ed74de20ae635a2169b6f62534836b9/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f717be3c1ed74de20ae635a2169b6f62534836b9/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f717be3c1ed74de20ae635a2169b6f62534836b9",
        "patch": "@@ -89,17 +89,17 @@ bool WalletModel::haveWatchOnly() const\n \n CAmount WalletModel::getWatchBalance() const\n {\n-    return wallet->GetWatchOnlyBalance();\n+    return wallet->GetBalance(ISMINE_WATCH_ONLY);\n }\n \n CAmount WalletModel::getWatchUnconfirmedBalance() const\n {\n-    return wallet->GetUnconfirmedWatchOnlyBalance();\n+    return wallet->GetUnconfirmedBalance(ISMINE_WATCH_ONLY);\n }\n \n CAmount WalletModel::getWatchImmatureBalance() const\n {\n-    return wallet->GetImmatureWatchOnlyBalance();\n+    return wallet->GetImmatureBalance(ISMINE_WATCH_ONLY);\n }\n \n void WalletModel::updateStatus()"
      },
      {
        "sha": "172491fa91111aa3e65aed4b7aea28e31375903d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 111,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f717be3c1ed74de20ae635a2169b6f62534836b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f717be3c1ed74de20ae635a2169b6f62534836b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f717be3c1ed74de20ae635a2169b6f62534836b9",
        "patch": "@@ -1362,65 +1362,32 @@ CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n     return credit;\n }\n \n-CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+CAmount CWalletTx::GetImmatureCredit(const isminefilter &filter, bool fUseCache) const\n {\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-    {\n-        if (fUseCache && fImmatureCreditCached)\n-            return nImmatureCreditCached;\n-        nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-        fImmatureCreditCached = true;\n-        return nImmatureCreditCached;\n-    }\n-\n-    return 0;\n-}\n-\n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n-{\n-    if (pwallet == 0)\n-        return 0;\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain()) {\n+        CAmount credit = 0;\n+        if (filter & ISMINE_SPENDABLE) {\n+            if (fUseCache && fImmatureCreditCached)\n+                return nImmatureCreditCached;\n \n-    // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-        return 0;\n+            nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+            fImmatureCreditCached = true;\n+            credit = nImmatureCreditCached;\n+        } else if (filter & ISMINE_WATCH_ONLY) {\n+            if (fUseCache && fImmatureWatchCreditCached)\n+                return nImmatureWatchCreditCached;\n \n-    if (fUseCache && fAvailableCreditCached)\n-        return nAvailableCreditCached;\n-\n-    CAmount nCredit = 0;\n-    uint256 hashTx = GetHash();\n-    for (unsigned int i = 0; i < vout.size(); i++)\n-    {\n-        if (!pwallet->IsSpent(hashTx, i))\n-        {\n-            const CTxOut &txout = vout[i];\n-            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+            nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+            fImmatureWatchCreditCached = true;\n+            credit = nImmatureWatchCreditCached;\n         }\n-    }\n-\n-    nAvailableCreditCached = nCredit;\n-    fAvailableCreditCached = true;\n-    return nCredit;\n-}\n-\n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n-{\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-    {\n-        if (fUseCache && fImmatureWatchCreditCached)\n-            return nImmatureWatchCreditCached;\n-        nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-        fImmatureWatchCreditCached = true;\n-        return nImmatureWatchCreditCached;\n+        return credit;\n     }\n \n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetAvailableCredit(const isminefilter &filter, bool fUseCache) const\n {\n     if (pwallet == 0)\n         return 0;\n@@ -1429,23 +1396,32 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n     if (IsCoinBase() && GetBlocksToMaturity() > 0)\n         return 0;\n \n-    if (fUseCache && fAvailableWatchCreditCached)\n-        return nAvailableWatchCreditCached;\n+    if (fUseCache) {\n+        if (filter & ISMINE_SPENDABLE && fAvailableCreditCached)\n+            return nAvailableCreditCached;\n+        else if (filter & ISMINE_WATCH_ONLY && fAvailableWatchCreditCached)\n+            return nAvailableWatchCreditCached;\n+    }\n \n     CAmount nCredit = 0;\n-    for (unsigned int i = 0; i < vout.size(); i++)\n-    {\n-        if (!pwallet->IsSpent(GetHash(), i))\n-        {\n-            const CTxOut &txout = vout[i];\n-            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n+    uint256 hashTx = GetHash();\n+    for (unsigned int i = 0; i < vout.size(); i++) {\n+        if (!pwallet->IsSpent(hashTx, i)) {\n+            const CTxOut& txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n                 throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n         }\n     }\n \n-    nAvailableWatchCreditCached = nCredit;\n-    fAvailableWatchCreditCached = true;\n+    if (filter & ISMINE_SPENDABLE) {\n+        nAvailableCreditCached = nCredit;\n+        fAvailableCreditCached = true;\n+    } else if (filter & ISMINE_WATCH_ONLY) {\n+        nAvailableWatchCreditCached = nCredit;\n+        fAvailableWatchCreditCached = true;\n+    }\n+\n     return nCredit;\n }\n \n@@ -1565,52 +1541,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)\n  */\n \n \n-CAmount CWallet::GetBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-        {\n-            const CWalletTx* pcoin = &(*it).second;\n-            if (pcoin->IsTrusted())\n-                nTotal += pcoin->GetAvailableCredit();\n-        }\n-    }\n-\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetUnconfirmedBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-        {\n-            const CWalletTx* pcoin = &(*it).second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit();\n-        }\n-    }\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetImmatureBalance() const\n-{\n-    CAmount nTotal = 0;\n-    {\n-        LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-        {\n-            const CWalletTx* pcoin = &(*it).second;\n-            nTotal += pcoin->GetImmatureCredit();\n-        }\n-    }\n-    return nTotal;\n-}\n-\n-CAmount CWallet::GetWatchOnlyBalance() const\n+CAmount CWallet::GetBalance(const isminefilter &filter) const\n {\n     CAmount nTotal = 0;\n     {\n@@ -1619,14 +1550,14 @@ CAmount CWallet::GetWatchOnlyBalance() const\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (pcoin->IsTrusted())\n-                nTotal += pcoin->GetAvailableWatchOnlyCredit();\n+                nTotal += pcoin->GetAvailableCredit(filter);\n         }\n     }\n \n     return nTotal;\n }\n \n-CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n+CAmount CWallet::GetUnconfirmedBalance(const isminefilter &filter) const\n {\n     CAmount nTotal = 0;\n     {\n@@ -1635,21 +1566,21 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableWatchOnlyCredit();\n+                nTotal += pcoin->GetAvailableCredit(filter);\n         }\n     }\n     return nTotal;\n }\n \n-CAmount CWallet::GetImmatureWatchOnlyBalance() const\n+CAmount CWallet::GetImmatureBalance(const isminefilter &filter) const\n {\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            nTotal += pcoin->GetImmatureWatchOnlyCredit();\n+            nTotal += pcoin->GetImmatureCredit(filter);\n         }\n     }\n     return nTotal;"
      },
      {
        "sha": "0b54fdd6d268b4da3410c9dba909f699e9520a7c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f717be3c1ed74de20ae635a2169b6f62534836b9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f717be3c1ed74de20ae635a2169b6f62534836b9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f717be3c1ed74de20ae635a2169b6f62534836b9",
        "patch": "@@ -371,10 +371,8 @@ class CWalletTx : public CMerkleTx\n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetImmatureCredit(const isminefilter& filter = ISMINE_SPENDABLE, bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(const isminefilter& filter = ISMINE_SPENDABLE, bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n@@ -729,12 +727,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime);\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime);\n-    CAmount GetBalance() const;\n-    CAmount GetUnconfirmedBalance() const;\n-    CAmount GetImmatureBalance() const;\n-    CAmount GetWatchOnlyBalance() const;\n-    CAmount GetUnconfirmedWatchOnlyBalance() const;\n-    CAmount GetImmatureWatchOnlyBalance() const;\n+    CAmount GetBalance(const isminefilter& filter = ISMINE_SPENDABLE) const;\n+    CAmount GetUnconfirmedBalance(const isminefilter& filter = ISMINE_SPENDABLE) const;\n+    CAmount GetImmatureBalance(const isminefilter& filter = ISMINE_SPENDABLE) const;\n \n     /**\n      * Insert additional inputs into the transaction by"
      }
    ]
  }
]