[
  {
    "sha": "0ab4c3b27265401c59e40adc494041927dc9dbe3",
    "node_id": "C_kwDOABII59oAKDBhYjRjM2IyNzI2NTQwMWM1OWU0MGFkYzQ5NDA0MTkyN2RjOWRiZTM",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T23:20:52Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-30T09:36:25Z"
      },
      "message": "Return false on corrupt tx rather than asserting\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>\nCo-authored-by: Andrew Chow <achow101-github@achow101.com>",
      "tree": {
        "sha": "c34aac70aa716d713b8ef65d46d62dc5391af95e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c34aac70aa716d713b8ef65d46d62dc5391af95e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ab4c3b27265401c59e40adc494041927dc9dbe3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab4c3b27265401c59e40adc494041927dc9dbe3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ab4c3b27265401c59e40adc494041927dc9dbe3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab4c3b27265401c59e40adc494041927dc9dbe3/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccc4b9125ae4e2d45979137507c63684c373bb92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc4b9125ae4e2d45979137507c63684c373bb92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc4b9125ae4e2d45979137507c63684c373bb92"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "aa626283eb2787969a071e374430faa5894272c8",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ab4c3b27265401c59e40adc494041927dc9dbe3/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ab4c3b27265401c59e40adc494041927dc9dbe3/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0ab4c3b27265401c59e40adc494041927dc9dbe3",
        "patch": "@@ -311,6 +311,7 @@ class CWalletScanState {\n     std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n     std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n     std::map<uint160, CHDChain> m_hd_chains;\n+    bool tx_corrupt{false};\n \n     CWalletScanState() {\n     }\n@@ -345,7 +346,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             // LoadToWallet call below creates a new CWalletTx that fill_wtx\n             // callback fills with transaction metadata.\n             auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                assert(new_tx);\n+                if(!new_tx) {\n+                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                    // rescanning.\n+                    wss.tx_corrupt = true;\n+                    return false;\n+                }\n                 ssValue >> wtx;\n                 if (wtx.GetHash() != hash)\n                     return false;\n@@ -818,6 +825,11 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 } else if (strType == DBKeys::FLAGS) {\n                     // reading the wallet flags can only fail if unknown flags are present\n                     result = DBErrors::TOO_NEW;\n+                } else if (wss.tx_corrupt) {\n+                    pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\n+                    // Set tx_corrupt back to false so that the error is only printed once (per corrupt tx)\n+                    wss.tx_corrupt = false;\n+                    result = DBErrors::CORRUPT;\n                 } else {\n                     // Leave other errors alone, if we try to fix them we might make things worse.\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong."
      }
    ]
  }
]