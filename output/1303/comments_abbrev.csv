Diapolo,2012-05-14T20:12:44Z,"blkmeta.dat contains settings, options and all that stuff, right?\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5700779,5700779,
jgarzik,2012-05-14T20:32:24Z,blkmeta.dat mostly contains random singleton datums like hashBestChain or bnBestInvalidWork\n,https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5701266,5701266,
jgarzik,2012-05-14T22:16:12Z,"Updated patch order, dramatically shrinking the diff.\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5703668,5703668,
luke-jr,2012-05-19T01:34:14Z,"Breaks Bitcoin-Qt:\n\n```\nsrc/qt/optionsmodel.cpp: In member function ‘virtual QVariant OptionsModel::data(const QModelIndex&, int) const’:\nsrc/qt/optionsmodel.cpp:131:29: error: ‘fDetachDB’ was not declared in this scope\nsrc/qt/optionsmodel.cpp: In member function ‘virtual bool OptionsModel::setData(const QModelIndex&, const QVariant&, int)’:\nsrc/qt/optionsmodel.cpp:218:13: error: ‘fDetachDB’",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5798732,5798732,
luke-jr,2012-05-19T01:49:45Z,eca20e7c4c263cb14f1d11e74fc362daca22fd42 is the first bad commit\n,https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5798806,5798806,
jgarzik,2012-05-19T05:28:09Z,fixed\n,https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5799558,5799558,
luke-jr,2012-05-19T21:54:34Z,"First run, I am prompted to upgrade my database. debug.log fills with lines like this:\n\n```\nProcessBlock: ORPHAN BLOCK, prev=*\n```\n\nImmediately afterward, Bitcoin-Qt crashes:\n\n```\nEXCEPTION: NSt8ios_base7failureE       \nCDataStream::read() : end of data       \n```\n\ngit bisect blames a commit between aa79af8..jgarzik/blockindex\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5805043,5805043,
luke-jr,2012-05-19T22:09:26Z,"```\n#1  0x0811cbf6 in CDataStream::setstate (this=0xffffb92c, bits=4, psz=0x837c724 ""CDataStream::read() : end of data"")\n    at src/serialize.h:908\n#2  0x0811ccad in CDataStream::read (this=0xffffb92c, pch=0xffffb8cc """", nSize=32) at src/serialize.h:936\n#3  0x08148428 in base_uint<256u>::Unserialize<CDataStream> (this=0xffffb8cc, s=..., nType=2, nVersion=69900)\n    at src/uint256.h:374\n#4  0",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5805143,5805143,
luke-jr,2012-05-20T05:25:04Z,Fixed in latest commits.\n,https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5806765,5806765,
jgarzik,2012-05-20T17:39:51Z,"Commit status notes:\n\nNote 1) the base read/write logic works.  you can run a peer node stably with this.  shut it down, restart, etc.\n\nNote 2) there is a strange behavior, where a single record appears during a read-all-records query of a hash database (LoadBlockIndex), which causes CDataStream to throw an error during deserialize.  the error output, created by commit 183e670, is\n\n```\n CBl",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5810627,5810627,
sipa,2012-05-20T18:30:43Z,"For reference: the problem with the stuck chain is probably due to incorrectly isolating blockchain modifications in transactions. This would only cause problems when a block fails to connect to the main chain. When downloading from the network, one does not receive older stales, but LoadExternalBlockFile does import these. The imported file seems to contain a block with an invalid BIP16 transacti",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5811015,5811015,
jgarzik,2012-05-20T20:08:48Z,Issue 5 fixed.  Thanks to @sipa for noticing the probable bug.\n,https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5811829,5811829,
jgarzik,2012-05-20T20:54:59Z,"db_stat output, after loading 180,953 blocks: http://pastebin.com/LEw3PQbL\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5812174,5812174,
jgarzik,2012-05-20T22:39:35Z,"db_stat output, after loading 180,960 blocks the old way (blkindex.dat): http://pastebin.com/9DhQDCFc\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5813053,5813053,
jgarzik,2012-05-23T06:05:15Z,"Merged several commits into one big one, and then refactored a bit into three pieces:\n1. Upstream-ready refactoring.\n2. Split CTxDB into three pieces, blkhash.dat, txhash.dat and blkmeta.dat.  Databases remain DB_BTREE at this point.\n3. Switch txhash.dat and blkhash.dat to DB_HASH.\n\nThis arrangement permits easier testing of the database split itself (still btree) versus hash.\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5865800,5865800,
jgarzik,2012-05-23T06:31:18Z,"db_stat output, with 3way split using DB_BTREE: http://pastebin.com/v9nZ6SCb\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-5866083,5866083,
sipa,2012-06-14T15:57:04Z,"I think it would make sense to keep a tree-based index for the block header database, to allow looking up a block prefix quickly. In #1426 the idea rose to use the lower bytes as identifier instead of the higher ones. Maybe it makes sense to do a byteswap on the block header keys, to allow a lookup on those?\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-6332684,6332684,
jgarzik,2012-06-27T15:59:56Z,"Closing.  Inclusion of this split is conditional on making other major changes to the database structure, such as TD's LevelDB changes.  If/when those are merged, this can be updated and reopened.\n\nThe net effect of this pull request was a 10% space savings and CPU util savings.\n",https://github.com/bitcoin/bitcoin/pull/1303#issuecomment-6607457,6607457,
