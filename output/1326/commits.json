[
  {
    "sha": "2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTBhNTkxZDc1ZTUyYjI1MTY4YTcxNDAzNTJlZjYzZWViNGQ4ZThk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-15T21:58:23Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T01:04:57Z"
      },
      "message": "Fixes Issue #1234 - re-issues getblocks when current node providing them disappears.\n\nConflicts:\n\n\t.gitignore\n\tsrc/main.cpp\n\tsrc/net.cpp\n\tsrc/net.h\n\nConflicts:\n\n\tsrc/main.cpp\n\tsrc/net.h",
      "tree": {
        "sha": "7f7e5c0d4e2d0de1e6b322370997d80f23e1cc97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7e5c0d4e2d0de1e6b322370997d80f23e1cc97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d44ac73925d8bcbb79389fa8291a0ecdbfa768ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44ac73925d8bcbb79389fa8291a0ecdbfa768ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d44ac73925d8bcbb79389fa8291a0ecdbfa768ba"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "17b1b23cc43045fbdecbebc6b1ecccddb934576b",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "patch": "@@ -20,3 +20,4 @@ qrc_*.cpp\n *.pro.user\n #mac specific\n .DS_Store\n+build/"
      },
      {
        "sha": "5c23701c959ca40fda17662da67da4f0ce16a810",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "patch": "@@ -31,6 +31,8 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n+CNode* txnode = NULL;           // node calling AcceptToMemoryPool()\n+int nAskedForBlocks = 0;\n CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n@@ -2362,17 +2364,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n-        // Ask the first connected node for block updates\n-        static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot &&\n-            (pfrom->nVersion < NOBLKS_VERSION_START ||\n-             pfrom->nVersion >= NOBLKS_VERSION_END) &&\n-             (nAskedForBlocks < 1 || vNodes.size() <= 1))\n-        {\n-            nAskedForBlocks++;\n-            pfrom->PushGetBlocks(pindexBest, uint256(0));\n-        }\n-\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n@@ -2396,6 +2387,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n+    // Ask the first connected node for block updates\n+    if (!pfrom->fClient && !pfrom->fOneShot &&\n+        (pfrom->nVersion < NOBLKS_VERSION_START ||\n+         pfrom->nVersion >= NOBLKS_VERSION_END) &&\n+         (nAskedForBlocks < 1 || vNodes.size() <= 1))\n+    {\n+        nAskedForBlocks++;\n+        pfrom->fAskedForBlocks = true;\n+        printf(\"initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n+        pfrom->PushGetBlocks(pindexBest, uint256(0));\n+    }\n+\n+\n+    if (strCommand == \"version\") ;\n     else if (strCommand == \"verack\")\n     {\n         pfrom->vRecv.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));"
      },
      {
        "sha": "4cad4cf05113e677d97eafc2e9cd7d3324239910",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "patch": "@@ -71,6 +71,7 @@ extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n+extern int nAskedForBlocks;\n \n // Settings\n extern int64 nTransactionFee;"
      },
      {
        "sha": "7108c519f509d4d70150d50f38378050748e60c3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "patch": "@@ -526,7 +526,14 @@ void CNode::CloseSocketDisconnect()\n     fDisconnect = true;\n     if (hSocket != INVALID_SOCKET)\n     {\n-        printf(\"disconnecting node %s\\n\", addrName.c_str());\n+        if (fDebug)\n+            printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n+        printf(\"disconnecting node %s [\", addrName.c_str());\n+        if (fAskedForBlocks) {\n+            nAskedForBlocks--;\n+            printf(\"ASKFOR.\");\n+        }\n+        printf(\"]\\n\");\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n         vRecv.clear();"
      },
      {
        "sha": "53aec248bc102289808ded73154f027dbba1ecd3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a591d75e52b25168a7140352ef63eeb4d8e8d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "patch": "@@ -143,6 +143,8 @@ class CNode\n     int64 nLastRecv;\n     int64 nLastSendEmpty;\n     int64 nTimeConnected;\n+    int nDupBlocks;\n+    bool fAskedForBlocks;\n     int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n@@ -195,6 +197,8 @@ class CNode\n         nLastRecv = 0;\n         nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n+        nDupBlocks = 0;\n+        fAskedForBlocks = false;\n         nHeaderStart = -1;\n         nMessageStart = -1;\n         addr = addrIn;"
      }
    ]
  },
  {
    "sha": "95ca3aa54a48fb379c8499767bd09c9bb170069f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWNhM2FhNTRhNDhmYjM3OWM4NDk5NzY3YmQwOWM5YmIxNzAwNjlm",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T01:38:42Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T16:29:31Z"
      },
      "message": "Allow blocks to be downloaded from multiple nodes. First commit.\n\nTODO: Deal with stuck downloads so the same block can be downloaded by another node. Perhaps keep count of the re-asks. Log these.\n\nConflicts:\n\n\tsrc/main.cpp\n\tsrc/net.h",
      "tree": {
        "sha": "720e91788e331b0314e66f84174da477406a9cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/720e91788e331b0314e66f84174da477406a9cfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95ca3aa54a48fb379c8499767bd09c9bb170069f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ca3aa54a48fb379c8499767bd09c9bb170069f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95ca3aa54a48fb379c8499767bd09c9bb170069f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ca3aa54a48fb379c8499767bd09c9bb170069f/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0a591d75e52b25168a7140352ef63eeb4d8e8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a0a591d75e52b25168a7140352ef63eeb4d8e8d"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 68,
      "deletions": 30
    },
    "files": [
      {
        "sha": "c9d2e65660320332b464e7b13efc337cd11b29d5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 21,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=95ca3aa54a48fb379c8499767bd09c9bb170069f",
        "patch": "@@ -31,8 +31,8 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n-CNode* txnode = NULL;           // node calling AcceptToMemoryPool()\n int nAskedForBlocks = 0;\n+int nWaitingForBlocks = 0;\n CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n@@ -927,6 +927,11 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n+bool CaughtUp()\n+{\n+    return (nBestHeight >= GetNumBlocksOfPeers());\n+}\n+\n bool IsInitialBlockDownload()\n {\n     if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n@@ -2387,16 +2392,17 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n-    // Ask the first connected node for block updates\n+    // Ask a connected node for block updates\n     if (!pfrom->fClient && !pfrom->fOneShot &&\n-        (pfrom->nVersion < NOBLKS_VERSION_START ||\n-         pfrom->nVersion >= NOBLKS_VERSION_END) &&\n-         (nAskedForBlocks < 1 || vNodes.size() <= 1))\n+        //(pfrom->nVersion < NOBLKS_VERSION_START ||\n+        // pfrom->nVersion >= NOBLKS_VERSION_END) &&\n+         nAskedForBlocks < 8 && !pfrom->fAskedForBlocks && !CaughtUp()) // TODO - tune\n     {\n         nAskedForBlocks++;\n         pfrom->fAskedForBlocks = true;\n         printf(\"initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n         pfrom->PushGetBlocks(pindexBest, uint256(0));\n+        NodeSummary();\n     }\n \n \n@@ -2671,7 +2677,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n-            mapAlreadyAskedFor.erase(inv);\n+            mapWaitingFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n \n             // Recursively process any orphan transactions that depended on this one\n@@ -2692,7 +2698,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                         SyncWithWallets(tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n-                        mapAlreadyAskedFor.erase(inv);\n+                        mapWaitingFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);\n                     }\n                 }\n@@ -2720,14 +2726,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CBlock block;\n         vRecv >> block;\n \n-        printf(\"received block %s\\n\", block.GetHash().ToString().substr(0,20).c_str());\n+        printf(\"received block %s from %s\\n\", block.GetHash().ToString().substr(0,20).c_str(), pfrom->addr.ToString().c_str());\n+        if (pfrom->fWaitingForBlock) {\n+            pfrom->fWaitingForBlock = false;\n+            nWaitingForBlocks--;\n+        }\n+        NodeSummary();\n         // block.print();\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n         if (ProcessBlock(pfrom, &block))\n-            mapAlreadyAskedFor.erase(inv);\n+            mapWaitingFor.erase(inv);\n         if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n     }\n \n@@ -3096,26 +3107,44 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vGetData;\n         int64 nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n-        while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+\n+        while (!pto->fWaitingForBlock && !pto->mapAskFor.empty() &&\n+          (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(txdb, inv))\n-            {\n-                printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n-                vGetData.push_back(inv);\n-                if (vGetData.size() >= 1000)\n-                {\n-                    pto->PushMessage(\"getdata\", vGetData);\n-                    vGetData.clear();\n+            if (!AlreadyHave(txdb, inv)) {\n+                int64 nRequestTime = mapWaitingFor[inv];\n+                if (nRequestTime == 0) {\n+                    if (inv.type == MSG_BLOCK)\n+                        printf(\"getdata %s to %s\\n\", inv.ToString().c_str(), pto->addr.ToString().c_str());\n+                    else\n+                        printf(\"getdata %s\\n\", inv.ToString().c_str(), pto->addr.ToString().c_str());\n+\n+                    if (inv.type == MSG_BLOCK) {\n+                        pto->fWaitingForBlock = true;\n+                        pto->WaitingForBlock = inv;\n+                        nWaitingForBlocks++;\n+                        NodeSummary();\n+                    }\n+                    vGetData.push_back(inv);\n+                    if (vGetData.size() >= 1000)\n+                    {\n+                        pto->PushMessage(\"getdata\", vGetData);\n+                        vGetData.clear();\n+                    }\n+                    mapWaitingFor[inv] = nNow;\n+                } else { // Another node is waiting for this inv, so ask for again later\n+                    pto->mapAskFor.insert(std::make_pair(nNow + 120000000, inv));\n+                    printf(\"waitingfor %s at %s\\n\", inv.ToString().c_str(), DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str());\n                 }\n-            }\n-            mapAlreadyAskedFor[inv] = nNow;\n+            } // if !AlreadyHave\n+            mapWaitingFor[inv] = nNow;\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n \n-    }\n+    } // if LockMain\n     return true;\n }\n "
      },
      {
        "sha": "c39f208742bbcff990f12299326e43a4df9536e2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=95ca3aa54a48fb379c8499767bd09c9bb170069f",
        "patch": "@@ -72,6 +72,7 @@ extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n extern int nAskedForBlocks;\n+extern int nWaitingForBlocks;\n \n // Settings\n extern int64 nTransactionFee;"
      },
      {
        "sha": "91337e17661a51be0e1b2935edcacdf092fb6a1d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=95ca3aa54a48fb379c8499767bd09c9bb170069f",
        "patch": "@@ -64,7 +64,7 @@ CCriticalSection cs_vNodes;\n map<CInv, CDataStream> mapRelay;\n deque<pair<int64, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n-map<CInv, int64> mapAlreadyAskedFor;\n+map<CInv, int64> mapWaitingFor;\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;\n@@ -422,8 +422,10 @@ void AddressCurrentlyConnected(const CService& addr)\n \n \n \n-\n-\n+void NodeSummary()\n+{\n+    printf(\"Nodes=%d: AskedFor=%d, WaitingFor=%d\\n\", vNodes.size(), nAskedForBlocks, nWaitingForBlocks);\n+}\n \n \n CNode* FindNode(const CNetAddr& ip)\n@@ -526,14 +528,18 @@ void CNode::CloseSocketDisconnect()\n     fDisconnect = true;\n     if (hSocket != INVALID_SOCKET)\n     {\n-        if (fDebug)\n-            printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n         printf(\"disconnecting node %s [\", addrName.c_str());\n         if (fAskedForBlocks) {\n             nAskedForBlocks--;\n             printf(\"ASKFOR.\");\n         }\n+        if (fWaitingForBlock) {\n+            nWaitingForBlocks--;\n+            mapWaitingFor.erase(WaitingForBlock);\n+            printf(\"WAITFOR.\");\n+        }\n         printf(\"]\\n\");\n+        NodeSummary();\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n         vRecv.clear();"
      },
      {
        "sha": "4a5a2a713764929513f0adc31e0ffff8d48b9994",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ca3aa54a48fb379c8499767bd09c9bb170069f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=95ca3aa54a48fb379c8499767bd09c9bb170069f",
        "patch": "@@ -34,6 +34,7 @@ void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n bool GetMyExternalIP(CNetAddr& ipRet);\n void AddressCurrentlyConnected(const CService& addr);\n+void NodeSummary();\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *strDest = NULL, int64 nTimeout=0);\n@@ -121,7 +122,7 @@ extern CCriticalSection cs_vNodes;\n extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern std::map<CInv, int64> mapAlreadyAskedFor;\n+extern std::map<CInv, int64> mapWaitingFor;\n \n \n \n@@ -143,7 +144,8 @@ class CNode\n     int64 nLastRecv;\n     int64 nLastSendEmpty;\n     int64 nTimeConnected;\n-    int nDupBlocks;\n+    bool fWaitingForBlock;\n+    CInv WaitingForBlock;\n     bool fAskedForBlocks;\n     int nHeaderStart;\n     unsigned int nMessageStart;\n@@ -197,7 +199,7 @@ class CNode\n         nLastRecv = 0;\n         nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n-        nDupBlocks = 0;\n+        fWaitingForBlock = false;\n         fAskedForBlocks = false;\n         nHeaderStart = -1;\n         nMessageStart = -1;\n@@ -298,7 +300,7 @@ class CNode\n     {\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n-        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+        int64 nRequestTime = mapWaitingFor[inv];\n         printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n \n         // Make sure not to reuse time indexes to keep things in the same order"
      }
    ]
  },
  {
    "sha": "ea3271b7dd0173e004eba8e39240f10d2b2e1d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTMyNzFiN2RkMDE3M2UwMDRlYmE4ZTM5MjQwZjEwZDJiMmUxZDcw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T16:17:04Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T16:29:32Z"
      },
      "message": "Not needed when caught up...",
      "tree": {
        "sha": "5fb6da78a2c2ea5d41639d4774efd149fac18cfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fb6da78a2c2ea5d41639d4774efd149fac18cfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea3271b7dd0173e004eba8e39240f10d2b2e1d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea3271b7dd0173e004eba8e39240f10d2b2e1d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea3271b7dd0173e004eba8e39240f10d2b2e1d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea3271b7dd0173e004eba8e39240f10d2b2e1d70/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95ca3aa54a48fb379c8499767bd09c9bb170069f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ca3aa54a48fb379c8499767bd09c9bb170069f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95ca3aa54a48fb379c8499767bd09c9bb170069f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "87c8706833902d9f29c5248023b0d95303b2d8f8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea3271b7dd0173e004eba8e39240f10d2b2e1d70/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea3271b7dd0173e004eba8e39240f10d2b2e1d70/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ea3271b7dd0173e004eba8e39240f10d2b2e1d70",
        "patch": "@@ -2492,12 +2492,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // find last block in inv vector\n         unsigned int nLastBlock = (unsigned int)(-1);\n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n-            if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n-                nLastBlock = vInv.size() - 1 - nInv;\n-                break;\n+        if (!CaughtUp()) // No need to do this once caught up...\n+            for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n+                if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n+                    nLastBlock = vInv.size() - 1 - nInv;\n+                    break;\n+                }\n             }\n-        }\n         CTxDB txdb(\"r\");\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {"
      }
    ]
  }
]