[
  {
    "sha": "ac378f93a5079d82dac0638874ee1cd499e8304f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzM3OGY5M2E1MDc5ZDgyZGFjMDYzODg3NGVlMWNkNDk5ZTgzMDRm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-04T01:08:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-16T10:00:54Z"
      },
      "message": "Get rid of the const field in CTransaction",
      "tree": {
        "sha": "3d272dde0d60ffa2551e9bc04a4dd9160ec29c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d272dde0d60ffa2551e9bc04a4dd9160ec29c35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac378f93a5079d82dac0638874ee1cd499e8304f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac378f93a5079d82dac0638874ee1cd499e8304f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac378f93a5079d82dac0638874ee1cd499e8304f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac378f93a5079d82dac0638874ee1cd499e8304f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 37,
      "deletions": 36
    },
    "files": [
      {
        "sha": "21f3402aea6d7c0d3056ddb004da2f792fbba948",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac378f93a5079d82dac0638874ee1cd499e8304f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac378f93a5079d82dac0638874ee1cd499e8304f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ac378f93a5079d82dac0638874ee1cd499e8304f",
        "patch": "@@ -3494,7 +3494,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n             out.scriptPubKey[5] = 0xed;\n             memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n             commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n-            const_cast<std::vector<CTxOut>*>(&block.vtx[0].vout)->push_back(out);\n+            block.vtx[0].vout.push_back(out);\n             block.vtx[0].UpdateHash();\n         }\n     }\n@@ -4319,7 +4319,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n         try {\n-            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n+            CBlock block = chainparams.GenesisBlock();\n             // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;"
      },
      {
        "sha": "86455afffd7f50105c989939bc77dbb78a0df2ee",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac378f93a5079d82dac0638874ee1cd499e8304f/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac378f93a5079d82dac0638874ee1cd499e8304f/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=ac378f93a5079d82dac0638874ee1cd499e8304f",
        "patch": "@@ -67,9 +67,9 @@ uint256 CMutableTransaction::GetHash() const\n     return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n-void CTransaction::UpdateHash() const\n+void CTransaction::UpdateHash()\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n+    hash = SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n uint256 CTransaction::GetWitnessHash() const\n@@ -84,12 +84,12 @@ CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion\n }\n \n CTransaction& CTransaction::operator=(const CTransaction &tx) {\n-    *const_cast<int*>(&nVersion) = tx.nVersion;\n-    *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n-    *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n-    *const_cast<CTxWitness*>(&wit) = tx.wit;\n-    *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n-    *const_cast<uint256*>(&hash) = tx.hash;\n+    nVersion = tx.nVersion;\n+    vin = tx.vin;\n+    vout = tx.vout;\n+    wit = tx.wit;\n+    nLockTime = tx.nLockTime;\n+    hash = tx.hash;\n     return *this;\n }\n "
      },
      {
        "sha": "3710b76698d9f74aaf8440297a27c86c2719f059",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac378f93a5079d82dac0638874ee1cd499e8304f/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac378f93a5079d82dac0638874ee1cd499e8304f/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=ac378f93a5079d82dac0638874ee1cd499e8304f",
        "patch": "@@ -292,29 +292,29 @@ template<typename Stream, typename Operation, typename TxType>\n inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n     const bool fAllowWitness = !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n-    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    READWRITE(tx.nVersion);\n     unsigned char flags = 0;\n     if (ser_action.ForRead()) {\n-        const_cast<std::vector<CTxIn>*>(&tx.vin)->clear();\n-        const_cast<std::vector<CTxOut>*>(&tx.vout)->clear();\n-        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n+        tx.vin.clear();\n+        tx.vout.clear();\n+        tx.wit.SetNull();\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        READWRITE(tx.vin);\n         if (tx.vin.size() == 0 && fAllowWitness) {\n             /* We read a dummy or an empty vin. */\n             READWRITE(flags);\n             if (flags != 0) {\n-                READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-                READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+                READWRITE(tx.vin);\n+                READWRITE(tx.vout);\n             }\n         } else {\n             /* We read a non-empty vin. Assume a normal vout follows. */\n-            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+            READWRITE(tx.vout);\n         }\n         if ((flags & 1) && fAllowWitness) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;\n-            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            tx.wit.vtxinwit.resize(tx.vin.size());\n             READWRITE(tx.wit);\n         }\n         if (flags) {\n@@ -336,24 +336,27 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             READWRITE(vinDummy);\n             READWRITE(flags);\n         }\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        READWRITE(tx.vin);\n+        READWRITE(tx.vout);\n         if (flags & 1) {\n-            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            tx.wit.vtxinwit.resize(tx.vin.size());\n             READWRITE(tx.wit);\n         }\n     }\n-    READWRITE(*const_cast<uint32_t*>(&tx.nLockTime));\n+    READWRITE(tx.nLockTime);\n }\n \n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n+ *\n+ * This version has a cached hash value, and requires calling UpdateHash\n+ * after any modifications are made.\n  */\n class CTransaction\n {\n private:\n     /** Memory only. */\n-    const uint256 hash;\n+    uint256 hash;\n \n public:\n     // Default transaction version.\n@@ -365,16 +368,14 @@ class CTransaction\n     // MAX_STANDARD_VERSION will be equal.\n     static const int32_t MAX_STANDARD_VERSION=2;\n \n-    // The local variables are made const to prevent unintended modification\n-    // without updating the cached hash value. However, CTransaction is not\n-    // actually immutable; deserialization and assignment are implemented,\n-    // and bypass the constness. This is safe, as they update the entire\n-    // structure, including the hash.\n-    const int32_t nVersion;\n-    const std::vector<CTxIn> vin;\n-    const std::vector<CTxOut> vout;\n-    CTxWitness wit; // Not const: can change without invalidating the txid cache\n-    const uint32_t nLockTime;\n+    // Modification of any of the fields below (except wit) requires a call to\n+    // UpdateHash() before further use. Consider using CMutableTransaction\n+    // instead if frequent modification is needed.\n+    int32_t nVersion;\n+    std::vector<CTxIn> vin;\n+    std::vector<CTxOut> vout;\n+    CTxWitness wit;\n+    uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n     CTransaction();\n@@ -433,10 +434,10 @@ class CTransaction\n \n     std::string ToString() const;\n \n-    void UpdateHash() const;\n+    void UpdateHash();\n };\n \n-/** A mutable version of CTransaction. */\n+/** A version of CTransaction without cached hash. */\n struct CMutableTransaction\n {\n     int32_t nVersion;"
      }
    ]
  }
]