[
  {
    "sha": "df47ff2da7735ac4bdb9a978f341d9d91846294f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjQ3ZmYyZGE3NzM1YWM0YmRiOWE5NzhmMzQxZDlkOTE4NDYyOTRm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-15T05:20:13Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:40Z"
      },
      "message": "Consensus: Trivial transform BOOST_FOREACH into for loop",
      "tree": {
        "sha": "cb172b2ca43307f54eb4fff7563405dc5eef7d9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb172b2ca43307f54eb4fff7563405dc5eef7d9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df47ff2da7735ac4bdb9a978f341d9d91846294f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47ff2da7735ac4bdb9a978f341d9d91846294f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df47ff2da7735ac4bdb9a978f341d9d91846294f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47ff2da7735ac4bdb9a978f341d9d91846294f/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc94b87487824c6fba45788facf96faba97a4aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc94b87487824c6fba45788facf96faba97a4aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc94b87487824c6fba45788facf96faba97a4aa6"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5e8a6d50fb24bd069f524324edfcafa283a90099",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df47ff2da7735ac4bdb9a978f341d9d91846294f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df47ff2da7735ac4bdb9a978f341d9d91846294f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=df47ff2da7735ac4bdb9a978f341d9d91846294f",
        "patch": "@@ -785,7 +785,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (const auto& txin : tx.vin) {\n         if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;\n     }\n@@ -999,11 +999,11 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const auto& txin : tx.vin)\n     {\n         nSigOps += txin.scriptSig.GetSigOpCount(false);\n     }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const auto& txout : tx.vout)\n     {\n         nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n     }\n@@ -1061,7 +1061,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const auto& txout : tx.vout)\n     {\n         if (txout.nValue < 0)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n@@ -1074,7 +1074,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const auto& txin : tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n@@ -1088,7 +1088,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        for (const auto& txin : tx.vin)\n             if (txin.prevout.IsNull())\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n@@ -3401,13 +3401,13 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const auto& tx : block.vtx)\n         if (!CheckTransaction(tx, state))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const auto& tx : block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n@@ -3538,7 +3538,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n                               : block.GetBlockTime();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+    for (const auto& tx : block.vtx) {\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n         }"
      }
    ]
  },
  {
    "sha": "d748cfd9536e26e502e06b9a673b950703e2825f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzQ4Y2ZkOTUzNmUyNmU1MDJlMDZiOWE2NzNiOTUwNzAzZTI4MjVm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-14T15:02:59Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:46Z"
      },
      "message": "Consensus: Remove calls to error() from ContextualCheckBlock",
      "tree": {
        "sha": "da0c8fa9997404f3e7e78b16afa1f17820849c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da0c8fa9997404f3e7e78b16afa1f17820849c5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d748cfd9536e26e502e06b9a673b950703e2825f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d748cfd9536e26e502e06b9a673b950703e2825f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d748cfd9536e26e502e06b9a673b950703e2825f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d748cfd9536e26e502e06b9a673b950703e2825f/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df47ff2da7735ac4bdb9a978f341d9d91846294f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47ff2da7735ac4bdb9a978f341d9d91846294f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df47ff2da7735ac4bdb9a978f341d9d91846294f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2411caf9a5e1da24c0dce08bfa2b015d3d309ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d748cfd9536e26e502e06b9a673b950703e2825f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d748cfd9536e26e502e06b9a673b950703e2825f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d748cfd9536e26e502e06b9a673b950703e2825f",
        "patch": "@@ -3573,11 +3573,11 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n             if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n-                return state.DoS(100, error(\"%s : invalid witness nonce size\", __func__), REJECT_INVALID, \"bad-witness-nonce-size\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness nonce size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n             fHaveWitness = true;\n         }\n@@ -3587,7 +3587,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     if (!fHaveWitness) {\n         for (size_t i = 0; i < block.vtx.size(); i++) {\n             if (!block.vtx[i].wit.IsNull()) {\n-                return state.DoS(100, error(\"%s : unexpected witness data found\", __func__), REJECT_INVALID, \"unexpected-witness\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }\n     }\n@@ -3599,7 +3599,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockCost(block) > MAX_BLOCK_COST) {\n-        return state.DoS(100, error(\"ContextualCheckBlock(): cost limit failed\"), REJECT_INVALID, \"bad-blk-cost\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-cost\", false, strprintf(\"%s : cost limit failed\", __func__));\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "508716c725105c036f8248f381d853f1d5c3e9ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDg3MTZjNzI1MTA1YzAzNmY4MjQ4ZjM4MWQ4NTNmMWQ1YzNlOWFl",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-12T22:18:16Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:46Z"
      },
      "message": "Encapsulate consensus flags into CConsensusFlags",
      "tree": {
        "sha": "7f16f64172f3ab1936e1e56726b19b8b146c0ffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f16f64172f3ab1936e1e56726b19b8b146c0ffa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/508716c725105c036f8248f381d853f1d5c3e9ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508716c725105c036f8248f381d853f1d5c3e9ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/508716c725105c036f8248f381d853f1d5c3e9ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508716c725105c036f8248f381d853f1d5c3e9ae/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d748cfd9536e26e502e06b9a673b950703e2825f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d748cfd9536e26e502e06b9a673b950703e2825f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d748cfd9536e26e502e06b9a673b950703e2825f"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 47,
      "deletions": 19
    },
    "files": [
      {
        "sha": "5403b7933c7ec2fcf03d0faf067fa9e796c000a0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508716c725105c036f8248f381d853f1d5c3e9ae/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508716c725105c036f8248f381d853f1d5c3e9ae/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=508716c725105c036f8248f381d853f1d5c3e9ae",
        "patch": "@@ -248,6 +248,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   amount.h \\\n   arith_uint256.cpp \\\n   arith_uint256.h \\\n+  consensus/blockvalidator.h \\\n   consensus/merkle.cpp \\\n   consensus/merkle.h \\\n   consensus/params.h \\"
      },
      {
        "sha": "b4ea357e74f2069ca2b9917ab36de81da6083922",
        "filename": "src/consensus/blockvalidator.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508716c725105c036f8248f381d853f1d5c3e9ae/src/consensus/blockvalidator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508716c725105c036f8248f381d853f1d5c3e9ae/src/consensus/blockvalidator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockvalidator.h?ref=508716c725105c036f8248f381d853f1d5c3e9ae",
        "patch": "@@ -0,0 +1,19 @@\n+//\n+// Created by nicolasdorier on 16/07/13.\n+//\n+\n+#ifndef BLOCKVALIDATOR_H\n+#define BLOCKVALIDATOR_H\n+\n+#include \"uint256.h\"\n+\n+class CConsensusFlags\n+{\n+public:\n+    unsigned int scriptFlags = 0;\n+    bool enforceBIP30 = false;\n+    bool enforceBIP34 = false;\n+    unsigned int locktimeFlags = 0;\n+};\n+\n+#endif //BLOCKVALIDATOR_H"
      },
      {
        "sha": "e173a1691f77593467f444562bec12a0f14cdce7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 18,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508716c725105c036f8248f381d853f1d5c3e9ae/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508716c725105c036f8248f381d853f1d5c3e9ae/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=508716c725105c036f8248f381d853f1d5c3e9ae",
        "patch": "@@ -1025,7 +1025,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n-int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs,  unsigned int flags)\n {\n     int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n \n@@ -2328,6 +2328,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);\n \n+    CConsensusFlags consensusFlags;\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n@@ -2340,7 +2341,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n     // two in the chain that violate it. This prevents exploiting the issue against nodes during their\n     // initial block download.\n-    bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n+    consensusFlags.enforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n                           !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n \n@@ -2352,9 +2353,9 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n     CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n     //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n-    fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n+    consensusFlags.enforceBIP30 = consensusFlags.enforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n \n-    if (fEnforceBIP30) {\n+    if (consensusFlags.enforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n@@ -2367,30 +2368,29 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nBIP16SwitchTime = 1333238400;\n     bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n \n-    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+    consensusFlags.scriptFlags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n     // when 75% of the network has upgraded:\n     if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n-        flags |= SCRIPT_VERIFY_DERSIG;\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n     // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n     // blocks, when 75% of the network has upgraded:\n     if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n-        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n     // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n-    int nLockTimeFlags = 0;\n     if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n-        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n-        nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+        consensusFlags.locktimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n     // Start enforcing WITNESS rules using versionbits logic.\n     if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n-        flags |= SCRIPT_VERIFY_WITNESS;\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_WITNESS;\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n@@ -2440,7 +2440,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 }\n             }\n \n-            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+            if (!SequenceLocks(tx, consensusFlags.locktimeFlags, &prevheights, *pindex)) {\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n@@ -2450,7 +2450,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         // * legacy (always)\n         // * p2sh (when P2SH enabled in flags and excludes coinbase)\n         // * witness (when witness enabled in flags and excludes coinbase)\n-        nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n+        nSigOpsCost += GetTransactionSigOpCost(tx, view, consensusFlags.scriptFlags);\n         if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n@@ -2461,7 +2461,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, consensusFlags.scriptFlags, fCacheResults, nScriptCheckThreads ? &vChecks : NULL))\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);\n@@ -3524,16 +3524,17 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n+    CConsensusFlags consensusFlags;\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n     int nLockTimeFlags = 0;\n     if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n-        nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n+        consensusFlags.locktimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n \n-    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+    int64_t nLockTimeCutoff = (consensusFlags.locktimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n                               ? pindexPrev->GetMedianTimePast()\n                               : block.GetBlockTime();\n \n@@ -3546,7 +3547,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)) {\n+        consensusFlags.enforceBIP34 = true;\n+    }\n+    if(consensusFlags.enforceBIP34)\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -3563,8 +3567,11 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // * There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_WITNESS;\n+    }\n     bool fHaveWitness = false;\n-    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+    if (consensusFlags.scriptFlags & SCRIPT_VERIFY_WITNESS) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      },
      {
        "sha": "56f73c34f98d10e3e9c3a03c8b9df0585cf18edf",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508716c725105c036f8248f381d853f1d5c3e9ae/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508716c725105c036f8248f381d853f1d5c3e9ae/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=508716c725105c036f8248f381d853f1d5c3e9ae",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"coins.h\"\n+#include \"consensus/blockvalidator.h\"\n #include \"net.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n@@ -338,7 +339,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n  * @param[out] flags Script verification flags\n  * @return Total signature operation cost of tx\n  */\n-int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, unsigned int flags);\n \n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)"
      }
    ]
  },
  {
    "sha": "a59f79dfb7a996e9b309aa43d699499339b1a7c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTlmNzlkZmI3YTk5NmU5YjMwOWFhNDNkNjk5NDk5MzM5YjFhN2M0",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-13T05:35:58Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:46Z"
      },
      "message": "Encapsulate CConsensusFlags calculation",
      "tree": {
        "sha": "f9ebdf054e1016fd91009ff38be77e0d33787932",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9ebdf054e1016fd91009ff38be77e0d33787932"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a59f79dfb7a996e9b309aa43d699499339b1a7c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59f79dfb7a996e9b309aa43d699499339b1a7c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a59f79dfb7a996e9b309aa43d699499339b1a7c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59f79dfb7a996e9b309aa43d699499339b1a7c4/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "508716c725105c036f8248f381d853f1d5c3e9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508716c725105c036f8248f381d853f1d5c3e9ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/508716c725105c036f8248f381d853f1d5c3e9ae"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 76,
      "deletions": 71
    },
    "files": [
      {
        "sha": "6c830aab92e78ff57b822895991fbcc77c79aab8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 71,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a59f79dfb7a996e9b309aa43d699499339b1a7c4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a59f79dfb7a996e9b309aa43d699499339b1a7c4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a59f79dfb7a996e9b309aa43d699499339b1a7c4",
        "patch": "@@ -2233,6 +2233,8 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+CConsensusFlags GetConsensusFlags(const CBlock& block, const CBlockIndex *pindex, const CChainParams &chainparams);\n+\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck() {\n@@ -2328,32 +2330,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);\n \n-    CConsensusFlags consensusFlags;\n-    // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n-    // unless those are already completely spent.\n-    // If such overwrites are allowed, coinbases and transactions depending upon those\n-    // can be duplicated to remove the ability to spend the first instance -- even after\n-    // being sent to another address.\n-    // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n-    // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n-    // already refuses previously-known transaction ids entirely.\n-    // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n-    // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n-    // two in the chain that violate it. This prevents exploiting the issue against nodes during their\n-    // initial block download.\n-    consensusFlags.enforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n-                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n-\n-    // Once BIP34 activated it was not possible to create new duplicate coinbases and thus other than starting\n-    // with the 2 existing duplicate coinbase pairs, not possible to create overwriting txs.  But by the\n-    // time BIP34 activated, in each of the existing pairs the duplicate coinbase had overwritten the first\n-    // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n-    // duplicate transactions descending from the known pairs either.\n-    // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n-    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n-    //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n-    consensusFlags.enforceBIP30 = consensusFlags.enforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n+    CConsensusFlags consensusFlags = GetConsensusFlags(block, pindex, chainparams);\n \n     if (consensusFlags.enforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n@@ -2364,35 +2341,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         }\n     }\n \n-    // BIP16 didn't become active until Apr 1 2012\n-    int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n-\n-    consensusFlags.scriptFlags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n-\n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n-    // when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n-        consensusFlags.scriptFlags |= SCRIPT_VERIFY_DERSIG;\n-    }\n-\n-    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n-    // blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n-        consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n-    }\n-\n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n-        consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n-        consensusFlags.locktimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n-    }\n-\n-    // Start enforcing WITNESS rules using versionbits logic.\n-    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n-        consensusFlags.scriptFlags |= SCRIPT_VERIFY_WITNESS;\n-    }\n-\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n \n@@ -2543,6 +2491,72 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     return true;\n }\n \n+CConsensusFlags GetConsensusFlags(const CBlock& block, const CBlockIndex *pindex, const CChainParams &chainparams) {\n+    CConsensusFlags consensusFlags;\n+    // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n+    // unless those are already completely spent.\n+    // If such overwrites are allowed, coinbases and transactions depending upon those\n+    // can be duplicated to remove the ability to spend the first instance -- even after\n+    // being sent to another address.\n+    // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n+    // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n+    // already refuses previously-known transaction ids entirely.\n+    // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n+    // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n+    // two in the chain that violate it. This prevents exploiting the issue against nodes during their\n+    // initial block download.\n+    consensusFlags.enforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n+                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n+\n+    // Once BIP34 activated it was not possible to create new duplicate coinbases and thus other than starting\n+    // with the 2 existing duplicate coinbase pairs, not possible to create overwriting txs.  But by the\n+    // time BIP34 activated, in each of the existing pairs the duplicate coinbase had overwritten the first\n+    // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n+    // duplicate transactions descending from the known pairs either.\n+    // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n+    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n+    //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n+    consensusFlags.enforceBIP30 = consensusFlags.enforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n+\n+    // BIP16 didn't become active until Apr 1 2012\n+    int64_t nBIP16SwitchTime = 1333238400;\n+    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n+\n+    consensusFlags.scriptFlags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+\n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n+    // when 75% of the network has upgraded:\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_DERSIG;\n+    }\n+\n+    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+    }\n+\n+    // Start enforcing BIP68 (sequence locks), BIP112 (CHECKSEQUENCEVERIFY) and BIP113 (Median Time Past) using versionbits logic.\n+    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+        consensusFlags.locktimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n+        consensusFlags.locktimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n+    }\n+\n+    // Start enforcing WITNESS rules using versionbits logic.\n+    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n+        consensusFlags.scriptFlags |= SCRIPT_VERIFY_WITNESS;\n+    }\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        consensusFlags.enforceBIP34 = true;\n+    }\n+\n+    return consensusFlags;\n+}\n+\n enum FlushStateMode {\n     FLUSH_STATE_NONE,\n     FLUSH_STATE_IF_NEEDED,\n@@ -3524,15 +3538,14 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n-    CConsensusFlags consensusFlags;\n+    CBlockIndex indexDummy(block);\n+    indexDummy.pprev = pindexPrev;\n+    indexDummy.nHeight = pindexPrev->nHeight + 1;\n+    indexDummy.nVersion = block.nVersion;\n+    uint256 hash = block.GetHash();\n+    indexDummy.phashBlock = &hash;\n+    CConsensusFlags consensusFlags = GetConsensusFlags(block, &indexDummy, Params());\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-\n-    // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n-    int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n-        consensusFlags.locktimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n-    }\n \n     int64_t nLockTimeCutoff = (consensusFlags.locktimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n                               ? pindexPrev->GetMedianTimePast()\n@@ -3545,11 +3558,6 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)) {\n-        consensusFlags.enforceBIP34 = true;\n-    }\n     if(consensusFlags.enforceBIP34)\n     {\n         CScript expect = CScript() << nHeight;\n@@ -3567,9 +3575,6 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // * There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n-        consensusFlags.scriptFlags |= SCRIPT_VERIFY_WITNESS;\n-    }\n     bool fHaveWitness = false;\n     if (consensusFlags.scriptFlags & SCRIPT_VERIFY_WITNESS) {\n         int commitpos = GetWitnessCommitmentIndex(block);"
      }
    ]
  },
  {
    "sha": "068a6915acbaf7701db9f0f2aa346e2400b691f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjhhNjkxNWFjYmFmNzcwMWRiOWYwZjJhYTM0NmUyNDAwYjY5MWYw",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-13T05:37:57Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:47Z"
      },
      "message": "GetConsensusFlags does not depend on CBlock",
      "tree": {
        "sha": "18fd963f3bcace8b244a6678574c591fdc29d08a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18fd963f3bcace8b244a6678574c591fdc29d08a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/068a6915acbaf7701db9f0f2aa346e2400b691f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/068a6915acbaf7701db9f0f2aa346e2400b691f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/068a6915acbaf7701db9f0f2aa346e2400b691f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/068a6915acbaf7701db9f0f2aa346e2400b691f0/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a59f79dfb7a996e9b309aa43d699499339b1a7c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59f79dfb7a996e9b309aa43d699499339b1a7c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a59f79dfb7a996e9b309aa43d699499339b1a7c4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7055f089339f09c9b335de00590081b6d7bb6366",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/068a6915acbaf7701db9f0f2aa346e2400b691f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/068a6915acbaf7701db9f0f2aa346e2400b691f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=068a6915acbaf7701db9f0f2aa346e2400b691f0",
        "patch": "@@ -2233,7 +2233,7 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n-CConsensusFlags GetConsensusFlags(const CBlock& block, const CBlockIndex *pindex, const CChainParams &chainparams);\n+CConsensusFlags GetConsensusFlags(const CBlockIndex *pindex, const CChainParams &chainparams);\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n@@ -2330,7 +2330,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);\n \n-    CConsensusFlags consensusFlags = GetConsensusFlags(block, pindex, chainparams);\n+    CConsensusFlags consensusFlags = GetConsensusFlags(pindex, chainparams);\n \n     if (consensusFlags.enforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n@@ -2491,7 +2491,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     return true;\n }\n \n-CConsensusFlags GetConsensusFlags(const CBlock& block, const CBlockIndex *pindex, const CChainParams &chainparams) {\n+CConsensusFlags GetConsensusFlags(const CBlockIndex *pindex, const CChainParams &chainparams) {\n     CConsensusFlags consensusFlags;\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -2527,13 +2527,13 @@ CConsensusFlags GetConsensusFlags(const CBlock& block, const CBlockIndex *pindex\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n     // when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    if (pindex->nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         consensusFlags.scriptFlags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n     // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n     // blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    if (pindex->nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         consensusFlags.scriptFlags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n@@ -2550,7 +2550,7 @@ CConsensusFlags GetConsensusFlags(const CBlock& block, const CBlockIndex *pindex\n     }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    if (pindex->nVersion >= 2 && IsSuperMajority(2, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         consensusFlags.enforceBIP34 = true;\n     }\n \n@@ -3544,7 +3544,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     indexDummy.nVersion = block.nVersion;\n     uint256 hash = block.GetHash();\n     indexDummy.phashBlock = &hash;\n-    CConsensusFlags consensusFlags = GetConsensusFlags(block, &indexDummy, Params());\n+    CConsensusFlags consensusFlags = GetConsensusFlags(&indexDummy, Params());\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n \n     int64_t nLockTimeCutoff = (consensusFlags.locktimeFlags & LOCKTIME_MEDIAN_TIME_PAST)"
      }
    ]
  },
  {
    "sha": "9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmM2YzAyNjMwYTFhNjg5OWRjZjhjYWFhNjlhYzU3YjI3YjFkZmQ2",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-13T00:23:40Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:47Z"
      },
      "message": "ContextualCheckBlock uses CConsensusFlags",
      "tree": {
        "sha": "670492b6f061d033c51e4b6d38421ec46bdf2391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/670492b6f061d033c51e4b6d38421ec46bdf2391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "068a6915acbaf7701db9f0f2aa346e2400b691f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/068a6915acbaf7701db9f0f2aa346e2400b691f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/068a6915acbaf7701db9f0f2aa346e2400b691f0"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 10,
      "deletions": 14
    },
    "files": [
      {
        "sha": "77a55142d8d124c52a5d43b185c413c60a98d0f0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
        "patch": "@@ -2545,7 +2545,7 @@ CConsensusFlags GetConsensusFlags(const CBlockIndex *pindex, const CChainParams\n     }\n \n     // Start enforcing WITNESS rules using versionbits logic.\n-    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n+    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n         consensusFlags.scriptFlags |= SCRIPT_VERIFY_WITNESS;\n     }\n \n@@ -3536,15 +3536,8 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev, const CConsensusFlags& consensusFlags)\n {\n-    CBlockIndex indexDummy(block);\n-    indexDummy.pprev = pindexPrev;\n-    indexDummy.nHeight = pindexPrev->nHeight + 1;\n-    indexDummy.nVersion = block.nVersion;\n-    uint256 hash = block.GetHash();\n-    indexDummy.phashBlock = &hash;\n-    CConsensusFlags consensusFlags = GetConsensusFlags(&indexDummy, Params());\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n \n     int64_t nLockTimeCutoff = (consensusFlags.locktimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n@@ -3697,8 +3690,8 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n         if (fTooFarAhead) return true;      // Block height is too high\n     }\n     if (fNewBlock) *fNewBlock = true;\n-\n-    if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    CConsensusFlags flags = GetConsensusFlags(pindex, chainparams);\n+    if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, pindex->pprev, flags)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -3783,13 +3776,16 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n-\n+    indexDummy.nVersion = block.nVersion;\n+    uint256 hash = block.GetHash();\n+    indexDummy.phashBlock = &hash;\n+    CConsensusFlags flags = GetConsensusFlags(&indexDummy, chainparams);\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n+    if (!ContextualCheckBlock(block, state, pindexPrev, flags))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;"
      },
      {
        "sha": "e08f279f7693d4f31167c599aa433101564ef390",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
        "patch": "@@ -446,7 +446,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev, const CConsensusFlags& consensusFlags);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()"
      }
    ]
  },
  {
    "sha": "57c3c46a39db9e342f1272283ee96c0a96b5424e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2MzYzQ2YTM5ZGI5ZTM0MmYxMjcyMjgzZWU5NmMwYTk2YjU0MjRl",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-13T08:07:32Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:47Z"
      },
      "message": "ContextualCheckBlock does not depends on CBlockIndex",
      "tree": {
        "sha": "27bf826a75561539833979283b221d6455e3f400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27bf826a75561539833979283b221d6455e3f400"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57c3c46a39db9e342f1272283ee96c0a96b5424e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57c3c46a39db9e342f1272283ee96c0a96b5424e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57c3c46a39db9e342f1272283ee96c0a96b5424e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57c3c46a39db9e342f1272283ee96c0a96b5424e/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc6c02630a1a6899dcf8caaa69ac57b27b1dfd6"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 30,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1527e9b400d033a70bd425dc349f0240d1347b44",
        "filename": "src/consensus/blockvalidator.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57c3c46a39db9e342f1272283ee96c0a96b5424e/src/consensus/blockvalidator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57c3c46a39db9e342f1272283ee96c0a96b5424e/src/consensus/blockvalidator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockvalidator.h?ref=57c3c46a39db9e342f1272283ee96c0a96b5424e",
        "patch": "@@ -16,4 +16,13 @@ class CConsensusFlags\n     unsigned int locktimeFlags = 0;\n };\n \n+class CConsensusContextInfo\n+{\n+    public:\n+        CBlockHeader bestBlock;\n+        int64_t medianTimePast = 0;\n+        int height = 0;\n+        int64_t now = 0;\n+};\n+\n #endif //BLOCKVALIDATOR_H"
      },
      {
        "sha": "4a305dc8a13d95a698898f1121e0143a8758cf69",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57c3c46a39db9e342f1272283ee96c0a96b5424e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57c3c46a39db9e342f1272283ee96c0a96b5424e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=57c3c46a39db9e342f1272283ee96c0a96b5424e",
        "patch": "@@ -2233,6 +2233,7 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+CConsensusContextInfo GetContextInfo(const CBlockIndex* pindex);\n CConsensusFlags GetConsensusFlags(const CBlockIndex *pindex, const CChainParams &chainparams);\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n@@ -2491,6 +2492,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     return true;\n }\n \n+\n+CConsensusContextInfo GetContextInfo(const CBlockIndex* pindex)\n+{\n+    assert(pindex);\n+    CConsensusContextInfo contextInfo;\n+    contextInfo.height = pindex->nHeight;\n+    contextInfo.medianTimePast = pindex->GetMedianTimePast();\n+    contextInfo.now = GetAdjustedTime();\n+    contextInfo.bestBlock = pindex->GetBlockHeader();\n+    return contextInfo;\n+}\n+\n CConsensusFlags GetConsensusFlags(const CBlockIndex *pindex, const CChainParams &chainparams) {\n     CConsensusFlags consensusFlags;\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n@@ -3536,12 +3549,12 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev, const CConsensusFlags& consensusFlags)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CConsensusContextInfo& context, const CConsensusFlags& consensusFlags)\n {\n-    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+    const int nHeight = context.height + 1;\n \n     int64_t nLockTimeCutoff = (consensusFlags.locktimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                              ? pindexPrev->GetMedianTimePast()\n+                              ? context.medianTimePast\n                               : block.GetBlockTime();\n \n     // Check that all transactions are finalized\n@@ -3691,7 +3704,8 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n     if (fNewBlock) *fNewBlock = true;\n     CConsensusFlags flags = GetConsensusFlags(pindex, chainparams);\n-    if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, pindex->pprev, flags)) {\n+    CConsensusContextInfo context = GetContextInfo(pindex->pprev);\n+    if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, context, flags)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -3780,12 +3794,13 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     uint256 hash = block.GetHash();\n     indexDummy.phashBlock = &hash;\n     CConsensusFlags flags = GetConsensusFlags(&indexDummy, chainparams);\n+    CConsensusContextInfo context = GetContextInfo(pindexPrev);\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ContextualCheckBlock(block, state, pindexPrev, flags))\n+    if (!ContextualCheckBlock(block, state, context, flags))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;"
      },
      {
        "sha": "4126134da653208f17b6ac8e2a9f0b6ac9e631fb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57c3c46a39db9e342f1272283ee96c0a96b5424e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57c3c46a39db9e342f1272283ee96c0a96b5424e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=57c3c46a39db9e342f1272283ee96c0a96b5424e",
        "patch": "@@ -446,7 +446,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev, const CConsensusFlags& consensusFlags);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CConsensusContextInfo& context, const CConsensusFlags& consensusFlags);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()"
      }
    ]
  },
  {
    "sha": "6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTZlY2Q4ZTMxMmYzZjFlNThiMTUyMGQzZmVkODdlYmI3MGY0YjFm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-14T10:35:52Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T07:41:47Z"
      },
      "message": "ContextualCheckBlockHeader does not depends on CBlockIndex",
      "tree": {
        "sha": "fda0bdef83c66839f007cda47917163d4f73cdef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fda0bdef83c66839f007cda47917163d4f73cdef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57c3c46a39db9e342f1272283ee96c0a96b5424e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57c3c46a39db9e342f1272283ee96c0a96b5424e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57c3c46a39db9e342f1272283ee96c0a96b5424e"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 23,
      "deletions": 15
    },
    "files": [
      {
        "sha": "1cb653d2646d24e2c746844c8f237475bba87bcb",
        "filename": "src/consensus/blockvalidator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/src/consensus/blockvalidator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/src/consensus/blockvalidator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockvalidator.h?ref=6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
        "patch": "@@ -23,6 +23,7 @@ class CConsensusContextInfo\n         int64_t medianTimePast = 0;\n         int height = 0;\n         int64_t now = 0;\n+        int32_t superMajorityVersion = 0;\n };\n \n #endif //BLOCKVALIDATOR_H"
      },
      {
        "sha": "dec5ac4c54bb39c9a8abe4a3dad80c6e17b6b11e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 14,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
        "patch": "@@ -2233,7 +2233,7 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n-CConsensusContextInfo GetContextInfo(const CBlockIndex* pindex);\n+CConsensusContextInfo GetContextInfo(const CBlockIndex* pindex, const Consensus::Params consensusParams);\n CConsensusFlags GetConsensusFlags(const CBlockIndex *pindex, const CChainParams &chainparams);\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n@@ -2493,14 +2493,20 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n }\n \n \n-CConsensusContextInfo GetContextInfo(const CBlockIndex* pindex)\n+CConsensusContextInfo GetContextInfo(const CBlockIndex* pindex, const Consensus::Params consensusParams)\n {\n     assert(pindex);\n     CConsensusContextInfo contextInfo;\n     contextInfo.height = pindex->nHeight;\n     contextInfo.medianTimePast = pindex->GetMedianTimePast();\n     contextInfo.now = GetAdjustedTime();\n     contextInfo.bestBlock = pindex->GetBlockHeader();\n+    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n+        if (IsSuperMajority(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        {\n+            contextInfo.superMajorityVersion = version;\n+            break;\n+        }\n     return contextInfo;\n }\n \n@@ -3526,25 +3532,25 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     return commitment;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex * const pindexPrev, int64_t nAdjustedTime)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CConsensusContextInfo& context, unsigned int nextWorkRequired)\n {\n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+    if (block.nBits != nextWorkRequired)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n \n     // Check timestamp against prev\n-    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= context.medianTimePast)\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > nAdjustedTime + 2 * 60 * 60)\n+    if (block.GetBlockTime() > context.now + 2 * 60 * 60)\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n-        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", version - 1),\n-                                 strprintf(\"rejected nVersion=0x%08x block\", version - 1));\n+    if ((2 <= context.superMajorityVersion  && context.superMajorityVersion < 5) && // check for version 2, 3 and 4 upgrades\n+        block.nVersion < context.superMajorityVersion)\n+        return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", context.superMajorityVersion - 1),\n+                             strprintf(\"rejected nVersion=0x%08x block\", context.superMajorityVersion - 1));\n \n     return true;\n }\n@@ -3658,7 +3664,8 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n             return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-        if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n+        CConsensusContextInfo context = GetContextInfo(pindexPrev, chainparams.GetConsensus());\n+        if (!ContextualCheckBlockHeader(block, state, context, GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus())))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n     }\n     if (pindex == NULL)\n@@ -3704,7 +3711,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n     if (fNewBlock) *fNewBlock = true;\n     CConsensusFlags flags = GetConsensusFlags(pindex, chainparams);\n-    CConsensusContextInfo context = GetContextInfo(pindex->pprev);\n+    CConsensusContextInfo context = GetContextInfo(pindex->pprev, chainparams.GetConsensus());\n     if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, context, flags)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3794,9 +3801,9 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     uint256 hash = block.GetHash();\n     indexDummy.phashBlock = &hash;\n     CConsensusFlags flags = GetConsensusFlags(&indexDummy, chainparams);\n-    CConsensusContextInfo context = GetContextInfo(pindexPrev);\n+    CConsensusContextInfo context = GetContextInfo(pindexPrev, chainparams.GetConsensus());\n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n+    if (!ContextualCheckBlockHeader(block, state, context, GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus())))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));"
      },
      {
        "sha": "c7bd1bb494bbf3cd278023546abe36a99bf84fde",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6e6ecd8e312f3f1e58b1520d3fed87ebb70f4b1f",
        "patch": "@@ -445,7 +445,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CConsensusContextInfo& context, unsigned int nextWorkRequired);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CConsensusContextInfo& context, const CConsensusFlags& consensusFlags);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins."
      }
    ]
  }
]