[
  {
    "sha": "c78eb8651b0949fefcafb22940512f4ef98d3358",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzhlYjg2NTFiMDk0OWZlZmNhZmIyMjk0MDUxMmY0ZWY5OGQzMzU4",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-08T08:44:39Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-10T08:38:01Z"
      },
      "message": "[policy/refactor] pass in relay fee instead of using global",
      "tree": {
        "sha": "cfc6c3ad0f4a7e1e5672a3d13972208cf4edf947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfc6c3ad0f4a7e1e5672a3d13972208cf4edf947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c78eb8651b0949fefcafb22940512f4ef98d3358",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c78eb8651b0949fefcafb22940512f4ef98d3358",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c78eb8651b0949fefcafb22940512f4ef98d3358",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c78eb8651b0949fefcafb22940512f4ef98d3358/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60881158c8010e436e3c107a2d62ffb7aa23220c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60881158c8010e436e3c107a2d62ffb7aa23220c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60881158c8010e436e3c107a2d62ffb7aa23220c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cefc25a2251284bb2098a9beed8c9f203fa2f610",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c78eb8651b0949fefcafb22940512f4ef98d3358/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c78eb8651b0949fefcafb22940512f4ef98d3358/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=c78eb8651b0949fefcafb22940512f4ef98d3358",
        "patch": "@@ -150,6 +150,7 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& i\n std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CAmount replacement_fees,\n                                       size_t replacement_vsize,\n+                                      CFeeRate relay_fee,\n                                       const uint256& txid)\n {\n     // The replacement must pay greater fees than the transactions it\n@@ -163,11 +164,11 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     // Finally in addition to paying more fees than the conflicts the\n     // new transaction must pay for its own bandwidth.\n     CAmount additional_fees = replacement_fees - original_fees;\n-    if (additional_fees < ::incrementalRelayFee.GetFee(replacement_vsize)) {\n+    if (additional_fees < relay_fee.GetFee(replacement_vsize)) {\n         return strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                          txid.ToString(),\n                          FormatMoney(additional_fees),\n-                         FormatMoney(::incrementalRelayFee.GetFee(replacement_vsize)));\n+                         FormatMoney(relay_fee.GetFee(replacement_vsize)));\n     }\n     return std::nullopt;\n }"
      },
      {
        "sha": "e8cfb2e6438522967bf62cd70dda450dabf243fb",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c78eb8651b0949fefcafb22940512f4ef98d3358/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c78eb8651b0949fefcafb22940512f4ef98d3358/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=c78eb8651b0949fefcafb22940512f4ef98d3358",
        "patch": "@@ -84,12 +84,14 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& i\n  * @param[in]   original_fees       Total modified fees of original transaction(s).\n  * @param[in]   replacement_fees    Total modified fees of replacement transaction(s).\n  * @param[in]   replacement_vsize   Total virtual size of replacement transaction(s).\n+ * @param[in]   relay_fee           The node's minimum feerate for transaction relay.\n  * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n  * @returns error string if fees are insufficient, otherwise std::nullopt.\n  */\n std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CAmount replacement_fees,\n                                       size_t replacement_vsize,\n+                                      CFeeRate relay_fee,\n                                       const uint256& txid);\n \n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "e4b8b62c5a61a686c0c7cfc537346c76014d1957",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c78eb8651b0949fefcafb22940512f4ef98d3358/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c78eb8651b0949fefcafb22940512f4ef98d3358/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c78eb8651b0949fefcafb22940512f4ef98d3358",
        "patch": "@@ -803,7 +803,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             nConflictingFees += it->GetModifiedFee();\n             nConflictingSize += it->GetTxSize();\n         }\n-        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, hash)}) {\n+        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, ::incrementalRelayFee, hash)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Y0NmY2MDU1ZjdjZDJlNWRhODFlMGQyOWNhZmM1MWFkNGFhZmJh",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-16T09:40:46Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-10T09:32:29Z"
      },
      "message": "[doc] improve RBF documentation\n\nDocument a few non-obvious things and delete no-longer-relevant comments\n(e.g. about taking a lock that we're already holding).\nNo change in behavior.",
      "tree": {
        "sha": "be6725e5b2e3a44cbfb8157a3081514efedc6c0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be6725e5b2e3a44cbfb8157a3081514efedc6c0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c78eb8651b0949fefcafb22940512f4ef98d3358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c78eb8651b0949fefcafb22940512f4ef98d3358",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c78eb8651b0949fefcafb22940512f4ef98d3358"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 38,
      "deletions": 32
    },
    "files": [
      {
        "sha": "7ac2e22006fc7692410595516683af6b82021fcd",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
        "patch": "@@ -48,26 +48,27 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n }\n \n std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n-                            CTxMemPool& pool,\n-                            const CTxMemPool::setEntries& iters_conflicting,\n-                            CTxMemPool::setEntries& all_conflicts)\n+                                                  CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n     uint64_t nConflictingCount = 0;\n     for (const auto& mi : iters_conflicting) {\n         nConflictingCount += mi->GetCountWithDescendants();\n-        // This potentially overestimates the number of actual descendants but we just want to be\n-        // conservative to avoid doing too much work.\n+        // BIP125 Rule #5: don't consider replacing more than MAX_BIP125_REPLACEMENT_CANDIDATES\n+        // entries from the mempool. This potentially overestimates the number of actual\n+        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n+        // times), but we just want to be conservative to avoid doing too much work.\n         if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n             return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n                              txid.ToString(),\n                              nConflictingCount,\n                              MAX_BIP125_REPLACEMENT_CANDIDATES);\n         }\n     }\n-    // If not too many to replace, then calculate the set of\n-    // transactions that would have to be evicted\n+    // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n         pool.CalculateDescendants(it, all_conflicts);\n     }\n@@ -81,19 +82,19 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n     AssertLockHeld(pool.cs);\n     std::set<uint256> parents_of_conflicts;\n     for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn &txin : mi->GetTx().vin) {\n+        for (const CTxIn& txin : mi->GetTx().vin) {\n             parents_of_conflicts.insert(txin.prevout.hash);\n         }\n     }\n \n     for (unsigned int j = 0; j < tx.vin.size(); j++) {\n-        // We don't want to accept replacements that require low feerate junk to be mined first.\n-        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n-        // for now requiring all new inputs to be confirmed works.\n+        // BIP125 Rule #2: We don't want to accept replacements that require low feerate junk to be\n+        // mined first.  Ideally we'd keep track of the ancestor feerates and make the decision\n+        // based on that, but for now requiring all new inputs to be confirmed works.\n         //\n         // Note that if you relax this to make RBF a little more useful, this may break the\n-        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n-        // CalculateMempoolAncestors call for more info.\n+        // CalculateMempoolAncestors RBF relaxation which subtracts the conflict count/size from the\n+        // descendant limit.\n         if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n             // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n             // if the new input refers to a tx that's in the mempool.\n@@ -111,7 +112,7 @@ std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries&\n                                                    const uint256& txid)\n {\n     for (CTxMemPool::txiter ancestorIt : ancestors) {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        const uint256& hashAncestor = ancestorIt->GetTx().GetHash();\n         if (direct_conflicts.count(hashAncestor)) {\n             return strprintf(\"%s spends conflicting transaction %s\",\n                              txid.ToString(),\n@@ -153,16 +154,17 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid)\n {\n-    // The replacement must pay greater fees than the transactions it\n-    // replaces - if we did the bandwidth used by those conflicting\n-    // transactions would not be paid for.\n+    // BIP125 Rule #3: The replacement fees must be greater than or equal to fees of the\n+    // transactions it replaces, otherwise the bandwidth used by those conflicting transactions\n+    // would not be paid for.\n     if (replacement_fees < original_fees) {\n         return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n                          txid.ToString(), FormatMoney(replacement_fees), FormatMoney(original_fees));\n     }\n \n-    // Finally in addition to paying more fees than the conflicts the\n-    // new transaction must pay for its own bandwidth.\n+    // BIP125 Rule #4: The new transaction must pay for its own bandwidth. Otherwise, we have a DoS\n+    // vector where attackers can cause a transaction to be replaced (and relayed) repeatedly by\n+    // increasing the fee by tiny amounts.\n     CAmount additional_fees = replacement_fees - original_fees;\n     if (additional_fees < relay_fee.GetFee(replacement_vsize)) {\n         return strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\","
      },
      {
        "sha": "6031745d8fd84e4a0aab4534fed1db7421e7829e",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
        "patch": "@@ -48,14 +48,14 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n                                                   const CTxMemPool::setEntries& iters_conflicting,\n                                                   CTxMemPool::setEntries& all_conflicts)\n-                                                  EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+    EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n /** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n  * was included in one of the original transactions.\"\n  * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n                                                const CTxMemPool::setEntries& iters_conflicting)\n-                                               EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+    EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n /** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n  * txids) to make sure they are disjoint."
      },
      {
        "sha": "135817d6698051682af11703018e9526a45741f4",
        "filename": "src/util/rbf.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/util/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/util/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.h?ref=3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
        "patch": "@@ -17,7 +17,7 @@ static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n *\n * SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by non-replaceable transactions. All\n * inputs rather than just one is for the sake of multi-party protocols, where we don't want a single\n-* party to be able to disable replacement. */\n-bool SignalsOptInRBF(const CTransaction &tx);\n+* party to be able to disable replacement by opting out in their own input. */\n+bool SignalsOptInRBF(const CTransaction& tx);\n \n #endif // BITCOIN_UTIL_RBF_H"
      },
      {
        "sha": "44b2f8e298f0b844dfc899582a69f184bef2f819",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
        "patch": "@@ -771,34 +771,38 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n     if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+        // We classify this as a consensus error because a transaction depending on something it\n+        // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n \n-    // If we don't hold the lock allConflicting might be incomplete; the\n-    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n-    // mempool consistency for us.\n     fReplacementTransaction = setConflicts.size();\n-    if (fReplacementTransaction)\n-    {\n+    if (fReplacementTransaction) {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n+        // It's possible that the replacement pays more fees than its direct conflicts but not more\n+        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+        // more economically rational to mine. Before we go digging through the mempool for all\n+        // transactions that would need to be removed (direct conflicts and all descendants), check\n+        // that the replacement transaction pays more than its direct conflicts.\n         if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n \n-        // Calculate all conflicting entries and enforce Rule #5.\n+        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n         if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                  \"too many potential replacements\", *err_string);\n         }\n-        // Enforce Rule #2.\n+        // Enforce BIP125 Rule #2.\n         if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                  \"replacement-adds-unconfirmed\", *err_string);\n         }\n \n-        // Check if it's economically rational to mine this transaction rather\n-        // than the ones it replaces. Enforce Rules #3 and #4.\n+        // Check if it's economically rational to mine this transaction rather than the ones it\n+        // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n         for (CTxMemPool::txiter it : allConflicting) {\n             nConflictingFees += it->GetModifiedFee();\n             nConflictingSize += it->GetTxSize();"
      }
    ]
  },
  {
    "sha": "c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmFiZWI3NmZiYjg3N2YzZjE2ZDY5OWM3M2ExODI4YzdkYTJlNmQx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-20T12:26:56Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-20T12:32:28Z"
      },
      "message": "make MAX_BIP125_RBF_SEQUENCE constexpr",
      "tree": {
        "sha": "c592e4857c791cf93c26ea635be467912a31c042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c592e4857c791cf93c26ea635be467912a31c042"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf46f6055f7cd2e5da81e0d29cafc51ad4aafba"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "aa522d8bfb21cccbf6158cbe3381661a415568a6",
        "filename": "src/util/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1/src/util/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1/src/util/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.h?ref=c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
        "patch": "@@ -9,7 +9,7 @@\n \n class CTransaction;\n \n-static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n+static constexpr uint32_t MAX_BIP125_RBF_SEQUENCE{0xfffffffd};\n \n /** Check whether the sequence numbers on this transaction are signaling opt-in to replace-by-fee,\n  * according to BIP 125.  Allow opt-out of transaction replacement by setting nSequence >"
      }
    ]
  },
  {
    "sha": "0ef08f8bed537435f3f9db1e38b7d6f3551fe830",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWYwOGY4YmVkNTM3NDM1ZjNmOWRiMWUzOGI3ZDZmMzU1MWZlODMw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-20T12:34:48Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-20T12:34:48Z"
      },
      "message": "add missing includes in policy/rbf",
      "tree": {
        "sha": "5c58ab667f26a40743eb7a2f395033ce3e541a56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c58ab667f26a40743eb7a2f395033ce3e541a56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ef08f8bed537435f3f9db1e38b7d6f3551fe830",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef08f8bed537435f3f9db1e38b7d6f3551fe830",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef08f8bed537435f3f9db1e38b7d6f3551fe830",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef08f8bed537435f3f9db1e38b7d6f3551fe830/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6abeb76fbb877f3f16d699c73a1828c7da2e6d1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "be8c2e5b8bc404480452e0ef26406304140a6e59",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ef08f8bed537435f3f9db1e38b7d6f3551fe830/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ef08f8bed537435f3f9db1e38b7d6f3551fe830/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=0ef08f8bed537435f3f9db1e38b7d6f3551fe830",
        "patch": "@@ -5,7 +5,12 @@\n #ifndef BITCOIN_POLICY_RBF_H\n #define BITCOIN_POLICY_RBF_H\n \n+#include <primitives/transaction.h>\n #include <txmempool.h>\n+#include <uint256.h>\n+\n+#include <optional>\n+#include <string>\n \n /** Maximum number of transactions that can be replaced by BIP125 RBF (Rule #5). This includes all\n  * mempool conflicts and their descendants. */"
      }
    ]
  }
]