[
  {
    "sha": "cd290fc4f2f1a05731b18f4199a31ba84c31907c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDI5MGZjNGYyZjFhMDU3MzFiMThmNDE5OWEzMWJhODRjMzE5MDdj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-18T09:33:39Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:41Z"
      },
      "message": "[bench] Profile tx relay trickle block.",
      "tree": {
        "sha": "5968d296d70924562e5fc887b6a6ab15bd45ed6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5968d296d70924562e5fc887b6a6ab15bd45ed6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd290fc4f2f1a05731b18f4199a31ba84c31907c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagkkACgkQV692LbM1\nMyKsRA/1G3a7vuU39wfG/Nos9rGMZy7I4+uK/jwyGengI+koP2CcWyNZ3zMjhGjN\nFrNc024nDILsohHvBP4t1JR7jb8ZWJdOlPsbe+d6xBTdXU5ZPIcB7sUjmZ7PVEeD\nT6tEBY2KkmXzNpy5pwsMozB7WtwcsXqqECtdNKa+SIUwVZOLXVLgg0fFCNIN/Mz5\n0GP70XNbmrPk8BEs9sliSi6kE9ijkcy2/2lNoWUeKqAjA0Nq1cvEqBQKrfQ+84cH\n++lnfa81kZWMHUggWrwqsqovVdLbBkmzZwi+PWYbW4Jo7TaodO+mfkIdJ8mrETyN\n3QiY3fOOYe00gZsqJ79c4QC5wCSLQzb0vOH887Q4xQ9ekLQEoqX5EBsxZXH9oFlm\nk6cnEeZkKykoNLaiWmUyOY+itEmjzW6Z00vY9yr8JMKnApDgsUv3S+dsgzs8462i\nJKcLk6t1QrYRb6MGKXkwwC87ZauxkmMGp73DskYtfqiIod3neiWrNIinEMg1LhIr\nXeOcPPqgw1LfjznqgcL/o+W2wmjJ5vaqHeO3jZJGeO2ZMZpIlOyewn9L0MmAzT8J\nQd9GoISCA2qV6YHnEeKpSo1EU1xHtRN7QQ4Y8cmFn9AxQPvn7xtcNz111JJhSuYJ\ncoM4cJeuLllTL5OtXGMTccZikKZQdFdtTnC+e9IYhRI3a2qqtw==\n=BZUa\n-----END PGP SIGNATURE-----",
        "payload": "tree 5968d296d70924562e5fc887b6a6ab15bd45ed6d\nparent 4afb5aa9e173991548be3627c6df258368d95ff3\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503048819 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298121 +0900\n\n[bench] Profile tx relay trickle block.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd290fc4f2f1a05731b18f4199a31ba84c31907c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd290fc4f2f1a05731b18f4199a31ba84c31907c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd290fc4f2f1a05731b18f4199a31ba84c31907c/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4afb5aa9e173991548be3627c6df258368d95ff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afb5aa9e173991548be3627c6df258368d95ff3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4afb5aa9e173991548be3627c6df258368d95ff3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "70f83b9b4dab18999bafba384b214d2d700fac2c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd290fc4f2f1a05731b18f4199a31ba84c31907c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd290fc4f2f1a05731b18f4199a31ba84c31907c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cd290fc4f2f1a05731b18f4199a31ba84c31907c",
        "patch": "@@ -3121,6 +3121,12 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n \n             // Determine transactions to relay\n             if (fSendTrickle) {\n+                static int64_t nInvTrickleTimeSum = 0; // sum of time spent here\n+                static int64_t nInvTrickleCount = 0;   // sum of size of vInv\n+                static int64_t nInvTrickleProcessedCount = 0;   // # of entries in nInvTx that were actually processed before hitting cap\n+                static int64_t nInvTricklePasses = 0;  // # of times we entered this part of the code\n+                int64_t nInvTrickleTimeStart = GetTimeMicros();\n+                {\n                 // Produce a vector with all candidates for sending\n                 std::vector<std::set<uint256>::iterator> vInvTx;\n                 vInvTx.reserve(pto->setInventoryTxToSend.size());\n@@ -3140,7 +3146,9 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 // especially since we have many peers and some will draw much shorter delays.\n                 unsigned int nRelayedTransactions = 0;\n                 LOCK(pto->cs_filter);\n+                nInvTrickleCount += vInvTx.size();\n                 while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n+                    nInvTrickleProcessedCount++;\n                     // Fetch the top element from the heap\n                     std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                     std::set<uint256>::iterator it = vInvTx.back();\n@@ -3183,6 +3191,13 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     }\n                     pto->filterInventoryKnown.insert(hash);\n                 }\n+                }\n+                int64_t nInvTrickleTimeEnd = GetTimeMicros();\n+                nInvTrickleTimeSum += (nInvTrickleTimeEnd - nInvTrickleTimeStart);\n+                nInvTricklePasses++;\n+                if (nInvTricklePasses % 1000 == 0) {\n+                    LogPrint(BCLog::BENCH, \"    - inv.trickle: %.2fus/tx [%.2fus/seen, %.2f seen/pass, %.2fus/pass]\\n\", (float)nInvTrickleTimeSum / nInvTrickleCount, (float)nInvTrickleTimeSum / nInvTrickleProcessedCount, (float)nInvTrickleProcessedCount / nInvTricklePasses, (float)nInvTrickleTimeSum / nInvTricklePasses);\n+                }\n             }\n         }\n         if (!vInv.empty())"
      }
    ]
  },
  {
    "sha": "9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmFiOWVkMmFkMDc3ZWM4ZWVlOTRjNzRlNGE2ZjE3YjUxOTk0MjQ2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-18T05:52:06Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:41Z"
      },
      "message": "[refactor] Minor clean-up.",
      "tree": {
        "sha": "30ebfa1f288c486eed76c30bdbba9e2c56782440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30ebfa1f288c486eed76c30bdbba9e2c56782440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagkkACgkQV692LbM1\nMyJZCQ//SIcJUeC8IntM+ktpKCQmVMoE16lzTUD7W0OHKTgaCgZ3ihkUB6GIZVDU\nwGZjqhCJ0QuvHC7BBzrSrI4LnT9qk9Ez2KwbffamtGULldEbz4jr1BVv26rVXpK0\nQgEHRhIWtkwTTIls/xpY52vRi9s0TxD9Qp+CP8mTEr70iL3GCeldQqOjngGIcoK+\nspPGnRtqQhCiSeSzOe/J3hD7PxVb2AxOy7TxrpnYsgVxcnk8AsC+//CtpG/DEd/n\nIDWDoVjwxg95VBFTvHMt8oCc6QHkLO9G6n42l0W+LKf20xqzRdwjKW6oJUExeSwZ\nkHfNPtoNOkYQvqMD0yQ78yjY6XBhsUGfXtQwGDghJnlu7hYZmzfZK7Ur2O+4bKSv\nNMHV1jii15EgIPvJd553ngb92ic3Mwr52yIZ/k/CrgNe+ipv/zpwsCRs9cqXnxYf\ntZXdEta97SC5i8a6ECztRzwfAGjol/Wc1/PhSLml/DUcBvPx5Y+nqaUZHCWr8rhh\nLjt+dW+g6shCDwGfhOuf85C/XRT/RIzLmK6DOZsbvUcyqVE/6+m7VOEZ+ug92XzC\nhFGSTQAhzNXwYMs7aqg+Yra1R07Gfjrf6WGTplEzfvoiJq6vvQDmKJrbFi/pu0vN\nPijCYYRAJuF3x89cfY1Lx42x0S1tXFVZK5IRZqzzX7XgUAaxiOk=\n=PQ+H\n-----END PGP SIGNATURE-----",
        "payload": "tree 30ebfa1f288c486eed76c30bdbba9e2c56782440\nparent cd290fc4f2f1a05731b18f4199a31ba84c31907c\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503035526 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298121 +0900\n\n[refactor] Minor clean-up.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fab9ed2ad077ec8eee94c74e4a6f17b51994246/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd290fc4f2f1a05731b18f4199a31ba84c31907c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd290fc4f2f1a05731b18f4199a31ba84c31907c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd290fc4f2f1a05731b18f4199a31ba84c31907c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5ead3702976a3a0aae2a1d39cbbc3a7d97bbf735",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fab9ed2ad077ec8eee94c74e4a6f17b51994246/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fab9ed2ad077ec8eee94c74e4a6f17b51994246/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
        "patch": "@@ -429,7 +429,6 @@ class CTxMemPool\n     void trackPackageRemoved(const CFeeRate& rate);\n \n public:\n-\n     static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; // public only for testing\n \n     typedef boost::multi_index_container<\n@@ -479,6 +478,7 @@ class CTxMemPool\n \n     const setEntries & GetMemPoolParents(txiter entry) const;\n     const setEntries & GetMemPoolChildren(txiter entry) const;\n+\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n \n@@ -542,7 +542,6 @@ class CTxMemPool\n     void ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n \n-public:\n     /** Remove a set of transactions from the mempool.\n      *  If a transaction is in this set, then all in-mempool descendants must\n      *  also be in the set, unless this transaction is being removed for being"
      }
    ]
  },
  {
    "sha": "e007eab01eb07a2119e6b7c0b6977e772ea35081",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDA3ZWFiMDFlYjA3YTIxMTllNmI3YzBiNjk3N2U3NzJlYTM1MDgx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-18T04:28:51Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:41Z"
      },
      "message": "[refactor] Use uint256 vector instead of set iterator vector in trickling tx relay.",
      "tree": {
        "sha": "b7fe904daf3289607dd86b0808a0e2755ef2d884",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7fe904daf3289607dd86b0808a0e2755ef2d884"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e007eab01eb07a2119e6b7c0b6977e772ea35081",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagkkACgkQV692LbM1\nMyKobQ//d6rqe3Ej7KNgMQxy/pEvEuq7AA0Q+G3MivPiRHV6v9R6HYeLv3ZSezyB\nHzELXmhELrP/05OYXX0AWNQvkejkUMrD1oi5QdDKUS4hrCIXRagn5ERibqDuCz4Z\n3FeLsL5qVYJ3cZFpD9YzSi1SRRYKpKx5vG1UQxhZQPpibvFm6916VSwOl1VLRLVX\nld/Y15xuh0vZXnoDPo5ABTvv/+etrBnTPIBfk+uiDyGJ+LIlLq1bmtCugCmxdtSL\nws0b6vS3ewcBGeFl+QiGfchyWtj/AxeObBdYoQqoKHv//OS2Co2WuT2jTK0JjIeM\nR16b2+l1802HhNEWeQz15UILmPbnqsYk1tFbFXBfygeNlmiEcSyp6EVUXKvNnh8V\nyHcjusuVtBDF+FRzKAE5cBAq9Sz1iibMII8ZD4KaCOnS3IBIpQDwTx/bgR12EDCz\nlBCoGb396qsF5/6p+/as7XehOethNLcJY0UJxAhTxXy22YquxkUvHOoTDSg/n2g5\nal732O6DDFTE69OU5LsIeab6Vk3tjbJ3tmrqECz13UmQFnsnK+7yLqGoSk/0EXic\nyBFUOv30lFSqXPSWzZIqsnD529M00dS/UUhvIh087vVavnWG1lEV4PgD0V+1sdT6\nuSBzZO2v7oi8nHq0/3O2cmCJfzjv3T+0za9VTBzqLbtDDKafrhU=\n=OX2s\n-----END PGP SIGNATURE-----",
        "payload": "tree b7fe904daf3289607dd86b0808a0e2755ef2d884\nparent 9fab9ed2ad077ec8eee94c74e4a6f17b51994246\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503030531 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298121 +0900\n\n[refactor] Use uint256 vector instead of set iterator vector in trickling tx relay.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e007eab01eb07a2119e6b7c0b6977e772ea35081",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e007eab01eb07a2119e6b7c0b6977e772ea35081",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e007eab01eb07a2119e6b7c0b6977e772ea35081/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fab9ed2ad077ec8eee94c74e4a6f17b51994246",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fab9ed2ad077ec8eee94c74e4a6f17b51994246"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "444f5a8dbc5125b2d704342c7f0fa7f847d0d629",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e007eab01eb07a2119e6b7c0b6977e772ea35081/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e007eab01eb07a2119e6b7c0b6977e772ea35081/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e007eab01eb07a2119e6b7c0b6977e772ea35081",
        "patch": "@@ -2788,11 +2788,11 @@ class CompareInvMempoolOrder\n         mp = _mempool;\n     }\n \n-    bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)\n+    bool operator()(uint256& a, uint256& b)\n     {\n         /* As std::make_heap produces a max-heap, we want the entries with the\n          * fewest ancestors/highest fee to sort later. */\n-        return mp->CompareDepthAndScore(*b, *a);\n+        return mp->CompareDepthAndScore(b, a);\n     }\n };\n \n@@ -3128,10 +3128,11 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 int64_t nInvTrickleTimeStart = GetTimeMicros();\n                 {\n                 // Produce a vector with all candidates for sending\n-                std::vector<std::set<uint256>::iterator> vInvTx;\n+                std::vector<uint256> vInvTx;\n                 vInvTx.reserve(pto->setInventoryTxToSend.size());\n-                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n-                    vInvTx.push_back(it);\n+                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); ) {\n+                    vInvTx.push_back(*it);\n+                    it = pto->setInventoryTxToSend.erase(it);\n                 }\n                 CAmount filterrate = 0;\n                 {\n@@ -3151,11 +3152,8 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     nInvTrickleProcessedCount++;\n                     // Fetch the top element from the heap\n                     std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n-                    std::set<uint256>::iterator it = vInvTx.back();\n+                    uint256 hash = vInvTx.back();\n                     vInvTx.pop_back();\n-                    uint256 hash = *it;\n-                    // Remove it from the to-be-sent set\n-                    pto->setInventoryTxToSend.erase(it);\n                     // Check if not in the filter already\n                     if (pto->filterInventoryKnown.contains(hash)) {\n                         continue;"
      }
    ]
  },
  {
    "sha": "8036b79c04616c9edc782591f140f8a36db17acb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDM2Yjc5YzA0NjE2YzllZGM3ODI1OTFmMTQwZjhhMzZkYjE3YWNi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-18T04:50:41Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:42Z"
      },
      "message": "[mempool] Add TxMemPoolSnapshot class.\n\nThe mempool snapshot feature can be used to fetch a subset of the transactions in the mempool, and to make queries against that without caring about concurrency (the snapshot is single thread use only), saving a bunch of LOCK() calls (millions per day).",
      "tree": {
        "sha": "a55721fdd1619eb3596f253722dfbd1276a10150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a55721fdd1619eb3596f253722dfbd1276a10150"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8036b79c04616c9edc782591f140f8a36db17acb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagkoACgkQV692LbM1\nMyLFAA/+O7aSFxbkBMbyZ6Pt67ZrbsIYYLE8L71GbYW3QdRTrxcGMaci8LPeNgWK\nZlpkCWso0hpSoRANu/ZQdVX35bAuxsRD2wfIRiopkG3shKx7PMCjurdGAkxfHdDR\neIwLYFVWRIY9QZXtA7l+Z+OERNywaGQ4fzs2RSU7p5BbKmyGcvdWF8YPaWM9TQYO\neKXy39X/WxOQIIBzBDwq6bvBMgQtyxJ6zqRkQehyDvvWsJhf2R+I3oH4xPPIukkW\nrP1b69d+ergwRwa6egkdnGabvkVGO3Q5w1B3mf6VSBkL94SXfZF21N+I8dXdwYRl\nZTOg85UZmn0wQBh2vo2zI2Ciav1taY4N5JDt8v7xMI8Og2HrSE53MDpDa9qbRwlq\n4euvU/o5D6RsvWno6/v3W5RQ+MqITKTxKTOvt3wcu+1rtX7oLnST31K5jGT9h9TW\nxORY/eLeIG4ZMWrlHDLaxiH5cgJYc5Uhwi3zXGcpoIJqnoXK2Pyxjy7utOdM5zjG\nio8ww5xy+unT4BIEFT27g7ddT5vViil64NklRjIoFlFjJo19CwOZP3r39dxQJhI1\nOJJ3B5X6hYeVIq37r/7EyhXPPdZkje3aa+jbYO3NVniaVYUQ3bIH+flSVhKEVWaN\nHo3wfpngryz6uOyLWqo3a2VfwqUrQ8HDfXSNvJ1fckrcQmJqGfA=\n=sMWd\n-----END PGP SIGNATURE-----",
        "payload": "tree a55721fdd1619eb3596f253722dfbd1276a10150\nparent e007eab01eb07a2119e6b7c0b6977e772ea35081\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503031841 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298122 +0900\n\n[mempool] Add TxMemPoolSnapshot class.\n\nThe mempool snapshot feature can be used to fetch a subset of the transactions in the mempool, and to make queries against that without caring about concurrency (the snapshot is single thread use only), saving a bunch of LOCK() calls (millions per day).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8036b79c04616c9edc782591f140f8a36db17acb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8036b79c04616c9edc782591f140f8a36db17acb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8036b79c04616c9edc782591f140f8a36db17acb/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e007eab01eb07a2119e6b7c0b6977e772ea35081",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e007eab01eb07a2119e6b7c0b6977e772ea35081",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e007eab01eb07a2119e6b7c0b6977e772ea35081"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c37a37479136f0108f6fda4744511061f09425a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8036b79c04616c9edc782591f140f8a36db17acb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8036b79c04616c9edc782591f140f8a36db17acb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8036b79c04616c9edc782591f140f8a36db17acb",
        "patch": "@@ -1066,3 +1066,40 @@ bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLi\n }\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+TxMemPoolSnapshot CTxMemPool::snapshot(const std::set<uint256> hashes) const\n+{\n+    indexed_transaction_set mapTxOut;\n+    {\n+        LOCK(cs);\n+        for (const uint256& hash : hashes) {\n+            auto it = mapTx.find(hash);\n+            if (it != mapTx.end()) {\n+                mapTxOut.insert(*it);\n+            }\n+        }\n+    }\n+    return TxMemPoolSnapshot(mapTxOut);\n+}\n+\n+bool TxMemPoolSnapshot::compareDepthAndScore(const uint256& hasha, const uint256& hashb)\n+{\n+    CTxMemPool::indexed_transaction_set::const_iterator i = mapTx.find(hasha);\n+    if (i == mapTx.end()) return false;\n+    CTxMemPool::indexed_transaction_set::const_iterator j = mapTx.find(hashb);\n+    if (j == mapTx.end()) return true;\n+    uint64_t counta = i->GetCountWithAncestors();\n+    uint64_t countb = j->GetCountWithAncestors();\n+    if (counta == countb) {\n+        return CompareTxMemPoolEntryByScore()(*i, *j);\n+    }\n+    return counta < countb;\n+}\n+\n+TxMempoolInfo TxMemPoolSnapshot::info(const uint256& hash) const\n+{\n+    CTxMemPool::indexed_transaction_set::const_iterator i = mapTx.find(hash);\n+    if (i == mapTx.end())\n+        return TxMempoolInfo();\n+    return GetInfo(i);\n+}"
      },
      {
        "sha": "575d7f4cbc56efbfaed63d9c787af7a099680d2b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8036b79c04616c9edc782591f140f8a36db17acb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8036b79c04616c9edc782591f140f8a36db17acb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=8036b79c04616c9edc782591f140f8a36db17acb",
        "patch": "@@ -294,6 +294,7 @@ struct mining_score {};\n struct ancestor_score {};\n \n class CBlockPolicyEstimator;\n+class TxMemPoolSnapshot;\n \n /**\n  * Information about a mempool transaction.\n@@ -617,6 +618,8 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n+    TxMemPoolSnapshot snapshot(const std::set<uint256> hashes) const;\n+\n     CTransactionRef get(const uint256& hash) const;\n     TxMempoolInfo info(const uint256& hash) const;\n     std::vector<TxMempoolInfo> infoAll() const;\n@@ -686,6 +689,17 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n };\n \n+class TxMemPoolSnapshot\n+{\n+protected:\n+    CTxMemPool::indexed_transaction_set mapTx;\n+\n+public:\n+    TxMemPoolSnapshot(CTxMemPool::indexed_transaction_set mapTxIn) : mapTx(mapTxIn) {};\n+    bool compareDepthAndScore(const uint256& hasha, const uint256& hashb);\n+    TxMempoolInfo info(const uint256& hash) const;\n+};\n+\n /**\n  * DisconnectedBlockTransactions\n "
      }
    ]
  },
  {
    "sha": "463080a342b432047e7cd4abebc16b588d3cdd9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjMwODBhMzQyYjQzMjA0N2U3Y2Q0YWJlYmMxNmI1ODhkM2NkZDlm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-18T05:48:19Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:42Z"
      },
      "message": "[net] Use mempool snapshot for tx relay trickle.",
      "tree": {
        "sha": "2a113f34c98aed5910ec7cf9d185bf5466659bc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a113f34c98aed5910ec7cf9d185bf5466659bc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/463080a342b432047e7cd4abebc16b588d3cdd9f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagkoACgkQV692LbM1\nMyIdzw/+PiHw/XyZoedZeiTuXSHB3LbDZcpZ8XFDCnUPk9khup+Vx4+lyIch8Eav\noCel7tHMRxNjgGAqGDiDuACgPFfQv3NJbNKiWn2a9Y18dI2SNJnd+boovGH+Jjjy\nq3eAAs4AEd2fXrZXhUZpM7N2AOUI+dghzJ5vAcH+RCUGNkltpTFarVp577u8M34/\nGhXsjaCSYTyyLMS3FEJnHq4RHencBV61t+un/7AGDiAjf06u84/QkneQwtbd10iK\nGBr2uNCUwsVdETZAxgvbaGqNjSBiGMA+wHD27FHMCcaa0idf2eikx3fDiRyuSzh7\nJGcg6d8kS5h+AYfr0/ktZdX/4o8OZrY8jO+dLJbwIj+NaK3JWr7ABz5v1Fr0ZFKR\nApkT0NUE4H1GwTPio8S9ssJ2WfCBgW/p/zkHYrwNR0G+LXWBlWs950m1O9BKE2Vs\nrbcGDdNAcPQhxNgxq/8LWNuHUYqZK1veyUjoiLu6Z6Ahi3jeAk4c2Q6XBExZDrjr\nwIB5uQadGW6yOYWAJByAOpGa0CI550d6mtE9GXpjkINjAk3F8fAch/sMte9Hm/pp\npxW9GRPCP8m0tHsSIhG5ooGLQ50YqX0VXdD6b0fSWhpjTfriZtrZuQTODGlE4X47\nAERF5jwFlBIM70oB9cL5Yto/eZ4stbWNLgJsrjhy8doIxuoZ794=\n=a8Wi\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a113f34c98aed5910ec7cf9d185bf5466659bc0\nparent 8036b79c04616c9edc782591f140f8a36db17acb\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503035299 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298122 +0900\n\n[net] Use mempool snapshot for tx relay trickle.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/463080a342b432047e7cd4abebc16b588d3cdd9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/463080a342b432047e7cd4abebc16b588d3cdd9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/463080a342b432047e7cd4abebc16b588d3cdd9f/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8036b79c04616c9edc782591f140f8a36db17acb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8036b79c04616c9edc782591f140f8a36db17acb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8036b79c04616c9edc782591f140f8a36db17acb"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 11,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b29db96a17c61951fbb40a8319bf6fa1402e6564",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/463080a342b432047e7cd4abebc16b588d3cdd9f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/463080a342b432047e7cd4abebc16b588d3cdd9f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=463080a342b432047e7cd4abebc16b588d3cdd9f",
        "patch": "@@ -2781,18 +2781,15 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n \n class CompareInvMempoolOrder\n {\n-    CTxMemPool *mp;\n+    TxMemPoolSnapshot* mp;\n public:\n-    explicit CompareInvMempoolOrder(CTxMemPool *_mempool)\n-    {\n-        mp = _mempool;\n-    }\n+    explicit CompareInvMempoolOrder(TxMemPoolSnapshot* mpIn) : mp(mpIn) {}\n \n     bool operator()(uint256& a, uint256& b)\n     {\n         /* As std::make_heap produces a max-heap, we want the entries with the\n          * fewest ancestors/highest fee to sort later. */\n-        return mp->CompareDepthAndScore(b, a);\n+        return mp->compareDepthAndScore(b, a);\n     }\n };\n \n@@ -3129,8 +3126,9 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 {\n                 // Produce a vector with all candidates for sending\n                 std::vector<uint256> vInvTx;\n-                vInvTx.reserve(pto->setInventoryTxToSend.size());\n-                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); ) {\n+                vInvTx.reserve(std::max<size_t>(pto->setInventoryTxToSend.size(), INVENTORY_BROADCAST_MAX));\n+                size_t count = 0;\n+                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); count++ < INVENTORY_BROADCAST_MAX && it != pto->setInventoryTxToSend.end(); ) {\n                     vInvTx.push_back(*it);\n                     it = pto->setInventoryTxToSend.erase(it);\n                 }\n@@ -3139,16 +3137,17 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     LOCK(pto->cs_feeFilter);\n                     filterrate = pto->minFeeFilter;\n                 }\n+                // Make a mempool snapshot to avoid a high number of locks\n+                TxMemPoolSnapshot mps = mempool.snapshot(std::set<uint256>(vInvTx.begin(), vInvTx.end()));\n                 // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n                 // A heap is used so that not all items need sorting if only a few are being sent.\n-                CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n+                CompareInvMempoolOrder compareInvMempoolOrder(&mps);\n                 std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                 // No reason to drain out at many times the network's capacity,\n                 // especially since we have many peers and some will draw much shorter delays.\n-                unsigned int nRelayedTransactions = 0;\n                 LOCK(pto->cs_filter);\n                 nInvTrickleCount += vInvTx.size();\n-                while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n+                while (!vInvTx.empty()) {\n                     nInvTrickleProcessedCount++;\n                     // Fetch the top element from the heap\n                     std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n@@ -3159,7 +3158,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         continue;\n                     }\n                     // Not in the mempool anymore? don't bother sending it.\n-                    auto txinfo = mempool.info(hash);\n+                    auto txinfo = mps.info(hash);\n                     if (!txinfo.tx) {\n                         continue;\n                     }\n@@ -3169,7 +3168,6 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n-                    nRelayedTransactions++;\n                     {\n                         // Expire old relay messages\n                         while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)"
      }
    ]
  },
  {
    "sha": "523508d07b9312145c1609130b002942adcb73cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjM1MDhkMDdiOTMxMjE0NWMxNjA5MTMwYjAwMjk0MmFkY2I3M2Nk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-18T09:33:58Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:42Z"
      },
      "message": "f'swap to vector from set to avoid instantiation",
      "tree": {
        "sha": "2b47033872957266767b36f9189c631e4382038c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b47033872957266767b36f9189c631e4382038c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/523508d07b9312145c1609130b002942adcb73cd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagkoACgkQV692LbM1\nMyJ7oQ/+OMifp9dVt2wqdNt2bk40H4mGws0+jZ+b9YNrRgp9q4DK7HINtBUuQf/Y\nn65n9Y4hkaFkCKBJUY6sUwS5SCYT4eXiVKePhq0fOLYiiAn+AxvwUn5DX6qoL57d\n1ASIG/vE0bo2HRLJ/XZuLbmx8EaKPtRgaXh8dhrZC7UrjhR24l/VishZesgh5iGl\nm5pAr+4kafJRlWYc6GCJi7pHl8QA+X50b827y9RwI70L/Yb6cN2uMeL+xCBHwAvs\nizBGdRD5hU46mqJiyCtp+80pOrKCTPK8g+/TRBaZDcLRzgHnA4yE9rulQWpvCFzN\n+PnWUEqIHAvWrNwFa0WWHPTimbh1HIcWsfjT29ETziqQAPq3UkSllejxv/LwvZa1\ntnvoQ3aBwibUxvdisFuUjGnh322Ci1ontg2EuA3Vue+Fge4fgqK5nFo1fpO3WhDl\ndllH7PkGJPGo/ppKbveDlpfhryOoxfvn8/LpCcBx5BmvbuTTN1gH993Pe370lzBz\nPoBdsXzsGm4gAJ9WbNq+FVgDyrWTml9FxtRgstcpByp+wQagNpxoNmJtgp2CVsJu\nl3gBJzsNv+WSdlov7w5exBrKXQpqgm+4EuIXbV9izS3xCveAhuybmW6KutCYWo1S\npyj9Y2VBZ30gJw43spfDTuSlxVxWwJY/9ARj+1piaoiLd5yTrP0=\n=Eadk\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b47033872957266767b36f9189c631e4382038c\nparent 463080a342b432047e7cd4abebc16b588d3cdd9f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503048838 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298122 +0900\n\nf'swap to vector from set to avoid instantiation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/523508d07b9312145c1609130b002942adcb73cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/523508d07b9312145c1609130b002942adcb73cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/523508d07b9312145c1609130b002942adcb73cd/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "463080a342b432047e7cd4abebc16b588d3cdd9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/463080a342b432047e7cd4abebc16b588d3cdd9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/463080a342b432047e7cd4abebc16b588d3cdd9f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "30831c78067aa8bd7b13e9abdcb29b4dbf0ad340",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523508d07b9312145c1609130b002942adcb73cd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523508d07b9312145c1609130b002942adcb73cd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=523508d07b9312145c1609130b002942adcb73cd",
        "patch": "@@ -3138,7 +3138,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     filterrate = pto->minFeeFilter;\n                 }\n                 // Make a mempool snapshot to avoid a high number of locks\n-                TxMemPoolSnapshot mps = mempool.snapshot(std::set<uint256>(vInvTx.begin(), vInvTx.end()));\n+                TxMemPoolSnapshot mps = mempool.snapshot(vInvTx);\n                 // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n                 // A heap is used so that not all items need sorting if only a few are being sent.\n                 CompareInvMempoolOrder compareInvMempoolOrder(&mps);"
      },
      {
        "sha": "48255f3fb210ea5f60e32459a92ec2f2c7e37fe3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523508d07b9312145c1609130b002942adcb73cd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523508d07b9312145c1609130b002942adcb73cd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=523508d07b9312145c1609130b002942adcb73cd",
        "patch": "@@ -1067,7 +1067,7 @@ bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLi\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-TxMemPoolSnapshot CTxMemPool::snapshot(const std::set<uint256> hashes) const\n+TxMemPoolSnapshot CTxMemPool::snapshot(const std::vector<uint256>& hashes) const\n {\n     indexed_transaction_set mapTxOut;\n     {"
      },
      {
        "sha": "b78e20f5cb2b01c7814f45fd67b7d74acd0b7a44",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523508d07b9312145c1609130b002942adcb73cd/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523508d07b9312145c1609130b002942adcb73cd/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=523508d07b9312145c1609130b002942adcb73cd",
        "patch": "@@ -618,7 +618,7 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n-    TxMemPoolSnapshot snapshot(const std::set<uint256> hashes) const;\n+    TxMemPoolSnapshot snapshot(const std::vector<uint256>& hashes) const;\n \n     CTransactionRef get(const uint256& hash) const;\n     TxMempoolInfo info(const uint256& hash) const;"
      }
    ]
  },
  {
    "sha": "210b236525bcbe99585e164970f56f4ccd758ce4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTBiMjM2NTI1YmNiZTk5NTg1ZTE2NDk3MGY1NmY0Y2NkNzU4Y2U0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T05:45:50Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-21T06:48:43Z"
      },
      "message": "f'revert to using set iterator and remove from setInventoryTxtoSend in while loop",
      "tree": {
        "sha": "29d9ae3ac7469a2505a7b6ae7e4bba216c793e8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29d9ae3ac7469a2505a7b6ae7e4bba216c793e8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/210b236525bcbe99585e164970f56f4ccd758ce4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlmagksACgkQV692LbM1\nMyIArA/9E48NwpHmA+uLycFPKEnRruLVYAGI54HDDAj9oOLdg3OUBeF+PzQmLjZE\n/2Q2NllaPYLJE3R9b0NXZlfptJU4MhLA/27hxJiG4OhlhjkyeR+S1azuKXE5RA1u\nB8AhGWVn1WfRm47L59F0mUC1xAepP+cHE1GF7Gyxxy/fInnpBX1r7cQeeTu5Dtro\nWEI8DbofZNUP3MbP3dZDsMLoAaqmOsyQrUUsAiF/aLR3eIRv+Osx/zVD2O7+IV5q\n1h6OnjT1ZdiNQMeFp7vF4qTbhp7li1GgdNKoc3nQbf8Rw97lgAzOP7AjR5lLB5a9\nYKxnOt3meE7CdOZnSefp6Fdg6aEm3YrlmC2W8zxpXszqAfneqJ+MaxhmNWQB5wBl\n50OYxtb15uQH7QGd+U8zBLbQEdxlGRVE3enkWlH11y2xBHvfbjx7e7HUogcGahA9\nk5sFSkmmSpwRUNmsNFf9YIzwGhRZu0xUdeaF7/jr3wITEzkyry4IV+3Fpvd9BNJV\nhwd0ihVD1qO9xalJC0UT5t46mcplPp0b62OxkXxfMEKWG4/qxP6IOSXd+tN/1rA+\nZ23nuZzALZWZaz1L4qXoSVd5kcQDwzkCdjmHBn9WunEJ2umxSLMZnGkczHe0NpJ0\nghLTrgBjKJ/2k+aX9sbhK8biRT/EbuRJaitiITaQbRixMaRV17Q=\n=lzAz\n-----END PGP SIGNATURE-----",
        "payload": "tree 29d9ae3ac7469a2505a7b6ae7e4bba216c793e8a\nparent 523508d07b9312145c1609130b002942adcb73cd\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503294350 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1503298123 +0900\n\nf'revert to using set iterator and remove from setInventoryTxtoSend in while loop\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b236525bcbe99585e164970f56f4ccd758ce4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/210b236525bcbe99585e164970f56f4ccd758ce4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b236525bcbe99585e164970f56f4ccd758ce4/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "523508d07b9312145c1609130b002942adcb73cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/523508d07b9312145c1609130b002942adcb73cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/523508d07b9312145c1609130b002942adcb73cd"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8a3040acf48b605121464733c12c68e0606ae0f4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b236525bcbe99585e164970f56f4ccd758ce4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b236525bcbe99585e164970f56f4ccd758ce4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=210b236525bcbe99585e164970f56f4ccd758ce4",
        "patch": "@@ -2785,11 +2785,11 @@ class CompareInvMempoolOrder\n public:\n     explicit CompareInvMempoolOrder(TxMemPoolSnapshot* mpIn) : mp(mpIn) {}\n \n-    bool operator()(uint256& a, uint256& b)\n+    bool operator()(std::set<uint256>::iterator& a, std::set<uint256>::iterator& b)\n     {\n         /* As std::make_heap produces a max-heap, we want the entries with the\n          * fewest ancestors/highest fee to sort later. */\n-        return mp->compareDepthAndScore(b, a);\n+        return mp->compareDepthAndScore(*b, *a);\n     }\n };\n \n@@ -3125,12 +3125,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 int64_t nInvTrickleTimeStart = GetTimeMicros();\n                 {\n                 // Produce a vector with all candidates for sending\n-                std::vector<uint256> vInvTx;\n-                vInvTx.reserve(std::max<size_t>(pto->setInventoryTxToSend.size(), INVENTORY_BROADCAST_MAX));\n-                size_t count = 0;\n-                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); count++ < INVENTORY_BROADCAST_MAX && it != pto->setInventoryTxToSend.end(); ) {\n-                    vInvTx.push_back(*it);\n-                    it = pto->setInventoryTxToSend.erase(it);\n+                std::vector<std::set<uint256>::iterator> vInvTx;\n+                vInvTx.reserve(pto->setInventoryTxToSend.size());\n+                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); ++it) {\n+                    vInvTx.push_back(it);\n                 }\n                 CAmount filterrate = 0;\n                 {\n@@ -3145,14 +3143,18 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                 // No reason to drain out at many times the network's capacity,\n                 // especially since we have many peers and some will draw much shorter delays.\n+                unsigned int nRelayedTransactions = 0;\n                 LOCK(pto->cs_filter);\n                 nInvTrickleCount += vInvTx.size();\n-                while (!vInvTx.empty()) {\n+                while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n                     nInvTrickleProcessedCount++;\n                     // Fetch the top element from the heap\n                     std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n-                    uint256 hash = vInvTx.back();\n+                    std::set<uint256>::iterator it = vInvTx.back();\n                     vInvTx.pop_back();\n+                    uint256 hash = *it;\n+                    // Remove it from the to-be-sent set\n+                    pto->setInventoryTxToSend.erase(it);\n                     // Check if not in the filter already\n                     if (pto->filterInventoryKnown.contains(hash)) {\n                         continue;\n@@ -3168,6 +3170,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n+                    nRelayedTransactions++;\n                     {\n                         // Expire old relay messages\n                         while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)"
      },
      {
        "sha": "2cd26c7ce99065270bba0f318f38f252f11d4b5b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b236525bcbe99585e164970f56f4ccd758ce4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b236525bcbe99585e164970f56f4ccd758ce4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=210b236525bcbe99585e164970f56f4ccd758ce4",
        "patch": "@@ -1067,13 +1067,13 @@ bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLi\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-TxMemPoolSnapshot CTxMemPool::snapshot(const std::vector<uint256>& hashes) const\n+TxMemPoolSnapshot CTxMemPool::snapshot(const std::vector<std::set<uint256>::iterator>& hashes) const\n {\n     indexed_transaction_set mapTxOut;\n     {\n         LOCK(cs);\n-        for (const uint256& hash : hashes) {\n-            auto it = mapTx.find(hash);\n+        for (const auto& hit : hashes) {\n+            auto it = mapTx.find(*hit);\n             if (it != mapTx.end()) {\n                 mapTxOut.insert(*it);\n             }"
      },
      {
        "sha": "094612d754bf771c368b697a5b5c9d6516c74e48",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b236525bcbe99585e164970f56f4ccd758ce4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b236525bcbe99585e164970f56f4ccd758ce4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=210b236525bcbe99585e164970f56f4ccd758ce4",
        "patch": "@@ -618,7 +618,7 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n-    TxMemPoolSnapshot snapshot(const std::vector<uint256>& hashes) const;\n+    TxMemPoolSnapshot snapshot(const std::vector<std::set<uint256>::iterator>& hashes) const;\n \n     CTransactionRef get(const uint256& hash) const;\n     TxMempoolInfo info(const uint256& hash) const;"
      }
    ]
  }
]