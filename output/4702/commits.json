[
  {
    "sha": "ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjkxZjUxZTY4MzRlZjYwMjNkNzBmYjQwYzgyZmVmYjZlOGM3Yzdj",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-08-13T15:38:45Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-10-03T02:35:35Z"
      },
      "message": "[Wallet] Store accounting entries in memory",
      "tree": {
        "sha": "14a891c0f55c4cb867e2ce8140460b6e2048864a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14a891c0f55c4cb867e2ce8140460b6e2048864a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f96e8bc652cb14c6fdefe5279ee983054faa2a"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 36,
      "deletions": 80
    },
    "files": [
      {
        "sha": "ee466c18d02266051ebd1aeb9905dc0c95efd279",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "patch": "@@ -577,7 +577,13 @@ CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     }\n \n     // Tally internal accounting entries\n-    nBalance += walletdb.GetAccountCreditDebit(strAccount);\n+    if (pwalletMain->mapAccountingEntries.count(strAccount))\n+    {\n+        std::pair <std::multimap<std::string, CAccountingEntry>::const_iterator, std::multimap<std::string, CAccountingEntry>::const_iterator> range;\n+        range = pwalletMain->mapAccountingEntries.equal_range(strAccount);\n+        for (std::multimap<std::string, CAccountingEntry>::const_iterator it = range.first; it != range.second; ++it)\n+            nBalance += it->second.nCreditDebit;\n+    }\n \n     return nBalance;\n }\n@@ -734,6 +740,9 @@ Value movecmd(const Array& params, bool fHelp)\n     if (!walletdb.TxnCommit())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n+    pwalletMain->AddAccountingEntry(debit);\n+    pwalletMain->AddAccountingEntry(credit);\n+\n     return true;\n }\n \n@@ -1390,10 +1399,8 @@ Value listaccounts(const Array& params, bool fHelp)\n         }\n     }\n \n-    list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n-    BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n-        mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n+    for (std::multimap<std::string, CAccountingEntry>::iterator it = pwalletMain->mapAccountingEntries.begin(); it != pwalletMain->mapAccountingEntries.end(); ++it)\n+        mapAccountBalances[it->second.strAccount] += it->second.nCreditDebit;\n \n     Object ret;\n     BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {"
      },
      {
        "sha": "ea358d59589e75210e9b37c46cb9ccd240599262",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "patch": "@@ -17,15 +17,11 @@ BOOST_AUTO_TEST_SUITE(accounting_tests)\n static void\n GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)\n {\n-    std::list<CAccountingEntry> aes;\n-\n     results.clear();\n     BOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n-    walletdb.ListAccountCreditDebit(\"\", aes);\n-    BOOST_FOREACH(CAccountingEntry& ae, aes)\n-    {\n-        results[ae.nOrderPos] = ae;\n-    }\n+\n+    for (std::multimap<std::string, CAccountingEntry>::iterator it = pwalletMain->mapAccountingEntries.begin(); it != pwalletMain->mapAccountingEntries.end(); ++it)\n+        results[it->second.nOrderPos] = it->second;\n }\n \n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n@@ -43,7 +39,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n     pwalletMain->AddToWallet(wtx);\n@@ -53,7 +49,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae);\n \n     GetResults(walletdb, results);\n \n@@ -69,7 +65,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n     ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae);\n \n     GetResults(walletdb, results);\n \n@@ -119,7 +115,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    walletdb.WriteAccountingEntry(ae);\n+    pwalletMain->AddAccountingEntry(ae);\n \n     GetResults(walletdb, results);\n "
      },
      {
        "sha": "34cfb1e7d9cc82402e2254175e421a84055ff26d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "patch": "@@ -681,6 +681,11 @@ void CWallet::EraseFromWallet(const uint256 &hash)\n     return;\n }\n \n+void CWallet::AddAccountingEntry(const CAccountingEntry& entry, bool fFromLoadWallet)\n+{\n+    AssertLockHeld(cs_wallet);\n+    std::multimap<std::string, CAccountingEntry>::iterator it = mapAccountingEntries.insert(make_pair(entry.strAccount, entry));\n+}\n \n isminetype CWallet::IsMine(const CTxIn &txin) const\n {"
      },
      {
        "sha": "0067f26ca42c5e77a5600c76569c9d3f311e58f9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "patch": "@@ -164,6 +164,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    std::multimap<std::string, CAccountingEntry> mapAccountingEntries;\n \n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n@@ -238,7 +239,6 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef std::multimap<int64_t, TxPair > TxItems;\n-\n     /** Get the wallet's activity log\n         @return multimap of ordered transactions and accounting entries\n         @warning Returned pointers are *only* valid within the scope of passed acentries\n@@ -247,6 +247,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n+    void AddAccountingEntry(const CAccountingEntry& entry, bool fFromLoadWallet=false);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);"
      },
      {
        "sha": "389b9b93715b261d98ff7d95f84c3ff3f3a22b04",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 61,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "patch": "@@ -187,61 +187,6 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n-{\n-    list<CAccountingEntry> entries;\n-    ListAccountCreditDebit(strAccount, entries);\n-\n-    CAmount nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n-        nCreditDebit += entry.nCreditDebit;\n-\n-    return nCreditDebit;\n-}\n-\n-void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n-{\n-    bool fAllAccounts = (strAccount == \"*\");\n-\n-    Dbc* pcursor = GetCursor();\n-    if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n-    unsigned int fFlags = DB_SET_RANGE;\n-    while (true)\n-    {\n-        // Read next record\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64_t(0));\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n-        fFlags = DB_NEXT;\n-        if (ret == DB_NOTFOUND)\n-            break;\n-        else if (ret != 0)\n-        {\n-            pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n-        }\n-\n-        // Unserialize\n-        string strType;\n-        ssKey >> strType;\n-        if (strType != \"acentry\")\n-            break;\n-        CAccountingEntry acentry;\n-        ssKey >> acentry.strAccount;\n-        if (!fAllAccounts && acentry.strAccount != strAccount)\n-            break;\n-\n-        ssValue >> acentry;\n-        ssKey >> acentry.nEntryNo;\n-        entries.push_back(acentry);\n-    }\n-\n-    pcursor->close();\n-}\n-\n DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n {\n     LOCK(pwallet->cs_wallet);\n@@ -258,11 +203,10 @@ DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n         CWalletTx* wtx = &((*it).second);\n         txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n     }\n-    list<CAccountingEntry> acentries;\n-    ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    for (std::multimap<std::string, CAccountingEntry>::iterator it = pwallet->mapAccountingEntries.begin(); it != pwallet->mapAccountingEntries.end(); ++it)\n     {\n-        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+        CAccountingEntry* entry = &((*it).second);\n+        txByTime.insert(make_pair(entry->nTime, TxPair((CWalletTx*)0, entry)));\n     }\n \n     int64_t& nOrderPosNext = pwallet->nOrderPosNext;\n@@ -401,13 +345,18 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (nNumber > nAccountingEntryNumber)\n                 nAccountingEntryNumber = nNumber;\n \n+            CAccountingEntry acentry;\n+            ssValue >> acentry;\n+\n             if (!wss.fAnyUnordered)\n             {\n-                CAccountingEntry acentry;\n-                ssValue >> acentry;\n                 if (acentry.nOrderPos == -1)\n                     wss.fAnyUnordered = true;\n             }\n+\n+            acentry.strAccount = strAccount;\n+            acentry.nEntryNo = nNumber;\n+            pwallet->AddAccountingEntry(acentry, true);\n         }\n         else if (strType == \"watchs\")\n         {"
      },
      {
        "sha": "fac1fd91485cef5600e7ea34ae999946f77dc493",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "patch": "@@ -119,8 +119,6 @@ class CWalletDB : public CDB\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    CAmount GetAccountCreditDebit(const std::string& strAccount);\n-    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet* pwallet);\n     DBErrors LoadWallet(CWallet* pwallet);"
      }
    ]
  },
  {
    "sha": "ac09e08364721b9556e020875f77157ad91d9cdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzA5ZTA4MzY0NzIxYjk1NTZlMDIwODc1Zjc3MTU3YWQ5MWQ5Y2Rj",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-08-14T09:34:54Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-10-03T02:35:35Z"
      },
      "message": "[Wallet] Replace OrderedTxItems(..) with in-memory map",
      "tree": {
        "sha": "cff5ab07a06abc3190d0facf4941a938ee94969c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cff5ab07a06abc3190d0facf4941a938ee94969c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac09e08364721b9556e020875f77157ad91d9cdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac09e08364721b9556e020875f77157ad91d9cdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac09e08364721b9556e020875f77157ad91d9cdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac09e08364721b9556e020875f77157ad91d9cdc/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef91f51e6834ef6023d70fb40c82fefb6e8c7c7c"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 31,
      "deletions": 37
    },
    "files": [
      {
        "sha": "fad80af553fe25af51ae12604ee620897dc60e3d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac09e08364721b9556e020875f77157ad91d9cdc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac09e08364721b9556e020875f77157ad91d9cdc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ac09e08364721b9556e020875f77157ad91d9cdc",
        "patch": "@@ -1195,6 +1195,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                         copyTo->WriteToDisk();\n                     }\n                 }\n+                pwalletMain->InitMapOrderedTxItems();\n             }\n         }\n     } // (!fDisableWallet)"
      },
      {
        "sha": "2371b1b23720cd6e3625d24d0191d7e9b46139fe",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac09e08364721b9556e020875f77157ad91d9cdc/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac09e08364721b9556e020875f77157ad91d9cdc/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ac09e08364721b9556e020875f77157ad91d9cdc",
        "patch": "@@ -1302,11 +1302,8 @@ Value listtransactions(const Array& params, bool fHelp)\n \n     Array ret;\n \n-    std::list<CAccountingEntry> acentries;\n-    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n-\n     // iterate backwards until we have nCount items to return:\n-    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+    for (CWallet::TxItems::reverse_iterator it = pwalletMain->mapOrderedTxItems.rbegin(); it != pwalletMain->mapOrderedTxItems.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)"
      },
      {
        "sha": "7d140e1e327ed3044c04ed27090ff1fb80c6d30e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 28,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac09e08364721b9556e020875f77157ad91d9cdc/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac09e08364721b9556e020875f77157ad91d9cdc/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ac09e08364721b9556e020875f77157ad91d9cdc",
        "patch": "@@ -478,31 +478,6 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n     return nRet;\n }\n \n-CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount)\n-{\n-    AssertLockHeld(cs_wallet); // mapWallet\n-    CWalletDB walletdb(strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n-    TxItems txOrdered;\n-\n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    acentries.clear();\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    return txOrdered;\n-}\n-\n void CWallet::MarkDirty()\n {\n     {\n@@ -545,9 +520,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                     {\n                         // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n                         int64_t latestTolerated = latestNow + 300;\n-                        std::list<CAccountingEntry> acentries;\n-                        TxItems txOrdered = OrderedTxItems(acentries);\n-                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        for (TxItems::reverse_iterator it = mapOrderedTxItems.rbegin(); it != mapOrderedTxItems.rend(); ++it)\n                         {\n                             CWalletTx *const pwtx = (*it).second.first;\n                             if (pwtx == &wtx)\n@@ -581,6 +554,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                              wtxIn.hashBlock.ToString());\n             }\n             AddToSpends(hash);\n+            AddToOrderedTxItems(&wtx);\n         }\n \n         bool fUpdated = false;\n@@ -685,6 +659,27 @@ void CWallet::AddAccountingEntry(const CAccountingEntry& entry, bool fFromLoadWa\n {\n     AssertLockHeld(cs_wallet);\n     std::multimap<std::string, CAccountingEntry>::iterator it = mapAccountingEntries.insert(make_pair(entry.strAccount, entry));\n+    if (!fFromLoadWallet)\n+        AddToOrderedTxItems(&it->second);\n+}\n+\n+void CWallet::InitMapOrderedTxItems()\n+{\n+    mapOrderedTxItems.clear();\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        AddToOrderedTxItems(&it->second);\n+    for (std::multimap<std::string, CAccountingEntry>::iterator it = mapAccountingEntries.begin(); it != mapAccountingEntries.end(); ++it)\n+        AddToOrderedTxItems(&it->second);\n+}\n+\n+void CWallet::AddToOrderedTxItems(CWalletTx* wtx)\n+{\n+    mapOrderedTxItems.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n+}\n+\n+void CWallet::AddToOrderedTxItems(CAccountingEntry* entry)\n+{\n+    mapOrderedTxItems.insert(make_pair(entry->nOrderPos, TxPair((CWalletTx*)0, entry)));\n }\n \n isminetype CWallet::IsMine(const CTxIn &txin) const"
      },
      {
        "sha": "c3c1387244d4f171c78cc5a176d9eb2261e1bff5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac09e08364721b9556e020875f77157ad91d9cdc/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac09e08364721b9556e020875f77157ad91d9cdc/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ac09e08364721b9556e020875f77157ad91d9cdc",
        "patch": "@@ -239,11 +239,10 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef std::multimap<int64_t, TxPair > TxItems;\n-    /** Get the wallet's activity log\n-        @return multimap of ordered transactions and accounting entries\n-        @warning Returned pointers are *only* valid within the scope of passed acentries\n-     */\n-    TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n+    TxItems mapOrderedTxItems;\n+    void InitMapOrderedTxItems();\n+    void AddToOrderedTxItems(CWalletTx* wtx);\n+    void AddToOrderedTxItems(CAccountingEntry* entry);\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);"
      },
      {
        "sha": "19357b5dc34f91570e8032b2172dd6fdfebca52f",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac09e08364721b9556e020875f77157ad91d9cdc/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac09e08364721b9556e020875f77157ad91d9cdc/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ac09e08364721b9556e020875f77157ad91d9cdc",
        "patch": "@@ -644,6 +644,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = ReorderTransactions(pwallet);\n \n+    pwallet->InitMapOrderedTxItems();\n+\n     return result;\n }\n "
      }
    ]
  }
]