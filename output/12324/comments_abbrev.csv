fanquake,2018-02-01T11:56:15Z,@AkioNak You might also want to look at https://github.com/bitcoin/bitcoin/pull/10785.,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-362244204,362244204,
AkioNak,2018-02-01T14:18:45Z,"@fanquake Thank you for pointing to #10785.\nI will check if this PR is still useful even if #10785 is merged.",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-362278952,362278952,
laanwj,2018-02-01T18:43:33Z,Thanks for adding benchmarks! That's the way to do optimization PRs.,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-362362409,362362409,
AkioNak,2018-02-07T06:54:49Z,@promag Thank you for your review. I fixed them and squashed commits.,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-363674966,363674966,
AkioNak,2018-02-07T10:19:50Z,"@fanquake Fortunately, I think that there was no collision or adverse effect between #10785 and #12324. Also, #12324 still usefull even if #10785 has been merged.\n\nConfirmation summary:\n\n0. enviroment : MacBook Pro (macOS 10.13.3/i7 2.2GHz/mem 16GB/SSD)\n1. merge - git merge (master d3e4675 + both #10785 and #12324) : succeed.\n2. build - make clean && make : succeed.\n3. test - test_ru",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-363722760,363722760,
eklitzke,2018-03-11T02:54:47Z,"Concept ACK. I like the idea of making this faster (I've seen this taking a lot of time in my profiles), but using a template to pass a lambda seems unnecessarily complex. If it gets inlined it will be fast. But if it ends up not being inlined, the lambda will turn into a full std::function object (since it captures) and that will be slow.\n\nCan you either:\n * Remove the func template (it's o",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-372085256,372085256,
AkioNak,2018-03-11T13:37:13Z,"@eklitzke thank you for your comment. I will try it.\n",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-372116167,372116167,
kallewoof,2018-03-13T07:16:02Z,"> I like the idea of making this faster (I've seen this taking a lot of time in my profiles), but using a template to pass a lambda seems unnecessarily complex. If it gets inlined it will be fast. But if it ends up not being inlined, the lambda will turn into a full std::function object (since it captures) and that will be slow.\n\nAdding `inline` to the template should do the trick, I think.\n",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-372569105,372569105,
sipa,2018-03-17T00:30:27Z,"Agree with @kallewoof. It seems the goal of using a callback here is to avoid having a public method that brings the vector in a (partially) undefined state. However, the result is that now we have a callback that needs to run in this state.\n\nI would either:\n* change the method name to `resize_uninitialized` or so, and initialize explicitly after it returns\n* pass a begin and end iterator ",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-373879071,373879071,
AkioNak,2018-03-19T07:53:55Z,"@eklitzke @kallewoof @sipa Thank you for suggestions.\nI introduced resize_uninitialized() and explicitly initialized instead of lambdas and callbacks.",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374127464,374127464,
AkioNak,2018-03-20T10:15:03Z,@eklitzke Thank you for your pointing out for my typos. Fixed them.,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374543849,374543849,
eklitzke,2018-03-21T04:26:01Z,"This looks good, although you still need to squash. I'm curious: do you still see the speedup from your intial benchmark? I know we changed other logic in this file since then.\n\nOn master:\n```\n$ ./src/bench/bench_bitcoin -filter='Deser.*' --evals=10\n# Benchmark, evals, iterations, total, min, max, median\nDeserializeAndCheckBlockTest, 10, 160, 9.86197, 0.00603752, 0.00640901, 0.00616365",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374831248,374831248,
MarcoFalke,2018-03-21T12:52:05Z,Could make sense to squash and rebase on master to ease benchmarking?,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-374925992,374925992,
AkioNak,2018-03-21T17:54:39Z,"Squashed and rebased.\nNow, speed up is still exist but a little (2.06% - 3.35%).\n\nmy enviroment : iMac late 2013  (macOS 10.13.3/i5 2.9GHz/mem 16GB/SSD)\n[on master]\n```\n# Benchmark, evals, iterations, total, min, max, median\nDeserializeAndCheckBlockTest, 1000, 160, 1169.53, 0.00713881, 0.00842435, 0.00718528\nDeserializeBlockTest, 1000, 130, 756.064, 0.00574035, 0.006433, 0.00575841",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-375037987,375037987,
sipa,2018-03-21T18:20:46Z,utACK d85530db45b327eecf408bc8e9636fa60e886208,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-375046887,375046887,
eklitzke,2018-03-22T00:59:10Z,Thanks for checking. utACK d85530db45b327eecf408bc8e9636fa60e886208,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-375143931,375143931,
AkioNak,2018-07-07T15:42:30Z,"Rebased and add a bench.\nThis benchmark measures the part specialized for unserialization.\n\nPrevectorDeserializeNontrivial => 3% faster\nPrevectorDeserializeTrivial => 24% faster\n\nmy enviroment : iMac late 2013 (macOS 10.13.3/i5 2.9GHz/mem 16GB/SSD)\n\n[on master ] commit 0212187fc624ea4a02fc99bc57ebd413499a9ee1\n```\n#1\n# Benchmark, evals, iterations, total, min, max, median\nPr",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-403224242,403224242,
MarcoFalke,2018-07-08T06:58:14Z,"> Rebased and add a bench.\n\nCould add the bench in a separate commit/pull request to make it easier to check for the speedup.",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-403267160,403267160,
AkioNak,2018-07-08T12:22:18Z,"@MarcoFalke  Thank you for your suggestion.\nSeparated this new benchmark from the original commit.",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-403284069,403284069,
AkioNak,2018-07-09T04:31:49Z,"Re-orderd commits.\nFirst commit (ee9867c) is adding a benchmark fucntion.\nSecond one (f9083e5) is refactoring(speed up) and tests.",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-403356886,403356886,
AkioNak,2018-07-10T10:22:39Z,"@kallewoof fixed your pointed out. please re-review.\n\nA benchmark result is following:\n[Machine]\nMacBook Pro (macOS 10.13.3/i7 2.2GHz/mem 16GB/SSD)\n\n[result]\nDeserializeAndCheckBlockTest => 2.4% faster\nDeserializeBlockTest => 2.9% faster\nPrevectorDeserializeNontrivial => 2.2% faster\nPrevectorDeserializeTrivial => 20.0% faster\n\n[before] commit ee9867ce781c3849a8969f0cc870775",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-403774892,403774892,
AkioNak,2018-07-11T08:56:38Z,"@kallewoof done.\n\nA benchmark result update:\n\n[result] Compared to commit ee9867ce781c3849a8969f0cc870775cbf8956d3\nDeserializeAndCheckBlockTest => 2.7% faster\nDeserializeBlockTest => 3.1% faster\nPrevectorDeserializeNontrivial => 2.4% faster\nPrevectorDeserializeTrivial => 23.7% faster\n\n[After] commit ece98807208328ce17c1d30c44a68d272b58b90c\n```\n# Benchmark, evals, iterations",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-404095978,404095978,
MarcoFalke,2018-07-11T12:22:58Z,Could add the benchmarks in a separate pull request to get them in faster?,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-404149822,404149822,
AkioNak,2018-07-19T08:51:13Z,"@kallewoof @MarcoFalke move the benchmarks in a new pull request #13711, and squashed.",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-406204075,406204075,
AkioNak,2018-07-29T13:41:40Z,"@kallewoof I understand your concern of slow-down caused from randomness.\nBut I don't worry so much because of deterministic psued random introduce by #10321.\nIt may be possible to remove randomness from this test (or more widely), but I think it would be better to use a different PR(s).",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-408678632,408678632,
kallewoof,2018-07-30T03:55:20Z,"Cool about #10321, didn't realize that change was made.\n\nutACK b91962ecf0a9b90c989068e3f12e5699bc90ef6f\n\n[Edited to fix commit reference.]",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-408739657,408739657,
sipa,2018-10-12T20:06:39Z,utACK b91962ecf0a9b90c989068e3f12e5699bc90ef6f,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-429447486,429447486,
laanwj,2019-06-18T15:10:06Z,utACK 86b47fa741408b061ab0bda784b8678bfd7dfa88,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-503179626,503179626,
MarcoFalke,2019-06-19T19:26:24Z,Has anyone checked that this actually improves the benchmark as claimed in the OP. It does not for me.,https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-503713763,503713763,
kallewoof,2019-06-20T05:11:27Z,"I ran the benchmarks on two linux machines (one pretty powerful (GCO) and one not so (Lefty)), and a MacBook Pro. Raw numbers at bottom. I see improvements in master compared to e2182b02b in `PrevectorDeserialize*rivial`, but not in the other benchmarks:\n\n<img width=""603"" alt=""PrevectorDeserializeNontrivial"" src=""https://user-images.githubusercontent.com/250224/59819855-9b1ea400-9364-11e9-81f4",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-503877049,503877049,
AkioNak,2019-06-20T10:40:46Z,"@MarcoFalke @kallewoof Thank you for the comment and reporting the benchmark result.\n\nThe #12549, which is an improvement to prevector and merged on 1 Mar 2018, is very efficient, so the improvement of this PR is relatively hidden in the benchmark of Deserialize*BlockTest.\nHowever, focusing on prevector deserialization itself, there are some speedup with this PR.\n\nSo I had have to change",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-503976038,503976038,
jamesob,2019-06-24T14:55:06Z,"Can verify I'm seeing speedups in this branch (as rebased onto master) relative to the commit that came before its merge into master, but only for gcc:\n\n### e2182b02b5af13f0de38cf8b08bb81723387c570 vs. unserialize (relative)\n|                      bench name                       |  x  | e2182b02b5af13f0de38cf8b08bb81723387c570 | unserialize |\n|---------------------------------------------",https://github.com/bitcoin/bitcoin/pull/12324#issuecomment-505046368,505046368,
promag,2018-02-06T14:25:18Z,"Nit, space after `for`.",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r166316300,166316300,src/test/prevector_tests.cpp
promag,2018-02-06T14:25:29Z,"Nit, space after `for`.",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r166316370,166316370,src/test/prevector_tests.cpp
eklitzke,2018-03-19T06:50:44Z,not: s/dose/does/,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r175342548,175342548,src/prevector.h
eklitzke,2018-03-19T06:51:01Z,nit: s/return/returns/,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r175342587,175342587,src/prevector.h
kallewoof,2018-07-09T04:55:23Z,"Is this always guaranteed to give a signed result back? I.e. if `new_size` is 4 and `size()` is 5, will `count` always be `-1` or will it sometimes be cast to `(uint32_t)-1`? (E.g. for other platforms and/or compilers)",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r200880830,200880830,src/prevector.h
kallewoof,2018-07-09T04:59:49Z,Also test shrinking the prevector.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r200881214,200881214,src/test/prevector_tests.cpp
AkioNak,2018-07-10T05:58:32Z,"@kallewoof Thanks. \nI will judge whether the value of '_size' should need to increase by comparing new_size and size () instead of the sign of pre-computed difference of them.",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201224394,201224394,src/prevector.h
AkioNak,2018-07-10T05:58:33Z,@kallewoof Indeed. I will add.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201224397,201224397,src/test/prevector_tests.cpp
AkioNak,2018-07-10T10:19:13Z,done.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201290474,201290474,src/prevector.h
AkioNak,2018-07-10T10:19:21Z,done.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201290501,201290501,src/test/prevector_tests.cpp
kallewoof,2018-07-11T02:23:06Z,Avoid randomness in tests. It is slow and results are needlessly unpredictable. Maybe just do `real_vector.size() / 2` or something?,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201548692,201548692,src/test/prevector_tests.cpp
kallewoof,2018-07-11T02:24:40Z,Does it impact performance a lot if you just use `size()` in both these places?,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201548864,201548864,src/prevector.h
AkioNak,2018-07-11T07:32:08Z,"@kallewoof Now I mesured a bench that using size() instead of cur_size;\nI am surprised that compiler optimization is excellent.\nIn this patch, rather than referring to local variables, function calls are faster.",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201589760,201589760,src/prevector.h
AkioNak,2018-07-11T07:39:54Z,"@kallewoof Ok. But I think if shrink here, added elements may be gone. So I will move these line to the top of this function.",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201591602,201591602,src/test/prevector_tests.cpp
AkioNak,2018-07-11T07:41:44Z,self review. need calling test() at the enf of this function.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r201592062,201592062,src/test/prevector_tests.cpp
kallewoof,2018-07-27T08:45:02Z,`// resize_uninitialized changes the size of the prevector but does not initialize it`,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r205706009,205706009,src/prevector.h
kallewoof,2018-07-27T08:45:46Z,`after it returns.` is unnecessary I think. `must be initialized explicitly`,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r205706185,205706185,src/prevector.h
AkioNak,2018-07-27T13:56:53Z,@kallewoof Thanks. fixed.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r205781100,205781100,src/prevector.h
AkioNak,2018-07-27T13:56:54Z,@kallewoof Thanks. fixed.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r205781104,205781104,src/prevector.h
practicalswift,2018-10-11T13:38:23Z,Switch to unsigned? `InsecureRandBits` returns unsigned :-),https://github.com/bitcoin/bitcoin/pull/12324#discussion_r224450980,224450980,src/test/prevector_tests.cpp
AkioNak,2018-10-15T07:16:54Z,"@practicalswift Thank you. Oh, I see. ```unsigned int``` is better.\nI have addressed it ( and rebased to be992701).",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r225058652,225058652,src/test/prevector_tests.cpp
shahzadlone,2019-02-01T07:32:23Z,Perhaps here you could make sure before going in loop to reserve values.size() many more memory to optimize the vector.,https://github.com/bitcoin/bitcoin/pull/12324#discussion_r252955150,252955150,src/test/prevector_tests.cpp
AkioNak,2019-02-03T13:02:12Z,"@shahzadlone Thank you for your review.\nAddressed that you pointed out.",https://github.com/bitcoin/bitcoin/pull/12324#discussion_r253301261,253301261,src/test/prevector_tests.cpp
