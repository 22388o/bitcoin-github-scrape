[
  {
    "sha": "86b47fa741408b061ab0bda784b8678bfd7dfa88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmI0N2ZhNzQxNDA4YjA2MWFiMGJkYTc4NGI4Njc4YmZkN2RmYTg4",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2018-02-01T10:34:50Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-03T11:16:27Z"
      },
      "message": "speed up Unserialize_impl for prevector\n\nThe unserializer for prevector uses resize() for reserve the area,\nbut it's prefer to use reserve() because resize() have overhead\nto call its constructor many times.\n\nHowever, reserve() does not change the value of \"_size\"\n(a private member of prevector).\n\nThis PR introduce resize_uninitialized() to prevector that similar to\nresize() but does not call constructor, and added elements are\nexplicitly initialized in Unserialize_imple().\n\nThe changes are as follows:\n1. prevector.h\nAdd a public member function named 'resize_uninitialized'.\nThis function processes like as resize() but does not call constructors.\nSo added elemensts needs explicitly initialized after this returns.\n\n2. serialize.h\nIn the following two function:\n Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)\n Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\nCalls resize_uninitialized() instead of resize()\n\n3. test/prevector_tests.cpp\nAdd a test for resize_uninitialized().",
      "tree": {
        "sha": "29b2b5bbc0661cea20133143be3c5536a6ffd922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29b2b5bbc0661cea20133143be3c5536a6ffd922"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86b47fa741408b061ab0bda784b8678bfd7dfa88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b47fa741408b061ab0bda784b8678bfd7dfa88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86b47fa741408b061ab0bda784b8678bfd7dfa88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b47fa741408b061ab0bda784b8678bfd7dfa88/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3a715301a0fd972fb2f3bd36e2680b3cdbbab26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a715301a0fd972fb2f3bd36e2680b3cdbbab26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a715301a0fd972fb2f3bd36e2680b3cdbbab26"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 46,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2f368a5c66dbb06bec46d2bab943322faabb812c",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b47fa741408b061ab0bda784b8678bfd7dfa88/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b47fa741408b061ab0bda784b8678bfd7dfa88/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=86b47fa741408b061ab0bda784b8678bfd7dfa88",
        "patch": "@@ -378,6 +378,21 @@ class prevector {\n         fill(ptr, first, last);\n     }\n \n+    inline void resize_uninitialized(size_type new_size) {\n+        // resize_uninitialized changes the size of the prevector but does not initialize it.\n+        // If size < new_size, the added elements must be initialized explicitly.\n+        if (capacity() < new_size) {\n+            change_capacity(new_size);\n+            _size += new_size - size();\n+            return;\n+        }\n+        if (new_size < size()) {\n+            erase(item_ptr(new_size), end());\n+        } else {\n+            _size += new_size - size();\n+        }\n+    }\n+\n     iterator erase(iterator pos) {\n         return erase(pos, pos + 1);\n     }"
      },
      {
        "sha": "cb48dc174abff5a53478280b748137b4be483378",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b47fa741408b061ab0bda784b8678bfd7dfa88/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b47fa741408b061ab0bda784b8678bfd7dfa88/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=86b47fa741408b061ab0bda784b8678bfd7dfa88",
        "patch": "@@ -659,7 +659,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)\n     while (i < nSize)\n     {\n         unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n-        v.resize(i + blk);\n+        v.resize_uninitialized(i + blk);\n         is.read((char*)&v[i], blk * sizeof(T));\n         i += blk;\n     }\n@@ -677,8 +677,8 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\n         nMid += 5000000 / sizeof(T);\n         if (nMid > nSize)\n             nMid = nSize;\n-        v.resize(nMid);\n-        for (; i < nMid; i++)\n+        v.resize_uninitialized(nMid);\n+        for (; i < nMid; ++i)\n             Unserialize(is, v[i]);\n     }\n }"
      },
      {
        "sha": "84c1abc14a54ed00abad568a3f55d7ff663a548e",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b47fa741408b061ab0bda784b8678bfd7dfa88/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b47fa741408b061ab0bda784b8678bfd7dfa88/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=86b47fa741408b061ab0bda784b8678bfd7dfa88",
        "patch": "@@ -183,6 +183,26 @@ class prevector_tester {\n         pre_vector = pre_vector_alt;\n     }\n \n+    void resize_uninitialized(realtype values) {\n+        size_t r = values.size();\n+        size_t s = real_vector.size() / 2;\n+        if (real_vector.capacity() < s + r) {\n+            real_vector.reserve(s + r);\n+        }\n+        real_vector.resize(s);\n+        pre_vector.resize_uninitialized(s);\n+        for (auto v : values) {\n+            real_vector.push_back(v);\n+        }\n+        auto p = pre_vector.size();\n+        pre_vector.resize_uninitialized(p + r);\n+        for (auto v : values) {\n+            pre_vector[p] = v;\n+            ++p;\n+        }\n+        test();\n+    }\n+\n     ~prevector_tester() {\n         BOOST_CHECK_MESSAGE(passed, \"insecure_rand: \" + rand_seed.ToString());\n     }\n@@ -260,6 +280,14 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             if (InsecureRandBits(5) == 18) {\n                 test.move();\n             }\n+            if (InsecureRandBits(5) == 19) {\n+                unsigned int num = 1 + (InsecureRandBits(4));\n+                std::vector<int> values(num);\n+                for (auto &v : values) {\n+                    v = InsecureRand32();\n+                }\n+                test.resize_uninitialized(values);\n+            }\n         }\n     }\n }"
      }
    ]
  }
]