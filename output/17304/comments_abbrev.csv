DrahtBot,2019-10-29 20:07:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17283](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17283.html) (rpc: improve getaddressinfo test coverage, ",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-547606545,547606545,
ryanofsky,2019-10-29 22:37:44,"Not sure what your preference is @achow101, but it might be a good idea to replace #17261 with #17304 on the high priority review list https://github.com/bitcoin/bitcoin/projects/8, since #17261 builds on #17304.\n\nThis PR is also just making small and mostly obvious changes, so it should be more approachable for reviewers.",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-547660167,547660167,
achow101,2019-10-29 22:58:10,"> Not sure what your preference is @achow101, but it might be a good idea to replace #17261 with #17304 on the high priority review list https://github.com/bitcoin/bitcoin/projects/8, since #17261 builds on #17304.\n\nYeah, it should replace that. #17261 was added to the list before I made this pr.\n",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-547665962,547665962,
instagibbs,2019-10-30 15:13:49,"mac build errors\n```\nMakefile:8720: recipe for target 'wallet/libbitcoin_wallet_a-scriptpubkeyman.o' failed\nwallet/scriptpubkeyman.cpp:399:9: error: calling function 'MarkPreSplitKeys' requires holding mutex 'cs_wallet' exclusively [-Werror,-Wthread-safety-analysis]\n        MarkPreSplitKeys();\n        ^\n```",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-547956698,547956698,
ryanofsky,2019-10-31 13:28:48,"This PR has 18 commits, so it could be useful to get some Approach ACKS here on whether it's a reasonable size, or should be made smaller by dropping some number of commits, or dropping particular commits that seem more difficult to review. All of the commits should be small and straightforward, but it is also easily possible to scale back this PR if necessary.",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-548374757,548374757,
Sjors,2019-10-31 17:32:52,"I'm going through these commits now. I've seen this code a few times before, but if others want to eject one or more commits to get it merged faster, that could make sense. ",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-548486346,548486346,
Sjors,2019-10-31 20:11:09,Code review ACK up to b04a526aea91ba4caddbde1a1313a1dbf46bc5e5.,https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-548548719,548548719,
laanwj,2019-11-02 11:17:02,code review ACK 152b0a00d8e681dd098f6b548447b82ab54ebe3c,https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-549034165,549034165,
Sjors,2019-11-02 17:27:04,"re-ACK 152b0a00d8e681dd098f6b548447b82ab54ebe3c\n\nIf you can append a commit to get rid of `unused variable` warnings in rpcdump.cpp that would be nice though (see #17338 by @jonatack).\n\n```\n wallet/rpcdump.cpp:137:28: error: unused variable 'spk_man' [-Werror,-Wunused-variable]\n    LegacyScriptPubKeyMan& spk_man = GetLegacyScriptPubKeyMan(*wallet);\n```",https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-549064296,549064296,
promag,2019-11-03 22:15:35,Code review ACK 152b0a00d8e681dd098f6b548447b82ab54ebe3c.,https://github.com/bitcoin/bitcoin/pull/17304#issuecomment-549184711,549184711,
ryanofsky,2019-10-29 19:26:40,"In commit ""Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata"" (a5ca4664e74201a08cef1d147ed4446fd74784f8)\n\nCould drop this reset line since batch is going out of scope anyway.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340280978,340280978,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 19:37:10,"In commit ""Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata"" (a5ca4664e74201a08cef1d147ed4446fd74784f8):\n\nWould it be possible to drop the WalletStorage SetWalletFlag method entirely after this? I don't see another call even in #17261",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340285227,340285227,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 19:48:42,"In commit ""Refactor: Remove UnsetWalletFlag call from LegacyScriptPubKeyMan::SetHDSeed"" (d35a98b6e04a3750c48bf21af64d0375fe2ae395)\n\nAll the UnsetWalletFlagWithDB calls are just unsetting `WALLET_FLAG_BLANK_WALLET`. Maybe WalletStorage should just have a specific `UnsetBlankWalletFlag` method and not expose more general flag set/unset methods. With multiple key managers per wallet, it might be ",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340290082,340290082,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 19:51:00,"In commit ""Refactor: Move SetAddressBookWithDB call out of LegacyScriptPubKeyMan::ImportScriptPubKeys"" (974d7749f1d9e55a01a2e30db2bdf6b89c18baff)\n\nCould skip this whole block of code if `apply_label` is false",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340291130,340291130,src/wallet/wallet.cpp
ryanofsky,2019-10-29 20:02:42,"In commit ""Refactor: Move GetMetadata code out of getaddressinfo"" (bdb538d2fa8b171f1a96580a0f0a7395d52b336e)\n\nIt doesn't seem strictly true that this commit doesn't change behavior. Before the code was looking up `key_id` only in `mapKeyMetadata` and `CScriptID(scriptPubKey)` only in `m_script_metadata`. Now it is looking up both values in both maps, which I guess is fine, but maybe more confu",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340296308,340296308,src/wallet/rpcwallet.cpp
ryanofsky,2019-10-29 20:09:20,"In commit ""Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe"" (8c47cb9202e27a86609d7b3af91dee1f09468125)\n\nNote for other reviews: lock assert added here is needed to satisfy clang lock annotations and be able to call `MarkReserveKeysAsUsed` below. This line will be replaced by `LOCK(cs_KeyStore);` later in commit ""Locking: Lock cs_KeyStore instead of cs_main in l",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340299078,340299078,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 20:28:43,"In commit ""Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe"" (8c47cb9202e27a86609d7b3af91dee1f09468125)\n\nNote for other reviewers: The `LegacyScriptPubKeyMan::TopUp` call in the previous code is changed to a `LegacyScriptPubKeyMan::TopUpKeyPool` call here. The two methods will do the exact same thing even after all the other changes in #17261, so there is no dif",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340307903,340307903,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 20:37:41,"In commit ""Refactor: Add new ScriptPubKeyMan virtual methods"" (80a44800f35c3183edd8fc0914ed8edbd5c5887b)\n\nNote for other reviewers: after future changes in #17261 there are some differences in functionality between the Reserve/Keep/Return **destination** methods and the Reserve/Keep/Return **key** methods, and they are called from different places, so there's some justification for keeping the",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340311958,340311958,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 20:43:34,"In commit ""Refactor: Move Upgrade code out of CWallet::CreateWalletFromFile"" (3814d7550ca2d53a9aa1613d61f79dc72b95770b)\n\nI think this added lock assert line is not actually necessary and could be dropped. Clang compiler seems fine without out it as of this commit.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340314846,340314846,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-29 20:58:42,"In commit ""Refactor: Move nTimeFirstKey accesses out of CWallet"" (e1b1702449a9172185d4bfb5e9043748328132ee)\n\nI think the numeric_limits approach is not the clearest here, because if wallet doesn't have any key managers, the code winds up calling `findFirstBlock` with an strange `0x7fffffffffffffff - TIMESTAMP_WINDOW` value.\n\nBetter I think to use optional instead:\n\n```c++\nOptional<in",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340321878,340321878,src/wallet/wallet.cpp
ryanofsky,2019-10-29 21:07:57,"In commit ""Refactor: Move SetupGeneration code out of CWallet"" (f95750d52a21a69ad55db8422f10c563fb9e08ac)\n\nNote for other reviews: Previous code was calling TopUp, while new code is calling SetupGeneration which calls NewKeyPool which calls TopUpKeyPool. I think the effect is basically the same because fFirstRun is true here so the additional ErasePool calls in NewKeyPool should have no effect",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340326092,340326092,src/wallet/wallet.cpp
ryanofsky,2019-10-29 21:15:26,"In commit ""Refactor: Move SetupGeneration code out of CWallet"" (f95750d52a21a69ad55db8422f10c563fb9e08ac)\n\nShould this be checking the return code from SetupGeneration and setting an error if it fails? Old code wasn't checking the return value from NewKeyPool either, but that doesn't seem right.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340329325,340329325,src/wallet/wallet.cpp
achow101,2019-10-29 21:57:30,"From the ScriptPubKeyMan design view, it doesn't make sense to have different metadata for keys and scripts, at least exposed publicly to the wallet. It should really be `GetMetadata` that takes a scriptPubKey, but it fit better to use uint160 for right now.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340345745,340345745,src/wallet/rpcwallet.cpp
achow101,2019-10-29 22:09:29,Done,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340349757,340349757,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-29 22:10:21,Added a commit dropping SetWalletFlag. Also checked it isn't being used in Descriptor wallets.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340349989,340349989,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-29 22:12:35,Added a commit changing those to UnsetBlankWalletFlag. Also checked DescriptorScriptPubKeyMan doesn't use UnsetWalletFlag.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340350744,340350744,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-29 22:12:41,Done,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340350776,340350776,src/wallet/wallet.cpp
achow101,2019-10-29 22:12:48,Removed,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340350809,340350809,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-29 22:12:56,Made it an optional,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340350852,340350852,src/wallet/wallet.cpp
achow101,2019-10-29 22:15:12,It should. Done.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340351629,340351629,src/wallet/wallet.cpp
ryanofsky,2019-10-30 12:20:14,"re: https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340314846\n\n> Removed\n\nThe lock assert probably needs to be added back. I'm not sure why clang for me wasn't showing the same error, but clang on travis legitimately errors that it needs the assert to call `MarkPreSplitKeys():\n\n```\nwallet/scriptpubkeyman.cpp:399:9: error: calling function 'MarkPreSplitKeys' requires holding",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340580879,340580879,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-30 15:29:13,Added it back in.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340688363,340688363,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-10-31 15:09:22,why the scope here?,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341194391,341194391,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-10-31 15:35:38,"I realize this is stopping mid-way, but this was slightly confusing. Add a comment saying this is temporarily going to always be true until a loop is introduced?",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341210205,341210205,src/wallet/wallet.cpp
achow101,2019-10-31 16:08:04,A lock is going to be added in the next step,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341229485,341229485,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-31 16:09:00,That generally applies throughout this PR. So I guess a note to reviewers in the thread should be good enough?,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341230007,341230007,src/wallet/wallet.cpp
instagibbs,2019-10-31 16:15:35,"ok! Consider this your note, future reviewers ",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341233720,341233720,src/wallet/wallet.cpp
ryanofsky,2019-10-31 17:03:17,"> A lock is going to be added in the next step\n\nThe scope isn't needed even with the lock and all other changes from #17261:\n\nhttps://github.com/bitcoin/bitcoin/blob/35b0f7b5447bce4eef360c7e4237a928bb0eba3c/src/wallet/scriptpubkeyman.cpp#L275-L290\n\nBut I don't think it's a big deal. Could clean this up later if reservekey and reservedestination methods are merged later (https://github.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341258866,341258866,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-31 17:46:14,I'll just leave this as is so it can get merged sooner :),https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341280713,341280713,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-31 17:56:29,"In commit ""Refactor: Move SetupGeneration code out of CWallet"" (ef97f0b5451e4959c0d0bf649a71eec9b226210e)\n\nNo need to change now, but it seems like it'd probably be a good idea to check for an error from SetupGeneration here as well.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341286026,341286026,src/wallet/wallet.cpp
Sjors,2019-10-31 18:17:49,I'm also a bit confused about the distinction between `TopUpKeyPool()` and `Topup()`. In the native descriptor wallet PR there's an internal call to `Topup()` inside `DescriptorScriptPubKeyMan::GetNewDestination` and `DescriptorScriptPubKeyMan::MarkUnusedAddresses`: https://github.com/bitcoin/bitcoin/pull/16528/files#diff-5462ceb8a760a507152ab8b76bd48774R1459,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341296610,341296610,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-31 18:35:05,"In `LegacyScriptPubKeyMan`, `TopUp()` and `TopUpKeyPool()` are the same. Since `TopUpKeyPool` was already being used throughout existing `CWallet` code that was moved into `LegacyScriptPubKeyMan`, I decided to let those calls just keep using `TopUpKeyPool`. But for the `ScriptPubKeyMan` interface itself, I wanted it to be named `TopUp` because that conceptually made more sense than calling it `Top",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341304705,341304705,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-31 18:44:56,Any reason you would not want to rename TopUpKeyPool method to TopUp and call it everywhere instead of having two LegacyScriptPubKeyMan methods that do the same thing?,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341309043,341309043,src/wallet/scriptpubkeyman.cpp
promag,2019-11-02 00:42:52,"8bdac65e4c705f9f55c93b43792d036229cc9d5a\n\nSorry for nit picking here, but is this really necessary? What should be the rule of thumb?",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341790747,341790747,src/wallet/scriptpubkeyman.h
promag,2019-11-02 00:50:03,"bf5f6c5214706ef61f80c46063061a624c3d505b\n\nThis should be in the above `if`?",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341791285,341791285,src/wallet/wallet.cpp
promag,2019-11-02 00:55:26,"2590266c193d27c979ad6287d72555ca3df630bc\n\nWhat if `IsLocked()`?",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341791687,341791687,src/wallet/wallet.cpp
promag,2019-11-02 01:06:35,"26fef3a525fd98f8205fd2f859f476fbf2cc6fcd\n\nJust noting that there's actually a behavior change here - now if `LegacyScriptPubKeyMan::ImportScriptPubKeys` fails __no label is applied__.\n\nAlso, another change, which I think is harmless, is that now 2 batches are always used - easily ""reverted"" by passing the batch to `LegacyScriptPubKeyMan::ImportScriptPubKeys` from this method.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341792533,341792533,src/wallet/wallet.cpp
ryanofsky,2019-11-02 02:34:51,"re: https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341791687\n\n> [2590266](https://github.com/bitcoin/bitcoin/commit/2590266c193d27c979ad6287d72555ca3df630bc)\n> \n> What if `IsLocked()`?\n\nNice catch! This seems like a bug. I think either the `m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)` check should move from `LegacyScriptPubKeyMan::Upgra",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341796022,341796022,src/wallet/wallet.cpp
ryanofsky,2019-11-02 02:42:12,It seems like the `CWallet::UpgradeKeyMetadata()` and `ScriptPubKeyMan::::UpgradeKeyMetadata()` methods could both be dropped and `walletdb.cpp` could call `pwallet->GetLegacyScriptPubKeyMan()` and `LegacyScriptPubKeyMan::UpgradeKeyMetadata` directly for compatibility.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341796248,341796248,src/wallet/wallet.cpp
achow101,2019-11-02 02:44:57,Is what necessary?,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341796317,341796317,src/wallet/scriptpubkeyman.h
achow101,2019-11-02 02:46:14,Does it really matter?,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341796358,341796358,src/wallet/wallet.cpp
achow101,2019-11-02 02:49:37,"Those are harmless. `ImportScriptPubKeys` only fails when writing to the database fails, so you'll have bigger problems if that happens.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341796453,341796453,src/wallet/wallet.cpp
achow101,2019-11-02 02:55:55,Changed to be non-virtual and moved that check out to CWallet.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341796623,341796623,src/wallet/wallet.cpp
promag,2019-11-02 10:02:38,The category comment.,https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341805525,341805525,src/wallet/scriptpubkeyman.h
promag,2019-11-02 10:06:47,"No, just that it looks like a leftover where before result could be changed in between. \n\nActually I think this would look better without the result variable.\n\nYou can resolve this.",https://github.com/bitcoin/bitcoin/pull/17304#discussion_r341805626,341805626,src/wallet/wallet.cpp
