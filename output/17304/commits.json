[
  {
    "sha": "b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGNiMThiY2UzYzlhNmFkYWIyZmEzMmYzZGFkNGFkOTY2YjMzYmUw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:56:37Z"
      },
      "message": "MOVEONLY: Reorder LegacyScriptPubKeyMan methods\n\nCan verify move-only with:\n\n    git log -p -n1 --color-moved\n\nThis commit is move-only and doesn't change code or affect behavior.",
      "tree": {
        "sha": "574a7061559ccfead4e54ef8868b8593a61639d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/574a7061559ccfead4e54ef8868b8593a61639d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5224be6454140ad601347bd536c172b7b6f148b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5224be6454140ad601347bd536c172b7b6f148b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5224be6454140ad601347bd536c172b7b6f148b"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 91,
      "deletions": 92
    },
    "files": [
      {
        "sha": "5b2f25f090a3fbf8739d64b9e9a5473fce8d6247",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 91,
        "deletions": 92,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
        "patch": "@@ -150,36 +150,22 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:\n-    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n-    //! will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n \n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n     WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n     WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n \n-    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n-\n-    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n-\n-    /* the HD chain data model (external chain counters) */\n-    CHDChain hdChain;\n-\n-    /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n-    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n-    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n-    std::map<CKeyID, int64_t> m_pool_key_to_index;\n-\n     int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;\n \n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n     /**\n      * Private version of AddWatchOnly method which does not accept a\n      * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n@@ -192,121 +178,130 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool AddWatchOnlyInMem(const CScript &dest);\n-\n-    /** Add a KeyOriginInfo to the wallet */\n-    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n     void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n     //! Adds a script to the store and saves it to disk\n     bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n \n- public:\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+\n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n+\n+public:\n+    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n+    isminetype IsMine(const CScript& script) const;\n+\n+    //! will encrypt previously unencrypted keys\n+    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    bool IsHDEnabled() const;\n+\n+    int64_t GetOldestKeyPoolTime();\n+    size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    bool CanGetAddresses(bool internal = false);\n \n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_wallet);\n \n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n-    /**\n-     * keystore implementation\n-     * Generate a new key\n-     */\n-    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return AddKeyPubKeyInner(key, pubkey); }\n-    //! Load metadata (used by LoadWallet)\n-    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n-    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    bool HaveKey(const CKeyID &address) const override;\n-    std::set<CKeyID> GetKeys() const override;\n-    bool AddCScript(const CScript& redeemScript) override;\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Adds a CScript to the store\n     bool LoadCScript(const CScript& redeemScript);\n+    //! Load metadata (used by LoadWallet)\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Generate a new key\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    /* Set the HD chain model (chain child index counters) */\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() const { return hdChain; }\n \n-    //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool RemoveWatchOnly(const CScript &dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n     //! Returns whether the watch-only script is in the wallet\n     bool HaveWatchOnly(const CScript &dest) const;\n     //! Returns whether there are any watch-only things in the wallet\n     bool HaveWatchOnly() const;\n+    //! Remove a watch only script from the keystore\n+    bool RemoveWatchOnly(const CScript &dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     //! Fetches a pubkey from mapWatchKeys if it exists there\n     bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n \n+    bool HaveKey(const CKeyID &address) const override;\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    //! Load a keypool entry\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    bool NewKeyPool();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool NewKeyPool();\n-    size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool TopUpKeyPool(unsigned int kpSize = 0);\n-\n-    /**\n-     * Reserves a key from the keypool and sets nIndex to its index\n-     *\n-     * @param[out] nIndex the index of the key in keypool\n-     * @param[out] keypool the keypool the key was drawn from, which could be the\n-     *     the pre-split pool if present, or the internal or external pool\n-     * @param fRequestedInternal true if the caller would like the key drawn\n-     *     from the internal keypool, false if external is preferred\n-     *\n-     * @return true if succeeded, false if failed due to empty keypool\n-     * @throws std::runtime_error if keypool read failed, key was invalid,\n-     *     was not found in the wallet, or was misclassified in the internal\n-     *     or external keypool\n-     */\n-    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n-    void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n-    int64_t GetOldestKeyPoolTime();\n-    /**\n-     * Marks all keys in the keypool up to and including reserve_key as used.\n-     */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n-    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n-\n-    isminetype IsMine(const CScript& script) const;\n-\n-    /* Set the HD chain model (chain child index counters) */\n-    void SetHDChain(const CHDChain& chain, bool memonly);\n-    const CHDChain& GetHDChain() const { return hdChain; }\n-\n-    /* Returns true if HD is enabled */\n-    bool IsHDEnabled() const;\n-\n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();\n \n-    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n-    bool CanGetAddresses(bool internal = false);\n-\n     /* Generates a new HD seed (will not be activated) */\n     CPubKey GenerateNewSeed();\n \n@@ -333,9 +328,13 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     void LearnAllRelatedScripts(const CPubKey& key);\n \n-    /** Implement lookup of key origin information through wallet key metadata. */\n-    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n+    std::set<CKeyID> GetKeys() const override;\n     // Temporary CWallet accessors and aliases.\n     friend class CWallet;\n     friend class ReserveDestination;"
      }
    ]
  },
  {
    "sha": "533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzNkOGIzNjRmNGU1ODlhYTFhY2IyOGNkZWE1ZTZlNmU4MGQzNGRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:56:37Z"
      },
      "message": "Refactor: Declare LegacyScriptPubKeyMan methods as virtual\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "f3c0b2a60bb284c7d6cee4885dc2b7b0726ccc89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3c0b2a60bb284c7d6cee4885dc2b7b0726ccc89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4cb18bce3c9a6adab2fa32f3dad4ad966b33be0"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 22,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cef153d2bd9ec55a2c1210980b14f38485601687",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
        "patch": "@@ -145,6 +145,21 @@ class ScriptPubKeyMan\n \n public:\n     ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage) {}\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n };\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n@@ -228,19 +243,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n public:\n     bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n-    isminetype IsMine(const CScript& script) const;\n+    isminetype IsMine(const CScript& script) const override;\n \n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n-    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool IsHDEnabled() const;\n+    bool IsHDEnabled() const override;\n \n-    int64_t GetOldestKeyPoolTime();\n-    size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n-    bool CanGetAddresses(bool internal = false);\n+    bool CanGetAddresses(bool internal = false) override;\n \n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_wallet);\n@@ -282,6 +296,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Fetches a pubkey from mapWatchKeys if it exists there\n     bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n \n+    /* SigningProvider overrides */\n     bool HaveKey(const CKeyID &address) const override;\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;"
      }
    ]
  },
  {
    "sha": "acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2VkYzViODIzMGVkOWFkMDdmOTZmNTFmMGVmODYyYWIzYTQxZDVl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:56:37Z"
      },
      "message": "Refactor: Add new ScriptPubKeyMan virtual methods\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "d67e318556f2311c80421aadcf71ff00bdf6ffdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d67e318556f2311c80421aadcf71ff00bdf6ffdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/533d8b364f4e589aa1acb28cdea5e6e6e80d34dc"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 47,
      "deletions": 11
    },
    "files": [
      {
        "sha": "41ef121071dec82536d489d6a44179060bc73aa0",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
        "patch": "@@ -265,6 +265,31 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool)\n+{\n+    {\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey)\n+{\n+    ReturnKey(index, internal, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "ac29fdc5eeca3e90383c31e4adea0dd2cd29db3b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
        "patch": "@@ -148,8 +148,11 @@ class ScriptPubKeyMan\n     virtual ~ScriptPubKeyMan() {};\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n-    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n-    virtual void UpgradeKeyMetadata() {}\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n \n     /* Returns true if HD is enabled */\n     virtual bool IsHDEnabled() const { return false; }\n@@ -247,7 +250,15 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n-    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool IsHDEnabled() const override;\n "
      },
      {
        "sha": "7a2ec1ef43062c20c2e9e2d40a33a2fa3c7a3ede",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
        "patch": "@@ -878,7 +878,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::St\n                         WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n                         MarkReserveKeysAsUsed(mi->second);\n \n-                        if (!m_spk_man->TopUpKeyPool()) {\n+                        if (!m_spk_man->TopUp()) {\n                             WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n                         }\n                     }\n@@ -3027,7 +3027,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n     bool res = true;\n     if (auto spk_man = m_spk_man.get()) {\n-        res &= spk_man->TopUpKeyPool(kpSize);\n+        res &= spk_man->TopUp(kpSize);\n     }\n     return res;\n }\n@@ -3047,7 +3047,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n {\n     error.clear();\n \n-    m_spk_man->TopUpKeyPool();\n+    m_spk_man->TopUp();\n \n     ReserveDestination reservedest(this);\n     if (!reservedest.GetReservedDestination(type, dest, true)) {\n@@ -3229,7 +3229,7 @@ bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestin\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!m_spk_man->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, nIndex, keypool)) {\n             return false;\n         }\n         vchPubKey = keypool.vchPubKey;\n@@ -3245,7 +3245,7 @@ bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestin\n void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1)\n-        m_spk_man->KeepKey(nIndex);\n+        m_spk_man->KeepDestination(nIndex);\n     nIndex = -1;\n     vchPubKey = CPubKey();\n     address = CNoDestination();\n@@ -3254,7 +3254,7 @@ void ReserveDestination::KeepDestination()\n void ReserveDestination::ReturnDestination()\n {\n     if (nIndex != -1) {\n-        m_spk_man->ReturnKey(nIndex, fInternal, vchPubKey);\n+        m_spk_man->ReturnDestination(nIndex, fInternal, vchPubKey);\n     }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n@@ -3623,7 +3623,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n-            if (!walletInstance->m_spk_man->TopUpKeyPool()) {\n+            if (!walletInstance->m_spk_man->TopUp()) {\n                 error = _(\"Unable to generate keys\").translated;\n                 return nullptr;\n             }\n@@ -3643,7 +3643,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n \n         // Top up the keypool\n-        if (walletInstance->m_spk_man->CanGenerateKeys() && !walletInstance->m_spk_man->TopUpKeyPool()) {\n+        if (walletInstance->m_spk_man->CanGenerateKeys() && !walletInstance->m_spk_man->TopUp()) {\n             error = _(\"Unable to generate initial keys\").translated;\n             return nullptr;\n         }"
      }
    ]
  },
  {
    "sha": "769acef85730a6c0e2f5603fbd673b176c2d34d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjlhY2VmODU3MzBhNmMwZTJmNTYwM2ZiZDY3M2IxNzZjMmQzNGQw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:56:37Z"
      },
      "message": "Refactor: Move SetAddressBook call out of LegacyScriptPubKeyMan::GetNewDestination\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "1925d0e279c40779accd83e991ecc835da3bd987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1925d0e279c40779accd83e991ecc835da3bd987"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769acef85730a6c0e2f5603fbd673b176c2d34d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769acef85730a6c0e2f5603fbd673b176c2d34d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/769acef85730a6c0e2f5603fbd673b176c2d34d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769acef85730a6c0e2f5603fbd673b176c2d34d0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acedc5b8230ed9ad07f96f51f0ef862ab3a41d5e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "03a7b8f2892abfa853e13b8806690b40ab67e3ea",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769acef85730a6c0e2f5603fbd673b176c2d34d0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769acef85730a6c0e2f5603fbd673b176c2d34d0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=769acef85730a6c0e2f5603fbd673b176c2d34d0",
        "patch": "@@ -11,9 +11,8 @@\n #include <wallet/scriptpubkeyman.h>\n #include <wallet/wallet.h>\n \n-bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error)\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    LOCK(cs_wallet);\n     error.clear();\n     TopUpKeyPool();\n \n@@ -25,8 +24,6 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, const std::\n     }\n     LearnRelatedScripts(new_key, type);\n     dest = GetDestinationForKey(new_key, type);\n-\n-    m_wallet.SetAddressBook(dest, label, \"receive\");\n     return true;\n }\n "
      },
      {
        "sha": "f7a3b81d3a176ea4dd5e6234ee7323848f34340c",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769acef85730a6c0e2f5603fbd673b176c2d34d0/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769acef85730a6c0e2f5603fbd673b176c2d34d0/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=769acef85730a6c0e2f5603fbd673b176c2d34d0",
        "patch": "@@ -146,6 +146,7 @@ class ScriptPubKeyMan\n public:\n     ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage) {}\n     virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n     virtual bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) { return false; }\n@@ -245,7 +246,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n \n public:\n-    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n     //! will encrypt previously unencrypted keys"
      },
      {
        "sha": "2f1de5220b4612bb88fcfd25c15363b03b3d5c26",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769acef85730a6c0e2f5603fbd673b176c2d34d0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769acef85730a6c0e2f5603fbd673b176c2d34d0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=769acef85730a6c0e2f5603fbd673b176c2d34d0",
        "patch": "@@ -3034,12 +3034,17 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n \n bool CWallet::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error)\n {\n+    LOCK(cs_wallet);\n     error.clear();\n     bool result = false;\n     auto spk_man = m_spk_man.get();\n     if (spk_man) {\n-        result = spk_man->GetNewDestination(type, label, dest, error);\n+        result = spk_man->GetNewDestination(type, dest, error);\n+    }\n+    if (result) {\n+        SetAddressBook(dest, label, \"receive\");\n     }\n+\n     return result;\n }\n "
      }
    ]
  },
  {
    "sha": "4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzU0OTFmOTljNmI4Y2E3NzljNDhiZTYzZWIyYmExOGQ5OGVlNTJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "defbe6ce001414352b7d44a58bc34d7be2760df6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/defbe6ce001414352b7d44a58bc34d7be2760df6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "769acef85730a6c0e2f5603fbd673b176c2d34d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769acef85730a6c0e2f5603fbd673b176c2d34d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/769acef85730a6c0e2f5603fbd673b176c2d34d0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "df03f5c8875bcacd375991bd740e9df0cfd534a4",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
        "patch": "@@ -320,8 +320,6 @@ void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n             }\n         }\n     }\n-    batch.reset(); //write before setting the flag\n-    m_storage.SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n bool LegacyScriptPubKeyMan::IsHDEnabled() const"
      },
      {
        "sha": "7af2de224f750439dd70fea2709d1cbff8a81f96",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
        "patch": "@@ -249,10 +249,15 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n \n void CWallet::UpgradeKeyMetadata()\n {\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n     if (m_spk_man) {\n         AssertLockHeld(m_spk_man->cs_wallet);\n         m_spk_man->UpgradeKeyMetadata();\n     }\n+    SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)"
      }
    ]
  },
  {
    "sha": "0391aba52dcc33613295fd6099c804ac7134b063",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzkxYWJhNTJkY2MzMzYxMzI5NWZkNjA5OWM4MDRhYzcxMzRiMDYz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-29T21:49:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Remove SetWalletFlag from WalletStorage\n\nSetWalletFlag is unused.\n\nDoes not change any behavior",
      "tree": {
        "sha": "8fed317d8ccc908d96d1642d55383d597ac669bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fed317d8ccc908d96d1642d55383d597ac669bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0391aba52dcc33613295fd6099c804ac7134b063",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0391aba52dcc33613295fd6099c804ac7134b063",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0391aba52dcc33613295fd6099c804ac7134b063",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0391aba52dcc33613295fd6099c804ac7134b063/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c5491f99c6b8ca779c48be63eb2ba18d98ee52a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0ef62e3f50a22bafc972406bf887d5ba2a4ac2ba",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0391aba52dcc33613295fd6099c804ac7134b063/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0391aba52dcc33613295fd6099c804ac7134b063/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=0391aba52dcc33613295fd6099c804ac7134b063",
        "patch": "@@ -28,7 +28,6 @@ class WalletStorage\n     virtual const std::string GetDisplayName() const = 0;\n     virtual WalletDatabase& GetDatabase() = 0;\n     virtual bool IsWalletFlagSet(uint64_t) const = 0;\n-    virtual void SetWalletFlag(uint64_t) = 0;\n     virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n     virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n     virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;"
      },
      {
        "sha": "cb4dd71b1c090a1628df70f43c3d450fd432f98e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0391aba52dcc33613295fd6099c804ac7134b063/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0391aba52dcc33613295fd6099c804ac7134b063/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0391aba52dcc33613295fd6099c804ac7134b063",
        "patch": "@@ -1090,7 +1090,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     void BlockUntilSyncedToCurrentChain() LOCKS_EXCLUDED(cs_main, cs_wallet);\n \n     /** set a single wallet flag */\n-    void SetWalletFlag(uint64_t flags) override;\n+    void SetWalletFlag(uint64_t flags);\n \n     /** Unsets a single wallet flag */\n     void UnsetWalletFlag(uint64_t flag);"
      }
    ]
  },
  {
    "sha": "78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGU3Y2JjN2JhNTkzOGFiMmFlNjM0NzE0MWNhNzkzYThmYzA5ODUz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Remove UnsetWalletFlag call from LegacyScriptPubKeyMan::SetHDSeed\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "f68926a86e3071e0fb050e01e44ee987ba75e81e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68926a86e3071e0fb050e01e44ee987ba75e81e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e7cbc7ba5938ab2ae6347141ca793a8fc09853/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0391aba52dcc33613295fd6099c804ac7134b063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0391aba52dcc33613295fd6099c804ac7134b063",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0391aba52dcc33613295fd6099c804ac7134b063"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3c57232d1174e7dd4f9be8f357b2991f00d67295",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e7cbc7ba5938ab2ae6347141ca793a8fc09853/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e7cbc7ba5938ab2ae6347141ca793a8fc09853/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
        "patch": "@@ -875,7 +875,8 @@ void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n     newHdChain.seed_id = seed.GetID();\n     SetHDChain(newHdChain, false);\n     NotifyCanGetAddressesChanged();\n-    m_wallet.UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    m_storage.UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n }\n \n /**"
      }
    ]
  },
  {
    "sha": "fc2867fdf50f47e5ad5f43445e500e3a477a8074",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzI4NjdmZGY1MGY0N2U1YWQ1ZjQzNDQ1ZTUwMGUzYTQ3N2E4MDc0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-29T21:53:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "refactor: Replace UnsetWalletFlagWithDB with UnsetBlankWalletFlag in ScriptPubKeyMan\n\nScriptPubKeyMan is only using UnsetWalletFlagWithDB to unset the blank\nwallet flag. Just make that it's own function and not expose the flag\nwriting directly.\n\nThis does not change behavior.",
      "tree": {
        "sha": "09a6d8d8b7b99d434c00ef0731755c1d19f61066",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09a6d8d8b7b99d434c00ef0731755c1d19f61066"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc2867fdf50f47e5ad5f43445e500e3a477a8074",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2867fdf50f47e5ad5f43445e500e3a477a8074",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2867fdf50f47e5ad5f43445e500e3a477a8074",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2867fdf50f47e5ad5f43445e500e3a477a8074/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e7cbc7ba5938ab2ae6347141ca793a8fc09853",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78e7cbc7ba5938ab2ae6347141ca793a8fc09853"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 14,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1d7483df1276b28ad44901a6f04f2e187e8683f9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fc2867fdf50f47e5ad5f43445e500e3a477a8074",
        "patch": "@@ -440,7 +440,7 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& s\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n-    m_storage.UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+    m_storage.UnsetBlankWalletFlag(batch);\n     return true;\n }\n \n@@ -597,7 +597,7 @@ bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (batch.WriteWatchOnly(dest, meta)) {\n-        m_storage.UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        m_storage.UnsetBlankWalletFlag(batch);\n         return true;\n     }\n     return false;\n@@ -876,7 +876,7 @@ void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n     SetHDChain(newHdChain, false);\n     NotifyCanGetAddressesChanged();\n     WalletBatch batch(m_storage.GetDatabase());\n-    m_storage.UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+    m_storage.UnsetBlankWalletFlag(batch);\n }\n \n /**\n@@ -1155,7 +1155,7 @@ bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript&\n     if (!FillableSigningProvider::AddCScript(redeemScript))\n         return false;\n     if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n-        m_storage.UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        m_storage.UnsetBlankWalletFlag(batch);\n         return true;\n     }\n     return false;"
      },
      {
        "sha": "730229beb582e25ed13aee38a100c33ee2ebaa3f",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fc2867fdf50f47e5ad5f43445e500e3a477a8074",
        "patch": "@@ -28,7 +28,7 @@ class WalletStorage\n     virtual const std::string GetDisplayName() const = 0;\n     virtual WalletDatabase& GetDatabase() = 0;\n     virtual bool IsWalletFlagSet(uint64_t) const = 0;\n-    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n     virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n     virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n     virtual bool IsLocked() const = 0;"
      },
      {
        "sha": "88acfdf2aab106526da4b4d0a8e9d7eda310fd73",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fc2867fdf50f47e5ad5f43445e500e3a477a8074",
        "patch": "@@ -1309,6 +1309,11 @@ void CWallet::UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag)\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n+void CWallet::UnsetBlankWalletFlag(WalletBatch& batch)\n+{\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+}\n+\n bool CWallet::IsWalletFlagSet(uint64_t flag) const\n {\n     return (m_wallet_flags & flag);"
      },
      {
        "sha": "28cbdd66c14a8f2b321ec4c4a1c891d874d0ede3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2867fdf50f47e5ad5f43445e500e3a477a8074/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fc2867fdf50f47e5ad5f43445e500e3a477a8074",
        "patch": "@@ -660,7 +660,10 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& address, const std::string& strName, const std::string& strPurpose);\n \n     //! Unsets a wallet flag and saves it to disk\n-    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) override;\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag);\n+\n+    //! Unset the blank wallet flag and saves it to disk\n+    void UnsetBlankWalletFlag(WalletBatch& batch) override;\n \n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;"
      }
    ]
  },
  {
    "sha": "67be6b9e213da1fd7b2e8438c445c5a64092e831",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2JlNmI5ZTIxM2RhMWZkN2IyZTg0MzhjNDQ1YzVhNjQwOTJlODMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move SetAddressBookWithDB call out of LegacyScriptPubKeyMan::ImportScriptPubKeys\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "e018605db11b23e6bad38b51bfdbe88de6bbef1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e018605db11b23e6bad38b51bfdbe88de6bbef1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67be6b9e213da1fd7b2e8438c445c5a64092e831",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67be6b9e213da1fd7b2e8438c445c5a64092e831",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67be6b9e213da1fd7b2e8438c445c5a64092e831",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67be6b9e213da1fd7b2e8438c445c5a64092e831/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc2867fdf50f47e5ad5f43445e500e3a477a8074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2867fdf50f47e5ad5f43445e500e3a477a8074",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2867fdf50f47e5ad5f43445e500e3a477a8074"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b4abf0bad035d9608e310f7ccf24710b9d584fc3",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67be6b9e213da1fd7b2e8438c445c5a64092e831/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67be6b9e213da1fd7b2e8438c445c5a64092e831/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=67be6b9e213da1fd7b2e8438c445c5a64092e831",
        "patch": "@@ -1250,7 +1250,7 @@ bool LegacyScriptPubKeyMan::ImportPubKeys(const std::vector<CKeyID>& ordered_pub\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp)\n+bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp)\n {\n     WalletBatch batch(m_storage.GetDatabase());\n     for (const CScript& script : script_pub_keys) {\n@@ -1259,11 +1259,6 @@ bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::string& label, const\n                 return false;\n             }\n         }\n-        CTxDestination dest;\n-        ExtractDestination(script, dest);\n-        if (apply_label && IsValidDestination(dest)) {\n-            m_wallet.SetAddressBookWithDB(batch, dest, label, \"receive\");\n-        }\n     }\n     return true;\n }"
      },
      {
        "sha": "5bf58877eceae1dfec79e6fb638f246cb45198fc",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67be6b9e213da1fd7b2e8438c445c5a64092e831/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67be6b9e213da1fd7b2e8438c445c5a64092e831/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=67be6b9e213da1fd7b2e8438c445c5a64092e831",
        "patch": "@@ -323,7 +323,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();"
      },
      {
        "sha": "f2d6d5e60fad0ff08322e43b245267e6e9139648",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67be6b9e213da1fd7b2e8438c445c5a64092e831/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67be6b9e213da1fd7b2e8438c445c5a64092e831/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=67be6b9e213da1fd7b2e8438c445c5a64092e831",
        "patch": "@@ -1410,9 +1410,19 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n         return false;\n     }\n     AssertLockHeld(spk_man->cs_wallet);\n-    if (!spk_man->ImportScriptPubKeys(label, script_pub_keys, have_solving_data, apply_label, timestamp)) {\n+    if (!spk_man->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {\n         return false;\n     }\n+    if (apply_label) {\n+        WalletBatch batch(*database);\n+        for (const CScript& script : script_pub_keys) {\n+            CTxDestination dest;\n+            ExtractDestination(script, dest);\n+            if (IsValidDestination(dest)) {\n+                SetAddressBookWithDB(batch, dest, label, \"receive\");\n+            }\n+        }\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "9716bbe0f8081814cbf052e8211d1c6a838e5262",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzE2YmJlMGY4MDgxODE0Y2JmMDUyZTgyMTFkMWM2YTgzOGU1MjYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move LoadKey LegacyScriptPubKeyMan method definition\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "328fcca74b5324a8444f957db71139c8cec45e26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/328fcca74b5324a8444f957db71139c8cec45e26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9716bbe0f8081814cbf052e8211d1c6a838e5262",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9716bbe0f8081814cbf052e8211d1c6a838e5262",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9716bbe0f8081814cbf052e8211d1c6a838e5262",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9716bbe0f8081814cbf052e8211d1c6a838e5262/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67be6b9e213da1fd7b2e8438c445c5a64092e831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67be6b9e213da1fd7b2e8438c445c5a64092e831",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67be6b9e213da1fd7b2e8438c445c5a64092e831"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5641ef7b12858d30b660836a3f9b264cb0cd5085",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9716bbe0f8081814cbf052e8211d1c6a838e5262/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9716bbe0f8081814cbf052e8211d1c6a838e5262/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=9716bbe0f8081814cbf052e8211d1c6a838e5262",
        "patch": "@@ -398,6 +398,11 @@ void LegacyScriptPubKeyMan::UpdateTimeFirstKey(int64_t nCreateTime)\n     }\n }\n \n+bool LegacyScriptPubKeyMan::LoadKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    return AddKeyPubKeyInner(key, pubkey);\n+}\n+\n bool LegacyScriptPubKeyMan::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n     WalletBatch batch(m_storage.GetDatabase());"
      },
      {
        "sha": "dc3d3de516f2edf9dbc1314c65a739c0f2d7a7a8",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9716bbe0f8081814cbf052e8211d1c6a838e5262/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9716bbe0f8081814cbf052e8211d1c6a838e5262/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=9716bbe0f8081814cbf052e8211d1c6a838e5262",
        "patch": "@@ -276,7 +276,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return AddKeyPubKeyInner(key, pubkey); }\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)"
      }
    ]
  },
  {
    "sha": "a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMThlZGQ3YjM4M2Q2NjdiMTViNmQ0Yjg3YWEzYTA1NWE5ZmE1MDUx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move GetMetadata code out of getaddressinfo\n\nEasier to review ignoring whitespace:\n\n    git log -p -n1 -w\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "4bce57892e2f657934cb149107e8d423327ad99a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bce57892e2f657934cb149107e8d423327ad99a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9716bbe0f8081814cbf052e8211d1c6a838e5262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9716bbe0f8081814cbf052e8211d1c6a838e5262",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9716bbe0f8081814cbf052e8211d1c6a838e5262"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 35,
      "deletions": 20
    },
    "files": [
      {
        "sha": "8d8e63066c451fe9e3ef738cd3a0c1a04fcac469",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
        "patch": "@@ -3756,26 +3756,24 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n     }\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n-    const CKeyMetadata* meta = nullptr;\n-    CKeyID key_id = GetKeyForDestination(*provider, dest);\n-    if (!key_id.IsNull()) {\n-        auto it = pwallet->mapKeyMetadata.find(key_id);\n-        if (it != pwallet->mapKeyMetadata.end()) {\n-            meta = &it->second;\n+\n+    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan();\n+    if (spk_man) {\n+        CKeyID key_id = GetKeyForDestination(*provider, dest);\n+        const CKeyMetadata* meta = nullptr;\n+        if (!key_id.IsNull()) {\n+            meta = spk_man->GetMetadata(key_id);\n         }\n-    }\n-    if (!meta) {\n-        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-        if (it != pwallet->m_script_metadata.end()) {\n-            meta = &it->second;\n+        if (!meta) {\n+            meta = spk_man->GetMetadata(CScriptID(scriptPubKey));\n         }\n-    }\n-    if (meta) {\n-        ret.pushKV(\"timestamp\", meta->nCreateTime);\n-        if (meta->has_key_origin) {\n-            ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n-            ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-            ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n+        if (meta) {\n+            ret.pushKV(\"timestamp\", meta->nCreateTime);\n+            if (meta->has_key_origin) {\n+                ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n+                ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n+                ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n+            }\n         }\n     }\n "
      },
      {
        "sha": "8041a28d69bc3c1b849453b8478a12f629448afc",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
        "patch": "@@ -382,6 +382,21 @@ size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n     return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n+const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto it = mapKeyMetadata.find(CKeyID(id));\n+    if (it != mapKeyMetadata.end()) {\n+        return &it->second;\n+    } else {\n+        auto it2 = m_script_metadata.find(CScriptID(id));\n+        if (it2 != m_script_metadata.end()) {\n+            return &it2->second;\n+        }\n+    }\n+    return nullptr;\n+}\n+\n /**\n  * Update wallet first key creation time. This should be called whenever keys\n  * are added to the wallet, with the oldest key creation time."
      },
      {
        "sha": "e0dcae0d5c7ae01ce9d71277997e724020e64490",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
        "patch": "@@ -163,6 +163,8 @@ class ScriptPubKeyMan\n     virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n \n     virtual size_t KeypoolCountExternalKeys() { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n };\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n@@ -265,6 +267,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     int64_t GetOldestKeyPoolTime() override;\n     size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n     bool CanGetAddresses(bool internal = false) override;\n \n     // Map from Key ID to key metadata."
      },
      {
        "sha": "cfc3c6522ccd9f40944e763df60a9f958d70d3e2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a18edd7b383d667b15b6d4b87aa3a055a9fa5051/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
        "patch": "@@ -1134,8 +1134,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     std::set<int64_t>& setInternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setInternalKeyPool;\n     std::set<int64_t>& setExternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setExternalKeyPool;\n     int64_t& nTimeFirstKey GUARDED_BY(cs_wallet) = m_spk_man->nTimeFirstKey;\n-    std::map<CKeyID, CKeyMetadata>& mapKeyMetadata GUARDED_BY(cs_wallet) = m_spk_man->mapKeyMetadata;\n-    std::map<CScriptID, CKeyMetadata>& m_script_metadata GUARDED_BY(cs_wallet) = m_spk_man->m_script_metadata;\n     void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(m_spk_man->cs_wallet); m_spk_man->MarkPreSplitKeys(); }\n     void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(m_spk_man->cs_wallet); m_spk_man->MarkReserveKeysAsUsed(keypool_id); }\n     using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;"
      }
    ]
  },
  {
    "sha": "46865ec958b6b9bde04a827de598975f14bdb5e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Njg2NWVjOTU4YjZiOWJkZTA0YTgyN2RlNTk4OTc1ZjE0YmRiNWU3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "820071f22facdbed71b278f78b22a4e4543ba176",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/820071f22facdbed71b278f78b22a4e4543ba176"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46865ec958b6b9bde04a827de598975f14bdb5e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46865ec958b6b9bde04a827de598975f14bdb5e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46865ec958b6b9bde04a827de598975f14bdb5e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46865ec958b6b9bde04a827de598975f14bdb5e7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a18edd7b383d667b15b6d4b87aa3a055a9fa5051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a18edd7b383d667b15b6d4b87aa3a055a9fa5051"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 26,
      "deletions": 14
    },
    "files": [
      {
        "sha": "a866b5e4c0bd3b5005ffe9bf0bbc31f9f1307436",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=46865ec958b6b9bde04a827de598975f14bdb5e7",
        "patch": "@@ -287,6 +287,23 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n     return TopUpKeyPool(size);\n }\n \n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    AssertLockHeld(cs_wallet);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "be55d3cb129b18db40ad8cef848c73c5a1da912e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=46865ec958b6b9bde04a827de598975f14bdb5e7",
        "patch": "@@ -37,6 +37,8 @@ class WalletStorage\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n \n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n /** A key from a CWallet's keypool\n  *\n  * The wallet holds one (for pre HD-split wallets) or several keypools. These\n@@ -154,6 +156,9 @@ class ScriptPubKeyMan\n \n     virtual bool TopUp(unsigned int size = 0) { return false; }\n \n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n     /* Returns true if HD is enabled */\n     virtual bool IsHDEnabled() const { return false; }\n \n@@ -259,6 +264,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool TopUp(unsigned int size = 0) override;\n \n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "c35ba4fcd992d4aa2ba7a1d2ca0257f4a0f35813",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=46865ec958b6b9bde04a827de598975f14bdb5e7",
        "patch": "@@ -236,8 +236,6 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n-std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n-\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n@@ -876,17 +874,8 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::St\n \n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n-                // extract addresses and check if they match with an unused keypool key\n-                for (const auto& keyid : GetAffectedKeys(txout.scriptPubKey, *m_spk_man)) {\n-                    std::map<CKeyID, int64_t>::const_iterator mi = m_spk_man->m_pool_key_to_index.find(keyid);\n-                    if (mi != m_spk_man->m_pool_key_to_index.end()) {\n-                        WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n-                        MarkReserveKeysAsUsed(mi->second);\n-\n-                        if (!m_spk_man->TopUp()) {\n-                            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n-                        }\n-                    }\n+                if (auto spk_man = m_spk_man.get()) {\n+                    spk_man->MarkUnusedAddresses(txout.scriptPubKey);\n                 }\n             }\n "
      },
      {
        "sha": "f9a7bd1d182b03f906c6e63ec484850a55d41439",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46865ec958b6b9bde04a827de598975f14bdb5e7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=46865ec958b6b9bde04a827de598975f14bdb5e7",
        "patch": "@@ -1135,7 +1135,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     std::set<int64_t>& setExternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setExternalKeyPool;\n     int64_t& nTimeFirstKey GUARDED_BY(cs_wallet) = m_spk_man->nTimeFirstKey;\n     void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(m_spk_man->cs_wallet); m_spk_man->MarkPreSplitKeys(); }\n-    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(m_spk_man->cs_wallet); m_spk_man->MarkReserveKeysAsUsed(keypool_id); }\n     using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n };\n "
      }
    ]
  },
  {
    "sha": "8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjBkODJiYjQyOGRlOWU3ZjFkYTdjNjE1NzRlN2E4Mzc2YTYyZDQz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move Upgrade code out of CWallet::CreateWalletFromFile\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "fe38b0f749cbb7b639c4b159716b1dd13c79b9ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe38b0f749cbb7b639c4b159716b1dd13c79b9ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46865ec958b6b9bde04a827de598975f14bdb5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46865ec958b6b9bde04a827de598975f14bdb5e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46865ec958b6b9bde04a827de598975f14bdb5e7"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 44,
      "deletions": 26
    },
    "files": [
      {
        "sha": "9300630f664c8dc80a67152ca16f8713cbf7bbd0",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
        "patch": "@@ -361,6 +361,41 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n     return keypool_has_keys;\n }\n \n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n+{\n+    AssertLockHeld(cs_wallet);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (m_storage.CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        m_storage.SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        CPubKey masterPubKey = GenerateNewSeed();\n+        SetHDSeed(masterPubKey);\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (m_storage.CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        m_storage.SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n     if (setKeyPool.empty()) {\n         return GetTime();"
      },
      {
        "sha": "e2a706e9afbc69f2fa303bf1e274eaf39f3d5bf7",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
        "patch": "@@ -165,6 +165,9 @@ class ScriptPubKeyMan\n     /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n     virtual bool CanGetAddresses(bool internal = false) { return false; }\n \n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, std::string& error) { return false; }\n+\n     virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n \n     virtual size_t KeypoolCountExternalKeys() { return 0; }\n@@ -271,6 +274,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool IsHDEnabled() const override;\n \n+    bool Upgrade(int prev_version, std::string& error) override;\n+\n     int64_t GetOldestKeyPoolTime() override;\n     size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "2c4507a1b6fab19aceadf0a9317941551b8788ac",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 25,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
        "patch": "@@ -3614,31 +3614,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        bool hd_upgrade = false;\n-        bool split_upgrade = false;\n-        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->m_spk_man->IsHDEnabled()) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-\n-            // generate a new master key\n-            CPubKey masterPubKey = walletInstance->m_spk_man->GenerateNewSeed();\n-            walletInstance->m_spk_man->SetHDSeed(masterPubKey);\n-            hd_upgrade = true;\n-        }\n-        // Upgrade to HD chain split if necessary\n-        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n-            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n-        }\n-        // Mark all keys currently in the keypool as pre-split\n-        if (split_upgrade) {\n-            walletInstance->MarkPreSplitKeys();\n-        }\n-        // Regenerate the keypool if upgraded to HD\n-        if (hd_upgrade) {\n-            if (!walletInstance->m_spk_man->TopUp()) {\n-                error = _(\"Unable to generate keys\").translated;\n+        if (auto spk_man = walletInstance->m_spk_man.get()) {\n+            std::string error;\n+            if (!spk_man->Upgrade(prev_version, error)) {\n+                chain.initError(error);\n                 return nullptr;\n             }\n         }"
      },
      {
        "sha": "2a80395644ba71a0a36dfd9a10b98503363124a0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b0d82bb428de9e7f1da7c61574e7a8376a62d43/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
        "patch": "@@ -1134,7 +1134,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     std::set<int64_t>& setInternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setInternalKeyPool;\n     std::set<int64_t>& setExternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setExternalKeyPool;\n     int64_t& nTimeFirstKey GUARDED_BY(cs_wallet) = m_spk_man->nTimeFirstKey;\n-    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(m_spk_man->cs_wallet); m_spk_man->MarkPreSplitKeys(); }\n     using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n };\n "
      }
    ]
  },
  {
    "sha": "f45d12b36cee05aa3c2685b951d27bd8a58539ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDVkMTJiMzZjZWUwNWFhM2MyNjg1Yjk1MWQyN2JkOGE1ODUzOWFl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move HavePrivateKeys code out of CWallet::CreateWalletFromFile\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "9bfd31cb0352ea8d41a115ed4bcc8a894a5b530e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bfd31cb0352ea8d41a115ed4bcc8a894a5b530e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f45d12b36cee05aa3c2685b951d27bd8a58539ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f45d12b36cee05aa3c2685b951d27bd8a58539ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f45d12b36cee05aa3c2685b951d27bd8a58539ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f45d12b36cee05aa3c2685b951d27bd8a58539ae/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b0d82bb428de9e7f1da7c61574e7a8376a62d43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b0d82bb428de9e7f1da7c61574e7a8376a62d43"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 14,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9d90edeea171c58dc587aee378aeeb4059492882",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f45d12b36cee05aa3c2685b951d27bd8a58539ae/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f45d12b36cee05aa3c2685b951d27bd8a58539ae/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=f45d12b36cee05aa3c2685b951d27bd8a58539ae",
        "patch": "@@ -396,6 +396,12 @@ bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n     if (setKeyPool.empty()) {\n         return GetTime();"
      },
      {
        "sha": "927401be2084720f4113dac093071b207fb0fce0",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f45d12b36cee05aa3c2685b951d27bd8a58539ae/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f45d12b36cee05aa3c2685b951d27bd8a58539ae/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=f45d12b36cee05aa3c2685b951d27bd8a58539ae",
        "patch": "@@ -168,6 +168,8 @@ class ScriptPubKeyMan\n     /** Upgrades the wallet to the specified version */\n     virtual bool Upgrade(int prev_version, std::string& error) { return false; }\n \n+    virtual bool HavePrivateKeys() const { return false; }\n+\n     virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n \n     virtual size_t KeypoolCountExternalKeys() { return 0; }\n@@ -276,6 +278,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool Upgrade(int prev_version, std::string& error) override;\n \n+    bool HavePrivateKeys() const override;\n+\n     int64_t GetOldestKeyPoolTime() override;\n     size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "e6ef932ac22af4e91076b91fcdbc2b6e33ffef5e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f45d12b36cee05aa3c2685b951d27bd8a58539ae/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f45d12b36cee05aa3c2685b951d27bd8a58539ae/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f45d12b36cee05aa3c2685b951d27bd8a58539ae",
        "patch": "@@ -3648,9 +3648,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        LOCK(walletInstance->cs_KeyStore);\n-        if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+        if (walletInstance->m_spk_man) {\n+            if (walletInstance->m_spk_man->HavePrivateKeys()) {\n+                warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "0eac7088ab878372a72f85f9c5f7662a14199083",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWFjNzA4OGFiODc4MzcyYTcyZjg1ZjljNWY3NjYyYTE0MTk5MDgz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move SetupGeneration code out of CWallet\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "1161592b4575e64b870b079c9b9104b73ed54d0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1161592b4575e64b870b079c9b9104b73ed54d0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eac7088ab878372a72f85f9c5f7662a14199083",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eac7088ab878372a72f85f9c5f7662a14199083",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eac7088ab878372a72f85f9c5f7662a14199083",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eac7088ab878372a72f85f9c5f7662a14199083/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f45d12b36cee05aa3c2685b951d27bd8a58539ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f45d12b36cee05aa3c2685b951d27bd8a58539ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f45d12b36cee05aa3c2685b951d27bd8a58539ae"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 39,
      "deletions": 16
    },
    "files": [
      {
        "sha": "14e4163be6d1f3fd91afdd835c370c82ac57474a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eac7088ab878372a72f85f9c5f7662a14199083/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eac7088ab878372a72f85f9c5f7662a14199083/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0eac7088ab878372a72f85f9c5f7662a14199083",
        "patch": "@@ -339,6 +339,19 @@ void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n     }\n }\n \n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || m_storage.IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool LegacyScriptPubKeyMan::IsHDEnabled() const\n {\n     return !hdChain.seed_id.IsNull();"
      },
      {
        "sha": "0e38cbf6577512ad4e901cdf4dd79a7fb3d59bd0",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eac7088ab878372a72f85f9c5f7662a14199083/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eac7088ab878372a72f85f9c5f7662a14199083/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=0eac7088ab878372a72f85f9c5f7662a14199083",
        "patch": "@@ -159,6 +159,12 @@ class ScriptPubKeyMan\n     //! Mark unused addresses as being used\n     virtual void MarkUnusedAddresses(const CScript& script) {}\n \n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n     /* Returns true if HD is enabled */\n     virtual bool IsHDEnabled() const { return false; }\n \n@@ -276,6 +282,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool IsHDEnabled() const override;\n \n+    bool SetupGeneration(bool force = false) override;\n+\n     bool Upgrade(int prev_version, std::string& error) override;\n \n     bool HavePrivateKeys() const override;"
      },
      {
        "sha": "1b27077d6750ce8811aa14a467d240c4c485d110",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eac7088ab878372a72f85f9c5f7662a14199083/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eac7088ab878372a72f85f9c5f7662a14199083/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0eac7088ab878372a72f85f9c5f7662a14199083",
        "patch": "@@ -210,9 +210,14 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             }\n \n             // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->m_spk_man->GenerateNewSeed();\n-            wallet->m_spk_man->SetHDSeed(master_pub_key);\n-            wallet->m_spk_man->NewKeyPool();\n+            {\n+                if (auto spk_man = wallet->m_spk_man.get()) {\n+                    if (!spk_man->SetupGeneration()) {\n+                        error = \"Unable to generate initial keys\";\n+                        return WalletCreationStatus::CREATION_FAILED;\n+                    }\n+                }\n+            }\n \n             // Relock the wallet\n             wallet->Lock();\n@@ -565,11 +570,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Unlock(strWalletPassphrase);\n \n         // if we are using HD, replace the HD seed with a new one\n-        if (m_spk_man->IsHDEnabled()) {\n-            m_spk_man->SetHDSeed(m_spk_man->GenerateNewSeed());\n+        if (auto spk_man = m_spk_man.get()) {\n+            if (spk_man->IsHDEnabled()) {\n+                spk_man->SetupGeneration(true);\n+            }\n         }\n-\n-        m_spk_man->NewKeyPool();\n         Lock();\n \n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n@@ -3630,15 +3635,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n-            // generate a new seed\n-            CPubKey seed = walletInstance->m_spk_man->GenerateNewSeed();\n-            walletInstance->m_spk_man->SetHDSeed(seed);\n-        }\n-\n-        // Top up the keypool\n-        if (walletInstance->m_spk_man->CanGenerateKeys() && !walletInstance->m_spk_man->TopUp()) {\n-            error = _(\"Unable to generate initial keys\").translated;\n-            return nullptr;\n+            if (auto spk_man = walletInstance->m_spk_man.get()) {\n+                if (!spk_man->SetupGeneration()) {\n+                    error = _(\"Unable to generate initial keys\").translated;\n+                    return nullptr;\n+                }\n+            }\n         }\n \n         auto locked_chain = chain.lock();"
      }
    ]
  },
  {
    "sha": "089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODllMTdkNDVjODE0N2JkMDMwM2JjYmYwMmRjMGY3ZDZiMzg3ZjJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move RewriteDB code out of CWallet\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "d0aef56cc5aa8f662f15d4e590611cbd6a6a93ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0aef56cc5aa8f662f15d4e590611cbd6a6a93ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0eac7088ab878372a72f85f9c5f7662a14199083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eac7088ab878372a72f85f9c5f7662a14199083",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0eac7088ab878372a72f85f9c5f7662a14199083"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 25,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8c3a2a831af1f4120f994a364dee538a7fe31d94",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
        "patch": "@@ -415,6 +415,17 @@ bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n     return !mapKeys.empty() || !mapCryptedKeys.empty();\n }\n \n+void LegacyScriptPubKeyMan::RewriteDB()\n+{\n+    AssertLockHeld(cs_wallet);\n+    setInternalKeyPool.clear();\n+    setExternalKeyPool.clear();\n+    m_pool_key_to_index.clear();\n+    // Note: can't top-up keypool here, because wallet is locked.\n+    // User will be prompted to unlock wallet the next operation\n+    // that requires a new key.\n+}\n+\n static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n     if (setKeyPool.empty()) {\n         return GetTime();"
      },
      {
        "sha": "24b0a27881ef59e3841715acd132c9cf4342380f",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
        "patch": "@@ -176,6 +176,9 @@ class ScriptPubKeyMan\n \n     virtual bool HavePrivateKeys() const { return false; }\n \n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n     virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n \n     virtual size_t KeypoolCountExternalKeys() { return 0; }\n@@ -288,6 +291,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool HavePrivateKeys() const override;\n \n+    void RewriteDB() override;\n+\n     int64_t GetOldestKeyPoolTime() override;\n     size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "575ae7e044e52bc0cf749e6dcc193e6919afd724",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
        "patch": "@@ -2903,12 +2903,9 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_spk_man->m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            if (auto spk_man = m_spk_man.get()) {\n+                spk_man->RewriteDB();\n+            }\n         }\n     }\n \n@@ -2940,12 +2937,9 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_spk_man->m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            if (auto spk_man = m_spk_man.get()) {\n+                spk_man->RewriteDB();\n+            }\n         }\n     }\n \n@@ -2964,13 +2958,9 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            LOCK(cs_wallet);\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_spk_man->m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            if (auto spk_man = m_spk_man.get()) {\n+                spk_man->RewriteDB();\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "7ef47b88e67718766c92d23973742d08436176e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWY0N2I4OGU2NzcxODc2NmM5MmQyMzk3Mzc0MmQwODQzNjE3NmUw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move GetKeypoolSize code out of CWallet\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "33e85f9d2ebcca00a3b000fd9d69e8d2462703d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33e85f9d2ebcca00a3b000fd9d69e8d2462703d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ef47b88e67718766c92d23973742d08436176e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ef47b88e67718766c92d23973742d08436176e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ef47b88e67718766c92d23973742d08436176e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ef47b88e67718766c92d23973742d08436176e0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/089e17d45c8147bd0303bcbf02dc0f7d6b387f2a"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 20,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a046a7c93e43a2ce79d4fd1c397a166d4ab36993",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=7ef47b88e67718766c92d23973742d08436176e0",
        "patch": "@@ -464,6 +464,12 @@ size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n     return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n+unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    AssertLockHeld(cs_wallet);\n+    return setInternalKeyPool.size() + setExternalKeyPool.size();\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "b9722ea63f6f52b04ad28e663f88685be553f099",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=7ef47b88e67718766c92d23973742d08436176e0",
        "patch": "@@ -182,6 +182,7 @@ class ScriptPubKeyMan\n     virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n \n     virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeyPoolSize() const { return 0; }\n \n     virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n };\n@@ -295,6 +296,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     int64_t GetOldestKeyPoolTime() override;\n     size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    unsigned int GetKeyPoolSize() const override;\n \n     const CKeyMetadata* GetMetadata(uint160 id) const override;\n "
      },
      {
        "sha": "3dff6f7d614767646d0743325d28500600fd9669",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ef47b88e67718766c92d23973742d08436176e0",
        "patch": "@@ -3027,6 +3027,17 @@ size_t CWallet::KeypoolCountExternalKeys()\n     return count;\n }\n \n+unsigned int CWallet::GetKeyPoolSize() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    unsigned int count = 0;\n+    if (auto spk_man = m_spk_man.get()) {\n+        count += spk_man->GetKeyPoolSize();\n+    }\n+    return count;\n+}\n+\n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n     bool res = true;"
      },
      {
        "sha": "49c27eb9f6f2e7c3733285f1e0aa23672d56fd71",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef47b88e67718766c92d23973742d08436176e0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7ef47b88e67718766c92d23973742d08436176e0",
        "patch": "@@ -992,11 +992,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n-    {\n-        AssertLockHeld(cs_wallet);\n-        return setInternalKeyPool.size() + setExternalKeyPool.size();\n-    }\n+    unsigned int GetKeyPoolSize() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false) override;\n@@ -1131,8 +1127,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     LegacyScriptPubKeyMan::WatchOnlySet& setWatchOnly GUARDED_BY(cs_KeyStore) = m_spk_man->setWatchOnly;\n     LegacyScriptPubKeyMan::WatchKeyMap& mapWatchKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapWatchKeys;\n     WalletBatch*& encrypted_batch GUARDED_BY(cs_wallet) = m_spk_man->encrypted_batch;\n-    std::set<int64_t>& setInternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setInternalKeyPool;\n-    std::set<int64_t>& setExternalKeyPool GUARDED_BY(cs_wallet) = m_spk_man->setExternalKeyPool;\n     int64_t& nTimeFirstKey GUARDED_BY(cs_wallet) = m_spk_man->nTimeFirstKey;\n     using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n };"
      }
    ]
  },
  {
    "sha": "152b0a00d8e681dd098f6b548447b82ab54ebe3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTJiMGEwMGQ4ZTY4MWRkMDk4ZjZiNTQ4NDQ3YjgyYWI1NGViZTNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-02T02:58:05Z"
      },
      "message": "Refactor: Move nTimeFirstKey accesses out of CWallet\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "cb55db76e9f2ebdca3476c4304673ef8c3fa09ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb55db76e9f2ebdca3476c4304673ef8c3fa09ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152b0a00d8e681dd098f6b548447b82ab54ebe3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152b0a00d8e681dd098f6b548447b82ab54ebe3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/152b0a00d8e681dd098f6b548447b82ab54ebe3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152b0a00d8e681dd098f6b548447b82ab54ebe3c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ef47b88e67718766c92d23973742d08436176e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ef47b88e67718766c92d23973742d08436176e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ef47b88e67718766c92d23973742d08436176e0"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 17,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bb13db11bacf690c28cc6315be851e3a2eb03753",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=152b0a00d8e681dd098f6b548447b82ab54ebe3c",
        "patch": "@@ -470,6 +470,12 @@ unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n     return setInternalKeyPool.size() + setExternalKeyPool.size();\n }\n \n+int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+    return nTimeFirstKey;\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "0dbf98ee942434a5615ea96aff77feb55c8b1e1b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=152b0a00d8e681dd098f6b548447b82ab54ebe3c",
        "patch": "@@ -184,6 +184,8 @@ class ScriptPubKeyMan\n     virtual size_t KeypoolCountExternalKeys() { return 0; }\n     virtual unsigned int GetKeyPoolSize() const { return 0; }\n \n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n     virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n };\n \n@@ -298,6 +300,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     unsigned int GetKeyPoolSize() const override;\n \n+    int64_t GetTimeFirstKey() const override;\n+\n     const CKeyMetadata* GetMetadata(uint160 id) const override;\n \n     bool CanGetAddresses(bool internal = false) override;"
      },
      {
        "sha": "b10a5deedc3e70f660c06f98a2ff3748faacf6bb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=152b0a00d8e681dd098f6b548447b82ab54ebe3c",
        "patch": "@@ -3804,8 +3804,13 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        Optional<int64_t> time_first_key;\n+        if (auto spk_man = walletInstance->m_spk_man.get()) {\n+            int64_t time = spk_man->GetTimeFirstKey();\n+            if (!time_first_key || time < *time_first_key) time_first_key = time;\n+        }\n+        if (time_first_key) {\n+            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(*time_first_key - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n                 rescan_height = *first_block;\n             }\n         }"
      },
      {
        "sha": "7d0fae0bc7e472de598af8ab2de90e2123063611",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152b0a00d8e681dd098f6b548447b82ab54ebe3c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=152b0a00d8e681dd098f6b548447b82ab54ebe3c",
        "patch": "@@ -1127,7 +1127,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     LegacyScriptPubKeyMan::WatchOnlySet& setWatchOnly GUARDED_BY(cs_KeyStore) = m_spk_man->setWatchOnly;\n     LegacyScriptPubKeyMan::WatchKeyMap& mapWatchKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapWatchKeys;\n     WalletBatch*& encrypted_batch GUARDED_BY(cs_wallet) = m_spk_man->encrypted_batch;\n-    int64_t& nTimeFirstKey GUARDED_BY(cs_wallet) = m_spk_man->nTimeFirstKey;\n     using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n };\n "
      }
    ]
  }
]