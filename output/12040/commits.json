[
  {
    "sha": "eefdf1b6852af6f681fba58f89faa6db2949e7c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWZkZjFiNjg1MmFmNmY2ODFmYmE1OGY4OWZhYTZkYjI5NDllN2Mw",
    "commit": {
      "author": {
        "name": "Lionello Lunesu",
        "email": "lio+git@lunesu.com",
        "date": "2017-12-28T14:43:27Z"
      },
      "committer": {
        "name": "Lionello Lunesu",
        "email": "lio+git@lunesu.com",
        "date": "2018-11-07T01:38:04Z"
      },
      "message": "fix: add support for CORS headers and pre-flight request",
      "tree": {
        "sha": "206a794d8b7996bb0eb2d604b81abf3e86588237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/206a794d8b7996bb0eb2d604b81abf3e86588237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eefdf1b6852af6f681fba58f89faa6db2949e7c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefdf1b6852af6f681fba58f89faa6db2949e7c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eefdf1b6852af6f681fba58f89faa6db2949e7c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefdf1b6852af6f681fba58f89faa6db2949e7c0/comments",
    "author": {
      "login": "lionello",
      "id": 591860,
      "node_id": "MDQ6VXNlcjU5MTg2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/591860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lionello",
      "html_url": "https://github.com/lionello",
      "followers_url": "https://api.github.com/users/lionello/followers",
      "following_url": "https://api.github.com/users/lionello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lionello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lionello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lionello/subscriptions",
      "organizations_url": "https://api.github.com/users/lionello/orgs",
      "repos_url": "https://api.github.com/users/lionello/repos",
      "events_url": "https://api.github.com/users/lionello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lionello/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lionello",
      "id": 591860,
      "node_id": "MDQ6VXNlcjU5MTg2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/591860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lionello",
      "html_url": "https://github.com/lionello",
      "followers_url": "https://api.github.com/users/lionello/followers",
      "following_url": "https://api.github.com/users/lionello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lionello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lionello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lionello/subscriptions",
      "organizations_url": "https://api.github.com/users/lionello/orgs",
      "repos_url": "https://api.github.com/users/lionello/repos",
      "events_url": "https://api.github.com/users/lionello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lionello/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d864e45730be82879abe9c096c4d577975fdda7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d864e45730be82879abe9c096c4d577975fdda7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d864e45730be82879abe9c096c4d577975fdda7d"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 157,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0ddb8a69938361690a51f66974a64227c4316a21",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefdf1b6852af6f681fba58f89faa6db2949e7c0/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefdf1b6852af6f681fba58f89faa6db2949e7c0/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=eefdf1b6852af6f681fba58f89faa6db2949e7c0",
        "patch": "@@ -147,6 +147,124 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n \n static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n {\n+    // First, check and/or set CORS headers according to\n+    // https://www.w3.org/TR/cors/#resource-requests\n+    do {\n+        // 1. If the Origin header is not present terminate this set of steps.\n+        // The request is outside the scope of this specification.\n+        std::pair<bool, std::string> origin = req->GetHeader(\"origin\");\n+        if (!origin.first) {\n+            break;\n+        }\n+\n+        // 2. If the value of the Origin header is not a case-sensitive match\n+        // for any of the values in list of origins do not set any additional\n+        // headers and terminate this set of steps.\n+        // Note: Always matching is acceptable since the list of origins can be\n+        // unbounded.\n+\n+        if (req->GetRequestMethod() == HTTPRequest::OPTIONS) {\n+            // 6.2 Preflight Request\n+            // In response to a preflight request the resource indicates which\n+            // methods and headers (other than simple methods and simple\n+            // headers) it is willing to handle and whether it supports\n+            // credentials.\n+            // Resources must use the following set of steps to determine which\n+            // additional headers to use in the response:\n+\n+            // 3. Let method be the value as result of parsing the\n+            // Access-Control-Request-Method header.\n+            // If there is no Access-Control-Request-Method header or if parsing\n+            // failed, do not set any additional headers and terminate this set\n+            // of steps. The request is outside the scope of this specification.\n+            std::pair<bool, std::string> method =\n+                req->GetHeader(\"access-control-request-method\");\n+            if (!method.first) {\n+                break;\n+            }\n+\n+            // 4. Let header field-names be the values as result of parsing\n+            // the Access-Control-Request-Headers headers.\n+            // If there are no Access-Control-Request-Headers headers let header\n+            // field-names be the empty list.\n+            // If parsing failed do not set any additional headers and terminate\n+            // this set of steps. The request is outside the scope of this\n+            // specification.\n+            std::pair<bool, std::string> header_field_names =\n+                req->GetHeader(\"access-control-request-headers\");\n+\n+            // 5. If method is not a case-sensitive match for any of the\n+            // values in list of methods do not set any additional headers\n+            // and terminate this set of steps.\n+            // Note: Always matching is acceptable since the list of methods\n+            // can be unbounded.\n+            if (method.second != \"POST\") {\n+                break;\n+            }\n+\n+            // 6. If any of the header field-names is not a ASCII case-\n+            // insensitive match for any of the values in list of headers do not\n+            // set any additional headers and terminate this set of steps.\n+            // Note: Always matching is acceptable since the list of headers can\n+            // be unbounded.\n+            const std::string& list_of_headers = \"authorization,content-type\";\n+\n+            // 7. If the resource supports credentials add a single\n+            // Access-Control-Allow-Origin header, with the value of the Origin\n+            // header as value, and add a single\n+            // Access-Control-Allow-Credentials header with the case-sensitive\n+            // string \"true\" as value.\n+            req->WriteHeader(\"Access-Control-Allow-Origin\", origin.second);\n+            req->WriteHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+\n+            // 8. Optionally add a single Access-Control-Max-Age header with as\n+            // value the amount of seconds the user agent is allowed to cache\n+            // the result of the request.\n+\n+            // 9. If method is a simple method this step may be skipped.\n+            // Add one or more Access-Control-Allow-Methods headers consisting\n+            // of (a subset of) the list of methods.\n+            // If a method is a simple method it does not need to be listed, but\n+            // this is not prohibited.\n+            // Note: Since the list of methods can be unbounded, simply\n+            // returning the method indicated by\n+            // Access-Control-Request-Method (if supported) can be enough.\n+            req->WriteHeader(\"Access-Control-Allow-Methods\", method.second);\n+\n+            // 10. If each of the header field-names is a simple header and none\n+            // is Content-Type, this step may be skipped.\n+            // Add one or more Access-Control-Allow-Headers headers consisting\n+            // of (a subset of) the list of headers.\n+            req->WriteHeader(\n+                \"Access-Control-Allow-Headers\",\n+                header_field_names.first ? header_field_names.second\n+                                         : list_of_headers);\n+            req->WriteReply(HTTP_OK);\n+            return true;\n+        }\n+\n+        // 6.1 Simple Cross-Origin Request, Actual Request, and Redirects\n+        // In response to a simple cross-origin request or actual request the\n+        // resource indicates whether or not to share the response.\n+        // If the resource has been relocated, it indicates whether to share its\n+        // new URL.\n+        // Resources must use the following set of steps to determine which\n+        // additional headers to use in the response:\n+\n+        // 3. If the resource supports credentials add a single\n+        // Access-Control-Allow-Origin header, with the value of the Origin\n+        // header as value, and add a single Access-Control-Allow-Credentials\n+        // header with the case-sensitive string \"true\" as value.\n+        req->WriteHeader(\"Access-Control-Allow-Origin\", origin.second);\n+        req->WriteHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+\n+        // 4. If the list of exposed headers is not empty add one or more\n+        // Access-Control-Expose-Headers headers, with as values the header\n+        // field names given in the list of exposed headers.\n+        req->WriteHeader(\"Access-Control-Expose-Headers\", \"WWW-Authenticate\");\n+    }\n+    while (false);\n+\n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n         req->WriteReply(HTTP_BAD_METHOD, \"JSONRPC server handles only POST requests\");"
      },
      {
        "sha": "e44a4e7834b59539571336fb92801848f34f5957",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefdf1b6852af6f681fba58f89faa6db2949e7c0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefdf1b6852af6f681fba58f89faa6db2949e7c0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=eefdf1b6852af6f681fba58f89faa6db2949e7c0",
        "patch": "@@ -194,16 +194,14 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n     switch (m) {\n     case HTTPRequest::GET:\n         return \"GET\";\n-        break;\n+    case HTTPRequest::OPTIONS:\n+        return \"OPTIONS\";\n     case HTTPRequest::POST:\n         return \"POST\";\n-        break;\n     case HTTPRequest::HEAD:\n         return \"HEAD\";\n-        break;\n     case HTTPRequest::PUT:\n         return \"PUT\";\n-        break;\n     default:\n         return \"unknown\";\n     }\n@@ -385,6 +383,14 @@ bool InitHTTPServer()\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n+    /* Only POST and OPTIONS are supported, but we return HTTP 405 for the others */\n+    evhttp_set_allowed_methods(http,\n+        EVHTTP_REQ_GET |\n+        EVHTTP_REQ_POST |\n+        EVHTTP_REQ_HEAD |\n+        EVHTTP_REQ_PUT |\n+        EVHTTP_REQ_DELETE |\n+        EVHTTP_REQ_OPTIONS);\n \n     if (!HTTPBindAddresses(http)) {\n         LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n@@ -625,21 +631,18 @@ std::string HTTPRequest::GetURI() const\n HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n {\n     switch (evhttp_request_get_command(req)) {\n+    case EVHTTP_REQ_OPTIONS:\n+        return OPTIONS;\n     case EVHTTP_REQ_GET:\n         return GET;\n-        break;\n     case EVHTTP_REQ_POST:\n         return POST;\n-        break;\n     case EVHTTP_REQ_HEAD:\n         return HEAD;\n-        break;\n     case EVHTTP_REQ_PUT:\n         return PUT;\n-        break;\n     default:\n         return UNKNOWN;\n-        break;\n     }\n }\n "
      },
      {
        "sha": "03a592db67a03b86e8fd477f1b1fd01ce90ebcd5",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefdf1b6852af6f681fba58f89faa6db2949e7c0/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefdf1b6852af6f681fba58f89faa6db2949e7c0/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=eefdf1b6852af6f681fba58f89faa6db2949e7c0",
        "patch": "@@ -69,7 +69,8 @@ class HTTPRequest\n         GET,\n         POST,\n         HEAD,\n-        PUT\n+        PUT,\n+        OPTIONS\n     };\n \n     /** Get requested URI."
      },
      {
        "sha": "2b597acd55d90716df71f99d2d4e2c7aeea5d4ce",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefdf1b6852af6f681fba58f89faa6db2949e7c0/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefdf1b6852af6f681fba58f89faa6db2949e7c0/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=eefdf1b6852af6f681fba58f89faa6db2949e7c0",
        "patch": "@@ -103,6 +103,31 @@ def run_test(self):\n         out1 = conn.getresponse()\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n+        # check Standard CORS request\n+        origin = \"null\"\n+\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        authpair = url.username + ':' + url.password\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Origin\": origin}\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, http.client.OK)\n+        assert_equal(out1.headers[\"Access-Control-Allow-Origin\"], origin)\n+        assert_equal(out1.headers[\"Access-Control-Allow-Credentials\"], \"true\")\n+        assert_equal(out1.headers[\"Access-Control-Expose-Headers\"], \"WWW-Authenticate\")\n+        assert(b'\"error\":null' in out1.read())\n+\n+        # check Pre-flight CORS request\n+        corsheaders = {\"Origin\": origin, \"Access-Control-Request-Method\": \"POST\"}\n+        conn.request('OPTIONS', '/', None, corsheaders)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, http.client.OK)\n+        assert_equal(out1.headers[\"Access-Control-Allow-Origin\"], origin)\n+        assert_equal(out1.headers[\"Access-Control-Allow-Credentials\"], \"true\")\n+        assert_equal(out1.headers[\"Access-Control-Allow-Methods\"], \"POST\")\n+        assert_equal(out1.headers[\"Access-Control-Allow-Headers\"], \"authorization,content-type\")\n+        assert_equal(b'', out1.read())\n \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      }
    ]
  },
  {
    "sha": "210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTBiOGVlMWZiZjc5Y2ZmOThiZjc2ZDUzYjRmMzViYzljZGQwMmQy",
    "commit": {
      "author": {
        "name": "Lionello Lunesu",
        "email": "lio+git@lunesu.com",
        "date": "2018-02-06T04:06:41Z"
      },
      "committer": {
        "name": "Lionello Lunesu",
        "email": "lio+git@lunesu.com",
        "date": "2018-11-08T00:59:37Z"
      },
      "message": "fix: add -rpccorsdomain=value command line option",
      "tree": {
        "sha": "6d7c8b2917d6ec749a3ec54d94cb37e860adbf1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d7c8b2917d6ec749a3ec54d94cb37e860adbf1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/comments",
    "author": {
      "login": "lionello",
      "id": 591860,
      "node_id": "MDQ6VXNlcjU5MTg2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/591860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lionello",
      "html_url": "https://github.com/lionello",
      "followers_url": "https://api.github.com/users/lionello/followers",
      "following_url": "https://api.github.com/users/lionello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lionello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lionello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lionello/subscriptions",
      "organizations_url": "https://api.github.com/users/lionello/orgs",
      "repos_url": "https://api.github.com/users/lionello/repos",
      "events_url": "https://api.github.com/users/lionello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lionello/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lionello",
      "id": 591860,
      "node_id": "MDQ6VXNlcjU5MTg2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/591860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lionello",
      "html_url": "https://github.com/lionello",
      "followers_url": "https://api.github.com/users/lionello/followers",
      "following_url": "https://api.github.com/users/lionello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lionello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lionello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lionello/subscriptions",
      "organizations_url": "https://api.github.com/users/lionello/orgs",
      "repos_url": "https://api.github.com/users/lionello/repos",
      "events_url": "https://api.github.com/users/lionello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lionello/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eefdf1b6852af6f681fba58f89faa6db2949e7c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefdf1b6852af6f681fba58f89faa6db2949e7c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eefdf1b6852af6f681fba58f89faa6db2949e7c0"
      }
    ],
    "stats": {
      "total": 252,
      "additions": 143,
      "deletions": 109
    },
    "files": [
      {
        "sha": "fae0cbb1b43e7e7bef3452e4697dff9f72d7152b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 107,
        "changes": 227,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
        "patch": "@@ -66,6 +66,8 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;\n+/* RPC CORS Domain, allowed Origin */\n+static std::string strRPCCORSDomain;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -145,125 +147,135 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     return multiUserAuthorized(strUserPass);\n }\n \n-static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+static bool checkCORS(HTTPRequest* req)\n {\n-    // First, check and/or set CORS headers according to\n     // https://www.w3.org/TR/cors/#resource-requests\n-    do {\n-        // 1. If the Origin header is not present terminate this set of steps.\n-        // The request is outside the scope of this specification.\n-        std::pair<bool, std::string> origin = req->GetHeader(\"origin\");\n-        if (!origin.first) {\n-            break;\n-        }\n \n-        // 2. If the value of the Origin header is not a case-sensitive match\n-        // for any of the values in list of origins do not set any additional\n-        // headers and terminate this set of steps.\n-        // Note: Always matching is acceptable since the list of origins can be\n-        // unbounded.\n-\n-        if (req->GetRequestMethod() == HTTPRequest::OPTIONS) {\n-            // 6.2 Preflight Request\n-            // In response to a preflight request the resource indicates which\n-            // methods and headers (other than simple methods and simple\n-            // headers) it is willing to handle and whether it supports\n-            // credentials.\n-            // Resources must use the following set of steps to determine which\n-            // additional headers to use in the response:\n-\n-            // 3. Let method be the value as result of parsing the\n-            // Access-Control-Request-Method header.\n-            // If there is no Access-Control-Request-Method header or if parsing\n-            // failed, do not set any additional headers and terminate this set\n-            // of steps. The request is outside the scope of this specification.\n-            std::pair<bool, std::string> method =\n-                req->GetHeader(\"access-control-request-method\");\n-            if (!method.first) {\n-                break;\n-            }\n-\n-            // 4. Let header field-names be the values as result of parsing\n-            // the Access-Control-Request-Headers headers.\n-            // If there are no Access-Control-Request-Headers headers let header\n-            // field-names be the empty list.\n-            // If parsing failed do not set any additional headers and terminate\n-            // this set of steps. The request is outside the scope of this\n-            // specification.\n-            std::pair<bool, std::string> header_field_names =\n-                req->GetHeader(\"access-control-request-headers\");\n-\n-            // 5. If method is not a case-sensitive match for any of the\n-            // values in list of methods do not set any additional headers\n-            // and terminate this set of steps.\n-            // Note: Always matching is acceptable since the list of methods\n-            // can be unbounded.\n-            if (method.second != \"POST\") {\n-                break;\n-            }\n-\n-            // 6. If any of the header field-names is not a ASCII case-\n-            // insensitive match for any of the values in list of headers do not\n-            // set any additional headers and terminate this set of steps.\n-            // Note: Always matching is acceptable since the list of headers can\n-            // be unbounded.\n-            const std::string& list_of_headers = \"authorization,content-type\";\n-\n-            // 7. If the resource supports credentials add a single\n-            // Access-Control-Allow-Origin header, with the value of the Origin\n-            // header as value, and add a single\n-            // Access-Control-Allow-Credentials header with the case-sensitive\n-            // string \"true\" as value.\n-            req->WriteHeader(\"Access-Control-Allow-Origin\", origin.second);\n-            req->WriteHeader(\"Access-Control-Allow-Credentials\", \"true\");\n-\n-            // 8. Optionally add a single Access-Control-Max-Age header with as\n-            // value the amount of seconds the user agent is allowed to cache\n-            // the result of the request.\n-\n-            // 9. If method is a simple method this step may be skipped.\n-            // Add one or more Access-Control-Allow-Methods headers consisting\n-            // of (a subset of) the list of methods.\n-            // If a method is a simple method it does not need to be listed, but\n-            // this is not prohibited.\n-            // Note: Since the list of methods can be unbounded, simply\n-            // returning the method indicated by\n-            // Access-Control-Request-Method (if supported) can be enough.\n-            req->WriteHeader(\"Access-Control-Allow-Methods\", method.second);\n-\n-            // 10. If each of the header field-names is a simple header and none\n-            // is Content-Type, this step may be skipped.\n-            // Add one or more Access-Control-Allow-Headers headers consisting\n-            // of (a subset of) the list of headers.\n-            req->WriteHeader(\n-                \"Access-Control-Allow-Headers\",\n-                header_field_names.first ? header_field_names.second\n-                                         : list_of_headers);\n-            req->WriteReply(HTTP_OK);\n-            return true;\n-        }\n+    // 1. If the Origin header is not present terminate this set of steps.\n+    // The request is outside the scope of this specification.\n+    std::pair<bool, std::string> origin = req->GetHeader(\"origin\");\n+    if (!origin.first) {\n+        return false;\n+    }\n \n-        // 6.1 Simple Cross-Origin Request, Actual Request, and Redirects\n-        // In response to a simple cross-origin request or actual request the\n-        // resource indicates whether or not to share the response.\n-        // If the resource has been relocated, it indicates whether to share its\n-        // new URL.\n+    // 2. If the value of the Origin header is not a case-sensitive match for\n+    // any of the values in list of origins do not set any additional headers\n+    // and terminate this set of steps.\n+    // Note: Always matching is acceptable since the list of origins can be\n+    // unbounded.\n+    if (origin.second != strRPCCORSDomain) {\n+        return false;\n+    }\n+\n+    if (req->GetRequestMethod() == HTTPRequest::OPTIONS) {\n+        // 6.2 Preflight Request\n+        // In response to a preflight request the resource indicates which\n+        // methods and headers (other than simple methods and simple\n+        // headers) it is willing to handle and whether it supports\n+        // credentials.\n         // Resources must use the following set of steps to determine which\n         // additional headers to use in the response:\n \n-        // 3. If the resource supports credentials add a single\n+        // 3. Let method be the value as result of parsing the\n+        // Access-Control-Request-Method header.\n+        // If there is no Access-Control-Request-Method header or if parsing\n+        // failed, do not set any additional headers and terminate this set\n+        // of steps. The request is outside the scope of this specification.\n+        std::pair<bool, std::string> method =\n+            req->GetHeader(\"access-control-request-method\");\n+        if (!method.first) {\n+            return false;\n+        }\n+\n+        // 4. Let header field-names be the values as result of parsing\n+        // the Access-Control-Request-Headers headers.\n+        // If there are no Access-Control-Request-Headers headers let header\n+        // field-names be the empty list.\n+        // If parsing failed do not set any additional headers and terminate\n+        // this set of steps. The request is outside the scope of this\n+        // specification.\n+        std::pair<bool, std::string> header_field_names =\n+            req->GetHeader(\"access-control-request-headers\");\n+\n+        // 5. If method is not a case-sensitive match for any of the\n+        // values in list of methods do not set any additional headers\n+        // and terminate this set of steps.\n+        // Note: Always matching is acceptable since the list of methods\n+        // can be unbounded.\n+        if (method.second != \"POST\") {\n+            return false;\n+        }\n+\n+        // 6. If any of the header field-names is not a ASCII case-\n+        // insensitive match for any of the values in list of headers do not\n+        // set any additional headers and terminate this set of steps.\n+        // Note: Always matching is acceptable since the list of headers can\n+        // be unbounded.\n+        const std::string& list_of_headers = \"authorization,content-type\";\n+\n+        // 7. If the resource supports credentials add a single\n         // Access-Control-Allow-Origin header, with the value of the Origin\n-        // header as value, and add a single Access-Control-Allow-Credentials\n-        // header with the case-sensitive string \"true\" as value.\n+        // header as value, and add a single\n+        // Access-Control-Allow-Credentials header with the case-sensitive\n+        // string \"true\" as value.\n         req->WriteHeader(\"Access-Control-Allow-Origin\", origin.second);\n         req->WriteHeader(\"Access-Control-Allow-Credentials\", \"true\");\n \n-        // 4. If the list of exposed headers is not empty add one or more\n-        // Access-Control-Expose-Headers headers, with as values the header\n-        // field names given in the list of exposed headers.\n-        req->WriteHeader(\"Access-Control-Expose-Headers\", \"WWW-Authenticate\");\n+        // 8. Optionally add a single Access-Control-Max-Age header with as\n+        // value the amount of seconds the user agent is allowed to cache\n+        // the result of the request.\n+\n+        // 9. If method is a simple method this step may be skipped.\n+        // Add one or more Access-Control-Allow-Methods headers consisting\n+        // of (a subset of) the list of methods.\n+        // If a method is a simple method it does not need to be listed, but\n+        // this is not prohibited.\n+        // Note: Since the list of methods can be unbounded, simply\n+        // returning the method indicated by\n+        // Access-Control-Request-Method (if supported) can be enough.\n+        req->WriteHeader(\"Access-Control-Allow-Methods\", method.second);\n+\n+        // 10. If each of the header field-names is a simple header and none\n+        // is Content-Type, this step may be skipped.\n+        // Add one or more Access-Control-Allow-Headers headers consisting\n+        // of (a subset of) the list of headers.\n+        req->WriteHeader(\n+            \"Access-Control-Allow-Headers\",\n+            header_field_names.first ? header_field_names.second\n+                                        : list_of_headers);\n+        req->WriteReply(HTTP_OK);\n+        return true;\n+    }\n+\n+    // 6.1 Simple Cross-Origin Request, Actual Request, and Redirects\n+    // In response to a simple cross-origin request or actual request the\n+    // resource indicates whether or not to share the response.\n+    // If the resource has been relocated, it indicates whether to share its\n+    // new URL.\n+    // Resources must use the following set of steps to determine which\n+    // additional headers to use in the response:\n+\n+    // 3. If the resource supports credentials add a single\n+    // Access-Control-Allow-Origin header, with the value of the Origin\n+    // header as value, and add a single Access-Control-Allow-Credentials\n+    // header with the case-sensitive string \"true\" as value.\n+    req->WriteHeader(\"Access-Control-Allow-Origin\", origin.second);\n+    req->WriteHeader(\"Access-Control-Allow-Credentials\", \"true\");\n+\n+    // 4. If the list of exposed headers is not empty add one or more\n+    // Access-Control-Expose-Headers headers, with as values the header\n+    // field names given in the list of exposed headers.\n+    req->WriteHeader(\"Access-Control-Expose-Headers\", \"WWW-Authenticate\");\n+\n+    return false;\n+}\n+\n+static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+{\n+    // First, check and/or set CORS headers\n+    if (checkCORS(req)) {\n+        return true;\n     }\n-    while (false);\n \n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n@@ -349,6 +361,7 @@ static bool InitRPCAuthentication()\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n     }\n+    strRPCCORSDomain = gArgs.GetArg(\"-rpccorsdomain\", \"\");\n     return true;\n }\n "
      },
      {
        "sha": "86a50cbaff71b1546689089b44e75b5ee0963a7a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
        "patch": "@@ -502,6 +502,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccorsdomain=value\", \"Domain from which to accept cross origin requests (browser enforced)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n "
      },
      {
        "sha": "e6d448304bf5a9b61087a7c2a021c99a2a7b4988",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=210b8ee1fbf79cff98bf76d53b4f35bc9cdd02d2",
        "patch": "@@ -15,6 +15,7 @@ def set_test_params(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n+        self.extra_args = [[\"-rpccorsdomain=null\"], [], []]\n         self.setup_nodes()\n \n     def run_test(self):\n@@ -103,7 +104,7 @@ def run_test(self):\n         out1 = conn.getresponse()\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n-        # check Standard CORS request\n+        # Check Standard CORS request\n         origin = \"null\"\n \n         conn = http.client.HTTPConnection(url.hostname, url.port)\n@@ -118,7 +119,7 @@ def run_test(self):\n         assert_equal(out1.headers[\"Access-Control-Expose-Headers\"], \"WWW-Authenticate\")\n         assert(b'\"error\":null' in out1.read())\n \n-        # check Pre-flight CORS request\n+        # Check Pre-flight CORS request\n         corsheaders = {\"Origin\": origin, \"Access-Control-Request-Method\": \"POST\"}\n         conn.request('OPTIONS', '/', None, corsheaders)\n         out1 = conn.getresponse()\n@@ -129,5 +130,24 @@ def run_test(self):\n         assert_equal(out1.headers[\"Access-Control-Allow-Headers\"], \"authorization,content-type\")\n         assert_equal(b'', out1.read())\n \n+        # Check Standard CORS request to node without CORS, expected failure\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        authpair = url.username + ':' + url.password\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair),\n+                   \"Origin\": origin}\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, http.client.UNAUTHORIZED)\n+        assert_equal(b'', out1.read())\n+\n+        # Check Pre-flight CORS request to node without CORS, expected failure\n+        corsheaders = {\"Origin\": origin,\n+                       \"Access-Control-Request-Method\": \"POST\"}\n+        conn.request('OPTIONS', '/', None, corsheaders)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, http.client.METHOD_NOT_ALLOWED)\n+        assert_equal(b'JSONRPC server handles only POST requests', out1.read())\n+\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      }
    ]
  }
]