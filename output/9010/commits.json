[
  {
    "sha": "0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2M4YjZiYzQ0YmVhMjllMjRmYTRlMTNkOGE5YmJlNGYxNDgzNjgw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T09:34:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-29T11:47:13Z"
      },
      "message": "init: Split up AppInit2 into multiple phases\n\nThis allows doing some of the steps before e.g. daemonization and some\nfater.",
      "tree": {
        "sha": "8688518c33a37cd755b81103c72b2cb69efbcad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8688518c33a37cd755b81103c72b2cb69efbcad6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67728a389ccf128fc25262668b2a23f8ef73e1d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67728a389ccf128fc25262668b2a23f8ef73e1d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67728a389ccf128fc25262668b2a23f8ef73e1d6"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 95,
      "deletions": 21
    },
    "files": [
      {
        "sha": "a89b8cd4eeeac5410b3a061923a9c9888507c603",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
        "patch": "@@ -128,6 +128,26 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr, \"Error: There is no RPC client functionality in bitcoind anymore. Use the bitcoin-cli utility instead.\\n\");\n             exit(1);\n         }\n+        // -server defaults to true for bitcoind but not for the GUI so do this here\n+        SoftSetBoolArg(\"-server\", true);\n+        // Set this early so that parameter interactions go to console\n+        InitLogging();\n+        InitParameterInteraction();\n+        if (!AppInitBasicSetup())\n+        {\n+            // InitError will have been called with detailed error, which ends up on console\n+            exit(1);\n+        }\n+        if (!AppInitParameterInteraction())\n+        {\n+            // InitError will have been called with detailed error, which ends up on console\n+            exit(1);\n+        }\n+        if (!AppInitSanityChecks())\n+        {\n+            // InitError will have been called with detailed error, which ends up on console\n+            exit(1);\n+        }\n         if (GetBoolArg(\"-daemon\", false))\n         {\n #if HAVE_DECL_DAEMON\n@@ -143,12 +163,8 @@ bool AppInit(int argc, char* argv[])\n             return false;\n #endif // HAVE_DECL_DAEMON\n         }\n-        SoftSetBoolArg(\"-server\", true);\n \n-        // Set this early so that parameter interactions go to console\n-        InitLogging();\n-        InitParameterInteraction();\n-        fRet = AppInit2(threadGroup, scheduler);\n+        fRet = AppInitMain(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      },
      {
        "sha": "4f435dc7cf3e9ade24ce00a1024eef4a167d1ed2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 14,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
        "patch": "@@ -788,10 +788,17 @@ void InitLogging()\n     LogPrintf(\"Bitcoin version %s\\n\", FormatFullVersion());\n }\n \n-/** Initialize bitcoin.\n- *  @pre Parameters should be parsed and config file should be read.\n- */\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n+namespace { // Variables internal to initialization process only\n+\n+ServiceFlags nRelevantServices = NODE_NETWORK;\n+int nMaxConnections;\n+int nUserMaxConnections;\n+int nFD;\n+ServiceFlags nLocalServices = NODE_NETWORK;\n+\n+}\n+\n+bool AppInitBasicSetup()\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -843,9 +850,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Ignore SIGPIPE, otherwise it will bring the daemon down if the client closes unexpectedly\n     signal(SIGPIPE, SIG_IGN);\n #endif\n+    return true;\n+}\n \n-    // ********************************************************* Step 2: parameter interactions\n+bool AppInitParameterInteraction()\n+{\n     const CChainParams& chainparams = Params();\n+    // ********************************************************* Step 2: parameter interactions\n \n     // also see: InitParameterInteraction()\n \n@@ -857,12 +868,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n-    int nMaxConnections = std::max(nUserMaxConnections, 0);\n+    nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n     nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n-    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS, nMaxConnections);\n@@ -977,9 +988,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n-    ServiceFlags nLocalServices = NODE_NETWORK;\n-    ServiceFlags nRelevantServices = NODE_NETWORK;\n-\n     if (GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n@@ -1028,8 +1036,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             }\n         }\n     }\n+    return true;\n+}\n \n-    // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n+bool AppInitSanityChecks()\n+{\n+    // ********************************************************* Step 4: sanity checks\n \n     // Initialize elliptic curve code\n     ECC_Start();\n@@ -1048,11 +1060,19 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     try {\n         static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n-        if (!lock.try_lock())\n+        if (!lock.try_lock()) {\n             return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), strDataDir, _(PACKAGE_NAME)));\n+        }\n     } catch(const boost::interprocess::interprocess_exception& e) {\n         return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\") + \" %s.\", strDataDir, _(PACKAGE_NAME), e.what()));\n     }\n+    return true;\n+}\n+\n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+{\n+    const CChainParams& chainparams = Params();\n+    // ********************************************************* Step 4a: application initialization\n \n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n@@ -1066,7 +1086,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (!fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n-    LogPrintf(\"Using data directory %s\\n\", strDataDir);\n+    LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n "
      },
      {
        "sha": "1b87e0ec52013c184575030522ef7aaab612fdc7",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
        "patch": "@@ -25,7 +25,30 @@ void Shutdown();\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n+\n+/** Initialize bitcoin core: Basic context setup.\n+ *  @note This can be done before daemonization.\n+ *  @pre Parameters should be parsed and config file should be read.\n+ */\n+bool AppInitBasicSetup();\n+/**\n+ * Initialization: parameter interaction.\n+ * @note This can be done before daemonization.\n+ * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.\n+ */\n+bool AppInitParameterInteraction();\n+/**\n+ * Initialization sanity checks: ecc init, sanity checks, dir lock.\n+ * @note This can be done before daemonization.\n+ * @pre Parameters should be parsed and config file should be read, AppInitParameterInteraction should have been called.\n+ */\n+bool AppInitSanityChecks();\n+/**\n+ * Bitcoin core main initialization.\n+ * @note This should only be done after daemonization.\n+ * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.\n+ */\n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */\n enum HelpMessageMode {"
      },
      {
        "sha": "5e1a41d5a7fcf5fff53dde2ae53e162f550f97b4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
        "patch": "@@ -267,7 +267,22 @@ void BitcoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n-        int rv = AppInit2(threadGroup, scheduler);\n+        if (!AppInitBasicSetup())\n+        {\n+            Q_EMIT initializeResult(false);\n+            return;\n+        }\n+        if (!AppInitParameterInteraction())\n+        {\n+            Q_EMIT initializeResult(false);\n+            return;\n+        }\n+        if (!AppInitSanityChecks())\n+        {\n+            Q_EMIT initializeResult(false);\n+            return;\n+        }\n+        int rv = AppInitMain(threadGroup, scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);"
      }
    ]
  },
  {
    "sha": "16ca0bfd2848424de7deae307283d9eb9de8a978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmNhMGJmZDI4NDg0MjRkZTdkZWFlMzA3MjgzZDllYjlkZThhOTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T10:03:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-29T11:47:13Z"
      },
      "message": "init: Try to aquire datadir lock before and after daemonization\n\nBefore daemonization, just probe the data directory lock and print an\nearly error message if possible.\n\nAfter daemonization get the data directory lock again and hold on to it until exit\nThis creates a slight window for a race condition to happen, however this condition is harmless: it\nwill at most make us exit without printing a message to console.\n\n    $ src/bitcoind -testnet -daemon\n    Bitcoin server starting\n    $ src/bitcoind -testnet -daemon\n    Error: Cannot obtain a lock on data directory /home/orion/.bitcoin/testnet3. Bitcoin Core is probably already running.",
      "tree": {
        "sha": "d33a4bcfc19a83aeb538085e5aad92f45687ed2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d33a4bcfc19a83aeb538085e5aad92f45687ed2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16ca0bfd2848424de7deae307283d9eb9de8a978",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ca0bfd2848424de7deae307283d9eb9de8a978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16ca0bfd2848424de7deae307283d9eb9de8a978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ca0bfd2848424de7deae307283d9eb9de8a978/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 27,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b70e6e915849b89a1ff010be99827d0f902c8f0d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 11,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ca0bfd2848424de7deae307283d9eb9de8a978/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ca0bfd2848424de7deae307283d9eb9de8a978/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=16ca0bfd2848424de7deae307283d9eb9de8a978",
        "patch": "@@ -1039,18 +1039,8 @@ bool AppInitParameterInteraction()\n     return true;\n }\n \n-bool AppInitSanityChecks()\n+static bool LockDataDirectory(bool probeOnly)\n {\n-    // ********************************************************* Step 4: sanity checks\n-\n-    // Initialize elliptic curve code\n-    ECC_Start();\n-    globalVerifyHandle.reset(new ECCVerifyHandle());\n-\n-    // Sanity check\n-    if (!InitSanityCheck())\n-        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n-\n     std::string strDataDir = GetDataDir().string();\n \n     // Make sure only a single Bitcoin process is using the data directory.\n@@ -1063,16 +1053,42 @@ bool AppInitSanityChecks()\n         if (!lock.try_lock()) {\n             return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), strDataDir, _(PACKAGE_NAME)));\n         }\n+        if (probeOnly) {\n+            lock.unlock();\n+        }\n     } catch(const boost::interprocess::interprocess_exception& e) {\n         return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\") + \" %s.\", strDataDir, _(PACKAGE_NAME), e.what()));\n     }\n     return true;\n }\n \n+bool AppInitSanityChecks()\n+{\n+    // ********************************************************* Step 4: sanity checks\n+\n+    // Initialize elliptic curve code\n+    ECC_Start();\n+    globalVerifyHandle.reset(new ECCVerifyHandle());\n+\n+    // Sanity check\n+    if (!InitSanityCheck())\n+        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n+\n+    // Probe the data directory lock to give an early error message, if possible\n+    return LockDataDirectory(true);\n+}\n+\n bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n+    // After daemonization get the data directory lock again and hold on to it until exit\n+    // This creates a slight window for a race condition to happen, however this condition is harmless: it\n+    // will at most make us exit without printing a message to console.\n+    if (!LockDataDirectory(false)) {\n+        // Detailed error printed inside LockDataDirectory\n+        return false;\n+    }\n \n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());"
      }
    ]
  },
  {
    "sha": "deec83fd2cc8af39c28c74161650fbff432502ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWVjODNmZDJjYzhhZjM5YzI4Yzc0MTYxNjUwZmJmZjQzMjUwMmNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-29T11:44:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-29T11:47:13Z"
      },
      "message": "init: Get rid of fServer flag\n\nThere is no need to store this flag globally, the variable is only used\ninside the initialization process.\n\nThanks to Alex Morcos for the idea.",
      "tree": {
        "sha": "d53458e5f5c4e386d9fcaf664dac62d9a4a33d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53458e5f5c4e386d9fcaf664dac62d9a4a33d07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deec83fd2cc8af39c28c74161650fbff432502ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deec83fd2cc8af39c28c74161650fbff432502ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deec83fd2cc8af39c28c74161650fbff432502ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deec83fd2cc8af39c28c74161650fbff432502ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16ca0bfd2848424de7deae307283d9eb9de8a978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ca0bfd2848424de7deae307283d9eb9de8a978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16ca0bfd2848424de7deae307283d9eb9de8a978"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fb51eb76338b5eca5153bae7ae4163c352338e23",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deec83fd2cc8af39c28c74161650fbff432502ce/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deec83fd2cc8af39c28c74161650fbff432502ce/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=deec83fd2cc8af39c28c74161650fbff432502ce",
        "patch": "@@ -931,8 +931,6 @@ bool AppInitParameterInteraction()\n     else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n         nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;\n \n-    fServer = GetBoolArg(\"-server\", false);\n-\n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nSignedPruneTarget = GetArg(\"-prune\", 0) * 1024 * 1024;\n     if (nSignedPruneTarget < 0) {\n@@ -1121,7 +1119,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n      * that the server is there and will be ready later).  Warmup mode will\n      * be disabled when initialisation is finished.\n      */\n-    if (fServer)\n+    if (GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n         if (!AppInitServers(threadGroup))"
      },
      {
        "sha": "332e077627e46dbed1924f43189519e1695b8ae1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deec83fd2cc8af39c28c74161650fbff432502ce/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deec83fd2cc8af39c28c74161650fbff432502ce/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=deec83fd2cc8af39c28c74161650fbff432502ce",
        "patch": "@@ -107,7 +107,6 @@ map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n bool fPrintToConsole = false;\n bool fPrintToDebugLog = true;\n-bool fServer = false;\n string strMiscWarning;\n bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;"
      },
      {
        "sha": "e8aa266f287bb2fcceb3b03c5e30c089a1bb6154",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deec83fd2cc8af39c28c74161650fbff432502ce/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deec83fd2cc8af39c28c74161650fbff432502ce/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=deec83fd2cc8af39c28c74161650fbff432502ce",
        "patch": "@@ -46,7 +46,6 @@ extern std::map<std::string, std::vector<std::string> > mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugLog;\n-extern bool fServer;\n extern std::string strMiscWarning;\n extern bool fLogTimestamps;\n extern bool fLogTimeMicros;"
      }
    ]
  }
]