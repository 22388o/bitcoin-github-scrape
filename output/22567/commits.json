[
  {
    "sha": "fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
    "node_id": "C_kwDOABII59oAKGZhMmU1YTUzZWI5MDdkMDFjYjcyYzBlYjdiMGU5MjNjOTc5MDcwYjM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-10T17:01:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-18T11:15:06Z"
      },
      "message": "test: Implicitly sync after generate*, unless opted out",
      "tree": {
        "sha": "e54b452cdf900fb7e567917405508452ba7c6f18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e54b452cdf900fb7e567917405508452ba7c6f18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJLAv/V8mWAVbaJeW2egT/SNXmErpnXPTsF352Ie/MFYzTc7x0qRLsd7d2tWOm\nNUV+1JdbjScCcfo69krCZY0Sc0X2fIPAkt2WgMHg862cSjCPkPZNR1AutoksdiSD\nFU6MnqBc8xCSBxCDplGz0L+xJb/d1iwHImkS/6dwACUk5GKb5a0SyFwqTcXBwP95\nxYk6RRtM/oVvkazagxSvFpng/CSFaO1xr/01wYve2uCy/hnoR9zbhcF0UfthNBpU\nwREIn7mUCA3QAJzIB1JJimoTapblOS3VjsIWJTuRPtoik6FOQHDusvpriqczH5sG\n/fosN4yMvMDtvbsF4WDBOvQiq+DkhWu3/WIAdYvhIufLqycY27i+wGHvziJ7zWE6\nmo+BL4nkFbtK1ugTpoossnI6PMdiAVPaACTIDxsv6Fv9Nvza8gPFdsW+fc3PTzRf\nAB3Nj4XaPQhj7QXxo7HDjPLvtXAYv9EM2PQ6mE/5s9fEhDIEnARQmPmQMSO0+Ske\nbLq/EsRd\n=MF1W\n-----END PGP SIGNATURE-----",
        "payload": "tree e54b452cdf900fb7e567917405508452ba7c6f18\nparent 2e82af46e237299246b53cb69c101ddba0175838\nauthor MarcoFalke <falke.marco@gmail.com> 1605027695 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1634555706 +0200\n\ntest: Implicitly sync after generate*, unless opted out\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e82af46e237299246b53cb69c101ddba0175838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e82af46e237299246b53cb69c101ddba0175838",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e82af46e237299246b53cb69c101ddba0175838"
      }
    ],
    "stats": {
      "total": 316,
      "additions": 143,
      "deletions": 173
    },
    "files": [
      {
        "sha": "2473edcfe9eddc64fdafeb87db8fc8ac88f3acbd",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -141,8 +141,7 @@ def run_test(self):\n         peer_messaging = self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.generate(self.nodes[0], nblocks=1)[0], 16)]\n-        self.sync_all(self.nodes[0:2])\n+        blocks = [int(self.generate(self.nodes[0], sync_fun=lambda: self.sync_all(self.nodes[0:2]), nblocks=1)[0], 16)]\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      },
      {
        "sha": "bb67dc88a674be58e41401101a409f40896083de",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -26,18 +26,18 @@ def setup_network(self):\n         # We'll connect the nodes later\n \n     def run_test(self):\n-        self.generate(self.nodes[0], 3)\n+        self.generate(self.nodes[0], 3, sync_fun=self.no_op)\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         # Deleting the undo file will result in reorg failure\n         os.unlink(os.path.join(datadir, self.chain, 'blocks', 'rev00000.dat'))\n \n         # Connecting to a node with a more work chain will trigger a reorg\n         # attempt.\n-        self.generate(self.nodes[1], 3)\n+        self.generate(self.nodes[1], 3, sync_fun=self.no_op)\n         with self.nodes[0].assert_debug_log([\"Failed to disconnect block\"]):\n             self.connect_nodes(0, 1)\n-            self.generate(self.nodes[1], 1)\n+            self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n \n             # Check that node0 aborted\n             self.log.info(\"Waiting for crash\")"
      },
      {
        "sha": "d962b622feef3e299ed0ab3221e7870aaa08edbf",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -275,7 +275,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n-            self.generate(self.nodes[0], 1)\n+            self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n             cur_time += 600\n \n         assert tx2.hash in self.nodes[0].getrawmempool()\n@@ -351,7 +351,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Reset the chain and get rid of the mocktimed-blocks\n         self.nodes[0].setmocktime(0)\n         self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n-        self.generate(self.nodes[0], 10)\n+        self.generate(self.nodes[0], 10, sync_fun=self.no_op)\n \n     # Make sure that BIP68 isn't being used to validate blocks prior to\n     # activation height.  If more blocks are mined prior to this test\n@@ -405,9 +405,9 @@ def activateCSV(self):\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)\n-        self.generate(self.nodes[0], min_activation_height - height - 2)\n+        self.generate(self.nodes[0], min_activation_height - height - 2, sync_fun=self.no_op)\n         assert not softfork_active(self.nodes[0], 'csv')\n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         assert softfork_active(self.nodes[0], 'csv')\n         self.sync_blocks()\n "
      },
      {
        "sha": "b996b16b9cb67f1221974e3f876c0413fc47f901",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -228,7 +228,7 @@ def _test_coin_stats_index(self):\n         res9 = index_node.gettxoutsetinfo('muhash')\n         assert_equal(res8, res9)\n \n-        self.generate(index_node, 1)\n+        self.generate(index_node, 1, sync_fun=self.no_op)\n         res10 = index_node.gettxoutsetinfo('muhash')\n         assert(res8['txouts'] < res10['txouts'])\n \n@@ -254,7 +254,7 @@ def _test_reorg_index(self):\n         assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n \n         # Add two new blocks\n-        block = self.generate(index_node, 2)[1]\n+        block = self.generate(index_node, 2, sync_fun=self.no_op)[1]\n         res = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=None, use_index=False)\n \n         # Test that the result of the reorged block is not returned for its old block height"
      },
      {
        "sha": "1bda4a29b5ae8f26291ae7eacf5f8dfe08efbc5d",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -217,7 +217,7 @@ def run_test(self):\n \n         # Start by creating a lot of utxos on node3\n         initial_height = self.nodes[3].getblockcount()\n-        utxo_list = create_confirmed_utxos(self, self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n+        utxo_list = create_confirmed_utxos(self, self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000, sync_fun=self.no_op)\n         self.log.info(f\"Prepped {len(utxo_list)} utxo entries\")\n \n         # Sync these blocks with the other nodes\n@@ -258,6 +258,7 @@ def run_test(self):\n                     nblocks=min(10, current_height + 1 - self.nodes[3].getblockcount()),\n                     # new address to avoid mining a block that has just been invalidated\n                     address=self.nodes[3].getnewaddress(),\n+                    sync_fun=self.no_op,\n                 ))\n             self.log.debug(f\"Syncing {len(block_hashes)} new blocks...\")\n             self.sync_node3blocks(block_hashes)"
      },
      {
        "sha": "2a8dd1fb7baafcec74fb1d9c89ba5e804d1dcf80",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -237,7 +237,7 @@ def initial_split(self, node):\n \n         # Mine\n         while len(node.getrawmempool()) > 0:\n-            self.generate(node, 1)\n+            self.generate(node, 1, sync_fun=self.no_op)\n \n         # Repeatedly split those 2 outputs, doubling twice for each rep\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n@@ -247,12 +247,12 @@ def initial_split(self, node):\n             while len(self.txouts) > 0:\n                 split_inputs(node, self.txouts, self.txouts2)\n             while len(node.getrawmempool()) > 0:\n-                self.generate(node, 1)\n+                self.generate(node, 1, sync_fun=self.no_op)\n             # Double txouts2 to txouts\n             while len(self.txouts2) > 0:\n                 split_inputs(node, self.txouts2, self.txouts)\n             while len(node.getrawmempool()) > 0:\n-                self.generate(node, 1)\n+                self.generate(node, 1, sync_fun=self.no_op)\n             reps += 1\n \n     def sanity_check_estimates_range(self):"
      },
      {
        "sha": "079630546ef9e68fc4dbf77ba74c4bf08f8778f9",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -29,7 +29,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.nodes[1].setnetworkactive(state=False)\n-        self.generate(self.nodes[0], COINBASE_MATURITY)\n+        self.generate(self.nodes[0], COINBASE_MATURITY, sync_fun=self.no_op)\n \n         # Parsing the url of our node to get settings for config file\n         data_dir = self.nodes[0].datadir"
      },
      {
        "sha": "a77f022ddd4fc3392dbc056f6f126c0f817c451d",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -51,8 +51,7 @@ def run_test(self):\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n         self.log.info(f\"Generating {num_blocks_to_generate} blocks on node0\")\n-        hashes = self.generatetoaddress(self.nodes[0], num_blocks_to_generate,\n-                                                 self.nodes[0].get_deterministic_priv_key().address)\n+        hashes = self.generate(self.nodes[0], num_blocks_to_generate, sync_fun=self.no_op)\n \n         self.log.info(f\"Node0 current chain work: {self.nodes[0].getblockheader(hashes[-1])['chainwork']}\")\n \n@@ -73,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n \n         self.log.info(\"Generating one more block\")\n-        self.generatetoaddress(self.nodes[0], 1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.generate(self.nodes[0], 1)\n \n         self.log.info(\"Verifying nodes are all synced\")\n "
      },
      {
        "sha": "612b724fa5c738bce6b6d1021cfb4673b85177cb",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -149,7 +149,7 @@ def run_test(self):\n             # about newly confirmed bump2 and newly conflicted tx2.\n             self.disconnect_nodes(0, 1)\n             bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n-            blockhash2 = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+            blockhash2 = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=self.no_op)[0]\n             blockheight2 = self.nodes[0].getblockcount()\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)"
      },
      {
        "sha": "125b219bd4f03635610a2c5c50c2726fd6a55e75",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -118,9 +118,8 @@ def setup_nodes(self):\n \n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n-        self.generate(self.nodes[1], 200)\n-        self.sync_blocks(self.nodes[0:2])\n-        self.generate(self.nodes[0], 150)\n+        self.generate(self.nodes[1], 200, sync_fun=lambda: self.sync_blocks(self.nodes[0:2]))\n+        self.generate(self.nodes[0], 150, sync_fun=self.no_op)\n \n         # Then mine enough full blocks to create more than 550MiB of data\n         mine_large_blocks(self.nodes[0], 645)\n@@ -211,7 +210,7 @@ def reorg_test(self):\n         self.disconnect_nodes(1, 2)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n-        self.generate(self.nodes[1], 300)\n+        self.generate(self.nodes[1], 300, sync_fun=self.no_op)\n \n         self.log.info(\"Reconnect nodes\")\n         self.connect_nodes(0, 1)\n@@ -263,7 +262,7 @@ def reorg_back(self):\n             self.nodes[0].invalidateblock(curchainhash)\n             assert_equal(self.nodes[0].getblockcount(), self.mainchainheight)\n             assert_equal(self.nodes[0].getbestblockhash(), self.mainchainhash2)\n-            goalbesthash = self.generate(self.nodes[0], blocks_to_mine)[-1]\n+            goalbesthash = self.generate(self.nodes[0], blocks_to_mine, sync_fun=self.no_op)[-1]\n             goalbestheight = first_reorg_height + 1\n \n         self.log.info(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n@@ -306,7 +305,7 @@ def has_block(index):\n         assert_equal(block1_details[\"nTx\"], len(block1_details[\"tx\"]))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n-        self.generate(node, 6)\n+        self.generate(node, 6, sync_fun=self.no_op)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # Pruned block should still know the number of transactions\n@@ -337,7 +336,7 @@ def has_block(index):\n         assert has_block(2), \"blk00002.dat is still there, should be pruned by now\"\n \n         # advance the tip so blk00002.dat and blk00003.dat can be pruned (the last 288 blocks should now be in blk00004.dat)\n-        self.generate(node, 288)\n+        self.generate(node, 288, sync_fun=self.no_op)\n         prune(1000)\n         assert not has_block(2), \"blk00002.dat is still there, should be pruned by now\"\n         assert not has_block(3), \"blk00003.dat is still there, should be pruned by now\""
      },
      {
        "sha": "268da62fafd32562e00bf0b08075a5768d69316b",
        "filename": "test/functional/feature_signet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_signet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/feature_signet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_signet.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n         assert_equal(mining_info['networkhashps'], Decimal('0'))\n         assert_equal(mining_info['pooledtx'], 0)\n \n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n \n         self.log.info(\"pregenerated signet blocks check\")\n "
      },
      {
        "sha": "5bf75e2064daceddac0f33901f1cf3f720da4773",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -82,9 +82,8 @@ class ZMQTestSetupBlock:\n     the generated block's hash, it's (coinbase) transaction id, the raw block or\n     raw transaction data.\n     \"\"\"\n-\n     def __init__(self, test_framework, node):\n-        self.block_hash = test_framework.generate(node, 1)[0]\n+        self.block_hash = test_framework.generate(node, 1, sync_fun=test_framework.no_op)[0]\n         coinbase = node.getblock(self.block_hash, 2)['tx'][0]\n         self.tx_hash = coinbase['txid']\n         self.raw_tx = coinbase['hex']\n@@ -261,14 +260,14 @@ def test_reorg(self):\n \n         # Generate 1 block in nodes[0] with 1 mempool tx and receive all notifications\n         payment_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n-        disconnect_block = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+        disconnect_block = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=self.no_op)[0]\n         disconnect_cb = self.nodes[0].getblock(disconnect_block)[\"tx\"][0]\n         assert_equal(self.nodes[0].getbestblockhash(), hashblock.receive().hex())\n         assert_equal(hashtx.receive().hex(), payment_txid)\n         assert_equal(hashtx.receive().hex(), disconnect_cb)\n \n         # Generate 2 blocks in nodes[1] to a different address to ensure split\n-        connect_blocks = self.generatetoaddress(self.nodes[1], 2, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+        connect_blocks = self.generatetoaddress(self.nodes[1], 2, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=self.no_op)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n         self.connect_nodes(0, 1)\n@@ -312,13 +311,13 @@ def test_sequence(self):\n         seq_num = 1\n \n         # Generate 1 block in nodes[0] and receive all notifications\n-        dc_block = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+        dc_block = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=self.no_op)[0]\n \n         # Note: We are not notified of any block transactions, coinbase or mined\n         assert_equal((self.nodes[0].getbestblockhash(), \"C\", None), seq.receive_sequence())\n \n         # Generate 2 blocks in nodes[1] to a different address to ensure a chain split\n-        self.generatetoaddress(self.nodes[1], 2, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+        self.generatetoaddress(self.nodes[1], 2, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=self.no_op)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n         self.connect_nodes(0, 1)\n@@ -474,7 +473,7 @@ def test_mempool_sync(self):\n         # 1) Consume backlog until we get a mempool sequence number\n         (hash_str, label, zmq_mem_seq) = seq.receive_sequence()\n         while zmq_mem_seq is None:\n-                (hash_str, label, zmq_mem_seq) = seq.receive_sequence()\n+            (hash_str, label, zmq_mem_seq) = seq.receive_sequence()\n \n         assert label == \"A\" or label == \"R\"\n         assert hash_str is not None\n@@ -566,7 +565,7 @@ def test_multiple_interfaces(self):\n         ], sync_blocks=False)\n \n         # Generate 1 block in nodes[0] and receive all notifications\n-        self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)\n+        self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=self.no_op)\n \n         # Should receive the same block hash on both subscribers\n         assert_equal(self.nodes[0].getbestblockhash(), subscribers[0].receive().hex())"
      },
      {
        "sha": "5263920dae7d2aadd934e1f365d89b35cf2b4b2b",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -38,8 +38,8 @@ def run_test(self):\n \n         old_node, new_node = self.nodes\n         new_wallet = MiniWallet(new_node)\n-        self.generate(new_wallet, 1)\n-        self.generate(new_node, COINBASE_MATURITY)\n+        self.generate(new_wallet, 1, sync_fun=self.no_op)\n+        self.generate(new_node, COINBASE_MATURITY, sync_fun=self.no_op)\n         # Sync the nodes to ensure old_node has the block that contains the coinbase that new_wallet will spend.\n         # Otherwise, because coinbases are only valid in a block and not as loose txns, if the nodes aren't synced\n         # unbroadcasted_tx won't pass old_node's `MemPoolAccept::PreChecks`."
      },
      {
        "sha": "a91fcbd6c7da5d45fc914319ea4ec95f1327255e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -174,7 +174,7 @@ def test_persist_unbroadcast(self):\n         self.start_node(0)\n \n         # clear out mempool\n-        self.generate(node0, 1)\n+        self.generate(node0, 1, sync_fun=self.no_op)\n \n         # ensure node0 doesn't have any connections\n         # make a transaction that will remain in the unbroadcast set"
      },
      {
        "sha": "509a003746b8b339ab10c9de0d0866898fa3f543",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -79,9 +79,8 @@ def run_test(self):\n         spend_3_1_id = self.nodes[0].sendrawtransaction(spend_3_1['hex'])\n         self.log.info(\"Generate a block\")\n         last_block = self.generate(self.nodes[0], 1)\n-        # Sync blocks, so that peer 1 gets the block before timelock_tx\n+        # generate() implicitly syncs blocks, so that peer 1 gets the block before timelock_tx\n         # Otherwise, peer 1 would put the timelock_tx in m_recent_rejects\n-        self.sync_all()\n \n         self.log.info(\"The time-locked transaction can now be spent\")\n         timelock_tx_id = self.nodes[0].sendrawtransaction(timelock_tx)"
      },
      {
        "sha": "88194a09b4690ef61dd8c5215ca55503e673c570",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -109,7 +109,8 @@ def test_txn_removal(self):\n         # a block\n         removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)\n         with node.assert_debug_log([removal_reason]):\n-            self.generate(node, 1)\n+            self.generate(node, 1, sync_fun=self.no_op)\n+\n \n if __name__ == \"__main__\":\n     MempoolUnbroadcastTest().main()"
      },
      {
        "sha": "3d1f804ddca835cea9acf9dccce9d5bf9c9fd32c",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -58,7 +58,7 @@ def mine_chain(self):\n         self.log.info('Create some old blocks')\n         for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n             self.nodes[0].setmocktime(t)\n-            self.generate(self.nodes[0], 1)\n+            self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         mining_info = self.nodes[0].getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['currentblocktx'], 0)"
      },
      {
        "sha": "73ff0866417b0d3aff1884a52d03f98c372baf03",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -105,7 +105,7 @@ def run_test(self):\n         # the other high fee transactions. Keep mining until our mempool has\n         # decreased by all the high fee size that we calculated above.\n         while (self.nodes[0].getmempoolinfo()['bytes'] > sizes[0] + sizes[1]):\n-            self.generate(self.nodes[0], 1)\n+            self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n \n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been."
      },
      {
        "sha": "b67a0b3f7e7457febd83af57f9fb25294420dda2",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -62,11 +62,11 @@ def run_test(self):\n         # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        stale_block_hash = self.generate(self.nodes[0], 1)[0]\n+        stale_block_hash = self.generate(self.nodes[0], 1, sync_fun=self.no_op)[0]\n         self.nodes[0].syncwithvalidationinterfacequeue()\n         assert_equal(self.nodes[0].getblockcount(), 1000)\n \n-        self.generate(self.nodes[1], 1001)\n+        self.generate(self.nodes[1], 1001, sync_fun=self.no_op)\n         assert_equal(self.nodes[1].getblockcount(), 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly."
      },
      {
        "sha": "d70870fa56d1b14ebf25ca8cce4355d1fc0faecd",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -59,7 +59,7 @@ def run_test(self):\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         self.connect_nodes(0, 1)\n-        blocks = self.generatetoaddress(self.nodes[1], 292, self.nodes[1].get_deterministic_priv_key().address)\n+        blocks = self.generate(self.nodes[1], 292, sync_fun=self.no_op)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n@@ -101,7 +101,7 @@ def run_test(self):\n         self.disconnect_all()\n \n         # mine 10 blocks on node 0 (pruned node)\n-        self.generatetoaddress(self.nodes[0], 10, self.nodes[0].get_deterministic_priv_key().address)\n+        self.generate(self.nodes[0], 10, sync_fun=self.no_op)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n         self.connect_nodes(0, 1)"
      },
      {
        "sha": "e03719857391e19f666f4fb294780700df32e5aa",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -77,7 +77,7 @@ def run_test(self):\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         # 1. Have nodes mine a block (leave IBD)\n-        [self.generatetoaddress(n, 1, n.get_deterministic_priv_key().address) for n in self.nodes]\n+        [self.generate(n, 1, sync_fun=self.no_op) for n in self.nodes]\n         tips = [int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes]\n \n         # 2. Send one block that builds on each tip."
      },
      {
        "sha": "732ebdf87575e4532227ae165d48e70a0f167681",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -376,7 +376,7 @@ def _test_stopatheight(self):\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n-            self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+            self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=self.no_op)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')"
      },
      {
        "sha": "017541db90012d6eaf0cfc2d8d9492b84b59174d",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -1096,7 +1096,7 @@ def test_22670(self):\n         # than any single input available, and require more than 1 input. So we make 3 outputs\n         for i in range(0, 3):\n             funds.sendtoaddress(tester.getnewaddress(address_type=\"bech32\"), 1)\n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n \n         # Create transactions in order to calculate fees for the target bounds that can trigger this bug\n         change_tx = tester.fundrawtransaction(tester.createrawtransaction([], [{funds.getnewaddress(): 1.5}]))"
      },
      {
        "sha": "1c456a5b82ba05659c5a11cb9ea95320d3f81903",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -21,8 +21,8 @@ def run_test(self):\n         # Create two chains by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        self.generate(self.nodes[0], 3)\n-        self.generate(self.nodes[1], 4)\n+        self.generate(self.nodes[0], 3, sync_fun=self.no_op)\n+        self.generate(self.nodes[1], 4, sync_fun=self.no_op)\n \n         assert_equal(self.nodes[0].getblockcount(), 3)\n         chain0_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]"
      },
      {
        "sha": "fb09c81cbd4083bd87f8f1dd05e576236bc81187",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -26,10 +26,8 @@ def run_test(self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network()\n-        self.generatetoaddress(self.nodes[0], 10, self.nodes[0].get_deterministic_priv_key().address)\n-        self.generatetoaddress(self.nodes[2], 20, self.nodes[2].get_deterministic_priv_key().address)\n-        self.sync_all(self.nodes[:2])\n-        self.sync_all(self.nodes[2:])\n+        self.generate(self.nodes[0], 10, sync_fun=lambda: self.sync_all(self.nodes[:2]))\n+        self.generate(self.nodes[2], 20, sync_fun=lambda: self.sync_all(self.nodes[2:]))\n \n         tips = self.nodes[1].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "9bc02d153e421fe3c0478a84f8cf600c6c6654de",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -22,12 +22,12 @@ def setup_network(self):\n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n-        self.generatetoaddress(self.nodes[0], 4, self.nodes[0].get_deterministic_priv_key().address)\n+        self.generate(self.nodes[0], 4, sync_fun=self.no_op)\n         assert_equal(self.nodes[0].getblockcount(), 4)\n         besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n-        self.generatetoaddress(self.nodes[1], 6, self.nodes[1].get_deterministic_priv_key().address)\n+        self.generate(self.nodes[1], 6, sync_fun=self.no_op)\n         assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n@@ -53,14 +53,14 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n-        self.generatetoaddress(self.nodes[2], 1, self.nodes[2].get_deterministic_priv_key().address)\n+        self.generate(self.nodes[2], 1, sync_fun=self.no_op)\n         self.log.info(\"Verify all nodes are at the right height\")\n         self.wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n         self.wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n         self.wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n \n         self.log.info(\"Verify that we reconsider all ancestors as well\")\n-        blocks = self.generatetodescriptor(self.nodes[1], 10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR)\n+        blocks = self.generatetodescriptor(self.nodes[1], 10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, sync_fun=self.no_op)\n         assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n         # Invalidate the two blocks at the tip\n         self.nodes[1].invalidateblock(blocks[-1])\n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n \n         self.log.info(\"Verify that we reconsider all descendants\")\n-        blocks = self.generatetodescriptor(self.nodes[1], 10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR)\n+        blocks = self.generatetodescriptor(self.nodes[1], 10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, sync_fun=self.no_op)\n         assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n         # Invalidate the two blocks at the tip\n         self.nodes[1].invalidateblock(blocks[-2])"
      },
      {
        "sha": "2e526efd9abd5fddd20f0bb62825b76c8bc143c5",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -42,19 +42,18 @@ def setup_network(self):\n \n     def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")\n-        gen_address = lambda i: self.nodes[i].get_deterministic_priv_key().address  # A non-wallet address to mine to\n-        self.generatetoaddress(self.nodes[0], 1, gen_address(0))\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         assert_equal(self.nodes[0].getblockcount(), 1)\n-        hashZ = self.generatetoaddress(self.nodes[1], 2, gen_address(1))[-1]\n+        hashZ = self.generate(self.nodes[1], 2, sync_fun=self.no_op)[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n-        hashC = self.generatetoaddress(self.nodes[0], 3, gen_address(0))[-1]\n+        hashC = self.generate(self.nodes[0], 3, sync_fun=self.no_op)[-1]\n         assert_equal(self.nodes[0].getblockcount(), 5)\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n-        hashG = self.generatetoaddress(self.nodes[1], 3, gen_address(1))[-1]\n+        hashG = self.generate(self.nodes[1], 3, sync_fun=self.no_op)[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n         assert hashC != hashG\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n@@ -83,7 +82,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n-        self.generatetoaddress(self.nodes[0], 1, gen_address(0))\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         self.sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n@@ -92,7 +91,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         self.log.info(\"Mine competing blocks I-J-K-L on Node 2\")\n-        self.generatetoaddress(self.nodes[2], 4, gen_address(2))\n+        self.generate(self.nodes[2], 4, sync_fun=self.no_op)\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")"
      },
      {
        "sha": "3cb11b4c18351fefa587edfece21f37542fd35fe",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -43,7 +43,6 @@ def run_test(self):\n \n         self.generate(self.nodes[0], 1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n-        self.sync_all()\n \n         txlist = []\n         blocktxn = self.nodes[0].getblock(blockhash, True)[\"tx\"]"
      },
      {
        "sha": "16517b061b6d235f0b6f17b6034fe9a03d7fb975",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -413,7 +413,7 @@ def setup_nodes(self):\n             # To ensure that all nodes are out of IBD, the most recent block\n             # must have a timestamp not too old (see IsInitialBlockDownload()).\n             self.log.debug('Generate a block with current time')\n-            block_hash = self.generate(self.nodes[0], 1)[0]\n+            block_hash = self.generate(self.nodes[0], 1, sync_fun=self.no_op)[0]\n             block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n             for n in self.nodes:\n                 n.submitblock(block)\n@@ -627,20 +627,27 @@ def join_network(self):\n         self.connect_nodes(1, 2)\n         self.sync_all()\n \n-    def generate(self, generator, *args, **kwargs):\n+    def no_op(self):\n+        pass\n+\n+    def generate(self, generator, *args, sync_fun=None, **kwargs):\n         blocks = generator.generate(*args, invalid_call=False, **kwargs)\n+        sync_fun() if sync_fun else self.sync_all()\n         return blocks\n \n-    def generateblock(self, generator, *args, **kwargs):\n+    def generateblock(self, generator, *args, sync_fun=None, **kwargs):\n         blocks = generator.generateblock(*args, invalid_call=False, **kwargs)\n+        sync_fun() if sync_fun else self.sync_all()\n         return blocks\n \n-    def generatetoaddress(self, generator, *args, **kwargs):\n+    def generatetoaddress(self, generator, *args, sync_fun=None, **kwargs):\n         blocks = generator.generatetoaddress(*args, invalid_call=False, **kwargs)\n+        sync_fun() if sync_fun else self.sync_all()\n         return blocks\n \n-    def generatetodescriptor(self, generator, *args, **kwargs):\n+    def generatetodescriptor(self, generator, *args, sync_fun=None, **kwargs):\n         blocks = generator.generatetodescriptor(*args, invalid_call=False, **kwargs)\n+        sync_fun() if sync_fun else self.sync_all()\n         return blocks\n \n     def sync_blocks(self, nodes=None, wait=1, timeout=60):"
      },
      {
        "sha": "792886544e3fedb3f3bccae53bb4a096dfa0dd15",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -451,10 +451,10 @@ def find_output(node, txid, amount, *, blockhash=None):\n \n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n-def create_confirmed_utxos(test_framework, fee, node, count):\n+def create_confirmed_utxos(test_framework, fee, node, count, **kwargs):\n     to_generate = int(0.5 * count) + 101\n     while to_generate > 0:\n-        test_framework.generate(node, min(25, to_generate))\n+        test_framework.generate(node, min(25, to_generate), **kwargs)\n         to_generate -= 25\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n@@ -475,7 +475,7 @@ def create_confirmed_utxos(test_framework, fee, node, count):\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n-        test_framework.generate(node, 1)\n+        test_framework.generate(node, 1, **kwargs)\n \n     utxos = node.listunspent()\n     assert len(utxos) >= count"
      },
      {
        "sha": "56fb3ddd1136c1c09a3323d386a79e79fc29d63b",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -167,7 +167,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n \n         self.connect_nodes(0, 1)\n         self.sync_blocks()"
      },
      {
        "sha": "470cd9f34ccc62effa6d8f580a9f8f0aff653f33",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -265,7 +265,7 @@ def test_balances(*, fee_node_1=0):\n         self.nodes[0].invalidateblock(block_reorg)\n         self.nodes[1].invalidateblock(block_reorg)\n         assert_equal(self.nodes[0].getbalance(minconf=0), 0)  # wallet txs not in the mempool are untrusted\n-        self.generatetoaddress(self.nodes[0], 1, ADDRESS_WATCHONLY)\n+        self.generatetoaddress(self.nodes[0], 1, ADDRESS_WATCHONLY, sync_fun=self.no_op)\n         assert_equal(self.nodes[0].getbalance(minconf=0), 0)  # wallet txs not in the mempool are untrusted\n \n         # Now confirm tx_orig"
      },
      {
        "sha": "8520833c8656252e8e3ee0beef243c855876c823",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 22,
        "deletions": 40,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -60,15 +60,14 @@ def run_test(self):\n \n         self.log.info(\"Mining blocks...\")\n \n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n \n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n         self.sync_all(self.nodes[0:3])\n-        self.generate(self.nodes[1], COINBASE_MATURITY + 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[1], COINBASE_MATURITY + 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -116,8 +115,7 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 0)\n \n         # Have node0 mine a block, thus it will collect its own fee.\n-        self.generate(self.nodes[0], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -196,8 +194,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listlockunspent()), 0)\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n-        self.generate(self.nodes[1], COINBASE_MATURITY)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[1], COINBASE_MATURITY, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -225,8 +222,7 @@ def run_test(self):\n         self.nodes[1].sendrawtransaction(hexstring=txns_to_send[1][\"hex\"], maxfeerate=0)\n \n         # Have node1 mine a block to confirm transactions:\n-        self.generate(self.nodes[1], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[1], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -240,15 +236,13 @@ def run_test(self):\n         fee_per_byte = Decimal('0.001') / 1000\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n-        self.generate(self.nodes[2], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[2], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n-        self.generate(self.nodes[2], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[2], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n@@ -257,16 +251,14 @@ def run_test(self):\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [])\n-        self.generate(self.nodes[2], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[2], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [address])\n-        self.generate(self.nodes[2], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[2], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n@@ -278,8 +270,7 @@ def run_test(self):\n \n         # Test passing fee_rate as a string\n         txid = self.nodes[2].sendmany(amounts={address: 10}, fee_rate=str(fee_rate_sat_vb))\n-        self.generate(self.nodes[2], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[2], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         balance = self.nodes[2].getbalance()\n         node_2_bal = self.check_fee_amount(balance, node_2_bal - Decimal('10'), explicit_fee_rate_btc_kvb, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(balance, node_2_bal)\n@@ -289,8 +280,7 @@ def run_test(self):\n         # Test passing fee_rate as an integer\n         amount = Decimal(\"0.0001\")\n         txid = self.nodes[2].sendmany(amounts={address: amount}, fee_rate=fee_rate_sat_vb)\n-        self.generate(self.nodes[2], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[2], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         balance = self.nodes[2].getbalance()\n         node_2_bal = self.check_fee_amount(balance, node_2_bal - amount, explicit_fee_rate_btc_kvb, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(balance, node_2_bal)\n@@ -374,14 +364,12 @@ def run_test(self):\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         tx_obj_not_broadcast = self.nodes[0].gettransaction(txid_not_broadcast)\n-        self.generate(self.nodes[1], 1)  # mine a block, tx should not be in there\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[1], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))  # mine a block, tx should not be in there\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)  # should not be changed because tx was not broadcasted\n \n         # now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(tx_obj_not_broadcast['hex'])\n-        self.generate(self.nodes[1], 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.generate(self.nodes[1], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal += 2\n         tx_obj_not_broadcast = self.nodes[0].gettransaction(txid_not_broadcast)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -399,8 +387,7 @@ def run_test(self):\n         self.connect_nodes(0, 2)\n         self.sync_blocks(self.nodes[0:3])\n \n-        self.generate(self.nodes[0], 1)\n-        self.sync_blocks(self.nodes[0:3])\n+        self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_blocks(self.nodes[0:3]))\n         node_2_bal += 2\n \n         # tx should be added to balance because after restarting the nodes tx should be broadcast\n@@ -467,8 +454,7 @@ def run_test(self):\n             self.sync_mempools(self.nodes[0:3])\n             vout = find_vout_for_address(self.nodes[2], txid, address_to_import)\n             self.nodes[2].lockunspent(False, [{\"txid\": txid, \"vout\": vout}])\n-            self.generate(self.nodes[0], 1)\n-            self.sync_all(self.nodes[0:3])\n+            self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n             self.log.info(\"Test sendtoaddress with fee_rate param (explicit fee rate in sat/vB)\")\n             prebalance = self.nodes[2].getbalance()\n@@ -480,8 +466,7 @@ def run_test(self):\n             # Test passing fee_rate as an integer\n             txid = self.nodes[2].sendtoaddress(address=address, amount=amount, fee_rate=fee_rate_sat_vb)\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.generate(self.nodes[0], 1)\n-            self.sync_all(self.nodes[0:3])\n+            self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n             postbalance = self.nodes[2].getbalance()\n             fee = prebalance - postbalance - Decimal(amount)\n             assert_fee_amount(fee, tx_size, Decimal(fee_rate_btc_kvb))\n@@ -493,8 +478,7 @@ def run_test(self):\n             # Test passing fee_rate as a string\n             txid = self.nodes[2].sendtoaddress(address=address, amount=amount, fee_rate=str(fee_rate_sat_vb))\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.generate(self.nodes[0], 1)\n-            self.sync_all(self.nodes[0:3])\n+            self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n             postbalance = self.nodes[2].getbalance()\n             fee = prebalance - postbalance - amount\n             assert_fee_amount(fee, tx_size, Decimal(fee_rate_btc_kvb))\n@@ -555,17 +539,15 @@ def run_test(self):\n \n         # Mine a block from node0 to an address from node1\n         coinbase_addr = self.nodes[1].getnewaddress()\n-        block_hash = self.generatetoaddress(self.nodes[0], 1, coinbase_addr)[0]\n+        block_hash = self.generatetoaddress(self.nodes[0], 1, coinbase_addr, sync_fun=lambda: self.sync_all(self.nodes[0:3]))[0]\n         coinbase_txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        self.sync_all(self.nodes[0:3])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(coinbase_txid)\n \n         # check if wallet or blockchain maintenance changes the balance\n         self.sync_all(self.nodes[0:3])\n-        blocks = self.generate(self.nodes[0], 2)\n-        self.sync_all(self.nodes[0:3])\n+        blocks = self.generate(self.nodes[0], 2, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n@@ -606,13 +588,13 @@ def run_test(self):\n         # Get all non-zero utxos together\n         chain_addrs = [self.nodes[0].getnewaddress(), self.nodes[0].getnewaddress()]\n         singletxid = self.nodes[0].sendtoaddress(chain_addrs[0], self.nodes[0].getbalance(), \"\", \"\", True)\n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\": singletxid, \"vout\": 0}], {chain_addrs[0]: node0_balance / 2 - Decimal('0.01'), chain_addrs[1]: node0_balance / 2 - Decimal('0.01')})\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(hexstring=signedtx[\"hex\"], maxfeerate=0)\n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n \n         # Make a long chain of unconfirmed payments without hitting mempool limit\n         # Each tx we make leaves only one output of change on a chain 1 longer\n@@ -663,7 +645,7 @@ def run_test(self):\n         assert not address_info[\"ischange\"]\n \n         # Test getaddressinfo 'ischange' field on change address.\n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         destination = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(destination, 0.123)\n         tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])"
      },
      {
        "sha": "7d8c4a2fee030d2a9e34623910ed7c3a0b0b0fb1",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -519,7 +519,7 @@ def test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address):\n     assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == rbfid], [])\n \n     # check that the main output from the rbf tx is spendable after confirmed\n-    self.generate(rbf_node, 1)\n+    self.generate(rbf_node, 1, sync_fun=self.no_op)\n     assert_equal(\n         sum(1 for t in rbf_node.listunspent(minconf=0, include_unsafe=False)\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)"
      },
      {
        "sha": "06ee28b0b400ec137de50fb1d6d1b07985b31186",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -181,7 +181,6 @@ def run_test(self):\n             self.generate(self.nodes[0], 1)  # Generate one block for each send\n             variant.confirmation_height = self.nodes[0].getblockcount()\n             variant.timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n-        self.sync_all() # Conclude sync before calling setmocktime to avoid timeouts\n \n         # Generate a block further in the future (past the rescan window).\n         assert_equal(self.nodes[0].getrawmempool(), [])"
      },
      {
        "sha": "8289c6b8ce4b11c3d86f6254dc68bd1ea9b882c1",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -62,8 +62,8 @@ def test_importmulti(self, req, success, error_code=None, error_message=None, wa\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n-        self.generate(self.nodes[0], 1)\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()  # Sync the timestamp to the wallet, so that importmulti works\n \n@@ -256,9 +256,9 @@ def run_test(self):\n \n         # P2SH address\n         multisig = get_multisig(self.nodes[0])\n-        self.generate(self.nodes[1], COINBASE_MATURITY)\n+        self.generate(self.nodes[1], COINBASE_MATURITY, sync_fun=self.no_op)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n \n@@ -277,9 +277,9 @@ def run_test(self):\n \n         # P2SH + Redeem script\n         multisig = get_multisig(self.nodes[0])\n-        self.generate(self.nodes[1], COINBASE_MATURITY)\n+        self.generate(self.nodes[1], COINBASE_MATURITY, sync_fun=self.no_op)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n \n@@ -298,9 +298,9 @@ def run_test(self):\n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n         multisig = get_multisig(self.nodes[0])\n-        self.generate(self.nodes[1], COINBASE_MATURITY)\n+        self.generate(self.nodes[1], COINBASE_MATURITY, sync_fun=self.no_op)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n \n@@ -324,9 +324,9 @@ def run_test(self):\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n         multisig = get_multisig(self.nodes[0])\n-        self.generate(self.nodes[1], COINBASE_MATURITY)\n+        self.generate(self.nodes[1], COINBASE_MATURITY, sync_fun=self.no_op)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n "
      },
      {
        "sha": "69934ea2cc6b68dccc9b79e52c03713c6904ea6b",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -46,7 +46,6 @@ def test_no_blockhash(self):\n         txid = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         blockhash, = self.generate(self.nodes[2], 1)\n         blockheight = self.nodes[2].getblockheader(blockhash)['height']\n-        self.sync_all()\n \n         txs = self.nodes[0].listtransactions()\n         assert_array_result(txs, {\"txid\": txid}, {\n@@ -88,7 +87,6 @@ def test_targetconfirmations(self):\n         self.log.info(\"Test target_confirmations\")\n         blockhash, = self.generate(self.nodes[2], 1)\n         blockheight = self.nodes[2].getblockheader(blockhash)['height']\n-        self.sync_all()\n \n         assert_equal(\n             self.nodes[0].getblockhash(0),\n@@ -136,14 +134,11 @@ def test_reorg(self):\n         senttx = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n \n         # generate on both sides\n-        nodes1_last_blockhash = self.generate(self.nodes[1], 6)[-1]\n-        nodes2_first_blockhash = self.generate(self.nodes[2], 7)[0]\n+        nodes1_last_blockhash = self.generate(self.nodes[1], 6, sync_fun=lambda: self.sync_all(self.nodes[:2]))[-1]\n+        nodes2_first_blockhash = self.generate(self.nodes[2], 7, sync_fun=lambda: self.sync_all(self.nodes[2:]))[0]\n         self.log.debug(\"nodes[1] last blockhash = {}\".format(nodes1_last_blockhash))\n         self.log.debug(\"nodes[2] first blockhash = {}\".format(nodes2_first_blockhash))\n \n-        self.sync_all(self.nodes[:2])\n-        self.sync_all(self.nodes[2:])\n-\n         self.join_network()\n \n         # listsinceblock(nodes1_last_blockhash) should now include tx as seen from nodes[0]\n@@ -225,8 +220,8 @@ def test_double_spend(self):\n                 self.nodes[2].createrawtransaction(utxo_dicts, recipient_dict2))['hex'])\n \n         # generate on both sides\n-        lastblockhash = self.generate(self.nodes[1], 3)[2]\n-        self.generate(self.nodes[2], 4)\n+        lastblockhash = self.generate(self.nodes[1], 3, sync_fun=self.no_op)[2]\n+        self.generate(self.nodes[2], 4, sync_fun=self.no_op)\n \n         self.join_network()\n \n@@ -297,16 +292,16 @@ def test_double_send(self):\n         txid1 = self.nodes[1].sendrawtransaction(signedtx)\n \n         # generate bb1-bb2 on right side\n-        self.generate(self.nodes[2], 2)\n+        self.generate(self.nodes[2], 2, sync_fun=self.no_op)\n \n         # send from nodes[2]; this will end up in bb3\n         txid2 = self.nodes[2].sendrawtransaction(signedtx)\n \n         assert_equal(txid1, txid2)\n \n         # generate on both sides\n-        lastblockhash = self.generate(self.nodes[1], 3)[2]\n-        self.generate(self.nodes[2], 2)\n+        lastblockhash = self.generate(self.nodes[1], 3, sync_fun=self.no_op)[2]\n+        self.generate(self.nodes[2], 2, sync_fun=self.no_op)\n \n         self.join_network()\n "
      },
      {
        "sha": "68e2a4e62d05c58d983102bd5e10e1ad850c25a2",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -38,7 +38,6 @@ def run_test(self):\n         self.log.info(\"Test confirmations change after mining a block\")\n         blockhash = self.generate(self.nodes[0], 1)[0]\n         blockheight = self.nodes[0].getblockheader(blockhash)['height']\n-        self.sync_all()\n         assert_array_result(self.nodes[0].listtransactions(),\n                             {\"txid\": txid},\n                             {\"category\": \"send\", \"amount\": Decimal(\"-0.1\"), \"confirmations\": 1, \"blockhash\": blockhash, \"blockheight\": blockheight})"
      },
      {
        "sha": "9ed063d88375f11c9d85bfc74ccaf0c174879ac9",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -185,7 +185,7 @@ def wallet_file(name):\n         self.nodes[0].createwallet(\"w5\")\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n-        self.generatetoaddress(node, nblocks=1, address=w5.getnewaddress())\n+        self.generatetoaddress(node, nblocks=1, address=w5.getnewaddress(), sync_fun=self.no_op)\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n         os.rename(wallet_dir2, wallet_dir())\n@@ -217,7 +217,7 @@ def wallet_file(name):\n         wallet_bad = wallet(\"bad\")\n \n         # check wallet names and balances\n-        self.generatetoaddress(node, nblocks=1, address=wallets[0].getnewaddress())\n+        self.generatetoaddress(node, nblocks=1, address=wallets[0].getnewaddress(), sync_fun=self.no_op)\n         for wallet_name, wallet in zip(wallet_names, wallets):\n             info = wallet.getwalletinfo()\n             assert_equal(info['immature_balance'], 50 if wallet is wallets[0] else 0)\n@@ -230,7 +230,7 @@ def wallet_file(name):\n         assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n         w1, w2, w3, w4, *_ = wallets\n-        self.generatetoaddress(node, nblocks=COINBASE_MATURITY + 1, address=w1.getnewaddress())\n+        self.generatetoaddress(node, nblocks=COINBASE_MATURITY + 1, address=w1.getnewaddress(), sync_fun=self.no_op)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)\n         assert_equal(w3.getbalance(), 0)\n@@ -239,7 +239,7 @@ def wallet_file(name):\n         w1.sendtoaddress(w2.getnewaddress(), 1)\n         w1.sendtoaddress(w3.getnewaddress(), 2)\n         w1.sendtoaddress(w4.getnewaddress(), 3)\n-        self.generatetoaddress(node, nblocks=1, address=w1.getnewaddress())\n+        self.generatetoaddress(node, nblocks=1, address=w1.getnewaddress(), sync_fun=self.no_op)\n         assert_equal(w2.getbalance(), 1)\n         assert_equal(w3.getbalance(), 2)\n         assert_equal(w4.getbalance(), 3)"
      },
      {
        "sha": "9a86ede5f94f29e3ddf56d7befd81dab997ece66",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         # Send a tx to be unconfirmed later\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         tx = self.nodes[0].gettransaction(txid)\n-        self.generate(self.nodes[0], 4)\n+        self.generate(self.nodes[0], 4, sync_fun=self.no_op)\n         tx_before_reorg = self.nodes[0].gettransaction(txid)\n         assert_equal(tx_before_reorg[\"confirmations\"], 4)\n \n@@ -62,9 +62,9 @@ def run_test(self):\n         conflicting = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs_2))\n \n         conflicted_txid = self.nodes[0].sendrawtransaction(conflicted[\"hex\"])\n-        self.generate(self.nodes[0], 1)\n+        self.generate(self.nodes[0], 1, sync_fun=self.no_op)\n         conflicting_txid = self.nodes[2].sendrawtransaction(conflicting[\"hex\"])\n-        self.generate(self.nodes[2], 9)\n+        self.generate(self.nodes[2], 9, sync_fun=self.no_op)\n \n         # Reconnect node0 and node2 and check that conflicted_txid is effectively conflicted\n         self.connect_nodes(0, 2)\n@@ -78,11 +78,11 @@ def run_test(self):\n         self.restart_node(0)\n \n         # The block chain re-orgs and the tx is included in a different block\n-        self.generate(self.nodes[1], 9)\n+        self.generate(self.nodes[1], 9, sync_fun=self.no_op)\n         self.nodes[1].sendrawtransaction(tx[\"hex\"])\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n         self.nodes[1].sendrawtransaction(conflicted[\"hex\"])\n-        self.generate(self.nodes[1], 1)\n+        self.generate(self.nodes[1], 1, sync_fun=self.no_op)\n \n         # Node0 wallet file is loaded on longest sync'ed node1\n         self.stop_node(1)"
      },
      {
        "sha": "ec8a4d33a38b2d26b139d4befa05f36ac0657144",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -448,7 +448,6 @@ def run_test(self):\n         res = self.nodes[0].sendrawtransaction(hex)\n         self.generate(self.nodes[0], 1)\n         assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 1)\n-        self.sync_all()\n \n         self.log.info(\"Lock unspents...\")\n         utxo1 = w0.listunspent()[0]"
      },
      {
        "sha": "73013dbfe97f1080fff1fafaca3a9e5c9ace35d0",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -272,11 +272,11 @@ def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, key\n             boring_balance = int(self.boring.getbalance() * 100000000)\n             to_amnt = random.randrange(1000000, boring_balance)\n             self.boring.sendtoaddress(address=addr_g, amount=Decimal(to_amnt) / 100000000, subtractfeefromamount=True)\n-            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress())\n+            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             test_balance = int(self.rpc_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n             res = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=Decimal(ret_amnt) / 100000000, subtractfeefromamount=True)\n-            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress())\n+            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             assert(self.rpc_online.gettransaction(res)[\"confirmations\"] > 0)\n \n     def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change):\n@@ -303,15 +303,15 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n             boring_balance = int(self.boring.getbalance() * 100000000)\n             to_amnt = random.randrange(1000000, boring_balance)\n             self.boring.sendtoaddress(address=addr_g, amount=Decimal(to_amnt) / 100000000, subtractfeefromamount=True)\n-            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress())\n+            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             test_balance = int(self.psbt_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n             psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): Decimal(ret_amnt) / 100000000}], None, {\"subtractFeeFromOutputs\":[0]})['psbt']\n             res = self.psbt_offline.walletprocesspsbt(psbt)\n             assert(res['complete'])\n             rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n             txid = self.nodes[0].sendrawtransaction(rawtx)\n-            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress())\n+            self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n \n     def do_test(self, comment, pattern, privmap, treefn, nkeys):\n@@ -343,7 +343,7 @@ def run_test(self):\n \n         self.log.info(\"Mining blocks...\")\n         gen_addr = self.boring.getnewaddress()\n-        self.generatetoaddress(self.nodes[0], 101, gen_addr)\n+        self.generatetoaddress(self.nodes[0], 101, gen_addr, sync_fun=self.no_op)\n \n         self.do_test(\n             \"tr(XPRV)\",\n@@ -412,15 +412,15 @@ def run_test(self):\n         self.log.info(\"Sending everything back...\")\n \n         txid = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=self.rpc_online.getbalance(), subtractfeefromamount=True)\n-        self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress())\n+        self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n         assert(self.rpc_online.gettransaction(txid)[\"confirmations\"] > 0)\n \n         psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): self.psbt_online.getbalance()}], None, {\"subtractFeeFromOutputs\": [0]})['psbt']\n         res = self.psbt_offline.walletprocesspsbt(psbt)\n         assert(res['complete'])\n         rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n         txid = self.nodes[0].sendrawtransaction(rawtx)\n-        self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress())\n+        self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n         assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "5ca231cb769cabc7b71ab2ad60f0a1094d0d33fd",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -93,8 +93,7 @@ def run_test(self):\n \n         # Have node0 mine a block, if requested:\n         if (self.options.mine_block):\n-            self.generate(self.nodes[0], 1)\n-            self.sync_blocks(self.nodes[0:2])\n+            self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_blocks(self.nodes[0:2]))\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n@@ -123,7 +122,7 @@ def run_test(self):\n             return\n \n         # ... mine a block...\n-        self.generate(self.nodes[2], 1)\n+        self.generate(self.nodes[2], 1, sync_fun=self.no_op)\n \n         # Reconnect the split network, and sync chain:\n         self.connect_nodes(1, 2)"
      },
      {
        "sha": "526e5cdd94367651bb39a08f416933976ae9d18d",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -91,8 +91,7 @@ def run_test(self):\n \n         # Have node0 mine a block:\n         if (self.options.mine_block):\n-            self.generate(self.nodes[0], 1)\n-            self.sync_blocks(self.nodes[0:2])\n+            self.generate(self.nodes[0], 1, sync_fun=lambda: self.sync_blocks(self.nodes[0:2]))\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n@@ -120,7 +119,7 @@ def run_test(self):\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n         doublespend_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n-        self.generate(self.nodes[2], 1)\n+        self.generate(self.nodes[2], 1, sync_fun=self.no_op)\n \n         # Reconnect the split network, and sync chain:\n         self.connect_nodes(1, 2)"
      },
      {
        "sha": "db03796df6fed44374da556cc3c7011a89098906",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "patch": "@@ -119,8 +119,7 @@ def test_upgradewallet_error(self, wallet, previous_version, requested_version,\n         assert_equal(wallet.getwalletinfo()[\"walletversion\"], previous_version)\n \n     def run_test(self):\n-        self.generatetoaddress(self.nodes[0], COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n-        self.dumb_sync_blocks()\n+        self.generatetoaddress(self.nodes[0], COINBASE_MATURITY + 1, self.nodes[0].getnewaddress(), sync_fun=lambda: self.dumb_sync_blocks())\n         # # Sanity check the test framework:\n         res = self.nodes[0].getblockchaininfo()\n         assert_equal(res['blocks'], COINBASE_MATURITY + 1)\n@@ -131,8 +130,7 @@ def run_test(self):\n         # Send coins to old wallets for later conversion checks.\n         v16_3_wallet  = v16_3_node.get_wallet_rpc('wallet.dat')\n         v16_3_address = v16_3_wallet.getnewaddress()\n-        self.generatetoaddress(node_master, COINBASE_MATURITY + 1, v16_3_address)\n-        self.dumb_sync_blocks()\n+        self.generatetoaddress(node_master, COINBASE_MATURITY + 1, v16_3_address, sync_fun=lambda: self.dumb_sync_blocks())\n         v16_3_balance = v16_3_wallet.getbalance()\n \n         self.log.info(\"Test upgradewallet RPC...\")"
      }
    ]
  },
  {
    "sha": "ffff4ad89435317da85a17bca31c03a578eda8df",
    "node_id": "C_kwDOABII59oAKGZmZmY0YWQ4OTQzNTMxN2RhODVhMTdiY2EzMWMwM2E1NzhlZGE4ZGY",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T09:56:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-18T11:16:33Z"
      },
      "message": "scripted-diff: Remove redundant sync_all\n\n-BEGIN VERIFY SCRIPT-\nperl -0777 -pi -e 's/(generate[^\\n]*\\)[^\\n]*)(\\n|\\s)+self.sync_.*\\(\\)\\n/\\1\\n/g' $(git grep -l generate ./test)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "764b653ccf604e20b2cb11659d5fbae6f7bf4fe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/764b653ccf604e20b2cb11659d5fbae6f7bf4fe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffff4ad89435317da85a17bca31c03a578eda8df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgP7QwAo/+5syob7PPkbGFO2WcT87GaaB2ae0KRg+ql8N8RoeKDV1hHC2aQs53n\nzf4zNzZdPj6CuuRvuGfEGigUx83ibgQj85VLSLgJ28wBRxCrOZVhp4/4O17mHGKx\n2jPSUBlF40IsthVdtFF9IdLPdtskNSwz1DVv3UNF5QYcCldCxt8OxgmAxpzcJqT1\nZX/kjQqOlKnVYJyjcpkj3I7Ag5BSgip1Ug5IH91vkL0P51DdVQuBCXQX8ljB2tmi\nbfvZaYyJRtuolqcaFijZP7lW+u9epHoWUyFCzEtaMLM8FBuK3LNb5U/42lMQNZ9+\nCZhF+fp9ct8db6NNuCF3IX154jJSsmcMVUOxew8+E3tuzdKZ6BwBH2ZLSr6tzSQd\nrv86nZ6/n62JRK4pEHB1hK8urrTqHg4ML7oFe5hvbc8pKaMVhzsLoXK04rJzXLb0\nl7kSvfg5vwMYB0cyFYnacTRm5YNYmYZpxIWlPp3aYcfkclfZlO016b2XCCtS3NDg\nQStnmHWK\n=fRnM\n-----END PGP SIGNATURE-----",
        "payload": "tree 764b653ccf604e20b2cb11659d5fbae6f7bf4fe5\nparent fa2e5a53eb907d01cb72c0eb7b0e923c979070b3\nauthor MarcoFalke <falke.marco@gmail.com> 1627466170 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1634555793 +0200\n\nscripted-diff: Remove redundant sync_all\n\n-BEGIN VERIFY SCRIPT-\nperl -0777 -pi -e 's/(generate[^\\n]*\\)[^\\n]*)(\\n|\\s)+self.sync_.*\\(\\)\\n/\\1\\n/g' $(git grep -l generate ./test)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff4ad89435317da85a17bca31c03a578eda8df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffff4ad89435317da85a17bca31c03a578eda8df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff4ad89435317da85a17bca31c03a578eda8df/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2e5a53eb907d01cb72c0eb7b0e923c979070b3"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 0,
      "deletions": 133
    },
    "files": [
      {
        "sha": "98931bf0245e837c2b538c7da39cb9afc728acae",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -66,8 +66,6 @@ def setup_nodes(self):\n     def run_test(self):\n         self.generatetoaddress(self.nodes[0], COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n \n-        self.sync_blocks()\n-\n         # Sanity check the test framework:\n         res = self.nodes[self.num_nodes - 1].getblockchaininfo()\n         assert_equal(res['blocks'], COINBASE_MATURITY + 1)\n@@ -93,15 +91,13 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(address, 10)\n         self.sync_mempools()\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         # Create a conflicting transaction using RBF\n         return_address = self.nodes[0].getnewaddress()\n         tx1_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx2_id = self.nodes[1].bumpfee(tx1_id)[\"txid\"]\n         # Confirm the transaction\n         self.sync_mempools()\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         # Create another conflicting transaction using RBF\n         tx3_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx4_id = self.nodes[1].bumpfee(tx3_id)[\"txid\"]"
      },
      {
        "sha": "cb51a534c3897197c0d714be8bf56ca844bd59ea",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -26,9 +26,7 @@ def run_test(self):\n         assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n         self.generate(self.nodes[0], 250)\n-        self.sync_all()\n         self.generate(self.nodes[0], 250)\n-        self.sync_all()\n         self.sync_index(height=700)\n \n         self.log.info(\"prune some blocks\")"
      },
      {
        "sha": "f16ff87d545e23f0a36ab80a82fce53d2416b5eb",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -170,7 +170,6 @@ def _test_coin_stats_index(self):\n \n         # Include both txs in a block\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         for hash_option in index_hash_options:\n             # Check all amounts were registered correctly\n@@ -271,7 +270,6 @@ def _test_reorg_index(self):\n         # Add another block, so we don't depend on reconsiderblock remembering which\n         # blocks were touched by invalidateblock\n         self.generate(index_node, 1)\n-        self.sync_all()\n \n         # Ensure that removing and re-adding blocks yields consistent results\n         block = index_node.getblockhash(99)"
      },
      {
        "sha": "71a7e7a659fd31a7ab95e14bb5043e40d2933cc1",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -112,7 +112,6 @@ def run_test(self):\n             self.log.info(\"test -walletnotify with conflicting transactions\")\n             self.nodes[0].rescanblockchain()\n             self.generatetoaddress(self.nodes[0], 100, ADDRESS_BCRT1_UNSPENDABLE)\n-            self.sync_blocks()\n \n             # Generate transaction on node 0, sync mempools, and check for\n             # notification on node 1."
      },
      {
        "sha": "d9be9f85caf41cad0fd345ce2d82c958de3fffff",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -162,15 +162,13 @@ def run_test(self):\n                     p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n \n         self.generate(self.nodes[0], 1)  # block 163\n-        self.sync_blocks()\n \n         # Make sure all nodes recognize the transactions as theirs\n         assert_equal(self.nodes[0].getbalance(), balance_presetup - 60 * 50 + 20 * Decimal(\"49.999\") + 50)\n         assert_equal(self.nodes[1].getbalance(), 20 * Decimal(\"49.999\"))\n         assert_equal(self.nodes[2].getbalance(), 20 * Decimal(\"49.999\"))\n \n         self.generate(self.nodes[0], 260)  # block 423\n-        self.sync_blocks()\n \n         self.log.info(\"Verify witness txs are skipped for mining before the fork\")\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][P2WPKH][0], True)  # block 424\n@@ -187,7 +185,6 @@ def run_test(self):\n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n         blockhash = self.generate(self.nodes[2], 1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n-        self.sync_blocks()\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n         segwit_tx_list = self.nodes[2].getblock(blockhash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n@@ -600,7 +597,6 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         txid = self.nodes[0].sendrawtransaction(hexstring=signresults, maxfeerate=0)\n         txs_mined[txid] = self.generate(self.nodes[0], 1)[0]\n-        self.sync_blocks()\n         watchcount = 0\n         spendcount = 0\n         for i in self.nodes[0].listunspent():\n@@ -650,7 +646,6 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         self.nodes[0].sendrawtransaction(hexstring=signresults, maxfeerate=0)\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "f0fec63a33d670bb0cdccfed9e78b9ded15268d2",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -81,9 +81,7 @@ def run_test(self):\n         not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         self.generatetoaddress(self.nodes[1], 100, not_related_address)\n-        self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n@@ -108,7 +106,6 @@ def run_test(self):\n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n         self.generatetoaddress(self.nodes[1], 1, not_related_address)\n-        self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n@@ -183,7 +180,6 @@ def run_test(self):\n         assert_equal(len(json_obj['utxos']), 0)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         json_obj = self.test_rest_request(f\"/getutxos/{spending[0]}-{spending[1]}\")\n         assert_equal(len(json_obj['utxos']), 1)\n@@ -204,7 +200,6 @@ def run_test(self):\n         self.test_rest_request(f\"/getutxos/checkmempool/{long_uri}\", http_method='POST', status=200)\n \n         self.generate(self.nodes[0], 1)  # generate block to not affect upcoming tests\n-        self.sync_all()\n \n         self.log.info(\"Test the /block, /blockhashbyheight and /headers URIs\")\n         bb_hash = self.nodes[0].getbestblockhash()\n@@ -275,7 +270,6 @@ def run_test(self):\n \n         # See if we can get 5 headers in one response\n         self.generate(self.nodes[1], 5)\n-        self.sync_all()\n         json_obj = self.test_rest_request(f\"/headers/5/{bb_hash}\")\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n@@ -310,7 +304,6 @@ def run_test(self):\n \n         # Now mine the transactions\n         newblockhash = self.generate(self.nodes[1], 1)\n-        self.sync_all()\n \n         # Check if the 3 tx show up in the new block\n         json_obj = self.test_rest_request(f\"/block/{newblockhash[0]}\")"
      },
      {
        "sha": "4c9674cc52104ff11e893dfdc50d129844dcf145",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -190,8 +190,6 @@ def test_basic(self):\n         self.log.info(f\"Generate {num_blocks} blocks (and {num_blocks} coinbase txes)\")\n         genhashes = self.generatetoaddress(self.nodes[0], num_blocks, ADDRESS_BCRT1_UNSPENDABLE)\n \n-        self.sync_all()\n-\n         for x in range(num_blocks):\n             # Should receive the coinbase txid.\n             txid = hashtx.receive()\n@@ -353,7 +351,6 @@ def test_sequence(self):\n             # removed from the mempool by the block mining it.\n             mempool_size = len(self.nodes[0].getrawmempool())\n             c_block = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n-            self.sync_all()\n             # Make sure the number of mined transactions matches the number of txs out of mempool\n             mempool_size_delta = mempool_size - len(self.nodes[0].getrawmempool())\n             assert_equal(len(self.nodes[0].getblock(c_block)[\"tx\"])-1, mempool_size_delta)\n@@ -393,7 +390,6 @@ def test_sequence(self):\n             # Other things may happen but aren't wallet-deterministic so we don't test for them currently\n             self.nodes[0].reconsiderblock(best_hash)\n             self.generatetoaddress(self.nodes[1], 1, ADDRESS_BCRT1_UNSPENDABLE)\n-            self.sync_all()\n \n             self.log.info(\"Evict mempool transaction by block conflict\")\n             orig_txid = self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=1.0, replaceable=True)"
      },
      {
        "sha": "ac9c45af8dc9f56786544eb382cf9788aa3264ff",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -193,7 +193,6 @@ def run_test(self):\n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         # Prioritise a transaction that has been mined, then add it back to the\n         # mempool by using invalidateblock.\n@@ -284,7 +283,6 @@ def run_test(self):\n         # Test reorg handling\n         # First, the basics:\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         self.nodes[1].invalidateblock(self.nodes[0].getbestblockhash())\n         self.nodes[1].reconsiderblock(self.nodes[0].getbestblockhash())\n \n@@ -331,7 +329,6 @@ def run_test(self):\n \n         # Mine these in a block\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # Now generate tx8, with a big fee\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]"
      },
      {
        "sha": "1a9fd523f0a491c7707da382e8a5197f93001ac1",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -64,7 +64,6 @@ def run_test(self):\n \n         # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n         self.generate(self.nodes[0], COINBASE_MATURITY)\n-        self.sync_blocks()\n \n         self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])"
      },
      {
        "sha": "c985a1f98d99581fbc4320435b060f4cf18e0d42",
        "filename": "test/functional/p2p_compactblocks_hb.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_compactblocks_hb.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_compactblocks_hb.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks_hb.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -31,7 +31,6 @@ def relay_block_through(self, peer):\n         \"\"\"Relay a new block through peer peer, and return HB status between 1 and [2,3,4,5].\"\"\"\n         self.connect_nodes(peer, 0)\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         self.disconnect_nodes(peer, 0)\n         status_to = [self.peer_info(1, i)['bip152_hb_to'] for i in range(2, 6)]\n         status_from = [self.peer_info(i, 1)['bip152_hb_from'] for i in range(2, 6)]\n@@ -45,7 +44,6 @@ def run_test(self):\n         for i in range(1, 6):\n             self.connect_nodes(i, 0)\n         self.generate(self.nodes[0], 2)\n-        self.sync_blocks()\n         for i in range(1, 6):\n             self.disconnect_nodes(i, 0)\n "
      },
      {
        "sha": "823a59e71f86c4501b4a136a337dcaca147030fb",
        "filename": "test/functional/p2p_ibd_txrelay.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_ibd_txrelay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_ibd_txrelay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_ibd_txrelay.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -30,7 +30,6 @@ def run_test(self):\n \n         # Come out of IBD by generating a block\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         self.log.info(\"Check that nodes reset minfilter after coming out of IBD\")\n         for node in self.nodes:"
      },
      {
        "sha": "ec27185f1021586ee859073b9b070fa02b50194e",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -94,7 +94,6 @@ def run_test(self):\n \n     def check_tx_relay(self):\n         block_op_true = self.nodes[0].getblock(self.generatetoaddress(self.nodes[0], 100, ADDRESS_BCRT1_P2WSH_OP_TRUE)[0])\n-        self.sync_all()\n \n         self.log.debug(\"Create a connection from a forcerelay peer that rebroadcasts raw txs\")\n         # A test framework p2p connection is needed to send the raw transaction directly. If a full node was used, it could only"
      },
      {
        "sha": "a51009fb32f8e07e1aa3f5398f04e6da6b708139",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -573,7 +573,6 @@ def test_standardness_v0(self):\n         # Mine it on test_node to create the confirmed output.\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         # Now test standardness of v0 P2WSH outputs.\n         # Start by creating a transaction with two outputs.\n@@ -646,7 +645,6 @@ def test_standardness_v0(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n@@ -1341,7 +1339,6 @@ def test_segwit_versions(self):\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n         self.generate(self.nodes[0], 1)  # Mine all the transactions\n-        self.sync_blocks()\n         assert len(self.nodes[0].getrawmempool()) == 0\n \n         # Finally, verify that version 0 -> version 2 transactions\n@@ -1412,7 +1409,6 @@ def test_premature_coinbase_witness_spend(self):\n \n         # Now test a premature spend.\n         self.generate(self.nodes[0], 98)\n-        self.sync_blocks()\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n@@ -1726,7 +1722,6 @@ def test_non_standard_witness_blinding(self):\n         tx.rehash()\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         # We'll add an unnecessary witness to this transaction that would cause\n         # it to be non-standard, to test that violating policy with a witness\n@@ -1755,7 +1750,6 @@ def test_non_standard_witness_blinding(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         # Update our utxo list; we spent the first entry.\n         self.utxo.pop(0)\n@@ -1790,7 +1784,6 @@ def test_non_standard_witness(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         # Creating transactions for tests\n         p2wsh_txs = []"
      },
      {
        "sha": "f16c09400d8e3b07d6ed3cf3a57a3242546ab041",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -46,7 +46,6 @@ def run_test(self):\n \n         self.log.info('Generating blocks ...')\n         self.generate(node0, 149)\n-        self.sync_all()\n \n         self.moved = 0\n         for self.nkeys in [3, 5]:\n@@ -117,7 +116,6 @@ def check_addmultisigaddress_errors(self):\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         self.generate(node0, COINBASE_MATURITY)\n-        self.sync_all()\n \n         bal0 = node0.getbalance()\n         bal1 = node1.getbalance()"
      },
      {
        "sha": "3097fba156ab0b97f41aeeb9c147f3b686593016",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -99,9 +99,7 @@ def run_test(self):\n         self.fee_tolerance = 2 * self.min_relay_tx_fee / 1000\n \n         self.generate(self.nodes[2], 1)\n-        self.sync_all()\n         self.generate(self.nodes[0], 121)\n-        self.sync_all()\n \n         self.test_change_position()\n         self.test_simple()\n@@ -163,7 +161,6 @@ def test_change_position(self):\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         wwatch.unloadwallet()\n \n@@ -549,7 +546,6 @@ def test_spend_2of2(self):\n         # Send 1.2 BTC to msig addr.\n         self.nodes[0].sendtoaddress(mSigObj, 1.2)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         oldBalance = self.nodes[1].getbalance()\n         inputs = []\n@@ -560,7 +556,6 @@ def test_spend_2of2(self):\n         final_psbt = w2.finalizepsbt(signed_psbt['psbt'])\n         self.nodes[2].sendrawtransaction(final_psbt['hex'])\n         self.generate(self.nodes[2], 1)\n-        self.sync_all()\n \n         # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n@@ -624,7 +619,6 @@ def test_locked_wallet(self):\n         signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.generate(self.nodes[1], 1)\n-        self.sync_all()\n \n         # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n@@ -636,12 +630,10 @@ def test_many_inputs_fee(self):\n         # Empty node1, send some small coins from node0 to node1.\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.generate(self.nodes[1], 1)\n-        self.sync_all()\n \n         for _ in range(20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # Fund a tx with ~20 small inputs.\n         inputs = []\n@@ -664,12 +656,10 @@ def test_many_inputs_send(self):\n         # Again, empty node1, send some small coins from node0 to node1.\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.generate(self.nodes[1], 1)\n-        self.sync_all()\n \n         for _ in range(20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # Fund a tx with ~20 small inputs.\n         oldBalance = self.nodes[0].getbalance()\n@@ -681,7 +671,6 @@ def test_many_inputs_send(self):\n         fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.generate(self.nodes[1], 1)\n-        self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n     def test_op_return(self):\n@@ -759,7 +748,6 @@ def test_all_watched_funds(self):\n         assert signedtx[\"complete\"]\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         wwatch.unloadwallet()\n "
      },
      {
        "sha": "6c9aa4205605122da6b0fc21a8d227864f155473",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -48,7 +48,6 @@ def generate_test_data(self, filename):\n         address = self.nodes[0].get_deterministic_priv_key().address\n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=False)"
      },
      {
        "sha": "f84b5d3ae31c8e39a7790802040d3bfad4aea321",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -81,7 +81,6 @@ def test_getpeerinfo(self):\n         # Create a few getpeerinfo last_block/last_transaction values.\n         self.wallet.send_self_transfer(from_node=self.nodes[0]) # Make a transaction so we can see it in the getpeerinfo results\n         self.generate(self.nodes[1], 1)\n-        self.sync_all()\n         time_now = int(time.time())\n         peer_info = [x.getpeerinfo() for x in self.nodes]\n         # Verify last_block and last_transaction keys/values."
      },
      {
        "sha": "9fdabe2f08805feb37a260b7cb5a9844a1c6a76b",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -162,7 +162,6 @@ def run_test(self):\n         signed_tx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])['hex']\n         txid = self.nodes[0].sendrawtransaction(signed_tx)\n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n \n         # Find the output pos\n         p2sh_pos = -1\n@@ -321,7 +320,6 @@ def run_test(self):\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n         txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n         blockhash = self.generate(self.nodes[0], 6)[0]\n-        self.sync_all()\n         vout1 = find_output(self.nodes[1], txid1, 13, blockhash=blockhash)\n         vout2 = find_output(self.nodes[2], txid2, 13, blockhash=blockhash)\n \n@@ -349,7 +347,6 @@ def run_test(self):\n         finalized = self.nodes[0].finalizepsbt(combined)['hex']\n         self.nodes[0].sendrawtransaction(finalized)\n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n \n         # Test additional args in walletcreatepsbt\n         # Make sure both pre-included and funded inputs\n@@ -544,7 +541,6 @@ def test_psbt_input_keys(psbt_input, keys):\n         txid4 = self.nodes[0].sendtoaddress(addr4, 5)\n         vout4 = find_output(self.nodes[0], txid4, 5)\n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n         psbt2 = self.nodes[1].createpsbt([{\"txid\":txid4, \"vout\":vout4}], {self.nodes[0].getnewaddress():Decimal('4.999')})\n         psbt2 = self.nodes[1].walletprocesspsbt(psbt2)['psbt']\n         psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n@@ -568,7 +564,6 @@ def test_psbt_input_keys(psbt_input, keys):\n         txid = self.nodes[0].sendtoaddress(addr, 7)\n         addrinfo = self.nodes[1].getaddressinfo(addr)\n         blockhash = self.generate(self.nodes[0], 6)[0]\n-        self.sync_all()\n         vout = find_output(self.nodes[0], txid, 7, blockhash=blockhash)\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n         analyzed = self.nodes[0].analyzepsbt(psbt)"
      },
      {
        "sha": "baaef8b878f8294cb3e7f45604b9e1a8d5ffad0b",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -75,14 +75,11 @@ def setup_network(self):\n     def run_test(self):\n         self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n         self.generate(self.nodes[2], 1)\n-        self.sync_all()\n         self.generate(self.nodes[0], COINBASE_MATURITY + 1)\n-        self.sync_all()\n         for amount in [1.5, 1.0, 5.0]:\n             self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\n         self.sync_all()\n         self.generate(self.nodes[0], 5)\n-        self.sync_all()\n \n         self.getrawtransaction_tests()\n         self.createrawtransaction_tests()\n@@ -369,7 +366,6 @@ def sendrawtransaction_testmempoolaccept_tests(self):\n \n         self.log.info(\"Test sendrawtransaction/testmempoolaccept with tx already in the chain\")\n         self.generate(self.nodes[2], 1)\n-        self.sync_blocks()\n         for node in self.nodes:\n             testres = node.testmempoolaccept([rawTxSigned['hex']])[0]\n             assert_equal(testres['allowed'], False)"
      },
      {
        "sha": "d07afeb838dda642ab98c7bc8183af84290fe51d",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -203,7 +203,6 @@ def witness_script_test(self):\n         self.generate(self.nodes[0], COINBASE_MATURITY + 1)\n         self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         # Get the UTXO info from scantxoutset\n         unspent_output = self.nodes[1].scantxoutset('start', [p2sh_p2wsh_address['descriptor']])['unspents'][0]\n         spk = script_to_p2sh_p2wsh_script(p2sh_p2wsh_address['redeemScript']).hex()"
      },
      {
        "sha": "efbced58b0d1c561de4aefc2fbdbd148461ddc4c",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -31,7 +31,6 @@ def run_test(self):\n         # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n         self.generate(miniwallet, 5)\n         self.generate(self.nodes[0], COINBASE_MATURITY)\n-        self.sync_all()\n \n         chain_height = self.nodes[1].getblockcount()\n         assert_equal(chain_height, 105)\n@@ -57,7 +56,6 @@ def run_test(self):\n         tx3 = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=txin_spent)\n         txid3 = tx3['txid']\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         txid_spent = txin_spent[\"txid\"]\n         txid_unspent = txid1  # Input was change from txid2, so txid1 should be unspent"
      },
      {
        "sha": "a4a0b4f6a02a59bd9a0fea67670c7a21119f24c7",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -30,7 +30,6 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         self.generate(self.nodes[1], COINBASE_MATURITY)\n-        self.sync_blocks()\n         balance = self.nodes[0].getbalance()\n         txA = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         txB = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))"
      },
      {
        "sha": "eb5e82414409415c8117839f88659e804391f984",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -222,7 +222,6 @@ def run_test(self):\n         # Mine 101 blocks on node5 to bring nodes out of IBD and make sure that\n         # no coinbases are maturing for the nodes-under-test during the test\n         self.generate(self.nodes[5], COINBASE_MATURITY + 1)\n-        self.sync_blocks()\n \n         uncompressed_1 = \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\"\n         uncompressed_2 = \"047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77\"\n@@ -307,7 +306,6 @@ def run_test(self):\n \n             # node5 collects fee and block subsidy to keep accounting simple\n             self.generate(self.nodes[5], 1)\n-            self.sync_blocks()\n \n             # Verify that the receiving wallet contains a UTXO with the expected address, and expected descriptor\n             for n, to_node in enumerate(range(from_node, from_node + 4)):\n@@ -337,7 +335,6 @@ def run_test(self):\n         # Fund node 4:\n         self.nodes[5].sendtoaddress(self.nodes[4].getnewaddress(), Decimal(\"1\"))\n         self.generate(self.nodes[5], 1)\n-        self.sync_blocks()\n         assert_equal(self.nodes[4].getbalance(), 1)\n \n         self.log.info(\"Nodes with addresstype=legacy never use a P2WPKH change output (unless changetype is set otherwise):\")"
      },
      {
        "sha": "15e69b6a5e1fc09b49c85c17b3c8c7f5d371b9d2",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -80,7 +80,6 @@ def run_test(self):\n         self.test_immutable()\n \n         self.generate(self.nodes[0], 110)\n-        self.sync_all()\n         self.test_change_remains_change(self.nodes[1])\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_sending_from_reused_address_without_avoid_reuse()\n@@ -175,7 +174,6 @@ def test_sending_from_reused_address_without_avoid_reuse(self):\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 10 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n@@ -186,7 +184,6 @@ def test_sending_from_reused_address_without_avoid_reuse(self):\n \n         self.nodes[1].sendtoaddress(retaddr, 5)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 5 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n@@ -195,7 +192,6 @@ def test_sending_from_reused_address_without_avoid_reuse(self):\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n         assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n@@ -229,7 +225,6 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 10 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n@@ -238,7 +233,6 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n \n         self.nodes[1].sendtoaddress(retaddr, 5)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 5 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n@@ -260,7 +254,6 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n \n             self.nodes[0].sendtoaddress(new_fundaddr, 10)\n             self.generate(self.nodes[0], 1)\n-            self.sync_all()\n \n             # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n             assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n@@ -303,7 +296,6 @@ def test_getbalances_used(self):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # send transaction that should not use all the available outputs\n         # per the current coin selection algorithm\n@@ -335,7 +327,6 @@ def test_full_destination_group_is_preferred(self):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # Sending a transaction that is smaller than each one of the\n         # available outputs\n@@ -364,7 +355,6 @@ def test_all_destination_groups_are_used(self):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # Sending a transaction that needs to use the full groups\n         # of 100 inputs but also the incomplete group of 2 inputs."
      },
      {
        "sha": "e3fb55344ad7f943f63c2dad44722b581802a695",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -89,7 +89,6 @@ def do_one_round(self):\n         # Must sync mempools before mining.\n         self.sync_mempools()\n         self.generate(self.nodes[3], 1)\n-        self.sync_blocks()\n \n     # As above, this mirrors the original bash test.\n     def start_three(self, args=()):\n@@ -131,13 +130,9 @@ def init_three(self):\n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n         self.generate(self.nodes[1], 1)\n-        self.sync_blocks()\n         self.generate(self.nodes[2], 1)\n-        self.sync_blocks()\n         self.generate(self.nodes[3], COINBASE_MATURITY)\n-        self.sync_blocks()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -166,7 +161,6 @@ def run_test(self):\n \n         # Generate 101 more blocks, so any fees paid mature\n         self.generate(self.nodes[3], COINBASE_MATURITY + 1)\n-        self.sync_all()\n \n         balance0 = self.nodes[0].getbalance()\n         balance1 = self.nodes[1].getbalance()"
      },
      {
        "sha": "a42c2632e38c5baaeec150032bae8850d22ed83f",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -71,10 +71,8 @@ def run_test(self):\n \n         self.log.info(\"Mining blocks ...\")\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         self.generate(self.nodes[1], 1)\n         self.generatetoaddress(self.nodes[1], COINBASE_MATURITY + 1, ADDRESS_WATCHONLY)\n-        self.sync_all()\n \n         if not self.options.descriptors:\n             # Tests legacy watchonly behavior which is not present (and does not need to be tested) in descriptor wallets\n@@ -197,7 +195,6 @@ def test_balances(*, fee_node_1=0):\n         test_balances(fee_node_1=Decimal('0.02'))\n \n         self.generatetoaddress(self.nodes[1], 1, ADDRESS_WATCHONLY)\n-        self.sync_all()\n \n         # balances are correct after the transactions are confirmed\n         balance_node0 = Decimal('69.99')  # node 1's send plus change from node 0's send\n@@ -211,7 +208,6 @@ def test_balances(*, fee_node_1=0):\n         txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), Decimal('29.97'), [Decimal('0.01')])\n         self.nodes[1].sendrawtransaction(txs[0]['hex'])\n         self.generatetoaddress(self.nodes[1], 2, ADDRESS_WATCHONLY)\n-        self.sync_all()\n \n         # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n         # TODO: fix getbalance tracking of coin spentness depth\n@@ -258,7 +254,6 @@ def test_balances(*, fee_node_1=0):\n \n         # Now confirm tx_replace\n         block_reorg = self.generatetoaddress(self.nodes[1], 1, ADDRESS_WATCHONLY)[0]\n-        self.sync_all()\n         assert_equal(self.nodes[0].getbalance(minconf=0), total_amount)\n \n         self.log.info('Put txs back into mempool of node 1 (not node 0)')\n@@ -274,7 +269,6 @@ def test_balances(*, fee_node_1=0):\n         self.sync_blocks()\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.generatetoaddress(self.nodes[1], 1, ADDRESS_WATCHONLY)\n-        self.sync_all()\n         assert_equal(self.nodes[0].getbalance(minconf=0), total_amount + 1)  # The reorg recovered our fee of 1 coin\n \n "
      },
      {
        "sha": "8145572f4b5abc7cb477b5120ac97cdf9ad64d0b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -342,7 +342,6 @@ def run_test(self):\n \n         self.sync_all()\n         self.generate(self.nodes[1], 1)  # mine a block\n-        self.sync_all()\n \n         unspent_txs = self.nodes[0].listunspent()  # zero value tx must be in listunspents output\n         found = False"
      },
      {
        "sha": "0476e126f31a296647bba93836aea5d54195195c",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -60,7 +60,6 @@ def skip_test_if_missing_module(self):\n     def clear_mempool(self):\n         # Clear mempool between subtests. The subtests may only depend on chainstate (utxos)\n         self.generate(self.nodes[1], 1)\n-        self.sync_all()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n@@ -73,12 +72,10 @@ def run_test(self):\n         # fund rbf node with 10 coins of 0.001 btc (100,000 satoshis)\n         self.log.info(\"Mining blocks...\")\n         self.generate(peer_node, 110)\n-        self.sync_all()\n         for _ in range(25):\n             peer_node.sendtoaddress(rbf_node_address, 0.001)\n         self.sync_all()\n         self.generate(peer_node, 1)\n-        self.sync_all()\n         assert_equal(rbf_node.getbalance(), Decimal(\"0.025\"))\n \n         self.log.info(\"Running tests\")\n@@ -434,7 +431,6 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     funding_address2 = watcher.getnewaddress(address_type='bech32')\n     peer_node.sendmany(\"\", {funding_address1: 0.001, funding_address2: 0.001})\n     self.generate(peer_node, 1)\n-    self.sync_all()\n \n     # Create single-input PSBT for transaction to be bumped\n     psbt = watcher.walletcreatefundedpsbt([], {dest_address: 0.0005}, 0, {\"fee_rate\": 1}, True)['psbt']"
      },
      {
        "sha": "09372da7b192187a60a78abbbb8b166f54a1a482",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -46,7 +46,6 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr, 0.5) for addr in addrs]\n \n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # For each node, send 0.2 coins back to 0;\n         # - node[1] should pick one 0.5 UTXO and leave the rest\n@@ -114,7 +113,6 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped']):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n@@ -126,7 +124,6 @@ def run_test(self):\n         addr_aps2 = self.nodes[3].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped']):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n@@ -140,7 +137,6 @@ def run_test(self):\n         addr_aps3 = self.nodes[4].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped']):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n@@ -163,7 +159,6 @@ def run_test(self):\n             signed_tx = self.nodes[0].signrawtransactionwithwallet(funded_tx['hex'])\n             self.nodes[0].sendrawtransaction(signed_tx['hex'])\n             self.generate(self.nodes[0], 1)\n-            self.sync_all()\n \n         # Check that we can create a transaction that only requires ~100 of our\n         # utxos, without pulling in all outputs and creating a transaction that"
      },
      {
        "sha": "56fbf6f4acacf6616e5e12843ce3e02d39182c41",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -229,7 +229,6 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(addr, 1)\n             origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n             self.generate(self.nodes[0], 1)\n-            self.sync_blocks()\n             origin_rpc.gettransaction(txid)\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n             out_of_kp_txid = txid\n@@ -240,7 +239,6 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(last_addr, 1)\n             origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n             self.generate(self.nodes[0], 1)\n-            self.sync_blocks()\n             origin_rpc.gettransaction(txid)\n             restore_rpc.gettransaction(txid)\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)"
      },
      {
        "sha": "b0f1585ede5caea6ce937993ac349cc136f59b4b",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -189,7 +189,6 @@ def run_test(self):\n             self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"] + TIMESTAMP_WINDOW + 1,\n         )\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # For each variation of wallet key import, invoke the import RPC and\n         # check the results from getbalance and listtransactions."
      },
      {
        "sha": "8c2a1f86e96b3c0945020f365aff26060a1a9aea",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -406,7 +406,6 @@ def run_test(self):\n                      ismine=True)\n         txid = w0.sendtoaddress(address, 49.99995540)\n         self.generatetoaddress(self.nodes[0], 6, w0.getnewaddress())\n-        self.sync_blocks()\n         tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n         signed_tx = wpriv.signrawtransactionwithwallet(tx)\n         w1.sendrawtransaction(signed_tx['hex'])\n@@ -452,12 +451,10 @@ def run_test(self):\n         assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 1000)\n         txid = w0.sendtoaddress(addr, 10)\n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n         send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n         decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n         assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n \n         self.nodes[1].createwallet(wallet_name=\"wmulti_pub\", disable_private_keys=True, blank=True, descriptors=True)\n         wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n@@ -495,7 +492,6 @@ def run_test(self):\n         vout2 = find_vout_for_address(self.nodes[0], txid2, addr2)\n \n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n         assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n \n         # Make sure that descriptor wallets containing multiple xpubs in a single descriptor load correctly\n@@ -583,7 +579,6 @@ def run_test(self):\n         addr = wmulti_priv_big.getnewaddress()\n         w0.sendtoaddress(addr, 10)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         # It is standard and would relay.\n         txid = wmulti_priv_big.sendtoaddress(w0.getnewaddress(), 9.999)\n         decoded = wmulti_priv_big.decoderawtransaction(wmulti_priv_big.gettransaction(txid)['hex'])\n@@ -618,7 +613,6 @@ def run_test(self):\n         addr = multi_priv_big.getnewaddress(\"\", \"legacy\")\n         w0.sendtoaddress(addr, 10)\n         self.generate(self.nodes[0], 6)\n-        self.sync_all()\n         # It is standard and would relay.\n         txid = multi_priv_big.sendtoaddress(w0.getnewaddress(), 10, \"\", \"\",\n                                             True)"
      },
      {
        "sha": "96003eb0d63164a184f29b2841eb9d5bd04f58d1",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -27,8 +27,6 @@ def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.generate(self.nodes[0], COINBASE_MATURITY + 1)\n \n-        self.sync_all()\n-\n         # address\n         address1 = self.nodes[0].getnewaddress()\n         # pubkey"
      },
      {
        "sha": "f392dd80fe904301b03081d37c93a84d57b5a0a8",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -66,7 +66,6 @@ def run_test(self):\n             self.generate(self.nodes[0], 1)\n             self.nodes[0].sendtoaddress(addr_extpool, 5)\n             self.generate(self.nodes[0], 1)\n-            self.sync_blocks()\n \n             self.log.info(\"Restart node with wallet backup\")\n             self.stop_node(idx)"
      },
      {
        "sha": "d6b1d603cef81bb9027d43f7f7d640f71ca0ad6a",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -25,7 +25,6 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         # save the number of coinbase reward addresses so far\n         num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n@@ -44,7 +43,6 @@ def run_test(self):\n                             True)\n         # Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.generate(self.nodes[1], 10)\n-        self.sync_all()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                             {\"address\": addr},\n                             {\"address\": addr, \"label\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n@@ -79,7 +77,6 @@ def run_test(self):\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n         # Same test as above should still pass\n         expected = {\"address\": addr, \"label\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 11, \"txids\": [txid, ]}\n         res = self.nodes[1].listreceivedbyaddress(0, True, True, addr)\n@@ -116,7 +113,6 @@ def run_test(self):\n \n         # Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n         self.generate(self.nodes[1], 10)\n-        self.sync_all()\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n         assert_equal(balance, Decimal(\"0.1\"))\n \n@@ -145,7 +141,6 @@ def run_test(self):\n         assert_equal(balance, balance_by_label)\n \n         self.generate(self.nodes[1], 10)\n-        self.sync_all()\n         # listreceivedbylabel should return updated received list\n         assert_array_result(self.nodes[1].listreceivedbylabel(),\n                             {\"label\": label},"
      },
      {
        "sha": "2ce48cfcc5e52b47c0a0295f4f6439453839a924",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -31,7 +31,6 @@ def run_test(self):\n         # only one connection. (See fPreferredDownload in net_processing)\n         self.connect_nodes(1, 2)\n         self.generate(self.nodes[2], COINBASE_MATURITY + 1)\n-        self.sync_all()\n \n         self.test_no_blockhash()\n         self.test_invalid_blockhash()\n@@ -187,7 +186,6 @@ def test_double_spend(self):\n         address = key_to_p2wpkh(eckey.get_pubkey().get_bytes())\n         self.nodes[2].sendtoaddress(address, 10)\n         self.generate(self.nodes[2], 6)\n-        self.sync_all()\n         self.nodes[2].importprivkey(privkey)\n         utxos = self.nodes[2].listunspent()\n         utxo = [u for u in utxos if u[\"address\"] == address][0]"
      },
      {
        "sha": "fd917e83bd585928e5469aaa139c6eb18d429eae",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -94,7 +94,6 @@ def run_test(self):\n             self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n             txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n             self.generate(self.nodes[1], 1)\n-            self.sync_all()\n             assert_equal(len(self.nodes[0].listtransactions(label=\"watchonly\", include_watchonly=True)), 1)\n             assert_equal(len(self.nodes[0].listtransactions(dummy=\"watchonly\", include_watchonly=True)), 1)\n             assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=False)) == 0"
      },
      {
        "sha": "7295db46536f1f6fd54b7647957c50e0f3f00bfb",
        "filename": "test/functional/wallet_orphanedreward.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_orphanedreward.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_orphanedreward.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_orphanedreward.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -26,20 +26,17 @@ def run_test(self):\n         # it later.\n         self.sync_blocks()\n         blk = self.generate(self.nodes[1], 1)[0]\n-        self.sync_blocks()\n \n         # Let the block reward mature and send coins including both\n         # the existing balance and the block reward.\n         self.generate(self.nodes[0], 150)\n-        self.sync_blocks()\n         assert_equal(self.nodes[1].getbalance(), 10 + 25)\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 30)\n \n         # Orphan the block reward and make sure that the original coins\n         # from the wallet can still be spent.\n         self.nodes[0].invalidateblock(blk)\n         self.generate(self.nodes[0], 152)\n-        self.sync_blocks()\n         # Without the following abandontransaction call, the coins are\n         # not considered available yet.\n         assert_equal(self.nodes[1].getbalances()[\"mine\"], {"
      },
      {
        "sha": "fbd870338cef1b30e0beb5518bc5641347fc8031",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -33,7 +33,6 @@ def run_test(self):\n         # Send a tx from which to conflict outputs later\n         txid_conflict_from = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         # Disconnect node1 from others to reorg its chain later\n         self.disconnect_nodes(0, 1)"
      },
      {
        "sha": "d14dcc04905051b8921dc5844b92a73aa38f652d",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -246,7 +246,6 @@ def run_test(self):\n \n         w0.sendtoaddress(a2_receive, 10) # fund w3\n         self.generate(self.nodes[0], 1)\n-        self.sync_blocks()\n \n         if not self.options.descriptors:\n             # w4 has private keys enabled, but only contains watch-only keys (from w2)\n@@ -265,7 +264,6 @@ def run_test(self):\n \n             w0.sendtoaddress(a2_receive, 10) # fund w4\n             self.generate(self.nodes[0], 1)\n-            self.sync_blocks()\n \n         self.log.info(\"Send to address...\")\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1)"
      },
      {
        "sha": "00aded5ac0e5ce311b40d3d30cd89ae4700f8804",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -112,7 +112,6 @@ def run_test(self):\n         self.log.info('Prepare mock PSBT')\n         self.nodes[0].sendtoaddress(address1, 1)\n         self.generate(self.nodes[0], 1)\n-        self.sync_all()\n \n         # Load private key into wallet to generate a signed PSBT for the mock\n         self.nodes[1].createwallet(wallet_name=\"mock\", disable_private_keys=False, blank=True, descriptors=True)"
      },
      {
        "sha": "855c635fd4855477e5b6b6d5aa785ea8eed276f8",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -129,7 +129,6 @@ def run_test(self):\n         self.nodes[2].sendrawtransaction(node0_tx2[\"hex\"])\n         self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n         self.generate(self.nodes[2], 1)  # Mine another block to make sure we sync\n-        self.sync_blocks()\n \n         # Re-fetch transaction info:\n         tx1 = self.nodes[0].gettransaction(txid1)"
      },
      {
        "sha": "f1af20bedda4a8f1b74efa6cbdb7cb037290a963",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff4ad89435317da85a17bca31c03a578eda8df/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=ffff4ad89435317da85a17bca31c03a578eda8df",
        "patch": "@@ -124,7 +124,6 @@ def run_test(self):\n         # Reconnect the split network, and sync chain:\n         self.connect_nodes(1, 2)\n         self.generate(self.nodes[2], 1)  # Mine another block to make sure we sync\n-        self.sync_blocks()\n         assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)\n \n         # Re-fetch transaction info:"
      }
    ]
  },
  {
    "sha": "fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
    "node_id": "C_kwDOABII59oAKGZhNzQ1NDMwZTBhNmJiNGQ0ODNhYTk0ODkwZDhiZjdmNzMwM2QwZWI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T11:34:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-18T11:17:20Z"
      },
      "message": "test: Use 4 spaces for indentation",
      "tree": {
        "sha": "bb1560f25d34bf6dd4c412bdde41f9296787251e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb1560f25d34bf6dd4c412bdde41f9296787251e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjaUQv+J5U8mwoPQyyW6imDM4tU0IsCNG6XcsTD5pW4YqEcnuBubckj57mmpAAe\nqG6NqmaYXHwqELH48OAkgUBMXGkQoVz0ZMxWSButuoI9qfxCi0VdcUvEyeeU42IK\nGEmR1gX6cexsVkjBahoBZZVAbq4kbEXGIKdTMK14HiVUPajhigxEPnfXEmwAYGbQ\nWBpeFXB3bvumJK/GPE93mt/lainhFtJGwREpTSRgXfESvKB7kIGVRFGnBD4e3QBS\nmrPgKofno+mW7h7Qsvem8ZJtfGIUQJFepZ3XiHsDrdV0wePcNqRByF5KzP4YP5WF\nBIHnk6pB251uvVXOBZyG+vmYCI1MkxXcU5xCyU02hyR/ZwLUa5saMiSAsMdC9VtQ\nhuKf7mdPKDjX8HdR8NNdaiyKzNMiN6Y0JfdxvtQndI+bgig4hXRngllj/a/SP6uu\niHTtwxcMZ1WAOVvDmb/Z35pzavHJqlziBm2HNyE6cbBJHAi4bkK8xEU8J3GluXmn\nAnIz3vt+\n=MuyJ\n-----END PGP SIGNATURE-----",
        "payload": "tree bb1560f25d34bf6dd4c412bdde41f9296787251e\nparent ffff4ad89435317da85a17bca31c03a578eda8df\nauthor MarcoFalke <falke.marco@gmail.com> 1627472097 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1634555840 +0200\n\ntest: Use 4 spaces for indentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffff4ad89435317da85a17bca31c03a578eda8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff4ad89435317da85a17bca31c03a578eda8df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffff4ad89435317da85a17bca31c03a578eda8df"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d5214380ef02e1e01407a47667eba106a27bde71",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
        "patch": "@@ -18,7 +18,7 @@ def perform_pre_checks():\n             sys.exit(int(mock_result[0]))\n \n def enumerate(args):\n-  sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\", \"type\": \"trezor\", \"model\": \"trezor_t\"}, {\"fingerprint\": \"00000002\"}]))\n+    sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\", \"type\": \"trezor\", \"model\": \"trezor_t\"}, {\"fingerprint\": \"00000002\"}]))\n \n def getdescriptors(args):\n     xpub = \"tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\"\n@@ -93,7 +93,7 @@ def signtx(args):\n if not sys.stdin.isatty():\n     buffer = sys.stdin.read()\n     if buffer and buffer.rstrip() != \"\":\n-       sys.argv.extend(buffer.rstrip().split(\" \"))\n+        sys.argv.extend(buffer.rstrip().split(\" \"))\n \n args = parser.parse_args()\n "
      },
      {
        "sha": "2eecd5d3c8713dc10477b6adf406ef328d715b65",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
        "patch": "@@ -53,7 +53,7 @@ def test_importdesc(self, req, success, error_code=None, error_message=None, war\n         result = wrpc.importdescriptors([req])\n         observed_warnings = []\n         if 'warnings' in result[0]:\n-           observed_warnings = result[0]['warnings']\n+            observed_warnings = result[0]['warnings']\n         assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n         assert_equal(result[0]['success'], success)\n         if error_code is not None:"
      }
    ]
  },
  {
    "sha": "fad9d451f1e17634e07a059ee8ef5093c72066e3",
    "node_id": "C_kwDOABII59oAKGZhZDlkNDUxZjFlMTc2MzRlMDdhMDU5ZWU4ZWY1MDkzYzcyMDY2ZTM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T11:39:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-18T11:18:30Z"
      },
      "message": "scripted-diff: Bump copyright headers\n\nThe previous diff touched most files in ./test/, so bump the headers to\navoid having to touch them again for a bump later.\n\n-BEGIN VERIFY SCRIPT-\n./contrib/devtools/copyright_header.py update ./test/\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "fa81e612e595df20ca50fa83468827c6bdbaaa7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa81e612e595df20ca50fa83468827c6bdbaaa7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad9d451f1e17634e07a059ee8ef5093c72066e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhNGwv/afjLmv0hRfVG2a46ci/nV+xkneaKiIV+kGkDDuSBHrBKQlcBCgxhnEuK\nn8RaD5pEQQIdmkmq3qekn5V5C/2O7a4uYXgjki0azDn2VJbue3zfIGE+Dwe8BMWy\nl2sK4oDFzi8RxPe3hm5YkqOoaGW/DtNPELQ+HLannto1PS6bTdICZ2IXSqUl/JJA\n/aSmP57Uh6loRCwUlbntp1MCVWqvZgPT9MzcSs5sDmJU2ci8T6tSd6JlYsXZOfPz\nhtpSEH35iBW9eLnuwCRNZNYB0dgBlCcP2jAbaHKpWD65ULCoGhDIRcVec+tDE+of\nGM+PmhxsLf0aPj02ff0sFL0ZVH7sYRsb3HUm/h7KqQKLRLtLWlODp3fVBtXLoRZA\nXERnkVEHbtCtOeVyg87SSk1rJG7xzViAOraiMRR7fbYSbXRu8k0Qt+aLL8PrAyHa\nAlvMGJ9p3O+Y6ocyG1GSeNSkbMx9J40vQMFIJdmCRdSBAtdjAYGgu0zQ3XaiOHUn\nsjT/iaXy\n=2yhF\n-----END PGP SIGNATURE-----",
        "payload": "tree fa81e612e595df20ca50fa83468827c6bdbaaa7d\nparent fa745430e0a6bb4d483aa94890d8bf7f7303d0eb\nauthor MarcoFalke <falke.marco@gmail.com> 1627472378 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1634555910 +0200\n\nscripted-diff: Bump copyright headers\n\nThe previous diff touched most files in ./test/, so bump the headers to\navoid having to touch them again for a bump later.\n\n-BEGIN VERIFY SCRIPT-\n./contrib/devtools/copyright_header.py update ./test/\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9d451f1e17634e07a059ee8ef5093c72066e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad9d451f1e17634e07a059ee8ef5093c72066e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9d451f1e17634e07a059ee8ef5093c72066e3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa745430e0a6bb4d483aa94890d8bf7f7303d0eb"
      }
    ],
    "stats": {
      "total": 338,
      "additions": 169,
      "deletions": 169
    },
    "files": [
      {
        "sha": "33d628296132da427211016f3105044fad5ebb2a",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "2ad96da8540c91ae8eab9d078213bb6e7bd2a4cf",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"An example functional test"
      },
      {
        "sha": "32cf4a47f488948680bf05b7120dd54dc26790fe",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoind aborts if can't disconnect a block."
      },
      {
        "sha": "01b6c5f9ebd4df2c6801f3149e60f7a20a870314",
        "filename": "test/functional/feature_anchors.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_anchors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_anchors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_anchors.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test block-relay-only anchors functionality\"\"\""
      },
      {
        "sha": "910ee20ac3b91a34816b970093932623e9401497",
        "filename": "test/functional/feature_asmap.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_asmap.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_asmap.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_asmap.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test asmap config argument for ASN-based IP bucketing."
      },
      {
        "sha": "ad921cc13f5233e8b97d403ba5ce15a5a8549684",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for skipping signature validation on old blocks."
      },
      {
        "sha": "476a6a0c14d0423f0550a6e1fd00d44f78dbcbcc",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Backwards compatibility functional test"
      },
      {
        "sha": "af26f94033dde006e9a156ef1f888990cc554757",
        "filename": "test/functional/feature_bind_extra.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_bind_extra.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_bind_extra.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bind_extra.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2021 The Bitcoin Core developers\n+# Copyright (c) 2014-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "a17638c28eadd5abca4d1af3c0f48552e8838741",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP68 implementation.\"\"\""
      },
      {
        "sha": "e93edc8b2babad7ccd2e7b9094d86c0883bebbc9",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test block processing.\"\"\""
      },
      {
        "sha": "39eb700b4fba0c84bc38878ad2a559354bdb6b76",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test blockfilterindex in conjunction with prune.\"\"\""
      },
      {
        "sha": "e8d2ec36761588f7658f837e59919acaaf3a52e5",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the blocksdir option."
      },
      {
        "sha": "1702debe170183fc3fd9eb5eef1e3dbf06147fed",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP65 (CHECKLOCKTIMEVERIFY)."
      },
      {
        "sha": "f8c94b462e22c22a3847c0582a4713a7d8b05aa9",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test coinstatsindex across nodes."
      },
      {
        "sha": "eea5fa24eeaad8b9e99053b191d7c62df1e673d8",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\""
      },
      {
        "sha": "8aada089bd48622bd83e06dfbc02dde669010675",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test CSV soft fork activation."
      },
      {
        "sha": "3e60efbb3ca599fad9053bb9002d1a0250346207",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test recovery from a crash during chainstate writing."
      },
      {
        "sha": "fbdb66bf9e20da8db03fc2343b96065acd442fa3",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP66 (DER SIG)."
      },
      {
        "sha": "9a50346403e3a409c547c26127baa0402c269dbc",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\""
      },
      {
        "sha": "857308b480e98eca4d7df8c0aa4f2551a5b0065b",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Check that it's not possible to start a second bitcoind instance using the same datadir or wallet.\"\"\""
      },
      {
        "sha": "4b66030b47b8a6c918448759e86ed3521604cb1d",
        "filename": "test/functional/feature_help.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_help.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Verify that starting bitcoin with -h works as expected.\"\"\""
      },
      {
        "sha": "818e4c923bb0df4927c03ab112ad211cf44559b6",
        "filename": "test/functional/feature_includeconf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_includeconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_includeconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_includeconf.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests the includeconf argument"
      },
      {
        "sha": "7f030c67739450f9c6986fd8d0766ff12c688ab8",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test loadblock option"
      },
      {
        "sha": "fe4f02dfe62dcf00520379c7cd895dd4067cc2f5",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test debug logging.\"\"\""
      },
      {
        "sha": "b4e0df8a113b8defcf19a02cb84fb257721d049f",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test behavior of -maxuploadtarget."
      },
      {
        "sha": "489a729cfc70b20753d8c2250eb985f0c2d895d0",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for setting nMinimumChainWork on command line."
      },
      {
        "sha": "e038afa1adedb38b30a1de0bcd312c0ba420f16e",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\""
      },
      {
        "sha": "951cf38ecb6878f3d3887269666dfc552cc76700",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test NULLDUMMY softfork."
      },
      {
        "sha": "3d762c8197765a4f520f0bf19d354f5ae392d299",
        "filename": "test/functional/feature_presegwit_node_upgrade.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_presegwit_node_upgrade.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_presegwit_node_upgrade.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_presegwit_node_upgrade.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test a pre-segwit node upgrading to segwit consensus\"\"\""
      },
      {
        "sha": "0f9d0afba63d854a706f6482afcf65627286a43d",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoind with different proxy configuration."
      },
      {
        "sha": "0edf1d66c85c0500c0c908e66c0e34b980c4464a",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the pruning code."
      },
      {
        "sha": "b5711375c3269c39c60ec31f76d2ebe50a710a6b",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RBF code.\"\"\""
      },
      {
        "sha": "44040f426fbd0afc88c38613c4bcf6db063b982d",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test running bitcoind with -reindex and -reindex-chainstate options."
      },
      {
        "sha": "1cd802ed449b37eeccef87280fc849fa4066ec32",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the SegWit changeover logic.\"\"\""
      },
      {
        "sha": "20018f010f538d4f4ca0f224748e2c8e8db913f1",
        "filename": "test/functional/feature_settings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_settings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_settings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_settings.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\""
      },
      {
        "sha": "6578caee3f56d46530efdaa925ee2301910f6f9d",
        "filename": "test/functional/feature_signet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_signet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_signet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_signet.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test basic signet functionality\"\"\""
      },
      {
        "sha": "9e6639f838531600e42e2323e3b2ac16cd5cbfcd",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n # Test Taproot softfork (BIPs 340-342)"
      },
      {
        "sha": "fb4fa61a1c99fd5ede37c6ed7b40d0c2f9f23868",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test version bits warning system."
      },
      {
        "sha": "6c9563a1bec746bafcc7618b5419acf9cbd49254",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoin-cli\"\"\""
      },
      {
        "sha": "6e32009e0516a6277c4c7640a1b285a25bb82998",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RPC HTTP basics.\"\"\""
      },
      {
        "sha": "f1abd212dcd6045e0609e97cf7a161a06dd6cdba",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\""
      },
      {
        "sha": "48082f3a17b83925bb418e710065cef12e54c682",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests some generic aspects of the RPC interface.\"\"\""
      },
      {
        "sha": "395fde18fd5c82ade0c4c6487bc9eee117fd0f26",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the ZMQ notification interface.\"\"\""
      },
      {
        "sha": "232057db0ba4cbb5902dc1a70541b22c96d6d0ef",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool acceptance of raw transactions.\"\"\""
      },
      {
        "sha": "a552aed9918f93027565ae272c9490dff30d15a1",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that mempool.dat is both backward and forward compatible between versions"
      },
      {
        "sha": "f301b29c254d752b048f97df4b39dd997973b2fb",
        "filename": "test/functional/mempool_expiry.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_expiry.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_expiry.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_expiry.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests that a mempool transaction expires after a given timeout and that its"
      },
      {
        "sha": "c7c117272a92ca16b510fdd6e36ed7fc7d52c5a0",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\""
      },
      {
        "sha": "a6fb1dcf35ffec5d6e9eee51490126767ed0aac8",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descendant package tracking carve-out allowing one final transaction in"
      },
      {
        "sha": "f530187a1b33ff13efa3436173b01551e502d0e2",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descendant package tracking code.\"\"\""
      },
      {
        "sha": "952e0c36a125f58e637f44be0664c909a8ba8bbe",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool persistence."
      },
      {
        "sha": "7e940fa3cacf526c973f0dc0b4567e9f9e4349f2",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool re-org scenarios."
      },
      {
        "sha": "3e610d02acdc72cd02be179414211832614220e0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\""
      },
      {
        "sha": "5afa6be925b30cad82d2ec969fce40a8a7ede4a6",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test spending coinbase transactions."
      },
      {
        "sha": "adf7326dac013bb4999bcb237fbcf000da431392",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the mempool ensures transaction delivery by periodically sending"
      },
      {
        "sha": "16c15e3f7498273581508210bbb29661f9f040fb",
        "filename": "test/functional/mempool_updatefromblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_updatefromblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mempool_updatefromblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_updatefromblock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool descendants/ancestors information update."
      },
      {
        "sha": "f8d002e6649188c6a958fe8a3986d235c7807365",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mining RPCs"
      },
      {
        "sha": "e928ee4936a2b995321f28ec8c20a7677d87a5ce",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test longpolling with getblocktemplate.\"\"\""
      },
      {
        "sha": "21df18de5c43f6606a76cf32cbea45333f9b186d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the prioritisetransaction mining RPC.\"\"\""
      },
      {
        "sha": "b732b26a53d0798e291dbb7cd4f18e93f9434a9d",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6334a3517529bfcd0f1250d39b2f2eef32120000",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "b183a25a1e8b706dd46b5f97b8f208fa91239b69",
        "filename": "test/functional/p2p_addrv2_relay.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_addrv2_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_addrv2_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addrv2_relay.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "743b9a9dd2df443cbc01cd7f2ca9bb6113f5aa1b",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158)."
      },
      {
        "sha": "6e48341259468854647a2f991aa30ffb5e5cb4c8",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\""
      },
      {
        "sha": "a314e8edfde4c8274e683eb4ff81cde6e1470c57",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test compact blocks (BIP 152)."
      },
      {
        "sha": "fde1e4bfa27a33dd63f21e19a386b3a283051553",
        "filename": "test/functional/p2p_dos_header_tree.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_dos_header_tree.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_dos_header_tree.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_dos_header_tree.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that we reject low difficulty headers to prevent our block tree from filling up with useless bloat\"\"\""
      },
      {
        "sha": "1f4797a89d5ef1b905a18871fb534f17ad964ff1",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b65e927d5b819a5513cbafebe9634a53e72cd119",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of feefilter messages.\"\"\""
      },
      {
        "sha": "2192363a89c80e86c6d3ac93093de9101c0b21fd",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "e8bba8555fcf33340ea7781f3ec8d708de1cce59",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various fingerprinting protections."
      },
      {
        "sha": "9044ed5cdbccc42da974b15fd78489ac474ac748",
        "filename": "test/functional/p2p_ibd_txrelay.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_ibd_txrelay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_ibd_txrelay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_ibd_txrelay.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee filters during and after IBD.\"\"\""
      },
      {
        "sha": "5ccd5a1602816640df7a983c019d53ac3d6e6066",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid blocks."
      },
      {
        "sha": "626422370a807f4761e499454a9e71343346cd56",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid locators."
      },
      {
        "sha": "2c21fc88a2854d78157e4f6da614c51c79ca40d5",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid network messages.\"\"\""
      },
      {
        "sha": "139f4d64e7dd02019ea49de4bf5130aaac64e7e4",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions."
      },
      {
        "sha": "af8e45d578353c70668513f70a81c813487c18e5",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test message sending before handshake completion."
      },
      {
        "sha": "4c064b359e0a2ca97ce0e0e55759a9f0ea7c1124",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\""
      },
      {
        "sha": "edde9a6ecf53483fe31a85ffec350c48e2df47e0",
        "filename": "test/functional/p2p_message_capture.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_message_capture.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_message_capture.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_message_capture.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test per-peer message capture capability."
      },
      {
        "sha": "9e85956f7280af990db741b5bec13b08e0e37a17",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests NODE_NETWORK_LIMITED."
      },
      {
        "sha": "1dc3a5b9a0128d8f75bd8c33ad4ce65b3a59399b",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test p2p permission message."
      },
      {
        "sha": "34b318f290bcf3e34f63469f9be1a6212868f616",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\""
      },
      {
        "sha": "344b856e194793d445921923ee282794f690b271",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test behavior of headers messages to announce blocks."
      },
      {
        "sha": "7356b8bbb37e20aec3b2229fb32b18a44d7bcabd",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "3b02a1c61f43ca448802c2bf84bd72c81ae23500",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks."
      },
      {
        "sha": "88d52a614542b95cc41cbc6faf05d8722b55422b",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPCs related to blockchainstate."
      },
      {
        "sha": "f56e71ae7a7d924afe2569d6386f2820dc77d5df",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multisig RPCs\"\"\""
      },
      {
        "sha": "58432c3dae99c83a933310f9b01e1eca5c10b8d4",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test decoding scripts via decodescript RPC command.\"\"\""
      },
      {
        "sha": "15c77ed856980746d9317bee728b7dfecbcd9567",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\""
      },
      {
        "sha": "f54f6008399ae7a71146e744b123ee85c879f4ee",
        "filename": "test/functional/rpc_dumptxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_dumptxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_dumptxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_dumptxoutset.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the generation of UTXO snapshots using `dumptxoutset`."
      },
      {
        "sha": "8f1b54fc73b1abbfea1164e1eb1b00905fc94c91",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\""
      },
      {
        "sha": "4dc5c63ff360dfff4f75457c1da00f683e080e15",
        "filename": "test/functional/rpc_generateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_generateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_generateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generateblock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''Test generateblock rpc."
      },
      {
        "sha": "b09af9e078107a134f2d8500ed8f83634c7b57fb",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the getblockfilter RPC.\"\"\""
      },
      {
        "sha": "8c08d2ced58dbf9db7fcfe19bd0d897ff550a6b3",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7efa306c8c65339ea16650c23bcfb571de2a428a",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the getchaintips RPC."
      },
      {
        "sha": "ccb380e25ba7c6bab7c5d30625fc84645f284feb",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\""
      },
      {
        "sha": "8bfe7bdb69ddc97ae8561d3a6741bdd16cc59167",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test error messages for 'getaddressinfo' and 'validateaddress' RPC commands.\"\"\""
      },
      {
        "sha": "f1c2537ef9d14152fa0fd551320f7f3c4ec0ba4b",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the invalidateblock RPC.\"\"\""
      },
      {
        "sha": "b3abd9d2362206db452d609828d0ecd8d94a4889",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC misc output.\"\"\""
      },
      {
        "sha": "bd2d136e1ca3ba4eb4bf16a80872e5c39f4c9fa7",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC calls related to net."
      },
      {
        "sha": "91298937fdd121e86e634b01081df74288bea8b7",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the preciousblock RPC.\"\"\""
      },
      {
        "sha": "f33ab9b1a82883f73a0837d641d3e93ab5c3dfd0",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the Partially Signed Transaction RPCs."
      },
      {
        "sha": "69036871f42b943d7da2e37a37eab8f3b6bb34f2",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the rawtransaction RPCs."
      },
      {
        "sha": "8703bfab8ec2bc243633e7b7c02ddac22927bc54",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the scantxoutset rpc call.\"\"\""
      },
      {
        "sha": "97354f480c2eb3fd4eb56b9715cdc61825f7076f",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the setban rpc call.\"\"\""
      },
      {
        "sha": "f1107197c53a47921689566899bd8a8428ce8309",
        "filename": "test/functional/rpc_signer.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signer.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test external signer."
      },
      {
        "sha": "27aee44d256ccd5993baf7b51be1ee7311da588a",
        "filename": "test/functional/rpc_signmessagewithprivkey.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_signmessagewithprivkey.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_signmessagewithprivkey.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessagewithprivkey.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC commands for signing messages with private key.\"\"\""
      },
      {
        "sha": "e648040278753b44f5416b36d95c141138e37968",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\""
      },
      {
        "sha": "4e4d1a65fa2b5725d8ca9ef27d90f91a9c6581bb",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\""
      },
      {
        "sha": "1a82d1fa41c592e13bfab06c6d0e37e987255199",
        "filename": "test/functional/rpc_uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/rpc_uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_uptime.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RPC call related to the uptime command."
      },
      {
        "sha": "6ade80f9e2f207ebd7bd94c6e4c8aea696df03e4",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Encode and decode Bitcoin addresses."
      },
      {
        "sha": "41886c09fd4022181ad2d526fdbcd700ab9353f2",
        "filename": "test/functional/test_framework/bdb.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/bdb.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/bdb.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/bdb.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\""
      },
      {
        "sha": "f14571913495fa0dfae8b357c6c2aceef05a0262",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\""
      },
      {
        "sha": "4fb4f8bb821273530664ca93e013e6a87976121c",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for doing coverage analysis on the RPC interface."
      },
      {
        "sha": "71ac5c5bfdd0ddbdf59902b9c3797fcf758ae755",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env python3\n # Copyright (c) 2010 ArtForz -- public domain half-a-node\n # Copyright (c) 2012 Jeff Garzik\n-# Copyright (c) 2010-2020 The Bitcoin Core developers\n+# Copyright (c) 2010-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Bitcoin test framework primitive and message structures"
      },
      {
        "sha": "174dc44a2a2f7e7ae337fc4ccf93cdceed673709",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Linux network utilities."
      },
      {
        "sha": "c99868de7230f9f8ba8e35b5eac0d5def7b83524",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env python3\n # Copyright (c) 2010 ArtForz -- public domain half-a-node\n # Copyright (c) 2012 Jeff Garzik\n-# Copyright (c) 2010-2020 The Bitcoin Core developers\n+# Copyright (c) 2010-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test objects for interacting with a bitcoind node over the p2p protocol."
      },
      {
        "sha": "a31ba8d1af7c0a5df31169da62f6d1285ce1eb81",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Functionality to build scripts, as well as signature hash functions."
      },
      {
        "sha": "73c2ab729d0c4f21ec1f0e1b8d1a15919a0b7117",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Useful Script constants and utils.\"\"\""
      },
      {
        "sha": "08ec6d1703189383dbee0ed4576f9c30bfff6e26",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\""
      },
      {
        "sha": "269f2442a9f18ae569b167b98ea1b20ab8322378",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\""
      },
      {
        "sha": "734076098a236b2fdcd656b14359dbab25957d6a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Helpful routines for regression testing.\"\"\""
      },
      {
        "sha": "041e9f0c232720a1e785a6291b3371da4e4979e7",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"A limited-functionality wallet, which may replace a real wallet in tests\"\"\""
      },
      {
        "sha": "4afa75ad669e6eadec0360fac3fad0f71b967d2b",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Useful util functions for testing the wallet\"\"\""
      },
      {
        "sha": "ee8674246f84d2c40b01cc2a09fc47ba4c181e9c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Run regression test suite."
      },
      {
        "sha": "88c767b7eba857fb6a220be1bf3203b0de893f63",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoin-wallet.\"\"\""
      },
      {
        "sha": "1b3162351178528de9067397f0ba9d20ce659a7b",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the abandontransaction RPC."
      },
      {
        "sha": "43d2e1c1cccf318fcc113f4d100b3047b0dbadbe",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the wallet can send and receive using all combinations of address types."
      },
      {
        "sha": "dc823c2c60206a158e8b541f571b3e0912c02f82",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the avoid_reuse and setwalletflag features.\"\"\""
      },
      {
        "sha": "563db06332180bf4a930d73a8d301ed3137d89e8",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet backup features."
      },
      {
        "sha": "0cfbefb719b13ddc838e4950f767df9421fd81d4",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet balance RPC methods.\"\"\""
      },
      {
        "sha": "bfbbc9d169a89f822b900ddd4a8a18cc6b7222ce",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet.\"\"\""
      },
      {
        "sha": "5dcbf8ebd2ae4d61ca1008c10d55c47d4e720d92",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the bumpfee RPC."
      },
      {
        "sha": "5a6b6cee592bb7d2016c08b08430bc482e5253ee",
        "filename": "test/functional/wallet_coinbase_category.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_coinbase_category.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_coinbase_category.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_coinbase_category.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test coinbase transactions return the correct categories."
      },
      {
        "sha": "61d57d5f2e4bf98a888113526b6d256e506edab0",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a751138d890fba2c192072b044397712bf7f37ff",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test createwallet arguments."
      },
      {
        "sha": "df2fdb294351a227240b4e51f0be779865370cf3",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descriptor wallet function.\"\"\""
      },
      {
        "sha": "2c7996ca6b92aa1fd2df4ef7ce41f8457cc065db",
        "filename": "test/functional/wallet_disable.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_disable.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_disable.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disable.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test a node with the -disablewallet option."
      },
      {
        "sha": "9f0d66627080ff39790760652f1c8acb6ed53530",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the dumpwallet RPC.\"\"\""
      },
      {
        "sha": "acd92097ff8ef46377493a863d33a143116f62ed",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet replace-by-fee capabilities in conjunction with the fallbackfee.\"\"\""
      },
      {
        "sha": "c228bb122ab3983b6f001388c6ce70aa233567e9",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet group functionality.\"\"\""
      },
      {
        "sha": "e5d60a9c8fcd543eb829ccb96e8f6d6762d95074",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test Hierarchical Deterministic wallet function.\"\"\""
      },
      {
        "sha": "ab0db742e85e618f6b6288e9ae0656be43d94a8a",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet import RPCs."
      },
      {
        "sha": "2f83e5685ddd98e35a435bd0a08d914182b6249c",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importdescriptors RPC."
      },
      {
        "sha": "436711669e5ccf686cdbb38684242c577cad09e9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importmulti RPC."
      },
      {
        "sha": "cdb5823109e2787593209520da0f0e0303db9e22",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importprunedfunds and removeprunedfunds RPCs.\"\"\""
      },
      {
        "sha": "25945277dfab8f7571c1e42a087c8373f3393ec9",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\""
      },
      {
        "sha": "4c965b71603000e7817850256c47f2185612b3e9",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test HD Wallet keypool restore function."
      },
      {
        "sha": "c29b02e661ce460917e32aca960183619f6eba67",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test label RPCs."
      },
      {
        "sha": "42a2685a0fa888d927c4cb835d564d513034543d",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\""
      },
      {
        "sha": "b55622a63fd69330a19e30fe18f240ee01d9dd11",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listsinceblock RPC.\"\"\""
      },
      {
        "sha": "52c30bd85587f9a0dc5df1b917c0295426f5573c",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listtransactions API.\"\"\""
      },
      {
        "sha": "83f6a152e129afc8b16d46888215989922387868",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multiwallet."
      },
      {
        "sha": "f2bdb114b74bba8fd4878433934c5eb5fb055dcf",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "afdeb06d4e83cfcab7c2b651cc7ba192d7668914",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the wallet resends transactions periodically.\"\"\""
      },
      {
        "sha": "6153c25a7617e79d7ed30d1859e37036f2e1f39e",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the send RPC command.\"\"\""
      },
      {
        "sha": "6dadc57b1ad8a4a89eda30697d6a466e0d0a71e8",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test external signer."
      },
      {
        "sha": "5bdde13aa47908f85993355da15be0547d38efe9",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\""
      },
      {
        "sha": "206187fb61f0ea903ff45dd4cb74fa130731da0e",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2020 The Bitcoin Core developers\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there is a double-spend conflict.\"\"\""
      },
      {
        "sha": "36e72f2dd92dbd50b64779ed9858f6e50224c29c",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"upgradewallet RPC functional test"
      },
      {
        "sha": "69c32ba54ce0827e9a617fd63313959611993a41",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test createwallet watchonly arguments."
      },
      {
        "sha": "e2eab2a0fecaa9ebaa5869a4a6156129cbe3fc15",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Run fuzz test targets."
      },
      {
        "sha": "177aa74191a90141b4efd32da693379fc41121e6",
        "filename": "test/get_previous_releases.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/get_previous_releases.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/get_previous_releases.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/get_previous_releases.py?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python3\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "f7590ddc0368884b406a9364a44fe84e9ce91fe4",
        "filename": "test/lint/commit-script-check.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/commit-script-check.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/commit-script-check.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/commit-script-check.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/bin/sh\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d9e5a702e495b7f57c3d2bf501484878a905025c",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "ab3866d23e4ae7ddf4befe078167c68b1ad2301f",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "a013752dbb7557eb1561cca9e42df29f537ee10b",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "3b88fa4da982e4668ad613f894e4ef0f5cf9e12a",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6b5e962611ab42f4c27a20ac7ba1f9c43324606d",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "e73c7d11d9fd312c6cbdc006876971661c3eac01",
        "filename": "test/lint/lint-spelling.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "2d84cf1bf3f416591d89370944dfb3e63492e379",
        "filename": "test/lint/lint-whitespace.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9d451f1e17634e07a059ee8ef5093c72066e3/test/lint/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-whitespace.sh?ref=fad9d451f1e17634e07a059ee8ef5093c72066e3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      }
    ]
  }
]