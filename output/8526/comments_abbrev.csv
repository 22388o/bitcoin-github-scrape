dcousens,2016-08-16T21:09:16Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-240239749,240239749,
luke-jr,2016-08-27T21:23:33Z,Prefer to just have an OP_CASTTOBOOL added. This breaks conditionals on OP_DEPTH and OP_SIZE for example.\n,https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-242941637,242941637,
jl2012,2016-08-28T05:11:57Z,"OP_CASTTOBOOL can't solve the problem. CastToBool in OP_IF is exactly the source of malleability. We needs to turn a OP_NOP into OP_ISBOOLVERIFY.\n\nIn any case, that requires a softfork which can't be done any time soon. What we need now is a quick policy patch. An alternative is to make `SIZE IF` and `DEPTH IF` excluded from this policy\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-242956735,242956735,
NicolasDorier,2016-08-28T07:24:56Z,"we did segwit so that we don't have to care about malleability in inputs, but now we care about malleability inside witness inputs? o_O\n\nI would prefer to not touch that as DEPTH IF and SIZE IF are still useful. I'm not fan making special case either.\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-242960688,242960688,
btcdrak,2016-08-28T08:23:17Z,Relevant discussion https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013014.html\n,https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-242962765,242962765,
NicolasDorier,2016-08-28T11:48:52Z,"ok read the conversation,  I like the proposition of @jl2012 of making it a relay rule for now and deciding whether to make it a SF later. Concept ACK.\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-242970539,242970539,
luke-jr,2016-08-28T13:24:04Z,"No objection to a policy rule, just wanted to point that out here so it didn't get lost. :)\n\n(OP_ISBOOLVERIFY could be policy-enforced just as well though...?)\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-242974681,242974681,
instagibbs,2016-08-29T17:28:30Z,concept ACK as relay rule only\n,https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-243193099,243193099,
jl2012,2016-09-01T11:41:39Z,"@luke-jr , a ""policy opcode"" means we could never use that NOP for other purpose again, even if we abandon the softfork plan.\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-244053890,244053890,
luke-jr,2016-09-01T18:34:16Z,"@jl2012 Not really. It simply means we'd need to wait a few releases from when it's policy-redefined to a straight-disallowed NOP, before it is safe to reuse. Along those lines, I wonder if it would make sense to redefine other unallocated opcodes as NOPs inside segwit now (although I doubt it will be useful in the long run).\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-244170494,244170494,
jl2012,2016-09-01T18:40:32Z,"@luke-jr you can't redefine policy opcode because people are likely to have utxos with that.\n\nand it won't make sense to create more NOPs. The use of NOPs is really limited as they can't manipulate the stack at all. For example, my most wanted code, OP_CAT, could not be done with and NOP\n",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-244172306,244172306,
josephpoon,2016-09-01T23:59:08Z,"Concept ACK. OK with either policy rule or consensus rule, finalized LN bitcoin scripts will be compatible.\n\nTo echo jl2012 's comment about having UTXOs, policy rules to an eventual SF is complicated because doing something as simple as `OP_DUP \nOP_IF OP_SHA256 <PUSHDATA> OP_EQUAL`\ncan invalidate scripts (you're computing on the same data in two places, one of which would be constrained in th",https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-244247547,244247547,
btcdrak,2016-09-27T14:14:45Z,utACK c72c5b1\n,https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-249877578,249877578,
laanwj,2016-09-27T15:10:06Z,Code-review ACK c72c5b1\n,https://github.com/bitcoin/bitcoin/pull/8526#issuecomment-249893999,249893999,
sipa,2016-08-16T16:27:05Z,Mention that it only applies to witness scripts.\n,https://github.com/bitcoin/bitcoin/pull/8526#discussion_r74969631,74969631,src/script/interpreter.h
sipa,2016-08-16T16:35:02Z,I don't think we need to include any cases whose behaviour is not changed by minimalif.\n,https://github.com/bitcoin/bitcoin/pull/8526#discussion_r74971102,74971102,src/test/data/script_tests.json
jl2012,2016-08-16T17:56:16Z,I'm not sure what should(not) be tested. I want to show that the new rules are not applied to non segwit scripts by accident\n,https://github.com/bitcoin/bitcoin/pull/8526#discussion_r74986289,74986289,src/test/data/script_tests.json
jl2012,2016-08-16T17:56:54Z,will fix in a squash commit later\n,https://github.com/bitcoin/bitcoin/pull/8526#discussion_r74986432,74986432,src/script/interpreter.h
instagibbs,2016-09-22T20:03:19Z,nit: put some () around the flag check for ease of reading\n,https://github.com/bitcoin/bitcoin/pull/8526#discussion_r80124314,80124314,src/script/interpreter.cpp
jl2012,2016-09-23T05:08:45Z,addressed with c72c5b1\n,https://github.com/bitcoin/bitcoin/pull/8526#discussion_r80182523,80182523,src/script/interpreter.cpp
