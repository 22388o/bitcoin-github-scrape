[
  {
    "sha": "a084ebe1330bcec15715e08b0f65319142927ad1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDg0ZWJlMTMzMGJjZWMxNTcxNWUwOGIwZjY1MzE5MTQyOTI3YWQx",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-30T21:40:39Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-01T00:32:25Z"
      },
      "message": "test: introduce `get_weight()` helper for CTransaction",
      "tree": {
        "sha": "6d5e8b0add4924c36d47ad1736a43f159d2683b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d5e8b0add4924c36d47ad1736a43f159d2683b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a084ebe1330bcec15715e08b0f65319142927ad1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a084ebe1330bcec15715e08b0f65319142927ad1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a084ebe1330bcec15715e08b0f65319142927ad1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a084ebe1330bcec15715e08b0f65319142927ad1/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fc20abab03d71a982d6fe9c47155834b256ab17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc20abab03d71a982d6fe9c47155834b256ab17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc20abab03d71a982d6fe9c47155834b256ab17"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "92cc260f48b0b6d174a42f3d8d9e40e327cec1e5",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a084ebe1330bcec15715e08b0f65319142927ad1/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a084ebe1330bcec15715e08b0f65319142927ad1/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=a084ebe1330bcec15715e08b0f65319142927ad1",
        "patch": "@@ -260,8 +260,8 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getmempoolentry(txid1)[\"wtxid\"], 16), tx1.calc_sha256(True))\n \n         # Check that weight and vsize are properly reported in mempool entry (txid1)\n-        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"vsize\"], (self.nodes[0].getmempoolentry(txid1)[\"weight\"] + 3) // 4)\n-        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"weight\"], len(tx1.serialize_without_witness())*3 + len(tx1.serialize_with_witness()))\n+        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"vsize\"], tx1.get_vsize())\n+        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"weight\"], tx1.get_weight())\n \n         # Now create tx2, which will spend from txid1.\n         tx = CTransaction()\n@@ -276,8 +276,8 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getmempoolentry(txid2)[\"wtxid\"], 16), tx.calc_sha256(True))\n \n         # Check that weight and vsize are properly reported in mempool entry (txid2)\n-        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"vsize\"], (self.nodes[0].getmempoolentry(txid2)[\"weight\"] + 3) // 4)\n-        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"weight\"], len(tx.serialize_without_witness())*3 + len(tx.serialize_with_witness()))\n+        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"vsize\"], tx.get_vsize())\n+        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"weight\"], tx.get_weight())\n \n         # Now create tx3, which will spend from txid2\n         tx = CTransaction()\n@@ -299,8 +299,8 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getmempoolentry(txid3)[\"wtxid\"], 16), tx.calc_sha256(True))\n \n         # Check that weight and vsize are properly reported in mempool entry (txid3)\n-        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"vsize\"], (self.nodes[0].getmempoolentry(txid3)[\"weight\"] + 3) // 4)\n-        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"weight\"], len(tx.serialize_without_witness())*3 + len(tx.serialize_with_witness()))\n+        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"vsize\"], tx.get_vsize())\n+        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"weight\"], tx.get_weight())\n \n         # Mine a block to clear the gbt cache again.\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "f34908e134d3bf42b29ec7bb91071c07fd1b9b77",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a084ebe1330bcec15715e08b0f65319142927ad1/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a084ebe1330bcec15715e08b0f65319142927ad1/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=a084ebe1330bcec15715e08b0f65319142927ad1",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n from decimal import Decimal\n-import math\n import random\n import struct\n import time\n@@ -1367,10 +1366,9 @@ def test_tx_relay_after_segwit_activation(self):\n         raw_tx = self.nodes[0].getrawtransaction(tx3.hash, 1)\n         assert_equal(int(raw_tx[\"hash\"], 16), tx3.calc_sha256(True))\n         assert_equal(raw_tx[\"size\"], len(tx3.serialize_with_witness()))\n-        weight = len(tx3.serialize_with_witness()) + 3 * len(tx3.serialize_without_witness())\n-        vsize = math.ceil(weight / 4)\n+        vsize = tx3.get_vsize()\n         assert_equal(raw_tx[\"vsize\"], vsize)\n-        assert_equal(raw_tx[\"weight\"], weight)\n+        assert_equal(raw_tx[\"weight\"], tx3.get_weight())\n         assert_equal(len(raw_tx[\"vin\"][0][\"txinwitness\"]), 1)\n         assert_equal(raw_tx[\"vin\"][0][\"txinwitness\"][0], witness_program.hex())\n         assert vsize != raw_tx[\"size\"]"
      },
      {
        "sha": "8d0bd9f69afc6584bfd01eaceb20eb60d4972e85",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a084ebe1330bcec15715e08b0f65319142927ad1/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a084ebe1330bcec15715e08b0f65319142927ad1/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=a084ebe1330bcec15715e08b0f65319142927ad1",
        "patch": "@@ -590,12 +590,15 @@ def is_valid(self):\n                 return False\n         return True\n \n-    # Calculate the virtual transaction size using witness and non-witness\n+    # Calculate the transaction weight using witness and non-witness\n     # serialization size (does NOT use sigops).\n-    def get_vsize(self):\n+    def get_weight(self):\n         with_witness_size = len(self.serialize_with_witness())\n         without_witness_size = len(self.serialize_without_witness())\n-        return math.ceil(((WITNESS_SCALE_FACTOR - 1) * without_witness_size + with_witness_size) / WITNESS_SCALE_FACTOR)\n+        return (WITNESS_SCALE_FACTOR - 1) * without_witness_size + with_witness_size\n+\n+    def get_vsize(self):\n+        return math.ceil(self.get_weight() / WITNESS_SCALE_FACTOR)\n \n     def __repr__(self):\n         return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\"
      }
    ]
  },
  {
    "sha": "4af97c74edcda56cd15523bf3a335adea2bad14a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWY5N2M3NGVkY2RhNTZjZDE1NTIzYmYzYTMzNWFkZWEyYmFkMTRh",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-30T22:10:43Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-01T00:32:31Z"
      },
      "message": "test: introduce `get_weight()` helper for CBlock",
      "tree": {
        "sha": "3ec382d6bba09c80d808132d77235100492a3b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ec382d6bba09c80d808132d77235100492a3b0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4af97c74edcda56cd15523bf3a335adea2bad14a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af97c74edcda56cd15523bf3a335adea2bad14a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4af97c74edcda56cd15523bf3a335adea2bad14a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af97c74edcda56cd15523bf3a335adea2bad14a/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a084ebe1330bcec15715e08b0f65319142927ad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a084ebe1330bcec15715e08b0f65319142927ad1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a084ebe1330bcec15715e08b0f65319142927ad1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "74eda6620f3c775895c45b12f4ce22265a330a4a",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af97c74edcda56cd15523bf3a335adea2bad14a/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af97c74edcda56cd15523bf3a335adea2bad14a/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=4af97c74edcda56cd15523bf3a335adea2bad14a",
        "patch": "@@ -450,8 +450,7 @@ def test_block_relay(self):\n             rpc_details = self.nodes[0].getblock(block.hash, True)\n             assert_equal(rpc_details[\"size\"], len(block.serialize()))\n             assert_equal(rpc_details[\"strippedsize\"], len(block.serialize(False)))\n-            weight = 3 * len(block.serialize(False)) + len(block.serialize())\n-            assert_equal(rpc_details[\"weight\"], weight)\n+            assert_equal(rpc_details[\"weight\"], block.get_weight())\n \n             # Upgraded node should not ask for blocks from unupgraded\n             block4 = self.build_next_block(version=4)"
      },
      {
        "sha": "1abe604b2895d3ab10e350dacd51adc657a904ff",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af97c74edcda56cd15523bf3a335adea2bad14a/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af97c74edcda56cd15523bf3a335adea2bad14a/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=4af97c74edcda56cd15523bf3a335adea2bad14a",
        "patch": "@@ -746,6 +746,13 @@ def solve(self):\n             self.nNonce += 1\n             self.rehash()\n \n+    # Calculate the block weight using witness and non-witness\n+    # serialization size (does NOT use sigops).\n+    def get_weight(self):\n+        with_witness_size = len(self.serialize(with_witness=True))\n+        without_witness_size = len(self.serialize(with_witness=False))\n+        return (WITNESS_SCALE_FACTOR - 1) * without_witness_size + with_witness_size\n+\n     def __repr__(self):\n         return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n             % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,"
      }
    ]
  },
  {
    "sha": "607076d01bf23c69ac21950c17b01fb4e1130774",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDcwNzZkMDFiZjIzYzY5YWMyMTk1MGMxN2IwMWZiNGUxMTMwNzc0",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-30T23:43:45Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-03T15:34:41Z"
      },
      "message": "test: remove confusing `MAX_BLOCK_BASE_SIZE`\n\nThe constant `MAX_BLOCK_BASE_SIZE` has been removed from the\ncore implementation years ago due to being confusing and\nsuperfluous, as it is implied by the block weight limit (see\nPRs #10618 and #10608). Since there is also no point in\nstill keeping it in the functional test framework, we switch\nto weight-based accounting on the relevant test code parts\nand use `MAX_BLOCK_WEIGHT` instead for the block limit\nchecks.",
      "tree": {
        "sha": "c77727a1faf8ef88e44271ff6e7ffebf25c2cbc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c77727a1faf8ef88e44271ff6e7ffebf25c2cbc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/607076d01bf23c69ac21950c17b01fb4e1130774",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/607076d01bf23c69ac21950c17b01fb4e1130774",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/607076d01bf23c69ac21950c17b01fb4e1130774",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/607076d01bf23c69ac21950c17b01fb4e1130774/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4af97c74edcda56cd15523bf3a335adea2bad14a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af97c74edcda56cd15523bf3a335adea2bad14a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4af97c74edcda56cd15523bf3a335adea2bad14a"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 35,
      "deletions": 47
    },
    "files": [
      {
        "sha": "75d4823bfbd56ba86d60d9fc000f0fd21b67c0d8",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=607076d01bf23c69ac21950c17b01fb4e1130774",
        "patch": "@@ -22,7 +22,7 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    MAX_BLOCK_BASE_SIZE,\n+    MAX_BLOCK_WEIGHT,\n     uint256_from_compact,\n     uint256_from_str,\n )\n@@ -307,33 +307,33 @@ def run_test(self):\n         b22 = self.next_block(22, spend=out[5])\n         self.send_blocks([b22], success=False, reject_reason='bad-txns-premature-spend-of-coinbase', reconnect=True)\n \n-        # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n+        # Create a block on either side of MAX_BLOCK_WEIGHT and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n         #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b23 (6)\n         #                                                                           \\-> b24 (6) -> b25 (7)\n         #                      \\-> b3 (1) -> b4 (2)\n-        self.log.info(\"Accept a block of size MAX_BLOCK_BASE_SIZE\")\n+        self.log.info(\"Accept a block of weight MAX_BLOCK_WEIGHT\")\n         self.move_tip(15)\n         b23 = self.next_block(23, spend=out[6])\n         tx = CTransaction()\n-        script_length = MAX_BLOCK_BASE_SIZE - len(b23.serialize()) - 69\n+        script_length = (MAX_BLOCK_WEIGHT - b23.get_weight() - 276) // 4\n         script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n         tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 0)))\n         b23 = self.update_block(23, [tx])\n-        # Make sure the math above worked out to produce a max-sized block\n-        assert_equal(len(b23.serialize()), MAX_BLOCK_BASE_SIZE)\n+        # Make sure the math above worked out to produce a max-weighted block\n+        assert_equal(b23.get_weight(), MAX_BLOCK_WEIGHT)\n         self.send_blocks([b23], True)\n         self.save_spendable_output()\n \n-        self.log.info(\"Reject a block of size MAX_BLOCK_BASE_SIZE + 1\")\n+        self.log.info(\"Reject a block of weight MAX_BLOCK_WEIGHT + 4\")\n         self.move_tip(15)\n         b24 = self.next_block(24, spend=out[6])\n-        script_length = MAX_BLOCK_BASE_SIZE - len(b24.serialize()) - 69\n+        script_length = (MAX_BLOCK_WEIGHT - b24.get_weight() - 276) // 4\n         script_output = CScript([b'\\x00' * (script_length + 1)])\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n-        assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n+        assert_equal(b24.get_weight(), MAX_BLOCK_WEIGHT + 1 * 4)\n         self.send_blocks([b24], success=False, reject_reason='bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n@@ -485,13 +485,13 @@ def run_test(self):\n         # Until block is full, add tx's with 1 satoshi to p2sh_script, the rest to OP_TRUE\n         tx_new = None\n         tx_last = tx\n-        total_size = len(b39.serialize())\n-        while(total_size < MAX_BLOCK_BASE_SIZE):\n+        total_weight = b39.get_weight()\n+        while total_weight < MAX_BLOCK_WEIGHT:\n             tx_new = self.create_tx(tx_last, 1, 1, p2sh_script)\n             tx_new.vout.append(CTxOut(tx_last.vout[1].nValue - 1, CScript([OP_TRUE])))\n             tx_new.rehash()\n-            total_size += len(tx_new.serialize())\n-            if total_size >= MAX_BLOCK_BASE_SIZE:\n+            total_weight += tx_new.get_weight()\n+            if total_weight >= MAX_BLOCK_WEIGHT:\n                 break\n             b39.vtx.append(tx_new)  # add tx to block\n             tx_last = tx_new\n@@ -502,7 +502,7 @@ def run_test(self):\n         # Make sure we didn't accidentally make too big a block. Note that the\n         # size of the block has non-determinism due to the ECDSA signature in\n         # the first transaction.\n-        while (len(b39.serialize()) >= MAX_BLOCK_BASE_SIZE):\n+        while b39.get_weight() >= MAX_BLOCK_WEIGHT:\n             del b39.vtx[-1]\n \n         b39 = self.update_block(39, [])\n@@ -892,7 +892,7 @@ def run_test(self):\n         self.send_blocks([b63], success=False, reject_reason='bad-txns-nonfinal', reconnect=True)\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n-        #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n+        #  the block is > MAX_BLOCK_WEIGHT with the bloated varint, but <= MAX_BLOCK_WEIGHT without the bloated varint,\n         #  does not cause a subsequent, identical block with canonical encoding to be rejected.  The test does not\n         #  care whether the bloated block is accepted or rejected; it only cares that the second block is accepted.\n         #\n@@ -917,12 +917,12 @@ def run_test(self):\n         tx = CTransaction()\n \n         # use canonical serialization to calculate size\n-        script_length = MAX_BLOCK_BASE_SIZE - len(b64a.normal_serialize()) - 69\n+        script_length = (MAX_BLOCK_WEIGHT - 4 * len(b64a.normal_serialize()) - 276) // 4\n         script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n-        assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n+        assert_equal(b64a.get_weight(), MAX_BLOCK_WEIGHT + 8 * 4)\n         self.send_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize()')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n@@ -936,7 +936,7 @@ def run_test(self):\n         b64 = CBlock(b64a)\n         b64.vtx = copy.deepcopy(b64a.vtx)\n         assert_equal(b64.hash, b64a.hash)\n-        assert_equal(len(b64.serialize()), MAX_BLOCK_BASE_SIZE)\n+        assert_equal(b64.get_weight(), MAX_BLOCK_WEIGHT)\n         self.blocks[64] = b64\n         b64 = self.update_block(64, [])\n         self.send_blocks([b64], True)\n@@ -1270,12 +1270,12 @@ def run_test(self):\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             b = self.next_block(i, spend)\n             tx = CTransaction()\n-            script_length = MAX_BLOCK_BASE_SIZE - len(b.serialize()) - 69\n+            script_length = (MAX_BLOCK_WEIGHT - b.get_weight() - 276) // 4\n             script_output = CScript([b'\\x00' * script_length])\n             tx.vout.append(CTxOut(0, script_output))\n             tx.vin.append(CTxIn(COutPoint(b.vtx[1].sha256, 0)))\n             b = self.update_block(i, [tx])\n-            assert_equal(len(b.serialize()), MAX_BLOCK_BASE_SIZE)\n+            assert_equal(b.get_weight(), MAX_BLOCK_WEIGHT)\n             blocks.append(b)\n             self.save_spendable_output()\n             spend = self.get_spendable_output()"
      },
      {
        "sha": "ac7e78b92e54086ea81782ff10a9eb33006226ba",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=607076d01bf23c69ac21950c17b01fb4e1130774",
        "patch": "@@ -14,7 +14,7 @@\n     COIN,\n     COutPoint,\n     CTxOut,\n-    MAX_BLOCK_BASE_SIZE,\n+    MAX_BLOCK_WEIGHT,\n     MAX_MONEY,\n     tx_from_hex,\n )\n@@ -207,7 +207,7 @@ def run_test(self):\n \n         self.log.info('A really large transaction')\n         tx = tx_from_hex(raw_tx_reference)\n-        tx.vin = [tx.vin[0]] * math.ceil(MAX_BLOCK_BASE_SIZE / len(tx.vin[0].serialize()))\n+        tx.vin = [tx.vin[0]] * math.ceil(MAX_BLOCK_WEIGHT // 4 / len(tx.vin[0].serialize()))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-oversize'}],\n             rawtxs=[tx.serialize().hex()],"
      },
      {
        "sha": "9fc38ebf535e65d033bfe4c754a730415a819954",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=607076d01bf23c69ac21950c17b01fb4e1130774",
        "patch": "@@ -6,7 +6,7 @@\n \n import time\n \n-from test_framework.messages import COIN, MAX_BLOCK_BASE_SIZE\n+from test_framework.messages import COIN, MAX_BLOCK_WEIGHT\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n \n@@ -61,15 +61,15 @@ def run_test(self):\n             txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[start_range:end_range], end_range - start_range, (i+1)*base_fee)\n \n         # Make sure that the size of each group of transactions exceeds\n-        # MAX_BLOCK_BASE_SIZE -- otherwise the test needs to be revised to create\n-        # more transactions.\n+        # MAX_BLOCK_WEIGHT // 4 -- otherwise the test needs to be revised to\n+        # create more transactions.\n         mempool = self.nodes[0].getrawmempool(True)\n         sizes = [0, 0, 0]\n         for i in range(3):\n             for j in txids[i]:\n                 assert j in mempool\n                 sizes[i] += mempool[j]['vsize']\n-            assert sizes[i] > MAX_BLOCK_BASE_SIZE  # Fail => raise utxo_count\n+            assert sizes[i] > MAX_BLOCK_WEIGHT // 4  # Fail => raise utxo_count\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined"
      },
      {
        "sha": "64cd0e7b426eeb93dd2cd68662fabecb1d18156c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=607076d01bf23c69ac21950c17b01fb4e1130774",
        "patch": "@@ -21,7 +21,7 @@\n     CTxInWitness,\n     CTxOut,\n     CTxWitness,\n-    MAX_BLOCK_BASE_SIZE,\n+    MAX_BLOCK_WEIGHT,\n     MSG_BLOCK,\n     MSG_TX,\n     MSG_WITNESS_FLAG,\n@@ -110,16 +110,6 @@ def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     tx_to.wit.vtxinwit[in_idx].scriptWitness.stack = [signature, script]\n     tx_to.rehash()\n \n-def get_virtual_size(witness_block):\n-    \"\"\"Calculate the virtual size of a witness block.\n-\n-    Virtual size is base + witness/4.\"\"\"\n-    base_size = len(witness_block.serialize(with_witness=False))\n-    total_size = len(witness_block.serialize())\n-    # the \"+3\" is so we round up\n-    vsize = int((3 * base_size + total_size + 3) / 4)\n-    return vsize\n-\n def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n@@ -902,7 +892,7 @@ def test_block_malleability(self):\n         block.solve()\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a' * 5000000)\n-        assert get_virtual_size(block) > MAX_BLOCK_BASE_SIZE\n+        assert block.get_weight() > MAX_BLOCK_WEIGHT\n \n         # We can't send over the p2p network, because this is too big to relay\n         # TODO: repeat this test with a block that can be relayed\n@@ -911,7 +901,7 @@ def test_block_malleability(self):\n         assert self.nodes[0].getbestblockhash() != block.hash\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n-        assert get_virtual_size(block) < MAX_BLOCK_BASE_SIZE\n+        assert block.get_weight() < MAX_BLOCK_WEIGHT\n         assert_equal(None, self.nodes[0].submitblock(block.serialize().hex()))\n \n         assert self.nodes[0].getbestblockhash() == block.hash\n@@ -974,11 +964,10 @@ def test_witness_block_size(self):\n         child_tx.rehash()\n         self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n \n-        vsize = get_virtual_size(block)\n-        additional_bytes = (MAX_BLOCK_BASE_SIZE - vsize) * 4\n+        additional_bytes = MAX_BLOCK_WEIGHT - block.get_weight()\n         i = 0\n         while additional_bytes > 0:\n-            # Add some more bytes to each input until we hit MAX_BLOCK_BASE_SIZE+1\n+            # Add some more bytes to each input until we hit MAX_BLOCK_WEIGHT+1\n             extra_bytes = min(additional_bytes + 1, 55)\n             block.vtx[-1].wit.vtxinwit[int(i / (2 * NUM_DROPS))].scriptWitness.stack[i % (2 * NUM_DROPS)] = b'a' * (195 + extra_bytes)\n             additional_bytes -= extra_bytes\n@@ -987,8 +976,7 @@ def test_witness_block_size(self):\n         block.vtx[0].vout.pop()  # Remove old commitment\n         add_witness_commitment(block)\n         block.solve()\n-        vsize = get_virtual_size(block)\n-        assert_equal(vsize, MAX_BLOCK_BASE_SIZE + 1)\n+        assert_equal(block.get_weight(), MAX_BLOCK_WEIGHT + 1)\n         # Make sure that our test case would exceed the old max-network-message\n         # limit\n         assert len(block.serialize()) > 2 * 1024 * 1024\n@@ -1001,7 +989,7 @@ def test_witness_block_size(self):\n         block.vtx[0].vout.pop()\n         add_witness_commitment(block)\n         block.solve()\n-        assert get_virtual_size(block) == MAX_BLOCK_BASE_SIZE\n+        assert block.get_weight() == MAX_BLOCK_WEIGHT\n \n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n@@ -1727,7 +1715,7 @@ def test_signature_version_1(self):\n             block.vtx.append(tx)\n \n             # Test the block periodically, if we're close to maxblocksize\n-            if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n+            if block.get_weight() > MAX_BLOCK_WEIGHT - 4000:\n                 self.update_witness_block_with_transactions(block, [])\n                 test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n                 block = self.build_next_block()"
      },
      {
        "sha": "c0a1a9a8e4cea8a7ae21e605a506130be9f4e2cb",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/607076d01bf23c69ac21950c17b01fb4e1130774/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=607076d01bf23c69ac21950c17b01fb4e1130774",
        "patch": "@@ -32,7 +32,7 @@\n from test_framework.util import hex_str_to_bytes, assert_equal\n \n MAX_LOCATOR_SZ = 101\n-MAX_BLOCK_BASE_SIZE = 1000000\n+MAX_BLOCK_WEIGHT = 4000000\n MAX_BLOOM_FILTER_SIZE = 36000\n MAX_BLOOM_HASH_FUNCS = 50\n "
      }
    ]
  }
]