LarryRuane,2019-08-12 06:39:39,"The second commit also adds a randomized test. It's pretty common for the kind of code under scrutiny here (the `CBufferedFile` object) to have subtle off-by-one and boundary condition bugs. A functional unit test like the one in the first commit is good, but it's hard to be sure the test covers all possible strange conditions. A random test will try many weird things that no person would ever thi",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-520312788,520312788,
practicalswift,2019-08-12 12:11:51,"@LarryRuane I haven't looked at your changes yet but wanted to mention that you might want to check using `contrib/devtools/test_deterministic_coverage.sh` that the unit test is line coverage deterministic after this change.\n\nLine coverage determinism is a necessary condition for meaningful line coverage measuring :-)",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-520399374,520399374,
LarryRuane,2019-08-12 14:32:28,"@practicalswift, thanks, I don't understand that script yet, but you reminded me that I have a question about the random test I wrote. It can trivially be made deterministic by seeding the random number generator at the beginning of the test. Would that be desirable, or not? It seems to me there are advantages either way. If the test is deterministic, then every time CI runs, it's not testing anyt",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-520450065,520450065,
laanwj,2019-08-14 11:12:18,"> It can trivially be made deterministic by seeding the random number generator at the beginning of the test. Would that be desirable, or not?\n\nDeterministic tests are preferred in this project. No one really investigates individual random CI failures because there tends to be a lot of spurious failures that have nothing to do with the code, but with unreliability of the Travis platform such a",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-521203575,521203575,
MarcoFalke,2019-08-14 11:43:33,"I think you have two options:\n\n* Pick a random seed, print/log it at the beginning of the test in some way\n* Pick a constant as the seed",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-521212158,521212158,
mzumsande,2019-08-15 21:30:03,"Hi, I am currently trying to understand `CBufferedFile` and the tests, both confuse me still :smiley:. Seems like substantial parts of `streams_buffered_file` test are added first and removed again in a later commit. Could you squash commits that fix errors in earlier ones?",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-521804558,521804558,
LarryRuane,2019-08-16 21:19:05,"> Could you squash commits that fix errors in earlier ones?\n\nYes, I ended up squashing down to a single commit, because there really are no phases or stages to this PR. Thanks for reviewing.",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-522154700,522154700,
mzumsande,2019-08-19 15:33:57,"Thanks for squashing - I agree that this fixes a bug, which hasn't lead to errors because of how `CBufferedFile` is initialized in `LoadExternalBlockFile()` (see comment above). Tests look good to me, will look at them in more detail (and also perform a reindex on testnet) in the next days.",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-522630832,522630832,
DrahtBot,2019-08-24 05:49:33,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-524523033,524523033,
laanwj,2019-09-10 08:55:28,"Looks good to me, thanks for adding the extensive testing.\n\nACK ~after squash.~ efd2474d17098c754367b844ec646ebececc7c74",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-529840837,529840837,
mzumsande,2019-09-10 22:00:51,"I had intended to follow up earlier on my last comment, ACK efd2474d17098c754367b844ec646ebececc7c74. I reviewed the code, ran tests and did a successful reindex on testnet with this branch.",https://github.com/bitcoin/bitcoin/pull/16577#issuecomment-530137395,530137395,
promag,2019-08-10 09:26:34,"NACK this hunk, it only changes formatting.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r312697097,312697097,src/streams.h
promag,2019-08-10 09:27:36,"NACK this hunk, only splits the line in 2 lines.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r312697122,312697122,src/streams.h
promag,2019-08-10 09:35:07,I'd keep `else`s.,https://github.com/bitcoin/bitcoin/pull/16577#discussion_r312697302,312697302,src/streams.h
promag,2019-08-10 09:44:54,"I think this is wrong, `vchBuf.size()` if constant and the actual read position is obtained from `nReadPos % vchBuf.size()` - it's a ring buffer.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r312697551,312697551,src/streams.h
LarryRuane,2019-08-12 06:32:32,"I checked this carefully, and I'm pretty sure it's right, please check again. I did simplify it slightly (without changing the behavior) in the second commit; it's now like this:\n```\nif (nPos + bufsize < nSrcPos) {\n```\nThis says that the distance from the new (requested) read position, `nPos`, to the source pointer, `nSrcPos` must be no greater than `bufsize`. If `nPos` is further back tha",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r312790825,312790825,src/streams.h
practicalswift,2019-08-14 07:43:42,"When testing this I encountered the following UBSan warning:\n\n```\ntest/streams_tests.cpp:396:29: runtime error: implicit conversion from type 'size_t' (aka 'unsigned long') of value 132 (64-bit, unsigned) to type 'char' changed the value to -124 (8-bit, signed)\n```",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r313742947,313742947,src/test/streams_tests.cpp
mzumsande,2019-08-15 21:28:24,Does this test for an identity? Did you mean to use a different variable as  loop counter?,https://github.com/bitcoin/bitcoin/pull/16577#discussion_r314506490,314506490,src/test/streams_tests.cpp
LarryRuane,2019-08-16 21:16:36,"@mzumsande, good catch, very silly of me! Fixed in the latest commit, 166358663eff37ea59ce1ec2f74685a46187e926.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r314892832,314892832,src/test/streams_tests.cpp
laanwj,2019-08-19 14:51:00,"Please keep the `{}`, according to the [coding style](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c): \n""If an if only has a single-statement then-clause, it can appear on the same line as the if, without braces. In every other case, braces are required, and the then and else clauses must appear correctly indented on a new line.""\n(some cases below, too)",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r315253054,315253054,src/streams.h
mzumsande,2019-08-19 15:20:20,"I also think that the first check in `SetPos()` is incorrect. This does not lead to problems in production thanks to the initialization values of `CBufferedFile` `vchBuf.size()=2*MAX_BLOCK_SERIALIZED_SIZE=8000000` and `nRewind=MAX_BLOCK_SERIALIZED_SIZE+8=4000008` in `LoadExternalBlockFile()`.\n\nAccordingly, `nSrcPos = vchBuf.size() - nRewind = 3999992 < nRewind` after the first buffer fill and ",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r315269060,315269060,src/streams.h
mzumsande,2019-08-19 15:27:45,"Would be nice to have a test case for ""rewinding too far"" in the test `streams_buffered_file` as well, since this code was changed.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r315273058,315273058,src/streams.h
LarryRuane,2019-08-19 20:56:55,"Done, https://github.com/bitcoin/bitcoin/pull/16577/commits/723baf279ecf42c42c4c73378e6bc175ae07b631.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r315408084,315408084,src/streams.h
LarryRuane,2019-08-20 00:01:07,"@mzumsande, it's broken even with the current production initialization values.  I made a temporary branch, https://github.com/LarryRuane/bitcoin/commit/bc9c987300782a7881edaabf7b7c5463a7688041, that simulates, after reading each block (during reindexing), what would happen if we really did need to rewind. (This temp branch doesn't include the changes from this PR.) `bitcoind --reindex` failed pre",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r315459818,315459818,src/streams.h
mzumsande,2019-09-10 21:58:17,"You are right, I was more trying to understand why reindexing currently works in spite of the wrong condition. With different initialization values even no-rewind uses of `SetPos` like `SetPos(current_position)` could fail.",https://github.com/bitcoin/bitcoin/pull/16577#discussion_r322981079,322981079,src/streams.h
