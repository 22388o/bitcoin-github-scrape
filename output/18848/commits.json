[
  {
    "sha": "9d7c4c454807d279fef0876bb4c3982e0f50fda4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDdjNGM0NTQ4MDdkMjc5ZmVmMDg3NmJiNGMzOTgyZTBmNTBmZGE0",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T05:07:47Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T07:29:33Z"
      },
      "message": "threadnames: don't allocate memory in ThreadRename\n\nThis is called many times, let's use a buffer on the stack instead",
      "tree": {
        "sha": "748a38139bc608391d730391e7c8f1c80aa87b57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/748a38139bc608391d730391e7c8f1c80aa87b57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d7c4c454807d279fef0876bb4c3982e0f50fda4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7c4c454807d279fef0876bb4c3982e0f50fda4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7c4c454807d279fef0876bb4c3982e0f50fda4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7c4c454807d279fef0876bb4c3982e0f50fda4/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 35,
      "deletions": 17
    },
    "files": [
      {
        "sha": "ad4af123acf51b5ae562e755099885f01c276ad6",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -338,7 +338,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n /** Simple wrapper to set thread name and run work queue */\n static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n {\n-    util::ThreadRename(strprintf(\"httpworker.%i\", worker_num));\n+    util::ThreadRenameWithWorker(\"httpworker\", worker_num);\n     queue->Run();\n }\n "
      },
      {
        "sha": "5235f6eb84a00dc067f17ac90ba5d6405a218959",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -250,7 +250,7 @@ void BCLog::Logger::LogPrintStr(const std::string& str)\n     std::string str_prefixed = LogEscapeMessage(str);\n \n     if (m_log_threadnames && m_started_new_line) {\n-        str_prefixed.insert(0, \"[\" + util::ThreadGetInternalName() + \"] \");\n+        str_prefixed.insert(0, \"[\" + std::string(util::ThreadGetInternalName()) + \"] \");\n     }\n \n     str_prefixed = LogTimestampStr(str_prefixed);"
      },
      {
        "sha": "fa3e2bdfe071f6606ba2bf92432e584677d2880f",
        "filename": "src/test/util_threadnames_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/test/util_threadnames_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/test/util_threadnames_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_threadnames_tests.cpp?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -19,7 +19,7 @@\n \n BOOST_FIXTURE_TEST_SUITE(util_threadnames_tests, BasicTestingSetup)\n \n-const std::string TEST_THREAD_NAME_BASE = \"test_thread.\";\n+const std::string TEST_THREAD_NAME_BASE = \"test_thread\";\n \n /**\n  * Run a bunch of threads to all call util::ThreadRename.\n@@ -33,7 +33,7 @@ std::set<std::string> RenameEnMasse(int num_threads)\n     std::mutex lock;\n \n     auto RenameThisThread = [&](int i) {\n-        util::ThreadRename(TEST_THREAD_NAME_BASE + ToString(i));\n+        util::ThreadRenameWithWorker(TEST_THREAD_NAME_BASE.c_str(), i);\n         std::lock_guard<std::mutex> guard(lock);\n         names.insert(util::ThreadGetInternalName());\n     };\n@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(util_threadnames_test_rename_threaded)\n \n     // Names \"test_thread.[n]\" should exist for n = [0, 99]\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(names.find(TEST_THREAD_NAME_BASE + ToString(i)) != names.end());\n+        BOOST_CHECK(names.find(TEST_THREAD_NAME_BASE + \".\" + ToString(i)) != names.end());\n     }\n \n }"
      },
      {
        "sha": "527da1dddf8f527e2f5a45dc30e888f895306b36",
        "filename": "src/util/threadnames.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 8,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/util/threadnames.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/util/threadnames.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/threadnames.cpp?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -14,6 +14,7 @@\n #endif\n \n #include <util/threadnames.h>\n+#include <memory.h>\n \n #ifdef HAVE_SYS_PRCTL_H\n #include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n@@ -40,11 +41,15 @@ static void SetThreadName(const char* name)\n // global.\n #if defined(HAVE_THREAD_LOCAL)\n \n-static thread_local std::string g_thread_name;\n-const std::string& util::ThreadGetInternalName() { return g_thread_name; }\n+#define THREADNAME_SIZE 64\n+\n+static thread_local char g_thread_name[THREADNAME_SIZE] = {0};\n+const char *util::ThreadGetInternalName() { return g_thread_name; }\n //! Set the in-memory internal name for this thread. Does not affect the process\n //! name.\n-static void SetInternalName(std::string name) { g_thread_name = std::move(name); }\n+static void SetInternalName(const char *name) {\n+    memcpy(g_thread_name, name, sizeof(g_thread_name));\n+}\n \n // Without thread_local available, don't handle internal name at all.\n #else\n@@ -54,13 +59,23 @@ const std::string& util::ThreadGetInternalName() { return empty_string; }\n static void SetInternalName(std::string name) { }\n #endif\n \n-void util::ThreadRename(std::string&& name)\n+void util::ThreadRename(const char* name)\n+{\n+    util::ThreadRenameWithWorker(name, -1);\n+}\n+\n+void util::ThreadRenameWithWorker(const char *name, int worker)\n {\n-    SetThreadName((\"b-\" + name).c_str());\n-    SetInternalName(std::move(name));\n+    char buf[THREADNAME_SIZE];\n+    snprintf(buf, sizeof(buf),\n+             worker == -1 ? \"b-%s\" : \"b-%s.%d\",\n+             name,\n+             worker == -1 ? 0 : worker);\n+    SetThreadName(buf);\n+    SetInternalName(buf);\n }\n \n-void util::ThreadSetInternalName(std::string&& name)\n+void util::ThreadSetInternalName(const char *name)\n {\n-    SetInternalName(std::move(name));\n+    SetInternalName(name);\n }"
      },
      {
        "sha": "cc6592bb974f09500af2057be88c27b14ca52942",
        "filename": "src/util/threadnames.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/util/threadnames.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/util/threadnames.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/threadnames.h?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -12,14 +12,16 @@ namespace util {\n //! as its system thread name.\n //! @note Do not call this for the main thread, as this will interfere with\n //! UNIX utilities such as top and killall. Use ThreadSetInternalName instead.\n-void ThreadRename(std::string&&);\n+void ThreadRename(const char*);\n+\n+void ThreadRenameWithWorker(const char*, int);\n \n //! Set the internal (in-memory) name of the current thread only.\n-void ThreadSetInternalName(std::string&&);\n+void ThreadSetInternalName(const char *);\n \n //! Get the thread's internal (in-memory) name; used e.g. for identification in\n //! logging.\n-const std::string& ThreadGetInternalName();\n+const char* ThreadGetInternalName();\n \n } // namespace util\n "
      },
      {
        "sha": "a3a738a219dc037dae1d8d1b79838393baaa2956",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -1803,7 +1803,7 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck(int worker_num) {\n-    util::ThreadRename(strprintf(\"scriptch.%i\", worker_num));\n+    util::ThreadRenameWithWorker(\"scriptch\", worker_num);\n     scriptcheckqueue.Thread();\n }\n "
      },
      {
        "sha": "4ecddabfbabaaf92e2a96f8c2e7334b663f7c23c",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7c4c454807d279fef0876bb4c3982e0f50fda4/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7c4c454807d279fef0876bb4c3982e0f50fda4/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=9d7c4c454807d279fef0876bb4c3982e0f50fda4",
        "patch": "@@ -23,6 +23,7 @@ KNOWN_VIOLATIONS=(\n     \"src/util/strencodings.cpp:.*strtoul\"\n     \"src/util/strencodings.h:.*atoi\"\n     \"src/util/system.cpp:.*atoi\"\n+    \"src/util/threadnames.cpp:.*snprintf\"\n )\n \n REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\""
      }
    ]
  }
]