practicalswift,2020-05-02 08:32:06,Why is `ThreadRename` being called so many times? Does it make sense? :),https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622872215,622872215,
hebasto,2020-05-02 08:40:21,"> ... ThreadRename is called many many times...\n\nIt seems like a more serious bug than memory over-allocation.\n\n",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622882866,622882866,
jb55,2020-05-02 08:50:18,"hmmm I went into this from a top-down approach. I'm not familiar with the internals of core, but it's possible the tool I'm using (heaptrack) might have false positives or be flat out wrong. all I know is that doing this PR made the ThreadRename heaptrack logs go away.\n\nThere are a bunch of callsites but none of them look too suspicious...",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622895724,622895724,
laanwj,2020-05-02 08:51:44,"Uhm, if this is that case, the underlying issue must be addressed, not the symptom. It's supposed to only be called at initial thread creation and bitcoin core's threads are more or less static.\n(e.g. the HTTP worker threads are only supposed to be created once, at startup, not all the time? wtf is happening lately)\n\nCould this also explain why `thread_local` adds unexpected amount of overhe",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622897432,622897432,
jb55,2020-05-02 08:58:59,is there some mechanism where thread jobs would allocate and destroy thread_local heap storage every time or something? I'm not that familiar with thread_local...,https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622906791,622906791,
laanwj,2020-05-02 09:07:24,"It's somewhat of a mystery. It's up to the compiler - OS - libc - architecture combination how `thread_local` is implemented.\n\nCould you try `--disable-threadlocal` to see if it makes this problem go away?\n",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622917303,622917303,
jb55,2020-05-02 09:16:33,"amazingly, the allocs went away with `--disable-threadlocal`\n\n![May02-021545](https://user-images.githubusercontent.com/45598/80860180-eeb37c80-8c1a-11ea-9e1a-5f0ce2fefc35.png)\n",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622924220,622924220,
jb55,2020-05-02 09:20:22,going to `make clean` just incase to confirm,https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622924684,622924684,
laanwj,2020-05-02 09:20:46,"Ouch. Looks like you're on to something.\n\nWhich platform are you checking on? On x86_64, Ubuntu 20.04, with gcc `9.3.0-10ubuntu2`, it looks like ThreadRename is only called once per thread as expected, even with active RPC use (edit: oh and once at shutdown with `shutoff`). Checked by breakpointing it in gdb.",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622924722,622924722,
jb55,2020-05-02 09:25:41,"yup no more `ThreadRename` allocs on master with `--disable-threadlocal` after a `make clean`\n\n`gcc (GCC) 9.3.0`\n\n![May02-022408](https://user-images.githubusercontent.com/45598/80860400-46061c80-8c1c-11ea-95e9-0710fc96908a.png)\n\ngoing to try with clang",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622925288,622925288,
laanwj,2020-05-02 09:28:40,"I have the same. Why can't I reproduce this. This is fucking madness.\n\nEdit: can you please trap the function in `gdb` and look what the backtrace is, where it keeps being called from for the same threads?",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622925624,622925624,
hebasto,2020-05-02 09:30:58,"Tested IBD on x86_64, Linux Mint 19.3 with the patched `util::ThreadRename()` to print a message. The only output is:\n```\n$ ./src/qt/bitcoin-qt -testnet -server\nThreadRename: name=qt-init\nThreadRename: name=scriptch.1\nThreadRename: name=scriptch.0\nThreadRename: name=scriptch.2\nThreadRename: name=scheduler\nThreadRename: name=httpworker.0\nThreadRename: name=http\nThreadRename: nam",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622925860,622925860,
jb55,2020-05-02 09:36:50,"heaptrack tracks allocations, I have no idea how heaptrack attributes mallocs to ThreadRename, but it must be something thread_local related...\n\nhere's with clang with thread_local enabled:\n\n![May02-023523](https://user-images.githubusercontent.com/45598/80860611-b19cb980-8c1d-11ea-9677-208f905218d0.png)\n\nlet me try to log the get internal name call",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622926470,622926470,
laanwj,2020-05-02 09:40:13,"I have the feeling it's more subtle.\nMind that without `thread_local` enabled, the `SetInternalName` function called from `ThreadRename` is stubbed out\n```\nstatic void SetInternalName(std::string name) { }\n```\nIt might still be that it is called many times, it just doesn't show up in this profile.\n(but it means that `::prctl` for ex. will still be called a lot)\n",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622926853,622926853,
jb55,2020-05-02 09:46:40,"ok I'm dumb, I think I was reading this pane wrong. It's showing the top-down allocations. so that means it allocated that many times UP to the point it allocated once in ThreadRename.\n\nso perhaps the thread_local performance thing is just because LogPrintF has to allocate a bit more to display thread info? Seems like 6 minutes is lot though just for a print line...",https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622927534,622927534,
jb55,2020-05-02 10:19:26,this might still be useful for the case where we're logging thread names... but it's pretty minor compared to other huge sources of allocations. going to close this for now.,https://github.com/bitcoin/bitcoin/pull/18848#issuecomment-622931041,622931041,
