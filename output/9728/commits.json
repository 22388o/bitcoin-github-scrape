[
  {
    "sha": "08f613d2e945b3ef4e4e23d1d885acc62dae003f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGY2MTNkMmU5NDViM2VmNGU0ZTIzZDFkODg1YWNjNjJkYWUwMDNm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-02-09T06:16:27Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-03T14:47:46Z"
      },
      "message": "Can create External HD wallet with -externalHD",
      "tree": {
        "sha": "e34189ccf66cbfea9e0088aeceac9dd323d3e874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e34189ccf66cbfea9e0088aeceac9dd323d3e874"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08f613d2e945b3ef4e4e23d1d885acc62dae003f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f613d2e945b3ef4e4e23d1d885acc62dae003f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08f613d2e945b3ef4e4e23d1d885acc62dae003f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f613d2e945b3ef4e4e23d1d885acc62dae003f/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e222618a32a16cf0efae392e6349c10c38e57db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e222618a32a16cf0efae392e6349c10c38e57db6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e222618a32a16cf0efae392e6349c10c38e57db6"
      }
    ],
    "stats": {
      "total": 268,
      "additions": 210,
      "deletions": 58
    },
    "files": [
      {
        "sha": "be81bd9dc783165e580451793b9fbcb2bf500ebf",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -146,7 +146,8 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        if (vchData.size() == Size) {\n+        const bool fCorrectVersion = vchVersion == Params().Base58Prefix(Type);\n+        if (vchData.size() == Size && fCorrectVersion) {\n             // If base58 encoded data does not hold an ext key, return a !IsValid() key\n             ret.Decode(vchData.data());\n         }"
      },
      {
        "sha": "f708b735edb10fb068349720925e42e16056d747",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -106,6 +106,16 @@ bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n     return setWatchOnly.count(dest) > 0;\n }\n \n+bool CBasicKeyStore::HaveWatchOnly(const CKeyID &keyId) const\n+{\n+    LOCK(cs_KeyStore);\n+    WatchKeyMap::const_iterator it = mapWatchKeys.find(keyId);\n+    if (it != mapWatchKeys.end()) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CBasicKeyStore::HaveWatchOnly() const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "699819b1e54c9ed8f934313073d7d4d0faa7ee8c",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -104,6 +104,8 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool AddWatchOnly(const CScript &dest) override;\n     virtual bool RemoveWatchOnly(const CScript &dest) override;\n     virtual bool HaveWatchOnly(const CScript &dest) const override;\n+\n+    virtual bool HaveWatchOnly(const CKeyID &keyId) const;\n     virtual bool HaveWatchOnly() const override;\n };\n "
      },
      {
        "sha": "137e665aca862a924e259af9382cf5cebf38e27b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 167,
        "deletions": 51,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -95,79 +95,116 @@ CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n-\n+    CPubKey pubkey;\n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(walletdb, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+        DeriveNewChildKey(walletdb, metadata, secret, pubkey, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n         secret.MakeNewKey(fCompressed);\n+        pubkey = secret.GetPubKey();\n+        assert(secret.VerifyPubKey(pubkey));\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed) {\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n     }\n \n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n-\n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     UpdateTimeFirstKey(nCreationTime);\n \n-    if (!AddKeyPubKeyWithDB(walletdb, secret, pubkey)) {\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    if(!IsExternalHD()) {\n+        if (!AddKeyPubKeyWithDB(walletdb, secret, pubkey)) {\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+        }\n+    }\n+    else {\n+        if (!AddWatchOnly(pubkey, metadata, nCreationTime))\n+            throw std::runtime_error(std::string(__func__) + \": AddWatchOnly failed\");\n     }\n     return pubkey;\n }\n \n-void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal)\n+\n+void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, CPubKey& pubkey, bool internal)\n {\n-    // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)\n-    CExtKey masterKey;             //hd master key\n-    CExtKey accountKey;            //key at m/0'\n-    CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n-    CExtKey childKey;              //key at m/0'/0'/<n>'\n-\n     // try to get the master key\n-    if (!GetKey(hdChain.masterKeyID, key))\n+    if (GetKey(hdChain.masterKeyID, key))\n+    {\n+        // for now we use a fixed keypath scheme of m/0'/0'/k\n+        CExtKey masterKey;             //hd master key\n+        CExtKey accountKey;            //key at m/0'\n+        CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n+        CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+        masterKey.SetMaster(key.begin(), key.size());\n+\n+        // derive m/0'\n+        // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+        masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive m/0'/0' (external chain) OR m/0'/1' (internal chain)\n+        assert(internal ? CanSupportFeature(FEATURE_HD_SPLIT) : true);\n+        accountKey.Derive(chainChildKey, BIP32_HARDENED_KEY_LIMIT + (internal ? 1 : 0));\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            // always derive hardened keys\n+            // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+            // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+            if (internal) {\n+                chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+                metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+                hdChain.nInternalChainCounter++;\n+            }\n+            else {\n+                chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+                metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+                hdChain.nExternalChainCounter++;\n+            }\n+        } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+        secret = childKey.key;\n+        pubkey = childKey.key.GetPubKey();\n+        metadata.hdMasterKeyID = hdChain.masterKeyID;\n+        // update the chain model in the database\n+        if (!walletdb.WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    }\n+    else if (IsExternalHD()) {\n+        CExtPubKey& masterKey = hdChain.externalHD;             //hd master key\n+        CExtPubKey chainChildKey;         //key at m/0 (external) or m/1 (internal)\n+        CExtPubKey childKey;              //key at m/0/<n>\n+\n+        // derive m/x\n+        masterKey.Derive(chainChildKey, internal ? 1 : 0);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            if (internal) {\n+                chainChildKey.Derive(childKey, hdChain.nInternalChainCounter);\n+                metadata.hdKeypath = \"m/1/\" + std::to_string(hdChain.nInternalChainCounter);\n+                hdChain.nInternalChainCounter++;\n+            }\n+            else {\n+                chainChildKey.Derive(childKey, hdChain.nExternalChainCounter);\n+                metadata.hdKeypath = \"m/0/\" + std::to_string(hdChain.nExternalChainCounter);\n+                hdChain.nExternalChainCounter++;\n+            }\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+        } while (HaveWatchOnly(childKey.pubkey.GetID()));\n+        pubkey = childKey.pubkey;\n+        // update the chain model in the database\n+        if (!walletdb.WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    }\n+    else {\n         throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n-\n-    masterKey.SetMaster(key.begin(), key.size());\n-\n-    // derive m/0'\n-    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n-    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-    // derive m/0'/0' (external chain) OR m/0'/1' (internal chain)\n-    assert(internal ? CanSupportFeature(FEATURE_HD_SPLIT) : true);\n-    accountKey.Derive(chainChildKey, BIP32_HARDENED_KEY_LIMIT+(internal ? 1 : 0));\n-\n-    // derive child key at next index, skip keys already known to the wallet\n-    do {\n-        // always derive hardened keys\n-        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n-        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n-        if (internal) {\n-            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n-            hdChain.nInternalChainCounter++;\n-        }\n-        else {\n-            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n-            hdChain.nExternalChainCounter++;\n-        }\n-    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n-    secret = childKey.key;\n-    metadata.hdMasterKeyID = hdChain.masterKeyID;\n-    // update the chain model in the database\n-    if (!walletdb.WriteHDChain(hdChain))\n-        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    }\n }\n \n bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const CPubKey &pubkey)\n@@ -298,6 +335,29 @@ bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n     return AddWatchOnly(dest);\n }\n \n+bool CWallet::AddWatchOnly(const CPubKey &pubkey, const CKeyMetadata& meta, int64_t nCreateTime)\n+{\n+    auto script = GetScriptForDestination(pubkey.GetID());\n+    if (!HaveWatchOnly(script))\n+    {\n+        mapKeyMetadata[CScriptID(script)] = meta;\n+        if (!AddWatchOnly(script, nCreateTime))\n+            return false;\n+    }\n+\n+    if (!CWalletDB(*dbw).WriteKeyMeta(pubkey, meta))\n+        return false;\n+\n+    script = GetScriptForRawPubKey(pubkey);\n+    if (!HaveWatchOnly(script))\n+    {\n+        mapKeyMetadata[CScriptID(script)] = meta;\n+        if (!AddWatchOnly(script, nCreateTime))\n+            return false;\n+    }\n+    return true;\n+}\n+\n bool CWallet::RemoveWatchOnly(const CScript &dest)\n {\n     AssertLockHeld(cs_wallet);\n@@ -1393,6 +1453,25 @@ bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n     return true;\n }\n \n+bool CWallet::SetExternalHD(const CExtPubKey& extPubKey)\n+{\n+    LOCK(cs_wallet);\n+\n+    // ensure this wallet.dat can only be opened by clients supporting HD\n+    SetMinVersion(FEATURE_EXTERNAL_HD);\n+\n+    // store the keyid (hash160) together with\n+    // the child index counter in the database\n+    // as a hdchain object\n+    CHDChain newHdChain;\n+    newHdChain.masterKeyID = extPubKey.pubkey.GetID();\n+    newHdChain.isExternalHD = true;\n+    newHdChain.externalHD = extPubKey;\n+    SetHDChain(newHdChain, false);\n+\n+    return true;\n+}\n+\n bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n@@ -1408,6 +1487,11 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.masterKeyID.IsNull();\n }\n \n+bool CWallet::IsExternalHD() const\n+{\n+    return IsHDEnabled() && hdChain.isExternalHD;\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -3290,9 +3374,14 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!walletdb.ReadPool(nIndex, keypool)) {\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         }\n-        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+        if (!IsExternalHD() && !HaveKey(keypool.vchPubKey.GetID())) {\n             throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n+        if (IsExternalHD()) {\n+            if (!HaveWatchOnly(keypool.vchPubKey.GetID())) {\n+                throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+            }\n+        }\n         if (keypool.fInternal != fReturningInternal) {\n             throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n         }\n@@ -3855,6 +3944,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n+    strUsage += HelpMessageOpt(\"-externalhd\", _(\"Create a new external-HD wallet from a BIP32 HD public key\"));\n     strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n@@ -3949,6 +4039,26 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         walletInstance->SetMaxVersion(nMaxVersion);\n     }\n \n+\n+    std::string externalHd = GetArg(\"-externalhd\", \"\");\n+    CExtPubKey extPubKey;\n+    if (!externalHd.empty()) {\n+        CBitcoinExtPubKey bitcoinExtPubKey(externalHd);\n+        extPubKey = bitcoinExtPubKey.GetKey();\n+        if (!extPubKey.pubkey.IsFullyValid()) {\n+            InitError(_(\"Invalid ExtPubKey format\"));\n+            return NULL;\n+        }\n+        \n+        if (!fFirstRun) {\n+            if (!walletInstance->IsExternalHD() ||\n+                walletInstance->GetHDChain().masterKeyID != extPubKey.pubkey.GetID()) {\n+                InitError(_(\"Cannot specify new external hd on an already existing wallet\"));\n+                return NULL;\n+            }\n+        }\n+    }\n+\n     if (fFirstRun)\n     {\n         // Create new keyUser and set as default key\n@@ -3958,9 +4068,15 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n \n             // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n-            if (!walletInstance->SetHDMasterKey(masterPubKey))\n-                throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+            if(externalHd.empty()) {\n+                CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n+                if (!walletInstance->SetHDMasterKey(masterPubKey))\n+                    throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+            }\n+            else {\n+                if (!walletInstance->SetExternalHD(extPubKey))\n+                    throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+            }\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey, false)) {"
      },
      {
        "sha": "852e4832210f87d6b7c1ec910879aca51d2f9b3d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -80,6 +80,7 @@ class CScript;\n class CScheduler;\n class CTxMemPool;\n class CBlockPolicyEstimator;\n+class CChainParams;\n class CWalletTx;\n struct FeeCalculation;\n enum class FeeEstimateMode;\n@@ -95,6 +96,7 @@ enum WalletFeature\n     FEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n \n     FEATURE_HD_SPLIT = 139900, // Wallet with HD chain split (change outputs will use m/0'/1'/k)\n+    FEATURE_EXTERNAL_HD = 139901, // External Hierarchical key derivation after BIP32 (HD Wallet)\n \n     FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n@@ -699,7 +701,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n+    void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, CPubKey& pubkey, bool internal = false);\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n@@ -903,6 +905,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n+    bool AddWatchOnly(const CPubKey &pubkey, const CKeyMetadata& meta, int64_t nCreateTime);\n+\n     bool RemoveWatchOnly(const CScript &dest) override;\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -1131,15 +1135,18 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n+    /* Returns true if HD is enabled and is watch only */\n+    bool IsExternalHD() const;\n \n     /* Generates a new HD master key (will not be activated) */\n     CPubKey GenerateNewHDMasterKey();\n-    \n+\n     /* Set the current HD master key (will reset the chain child index counters)\n-       Sets the master key's version based on the current wallet version (so the\n-       caller must ensure the current wallet version is correct before calling\n-       this function). */\n+    Sets the master key's version based on the current wallet version (so the\n+    caller must ensure the current wallet version is correct before calling\n+    this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+    bool SetExternalHD(const CExtPubKey& extPubKey);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "04bd921669d5a58944b4546a83dde7d975d92702",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -56,6 +56,12 @@ bool CWalletDB::EraseTx(uint256 hash)\n     return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n }\n \n+bool CWalletDB::WriteKeyMeta(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta)\n+{\n+    return WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+        keyMeta, false);\n+}\n+\n bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n     if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta, false)) {"
      },
      {
        "sha": "4aee597cb25d4a22124d591a7a3589c6a7ac1b0c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f613d2e945b3ef4e4e23d1d885acc62dae003f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "patch": "@@ -63,10 +63,14 @@ class CHDChain\n     uint32_t nExternalChainCounter;\n     uint32_t nInternalChainCounter;\n     CKeyID masterKeyID; //!< master key hash160\n+    CExtPubKey externalHD;\n+    bool isExternalHD = false;\n \n     static const int VERSION_HD_BASE        = 1;\n     static const int VERSION_HD_CHAIN_SPLIT = 2;\n-    static const int CURRENT_VERSION        = VERSION_HD_CHAIN_SPLIT;\n+    static const int SUPPORT_EXTERNALHD_VERSION = 3;\n+    static const int CURRENT_VERSION        = SUPPORT_EXTERNALHD_VERSION;\n+\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n@@ -79,6 +83,11 @@ class CHDChain\n         READWRITE(masterKeyID);\n         if (this->nVersion >= VERSION_HD_CHAIN_SPLIT)\n             READWRITE(nInternalChainCounter);\n+        if (this->nVersion >= SUPPORT_EXTERNALHD_VERSION) {\n+            READWRITE(isExternalHD);\n+            if(isExternalHD)\n+                READWRITE(externalHD);\n+        }\n     }\n \n     void SetNull()\n@@ -177,6 +186,7 @@ class CWalletDB\n     bool WriteTx(const CWalletTx& wtx);\n     bool EraseTx(uint256 hash);\n \n+    bool WriteKeyMeta(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta);\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n     bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);"
      }
    ]
  },
  {
    "sha": "bcded2e6078aca907275ffab660404acc2d0f12d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2RlZDJlNjA3OGFjYTkwNzI3NWZmYWI2NjA0MDRhY2MyZDBmMTJk",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-02-22T17:29:03Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-03T14:47:49Z"
      },
      "message": "Coins belonging to external HD are safe",
      "tree": {
        "sha": "b380e0fba8e85b4c7a3d76004901ec9446b11fcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b380e0fba8e85b4c7a3d76004901ec9446b11fcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcded2e6078aca907275ffab660404acc2d0f12d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcded2e6078aca907275ffab660404acc2d0f12d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcded2e6078aca907275ffab660404acc2d0f12d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcded2e6078aca907275ffab660404acc2d0f12d/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f613d2e945b3ef4e4e23d1d885acc62dae003f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08f613d2e945b3ef4e4e23d1d885acc62dae003f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4bd6f4d83319aa858e73c3bffc40f8bdcc9dab4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcded2e6078aca907275ffab660404acc2d0f12d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcded2e6078aca907275ffab660404acc2d0f12d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bcded2e6078aca907275ffab660404acc2d0f12d",
        "patch": "@@ -1932,8 +1932,18 @@ bool CWalletTx::IsTrusted() const\n         if (parent == NULL)\n             return false;\n         const CTxOut& parentOut = parent->tx->vout[txin.prevout.n];\n-        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n-            return false;\n+        const auto& isMine = pwallet->IsMine(parentOut);\n+        if (isMine != ISMINE_SPENDABLE)\n+        {\n+            // If the wallet is external HD, check if it is a key we generated\n+            if (!pwallet->IsExternalHD() || isMine != ISMINE_WATCH_SOLVABLE)\n+                return false;\n+            const auto& meta = pwallet->mapKeyMetadata;\n+            auto it = meta.find(CScriptID(parentOut.scriptPubKey));\n+            if (it == meta.end() ||\n+                it->second.hdKeypath.empty())\n+                return false;\n+        }\n     }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "578e8da5dee10279d69a87127a30a2e4aa321ba3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzhlOGRhNWRlZTEwMjc5ZDY5YTg3MTI3YTMwYTJlNGFhMzIxYmEz",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-06-18T04:31:34Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-03T14:47:52Z"
      },
      "message": "[RPC] Add External HD key to getwalletinfo",
      "tree": {
        "sha": "cdd13dbe35d532f26239910e16358a91c5dbc97a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdd13dbe35d532f26239910e16358a91c5dbc97a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/578e8da5dee10279d69a87127a30a2e4aa321ba3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578e8da5dee10279d69a87127a30a2e4aa321ba3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/578e8da5dee10279d69a87127a30a2e4aa321ba3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578e8da5dee10279d69a87127a30a2e4aa321ba3/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcded2e6078aca907275ffab660404acc2d0f12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcded2e6078aca907275ffab660404acc2d0f12d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcded2e6078aca907275ffab660404acc2d0f12d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0fa732daddb826f6beaff3d9d99dce6b6767773f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/578e8da5dee10279d69a87127a30a2e4aa321ba3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/578e8da5dee10279d69a87127a30a2e4aa321ba3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=578e8da5dee10279d69a87127a30a2e4aa321ba3",
        "patch": "@@ -2510,7 +2510,8 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n             \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"     (string) the Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"   (string) the Hash160 of the HD master pubkey\\n\" + \n+            \"  \\\"externalhdkey\\\": \\\"<hdpubkey>\\\"  (string) the extended pubkey used for key derivation in external HD mode\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2537,6 +2538,10 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (pwallet->IsCrypted()) {\n         obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n     }\n+    if (pwallet->IsExternalHD()) {\n+        CBitcoinExtPubKey watchOnly(pwallet->GetHDChain().externalHD);\n+        obj.push_back(Pair(\"externalhdkey\", watchOnly.ToString()));\n+    }\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     if (!masterKeyID.IsNull())\n          obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));"
      }
    ]
  },
  {
    "sha": "1cac7a66e8d016993a30ad8397590dd759cc1dbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2FjN2E2NmU4ZDAxNjk5M2EzMGFkODM5NzU5MGRkNzU5Y2MxZGJk",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-13T07:22:45Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-03T14:59:10Z"
      },
      "message": "[Tests] ExternalHD tests",
      "tree": {
        "sha": "6b28d3ffcee3fcaec3f6746779810eadfff50df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b28d3ffcee3fcaec3f6746779810eadfff50df0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cac7a66e8d016993a30ad8397590dd759cc1dbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cac7a66e8d016993a30ad8397590dd759cc1dbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cac7a66e8d016993a30ad8397590dd759cc1dbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cac7a66e8d016993a30ad8397590dd759cc1dbd/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "578e8da5dee10279d69a87127a30a2e4aa321ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578e8da5dee10279d69a87127a30a2e4aa321ba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/578e8da5dee10279d69a87127a30a2e4aa321ba3"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 111,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a730c92ea6497d92e123e92fec81a55fb5790aa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cac7a66e8d016993a30ad8397590dd759cc1dbd/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cac7a66e8d016993a30ad8397590dd759cc1dbd/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1cac7a66e8d016993a30ad8397590dd759cc1dbd",
        "patch": "@@ -243,6 +243,11 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                     ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n                 }\n             }\n+\n+\t        if (pwallet->IsExternalHD()) {\n+                CBitcoinExtPubKey externalHD(pwallet->GetHDChain().externalHD);\n+                ret.push_back(Pair(\"externalhdkey\", externalHD.ToString()));\n+            }\n         }\n #endif\n     }"
      },
      {
        "sha": "11115c97fb22deac96cf7c2cbe1381b04ac9a9ef",
        "filename": "test/functional/externalhd.py",
        "status": "added",
        "additions": 105,
        "deletions": 0,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cac7a66e8d016993a30ad8397590dd759cc1dbd/test/functional/externalhd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cac7a66e8d016993a30ad8397590dd759cc1dbd/test/functional/externalhd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/externalhd.py?ref=1cac7a66e8d016993a30ad8397590dd759cc1dbd",
        "patch": "@@ -0,0 +1,105 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ExternalHDTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def setup_network(self, split=False):\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [['-externalhd=tpubD6NzVbkrYhZ4YMc8VtVEChv2fv6eB5RK8ZKmn52hFuqmbGwauf1NjuzzscFzikw7sa41mdE46d9w274Gw29WuFkeVw2VESXxgcMwBQ6NNSf'],[]])\n+        self.is_network_split=False\n+\n+    def run_test(self):\n+        print(\"Mining blocks...\")\n+\n+        # tprv8ZgxMBicQKsPetaLcEpdoJFv6tai1kEQZFizVYzPqe3NkngpHGBnZRP8hUVrrxgaXgckrr2V38HKMTzPMGG5cJq6RymQ1Bn8v9ACJgh9RvG\n+\n+        # Can generate change address\n+        address = self.nodes[0].getrawchangeaddress()\n+        assert_equal(address, 'mvumWx631FFTDtgWP55ph623xvUfp5Y1xz')\n+        validated_address = self.nodes[0].validateaddress(address)\n+        assert_equal(validated_address['hdkeypath'], 'm/1/0')\n+        address = self.nodes[0].getrawchangeaddress()\n+        assert_equal(address, 'mkrg25GL23RAdnhP6Ttxtu7DzgknmZz3yc')\n+        validated_address = self.nodes[0].validateaddress(address)\n+        assert_equal(validated_address['hdkeypath'], 'm/1/1')\n+\n+        # Check if getwalletinfo show the external hd pubkey info\n+        assert_equal(self.nodes[0].getwalletinfo()[\"externalhdkey\"], 'tpubD6NzVbkrYhZ4YMc8VtVEChv2fv6eB5RK8ZKmn52hFuqmbGwauf1NjuzzscFzikw7sa41mdE46d9w274Gw29WuFkeVw2VESXxgcMwBQ6NNSf')\n+        assert_equal(self.nodes[0].getwalletinfo()[\"externalhdkey\"], validated_address[\"externalhdkey\"])\n+\n+        # Can generate new address (m/0/0 is generated by default at wallet creation)\n+        address = self.nodes[0].getnewaddress()\n+        assert_equal(address, 'mxKeRQP6gTdCW6jHhn9FW8bGXD8W1UpR6n')\n+        validated_address = self.nodes[0].validateaddress(address)\n+        assert_equal(validated_address['hdkeypath'], 'm/0/1')\n+\n+        self.nodes[0].generatetoaddress(1, address)\n+        self.nodes[0].generate(101)\n+\n+        unspent = self.nodes[0].listunspent()\n+        assert_equal(len(unspent), 2)\n+\n+        # generatetoaddress with p2pkh\n+        assert_equal(unspent[0]['solvable'], True)\n+\n+        # generate mine to p2pk, so let's just be sure we can solve it\n+        assert_equal(unspent[1]['solvable'], True)\n+\n+        self.stop_nodes()\n+\n+        # check for graceful failure due to any invalid external hd parameters\n+        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-externalhd=eopipwd'],\n+        'Invalid ExtPubKey format')\n+        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-externalhd=tprv8ZgxMBicQKsPetaLcEpdoJFv6tai1kEQZFizVYzPqe3NkngpHGBnZRP8hUVrrxgaXgckrr2V38HKMTzPMGG5cJq6RymQ1Bn8v9ACJgh9RvG'],\n+        'Invalid ExtPubKey format')\n+        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-externalhd=xpubD6NzVbkrYhZ4YTNYPw3XmSoBRZWmfn8mRerv3SEaC8UFiz5geKgCJH42cp9KUzRcfQNSuCQgdM1grUH7FgWYahWKDST3E9NYJMBwMKooTaY'],\n+        'Invalid ExtPubKey format')\n+\n+        # should restart fine if external hd is the same as current wallet\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [['-externalhd=tpubD6NzVbkrYhZ4YMc8VtVEChv2fv6eB5RK8ZKmn52hFuqmbGwauf1NjuzzscFzikw7sa41mdE46d9w274Gw29WuFkeVw2VESXxgcMwBQ6NNSf'],[]])\n+\n+        self.stop_nodes()\n+        # should not restart if external hd is different from the current one\n+        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-externalhd=tpubD6NzVbkrYhZ4YTNYPw3XmSoBRZWmfn8mRerv3SEaC8UFiz5geKgCJH42cp9KUzRcfQNSuCQgdM1grUH7FgWYahWKDST3E9NYJMBwMKooTaY'],\n+        'Cannot specify new external hd on an already existing wallet')\n+\n+        # check the hdkeypath has persisted\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [[],[]])\n+        validated_address = self.nodes[0].validateaddress('mxKeRQP6gTdCW6jHhn9FW8bGXD8W1UpR6n')\n+        assert_equal(validated_address['hdkeypath'], 'm/0/1')\n+\n+        # check the hd key has persisted\n+        address = self.nodes[0].getnewaddress()\n+        assert_equal(address, 'moZamE3ykhxM5kuBNfnDLnH3iAGd5f8gS5')\n+        validated_address = self.nodes[0].validateaddress(address)\n+        assert_equal(validated_address['hdkeypath'], 'm/0/3')\n+\n+        # check that scriptPubKey generated by external hd are safe\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(2, self.options.tmpdir, [[],[]])\n+        unspent = self.nodes[0].listunspent()\n+        assert_equal(len(unspent), 2)\n+        connect_nodes(self.nodes[1], 0)\n+        sync_chain([self.nodes[0], self.nodes[1]])\n+        # using private key of mxKeRQP6gTdCW6jHhn9FW8bGXD8W1UpR6n\n+        self.nodes[1].importprivkey(\"cTNoggeWzJPVK2EQtLb3Yj1J4sxH8Ktx81X9NvxUFwBv1RoPrxUA\")\n+        self.nodes[1].sendtoaddress(\"moZamE3ykhxM5kuBNfnDLnH3iAGd5f8gS5\", \"0.1\")\n+        sync_mempools([self.nodes[0], self.nodes[1]])\n+        unspent = self.nodes[0].listunspent(0)\n+        # The unconfirmed transaction should be safe\n+        safe_unconf_found = False\n+        for utxo in unspent:\n+            safe_unconf_found |= (utxo[\"confirmations\"] == 0 and utxo[\"safe\"])\n+        assert(safe_unconf_found)\n+\n+if __name__ == '__main__':\n+    ExternalHDTest().main()"
      },
      {
        "sha": "d63402a39568d75fa7c6186806d2f34d1e97291e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cac7a66e8d016993a30ad8397590dd759cc1dbd/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cac7a66e8d016993a30ad8397590dd759cc1dbd/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1cac7a66e8d016993a30ad8397590dd759cc1dbd",
        "patch": "@@ -116,6 +116,7 @@\n     'p2p-leaktests.py',\n     'wallet-encryption.py',\n     'uptime.py',\n+    'externalhd.py'\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  }
]