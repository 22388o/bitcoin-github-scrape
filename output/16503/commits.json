[
  {
    "sha": "b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2I5ZjZlNGNlZTI2MjAwNDY0M2UyZmUwM2Q1NmNiNDdmZGJmNWMy",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-07-30T22:08:03Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-08-09T02:57:35Z"
      },
      "message": "Remove p2pEnabled from Chain interface\n\nRPC server starts in warmup mode, it can't\nprocess yet calls, then follows connection manager\ninitialization and finally RPC server get out of\nwarmup mode. RPC calls shouldn't be able to get\nP2P disabled errors because once we initialize\ng_connman it's not unset until shutdown, after\nRPC server has been stopped.",
      "tree": {
        "sha": "2f568f5e17b75577645a2b00159baed7c9833651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f568f5e17b75577645a2b00159baed7c9833651"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 3,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b8b9ecded9f6e3f962a13d6556a56187b3e2f5a6",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
        "patch": "@@ -332,7 +332,6 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return ::fHavePruned;\n     }\n-    bool p2pEnabled() override { return g_connman != nullptr; }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override { return ::ChainstateActive().IsInitialBlockDownload(); }\n     bool shutdownRequested() override { return ShutdownRequested(); }"
      },
      {
        "sha": "da670a337064a7dc7311231cba2cbfbb397643a5",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
        "patch": "@@ -187,9 +187,6 @@ class Chain\n     //! Check if any block has been pruned.\n     virtual bool havePruned() = 0;\n \n-    //! Check if p2p enabled.\n-    virtual bool p2pEnabled() = 0;\n-\n     //! Check if the node is ready to broadcast transactions.\n     virtual bool isReadyToBroadcast() = 0;\n "
      },
      {
        "sha": "a28136a8e8ad49e5df33fbba48e07de6e005a51d",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
        "patch": "@@ -16,6 +16,9 @@\n \n TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n+    // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n+    // g_connman is assigned both before chain clients and before RPC server is accepting calls,\n+    // and reset after chain clients and RPC sever are stopped. g_connman should never be null here.\n     assert(g_connman);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();"
      },
      {
        "sha": "cbab73d612a6aab24d34cd5440e947f26e631bc5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b7b9f6e4cee262004643e2fe03d56cb47fdbf5c2",
        "patch": "@@ -309,10 +309,6 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n-\n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n@@ -845,10 +841,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n-\n     if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n     }"
      }
    ]
  }
]