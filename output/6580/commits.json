[
  {
    "sha": "2ab2bc3117210989cb0af7a2f4d9f80272203db3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWIyYmMzMTE3MjEwOTg5Y2IwYWY3YTJmNGQ5ZjgwMjcyMjAzZGIz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-08-21T07:06:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-09-24T15:03:45Z"
      },
      "message": "[UniValue] replace global function find_value with UniValue::findValue()\n\nThe global function `find_value()` was implemented in UniValue to allow compatibility with JsonSpirit. This is no longer required and we should therefore move it to the UniValue object context.",
      "tree": {
        "sha": "e24b42a453ae21efc5b5355a680f9f34933dd370",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e24b42a453ae21efc5b5355a680f9f34933dd370"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ab2bc3117210989cb0af7a2f4d9f80272203db3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab2bc3117210989cb0af7a2f4d9f80272203db3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ab2bc3117210989cb0af7a2f4d9f80272203db3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab2bc3117210989cb0af7a2f4d9f80272203db3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999c8be81a00146cc0ee0f6fb49104e906e08835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999c8be81a00146cc0ee0f6fb49104e906e08835",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999c8be81a00146cc0ee0f6fb49104e906e08835"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 51,
      "deletions": 55
    },
    "files": [
      {
        "sha": "1b9f746601f067953ccf411362dec6ab00255077",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -244,8 +244,8 @@ int CommandLineRPC(int argc, char *argv[])\n                 const UniValue reply = CallRPC(strMethod, params);\n \n                 // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n+                const UniValue& result = reply.findValue(\"result\");\n+                const UniValue& error  = reply.findValue(\"error\");\n \n                 if (!error.isNull()) {\n                     // Error\n@@ -256,8 +256,8 @@ int CommandLineRPC(int argc, char *argv[])\n                     nRet = abs(code);\n                     if (error.isObject())\n                     {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n+                        UniValue errCode = error.findValue(\"code\");\n+                        UniValue errMsg  = error.findValue(\"message\");\n                         strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n \n                         if (errMsg.isStr())"
      },
      {
        "sha": "9f008f7e1a022209bb7ca961a1e6609ff1b559f1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -222,8 +222,8 @@ void RPCExecutor::request(const QString &command)\n     {\n         try // Nice formatting for standard-format error\n         {\n-            int code = find_value(objError, \"code\").get_int();\n-            std::string message = find_value(objError, \"message\").get_str();\n+            int code = objError.findValue(\"code\").get_int();\n+            std::string message = objError.findValue(\"message\").get_str();\n             Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n         catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message"
      },
      {
        "sha": "135b51ec8cd5743ea04aadec933ee37c0b5908f4",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -388,7 +388,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     if (params.size() > 0)\n     {\n         const UniValue& oparam = params[0].get_obj();\n-        const UniValue& modeval = find_value(oparam, \"mode\");\n+        const UniValue& modeval = oparam.findValue(\"mode\");\n         if (modeval.isStr())\n             strMode = modeval.get_str();\n         else if (modeval.isNull())\n@@ -397,11 +397,11 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         }\n         else\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n-        lpval = find_value(oparam, \"longpollid\");\n+        lpval = oparam.findValue(\"longpollid\");\n \n         if (strMode == \"proposal\")\n         {\n-            const UniValue& dataval = find_value(oparam, \"data\");\n+            const UniValue& dataval = oparam.findValue(\"data\");\n             if (!dataval.isStr())\n                 throw JSONRPCError(RPC_TYPE_ERROR, \"Missing data String key for proposal\");\n "
      },
      {
        "sha": "c925b01d507dd1d5a84218f45868127943168d6f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -364,7 +364,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n \n         uint256 txid = ParseHashO(o, \"txid\");\n \n-        const UniValue& vout_v = find_value(o, \"vout\");\n+        const UniValue& vout_v = o.findValue(\"vout\");\n         if (!vout_v.isNum())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n         int nOutput = vout_v.get_int();\n@@ -665,7 +665,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n-            int nOut = find_value(prevOut, \"vout\").get_int();\n+            int nOut = prevOut.findValue(\"vout\").get_int();\n             if (nOut < 0)\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n \n@@ -690,7 +690,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n                 RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n-                UniValue v = find_value(prevOut, \"redeemScript\");\n+                UniValue v = prevOut.findValue(\"redeemScript\");\n                 if (!v.isNull()) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());"
      },
      {
        "sha": "2d26fe7705d886dfcd216c71ab007287cb4a8e2b",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -93,7 +93,7 @@ void RPCTypeCheckObj(const UniValue& o,\n {\n     BOOST_FOREACH(const PAIRTYPE(string, UniValue::VType)& t, typesExpected)\n     {\n-        const UniValue& v = find_value(o, t.first);\n+        const UniValue& v = o.findValue(t.first);\n         if (!fAllowNull && v.isNull())\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n \n@@ -141,7 +141,7 @@ uint256 ParseHashV(const UniValue& v, string strName)\n }\n uint256 ParseHashO(const UniValue& o, string strKey)\n {\n-    return ParseHashV(find_value(o, strKey), strKey);\n+    return ParseHashV(o.findValue(strKey), strKey);\n }\n vector<unsigned char> ParseHexV(const UniValue& v, string strName)\n {\n@@ -154,7 +154,7 @@ vector<unsigned char> ParseHexV(const UniValue& v, string strName)\n }\n vector<unsigned char> ParseHexO(const UniValue& o, string strKey)\n {\n-    return ParseHexV(find_value(o, strKey), strKey);\n+    return ParseHexV(o.findValue(strKey), strKey);\n }\n \n /**\n@@ -448,10 +448,10 @@ void JSONRequest::parse(const UniValue& valRequest)\n     const UniValue& request = valRequest.get_obj();\n \n     // Parse id now so errors from here on will have the id\n-    id = find_value(request, \"id\");\n+    id = request.findValue(\"id\");\n \n     // Parse method\n-    UniValue valMethod = find_value(request, \"method\");\n+    UniValue valMethod = request.findValue(\"method\");\n     if (valMethod.isNull())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n     if (!valMethod.isStr())\n@@ -461,7 +461,7 @@ void JSONRequest::parse(const UniValue& valRequest)\n         LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n-    UniValue valParams = find_value(request, \"params\");\n+    UniValue valParams = request.findValue(\"params\");\n     if (valParams.isArray())\n         params = valParams.get_array();\n     else if (valParams.isNull())"
      },
      {
        "sha": "b5775ee90db9cc72d101c094869018ffa72c3fce",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -137,15 +137,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n+        bool isPrivkey = metadata.findValue(\"isPrivkey\").get_bool();\n+        bool isTestnet = metadata.findValue(\"isTestnet\").get_bool();\n         if (isTestnet)\n             SelectParams(CBaseChainParams::TESTNET);\n         else\n             SelectParams(CBaseChainParams::MAIN);\n         if(isPrivkey)\n         {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            bool isCompressed = metadata.findValue(\"isCompressed\").get_bool();\n             // Must be valid private key\n             // Note: CBitcoinSecret::SetString tests isValid, whereas CBitcoinAddress does not!\n             BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n@@ -160,7 +160,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         }\n         else\n         {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str(); // \"script\" or \"pubkey\"\n+            std::string exp_addrType = metadata.findValue(\"addrType\").get_str(); // \"script\" or \"pubkey\"\n             // Must be valid public key\n             BOOST_CHECK_MESSAGE(addr.SetString(exp_base58string), \"SetString:\" + strTest);\n             BOOST_CHECK_MESSAGE(addr.IsValid(), \"!IsValid:\" + strTest);\n@@ -192,15 +192,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n+        bool isPrivkey = metadata.findValue(\"isPrivkey\").get_bool();\n+        bool isTestnet = metadata.findValue(\"isTestnet\").get_bool();\n         if (isTestnet)\n             SelectParams(CBaseChainParams::TESTNET);\n         else\n             SelectParams(CBaseChainParams::MAIN);\n         if(isPrivkey)\n         {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            bool isCompressed = metadata.findValue(\"isCompressed\").get_bool();\n             CKey key;\n             key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n             assert(key.IsValid());\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         }\n         else\n         {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str();\n+            std::string exp_addrType = metadata.findValue(\"addrType\").get_str();\n             CTxDestination dest;\n             if(exp_addrType == \"pubkey\")\n             {"
      },
      {
        "sha": "a2fc5a1b074c1093b6d4cae82227607e7e10d473",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -43,7 +43,7 @@ UniValue CallRPC(string args)\n         return result;\n     }\n     catch (const UniValue& objError) {\n-        throw runtime_error(find_value(objError, \"message\").get_str());\n+        throw runtime_error(objError.findValue(\"message\").get_str());\n     }\n }\n \n@@ -72,8 +72,8 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(\"decoderawtransaction DEADBEEF\"), runtime_error);\n     string rawtx = \"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000\";\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx));\n-    BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"version\").get_int(), 1);\n-    BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n+    BOOST_CHECK_EQUAL(r.get_obj().findValue(\"version\").get_int(), 1);\n+    BOOST_CHECK_EQUAL(r.get_obj().findValue(\"locktime\").get_int(), 0);\n     BOOST_CHECK_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx+\" extra\"), runtime_error);\n \n     BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), runtime_error);\n@@ -105,9 +105,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n     r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n-    BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n+    BOOST_CHECK(r.get_obj().findValue(\"complete\").get_bool() == false);\n     r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n-    BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n+    BOOST_CHECK(r.get_obj().findValue(\"complete\").get_bool() == true);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n@@ -234,7 +234,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     UniValue ar = r.get_array();\n     UniValue o1 = ar[0].get_obj();\n-    UniValue adr = find_value(o1, \"address\");\n+    UniValue adr = o1.findValue(\"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/32\");\n     BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0 remove\")));;\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n@@ -245,7 +245,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n+    adr = o1.findValue(\"address\");\n     UniValue banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/24\");\n     BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n@@ -256,7 +256,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n+    adr = o1.findValue(\"address\");\n     banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/24\");\n     int64_t now = GetTime();    \n@@ -287,23 +287,23 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n+    adr = o1.findValue(\"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"fe80::202:b3ff:fe1e:8329/128\");\n \n     BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:db8::/ffff:fffc:0:0:0:0:0:0 add\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n+    adr = o1.findValue(\"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"2001:db8::/30\");\n \n     BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128 add\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n+    adr = o1.findValue(\"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128\");\n }\n "
      },
      {
        "sha": "6a59e6fe7d967c7674a114c141aa441e07ae083e",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -164,6 +164,16 @@ int UniValue::findKey(const std::string& key) const\n     return -1;\n }\n \n+const UniValue UniValue::findValue(const std::string& key) const\n+{\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key)\n+            return values[i];\n+    }\n+\n+    return NullUniValue;\n+}\n+\n bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n {\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n@@ -216,19 +226,6 @@ const char *uvTypeName(UniValue::VType t)\n     return NULL;\n }\n \n-const UniValue& find_value( const UniValue& obj, const std::string& name)\n-{\n-    for (unsigned int i = 0; i < obj.keys.size(); i++)\n-    {\n-        if( obj.keys[i] == name )\n-        {\n-            return obj.values[i];\n-        }\n-    }\n-\n-    return NullUniValue;\n-}\n-\n std::vector<std::string> UniValue::getKeys() const\n {\n     if (typ != VOBJ)"
      },
      {
        "sha": "987986588708d0fa68490ab60580448a79017c11",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -154,7 +154,8 @@ class UniValue {\n     bool push_back(std::pair<std::string,UniValue> pear) {\n         return pushKV(pear.first, pear.second);\n     }\n-    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n+    //!return a value if key was found (only supports VOBJ types)\n+    const UniValue findValue(const std::string& key) const;\n };\n \n //\n@@ -243,6 +244,4 @@ extern const char *uvTypeName(UniValue::VType t);\n \n extern const UniValue NullUniValue;\n \n-const UniValue& find_value( const UniValue& obj, const std::string& name);\n-\n #endif // BITCOIN_UNIVALUE_UNIVALUE_H"
      },
      {
        "sha": "ca0245317a768f830a7eb790c112b123a5613852",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab2bc3117210989cb0af7a2f4d9f80272203db3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "patch": "@@ -2088,11 +2088,11 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n \n         RPCTypeCheckObj(o, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM));\n \n-        string txid = find_value(o, \"txid\").get_str();\n+        string txid = o.findValue(\"txid\").get_str();\n         if (!IsHex(txid))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n \n-        int nOutput = find_value(o, \"vout\").get_int();\n+        int nOutput = o.findValue(\"vout\").get_int();\n         if (nOutput < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n "
      }
    ]
  },
  {
    "sha": "cc1e72f95d79d4b2c0951210af5eee84d9413571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzFlNzJmOTVkNzlkNGIyYzA5NTEyMTBhZjVlZWU4NGQ5NDEzNTcx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-08-21T07:14:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-09-25T13:49:22Z"
      },
      "message": "[UniValue] add UniValue::findValue() tests",
      "tree": {
        "sha": "f812ff6ef98063de260492ac8d9107af7669f9dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f812ff6ef98063de260492ac8d9107af7669f9dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc1e72f95d79d4b2c0951210af5eee84d9413571",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc1e72f95d79d4b2c0951210af5eee84d9413571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc1e72f95d79d4b2c0951210af5eee84d9413571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc1e72f95d79d4b2c0951210af5eee84d9413571/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab2bc3117210989cb0af7a2f4d9f80272203db3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ab2bc3117210989cb0af7a2f4d9f80272203db3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8a992bfe8a14826d7a4502d011c446ab31ddd9ee",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc1e72f95d79d4b2c0951210af5eee84d9413571/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc1e72f95d79d4b2c0951210af5eee84d9413571/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=cc1e72f95d79d4b2c0951210af5eee84d9413571",
        "patch": "@@ -59,7 +59,7 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n {\n     // Send error reply from json-rpc error object\n     int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n-    int code = find_value(objError, \"code\").get_int();\n+    int code = objError.findValue(\"code\").get_int();\n \n     if (code == RPC_INVALID_REQUEST)\n         nStatus = HTTP_BAD_REQUEST;"
      },
      {
        "sha": "cdfed35462c779607b051f7f23d1a00fe5fb2f74",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc1e72f95d79d4b2c0951210af5eee84d9413571/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc1e72f95d79d4b2c0951210af5eee84d9413571/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=cc1e72f95d79d4b2c0951210af5eee84d9413571",
        "patch": "@@ -246,7 +246,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = o1.findValue(\"address\");\n-    UniValue banned_until = find_value(o1, \"banned_until\");\n+    UniValue banned_until = o1.findValue(\"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/24\");\n     BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n \n@@ -257,7 +257,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = o1.findValue(\"address\");\n-    banned_until = find_value(o1, \"banned_until\");\n+    banned_until = o1.findValue(\"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/24\");\n     int64_t now = GetTime();    \n     BOOST_CHECK(banned_until.get_int64() > now);"
      },
      {
        "sha": "38af7d2a964fcfa8d9833fc1cac8371a30c2d262",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc1e72f95d79d4b2c0951210af5eee84d9413571/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc1e72f95d79d4b2c0951210af5eee84d9413571/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=cc1e72f95d79d4b2c0951210af5eee84d9413571",
        "patch": "@@ -280,6 +280,18 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"cat2\"] = UniValue::VSTR;\n     BOOST_CHECK(!obj.checkObject(objTypes));\n \n+    UniValue obj3(UniValue::VOBJ);\n+    BOOST_CHECK(obj3.pushKV(\"eyes\", \"open\"));\n+    BOOST_CHECK(obj3.pushKV(\"speed\", 1337));\n+    BOOST_CHECK(obj.pushKV(\"details\", obj3));\n+\n+    BOOST_CHECK_EQUAL(obj.findValue(\"first\").get_str(), \"John\");\n+    BOOST_CHECK_EQUAL(obj.findValue(\"distance\").get_int(), 25);\n+    BOOST_CHECK_EQUAL(obj.findValue(\"details\").findValue(\"eyes\").get_str(), \"open\");\n+    BOOST_CHECK_EQUAL(obj.findValue(\"details\").findValue(\"speed\").get_int(), 1337);\n+\n+    BOOST_CHECK(obj.findValue(\"notavailable\").isNull());\n+\n     obj.clear();\n     BOOST_CHECK(obj.empty());\n     BOOST_CHECK_EQUAL(obj.size(), 0);"
      }
    ]
  }
]