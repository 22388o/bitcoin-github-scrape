hebasto,2021-01-20 20:56:28,"It seems reasonable to add a lock assertion into the `CTxMemPool::check`, no?",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-763935803,763935803,
dongcarl,2021-01-20 21:05:53,"> It seems reasonable to add a lock assertion into the `CTxMemPool::check`, no?\n\nNot sure what you mean by this? Do you mean adding an `AssertLockHeld(::cs_main)` instead of the annotation?",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-763946197,763946197,
hebasto,2021-01-20 21:07:23,"> > It seems reasonable to add a lock assertion into the `CTxMemPool::check`, no?\n> \n> Not sure what you mean by this? Do you mean adding an `AssertLockHeld(::cs_main)` instead of the annotation?\n\nBoth. Annotation for compile-time check, and assertion for run-time check.\n\nEDIT: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-763946886,763946886,
dongcarl,2021-01-20 21:18:31,"Thanks @hebasto, made the changes!",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-763952918,763952918,
jnewbery,2021-01-21 08:58:18,"Code review ACK b3964670537d0943b8fb2d8f2ea419cbefd4835a\n\nVerified that the three call sites (two in net_processing.cpp and one in validation.cpp) all hold cs_main before calling mempool.check().",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-764485245,764485245,
MarcoFalke,2021-01-21 11:50:03,">  if you add documentation\n\nIf this is changed, I'd prefer to add the lock annotations (to GetSpendHeight and maybe others), so that the code is self-documenting. As in: Accidentally removing a lock(annotation) will fail to compile with a verbose reason.",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-764590363,764590363,
jnewbery,2021-01-21 13:44:20,"> Happy to re-ACK if you add documentation or update the commit message with the info in #20972 (comment).\n\nI wasn't really suggesting that we add documentation, just that we don't add misleading documentation that cs_main is only needed for GetSpendHeight. I can see the benefit to documenting the reasoning in the commit log, and would be happy to reACK a push that adds that commit message.\n",https://github.com/bitcoin/bitcoin/pull/20972#issuecomment-764651631,764651631,
hebasto,2021-01-20 20:52:20,"Maybe use explicit global namespace\n```suggestion\n    void check(const CCoinsViewCache *pcoins) const EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n```\n?",https://github.com/bitcoin/bitcoin/pull/20972#discussion_r561295734,561295734,src/txmempool.h
MarcoFalke,2021-01-21 09:53:37,"```suggestion\n    AssertLockHeld(::cs_main); // for GetSpendHeight\n```\n\nnit: Could mention for which function this is needed?\n\nnit: Since all callers of `GetSpendHeight` already have cs_main, would it make sense to remove the recursive lock from `GetSpendHeight` itself and replace it with a debug-only/compile-only AssertLockHeld/EXCLUSIVE_LOCKS_REQUIRED?",https://github.com/bitcoin/bitcoin/pull/20972#discussion_r561739916,561739916,src/txmempool.cpp
jnewbery,2021-01-21 10:37:30,"> Could mention for which function this is needed?\n\nI've dug into this function a bit more, and I think it's more than that. `check()` takes a copy of the CoinsTip:\n\nhttps://github.com/bitcoin/bitcoin/blob/3734adba390cef881445c4de780e2a3bb080c512/src/txmempool.cpp#L627\n\nand is then fetching coins from that `CCoinsViewCache` via `CheckTxInputs()`:\n\nhttps://github.com/bitcoin/bitcoin",https://github.com/bitcoin/bitcoin/pull/20972#discussion_r561770045,561770045,src/txmempool.cpp
