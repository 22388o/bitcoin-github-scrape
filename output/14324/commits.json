[
  {
    "sha": "faa4043c660c9a61d304ba1375ce7a32e576ae79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE0MDQzYzY2MGM5YTYxZDMwNGJhMTM3NWNlN2EzMmU1NzZhZTc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-23T15:34:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-25T22:08:08Z"
      },
      "message": "qa: Run more tests with wallet disabled",
      "tree": {
        "sha": "afbf08cedc6ac0e2f9388ad7641c8f263309ac3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afbf08cedc6ac0e2f9388ad7641c8f263309ac3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa4043c660c9a61d304ba1375ce7a32e576ae79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbqrHIAAoJEM4rdWl+aaVIwkQL+gLSlKYgeKBZiWboGy1zoMAB\nvmRW69bUcJ4iqcZ6AEwYgfuYe4S6cBYJLp8Ne+JLNhlJcG+isBSPCKn63hdHYtQD\naSEpd23WQvwUPLe9QADq2rNuT/hkdw+0aFSSmRQGyC7E1JDbhGASNgAgiN33Wv+4\nxO1u64YWImy2BHi89tf/chF9G0uVqniexUssUB9K9+FCP+tQZ09Yqhcoo/aQv00g\n6G6wXGwxjF82wsfEIEe/HgkXOG2Fc3A3yEK/nB9e7DI0vJ3yv4+t+5x4FyWQl6gP\nJp8Wsile/260GCREbv3pRVZqgpd6oem1EFvxN828Slq4ogeGCEDaBnnlL9mMDYWx\nTOKjIiTDp8AF/bgRckHBNxOncH9D+UOCnunvUKn4qyTOEitbGZiiwhbeGvgbYQpg\nmnZE59JqN9K0MdLjwzA7D71blfRwdmCfYsHBCcSuDKVym9oLqPEGRPD3AQxaSAMk\nOieTIsWoVqS+P8yTrlRkbZYajgWkNmH5b5VHKvXM9w==\n=rVBH\n-----END PGP SIGNATURE-----",
        "payload": "tree afbf08cedc6ac0e2f9388ad7641c8f263309ac3f\nparent 9f94483b7ae3a89733d48679e9ac46c0a9b6deef\nauthor MarcoFalke <falke.marco@gmail.com> 1537716891 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1537913288 -0400\n\nqa: Run more tests with wallet disabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa4043c660c9a61d304ba1375ce7a32e576ae79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa4043c660c9a61d304ba1375ce7a32e576ae79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa4043c660c9a61d304ba1375ce7a32e576ae79/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f94483b7ae3a89733d48679e9ac46c0a9b6deef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f94483b7ae3a89733d48679e9ac46c0a9b6deef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f94483b7ae3a89733d48679e9ac46c0a9b6deef"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 63,
      "deletions": 54
    },
    "files": [
      {
        "sha": "647d1177335b0c48a16bf1321542132822dc5e0c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa4043c660c9a61d304ba1375ce7a32e576ae79/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa4043c660c9a61d304ba1375ce7a32e576ae79/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=faa4043c660c9a61d304ba1375ce7a32e576ae79",
        "patch": "@@ -121,7 +121,7 @@ jobs:\n     - stage: test\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3\"\n+        PACKAGES=\"python3-zmq\"\n         DEP_OPTS=\"NO_WALLET=1\"\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\""
      },
      {
        "sha": "492772d5e36e6bc39c5b09ae5dac3b1c4e510d27",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=faa4043c660c9a61d304ba1375ce7a32e576ae79",
        "patch": "@@ -14,9 +14,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def test_config_file_parser(self):\n         # Assume node is stopped\n \n@@ -68,13 +65,18 @@ def run_test(self):\n         # Temporarily disabled, because this test would access the user's home dir (~/.bitcoin)\n         #self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         #self.stop_node(0)\n+        #assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'blocks'))\n+        #if self.is_wallet_compiled():\n         #assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n-        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'blocks'))\n+        if self.is_wallet_compiled():\n+            assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+\n \n if __name__ == '__main__':\n     ConfArgsTest().main()"
      },
      {
        "sha": "90dc4c8e2bef576b0d7528d1650abb5a2704a76c",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=faa4043c660c9a61d304ba1375ce7a32e576ae79",
        "patch": "@@ -5,17 +5,16 @@\n \"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\"\n import os\n \n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until, connect_nodes_bi\n \n+\n class NotificationsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.alertnotify_dir = os.path.join(self.options.tmpdir, \"alertnotify\")\n         self.blocknotify_dir = os.path.join(self.options.tmpdir, \"blocknotify\")\n@@ -25,7 +24,7 @@ def setup_network(self):\n         os.mkdir(self.walletnotify_dir)\n \n         # -alertnotify and -blocknotify on node0, walletnotify on node1\n-        self.extra_args = [[\"-blockversion=2\",\n+        self.extra_args = [[\n                             \"-alertnotify=echo > {}\".format(os.path.join(self.alertnotify_dir, '%s')),\n                             \"-blocknotify=echo > {}\".format(os.path.join(self.blocknotify_dir, '%s'))],\n                            [\"-blockversion=211\",\n@@ -36,38 +35,39 @@ def setup_network(self):\n     def run_test(self):\n         self.log.info(\"test -blocknotify\")\n         block_count = 10\n-        blocks = self.nodes[1].generate(block_count)\n+        blocks = self.nodes[1].generatetoaddress(block_count, self.nodes[1].getnewaddress() if self.is_wallet_compiled() else ADDRESS_BCRT1_UNSPENDABLE)\n \n         # wait at most 10 seconds for expected number of files before reading the content\n         wait_until(lambda: len(os.listdir(self.blocknotify_dir)) == block_count, timeout=10)\n \n         # directory content should equal the generated blocks hashes\n         assert_equal(sorted(blocks), sorted(os.listdir(self.blocknotify_dir)))\n \n-        self.log.info(\"test -walletnotify\")\n-        # wait at most 10 seconds for expected number of files before reading the content\n-        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n+        if self.is_wallet_compiled():\n+            self.log.info(\"test -walletnotify\")\n+            # wait at most 10 seconds for expected number of files before reading the content\n+            wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n-        # directory content should equal the generated transaction hashes\n-        txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n-        assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n-        for tx_file in os.listdir(self.walletnotify_dir):\n-            os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+            # directory content should equal the generated transaction hashes\n+            txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n+            assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+            for tx_file in os.listdir(self.walletnotify_dir):\n+                os.remove(os.path.join(self.walletnotify_dir, tx_file))\n \n-        self.log.info(\"test -walletnotify after rescan\")\n-        # restart node to rescan to force wallet notifications\n-        self.restart_node(1)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+            self.log.info(\"test -walletnotify after rescan\")\n+            # restart node to rescan to force wallet notifications\n+            self.restart_node(1)\n+            connect_nodes_bi(self.nodes, 0, 1)\n \n-        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n+            wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n-        # directory content should equal the generated transaction hashes\n-        txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n-        assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+            # directory content should equal the generated transaction hashes\n+            txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n+            assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n \n         # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n         self.log.info(\"test -alertnotify\")\n-        self.nodes[1].generate(41)\n+        self.nodes[1].generatetoaddress(41, ADDRESS_BCRT1_UNSPENDABLE)\n         self.sync_all()\n \n         # Give bitcoind 10 seconds to write the alert notification\n@@ -77,7 +77,7 @@ def run_test(self):\n             os.remove(os.path.join(self.alertnotify_dir, notify_file))\n \n         # Mine more up-version blocks, should not get more alerts:\n-        self.nodes[1].generate(2)\n+        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n         self.sync_all()\n \n         self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")"
      },
      {
        "sha": "58cdaf861f7f78a70210aef1534efa1c33cee565",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=faa4043c660c9a61d304ba1375ce7a32e576ae79",
        "patch": "@@ -12,19 +12,17 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n         cli_response = self.nodes[0].cli(\"-version\").send_cli()\n         assert(\"Bitcoin Core RPC client version\" in cli_response)\n \n         self.log.info(\"Compare responses from gewalletinfo RPC and `bitcoin-cli getwalletinfo`\")\n-        cli_response = self.nodes[0].cli.getwalletinfo()\n-        rpc_response = self.nodes[0].getwalletinfo()\n-        assert_equal(cli_response, rpc_response)\n+        if self.is_wallet_compiled():\n+            cli_response = self.nodes[0].cli.getwalletinfo()\n+            rpc_response = self.nodes[0].getwalletinfo()\n+            assert_equal(cli_response, rpc_response)\n \n         self.log.info(\"Compare responses from getblockchaininfo RPC and `bitcoin-cli getblockchaininfo`\")\n         cli_response = self.nodes[0].cli.getblockchaininfo()\n@@ -52,26 +50,30 @@ def run_test(self):\n \n         self.log.info(\"Compare responses from `bitcoin-cli -getinfo` and the RPCs data is retrieved from.\")\n         cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n-        wallet_info = self.nodes[0].getwalletinfo()\n+        if self.is_wallet_compiled():\n+            wallet_info = self.nodes[0].getwalletinfo()\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()\n \n         assert_equal(cli_get_info['version'], network_info['version'])\n         assert_equal(cli_get_info['protocolversion'], network_info['protocolversion'])\n-        assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n-        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        if self.is_wallet_compiled():\n+            assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n+            assert_equal(cli_get_info['balance'], wallet_info['balance'])\n         assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n         assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n         assert_equal(cli_get_info['connections'], network_info['connections'])\n         assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n         assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n         assert_equal(cli_get_info['testnet'], blockchain_info['chain'] == \"test\")\n-        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n-        assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n-        assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n-        assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n-        assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n-        # unlocked_until is not tested because the wallet is not encrypted\n+        if self.is_wallet_compiled():\n+            assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+            assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n+            assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n+            assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n+            assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n+            # unlocked_until is not tested because the wallet is not encrypted\n+\n \n if __name__ == '__main__':\n     TestBitcoinCli().main()"
      },
      {
        "sha": "d544aaebe755f09d83b6ec5d04e537f06b4831b8",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=faa4043c660c9a61d304ba1375ce7a32e576ae79",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n from test_framework.util import (\n@@ -41,7 +42,6 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_py3_zmq()\n         self.skip_if_no_bitcoind_zmq()\n-        self.skip_if_no_wallet()\n \n     def setup_nodes(self):\n         import zmq\n@@ -81,7 +81,7 @@ def run_test(self):\n     def _zmq_test(self):\n         num_blocks = 5\n         self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n-        genhashes = self.nodes[0].generate(num_blocks)\n+        genhashes = self.nodes[0].generatetoaddress(num_blocks, ADDRESS_BCRT1_UNSPENDABLE)\n         self.sync_all()\n \n         for x in range(num_blocks):\n@@ -105,17 +105,19 @@ def _zmq_test(self):\n             block = self.rawblock.receive()\n             assert_equal(genhashes[x], bytes_to_hex_str(hash256(block[:80])))\n \n-        self.log.info(\"Wait for tx from second node\")\n-        payment_txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n-        self.sync_all()\n+        if self.is_wallet_compiled():\n+            self.log.info(\"Wait for tx from second node\")\n+            payment_txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n+            self.sync_all()\n+\n+            # Should receive the broadcasted txid.\n+            txid = self.hashtx.receive()\n+            assert_equal(payment_txid, bytes_to_hex_str(txid))\n \n-        # Should receive the broadcasted txid.\n-        txid = self.hashtx.receive()\n-        assert_equal(payment_txid, bytes_to_hex_str(txid))\n+            # Should receive the broadcasted raw transaction.\n+            hex = self.rawtx.receive()\n+            assert_equal(payment_txid, bytes_to_hex_str(hash256(hex)))\n \n-        # Should receive the broadcasted raw transaction.\n-        hex = self.rawtx.receive()\n-        assert_equal(payment_txid, bytes_to_hex_str(hash256(hex)))\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      },
      {
        "sha": "456d43aa2e683a4238fb0654561cc10e100ba201",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa4043c660c9a61d304ba1375ce7a32e576ae79/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=faa4043c660c9a61d304ba1375ce7a32e576ae79",
        "patch": "@@ -9,8 +9,11 @@\n \n from . import segwit_addr\n \n+ADDRESS_BCRT1_UNSPENDABLE = 'bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj'\n+\n chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n \n+\n def byte_to_base58(b, version):\n     result = ''\n     str = bytes_to_hex_str(b)"
      }
    ]
  }
]