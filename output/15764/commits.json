[
  {
    "sha": "e0c505d28a5c3d14ddc6bb90f6f0355541761768",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGM1MDVkMjhhNWMzZDE0ZGRjNmJiOTBmNmYwMzU1NTQxNzYxNzY4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-25T21:00:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:05Z"
      },
      "message": "Output a descriptor in createmultisig",
      "tree": {
        "sha": "e9b50ad6a3eca5d95c69df917413441c4c0a822b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9b50ad6a3eca5d95c69df917413441c4c0a822b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0c505d28a5c3d14ddc6bb90f6f0355541761768",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0c505d28a5c3d14ddc6bb90f6f0355541761768",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0c505d28a5c3d14ddc6bb90f6f0355541761768",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0c505d28a5c3d14ddc6bb90f6f0355541761768/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d37c1bde01a7c43ed7ac1ab50cc41ff7d849ca9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d37c1bde01a7c43ed7ac1ab50cc41ff7d849ca9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d37c1bde01a7c43ed7ac1ab50cc41ff7d849ca9"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "28ce382808f0eb31802d92c84ff47001ee3711cb",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c505d28a5c3d14ddc6bb90f6f0355541761768/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c505d28a5c3d14ddc6bb90f6f0355541761768/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e0c505d28a5c3d14ddc6bb90f6f0355541761768",
        "patch": "@@ -96,6 +96,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for the P2SH address for this multisig\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -134,9 +135,13 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     CBasicKeyStore keystore;\n     const CTxDestination dest = AddAndGetDestinationForScript(keystore, inner, output_type);\n \n+    // Make the descriptor\n+    std::unique_ptr<Descriptor> descriptor = InferDescriptor(GetScriptForDestination(dest), keystore);\n+\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n+    result.pushKV(\"descriptor\", descriptor->ToString());\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "7453e3e5f312b1b32d677451ae8064745a848b41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDUzZTNlNWYzMTJiMWIzMmQ2Nzc0NTFhZTgwNjQ3NDVhODQ4YjQx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-25T21:29:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:06Z"
      },
      "message": "Introduce m_set_scriptPubKey and check it in IsMine()\n\nAdds a set to CKeystore which contains scriptPubKeys being tracked.\nReturn ISMINE_SPENDABLE for anything in that set.",
      "tree": {
        "sha": "0029af01008edf5b89f35971f8db939c69a632cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0029af01008edf5b89f35971f8db939c69a632cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7453e3e5f312b1b32d677451ae8064745a848b41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7453e3e5f312b1b32d677451ae8064745a848b41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7453e3e5f312b1b32d677451ae8064745a848b41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7453e3e5f312b1b32d677451ae8064745a848b41/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0c505d28a5c3d14ddc6bb90f6f0355541761768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0c505d28a5c3d14ddc6bb90f6f0355541761768",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0c505d28a5c3d14ddc6bb90f6f0355541761768"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2159019cdbbc18492ff87d1235d9c355c5972b0f",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7453e3e5f312b1b32d677451ae8064745a848b41/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7453e3e5f312b1b32d677451ae8064745a848b41/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=7453e3e5f312b1b32d677451ae8064745a848b41",
        "patch": "@@ -174,6 +174,25 @@ bool CBasicKeyStore::HaveWatchOnly() const\n     return (!setWatchOnly.empty());\n }\n \n+bool CBasicKeyStore::HaveScriptPubKey(const CScript& script) const\n+{\n+    LOCK(cs_KeyStore);\n+    return m_set_scriptPubKey.count(script) > 0;\n+}\n+\n+bool CBasicKeyStore::HaveScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !m_set_scriptPubKey.empty();\n+}\n+\n+bool CBasicKeyStore::AddScriptPubKey(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    m_set_scriptPubKey.insert(script);\n+    return true;\n+}\n+\n CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,"
      },
      {
        "sha": "a9a09c7402428d1d8a89dd5486f9ead16933e569",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7453e3e5f312b1b32d677451ae8064745a848b41/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7453e3e5f312b1b32d677451ae8064745a848b41/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=7453e3e5f312b1b32d677451ae8064745a848b41",
        "patch": "@@ -36,6 +36,9 @@ class CKeyStore : public SigningProvider\n     virtual bool RemoveWatchOnly(const CScript &dest) =0;\n     virtual bool HaveWatchOnly(const CScript &dest) const =0;\n     virtual bool HaveWatchOnly() const =0;\n+    virtual bool HaveScriptPubKey(const CScript& script) const =0;\n+    virtual bool HaveScriptPubKeys() const =0;\n+    virtual bool AddScriptPubKey(const CScript& script) =0;\n };\n \n /** Basic key store, that keeps keys in an address->secret map */\n@@ -48,11 +51,13 @@ class CBasicKeyStore : public CKeyStore\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n     using ScriptMap = std::map<CScriptID, CScript>;\n     using WatchOnlySet = std::set<CScript>;\n+    using ScriptPubKeySet = std::set<CScript>;\n \n     KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n     WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n     ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n     WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    ScriptPubKeySet m_set_scriptPubKey GUARDED_BY(cs_KeyStore);\n \n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n@@ -72,6 +77,10 @@ class CBasicKeyStore : public CKeyStore\n     bool RemoveWatchOnly(const CScript &dest) override;\n     bool HaveWatchOnly(const CScript &dest) const override;\n     bool HaveWatchOnly() const override;\n+    bool HaveScriptPubKey(const CScript& script) const override;\n+    bool HaveScriptPubKeys() const override;\n+    bool AddScriptPubKey(const CScript& script) override;\n+\n };\n \n /** Return the CKeyID of the key involved in a script (if there is a unique one). */"
      },
      {
        "sha": "de69e722525af2ea4f8387e3bab314df4d2480e1",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7453e3e5f312b1b32d677451ae8064745a848b41/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7453e3e5f312b1b32d677451ae8064745a848b41/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=7453e3e5f312b1b32d677451ae8064745a848b41",
        "patch": "@@ -174,6 +174,9 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)\n {\n+    if (keystore.HaveScriptPubKey(scriptPubKey)) {\n+        return ISMINE_SPENDABLE;\n+    }\n     switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n     case IsMineResult::INVALID:\n     case IsMineResult::NO:"
      }
    ]
  },
  {
    "sha": "e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDY3ZWY5ZTRhM2Q5ODM4MzVhMjBiOWVmNWQ2NmQ4OThmOTRhNjFl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-26T00:12:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:06Z"
      },
      "message": "Introduce DescriptorID",
      "tree": {
        "sha": "d1f66a90944da2d5eda2200a018b3362fd921220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1f66a90944da2d5eda2200a018b3362fd921220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e067ef9e4a3d983835a20b9ef5d66d898f94a61e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7453e3e5f312b1b32d677451ae8064745a848b41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7453e3e5f312b1b32d677451ae8064745a848b41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7453e3e5f312b1b32d677451ae8064745a848b41"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "afaaf6f6817514810c5db4010896d45c4ed2cd81",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e067ef9e4a3d983835a20b9ef5d66d898f94a61e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e067ef9e4a3d983835a20b9ef5d66d898f94a61e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
        "patch": "@@ -878,6 +878,12 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n \n } // namespace\n \n+DescriptorID::DescriptorID(const Descriptor& desc)\n+{\n+    std::string desc_str = desc.ToString();\n+    CSHA256().Write((unsigned char*)desc_str.data(), desc_str.size()).Finalize(begin());\n+}\n+\n std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());"
      },
      {
        "sha": "bf6ed64b70a004829c79e16ca6d0ba5d0e09707c",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e067ef9e4a3d983835a20b9ef5d66d898f94a61e/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e067ef9e4a3d983835a20b9ef5d66d898f94a61e/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <script/script.h>\n #include <script/sign.h>\n+#include <uint256.h>\n \n #include <vector>\n \n@@ -62,6 +63,14 @@ struct Descriptor {\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n };\n \n+struct DescriptorID : public uint256\n+{\n+    DescriptorID() : uint256() {}\n+    explicit DescriptorID(const uint256& hash) : uint256(hash) {}\n+    explicit DescriptorID(const Descriptor& desc);\n+    using uint256::uint256;\n+};\n+\n /** Parse a descriptor string. Included private keys are put in out.\n  *\n  * If the descriptor has a checksum, it must be valid. If require_checksum"
      }
    ]
  },
  {
    "sha": "e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2Y3YWY2YjRlN2U2ODFlN2MyZjcyZjBlZTZhZDY3N2E4NmU1MWIz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-26T00:13:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:06Z"
      },
      "message": "Introduce WalletDescriptor and writing it to the wallet",
      "tree": {
        "sha": "7f570def3c0f1e7781e2df265b88aed32b88cf24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f570def3c0f1e7781e2df265b88aed32b88cf24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e067ef9e4a3d983835a20b9ef5d66d898f94a61e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e067ef9e4a3d983835a20b9ef5d66d898f94a61e"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e394c2fb9145232b5a297c676c3861261c229d8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
        "patch": "@@ -17,6 +17,7 @@\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n+#include <script/descriptor.h>\n #include <util/system.h>\n #include <validationinterface.h>\n #include <wallet/coinselection.h>\n@@ -672,6 +673,40 @@ class CWalletKey\n     }\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end)\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end)\n+    int32_t next_index; // Position of the next item to generate\n+    std::vector<std::vector<unsigned char>> cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = std::move(Parse(desc, keys, true));\n+        } else {\n+            READWRITE(descriptor->ToString());\n+        }\n+        READWRITE(creation_time);\n+        READWRITE(next_index);\n+        READWRITE(range_start);\n+        READWRITE(range_end);\n+        READWRITE(cache);\n+    }\n+\n+    WalletDescriptor() {}\n+    WalletDescriptor(std::shared_ptr<Descriptor> descriptor, uint64_t creation_time, int32_t range_start, int32_t range_end, int32_t next_index) : descriptor(descriptor), creation_time(creation_time), range_start(range_start), range_end(range_end), next_index(next_index) {}\n+};\n+\n struct CoinSelectionParams\n {\n     bool use_bnb = true;"
      },
      {
        "sha": "42d4d61597a8f30ba370e04c7d98e0688cae3af1",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
        "patch": "@@ -156,6 +156,11 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(std::string(\"minversion\"), nVersion);\n }\n \n+bool WalletBatch::WriteDescriptor(const WalletDescriptor& descriptor)\n+{\n+    return WriteIC(std::make_pair(std::string(\"descriptor\"), DescriptorID(*descriptor.descriptor)), descriptor);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "bbacbae5d7194a8324864fb0a4613914cb8c25e4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
        "patch": "@@ -40,6 +40,7 @@ class CWallet;\n class CWalletTx;\n class uint160;\n class uint256;\n+class WalletDescriptor;\n \n /** Backend-agnostic database type. */\n using WalletDatabase = BerkeleyDatabase;\n@@ -215,6 +216,8 @@ class WalletBatch\n     bool WritePool(int64_t nPool, const CKeyPool& keypool);\n     bool ErasePool(int64_t nPool);\n \n+    bool WriteDescriptor(const WalletDescriptor& descriptor);\n+\n     bool WriteMinVersion(int nVersion);\n \n     /// Write destination data key,value tuple to database"
      }
    ]
  },
  {
    "sha": "f1ec0d70289337d541f7825fd17c29bdc44f3f44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWVjMGQ3MDI4OTMzN2Q1NDFmNzgyNWZkMTdjMjliZGM0NGYzZjQ0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T20:51:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:06Z"
      },
      "message": "Add functions to read and write descriptors from the wallet file\n\nAdds functionality to read and write descriptors and related metadata\nto and from the wallet file. Descriptos will be loaded into memory\non wallet loading along with fields indicated which descriptors to\nuse in normal wallet use.",
      "tree": {
        "sha": "31facbc3d6557580cf9600a0e44b7c5a3b01496b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31facbc3d6557580cf9600a0e44b7c5a3b01496b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ec0d70289337d541f7825fd17c29bdc44f3f44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ec0d70289337d541f7825fd17c29bdc44f3f44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ec0d70289337d541f7825fd17c29bdc44f3f44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ec0d70289337d541f7825fd17c29bdc44f3f44/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f7af6b4e7e681e7c2f72f0ee6ad677a86e51b3"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 114,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7fbf6f01bace2503fcfbd8e452b87c7f257545ca",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f1ec0d70289337d541f7825fd17c29bdc44f3f44",
        "patch": "@@ -502,6 +502,30 @@ bool CWallet::LoadWatchOnly(const CScript &dest)\n     return CCryptoKeyStore::AddWatchOnly(dest);\n }\n \n+bool CWallet::LoadDescriptor(const WalletDescriptor& desc)\n+{\n+    LOCK(cs_wallet);\n+    DescriptorID id(*desc.descriptor);\n+    for (int32_t i = desc.range_start; i < desc.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        desc.descriptor->ExpandFromCache(i, desc.cache[i - desc.range_start], scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const auto& script : scripts_temp) {\n+            AddScriptPubKey(script);\n+        }\n+        // Add the scripts to in memory\n+        for (const auto& script : out_keys.scripts) {\n+            CBasicKeyStore::AddCScript(script.second);\n+        }\n+    }\n+\n+    // Add to the descriptor map\n+    m_map_descriptors[id] = desc;\n+\n+    return true;\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n@@ -1511,6 +1535,41 @@ void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n     hdChain = chain;\n }\n \n+void CWallet::SetPrimaryDescriptor(const DescriptorID& id, bool memonly, OutputType type)\n+{\n+    LOCK(cs_wallet);\n+    if (!memonly && !WalletBatch(*database).WritePrimaryDescriptor(id, type))\n+        throw std::runtime_error(std::string(__func__) + \": writing primary descriptor failed\");\n+\n+    m_primary_descriptors[type] = id;\n+}\n+\n+void CWallet::SetChangeDescriptor(const DescriptorID& id, bool memonly, OutputType type)\n+{\n+    LOCK(cs_wallet);\n+    if (!memonly && !WalletBatch(*database).WriteChangeDescriptor(id,  type))\n+        throw std::runtime_error(std::string(__func__) + \": writing change descriptor failed\");\n+\n+    m_change_descriptors[type] = id;\n+}\n+\n+bool CWallet::HaveWalletDescriptor(const DescriptorID& id) const\n+{\n+    LOCK(cs_wallet);\n+    return m_map_descriptors.count(id) > 0;\n+}\n+\n+bool CWallet::AddWalletDescriptor(const WalletDescriptor& wallet_desc)\n+{\n+    // Save the dsecriptor\n+    if (!WalletBatch(*database).WriteDescriptor(wallet_desc))\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+\n+    // Add the descriptor to wallet in memory\n+    LoadDescriptor(wallet_desc);\n+    return true;\n+}\n+\n bool CWallet::IsHDEnabled() const\n {\n     return !hdChain.seed_id.IsNull();"
      },
      {
        "sha": "e4f3751c2e9bfac1765e84d1a3fd126b0dccb3c2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f1ec0d70289337d541f7825fd17c29bdc44f3f44",
        "patch": "@@ -788,6 +788,10 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n+    /* Descriptors to use for address generation */\n+    std::map<OutputType, DescriptorID> m_primary_descriptors;\n+    std::map<OutputType, DescriptorID> m_change_descriptors;\n+\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n@@ -797,6 +801,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n+    std::map<DescriptorID, WalletDescriptor> m_map_descriptors GUARDED_BY(cs_wallet);\n \n     int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;\n \n@@ -1018,6 +1023,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n+    //! Load a descriptor\n+    bool LoadDescriptor(const WalletDescriptor& desc);\n+\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;\n \n@@ -1273,6 +1281,16 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void SetHDChain(const CHDChain& chain, bool memonly);\n     const CHDChain& GetHDChain() const { return hdChain; }\n \n+    /* Set the descriptors being used */\n+    void SetPrimaryDescriptor(const DescriptorID& id, bool memonly, OutputType type);\n+    void SetChangeDescriptor(const DescriptorID& id, bool memonly, OutputType type);\n+\n+    /* Add a descriptor to the wallet */\n+    bool AddWalletDescriptor(const WalletDescriptor& wallet_desc);\n+\n+    /* Whether the descriptor is part of the wallet */\n+    bool HaveWalletDescriptor(const DescriptorID& id) const;\n+\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n "
      },
      {
        "sha": "2bea55e941c16948b7a07b041edf90385cc35420",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f1ec0d70289337d541f7825fd17c29bdc44f3f44",
        "patch": "@@ -423,6 +423,28 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: Unknown non-tolerable wallet flags found\";\n                 return false;\n             }\n+        } else if (strType == \"descriptor\") {\n+            WalletDescriptor desc;\n+            ssValue >> desc;\n+            pwallet->LoadDescriptor(desc);\n+        } else if (strType == \"primarydescriptor\") {\n+            std::string type_str;\n+            ssKey >> type_str;\n+            OutputType type;\n+            assert(ParseOutputType(type_str, type));\n+\n+            DescriptorID id;\n+            ssValue >> id;\n+            pwallet->SetPrimaryDescriptor(id, true, type);\n+        } else if (strType == \"changedescriptor\") {\n+            std::string type_str;\n+            ssKey >> type_str;\n+            OutputType type;\n+            assert(ParseOutputType(type_str, type));\n+\n+            DescriptorID id;\n+            ssValue >> id;\n+            pwallet->SetChangeDescriptor(id, true, type);\n         } else if (strType != \"bestblock\" && strType != \"bestblock_nomerkle\" &&\n                 strType != \"minversion\" && strType != \"acentry\") {\n             wss.m_unknown_records++;\n@@ -765,6 +787,16 @@ bool WalletBatch::WriteHDChain(const CHDChain& chain)\n     return WriteIC(std::string(\"hdchain\"), chain);\n }\n \n+bool WalletBatch::WritePrimaryDescriptor(const uint256& id, OutputType type)\n+{\n+    return WriteIC(std::make_pair(std::string(\"primarydescriptor\"), FormatOutputType(type)), id);\n+}\n+\n+bool WalletBatch::WriteChangeDescriptor(const uint256& id, OutputType type)\n+{\n+    return WriteIC(std::make_pair(std::string(\"changedescriptor\"), FormatOutputType(type)), id);\n+}\n+\n bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n {\n     return WriteIC(std::string(\"flags\"), flags);"
      },
      {
        "sha": "642aa01609a1367a4d6711491dce790a271a9c5d",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ec0d70289337d541f7825fd17c29bdc44f3f44/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=f1ec0d70289337d541f7825fd17c29bdc44f3f44",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_WALLETDB_H\n \n #include <amount.h>\n+#include <outputtype.h>\n #include <primitives/transaction.h>\n #include <script/sign.h>\n #include <wallet/db.h>\n@@ -245,6 +246,10 @@ class WalletBatch\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    //! Write the descriptors in use\n+    bool WritePrimaryDescriptor(const uint256& id, OutputType type);\n+    bool WriteChangeDescriptor(const uint256& id, OutputType type);\n+\n     bool WriteWalletFlags(const uint64_t flags);\n     //! Begin a new transaction\n     bool TxnBegin();"
      }
    ]
  },
  {
    "sha": "ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjFlMGRiMGVhYjk0NDQ4Mjg5MjRhZTMxOTBmMWYzNTZjOGJiM2Zm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T20:51:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:06Z"
      },
      "message": "Add wallet flag for descriptor wallets",
      "tree": {
        "sha": "5a177ac691d882da027f04466eee6276312ce24e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a177ac691d882da027f04466eee6276312ce24e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1e0db0eab9444828924ae3190f1f356c8bb3ff/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ec0d70289337d541f7825fd17c29bdc44f3f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ec0d70289337d541f7825fd17c29bdc44f3f44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ec0d70289337d541f7825fd17c29bdc44f3f44"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9b1ab01bc6959fa5e7766a8816a3c930aea949a8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1e0db0eab9444828924ae3190f1f356c8bb3ff/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1e0db0eab9444828924ae3190f1f356c8bb3ff/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
        "patch": "@@ -1575,6 +1575,11 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.seed_id.IsNull();\n }\n \n+bool CWallet::IsDescriptor() const\n+{\n+    return IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS);\n+}\n+\n bool CWallet::CanGenerateKeys()\n {\n     // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n@@ -1621,7 +1626,7 @@ void CWallet::UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag)\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n-bool CWallet::IsWalletFlagSet(uint64_t flag)\n+bool CWallet::IsWalletFlagSet(uint64_t flag) const\n {\n     return (m_wallet_flags & flag);\n }"
      },
      {
        "sha": "22a6c36c149080a5d02f59ffde115fbd0709013b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1e0db0eab9444828924ae3190f1f356c8bb3ff/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1e0db0eab9444828924ae3190f1f356c8bb3ff/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
        "patch": "@@ -138,6 +138,9 @@ enum WalletFlags : uint64_t {\n     //! bitcoin from opening the wallet, thinking it was newly created, and\n     //! then improperly reinitializing it.\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n+\n+    //! Flag set when the wallet uses descriptors natively\n+    WALLET_FLAG_DESCRIPTORS = (1ULL << 34),\n };\n \n static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n@@ -1294,6 +1297,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n \n+    /* Returns true if this is a descriptor wallet */\n+    bool IsDescriptor() const;\n+\n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();\n \n@@ -1341,7 +1347,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void UnsetWalletFlag(uint64_t flag);\n \n     /** check if a certain wallet flag is set */\n-    bool IsWalletFlagSet(uint64_t flag);\n+    bool IsWalletFlagSet(uint64_t flag) const;\n \n     /** overwrite all flags by the given uint64_t\n        returns false if unknown, non-tolerable flags are present */"
      }
    ]
  },
  {
    "sha": "f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjNiMWM5Mzk4YWMxNjRlZDZiMWM2MWY1YjlmNWRkMzlmOTQ5YjZl",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-12-19T02:54:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:31:06Z"
      },
      "message": "Add private key derivation functions to descriptors",
      "tree": {
        "sha": "16fc33292cd8e36da69c02d008a3a275f6b4e4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16fc33292cd8e36da69c02d008a3a275f6b4e4dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1e0db0eab9444828924ae3190f1f356c8bb3ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1e0db0eab9444828924ae3190f1f356c8bb3ff"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "06e74e6f2bf7991effb3302e47b63bc63edc74ff",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
        "patch": "@@ -164,6 +164,9 @@ struct PubkeyProvider\n \n     /** Get the descriptor string form including private data (if available in arg). */\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n+\n+    /** Derive a private key, if private data is available in arg. */\n+    virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n };\n \n class OriginPubkeyProvider final : public PubkeyProvider\n@@ -195,6 +198,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n+    bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n+    {\n+        return m_provider->GetPrivKey(pos, arg, key);\n+    }\n };\n \n /** An object representing a parsed constant public key in a descriptor. */\n@@ -222,6 +229,10 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n+    bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n+    {\n+        return arg.GetKey(m_pubkey.GetID(), key);\n+    }\n };\n \n enum class DeriveType {\n@@ -312,6 +323,18 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n+    bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n+    {\n+        CExtKey extkey;\n+        if (!GetExtKey(arg, extkey)) return false;\n+        for (auto entry : m_path) {\n+            extkey.Derive(extkey, entry);\n+        }\n+        if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n+        if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n+        key = extkey.key;\n+        return true;\n+    }\n };\n \n /** Base class for all Descriptor implementations. */\n@@ -462,6 +485,20 @@ class DescriptorImpl : public Descriptor\n         Span<const unsigned char> span = MakeSpan(cache);\n         return ExpandHelper(pos, DUMMY_SIGNING_PROVIDER, &span, output_scripts, out, nullptr) && span.size() == 0;\n     }\n+\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const final\n+    {\n+        for (const auto& p : m_pubkey_args) {\n+            CKey key;\n+            if (!p->GetPrivKey(pos, provider, key)) continue;\n+            out.keys.emplace(key.GetPubKey().GetID(), key);\n+        }\n+        if (m_script_arg) {\n+            FlatSigningProvider subprovider;\n+            m_script_arg->ExpandPrivate(pos, provider, subprovider);\n+            out = Merge(out, subprovider);\n+        }\n+    }\n };\n \n /** Construct a vector with one element, which is moved into it. */"
      },
      {
        "sha": "9a379d81338680ca53a448377410b83fa2efce03",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
        "patch": "@@ -61,6 +61,14 @@ struct Descriptor {\n      * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n      */\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n+\n+    /** Expand the private key for a descriptor at a specified position, if possible.\n+     *\n+     * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * provider: the provider to query for the private keys.\n+     * out: any private keys available for the specified pos will be placed here.\n+     */\n+    virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n };\n \n struct DescriptorID : public uint256"
      }
    ]
  },
  {
    "sha": "bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmU4YmYxYmUyZTNiNmNiMTNkZTJkODJlMzYzNzQ5YmE5MTQ2Mjhj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-30T22:26:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Add importdescriptors RPC",
      "tree": {
        "sha": "4f2eb1df0d1acd8c3c56cc0618b3b8aa14f7b85d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f2eb1df0d1acd8c3c56cc0618b3b8aa14f7b85d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f63b1c9398ac164ed6b1c61f5b9f5dd39f949b6e"
      }
    ],
    "stats": {
      "total": 333,
      "additions": 333,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f98d0b729d2150c1f6f3ad3940eaafdc34b68c4c",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
        "patch": "@@ -126,6 +126,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importpubkey\", 2, \"rescan\" },\n     { \"importmulti\", 0, \"requests\" },\n     { \"importmulti\", 1, \"options\" },\n+    { \"importdescriptors\", 0, \"requests\" },\n+    { \"importdescriptors\", 1, \"options\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },"
      },
      {
        "sha": "17ec4b094a7e8e56e45f44e414b4ea03854ad5bf",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 329,
        "deletions": 0,
        "changes": 329,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
        "patch": "@@ -1498,3 +1498,332 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        // Internal addresses should not have a label\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+        const bool add_keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Either a descriptor or scriptPubKey must be provided.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        FlatSigningProvider keys;\n+        auto parsed_desc = Parse(descriptor, keys, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n+        }\n+\n+        int64_t range_start = 0, range_end = 1;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (!data.exists(\"range\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n+            }\n+            auto range = ParseDescriptorRange(data[\"range\"]);\n+            range_start = range.first;\n+            range_end = range.second;\n+            if (range_start < 0 || (range_end >> 31) != 0 || range_end - range_start >= 1000000) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid descriptor range specified\");\n+            }\n+        }\n+\n+        // If private keys are disabled, abort if private keys are being imported\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check whether we have any work to do\n+        DescriptorID id(*parsed_desc);\n+        if (pwallet->HaveWalletDescriptor(id)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the descriptor\");\n+        }\n+\n+        // Build the expansion cache\n+        WalletDescriptor wallet_desc(std::move(parsed_desc), timestamp, range_start, range_end, range_start);\n+        std::vector<CScript> scripts_temp;\n+        for (int32_t i = range_start; i < range_end; ++i) {\n+            std::vector<unsigned char> cache;\n+            if (!wallet_desc.descriptor->Expand(i, keys, scripts_temp, keys, &cache)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor missing keys and cannot be expanded\");\n+            }\n+            wallet_desc.cache.push_back(cache);\n+        }\n+\n+        // Check if all private keys are either provided or in the wallet already\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key) && !pwallet->HaveKey(key_id)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided and not in the wallet\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled that does not already have the private keys\");\n+        }\n+\n+        // Add the descriptor\n+        if (!pwallet->AddWalletDescriptor(wallet_desc)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to add the descriptor to the wallet\");\n+        }\n+\n+        // Add the privkeys from the descriptor\n+        for (const auto& entry : keys.keys) {\n+            const CKey& key = entry.second;\n+            CPubKey pubkey = key.GetPubKey();\n+            const CKeyID& id = entry.first;\n+            assert(key.VerifyPubKey(pubkey));\n+            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+            // If the private key is not present in the wallet, insert it.\n+            if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+            }\n+            pwallet->UpdateTimeFirstKey(timestamp);\n+        }\n+\n+        // Add the pubkeys as watch only\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            const CPubKey& pubkey = entry.second;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                if (!pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding pubkey to wallet\");\n+                }\n+            }\n+        }\n+\n+        // Set label for scriptPubKeys\n+        for (const CScript& script : scripts_temp) {\n+            CTxDestination dest;\n+            ExtractDestination(script, dest);\n+            if (!internal && IsValidDestination(dest) && (data.exists(\"label\") || pwallet->mapAddressBook.count(dest) == 0)) {\n+                pwallet->SetAddressBook(dest, label, \"receive\");\n+            }\n+        }\n+\n+        // Set as main descriptors\n+        if (add_keypool) {\n+            if (!wallet_desc.descriptor->IsRange()) {\n+                warnings.push_back(\"Non-ranged descriptor cannot be used as a keypool descriptor\");\n+            } else if (descriptor.rfind(\"combo(\", 0) == 0) {\n+                warnings.push_back(\"Combo descriptor cannot be used as a keypool descriptor\");\n+            } else {\n+                // Get the output type\n+                OutputType type = OutputType::CHANGE_AUTO;\n+                if (descriptor.rfind(\"wpkh(\", 0) == 0 || descriptor.rfind(\"wsh(\", 0) == 0) {\n+                    type = OutputType::BECH32;\n+                } else if (descriptor.rfind(\"sh(wpkh(\", 0) == 0) {\n+                    type = OutputType::P2SH_SEGWIT;\n+                } else if (descriptor.rfind(\"pkh(\", 0) == 0 || descriptor.rfind(\"sh(\", 0) == 0) {\n+                    type = OutputType::LEGACY;\n+                } else {\n+                    warnings.push_back(\"Descriptor describes unknown address type, cannot be used as a keypool descriptor\");\n+                }\n+                // Set the descriptors\n+                if (type != OutputType::CHANGE_AUTO) {\n+                    if (internal) {\n+                        pwallet->SetChangeDescriptor(id, false, type);\n+                    } else {\n+                        pwallet->SetPrimaryDescriptor(id, false, type);\n+                    }\n+                }\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_equest)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_equest);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_equest.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (main_equest.fHelp || main_equest.params.size() < 1 || main_equest.params.size() > 2)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors, optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+        \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+        \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+        \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"keypool\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether the imported descriptor should be used for address generation.\"},\n+                                },\n+                            },\n+                        },\n+                        \"\\\"requests\\\"\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        {\n+                            {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n+                        },\n+                        \"\\\"options\\\"\"},\n+                },\n+                RPCResult{\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [{\\\"success\\\": true}, {\\\"success\\\": true, \\\"warnings\\\": [\\\"Ignoring irrelevant private key\\\"]}, {\\\"success\\\": false, \\\"error\\\": {\\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"}}, ...]\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478 }, \"\n+                                          \"{ \\\"desc\\\": \\\"<my desccriptor 2>\\\", \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\")\n+                },\n+            }.ToString()\n+        );\n+\n+    if (!pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importdescriptors is not available for non-descriptor wallets\");\n+    }\n+\n+    RPCTypeCheck(main_equest.params, {UniValue::VARR, UniValue::VOBJ});\n+\n+    const UniValue& requests = main_equest.params[0];\n+\n+    //Default options\n+    bool rescan = true;\n+\n+    if (!main_equest.params[1].isNull()) {\n+        const UniValue& options = main_equest.params[1];\n+\n+        if (options.exists(\"rescan\")) {\n+            rescan = options[\"rescan\"].get_bool();\n+        }\n+    }\n+\n+    WalletRescanReserver reserver(pwallet);\n+    if (rescan && !reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n+    int64_t now = 0;\n+    bool run_scan = false;\n+    int64_t lowest_timestamp = 0;\n+    UniValue response(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+\n+        // Verify all timestamps are present before importing any keys.\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        now = tip_height ? locked_chain->getBlockMedianTimePast(*tip_height) : 0;\n+        for (const UniValue& data : requests.getValues()) {\n+            GetImportTimestamp(data, now);\n+        }\n+\n+        const int64_t minimumTimestamp = 1;\n+\n+        if (rescan && tip_height) {\n+            lowest_timestamp = locked_chain->getBlockTime(*tip_height);\n+        } else {\n+            rescan = false;\n+        }\n+\n+        for (const UniValue& data : requests.getValues()) {\n+            const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+            const UniValue result = ProcessDescriptorImport(pwallet, data, timestamp);\n+            response.push_back(result);\n+\n+            if (!rescan) {\n+                continue;\n+            }\n+\n+            // If at least one request was successful then allow rescan.\n+            if (result[\"success\"].get_bool()) {\n+                run_scan = true;\n+            }\n+\n+            // Get the lowest timestamp.\n+            if (timestamp < lowest_timestamp) {\n+                lowest_timestamp = timestamp;\n+            }\n+        }\n+    }\n+    if (rescan && run_scan && requests.size()) {\n+        int64_t scannedTime = pwallet->RescanFromTime(lowest_timestamp, reserver, true /* update */);\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions(*locked_chain);\n+        }\n+\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n+        }\n+        if (scannedTime > lowest_timestamp) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+            size_t i = 0;\n+            for (const UniValue& request : requests.getValues()) {\n+                // If key creation date is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (scannedTime <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\n+                        \"error\",\n+                        JSONRPCError(\n+                            RPC_MISC_ERROR,\n+                            strprintf(\"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                      \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                      \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                      \"and coins using this key may not appear in the wallet. This error could be \"\n+                                      \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                      \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                      \"and -rescan options).\",\n+                                GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n+                    response.push_back(std::move(result));\n+                }\n+                ++i;\n+            }\n+        }\n+    }\n+\n+    return response;\n+}"
      },
      {
        "sha": "d4f5b5ce5580f7e8be24df99c3088ca9f3813118",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe8bf1be2e3b6cb13de2d82e363749ba914628c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
        "patch": "@@ -4169,6 +4169,7 @@ UniValue importwallet(const JSONRPCRequest& request);\n UniValue importprunedfunds(const JSONRPCRequest& request);\n UniValue removeprunedfunds(const JSONRPCRequest& request);\n UniValue importmulti(const JSONRPCRequest& request);\n+UniValue importdescriptors(const JSONRPCRequest& request);\n \n // clang-format off\n static const CRPCCommand commands[] =\n@@ -4201,6 +4202,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importdescriptors\",                &importdescriptors,             {\"requests\",\"options\"} },\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },"
      }
    ]
  },
  {
    "sha": "ac5905353fca30529ef9b7c31f9475e8145b626f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzU5MDUzNTNmY2EzMDUyOWVmOWI3YzMxZjk0NzVlODE0NWI2MjZm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-01T16:00:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Add descriptors to dumpwallet and importwallet",
      "tree": {
        "sha": "014ff5401b3f2bd2441f4040145ff7babd44f579",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/014ff5401b3f2bd2441f4040145ff7babd44f579"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac5905353fca30529ef9b7c31f9475e8145b626f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac5905353fca30529ef9b7c31f9475e8145b626f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac5905353fca30529ef9b7c31f9475e8145b626f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac5905353fca30529ef9b7c31f9475e8145b626f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe8bf1be2e3b6cb13de2d82e363749ba914628c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe8bf1be2e3b6cb13de2d82e363749ba914628c"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 78,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d65a140bf6bb2ac8ed112308e10c0f79e0498dfd",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 2,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac5905353fca30529ef9b7c31f9475e8145b626f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac5905353fca30529ef9b7c31f9475e8145b626f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ac5905353fca30529ef9b7c31f9475e8145b626f",
        "patch": "@@ -626,6 +626,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         pwallet->chain().showProgress(strprintf(\"%s \" + _(\"Importing...\"), pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n         std::vector<std::tuple<CKey, int64_t, bool, std::string>> keys;\n         std::vector<std::pair<CScript, int64_t>> scripts;\n+        std::set<std::tuple<std::shared_ptr<Descriptor>, int32_t, int32_t, uint64_t>> descriptors;\n         while (file.good()) {\n             pwallet->chain().showProgress(\"\", std::max(1, std::min(50, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n             std::string line;\n@@ -660,6 +661,13 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 CScript script = CScript(vData.begin(), vData.end());\n                 int64_t birth_time = DecodeDumpTime(vstr[1]);\n                 scripts.push_back(std::pair<CScript, int64_t>(script, birth_time));\n+            } else {\n+                FlatSigningProvider out_keys;\n+                std::unique_ptr<Descriptor> desc = Parse(vstr[0], out_keys, true);\n+                if (!desc) {\n+                    continue;\n+                }\n+                descriptors.emplace(std::move(desc), stoi(vstr[1]), stoi(vstr[2]), DecodeDumpTime(vstr[3]));\n             }\n         }\n         file.close();\n@@ -668,7 +676,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled when private keys are disabled\");\n         }\n-        double total = (double)(keys.size() + scripts.size());\n+        double total = (double)(keys.size() + scripts.size() + descriptors.size());\n         double progress = 0;\n         for (const auto& key_tuple : keys) {\n             pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n@@ -715,6 +723,43 @@ UniValue importwallet(const JSONRPCRequest& request)\n             }\n             progress++;\n         }\n+        for (const auto& desc_tuple : descriptors) {\n+            pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            std::shared_ptr<Descriptor> desc = std::get<0>(desc_tuple);\n+            int32_t range_start = std::get<1>(desc_tuple);\n+            int32_t range_end = std::get<2>(desc_tuple);\n+            uint64_t creation_time = std::get<3>(desc_tuple);\n+            WalletDescriptor wallet_desc(desc, creation_time, range_start, range_end, range_end);\n+\n+            // Build the expansion cache\n+            bool good_expansion = true;\n+            for (int i = wallet_desc.range_start; i < wallet_desc.range_end; ++i) {\n+                FlatSigningProvider out_keys;\n+                std::vector<CScript> scripts_temp;\n+                std::vector<unsigned char> cache;\n+                if (!wallet_desc.descriptor->Expand(i, *pwallet, scripts_temp, out_keys, &cache)) {\n+                    pwallet->WalletLogPrintf(\"Error expanding cache for descriptor %s\\n\", desc->ToString());\n+                    fGood = false;\n+                    good_expansion = false;\n+                    continue;\n+                }\n+                wallet_desc.cache.push_back(std::move(cache));\n+            }\n+            if (!good_expansion) {\n+                continue;\n+            }\n+\n+            if (pwallet->HaveWalletDescriptor(DescriptorID(*wallet_desc.descriptor))) {\n+                pwallet->WalletLogPrintf(\"Skipping import of %s (descriptor already present)\\n\", desc->ToString());\n+                continue;\n+            }\n+            if (!pwallet->AddWalletDescriptor(wallet_desc)) {\n+                pwallet->WalletLogPrintf(\"Error importing descriptor %s\\n\", desc->ToString());\n+                fGood = false;\n+                continue;\n+            }\n+            progress++;\n+        }\n         pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n         pwallet->UpdateTimeFirstKey(nTimeBegin);\n     }\n@@ -851,7 +896,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     // add the base58check encoded extended master if the wallet uses HD\n     CKeyID seed_id = pwallet->GetHDChain().seed_id;\n-    if (!seed_id.IsNull())\n+    if (!seed_id.IsNull() && !pwallet->IsDescriptor())\n     {\n         CKey seed;\n         if (pwallet->GetKey(seed_id, seed)) {\n@@ -861,6 +906,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             file << \"# extended private masterkey: \" << EncodeExtKey(masterKey) << \"\\n\\n\";\n         }\n     }\n+    for (const auto& desc : pwallet->GetDescriptors()) {\n+        file << strprintf(\"%s %d %d %s # \\n\", std::get<0>(desc)->ToString(), std::get<1>(desc), std::get<2>(desc), FormatISO8601DateTime(std::get<3>(desc)));\n+    }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = FormatISO8601DateTime(it->first);\n@@ -877,6 +925,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 file << \"reserve=1\";\n             } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"s\") {\n                 file << \"inactivehdseed=1\";\n+            } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n+                file << \"masterprivkey=1\";\n             } else {\n                 file << \"change=1\";\n             }"
      },
      {
        "sha": "ccb07c5c69d2e551e71bf5aff7ea5d6be2834ce6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac5905353fca30529ef9b7c31f9475e8145b626f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac5905353fca30529ef9b7c31f9475e8145b626f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ac5905353fca30529ef9b7c31f9475e8145b626f",
        "patch": "@@ -526,6 +526,16 @@ bool CWallet::LoadDescriptor(const WalletDescriptor& desc)\n     return true;\n }\n \n+std::set<std::tuple<std::shared_ptr<Descriptor>, int32_t, int32_t, uint64_t>> CWallet::GetDescriptors() const\n+{\n+    AssertLockHeld(cs_wallet);\n+    std::set<std::tuple<std::shared_ptr<Descriptor>, int32_t, int32_t, uint64_t>> descriptors;\n+    for (const auto& desc : m_map_descriptors) {\n+        descriptors.emplace(desc.second.descriptor, desc.second.range_start, desc.second.range_end, desc.second.creation_time);\n+    }\n+    return descriptors;\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;"
      },
      {
        "sha": "aeb86179dadb62e2eae7455e0f86744ab9763902",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac5905353fca30529ef9b7c31f9475e8145b626f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac5905353fca30529ef9b7c31f9475e8145b626f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ac5905353fca30529ef9b7c31f9475e8145b626f",
        "patch": "@@ -1029,6 +1029,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Load a descriptor\n     bool LoadDescriptor(const WalletDescriptor& desc);\n \n+    //! Get all of the descriptors from the set\n+    std::set<std::tuple<std::shared_ptr<Descriptor>, int32_t, int32_t, uint64_t>> GetDescriptors() const;\n+\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;\n "
      },
      {
        "sha": "690938efe52d0faf924eb87825307005b2db96a4",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac5905353fca30529ef9b7c31f9475e8145b626f/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac5905353fca30529ef9b7c31f9475e8145b626f/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=ac5905353fca30529ef9b7c31f9475e8145b626f",
        "patch": "@@ -24,12 +24,13 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n         found_script_addr = 0\n         found_addr_chg = 0\n         found_addr_rsv = 0\n+        found_descriptors = 0\n         hd_master_addr_ret = None\n         for line in inputfile:\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_date_label, comment = line.split(\"#\")\n+                key_date_label, comment = line.split(\" #\")\n                 key_date_label = key_date_label.split(\" \")\n                 # key = key_date_label[0]\n                 date = key_date_label[1]\n@@ -41,6 +42,11 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                     # Skip them\n                     continue\n \n+                # Descriptors don't have a comment\n+                if comment.strip() == \"\":\n+                    found_descriptors += 1\n+                    continue\n+\n                 addr_keypath = comment.split(\" addr=\")[1]\n                 addr = addr_keypath.split(\" \")[0]\n                 keypath = None\n@@ -54,6 +60,8 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                 elif keytype == \"script=1\":\n                     # scripts don't have keypaths\n                     keypath = None\n+                elif keytype == \"masterprivkey=1\":\n+                    pass\n                 else:\n                     keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n \n@@ -82,7 +90,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                         found_script_addr += 1\n                         break\n \n-        return found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n+        return found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, found_descriptors\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -126,7 +134,7 @@ def run_test(self):\n         result = self.nodes[0].dumpwallet(wallet_unenc_dump)\n         assert_equal(result['filename'], wallet_unenc_dump)\n \n-        found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+        found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, _ = \\\n             read_dump(wallet_unenc_dump, addrs, [multisig_addr], None)\n         assert_equal(found_legacy_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_p2sh_segwit_addr, test_addr_count)  # all keys must be in the dump\n@@ -142,7 +150,7 @@ def run_test(self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(wallet_enc_dump)\n \n-        found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n+        found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, _ = \\\n             read_dump(wallet_enc_dump, addrs, [multisig_addr], hd_master_addr_unenc)\n         assert_equal(found_legacy_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_p2sh_segwit_addr, test_addr_count)  # all keys must be in the dump"
      },
      {
        "sha": "f36d095ed890caff97a35946616d65a27106bcaf",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac5905353fca30529ef9b7c31f9475e8145b626f/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac5905353fca30529ef9b7c31f9475e8145b626f/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=ac5905353fca30529ef9b7c31f9475e8145b626f",
        "patch": "@@ -19,6 +19,7 @@ KNOWN_VIOLATIONS=(\n     \"src/util/strencodings.cpp:.*strtoul\"\n     \"src/util/strencodings.h:.*atoi\"\n     \"src/util/system.cpp:.*atoi\"\n+    \"src/wallet/rpcdump.cpp:.*stoi\"\n )\n \n REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\""
      }
    ]
  },
  {
    "sha": "054498dd9240aa2d87621fe70b927a34d643c68b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTQ0OThkZDkyNDBhYTJkODc2MjFmZTcwYjkyN2EzNGQ2NDNjNjhi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T20:45:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Disable RPCs that are incompatible with descriptor wallets",
      "tree": {
        "sha": "117df624a57f2a2ac3791c9dd78f0088d0cd7ddc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/117df624a57f2a2ac3791c9dd78f0088d0cd7ddc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/054498dd9240aa2d87621fe70b927a34d643c68b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054498dd9240aa2d87621fe70b927a34d643c68b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/054498dd9240aa2d87621fe70b927a34d643c68b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054498dd9240aa2d87621fe70b927a34d643c68b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac5905353fca30529ef9b7c31f9475e8145b626f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac5905353fca30529ef9b7c31f9475e8145b626f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac5905353fca30529ef9b7c31f9475e8145b626f"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "900eb3fef1b17ec429089fb61cae8e5578d3d26c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/054498dd9240aa2d87621fe70b927a34d643c68b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/054498dd9240aa2d87621fe70b927a34d643c68b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=054498dd9240aa2d87621fe70b927a34d643c68b",
        "patch": "@@ -138,6 +138,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    if (pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importprivkey is not available for descriptor wallets\");\n+    }\n+\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n     }\n@@ -312,6 +316,9 @@ UniValue importaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    if (pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importaddress is not available for descriptor wallets\");\n+    }\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -510,6 +517,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    if (pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importpubkey is not available for descriptor wallets\");\n+    }\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -799,6 +809,10 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    if (pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"dumpprivkey is not available for descriptor wallets\");\n+    }\n+\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -1436,6 +1450,9 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             }.ToString()\n         );\n \n+    if (pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importmulti is not available for descriptor wallets\");\n+    }\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n "
      },
      {
        "sha": "f0974ff42f3a22b67198d3dec40ee2a467531b3d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/054498dd9240aa2d87621fe70b927a34d643c68b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/054498dd9240aa2d87621fe70b927a34d643c68b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=054498dd9240aa2d87621fe70b927a34d643c68b",
        "patch": "@@ -995,6 +995,10 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n         throw std::runtime_error(msg);\n     }\n \n+    if (pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"addmultisigaddress is not available for descriptor wallets\");\n+    }\n+\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n "
      }
    ]
  },
  {
    "sha": "60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGE5M2FlNjE5MTNlNWNhOWYwNGEwZjE2ZTc1ZGNhNmIxZjk2OTc1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T20:55:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Redefine IsMine() for descriptor wallets\n\nDescriptor wallets are the only wallets that have a set of scriptPubKeys.\nFor such wallets, IsMine() is redefined to be effectively a boolean that\nindicates whether a scriptPubKey is in m_set_scriptPubKeys",
      "tree": {
        "sha": "2348c1755537a2f073112b17fa84cb03cb8f96e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2348c1755537a2f073112b17fa84cb03cb8f96e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a93ae61913e5ca9f04a0f16e75dca6b1f96975/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "054498dd9240aa2d87621fe70b927a34d643c68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054498dd9240aa2d87621fe70b927a34d643c68b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/054498dd9240aa2d87621fe70b927a34d643c68b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7b6f86f33b080aaf312f477bce12e31a45194d81",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a93ae61913e5ca9f04a0f16e75dca6b1f96975/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a93ae61913e5ca9f04a0f16e75dca6b1f96975/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
        "patch": "@@ -174,17 +174,22 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)\n {\n-    if (keystore.HaveScriptPubKey(scriptPubKey)) {\n-        return ISMINE_SPENDABLE;\n-    }\n-    switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n-    case IsMineResult::INVALID:\n-    case IsMineResult::NO:\n-        return ISMINE_NO;\n-    case IsMineResult::WATCH_ONLY:\n-        return ISMINE_WATCH_ONLY;\n-    case IsMineResult::SPENDABLE:\n-        return ISMINE_SPENDABLE;\n+    if (keystore.HaveScriptPubKeys()) {\n+        if (keystore.HaveScriptPubKey(scriptPubKey)) {\n+            return ISMINE_SPENDABLE;\n+        } else {\n+            return ISMINE_NO;\n+        }\n+    } else {\n+        switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n+        case IsMineResult::INVALID:\n+        case IsMineResult::NO:\n+            return ISMINE_NO;\n+        case IsMineResult::WATCH_ONLY:\n+            return ISMINE_WATCH_ONLY;\n+        case IsMineResult::SPENDABLE:\n+            return ISMINE_SPENDABLE;\n+        }\n     }\n     assert(false);\n }"
      }
    ]
  },
  {
    "sha": "c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGQxODYxOGY0NGY2YmNjZWQ2YzFjOTRjZGU4ZjViMzdjZjJjZmQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T21:03:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Store additional information with a scriptPubKey in the wallet\n\nStore the id of the descriptor and the position in that descriptor that\nthe scriptPubKey was derived from.",
      "tree": {
        "sha": "b36c3b9f2850907ed45e5c721b1e4f36d943b4d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b36c3b9f2850907ed45e5c721b1e4f36d943b4d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a93ae61913e5ca9f04a0f16e75dca6b1f96975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60a93ae61913e5ca9f04a0f16e75dca6b1f96975"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5aac8cb3ef7764f933bfe271eb78eb241590d629",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
        "patch": "@@ -512,7 +512,7 @@ bool CWallet::LoadDescriptor(const WalletDescriptor& desc)\n         desc.descriptor->ExpandFromCache(i, desc.cache[i - desc.range_start], scripts_temp, out_keys);\n         // Add all of the scriptPubKeys to the scriptPubKey set\n         for (const auto& script : scripts_temp) {\n-            AddScriptPubKey(script);\n+            AddScriptPubKey(script, id, i);\n         }\n         // Add the scripts to in memory\n         for (const auto& script : out_keys.scripts) {\n@@ -1580,6 +1580,17 @@ bool CWallet::AddWalletDescriptor(const WalletDescriptor& wallet_desc)\n     return true;\n }\n \n+bool CWallet::AddScriptPubKey(const CScript& script)\n+{\n+    return CBasicKeyStore::AddScriptPubKey(script);\n+}\n+\n+bool CWallet::AddScriptPubKey(const CScript& script, const DescriptorID& id, int pos)\n+{\n+    m_map_scriptPubKeys[CScriptID(script)] = std::make_pair(id, pos);\n+    return AddScriptPubKey(script);\n+}\n+\n bool CWallet::IsHDEnabled() const\n {\n     return !hdChain.seed_id.IsNull();"
      },
      {
        "sha": "fd1448c12e95249fcfec12e51b0a21e0de2fcc5b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
        "patch": "@@ -805,6 +805,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n     std::map<DescriptorID, WalletDescriptor> m_map_descriptors GUARDED_BY(cs_wallet);\n+    std::map<CScriptID, std::pair<DescriptorID, int>> m_map_scriptPubKeys GUARDED_BY(cs_wallet);\n \n     int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;\n \n@@ -839,6 +840,8 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Unsets a wallet flag and saves it to disk\n     void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag);\n \n+    bool AddScriptPubKey(const CScript& script) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n \n@@ -1032,6 +1035,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Get all of the descriptors from the set\n     std::set<std::tuple<std::shared_ptr<Descriptor>, int32_t, int32_t, uint64_t>> GetDescriptors() const;\n \n+    //! Add a script pubkey to the wallet and the descriptor and position it came from\n+    bool AddScriptPubKey(const CScript& script, const DescriptorID& id, int pos) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;\n "
      }
    ]
  },
  {
    "sha": "c1c45c1258811389ea02687ff5e4b5eb74468176",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWM0NWMxMjU4ODExMzg5ZWEwMjY4N2ZmNWU0YjVlYjc0NDY4MTc2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T21:05:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Update descriptors when scriptPubKeys are found to be used",
      "tree": {
        "sha": "7972dba6c7aacda094b4fb9cce05bdf37eff797e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7972dba6c7aacda094b4fb9cce05bdf37eff797e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c45c1258811389ea02687ff5e4b5eb74468176",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c45c1258811389ea02687ff5e4b5eb74468176",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c45c1258811389ea02687ff5e4b5eb74468176",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c45c1258811389ea02687ff5e4b5eb74468176/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4d18618f44f6bcced6c1c94cde8f5b37cf2cfd7"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "efa91f67564872dbb7d3640ac09f6a9f1ac045b6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c45c1258811389ea02687ff5e4b5eb74468176/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c45c1258811389ea02687ff5e4b5eb74468176/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c1c45c1258811389ea02687ff5e4b5eb74468176",
        "patch": "@@ -1108,6 +1108,25 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const uint256\n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n                 // extract addresses and check if they match with an unused keypool key\n+                if (IsDescriptor()) {\n+                    if (HaveScriptPubKey(txout.scriptPubKey)) {\n+                        const auto& it = m_map_scriptPubKeys.find(CScriptID(txout.scriptPubKey));\n+                        if (it != m_map_scriptPubKeys.end()) {\n+                            assert(m_map_descriptors.count(it->second.first) > 0);\n+                            auto& desc = m_map_descriptors[it->second.first];\n+                            if (it->second.second >= desc.next_index) {\n+                                WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+                                desc.next_index = it->second.second + 1;\n+                            }\n+\n+                            if (!TopUpKeyPool()) {\n+                                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+                            }\n+                        }\n+                    }\n+                    continue;\n+                }\n+\n                 for (const auto& keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n                     std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n                     if (mi != m_pool_key_to_index.end()) {"
      }
    ]
  },
  {
    "sha": "ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjVhMmExOTNhNmYzYTYxZTZkYTZmMjRkYzQwMmQ4NTk3OWNmOWJl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T20:57:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Function to generate a new descriptor for use for address generation",
      "tree": {
        "sha": "76ecdea49173c2e3898ce9d4411ca6a561ca0ffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76ecdea49173c2e3898ce9d4411ca6a561ca0ffb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1c45c1258811389ea02687ff5e4b5eb74468176",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c45c1258811389ea02687ff5e4b5eb74468176",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c45c1258811389ea02687ff5e4b5eb74468176"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 88,
      "deletions": 0
    },
    "files": [
      {
        "sha": "56119c243bb0e525395700ace237fbb990ca4d7e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
        "patch": "@@ -1505,6 +1505,74 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+void CWallet::GenerateNewDescriptor(CKeyID seed, OutputType type)\n+{\n+    AssertLockHeld(cs_wallet);\n+    assert(IsDescriptor());\n+\n+    int64_t creation_time = GetTime();\n+\n+    // Make a seed, but don't store it\n+    CKey seed_key;\n+    assert(GetKey(seed, seed_key));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Construct descriptor strings\n+    std::string primary_desc_str;\n+    std::string change_desc_str;\n+    switch (type) {\n+    case OutputType::LEGACY: {\n+        primary_desc_str = \"pkh(\" + xpub + \"/44'/0'/*')\";\n+        change_desc_str = \"pkh(\" + xpub + \"/44'/1'/*')\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        primary_desc_str = \"sh(wpkh(\" + xpub + \"/49'/0'/*'))\";\n+        change_desc_str = \"sh(wpkh(\" + xpub + \"/49'/1'/*'))\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        primary_desc_str = \"wpkh(\" + xpub + \"/84'/0'/*')\";\n+        change_desc_str = \"wpkh(\" + xpub + \"/84'/1'/*')\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    FlatSigningProvider keys;\n+    std::unique_ptr<Descriptor> primary_descriptor = Parse(primary_desc_str, keys, false);\n+    std::unique_ptr<Descriptor> change_descriptor = Parse(change_desc_str, keys, false);\n+    WalletDescriptor primary(std::move(primary_descriptor), creation_time, 0, 0, 0);\n+    WalletDescriptor change(std::move(change_descriptor), creation_time, 0, 0, 0);\n+\n+    // Calculate the private key for the extended key\n+    CKeyMetadata metadata(creation_time);\n+    CPubKey master_pubkey = master_key.key.GetPubKey();\n+    assert(master_key.key.VerifyPubKey(master_pubkey));\n+    metadata.hdKeypath     = \"m\";\n+    metadata.has_key_origin = true;\n+    std::copy(master_key.vchFingerprint, master_key.vchFingerprint + 4, metadata.key_origin.fingerprint);\n+    metadata.key_origin.path = std::vector<uint32_t>();\n+\n+    // mem store the metadata\n+    mapKeyMetadata[master_pubkey.GetID()] = metadata;\n+\n+    // write the key&metadata to the database\n+    if (!HaveKey(master_pubkey.GetID()) && !AddKeyPubKey(master_key.key, master_pubkey))\n+        throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+\n+    SetPrimaryDescriptor(DescriptorID(*primary.descriptor), false, type);\n+    SetChangeDescriptor(DescriptorID(*change.descriptor), false, type);\n+\n+    // Add to the wallet\n+    AddWalletDescriptor(primary);\n+    AddWalletDescriptor(change);\n+}\n+\n CPubKey CWallet::GenerateNewSeed()\n {\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n@@ -1612,6 +1680,23 @@ bool CWallet::AddScriptPubKey(const CScript& script, const DescriptorID& id, int\n \n bool CWallet::IsHDEnabled() const\n {\n+    {\n+        LOCK(cs_wallet);\n+        if (IsDescriptor()) {\n+            // A wallet is HD if all primary and change descriptors are ranged descriptors\n+            for (auto& desc : m_primary_descriptors) {\n+                if (!m_map_descriptors.at(desc.second).descriptor->IsRange()) {\n+                    return false;\n+                }\n+            }\n+            for (auto& desc : m_change_descriptors) {\n+                if (!m_map_descriptors.at(desc.second).descriptor->IsRange()) {\n+                    return false;\n+                }\n+            }\n+            return m_primary_descriptors.size() > 0 && m_change_descriptors.size() > 0;\n+        }\n+    }\n     return !hdChain.seed_id.IsNull();\n }\n "
      },
      {
        "sha": "5380406b2089c32b990eae73ec3225a66e8a52b5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
        "patch": "@@ -1315,6 +1315,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n     bool CanGetAddresses(bool internal = false);\n \n+    /* Generate a new HD seed and a corresponding descriptor of the specified output type */\n+    void GenerateNewDescriptor(CKeyID seed, OutputType type) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     /* Generates a new HD seed (will not be activated) */\n     CPubKey GenerateNewSeed();\n "
      }
    ]
  },
  {
    "sha": "22c9f21bbc4d56ae77290e9573d4ce59bb880436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmM5ZjIxYmJjNGQ1NmFlNzcyOTBlOTU3M2Q0Y2U1OWJiODgwNDM2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T20:58:09Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Function to generate addresses from descriptors",
      "tree": {
        "sha": "1574a760244e41f65689a4e94b05f82090e8f739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1574a760244e41f65689a4e94b05f82090e8f739"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22c9f21bbc4d56ae77290e9573d4ce59bb880436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22c9f21bbc4d56ae77290e9573d4ce59bb880436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22c9f21bbc4d56ae77290e9573d4ce59bb880436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22c9f21bbc4d56ae77290e9573d4ce59bb880436/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef5a2a193a6f3a61e6da6f24dc402d85979cf9be"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7658a678774d3cd5cc52970c3f488544034afdd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22c9f21bbc4d56ae77290e9573d4ce59bb880436/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22c9f21bbc4d56ae77290e9573d4ce59bb880436/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=22c9f21bbc4d56ae77290e9573d4ce59bb880436",
        "patch": "@@ -3685,6 +3685,76 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n     WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n+bool CWallet::GetDestinationFromDescriptor(CTxDestination& dest, OutputType type, bool internal)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_wallet);\n+        if (!IsDescriptor()) {\n+            return false;\n+        }\n+\n+        // Get the descriptor for the address type we are using\n+        DescriptorID desc_id;\n+        if (internal) {\n+            desc_id = m_change_descriptors.at(type);\n+        } else {\n+            desc_id = m_primary_descriptors.at(type);\n+        }\n+        WalletDescriptor& desc = m_map_descriptors[desc_id];\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (desc.cache.size() <= (unsigned int)desc.next_index ||\n+            (desc.cache.size() > (unsigned int)desc.next_index && !desc.descriptor->ExpandFromCache(desc.next_index, desc.cache[desc.next_index - desc.range_start], scripts_temp, out_keys))) {\n+            assert(desc.next_index == desc.range_end);\n+            if (IsLocked()) return false;\n+            std::vector<unsigned char> cache;\n+            if (!desc.descriptor->Expand(desc.next_index, *this, scripts_temp, out_keys, &cache)) return false;\n+            desc.cache.push_back(std::move(cache));\n+            // Add all of the scriptPubKeys to the scriptPubKey set\n+            for (const auto& script : scripts_temp) {\n+                AddScriptPubKey(script, desc_id, desc.next_index);\n+            }\n+            // Load all of the scripts\n+            for (const auto& script : out_keys.scripts) {\n+                CBasicKeyStore::AddCScript(script.second);\n+            }\n+            // Generate the private keys and store them\n+            desc.descriptor->ExpandPrivate(desc.next_index, *this, out_keys);\n+            // Add privkeys\n+            WalletBatch batch(*database);\n+            for (const auto& key : out_keys.keys) {\n+                if (!AddKeyPubKeyWithDB(batch, key.second, key.second.GetPubKey())) {\n+                    throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+                }\n+            }\n+            // Add the key origins\n+            for (const auto& origin : out_keys.origins) {\n+                CPubKey pubkey;\n+                if (out_keys.GetPubKey(origin.first, pubkey)) {\n+                    AddKeyOriginWithDB(batch, pubkey, origin.second.second);\n+                }\n+            }\n+            desc.range_end++;\n+        }\n+\n+        if (!ExtractDestination(scripts_temp[0], dest)) {\n+            return false;\n+        }\n+        desc.next_index++;\n+\n+        // Save the dsecriptor\n+        if (!WalletBatch(*database).WriteDescriptor(desc))\n+            throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+\n+        return true;\n+    }\n+}\n+\n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n {\n     if (!CanGetAddresses(internal)) {"
      },
      {
        "sha": "1fb9f547d0c26389a892b0cbdafa5fd591f62b63",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22c9f21bbc4d56ae77290e9573d4ce59bb880436/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22c9f21bbc4d56ae77290e9573d4ce59bb880436/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=22c9f21bbc4d56ae77290e9573d4ce59bb880436",
        "patch": "@@ -1167,6 +1167,10 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+\n+    /** Fetch an address from the specified descriptor and address type */\n+    bool GetDestinationFromDescriptor(CTxDestination& dest, OutputType type, bool internal);\n+\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n      */"
      }
    ]
  },
  {
    "sha": "795608e51666769596493d1ea527e286b23db468",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTU2MDhlNTE2NjY3Njk1OTY0OTNkMWVhNTI3ZTI4NmIyM2RiNDY4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T21:01:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Get new addresses from descriptors for descriptor wallets",
      "tree": {
        "sha": "6c70a5012705c28d6d3aaa1c45cd27212150408b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c70a5012705c28d6d3aaa1c45cd27212150408b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/795608e51666769596493d1ea527e286b23db468",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/795608e51666769596493d1ea527e286b23db468",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/795608e51666769596493d1ea527e286b23db468",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/795608e51666769596493d1ea527e286b23db468/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22c9f21bbc4d56ae77290e9573d4ce59bb880436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22c9f21bbc4d56ae77290e9573d4ce59bb880436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22c9f21bbc4d56ae77290e9573d4ce59bb880436"
      }
    ],
    "stats": {
      "total": 264,
      "additions": 206,
      "deletions": 58
    },
    "files": [
      {
        "sha": "f1461216bdf9dd8dc5a6e01357eebcf98c994fd1",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795608e51666769596493d1ea527e286b23db468/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795608e51666769596493d1ea527e286b23db468/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=795608e51666769596493d1ea527e286b23db468",
        "patch": "@@ -152,6 +152,10 @@ class WalletImpl : public Wallet\n     {\n         return m_wallet->GetKeyFromPool(pub_key, internal);\n     }\n+    bool getDestinationFromDescriptor(CTxDestination& dest, OutputType type, bool internal) override\n+    {\n+        return m_wallet->GetDestinationFromDescriptor(dest, type, internal);\n+    }\n     bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n     bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }\n     bool isSpendable(const CTxDestination& dest) override { return IsMine(*m_wallet, dest) & ISMINE_SPENDABLE; }\n@@ -469,6 +473,7 @@ class WalletImpl : public Wallet\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet->IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet->m_default_change_type; }\n+    bool isDescriptor() override { return m_wallet->IsDescriptor(); }\n     CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }\n     void remove() override\n     {"
      },
      {
        "sha": "780b3ce48b2c56cb4b28b1c3807db52a18fb025d",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795608e51666769596493d1ea527e286b23db468/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795608e51666769596493d1ea527e286b23db468/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=795608e51666769596493d1ea527e286b23db468",
        "patch": "@@ -79,6 +79,9 @@ class Wallet\n     // Get key from pool.\n     virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n \n+    // Get address from descriptor and type\n+    virtual bool getDestinationFromDescriptor(CTxDestination& dest, OutputType type, bool internal) = 0;\n+\n     //! Get public key.\n     virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n \n@@ -253,6 +256,9 @@ class Wallet\n     // Remove wallet.\n     virtual void remove() = 0;\n \n+    // Wallet is a descriptor wallet\n+    virtual bool isDescriptor() = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;"
      },
      {
        "sha": "a808018379abfdf63d4dbae71d4cd3b24f4266bc",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795608e51666769596493d1ea527e286b23db468/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795608e51666769596493d1ea527e286b23db468/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=795608e51666769596493d1ea527e286b23db468",
        "patch": "@@ -363,24 +363,44 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     else if(type == Receive)\n     {\n         // Generate a new address to associate with given label\n-        CPubKey newKey;\n-        if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n-        {\n-            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n-            if(!ctx.isValid())\n+        CTxDestination dest;\n+        if (walletModel->wallet().isDescriptor()) {\n+            if(!walletModel->wallet().getDestinationFromDescriptor(dest, address_type, false))\n             {\n-                // Unlock wallet failed or was cancelled\n-                editStatus = WALLET_UNLOCK_FAILURE;\n-                return QString();\n+                WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+                if(!ctx.isValid())\n+                {\n+                    // Unlock wallet failed or was cancelled\n+                    editStatus = WALLET_UNLOCK_FAILURE;\n+                    return QString();\n+                }\n+                if(!walletModel->wallet().getDestinationFromDescriptor(dest, address_type, false))\n+                {\n+                    editStatus = KEY_GENERATION_FAILURE;\n+                    return QString();\n+                }\n             }\n+        } else {\n+            CPubKey newKey;\n             if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n             {\n-                editStatus = KEY_GENERATION_FAILURE;\n-                return QString();\n+                WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+                if(!ctx.isValid())\n+                {\n+                    // Unlock wallet failed or was cancelled\n+                    editStatus = WALLET_UNLOCK_FAILURE;\n+                    return QString();\n+                }\n+                if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n+                {\n+                    editStatus = KEY_GENERATION_FAILURE;\n+                    return QString();\n+                }\n             }\n+            walletModel->wallet().learnRelatedScripts(newKey, address_type);\n+            dest = GetDestinationForKey(newKey, address_type);\n         }\n-        walletModel->wallet().learnRelatedScripts(newKey, address_type);\n-        strAddress = EncodeDestination(GetDestinationForKey(newKey, address_type));\n+        strAddress = EncodeDestination(dest);\n     }\n     else\n     {"
      },
      {
        "sha": "5f6c922130972e1695c1799a346ca10dd66d5531",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795608e51666769596493d1ea527e286b23db468/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795608e51666769596493d1ea527e286b23db468/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=795608e51666769596493d1ea527e286b23db468",
        "patch": "@@ -667,15 +667,22 @@ void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRec\n \n     // Create a new refund address, or re-use:\n     CPubKey newKey;\n-    if (walletModel->wallet().getKeyFromPool(false /* internal */, newKey)) {\n+    CTxDestination dest;\n+    const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n+    if (walletModel->wallet().isDescriptor()) {\n+        walletModel->wallet().getDestinationFromDescriptor(dest, change_type, true);\n+    }\n+    else if (walletModel->wallet().getKeyFromPool(false /* internal */, newKey)) {\n         // BIP70 requests encode the scriptPubKey directly, so we are not restricted to address\n         // types supported by the receiver. As a result, we choose the address format we also\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n         walletModel->wallet().learnRelatedScripts(newKey, change_type);\n-        CTxDestination dest = GetDestinationForKey(newKey, change_type);\n+        dest = GetDestinationForKey(newKey, change_type);\n+    }\n+\n+    if (boost::get<CNoDestination>(&dest)) {\n         std::string label = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant).toStdString();\n         walletModel->wallet().setAddressBook(dest, label, \"refund\");\n "
      },
      {
        "sha": "19a3aa6b2634921a99835b8a47e29888ea45d825",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 13,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795608e51666769596493d1ea527e286b23db468/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795608e51666769596493d1ea527e286b23db468/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=795608e51666769596493d1ea527e286b23db468",
        "patch": "@@ -195,13 +195,21 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n     }\n \n-    // Generate a new key that is added to wallet\n-    CPubKey newKey;\n-    if (!pwallet->GetKeyFromPool(newKey)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    CTxDestination dest;\n+    if (pwallet->IsDescriptor()) {\n+        // Get scriptPubKey from wallet\n+        if (!pwallet->GetDestinationFromDescriptor(dest, output_type, false)) {\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+        }\n+    } else {\n+        // Generate a new key that is added to wallet\n+        CPubKey newKey;\n+        if (!pwallet->GetKeyFromPool(newKey)) {\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+        }\n+        pwallet->LearnRelatedScripts(newKey, output_type);\n+        dest = GetDestinationForKey(newKey, output_type);\n     }\n-    pwallet->LearnRelatedScripts(newKey, output_type);\n-    CTxDestination dest = GetDestinationForKey(newKey, output_type);\n \n     pwallet->SetAddressBook(dest, label, \"receive\");\n \n@@ -251,15 +259,23 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         }\n     }\n \n-    CReserveKey reservekey(pwallet);\n-    CPubKey vchPubKey;\n-    if (!reservekey.GetReservedKey(vchPubKey, true))\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    CTxDestination dest;\n+    if (pwallet->IsDescriptor()) {\n+        // Get scriptPubKey from wallet\n+        if (!pwallet->GetDestinationFromDescriptor(dest, output_type, true)) {\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+        }\n+    } else {\n+        CReserveKey reservekey(pwallet);\n+        CPubKey vchPubKey;\n+        if (!reservekey.GetReservedKey(vchPubKey, true))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n-    reservekey.KeepKey();\n+        reservekey.KeepKey();\n \n-    pwallet->LearnRelatedScripts(vchPubKey, output_type);\n-    CTxDestination dest = GetDestinationForKey(vchPubKey, output_type);\n+        pwallet->LearnRelatedScripts(vchPubKey, output_type);\n+        dest = GetDestinationForKey(vchPubKey, output_type);\n+    }\n \n     return EncodeDestination(dest);\n }"
      },
      {
        "sha": "40a97c02d15f100301127f5c30464b8d0c872935",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 30,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795608e51666769596493d1ea527e286b23db468/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795608e51666769596493d1ea527e286b23db468/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=795608e51666769596493d1ea527e286b23db468",
        "patch": "@@ -2985,19 +2985,29 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\");\n                     return false;\n                 }\n-                CPubKey vchPubKey;\n-                bool ret;\n-                ret = reservekey.GetReservedKey(vchPubKey, true);\n-                if (!ret)\n-                {\n-                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n-                    return false;\n-                }\n \n                 const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n \n-                LearnRelatedScripts(vchPubKey, change_type);\n-                scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, change_type));\n+                CTxDestination change_dest;\n+                if (IsDescriptor()) {\n+                    if (!GetDestinationFromDescriptor(change_dest, change_type, true))\n+                    {\n+                        strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                        return false;\n+                    }\n+                } else {\n+                    CPubKey vchPubKey;\n+                    bool ret;\n+                    ret = reservekey.GetReservedKey(vchPubKey, true);\n+                    if (!ret)\n+                    {\n+                        strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                        return false;\n+                    }\n+                    LearnRelatedScripts(vchPubKey, change_type);\n+                    change_dest = GetDestinationForKey(vchPubKey, change_type);\n+                }\n+                scriptChange = GetScriptForDestination(change_dest);\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n@@ -3567,29 +3577,113 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         else\n             nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+        if (IsDescriptor()) {\n+            WalletBatch batch(*database);\n+            for (const auto& desc_id : m_primary_descriptors) {\n+                WalletDescriptor& desc = m_map_descriptors[desc_id.second];\n+                int32_t missing = std::max(std::max((int)nTargetSize, 1) - (desc.range_end - desc.next_index), 0);\n+\n+                for (int32_t i = desc.range_end; i < desc.range_end + missing; ++i) {\n+                    FlatSigningProvider out_keys;\n+                    std::vector<CScript> scripts_temp;\n+                    std::vector<unsigned char> cache;\n+                    if (!desc.descriptor->Expand(i, *this, scripts_temp, out_keys, &cache)) return false;\n+                    desc.cache.push_back(std::move(cache));\n+                    // Add all of the scriptPubKeys to the scriptPubKey set\n+                    for (const auto& script : scripts_temp) {\n+                        AddScriptPubKey(script, desc_id.second, i);\n+                    }\n+                    // Load all of the scripts\n+                    for (const auto& script : out_keys.scripts) {\n+                        CBasicKeyStore::AddCScript(script.second);\n+                    }\n+                    // Generate the private keys\n+                    desc.descriptor->ExpandPrivate(i, *this, out_keys);\n+                    // Add privkeys\n+                    for (const auto& key : out_keys.keys) {\n+                        if (!AddKeyPubKeyWithDB(batch, key.second, key.second.GetPubKey())) {\n+                            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+                        }\n+                    }\n+                    // Add the key origins\n+                    for (const auto& origin : out_keys.origins) {\n+                        CPubKey pubkey;\n+                        if (out_keys.GetPubKey(origin.first, pubkey)) {\n+                            AddKeyOriginWithDB(batch, pubkey, origin.second.second);\n+                        }\n+                    }\n+                }\n+                desc.range_end += missing;\n \n-        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        }\n-        bool internal = false;\n-        WalletBatch batch(*database);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n+                // Save the dsecriptor\n+                if (missing > 0 && !WalletBatch(*database).WriteDescriptor(desc))\n+                    throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n             }\n+            for (const auto& desc_id : m_change_descriptors) {\n+                WalletDescriptor& desc = m_map_descriptors[desc_id.second];\n+                int32_t missing = std::max(std::max((int)nTargetSize, 1) - (desc.range_end - desc.next_index), 0);\n+\n+                for (int32_t i = desc.range_end; i < desc.range_end + missing; ++i) {\n+                    FlatSigningProvider out_keys;\n+                    std::vector<CScript> scripts_temp;\n+                    std::vector<unsigned char> cache;\n+                    if (!desc.descriptor->Expand(i, *this, scripts_temp, out_keys, &cache)) return false;\n+                    desc.cache.push_back(std::move(cache));\n+                    // Add all of the scriptPubKeys to the scriptPubKey set\n+                    for (const auto& script : scripts_temp) {\n+                        AddScriptPubKey(script, desc_id.second, i);\n+                    }\n+                    // Load all of the scripts\n+                    for (const auto& script : out_keys.scripts) {\n+                        CBasicKeyStore::AddCScript(script.second);\n+                    }\n+                    // Generate the private keys\n+                    desc.descriptor->ExpandPrivate(i, *this, out_keys);\n+                    // Add privkeys\n+                    for (const auto& key : out_keys.keys) {\n+                        if (!AddKeyPubKeyWithDB(batch, key.second, key.second.GetPubKey())) {\n+                            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+                        }\n+                    }\n+                    // Add the key origins\n+                    for (const auto& origin : out_keys.origins) {\n+                        CPubKey pubkey;\n+                        if (out_keys.GetPubKey(origin.first, pubkey)) {\n+                            AddKeyOriginWithDB(batch, pubkey, origin.second.second);\n+                        }\n+                    }\n+                }\n+                desc.range_end += missing;\n \n-            CPubKey pubkey(GenerateNewKey(batch, internal));\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-        }\n-        if (missingInternal + missingExternal > 0) {\n-            WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+                // Save the dsecriptor\n+                if (missing > 0 && !WalletBatch(*database).WriteDescriptor(desc))\n+                    throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+            }\n+        } else {\n+            // count amount of available keys (internal, external)\n+            // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+            int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+            int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+\n+            if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n+            {\n+                // don't create extra internal keys\n+                missingInternal = 0;\n+            }\n+            bool internal = false;\n+            WalletBatch batch(*database);\n+            for (int64_t i = missingInternal + missingExternal; i--;)\n+            {\n+                if (i < missingInternal) {\n+                    internal = true;\n+                }\n+\n+                CPubKey pubkey(GenerateNewKey(batch, internal));\n+                AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            }\n+            if (missingInternal + missingExternal > 0) {\n+                WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+            }\n         }\n     }\n     NotifyCanGetAddressesChanged();"
      }
    ]
  },
  {
    "sha": "4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmUxOGI5YjdjNjUwMmZiYWZjODMyODlhYWM3YTU1ZDg5N2JiZDk0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T21:14:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Generate descriptors for descriptor wallets",
      "tree": {
        "sha": "10b8ba45eeb0c27ce61fce5c3d781ee29ea8808f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10b8ba45eeb0c27ce61fce5c3d781ee29ea8808f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe18b9b7c6502fbafc83289aac7a55d897bbd94/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "795608e51666769596493d1ea527e286b23db468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/795608e51666769596493d1ea527e286b23db468",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/795608e51666769596493d1ea527e286b23db468"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "00069d3ab3af6023ce559afcc57dcbad43deabe7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe18b9b7c6502fbafc83289aac7a55d897bbd94/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe18b9b7c6502fbafc83289aac7a55d897bbd94/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
        "patch": "@@ -843,7 +843,15 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD seed with a new one\n         if (IsHDEnabled()) {\n-            SetHDSeed(GenerateNewSeed());\n+            CPubKey seed = GenerateNewSeed();\n+            SetHDSeed(seed);\n+            if (IsDescriptor()) {\n+                // Generate the descriptors for each type\n+                CKeyID seed_id = seed.GetID();\n+                GenerateNewDescriptor(seed_id, OutputType::LEGACY);\n+                GenerateNewDescriptor(seed_id, OutputType::P2SH_SEGWIT);\n+                GenerateNewDescriptor(seed_id, OutputType::BECH32);\n+            }\n         }\n \n         NewKeyPool();\n@@ -4504,6 +4512,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n             walletInstance->SetHDSeed(seed);\n+            if ((wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {\n+                walletInstance->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+                // Generate the descriptors for each type\n+                LOCK(walletInstance->cs_wallet);\n+                CKeyID seed_id = seed.GetID();\n+                walletInstance->GenerateNewDescriptor(seed_id, OutputType::LEGACY);\n+                walletInstance->GenerateNewDescriptor(seed_id, OutputType::P2SH_SEGWIT);\n+                walletInstance->GenerateNewDescriptor(seed_id, OutputType::BECH32);\n+            }\n         } // Otherwise, do not generate a new seed\n \n         // Top up the keypool"
      }
    ]
  },
  {
    "sha": "95fe8337b270e2457b13b8a9b72e08b30417e2d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWZlODMzN2IyNzBlMjQ1N2IxM2I4YTliNzJlMDhiMzA0MTdlMmQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T21:07:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Have setting the HD seed of a descriptor wallet generate the descriptors",
      "tree": {
        "sha": "aa79ff25de42117495b7a092bb54f164e6434f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa79ff25de42117495b7a092bb54f164e6434f3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95fe8337b270e2457b13b8a9b72e08b30417e2d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95fe8337b270e2457b13b8a9b72e08b30417e2d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95fe8337b270e2457b13b8a9b72e08b30417e2d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95fe8337b270e2457b13b8a9b72e08b30417e2d5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe18b9b7c6502fbafc83289aac7a55d897bbd94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe18b9b7c6502fbafc83289aac7a55d897bbd94"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "153805b6acb7c29191338487665964e31ff11bd0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95fe8337b270e2457b13b8a9b72e08b30417e2d5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95fe8337b270e2457b13b8a9b72e08b30417e2d5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=95fe8337b270e2457b13b8a9b72e08b30417e2d5",
        "patch": "@@ -3967,6 +3967,9 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     if (!request.params[0].isNull()) {\n         flush_key_pool = request.params[0].get_bool();\n     }\n+    if (!flush_key_pool && pwallet->IsDescriptor()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Must generate a new keypool when changing the HD seed on a descriptor wallet\");\n+    }\n \n     CPubKey master_pub_key;\n     if (request.params[1].isNull()) {\n@@ -3985,6 +3988,13 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     }\n \n     pwallet->SetHDSeed(master_pub_key);\n+    if (pwallet->IsDescriptor()) {\n+        // Generate the descriptors for each type\n+        CKeyID seed_id = master_pub_key.GetID();\n+        pwallet->GenerateNewDescriptor(seed_id, OutputType::LEGACY);\n+        pwallet->GenerateNewDescriptor(seed_id, OutputType::P2SH_SEGWIT);\n+        pwallet->GenerateNewDescriptor(seed_id, OutputType::BECH32);\n+    }\n     if (flush_key_pool) pwallet->NewKeyPool();\n \n     return NullUniValue;"
      }
    ]
  },
  {
    "sha": "8e61da11161751f30abc757e6a14af714ebc6a29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTYxZGExMTE2MTc1MWYzMGFiYzc1N2U2YTE0YWY3MTRlYmM2YTI5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T21:08:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T10:44:25Z"
      },
      "message": "Compute keypoolsize correctly for descriptor wallets",
      "tree": {
        "sha": "78d7b4061f746d8b9d38bee052a3d30e5a9ba1ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78d7b4061f746d8b9d38bee052a3d30e5a9ba1ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e61da11161751f30abc757e6a14af714ebc6a29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e61da11161751f30abc757e6a14af714ebc6a29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e61da11161751f30abc757e6a14af714ebc6a29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e61da11161751f30abc757e6a14af714ebc6a29/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95fe8337b270e2457b13b8a9b72e08b30417e2d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95fe8337b270e2457b13b8a9b72e08b30417e2d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95fe8337b270e2457b13b8a9b72e08b30417e2d5"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 28,
      "deletions": 6
    },
    "files": [
      {
        "sha": "70b23e0dbca3cc66ece02957dffd50a66d838f7b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e61da11161751f30abc757e6a14af714ebc6a29/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e61da11161751f30abc757e6a14af714ebc6a29/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8e61da11161751f30abc757e6a14af714ebc6a29",
        "patch": "@@ -1726,7 +1726,7 @@ bool CWallet::CanGetAddresses(bool internal)\n     // Check if the keypool has keys\n     bool keypool_has_keys;\n     if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        keypool_has_keys = setInternalKeyPool.size() > 0;\n+        keypool_has_keys = GetKeyPoolSize() - KeypoolCountExternalKeys() > 0;\n     } else {\n         keypool_has_keys = KeypoolCountExternalKeys() > 0;\n     }\n@@ -3543,9 +3543,35 @@ bool CWallet::NewKeyPool()\n size_t CWallet::KeypoolCountExternalKeys()\n {\n     AssertLockHeld(cs_wallet);\n+    if (IsDescriptor()) {\n+        size_t count = 0;\n+        for (const auto& desc_id : m_primary_descriptors) {\n+            WalletDescriptor& desc = m_map_descriptors[desc_id.second];\n+            count += desc.range_end - desc.next_index;\n+        }\n+        return count;\n+    }\n     return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n+unsigned int CWallet::GetKeyPoolSize()\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (IsDescriptor()) {\n+        size_t count = 0;\n+        for (const auto& desc_id : m_primary_descriptors) {\n+            WalletDescriptor& desc = m_map_descriptors[desc_id.second];\n+            count += desc.range_end - desc.next_index;\n+        }\n+        for (const auto& desc_id : m_change_descriptors) {\n+            WalletDescriptor& desc = m_map_descriptors[desc_id.second];\n+            count += desc.range_end - desc.next_index;\n+        }\n+        return count;\n+    }\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();;\n+}\n+\n void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "a39a2d2be46fca92fd094210bc5a45f11d3c70f3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e61da11161751f30abc757e6a14af714ebc6a29/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e61da11161751f30abc757e6a14af714ebc6a29/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8e61da11161751f30abc757e6a14af714ebc6a29",
        "patch": "@@ -1213,11 +1213,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     const std::string& GetLabelName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n-    {\n-        AssertLockHeld(cs_wallet);\n-        return setInternalKeyPool.size() + setExternalKeyPool.size();\n-    }\n+    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false);"
      }
    ]
  },
  {
    "sha": "b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2IyMmRjOTAwZmI2OWFkZDk3ZWI3NzMwZTVmNGRhN2ViMGQyYjg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-12T22:58:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T12:23:47Z"
      },
      "message": "Allow createwallet to create descriptor wallets",
      "tree": {
        "sha": "f5e60d5f08f0f85875b14c40ca6fb74e2f3d000b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5e60d5f08f0f85875b14c40ca6fb74e2f3d000b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e61da11161751f30abc757e6a14af714ebc6a29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e61da11161751f30abc757e6a14af714ebc6a29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e61da11161751f30abc757e6a14af714ebc6a29"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b9747252cb44c9e3a9d84063f350adc080275831",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
        "patch": "@@ -2669,6 +2669,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n             {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n+            {\"descriptor\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n         },\n         RPCResult{\n             \"{\\n\"\n@@ -2709,6 +2710,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         // Born encrypted wallets need to be blank first so that wallet creation doesn't make any unencrypted keys\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n+    if (!request.params[4].isNull() && request.params[3].get_bool()) {\n+        flags |= WALLET_FLAG_DESCRIPTORS;\n+    }\n \n     WalletLocation location(request.params[0].get_str());\n     if (location.Exists()) {"
      }
    ]
  },
  {
    "sha": "57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2U0YjM1YTllMGI1N2FmYjBlMmIwYjMyODBjNGJjODQ4OTczMGNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-22T03:27:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T12:23:47Z"
      },
      "message": "Add whether a wallet is a descriptor wallet to getwalletinfo",
      "tree": {
        "sha": "a42995ac774a85619061c1cb5adfa5135f6c7363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a42995ac774a85619061c1cb5adfa5135f6c7363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3b22dc900fb69add97eb7730e5f4da7eb0d2b88"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d6debe39d860b157ec7f36a977134aa23aba117d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
        "patch": "@@ -2488,6 +2488,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"      \\\"duration\\\" : xxxx              (numeric) elapsed seconds since scan start\\n\"\n             \"      \\\"progress\\\" : x.xxxx,           (numeric) scanning progress percentage [0.0, 1.0]\\n\"\n             \"    }\\n\"\n+            \"  \\\"descriptors\\\": true|false          (boolean) true if the wallet supports descriptors\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -2539,6 +2540,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     } else {\n         obj.pushKV(\"scanning\", false);\n     }\n+    obj.pushKV(\"descriptors\", pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "8634a6bfe76cdc877ec5462ba8289d722875704b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjM0YTZiZmU3NmNkYzg3N2VjNTQ2MmJhODI4OWQ3MjI4NzU3MDRi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-22T03:29:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-05T12:23:47Z"
      },
      "message": "Functional tests for descriptor wallets",
      "tree": {
        "sha": "f07bcf06b917f5af4edc22915c21c751dbecc1b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f07bcf06b917f5af4edc22915c21c751dbecc1b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8634a6bfe76cdc877ec5462ba8289d722875704b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8634a6bfe76cdc877ec5462ba8289d722875704b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8634a6bfe76cdc877ec5462ba8289d722875704b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8634a6bfe76cdc877ec5462ba8289d722875704b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57e4b35a9e0b57afb0e2b0b3280c4bc8489730cf"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 88,
      "deletions": 0
    },
    "files": [
      {
        "sha": "576cd0690604d14d3884da1d61efc2998b7ac112",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8634a6bfe76cdc877ec5462ba8289d722875704b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8634a6bfe76cdc877ec5462ba8289d722875704b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8634a6bfe76cdc877ec5462ba8289d722875704b",
        "patch": "@@ -140,6 +140,7 @@\n     'wallet_disable.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n+    'wallet_descriptor.py',\n     'p2p_mempool.py',\n     'p2p_blocksonly.py',\n     'mining_prioritisetransaction.py',"
      },
      {
        "sha": "a9321e80a134f73b3f5cf55b995f3aeb5c4e363a",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8634a6bfe76cdc877ec5462ba8289d722875704b/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8634a6bfe76cdc877ec5462ba8289d722875704b/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=8634a6bfe76cdc877ec5462ba8289d722875704b",
        "patch": "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(\"desc1\", False, False, True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+        assert wallet_info['descriptors']\n+\n+        # Check that getnewaddress works\n+        self.log.info(\"Test that getnewaddress and getrawchangeaddress work\")\n+        addr = self.nodes[0].getnewaddress(\"\", \"legacy\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/44\\'/0\\'/0\\'')\n+\n+        addr = self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/49\\'/0\\'/0\\'')\n+\n+        addr = self.nodes[0].getnewaddress(\"\", \"bech32\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/84\\'/0\\'/0\\'')\n+\n+        # Check that getrawchangeaddress works\n+        addr = self.nodes[0].getrawchangeaddress(\"legacy\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/44\\'/1\\'/0\\'')\n+\n+        addr = self.nodes[0].getrawchangeaddress(\"p2sh-segwit\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/49\\'/1\\'/0\\'')\n+\n+        addr = self.nodes[0].getrawchangeaddress(\"bech32\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/84\\'/1\\'/0\\'')\n+\n+        # Make a wallet to receive coins at\n+        self.nodes[0].createwallet(\"desc2\", False, False, True)\n+        recv_wrpc = self.nodes[0].get_wallet_rpc(\"desc2\")\n+        assert recv_wrpc.getwalletinfo()['descriptors']\n+        send_wrpc = self.nodes[0].get_wallet_rpc(\"desc1\")\n+\n+        # Generate some coins\n+        send_wrpc.generatetoaddress(101, send_wrpc.getnewaddress())\n+\n+        # Make transactions\n+        self.log.info(\"Test sending and receiving\")\n+        addr = recv_wrpc.getnewaddress()\n+        send_wrpc.sendtoaddress(addr, 10)\n+\n+        # Make sure things are disabled\n+        self.log.info(\"Test disabled RPCs\")\n+        assert_raises_rpc_error(-4, \"importprivkey is not available for descriptor wallets\", recv_wrpc.importprivkey, \"cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW\")\n+        assert_raises_rpc_error(-4, \"addmultisigaddress is not available for descriptor wallets\", recv_wrpc.addmultisigaddress, 1, [recv_wrpc.getnewaddress()])\n+        assert_raises_rpc_error(-4, \"importaddress is not available for descriptor wallets\", recv_wrpc.importaddress, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"dumpprivkey is not available for descriptor wallets\", recv_wrpc.dumpprivkey, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"importpubkey is not available for descriptor wallets\", recv_wrpc.importpubkey, send_wrpc.getaddressinfo(send_wrpc.getnewaddress()))\n+        assert_raises_rpc_error(-4, \"importmulti is not available for descriptor wallets\", recv_wrpc.importmulti, [])\n+\n+if __name__ == '__main__':\n+    WalletDescriptorTest().main ()"
      }
    ]
  }
]