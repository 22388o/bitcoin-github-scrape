[
  {
    "sha": "20b6e959449d0c07639599b99ba917d2cac62493",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGI2ZTk1OTQ0OWQwYzA3NjM5NTk5Yjk5YmE5MTdkMmNhYzYyNDkz",
    "commit": {
      "author": {
        "name": "Christopher Coverdale",
        "email": "chris.coverdale24@gmail.com",
        "date": "2020-06-21T22:32:32Z"
      },
      "committer": {
        "name": "Christopher Coverdale",
        "email": "chris.coverdale24@gmail.com",
        "date": "2020-06-22T11:58:14Z"
      },
      "message": "test: refactor functional tests to use restart_node",
      "tree": {
        "sha": "021837bfa0fa9ccc43a70181306bd6af8ce7f121",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/021837bfa0fa9ccc43a70181306bd6af8ce7f121"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20b6e959449d0c07639599b99ba917d2cac62493",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQHQBAABCgA6FiEERNF0V3b7vg9BtFmPvPBf3s1tvMEFAl7wnSscHGNocmlzLmNv\ndmVyZGFsZTI0QGdtYWlsLmNvbQAKCRC88F/ezW28wewrC/4t6O3oJIHye6kFFi9W\nreWkf8tVtYJz5cK240gkxc6VBnDs58EvfSqXcHKWlQ3Eo1+zkNABFMalo5D2xC75\nut10+GjaV9XbdgUBLZyyKeD5g+yhxUaltyB3aXcn9RP5vmRkULX/PB7WNxA0LGMO\n11gOguJMhQ6VNSsWh+ooN1OUWfm+iekdggWB+GmKEf+zRXRZ7iW9rpkM792pKwTU\n49aSL3BnTl20FZqaeLUWwPlnjnm+17oSOB45r+OYZSYdubQCTs6Z5aXTOmnOQmye\nwMm5mjh2AaV7TCkeyO40jC9xU03lSFCxDhjwqXsGjQGHilUAb92Ab99x7xuyKGxD\nRWwvmIt9j/8+JyBE57t5KyDdXVYBRqHIIaqNopBz1uF/GHkXThi0cshl9magAHZc\nIiSU1vqgHMEKOH7SRDXL4bcSzkBndXIbken+tEntyl+p1/pzxK70rDED52O9sHtq\n9nDmSO2ab/8HmN5vB+6um0Z5kDRa34BaLLFi99Bt9GRZ3yA=\n=TxZY\n-----END PGP SIGNATURE-----",
        "payload": "tree 021837bfa0fa9ccc43a70181306bd6af8ce7f121\nparent 8ef15e8a86038225afef2487ca23abc10ca5dffa\nauthor Christopher Coverdale <chris.coverdale24@gmail.com> 1592778752 +0100\ncommitter Christopher Coverdale <chris.coverdale24@gmail.com> 1592827094 +0100\n\ntest: refactor functional tests to use restart_node\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b6e959449d0c07639599b99ba917d2cac62493",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20b6e959449d0c07639599b99ba917d2cac62493",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b6e959449d0c07639599b99ba917d2cac62493/comments",
    "author": {
      "login": "ccdle12",
      "id": 18324680,
      "node_id": "MDQ6VXNlcjE4MzI0Njgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccdle12",
      "html_url": "https://github.com/ccdle12",
      "followers_url": "https://api.github.com/users/ccdle12/followers",
      "following_url": "https://api.github.com/users/ccdle12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccdle12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccdle12/orgs",
      "repos_url": "https://api.github.com/users/ccdle12/repos",
      "events_url": "https://api.github.com/users/ccdle12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccdle12/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ccdle12",
      "id": 18324680,
      "node_id": "MDQ6VXNlcjE4MzI0Njgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccdle12",
      "html_url": "https://github.com/ccdle12",
      "followers_url": "https://api.github.com/users/ccdle12/followers",
      "following_url": "https://api.github.com/users/ccdle12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccdle12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccdle12/orgs",
      "repos_url": "https://api.github.com/users/ccdle12/repos",
      "events_url": "https://api.github.com/users/ccdle12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccdle12/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ef15e8a86038225afef2487ca23abc10ca5dffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ef15e8a86038225afef2487ca23abc10ca5dffa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ef15e8a86038225afef2487ca23abc10ca5dffa"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 25,
      "deletions": 48
    },
    "files": [
      {
        "sha": "5cddd6527e7c158b9eabe4504b49eac644050041",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -311,15 +311,13 @@ def run_test(self):\n         self.start_node(4)\n \n         # Open most recent wallet in v0.16 (no loadwallet RPC)\n-        self.stop_node(5)\n-        self.start_node(5, extra_args=[\"-wallet=w2\"])\n+        self.restart_node(5, extra_args=[\"-wallet=w2\"])\n         wallet = node_v16.get_wallet_rpc(\"w2\")\n         info = wallet.getwalletinfo()\n         assert info['keypoolsize'] == 1\n \n         # Create upgrade wallet in v0.16\n-        self.stop_node(-1)\n-        self.start_node(-1, extra_args=[\"-wallet=u1_v16\"])\n+        self.restart_node(-1, extra_args=[\"-wallet=u1_v16\"])\n         wallet = node_v16.get_wallet_rpc(\"u1_v16\")\n         v16_addr = wallet.getnewaddress('', \"bech32\")\n         v16_info = wallet.validateaddress(v16_addr)"
      },
      {
        "sha": "0a457ca17f749f75235d8c1ae724bcf7b42abb68",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -71,8 +71,7 @@ def run_test(self):\n                        check=True)\n \n         self.log.info(\"Restart second, unsynced node with bootstrap file\")\n-        self.stop_node(1)\n-        self.start_node(1, [\"-loadblock=\" + bootstrap_file])\n+        self.restart_node(1, extra_args=[\"-loadblock=\" + bootstrap_file])\n         assert_equal(self.nodes[1].getblockcount(), 100)  # start_node is blocking on all block files being imported\n \n         assert_equal(self.nodes[1].getblockchaininfo()['blocks'], 100)"
      },
      {
        "sha": "afcbcf099ad33487c5e4b0c1bfd72734ee12a6b8",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -67,8 +67,7 @@ def run_test(self):\n         assert not os.path.isfile(default_log_path)\n \n         # just sanity check no crash here\n-        self.stop_node(0)\n-        self.start_node(0, [\"-debuglogfile=%s\" % os.devnull])\n+        self.restart_node(0, [\"-debuglogfile=%s\" % os.devnull])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "e46e5aacc8a6b137c1d70ed6e694fe15e86a1b48",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -263,8 +263,7 @@ def manual_test(self, node_number, use_timestamp):\n         assert_raises_rpc_error(-1, \"not in prune mode\", node.pruneblockchain, 500)\n \n         # now re-start in manual pruning mode\n-        self.stop_node(node_number)\n-        self.start_node(node_number, extra_args=[\"-prune=1\"])\n+        self.restart_node(node_number, extra_args=[\"-prune=1\"])\n         node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n \n@@ -326,16 +325,14 @@ def has_block(index):\n         assert not has_block(3), \"blk00003.dat is still there, should be pruned by now\"\n \n         # stop node, start back up with auto-prune at 550 MiB, make sure still runs\n-        self.stop_node(node_number)\n-        self.start_node(node_number, extra_args=[\"-prune=550\"])\n+        self.restart_node(node_number, extra_args=[\"-prune=550\"])\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n-        self.stop_node(2)\n-        self.start_node(2, extra_args=[\"-prune=550\"])\n+        self.restart_node(2, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads successfully when restarting a pruned node after IBD.\n@@ -344,8 +341,7 @@ def wallet_test(self):\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n         self.sync_blocks(nds, wait=5, timeout=300)\n-        self.stop_node(5)  # stop and start to trigger rescan\n-        self.start_node(5, extra_args=[\"-prune=550\"])\n+        self.restart_node(5, extra_args=[\"-prune=550\"]) # restart to trigger rescan\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "5195d20dcb8d0100691d7b95b58476161e1a3c81",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -559,8 +559,7 @@ def run_test(self):\n             assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n \n             # Assert it is properly saved\n-            self.stop_node(1)\n-            self.start_node(1)\n+            self.restart_node(1)\n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n             assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n "
      },
      {
        "sha": "09b9ebeb2d2a6972947a2ed11fb67e805a765a6e",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -69,8 +69,7 @@ def run_test(self):\n         self.nodes[1].setmocktime(old_time + 3)\n         assert_equal(len(self.nodes[1].listbanned()), 3)\n \n-        self.stop_node(1)\n-        self.start_node(1)\n+        self.restart_node(1)\n \n         listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])"
      },
      {
        "sha": "25dd76544261e7a08b701caebee4f966cab9a850",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -1898,8 +1898,7 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.stop_node(2)\n-        self.start_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n         connect_nodes(self.nodes[0], 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time"
      },
      {
        "sha": "8837e130052d6567a782765f15608ed6c8183851",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -95,8 +95,7 @@ def run_test(self):\n \n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n-        self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert self.nodes[0].getmempoolinfo()['loaded']\n \n         # Verify txs no longer in either node's mempool\n@@ -123,8 +122,7 @@ def run_test(self):\n         balance = newbalance\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n-        self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n         assert self.nodes[0].getmempoolinfo()['loaded']\n \n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -145,8 +143,7 @@ def run_test(self):\n         balance = newbalance\n \n         # Remove using high relay fee again\n-        self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert self.nodes[0].getmempoolinfo()['loaded']\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()"
      },
      {
        "sha": "eddd9388476ecd8452715a11699afacb20292fef",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -110,9 +110,7 @@ def test_persistence(self):\n         assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)\n         assert_equal(self.nodes[1].getwalletinfo()[\"avoid_reuse\"], True)\n \n-        # Stop and restart node 1\n-        self.stop_node(1)\n-        self.start_node(1)\n+        self.restart_node(1)\n         connect_nodes(self.nodes[0], 1)\n \n         # Flags should still be node1.avoid_reuse=false, node2.avoid_reuse=true"
      },
      {
        "sha": "ba1e494d9aca8ee3aa1b846d641f388609dfc944",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -190,8 +190,7 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"already exists\", lambda: self.nodes[0].dumpwallet(wallet_enc_dump))\n \n         # Restart node with new wallet, and test importwallet\n-        self.stop_node(0)\n-        self.start_node(0, ['-wallet=w2'])\n+        self.restart_node(0, ['-wallet=w2'])\n \n         # Make sure the address is not IsMine before import\n         result = self.nodes[0].getaddressinfo(multisig_addr)"
      },
      {
        "sha": "3c336623e29e584ef5ae7a0b42eb537c7ee2c7f0",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -103,8 +103,7 @@ def run_test(self):\n         self.sync_all()\n \n         # Needs rescan\n-        self.stop_node(1)\n-        self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n+        self.restart_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n \n         # Try a RPC based rescan\n@@ -183,8 +182,7 @@ def run_test(self):\n             self.nodes[0].generate(10)\n             # Restart node 1 with keypool of 3 and a different wallet\n             self.nodes[1].createwallet(wallet_name='origin', blank=True)\n-            self.stop_node(1)\n-            self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+            self.restart_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n             connect_nodes(self.nodes[0], 1)\n \n             # sethdseed restoring and seeing txs to addresses out of the keypool"
      },
      {
        "sha": "455f1fc5e859c75a31cc4020505ff82964721ba4",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -77,8 +77,7 @@ def run_test(self):\n         assert_equal(conflicted[\"walletconflicts\"][0], conflicting[\"txid\"])\n \n         # Node0 wallet is shutdown\n-        self.stop_node(0)\n-        self.start_node(0)\n+        self.restart_node(0)\n \n         # The block chain re-orgs and the tx is included in a different block\n         self.nodes[1].generate(9)"
      },
      {
        "sha": "7f1cdbd20bbf23a2310b72dea98e05bdd4b8a54c",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b6e959449d0c07639599b99ba917d2cac62493/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=20b6e959449d0c07639599b99ba917d2cac62493",
        "patch": "@@ -49,28 +49,25 @@ def run_test(self):\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n-        self.stop_node(0)\n-        self.start_node(0)\n+        # Restart node0. Both confirmed and unconfirmed transactions remain in the wallet.\n+        self.restart_node(0)\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n+        # Restart node0 with zapwallettxes and persistmempool. The unconfirmed\n         # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n-        self.stop_node(0)\n-        self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        self.restart_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n         wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n         self.nodes[0].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        # Stop node0 and restart with zapwallettxes, but not persistmempool.\n+        # Restart node0 with zapwallettxes, but not persistmempool.\n         # The unconfirmed transaction is zapped and is no longer in the wallet.\n-        self.stop_node(0)\n-        self.start_node(0, [\"-zapwallettxes=2\"])\n+        self.restart_node(0, [\"-zapwallettxes=2\"])\n \n         # tx1 is still be available because it was confirmed\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)"
      }
    ]
  }
]