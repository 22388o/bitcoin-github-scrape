jonasschnelli,2019-10-15 13:29:37,"Elegant Solution.\nConcept ACK.\nIn the long run, we should probably also improve the 250ms polling on `WalletModel::pollBalanceChanged()`\n\nWill test.",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-542212060,542212060,
promag,2019-10-15 13:34:13,"> also improve the 250ms polling\n\nYou mean remove polling? :trollface: ",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-542214157,542214157,
laanwj,2019-10-17 19:35:14,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-543328389,543328389,
MarcoFalke,2019-10-17 19:49:07,"Put in a gitian build, but I no longer have a windows box for testing",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-543333789,543333789,
DrahtBot,2019-10-18 19:20:31,<!--a722867cd34abeea1fadc8d60700f111-->\nGitian builds for commit ec3ed5a4487886f1c2a35fda0a3289be7b280248 (master):\n * `f64e5b9561bbfd24763ca216dfb72e6c...` [bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/ec3ed5a4487886f1c2a35fda0a3289be7b280248/bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz)\n * `3450cd39da524d4259d8971fa07f7cd3...` [bitcoin-0.19.9,https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-543897681,543897681,
Sjors,2019-10-21 16:45:00,I can confirm that 8f0d8bd makes the unresponsive behavior go away on macOS 10.15 Catalina (e.g. the file menu now works at launch).,https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-544603327,544603327,
promag,2019-10-21 17:27:07,"@MarcoFalke @Sjors force push with\n```diff\n--- a/src/qt/clientmodel.cpp\n+++ b/src/qt/clientmodel.cpp\n@@ -57,9 +57,9 @@ ClientModel::~ClientModel()\n {\n     unsubscribeFromCoreSignals();\n\n-    delete pollTimer;\n     m_thread->quit();\n     m_thread->wait();\n+    delete pollTimer;\n }\n\n int ClientModel::getNumConnections(unsigned int flags) const\n```",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-544620615,544620615,
luke-jr,2019-10-21 17:51:28,"""Moved to another thread"" isn't really ""asynchronous"", but Concept ACK",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-544630618,544630618,
promag,2019-10-21 18:12:09,"@luke-jr right, conceptually asynchronous from the GUI thread.",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-544638889,544638889,
fjahr,2019-10-24 17:08:54,"tested ACK 8f0d8bd \n\nBuilt, ran tests, some manual testing while running for 24h on macOS.\n\nPlease add a description. I got the context from the [core dev logs](http://www.erisian.com.au/bitcoin-core-dev/log-2019-10-17.html) but there should be some information here as well.",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-546013613,546013613,
laanwj,2019-10-25 11:10:43,"> Would it make sense to create a NodePoller object, which handles the timer life cycle? Or is that overkill if the plan is to get rid of polling asap anyway?\n\nI think that as long as polling is necessary (and I don't believe we will completely get rid of it any time soon) it would make sense to have one thread to do all polling, and not, say, create a thread per WalletModel too.\n\nBut it's",https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-546311414,546311414,
laanwj,2019-10-25 16:43:22,ACK 6b6be41c36e4fe9a74bed50e7f0a06532ab1260b,https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-546426693,546426693,
Sjors,2019-10-25 18:21:19,Code review re-ACK 6b6be41; only replaced the scary cast with `{ timer->start(); }`,https://github.com/bitcoin/bitcoin/pull/17135#issuecomment-546459818,546459818,
MarcoFalke,2019-10-15 14:39:34,"```suggestion\n    QThread* const m_thread;\n```\n\n:eyes: ?",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r334993465,334993465,src/qt/clientmodel.h
promag,2019-10-15 14:49:28,"Sorry, done.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r334999714,334999714,src/qt/clientmodel.h
MarcoFalke,2019-10-18 14:10:39,"moving this code into a lambda is stylistic only, right?",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r336510466,336510466,src/qt/clientmodel.cpp
promag,2019-10-18 14:17:33,"I could keep this here but the connection from the timer needs to be direct (not auto) so that this would run in the timer's thread.\n\nAlso, this is now unreachable, and it's a small step towards removing polling.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r336513778,336513778,src/qt/clientmodel.cpp
ysangkok,2019-10-21 16:06:27,why is the timer deleted before the thread stops and not the other way around?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337105307,337105307,src/qt/clientmodel.cpp
promag,2019-10-21 16:27:06,What is the issue?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337115197,337115197,src/qt/clientmodel.cpp
ysangkok,2019-10-21 16:43:19,"I don't know if there is an issue or not, I am just wondering if there is any specific reason for this ordering. Mostly because I saw [this comment](https://stackoverflow.com/questions/10492480/starting-qtimer-in-a-qthread#comment73988017_10493492).",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337122853,337122853,src/qt/clientmodel.cpp
promag,2019-10-21 17:07:31,"Thanks for pointing it, there's indeed an issue here - must be deleteLater of move after joining the other thread.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337134040,337134040,src/qt/clientmodel.cpp
promag,2019-10-21 17:26:08,Fixed.,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337142566,337142566,src/qt/clientmodel.cpp
luke-jr,2019-10-21 17:53:27,Can't you leave `ClientModel::updateTimer` as-is for now? Or at least move the code movement to another commit?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337155139,337155139,src/qt/clientmodel.cpp
luke-jr,2019-10-21 17:55:10,Why can't this use `QTimer(m_thread)`?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337156035,337156035,src/qt/clientmodel.cpp
promag,2019-10-21 18:09:14,"Yes but I'd have to connect with Qt::DirectConnection, otherwise the slot would be called in the GUI event loop.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337162675,337162675,src/qt/clientmodel.cpp
promag,2019-10-21 18:15:22,"Because Qt threading model :trollface:\n\nBeing a child of QThread does nothing other than be owned by it. To have it's events processed in the thread then moveToThread must be used. This also works only if the object being moved has no parent.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337165572,337165572,src/qt/clientmodel.cpp
ysangkok,2019-10-21 18:28:40,why can't this be a unique_ptr?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337171800,337171800,src/qt/clientmodel.cpp
luke-jr,2019-10-21 18:31:26,I thought it deleted children when being deleted itself?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337173074,337173074,src/qt/clientmodel.cpp
luke-jr,2019-10-21 18:32:06,Even after `moveToThread`? Because of the slot being on a GUI object?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337173366,337173366,src/qt/clientmodel.cpp
promag,2019-10-21 18:50:57,"Yes, with auto connection (the default) the signal checks if the target's thread is the same as the sender or not, if not then it's the same as queued connection.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337182137,337182137,src/qt/clientmodel.cpp
promag,2019-10-21 18:51:57,You can't have a tree of objects with different thread affinity.,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337182584,337182584,src/qt/clientmodel.cpp
promag,2019-10-21 18:54:43,"> why can't this be a unique_ptr?\n\nIt can, but it requires more changes, which are unnecessary in the scope of this PR.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r337183952,337183952,src/qt/clientmodel.cpp
laanwj,2019-10-24 19:52:38,"As discussed on IRC: I don't think deleting the timer in the main thread, after having moved it to another thread is safe. Qt objects need to be deleted in the thread that owns them. I think that that thread doesn't exist anymore here doesn't change that. You're not even supposed to hold on to the pointer.\n\nI think you can do this before moving it to the thread to make sure it's cleaned up:\n",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r338761575,338761575,src/qt/clientmodel.cpp
laanwj,2019-10-24 19:54:03,"I think you should do this connect before moving the timer to the thread?\n(or maybe not, I'm not sure hereâ€¦)",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r338762168,338762168,src/qt/clientmodel.cpp
promag,2019-10-25 08:20:34,`QObject::connect` is thread safe.,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r338936921,338936921,src/qt/clientmodel.cpp
promag,2019-10-25 08:20:45,Done.,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r338936979,338936979,src/qt/clientmodel.cpp
promag,2019-10-25 08:33:56,The cast is needed because `QTimer::start` is overloaded.,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r338942232,338942232,src/qt/clientmodel.cpp
Sjors,2019-10-25 09:27:47,^ can you put that in a source code comment?,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r338964232,338964232,src/qt/clientmodel.cpp
laanwj,2019-10-25 11:15:15,"could this work instead of the scary cast ?\n```c++\nconnect(m_thread, &QThread::started, timer, [timer] {\n    timer->start();\n});\n```",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r339002303,339002303,src/qt/clientmodel.cpp
promag,2019-10-25 11:21:33,"Yes that works, and the following also works:\n```cpp\nconnect(m_thread, &QThread::started, [timer] {\n    timer->start();\n});\n```\nbecause `started` is emitted from the associated thread.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r339004314,339004314,src/qt/clientmodel.cpp
laanwj,2019-10-25 11:37:17,Much better!,https://github.com/bitcoin/bitcoin/pull/17135#discussion_r339009116,339009116,src/qt/clientmodel.cpp
promag,2019-10-25 14:02:28,"Ops, I think this is wrong - `deleteLater` isn't called because the thread's event loop is not running. I'll check this.",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r339068388,339068388,src/qt/clientmodel.cpp
promag,2019-10-25 14:03:47,"Nope, all good! From https://doc.qt.io/qt-5/qthread.html#finished:\n> When this signal is emitted, the event loop has already stopped running. No more events will be processed in the thread, except for deferred deletion events. This signal can be connected to QObject::deleteLater(), to free objects in that thread.\n\n",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r339069059,339069059,src/qt/clientmodel.cpp
laanwj,2019-10-25 16:26:50,"Phew, good to know (I've read that once but forgot)",https://github.com/bitcoin/bitcoin/pull/17135#discussion_r339136601,339136601,src/qt/clientmodel.cpp
