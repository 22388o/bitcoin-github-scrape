btcdrak,2015-05-12T17:14:48Z,ACK. This version is well tested.\nThere are some ACKs for this PR in #5496 from before it was changed to a parameterised version.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-101354626,101354626,
NicolasDorier,2015-05-12T17:29:41Z,"As stated, I prefer this one, it is smaller code, has been more tested, save one byte.\n\nMy aesthetic argument is that we will get nicer human readable script. (< locktime > OP_CLTV and < push > OP_RCLTV, instead of cryptic < locktime > < mode > OP_CLTV )\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-101358596,101358596,
gavinandresen,2015-05-13T16:51:58Z,"Nit: I think CheckLockTime's full implementation would conceptually fit better implemented as part of BaseSignatureChecker (and it would remove a few lines of code), because the purpose of the BaseSignatureChecker/TransactionSignatureChecker split is just to have a checker that skips expensive ECDSA validation. Checking the locktime is fast, and it feels safer to have BaseSignatureChecker do the c",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-101744545,101744545,
sipa,2015-05-13T16:57:25Z,BaseSignatureChecker does not know that the data being signed is a\ntransaction.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-101746355,101746355,
jtimon,2015-05-15T18:38:17Z,"Yes, the whole point of BaseSignatureChecker is that EvalScript doesn't need to know anything about transactions.\nUntested ACK\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-102487938,102487938,
NicolasDorier,2015-05-26T12:26:57Z,"any plan to merge that for 0.11 ? I know I can play with it with viacoin/testnet with mempool rule, but I think there is no point in delaying it anymore since there is no controversial problems anymore with it.\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-105507808,105507808,
jtimon,2015-05-26T13:54:45Z,"I don't see any reason not to do it either. maaku prefers the other version but I don't think he is opposed to this one, which seems to be preferred by almost everyone else.\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-105533402,105533402,
rubensayshi,2015-06-03T08:49:09Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-108251273,108251273,
maaku,2015-06-20T01:24:43Z,My objections about the unparametrized version should not be interpreted as release blocking. I prefer the original form for a couple of reasons.\n\nTested ACK. I thoroughly reviewed and tested this code as part of the Project Elements release.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-113691664,113691664,
petertodd,2015-06-22T04:01:40Z,@maaku's Fixed nit. Also thanks for the review!\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-113995852,113995852,
jgarzik,2015-06-22T04:12:41Z,code review ACK\n\nAre there any remaining blockers to merging this?\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-113996689,113996689,
petertodd,2015-06-22T04:25:53Z,"@jgarzik Nothing I can think of.\n\nIf for some reason we find we totally screwed up plan is to just change the behavior, use a new NOP, and go from there. (as was discussed a few months ago with no objections: https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114665)\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-113997331,113997331,
jonasschnelli,2015-06-22T04:58:29Z,code review ACK.\n\nWill test and write some example RPC regtests within the next days.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114005791,114005791,
petertodd,2015-06-22T05:00:19Z,@jonasschnelli RPC regtests? What would those regtests actually do?\n\nI do have very simple demo's of CLTV here: https://github.com/petertodd/checklocktimeverify-demos\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114006349,114006349,
jonasschnelli,2015-06-22T05:09:09Z,"@petertodd: some simple CLTV real-world examples. Creating some CLTV transactions (needs hex fiddling because the wallet doesn't support it right now), broadcast, mine some blocks, see what's in there.\nLike the other scripts in (/qa/rpc-tests).\nThis is a way to test a feature while also creating a test script that help to sustain quality.\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114007817,114007817,
petertodd,2015-06-22T05:16:49Z,"@jonasschnelli Hmm, I suspect the actual testing value of doing that is relatively low, at least until the soft-fork code goes in; the actual opcode itself is very well tested in the script tests, and there's no IsStandard() changes associated. (yet) I personally would add that kind of thing to [cltv-demos](https://github.com/petertodd/checklocktimeverify-demos) because I greatly prefer the python",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114008529,114008529,
jonasschnelli,2015-06-22T05:45:35Z,Sure. I didn't mention the rpc test to hold this PR back.\nMerging is totally fine for me.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114012138,114012138,
jonasschnelli,2015-06-22T08:11:40Z,"What about changing script.cppL144 from\n`case OP_NOP2                   : return ""OP_NOP2"";`\nto\n`case OP_NOP2                   : return ""OP_CHECKLOCKTIMEVERIFY"";`\nor\n`case OP_CHECKLOCKTIMEVERIFY                   : return ""OP_CHECKLOCKTIMEVERIFY"";`\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114035757,114035757,
petertodd,2015-06-22T09:32:25Z,@jonasschnelli Good point.\n\nAnyone have any idea what doing that will break? :/\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114050446,114050446,
btcdrak,2015-06-22T10:06:59Z,@petertodd the tests...\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114057036,114057036,
jonasschnelli,2015-06-22T10:49:56Z,I came up with this because it's exposed in the RPC call `decoderawtransaction` (`scriptPubKey['asm']`).\nChanging this would probably only harm users who rely on OP_NOP2 (which is not in use) in this field. If someone uses the `asm` field and parse the content he needs to get bitchslapped anyway.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114064252,114064252,
mruddy,2015-06-22T13:20:20Z,"Nice work on this @petertodd. It'll be very useful once it's rolled out!\n\nI ran some CLTV style micropayment channel deposit and refund tests on testnet.\n\nOverall, the changes look good.\n\nI'm wondering why you chose to make OP_CHECKLOCKTIMEVERIFY not pop the input argument off the top of the stack in the success case?\n\nIn the success case, by not popping, the semantic of the original no-op",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114099855,114099855,
mruddy,2015-06-22T13:30:29Z,"Here's a table of the combinations of test cases that I tried.\nThe rows represent the three vintages of clients, and the columns are the two possible intended semantics of the OP_NOP2 opcode within scripts.\nThe cells are outcomes with the current implementation of this PR (not popping the top stack item):\n\n|  | script expected no-op semantic | script expected cltv semantic |\n| --- | --- | ---",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114102077,114102077,
maaku,2015-06-22T15:45:11Z,"If you pop the argument off the stack it becomes a hard fork change.\nOn Jun 22, 2015 06:21, ""mruddy"" notifications@github.com wrote:\n\n> Nice work on this @petertodd https://github.com/petertodd. It'll be\n> very useful once it's rolled out!\n> \n> I ran some CLTV style micropayment channel deposit and refund tests on\n> testnet.\n> \n> Overall, the changes look good.\n> \n> I'm wondering why yo",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114158301,114158301,
mruddy,2015-06-22T17:31:00Z,"@maaku: Doh, after re-thinking, I think you are right about that.\n\nI think I confused myself by asking the wrong question when I was contemplating whether having it pop would then be a hard vs. soft fork change.\n\nNow, when I ask myself:\n""Would the change cause a transaction to be seen as invalid by older clients, while simultaneously being seen as valid by newer clients?""\n\nThe answer is, ye",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114191856,114191856,
maaku,2015-06-22T17:33:50Z,"Correct.\nOn Jun 22, 2015 10:31 AM, ""mruddy"" notifications@github.com wrote:\n\n> @maaku https://github.com/maaku: Doh, after re-thinking, I think you\n> are right about that.\n> \n> I think I confused myself by asking the wrong question when I was\n> contemplating whether having it pop would then be a hard vs. soft fork\n> change.\n> \n> Now, when I ask myself:\n> ""Would the change cause a transa",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114192629,114192629,
mruddy,2015-06-22T17:47:49Z,"@maaku cool, thanks for correcting me on that.\n\n@jonasschnelli and @petertodd : About the ""asm"" translation update, when we were talking about removing the ""OP_"" prefixes and adding SIGHASH decodes for #5264 and #5392, we did not come up with too much to worry about breaking when changing the ""asm"" results. Back then, it seemed like breaking dependencies on ""asm"", if they existed, was perceived ",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114196159,114196159,
petertodd,2015-06-22T19:56:11Z,@mruddy Thanks for reminding me! That's a good argument. :) I'll look into doing that then.\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114239054,114239054,
btcdrak,2015-06-22T20:01:18Z,@petertodd @mruddy Isn't that sort of out of scope for this particular PR?\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114240092,114240092,
mruddy,2015-06-23T18:25:41Z,"@btcdrak @petertodd I think updating the opcode name decode is justifiable in the interest of being complete. People do look at the ""asm"" in the raw transaction and script decodes. Having it read as OP_NOP2 could be misleading, especially to casual users, after the new semantic is in effect. As far as timing, it's not critical to update the opcode name decode right now (especially if it pushes thi",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114599353,114599353,
petertodd,2015-06-23T18:38:03Z,"@mruddy That all sounds reasonable. After all, if changing the name isn't a big deal, then changing the name with another pull-req shouldn't be a big deal, and will cut down on the amount of unnecessary code changes in the more pull-req that does change consensus-critical code.\n\nIMO, this pull-req is ready for merging as-is.\n",https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114602624,114602624,
mruddy,2015-06-23T19:34:02Z,@petertodd I'm good with that.\n\nTested ACK\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-114618291,114618291,
afk11,2015-06-25T13:47:40Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-115263203,115263203,
laanwj,2015-06-26T12:41:31Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6124#issuecomment-115666166,115666166,
luke-jr,2015-05-15T17:57:50Z,"This is not clear: 5-byte CScriptNum should be good up to 2**39-1, _beyond_ the limit of the nLockTime field.\n",https://github.com/bitcoin/bitcoin/pull/6124#discussion_r30430509,30430509,src/script/interpreter.cpp
petertodd,2015-05-15T18:02:59Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/6124#discussion_r30430992,30430992,src/script/interpreter.cpp
maaku,2015-06-20T01:21:46Z,"Stupidest little nit... this empty comment line can be removed, no? Or better yet explain the feature like the other comments do.\n",https://github.com/bitcoin/bitcoin/pull/6124#discussion_r32880626,32880626,src/script/interpreter.h
