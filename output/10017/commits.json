[
  {
    "sha": "61d75f587de504310c07216c4755cd206e31dc09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWQ3NWY1ODdkZTUwNDMxMGMwNzIxNmM0NzU1Y2QyMDZlMzFkYzA5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-24T21:42:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T21:30:13Z"
      },
      "message": "Introduce combine_logs.py to combine log files from multiple bitcoinds.\n\nThis commit adds a tool for combining log files from multiple instances\nof bitcoinds as well as the test_framework.log file. This gives a\ncombined view of what the test framework and all bitcoin instances were\ndoing during a qa test.",
      "tree": {
        "sha": "f5794f8fb0c0a252586a9c171a1273c3e735e9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5794f8fb0c0a252586a9c171a1273c3e735e9dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61d75f587de504310c07216c4755cd206e31dc09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d75f587de504310c07216c4755cd206e31dc09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61d75f587de504310c07216c4755cd206e31dc09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d75f587de504310c07216c4755cd206e31dc09/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "919aaf6508557439ab859c25dae86998a9bed12f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/919aaf6508557439ab859c25dae86998a9bed12f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/919aaf6508557439ab859c25dae86998a9bed12f"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 151,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0c2f60172fa184582b2bd24f5494f8e29710e28d",
        "filename": "test/functional/combine_logs.py",
        "status": "added",
        "additions": 111,
        "deletions": 0,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61d75f587de504310c07216c4755cd206e31dc09/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61d75f587de504310c07216c4755cd206e31dc09/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=61d75f587de504310c07216c4755cd206e31dc09",
        "patch": "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"Color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0m\"     # Reset font color\n+\n+        for event in log_events:\n+            print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, event.event, colors[\"reset\"]))\n+\n+    else:\n+        try:\n+            import jinja2\n+        except ImportError:\n+            print(\"jinja2 not found. Try `pip install jinja2`\")\n+            sys.exit(1)\n+        print(jinja2.Environment(loader=jinja2.FileSystemLoader('./'))\n+                    .get_template('combined_log_template.html')\n+                    .render(title=\"Combined Logs from testcase\", log_events=[event._asdict() for event in log_events]))\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "c0b854b0805603e4c7dbd51c77195f953d99e8e7",
        "filename": "test/functional/combined_log_template.html",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61d75f587de504310c07216c4755cd206e31dc09/test/functional/combined_log_template.html",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61d75f587de504310c07216c4755cd206e31dc09/test/functional/combined_log_template.html",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combined_log_template.html?ref=61d75f587de504310c07216c4755cd206e31dc09",
        "patch": "@@ -0,0 +1,40 @@\n+<html lang=\"en\">\n+<head>\n+    <title> {{ title }} </title>\n+    <style>\n+        ul {\n+            list-style-type: none;\n+            font-family: monospace;\n+        }\n+        li {\n+            border: 1px solid slategray;\n+            margin-bottom: 1px;\n+        }\n+        li:hover {\n+            filter: brightness(85%);\n+        }\n+        li.log-test {\n+            background-color: cyan;\n+        }\n+        li.log-node0 {\n+            background-color: lightblue;\n+        }\n+        li.log-node1 {\n+            background-color: lightgreen;\n+        }\n+        li.log-node2 {\n+            background-color: lightsalmon;\n+        }\n+        li.log-node3 {\n+            background-color: lightyellow;\n+        }\n+    </style>\n+</head>\n+<body>\n+<ul>\n+{% for event in log_events %}\n+<li class=\"log-{{ event.source }}\"> {{ event.source }} {{ event.timestamp }} {{event.event}}</li>\n+{% endfor %}\n+</ul>\n+</body>\n+</html>"
      }
    ]
  },
  {
    "sha": "8317a4516102d95c7e45c3b61e33faa84346eb61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzE3YTQ1MTYxMDJkOTVjN2U0NWMzYjYxZTMzZmFhODQzNDZlYjYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T14:05:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T21:30:13Z"
      },
      "message": "Python functional tests should log in UTC\n\nbitcoind logs use UTC. Python functional tests should also log in UTC.",
      "tree": {
        "sha": "d18401440f68ec32d6a771f4bb437033fd64e3a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d18401440f68ec32d6a771f4bb437033fd64e3a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8317a4516102d95c7e45c3b61e33faa84346eb61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8317a4516102d95c7e45c3b61e33faa84346eb61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8317a4516102d95c7e45c3b61e33faa84346eb61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8317a4516102d95c7e45c3b61e33faa84346eb61/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61d75f587de504310c07216c4755cd206e31dc09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d75f587de504310c07216c4755cd206e31dc09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61d75f587de504310c07216c4755cd206e31dc09"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd2e803541462c88a5297200ae0b12ce4aa47344",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8317a4516102d95c7e45c3b61e33faa84346eb61/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8317a4516102d95c7e45c3b61e33faa84346eb61/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8317a4516102d95c7e45c3b61e33faa84346eb61",
        "patch": "@@ -10,6 +10,7 @@\n import sys\n import shutil\n import tempfile\n+import time\n import traceback\n \n from .util import (\n@@ -202,6 +203,7 @@ def _start_logging(self):\n         ch.setLevel(ll)\n         # Format logs the same as bitcoind's debug.log with microprecision (so log files can be concatenated and sorted)\n         formatter = logging.Formatter(fmt = '%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n+        formatter.converter = time.gmtime\n         fh.setFormatter(formatter)\n         ch.setFormatter(formatter)\n         # add the handlers to the logger"
      }
    ]
  }
]