[
  {
    "sha": "01476a88a6095fd3af71cb9bf1eadef920a1197b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTQ3NmE4OGE2MDk1ZmQzYWY3MWNiOWJmMWVhZGVmOTIwYTExOTdi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-19T12:24:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-21T12:48:43Z"
      },
      "message": "wallet: Make -wallet setting not create wallets\n\nThis changes -wallet setting to only load existing wallets, not create new ones.\n\n- Fixes settings.json corner cases reported by sjors & promag:\n  https://github.com/bitcoin-core/gui/issues/95,\n  https://github.com/bitcoin/bitcoin/pull/19754#issuecomment-685858578,\n  https://github.com/bitcoin/bitcoin/pull/19754#issuecomment-685858578\n\n- Prevents accidental creation of wallets reported most recently by jb55\n  http://www.erisian.com.au/bitcoin-core-dev/log-2020-09-14.html#l-355\n\n- Simplifies behavior after #15454. #15454 took the big step of disabling\n  creation of the default wallet. This PR extends it to avoid creating other\n  wallets as well. With this change, new wallets just aren't created on\n  startup, instead of sometimes being created, sometimes not. #15454 release\n  notes are updated here and are simpler.\n\nThis change should be targeted for 0.21.0. It's a bug fix and simplifies\nbehavior of the #15937 / #19754 / #15454 features added in 0.21.0.",
      "tree": {
        "sha": "7a4770657da954423232d5ba82350ff696f81db4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a4770657da954423232d5ba82350ff696f81db4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01476a88a6095fd3af71cb9bf1eadef920a1197b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01476a88a6095fd3af71cb9bf1eadef920a1197b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01476a88a6095fd3af71cb9bf1eadef920a1197b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01476a88a6095fd3af71cb9bf1eadef920a1197b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 77,
      "deletions": 41
    },
    "files": [
      {
        "sha": "d3983b16899e29fd971a57cb845f27edefda98b0",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -292,15 +292,18 @@ Wallet\n   changed from `-32601` (method not found) to `-18` (wallet not found).\n   (#20101)\n \n-### Default Wallet\n-\n-Bitcoin Core will no longer create an unnamed `\"\"` wallet by default when no\n-wallet is specified on the command line or in the configuration files. For\n-backwards compatibility, if an unnamed `\"\"` wallet already exists and would\n-have been loaded previously, then it will still be loaded. Users without an\n-unnamed `\"\"` wallet and without any other wallets to be loaded on startup will\n-be prompted to either choose a wallet to load, or to create a new wallet.\n-(#15454)\n+### Automatic wallet creation removed\n+\n+Bitcoin Core will no longer automatically create new wallets on startup. It will\n+load existing wallets specified by `-wallet` options on the command line or in\n+`bitcoin.conf` or `settings.json` files. And by default it will also load a\n+top-level unnamed (\"\") wallet. However, if specified wallets don't exist,\n+Bitcoin Core will now just log warnings instead of creating new wallets with\n+new keys and addresses like previous releases did.\n+\n+New wallets can be created through the GUI (which has a more prominent create\n+wallet option), through the `bitcoin-cli createwallet` or `bitcoin-wallet\n+create` commands, or the `createwallet` RPC. (#15454)\n \n ### Experimental Descriptor Wallets\n "
      },
      {
        "sha": "8b2ef191fbb85016de641967e974899fd794a9f8",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -60,7 +60,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM"
      },
      {
        "sha": "1cdcb35fc72a22d8f4ddba00a3bfe3edf2ae4edb",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -71,11 +71,16 @@ bool VerifyWallets(interfaces::Chain& chain)\n \n         DatabaseOptions options;\n         DatabaseStatus status;\n+        options.require_existing = true;\n         options.verify = true;\n         bilingual_str error_string;\n         if (!MakeWalletDatabase(wallet_file, options, status, error_string)) {\n-            chain.initError(error_string);\n-            return false;\n+            if (status == DatabaseStatus::FAILED_NOT_FOUND) {\n+                chain.initWarning(Untranslated(strprintf(\"Skipping -wallet path that doesn't exist. %s\\n\", error_string.original)));\n+            } else {\n+                chain.initError(error_string);\n+                return false;\n+            }\n         }\n     }\n \n@@ -88,10 +93,14 @@ bool LoadWallets(interfaces::Chain& chain)\n         for (const std::string& name : gArgs.GetArgs(\"-wallet\")) {\n             DatabaseOptions options;\n             DatabaseStatus status;\n+            options.require_existing = true;\n             options.verify = false; // No need to verify, assuming verified earlier in VerifyWallets()\n             bilingual_str error;\n             std::vector<bilingual_str> warnings;\n             std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n+            if (!database && status == DatabaseStatus::FAILED_NOT_FOUND) {\n+                continue;\n+            }\n             std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n             if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {"
      },
      {
        "sha": "3e28dae4b36e9bb262ed8d7fdb06be641e9441aa",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -179,19 +179,15 @@ def run_test(self):\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)\n-        self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n+        self.start_node(0, ['-conf='+conf_file])\n         self.stop_node(0)\n         assert os.path.exists(os.path.join(new_data_dir, self.chain, 'blocks'))\n-        if self.is_wallet_compiled():\n-            assert os.path.exists(os.path.join(new_data_dir, self.chain, 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n-        self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n+        self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file])\n         assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'blocks'))\n-        if self.is_wallet_compiled():\n-            assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'wallets', 'w2'))\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "070f59d314147992db68e239f8b030b144ef55e7",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -55,7 +55,8 @@ def run_test(self):\n         self.log.info(\"Stop node, remove wallet, mine again some blocks...\")\n         self.stop_node(0)\n         shutil.rmtree(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'))\n-        self.start_node(0)\n+        self.start_node(0, ['-nowallet'])\n+        self.import_deterministic_coinbase_privkeys()\n         self.nodes[0].generate(110)\n \n         scan = self.nodes[0].scantxoutset(\"start\", [])"
      },
      {
        "sha": "872f612a4d445e70daac64ff4d523bc87890418c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -111,6 +111,7 @@ def __init__(self):\n         # are not imported.\n         self.wallet_names = None\n         self.set_test_params()\n+        assert self.wallet_names is None or len(self.wallet_names) <= self.num_nodes\n         if self.options.timeout_factor == 0 :\n             self.options.timeout_factor = 99999\n         self.rpc_timeout = int(self.rpc_timeout * self.options.timeout_factor) # optionally, increase timeout by a factor\n@@ -390,9 +391,13 @@ def setup_nodes(self):\n                 assert_equal(chain_info[\"initialblockdownload\"], False)\n \n     def import_deterministic_coinbase_privkeys(self):\n-        wallet_names = [self.default_wallet_name] * len(self.nodes) if self.wallet_names is None else self.wallet_names\n-        assert len(wallet_names) <= len(self.nodes)\n-        for wallet_name, n in zip(wallet_names, self.nodes):\n+        for i in range(self.num_nodes):\n+            self.init_wallet(i)\n+\n+    def init_wallet(self, i):\n+        wallet_name = self.default_wallet_name if self.wallet_names is None else self.wallet_names[i] if i < len(self.wallet_names) else False\n+        if wallet_name is not False:\n+            n = self.nodes[i]\n             if wallet_name is not None:\n                 n.createwallet(wallet_name=wallet_name, descriptors=self.options.descriptors, load_on_startup=True)\n             n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')"
      },
      {
        "sha": "c7c056a8dcaaa5c70af19ed864b81bb99092ba4a",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -218,7 +218,8 @@ def test_getwalletinfo_on_different_wallet(self):\n     def test_salvage(self):\n         # TODO: Check salvage actually salvages and doesn't break things. https://github.com/bitcoin/bitcoin/issues/7463\n         self.log.info('Check salvage')\n-        self.start_node(0, ['-wallet=salvage'])\n+        self.start_node(0)\n+        self.nodes[0].createwallet(\"salvage\")\n         self.stop_node(0)\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')"
      },
      {
        "sha": "f34c1345e04656b1e71c7506646daa39be5fd88b",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -91,10 +91,10 @@ def do_one_round(self):\n         self.sync_blocks()\n \n     # As above, this mirrors the original bash test.\n-    def start_three(self):\n-        self.start_node(0)\n-        self.start_node(1)\n-        self.start_node(2)\n+    def start_three(self, args=()):\n+        self.start_node(0, self.extra_args[0] + list(args))\n+        self.start_node(1, self.extra_args[1] + list(args))\n+        self.start_node(2, self.extra_args[2] + list(args))\n         self.connect_nodes(0, 3)\n         self.connect_nodes(1, 3)\n         self.connect_nodes(2, 3)\n@@ -110,6 +110,11 @@ def erase_three(self):\n         os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n         os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n \n+    def init_three(self):\n+        self.init_wallet(0)\n+        self.init_wallet(1)\n+        self.init_wallet(2)\n+\n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n         self.nodes[0].generate(1)\n@@ -193,7 +198,8 @@ def run_test(self):\n             shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'blocks'))\n             shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n-            self.start_three()\n+            self.start_three([\"-nowallet\"])\n+            self.init_three()\n \n             assert_equal(self.nodes[0].getbalance(), 0)\n             assert_equal(self.nodes[1].getbalance(), 0)"
      },
      {
        "sha": "eb54da99f52660b29ad0eeef5c14dfbdd0928260",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -95,7 +95,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n class WalletDumpTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-wallet=dump\"]]\n+        self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\"]]\n         self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n@@ -106,6 +106,8 @@ def setup_network(self):\n         self.start_nodes()\n \n     def run_test(self):\n+        self.nodes[0].createwallet(\"dump\")\n+\n         wallet_unenc_dump = os.path.join(self.nodes[0].datadir, \"wallet.unencrypted.dump\")\n         wallet_enc_dump = os.path.join(self.nodes[0].datadir, \"wallet.encrypted.dump\")\n \n@@ -190,7 +192,8 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"already exists\", lambda: self.nodes[0].dumpwallet(wallet_enc_dump))\n \n         # Restart node with new wallet, and test importwallet\n-        self.restart_node(0, ['-wallet=w2'])\n+        self.restart_node(0)\n+        self.nodes[0].createwallet(\"w2\")\n \n         # Make sure the address is not IsMine before import\n         result = self.nodes[0].getaddressinfo(multisig_addr)"
      },
      {
        "sha": "63af9e8720ad7ee621883daf9cb94768f1bc2385",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01476a88a6095fd3af71cb9bf1eadef920a1197b/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=01476a88a6095fd3af71cb9bf1eadef920a1197b",
        "patch": "@@ -41,6 +41,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.rpc_timeout = 120\n+        self.extra_args = [[\"-nowallet\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -80,7 +81,9 @@ def wallet_file(name):\n         # rename wallet.dat to make sure plain wallet file paths (as opposed to\n         # directory paths) can be loaded\n         # create another dummy wallet for use in testing backups later\n-        self.start_node(0, [\"-nowallet\", \"-wallet=empty\", \"-wallet=plain\"])\n+        self.start_node(0)\n+        node.createwallet(\"empty\", descriptors=False)\n+        node.createwallet(\"plain\", descriptors=False)\n         node.createwallet(\"created\")\n         self.stop_nodes()\n         empty_wallet = os.path.join(self.options.tmpdir, 'empty.dat')\n@@ -101,21 +104,23 @@ def wallet_file(name):\n         #   w8         - to verify existing wallet file is loaded correctly\n         #   ''         - to verify default wallet file is created correctly\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', self.default_wallet_name]\n-        extra_args = ['-nowallet'] + ['-wallet={}'.format(n) for n in wallet_names]\n-        self.start_node(0, extra_args)\n+        self.start_node(0)\n+        for wallet_name in wallet_names[:-2]:\n+            self.nodes[0].createwallet(wallet_name, descriptors=False)\n+        for wallet_name in wallet_names[-2:]:\n+            self.nodes[0].loadwallet(wallet_name)\n         assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n \n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n+        # should raise rpc error if wallet path can't be created\n+        assert_raises_rpc_error(-1, \"boost::filesystem::create_directory:\", self.nodes[0].createwallet, \"w8/bad\", descriptors=False)\n+\n         # check that all requested wallets were created\n         self.stop_node(0)\n         for wallet_name in wallet_names:\n             assert_equal(os.path.isfile(wallet_file(wallet_name)), True)\n \n-        # should not initialize if wallet path can't be created\n-        exp_stderr = \"boost::filesystem::create_directory:\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n-\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n@@ -142,26 +147,33 @@ def wallet_file(name):\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)\n-        self.start_node(0, ['-nowallet', '-wallet=w4', '-wallet=w5'])\n+        self.start_node(0)\n+        self.nodes[0].createwallet(\"w4\")\n+        self.nodes[0].createwallet(\"w5\")\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         node.generatetoaddress(nblocks=1, address=w5.getnewaddress())\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n         os.rename(wallet_dir2, wallet_dir())\n-        self.restart_node(0, ['-nowallet', '-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n+        self.restart_node(0, ['-nowallet', '-walletdir=' + data_dir()])\n+        self.nodes[0].loadwallet(\"w4\")\n+        self.nodes[0].loadwallet(\"w5\")\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         w5_info = w5.getwalletinfo()\n         assert_equal(w5_info['immature_balance'], 50)\n \n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n-        self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n+        self.restart_node(0, ['-nowallet', '-walletdir=' + competing_wallet_dir])\n+        self.nodes[0].createwallet(self.default_wallet_name, descriptors=False)\n         exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\S*\\\"!\"\n         self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n-        self.restart_node(0, extra_args)\n+        self.restart_node(0)\n+        for wallet_name in wallet_names:\n+            self.nodes[0].loadwallet(wallet_name)\n \n         assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy'])\n "
      }
    ]
  }
]