[
  {
    "sha": "c6d3746f6d093a3a5ecd61095648bf64c3053041",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmQzNzQ2ZjZkMDkzYTNhNWVjZDYxMDk1NjQ4YmY2NGMzMDUzMDQx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-15T19:02:32Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:48Z"
      },
      "message": "Add -proxytoo option, which allows proxy use non-exclusively, unlike the -proxy option.\n\nConflicts:\n\n\tsrc/init.cpp\n\tsrc/netbase.cpp",
      "tree": {
        "sha": "0781f8ff98c6c477bbccf24960116e337ffadffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0781f8ff98c6c477bbccf24960116e337ffadffe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6d3746f6d093a3a5ecd61095648bf64c3053041",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d3746f6d093a3a5ecd61095648bf64c3053041",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d3746f6d093a3a5ecd61095648bf64c3053041",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d3746f6d093a3a5ecd61095648bf64c3053041/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46784d0826df00d218d25a1e3df419bef36d70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46784d0826df00d218d25a1e3df419bef36d70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46784d0826df00d218d25a1e3df419bef36d70ce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e6e217124cc3062936cffbed365bd3e861b53f00",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6d3746f6d093a3a5ecd61095648bf64c3053041/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6d3746f6d093a3a5ecd61095648bf64c3053041/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c6d3746f6d093a3a5ecd61095648bf64c3053041",
        "patch": "@@ -565,6 +565,15 @@ bool AppInit2()\n         }\n     }\n \n+    if (mapArgs.count(\"-proxytoo\")) {\n+        fProxyToo = true;\n+        addrProxy = CService(mapArgs[\"-proxytoo\"], 9050);\n+        if (!addrProxy.IsValid()) {\n+            ThreadSafeMessageBox(_(\"Invalid -proxytoo address\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n+            return false;\n+        }\n+    }\n+\n     if (mapArgs.count(\"-connect\"))\n         SoftSetBoolArg(\"-dnsseed\", false);\n "
      },
      {
        "sha": "d1f21b677ccaff2de2f0da65b66e5e6815c9face",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6d3746f6d093a3a5ecd61095648bf64c3053041/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6d3746f6d093a3a5ecd61095648bf64c3053041/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c6d3746f6d093a3a5ecd61095648bf64c3053041",
        "patch": "@@ -18,6 +18,7 @@ using namespace std;\n // Settings\n int nSocksVersion = 5;\n int fUseProxy = false;\n+int fProxyToo = false;\n bool fProxyNameLookup = false;\n bool fNameLookup = false;\n CService addrProxy(\"127.0.0.1\",9050);\n@@ -434,7 +435,8 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n-    bool fProxy = (fUseProxy && addrDest.IsRoutable() && !vfNoProxy[addrDest.GetNetwork()]);\n+    bool fProxy = ((fUseProxy || (fProxyToo && rand() %2 == 0)) &&\n+      addrDest.IsRoutable() && !vfNoProxy[addrDest.GetNetwork()]);\n \n     if (!ConnectSocketDirectly(fProxy ? addrProxy : addrDest, hSocket, nTimeout))\n         return false;"
      },
      {
        "sha": "006bfc5757f9d8721e19064b02fb7ffc1bb07b53",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6d3746f6d093a3a5ecd61095648bf64c3053041/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6d3746f6d093a3a5ecd61095648bf64c3053041/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=c6d3746f6d093a3a5ecd61095648bf64c3053041",
        "patch": "@@ -143,6 +143,7 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n // Settings\n extern int nSocksVersion;\n extern int fUseProxy;\n+extern int fProxyToo;\n extern bool fProxyNameLookup;\n extern bool fNameLookup;\n extern CService addrProxy;"
      }
    ]
  },
  {
    "sha": "0d42e592a1851fb365a61fbb32152a616565ea31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDQyZTU5MmExODUxZmIzNjVhNjFmYmIzMjE1MmE2MTY1NjVlYTMx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-18T11:04:53Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:48Z"
      },
      "message": "Fixes Issue #1234 - re-issues getblocks when current node providing them disappears.\n\nConflicts:\n\n\t.gitignore\n\tsrc/main.cpp\n\tsrc/net.cpp\n\tsrc/net.h\n\nConflicts:\n\n\tsrc/main.cpp\n\tsrc/net.h\n\nConflicts:\n\n\t.gitignore",
      "tree": {
        "sha": "dbc8901089e81f10d9b5da355ec5bbc42603ef4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbc8901089e81f10d9b5da355ec5bbc42603ef4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d42e592a1851fb365a61fbb32152a616565ea31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d42e592a1851fb365a61fbb32152a616565ea31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d42e592a1851fb365a61fbb32152a616565ea31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d42e592a1851fb365a61fbb32152a616565ea31/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6d3746f6d093a3a5ecd61095648bf64c3053041",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d3746f6d093a3a5ecd61095648bf64c3053041",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d3746f6d093a3a5ecd61095648bf64c3053041"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 29,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5d60ae4a495e554795c6073d73f30bbed0572fdc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d42e592a1851fb365a61fbb32152a616565ea31/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d42e592a1851fb365a61fbb32152a616565ea31/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0d42e592a1851fb365a61fbb32152a616565ea31",
        "patch": "@@ -32,6 +32,8 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n+CNode* txnode = NULL;           // node calling AcceptToMemoryPool()\n+int nAskedForBlocks = 0;\n CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n@@ -2385,17 +2387,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n-        // Ask the first connected node for block updates\n-        static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot &&\n-            (pfrom->nVersion < NOBLKS_VERSION_START ||\n-             pfrom->nVersion >= NOBLKS_VERSION_END) &&\n-             (nAskedForBlocks < 1 || vNodes.size() <= 1))\n-        {\n-            nAskedForBlocks++;\n-            pfrom->PushGetBlocks(pindexBest, uint256(0));\n-        }\n-\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n@@ -2419,6 +2410,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n+    // Ask the first connected node for block updates\n+    if (!pfrom->fClient && !pfrom->fOneShot &&\n+        (pfrom->nVersion < NOBLKS_VERSION_START ||\n+         pfrom->nVersion >= NOBLKS_VERSION_END) &&\n+         (nAskedForBlocks < 1 || vNodes.size() <= 1))\n+    {\n+        nAskedForBlocks++;\n+        pfrom->fAskedForBlocks = true;\n+        printf(\"initial getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n+        pfrom->PushGetBlocks(pindexBest, uint256(0));\n+    }\n+\n+\n+    if (strCommand == \"version\") ;\n     else if (strCommand == \"verack\")\n     {\n         pfrom->vRecv.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));"
      },
      {
        "sha": "613b513b2da27b48129a1727abb8e226fea98790",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d42e592a1851fb365a61fbb32152a616565ea31/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d42e592a1851fb365a61fbb32152a616565ea31/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0d42e592a1851fb365a61fbb32152a616565ea31",
        "patch": "@@ -67,6 +67,7 @@ extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n+extern int nAskedForBlocks;\n \n // Settings\n extern int64 nTransactionFee;"
      },
      {
        "sha": "ac7d87a78e51ec14f6a0d54d6093db5da469ae87",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d42e592a1851fb365a61fbb32152a616565ea31/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d42e592a1851fb365a61fbb32152a616565ea31/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0d42e592a1851fb365a61fbb32152a616565ea31",
        "patch": "@@ -526,7 +526,14 @@ void CNode::CloseSocketDisconnect()\n     fDisconnect = true;\n     if (hSocket != INVALID_SOCKET)\n     {\n-        printf(\"disconnecting node %s\\n\", addrName.c_str());\n+        if (fDebug)\n+            printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n+        printf(\"disconnecting node %s [\", addrName.c_str());\n+        if (fAskedForBlocks) {\n+            nAskedForBlocks--;\n+            printf(\"ASKFOR.\");\n+        }\n+        printf(\"]\\n\");\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n         vRecv.clear();"
      },
      {
        "sha": "36cac8158681f0c10527d285e5181a00ab70f4c4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d42e592a1851fb365a61fbb32152a616565ea31/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d42e592a1851fb365a61fbb32152a616565ea31/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0d42e592a1851fb365a61fbb32152a616565ea31",
        "patch": "@@ -142,6 +142,8 @@ class CNode\n     int64 nLastRecv;\n     int64 nLastSendEmpty;\n     int64 nTimeConnected;\n+    int nDupBlocks;\n+    bool fAskedForBlocks;\n     int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n@@ -194,6 +196,8 @@ class CNode\n         nLastRecv = 0;\n         nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n+        nDupBlocks = 0;\n+        fAskedForBlocks = false;\n         nHeaderStart = -1;\n         nMessageStart = -1;\n         addr = addrIn;"
      }
    ]
  },
  {
    "sha": "9a2e73191b6bf2518163851727f9f6d1c691e0e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTJlNzMxOTFiNmJmMjUxODE2Mzg1MTcyN2Y5ZjZkMWM2OTFlMGUw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-15T21:45:02Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:48Z"
      },
      "message": "Display in status bar when a longer invalid chain exists.",
      "tree": {
        "sha": "4eaf82401f3a68a0415557c37c9021b701334035",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4eaf82401f3a68a0415557c37c9021b701334035"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a2e73191b6bf2518163851727f9f6d1c691e0e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a2e73191b6bf2518163851727f9f6d1c691e0e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a2e73191b6bf2518163851727f9f6d1c691e0e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a2e73191b6bf2518163851727f9f6d1c691e0e0/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d42e592a1851fb365a61fbb32152a616565ea31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d42e592a1851fb365a61fbb32152a616565ea31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d42e592a1851fb365a61fbb32152a616565ea31"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "440821394fb53242d6253569c3ceb70ca1951758",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a2e73191b6bf2518163851727f9f6d1c691e0e0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a2e73191b6bf2518163851727f9f6d1c691e0e0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9a2e73191b6bf2518163851727f9f6d1c691e0e0",
        "patch": "@@ -2151,6 +2151,11 @@ string GetWarnings(string strFor)\n     }\n \n     // Longer invalid proof-of-work chain\n+    if (pindexBest && bnBestInvalidWork > bnBestChainWork)\n+    {\n+        nPriority = 1500;\n+        strStatusBar = strRPC = \"WARNING: A longer invalid chain currently exists.\";\n+    }\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n     {\n         nPriority = 2000;"
      }
    ]
  },
  {
    "sha": "b6486f8a8942b29b724b528e4bbf5f6c0b868068",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ4NmY4YTg5NDJiMjliNzI0YjUyOGU0YmJmNWY2YzBiODY4MDY4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-15T21:51:52Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:48Z"
      },
      "message": "Enable the code that deals with replacement transactions.",
      "tree": {
        "sha": "a7dbe1ea996a2cb3202cf29acad96957046770b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7dbe1ea996a2cb3202cf29acad96957046770b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6486f8a8942b29b724b528e4bbf5f6c0b868068",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6486f8a8942b29b724b528e4bbf5f6c0b868068",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6486f8a8942b29b724b528e4bbf5f6c0b868068",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6486f8a8942b29b724b528e4bbf5f6c0b868068/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a2e73191b6bf2518163851727f9f6d1c691e0e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a2e73191b6bf2518163851727f9f6d1c691e0e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a2e73191b6bf2518163851727f9f6d1c691e0e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4a0fe74be8ee4592cec8a3549b5761066aab5605",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6486f8a8942b29b724b528e4bbf5f6c0b868068/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6486f8a8942b29b724b528e4bbf5f6c0b868068/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b6486f8a8942b29b724b528e4bbf5f6c0b868068",
        "patch": "@@ -499,7 +499,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         if (mapNextTx.count(outpoint))\n         {\n             // Disable replacement feature for now\n-            return false;\n+            //return false; // enable this\n \n             // Allow replacing with a newer version of the same transaction\n             if (i != 0)"
      }
    ]
  },
  {
    "sha": "318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMThhNWE1N2UxZjFkZjlhMzYwOGE2ZDQ2NWRkMTdmN2EyZmU4ZDkw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-16T14:54:09Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:49Z"
      },
      "message": "Increase Max Connections from 8 to 125.",
      "tree": {
        "sha": "3cbfbd57289afcd5ab280727bec4548acce9f9ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cbfbd57289afcd5ab280727bec4548acce9f9ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6486f8a8942b29b724b528e4bbf5f6c0b868068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6486f8a8942b29b724b528e4bbf5f6c0b868068",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6486f8a8942b29b724b528e4bbf5f6c0b868068"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f0a6d0c4df5213106c9e804a3b476a4925abab41",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
        "patch": "@@ -25,7 +25,7 @@\n using namespace std;\n using namespace boost;\n \n-static const int MAX_OUTBOUND_CONNECTIONS = 8;\n+static const int MAX_OUTBOUND_CONNECTIONS = 125;  // REB - was 8 - network tuning\n \n void ThreadMessageHandler2(void* parg);\n void ThreadSocketHandler2(void* parg);\n@@ -804,7 +804,7 @@ void ThreadSocketHandler2(void* parg)\n                 if (WSAGetLastError() != WSAEWOULDBLOCK)\n                     printf(\"socket error accept failed: %d\\n\", WSAGetLastError());\n             }\n-            else if (nInbound >= GetArg(\"-maxconnections\", 125) - MAX_OUTBOUND_CONNECTIONS)\n+            else if (nInbound >= GetArg(\"-maxconnections\", 200) - MAX_OUTBOUND_CONNECTIONS) // REB\n             {\n                 {\n                     LOCK(cs_setservAddNodeAddresses);"
      }
    ]
  },
  {
    "sha": "941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDE1NDRkMDJhNGNlMzBkNDczNzVkOGIzMWMxMDhhMWI0ZTZiNGY4",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-16T19:28:47Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:49Z"
      },
      "message": "Try new connections every 30 seconds rather than every 2 minutes.",
      "tree": {
        "sha": "12bc9552f19964d623effdd2e8cec3de5a483017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12bc9552f19964d623effdd2e8cec3de5a483017"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/941544d02a4ce30d47375d8b31c108a1b4e6b4f8/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/318a5a57e1f1df9a3608a6d465dd17f7a2fe8d90"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "76a7e11483e4ac487bf90f37567d1885cd153fc0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/941544d02a4ce30d47375d8b31c108a1b4e6b4f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/941544d02a4ce30d47375d8b31c108a1b4e6b4f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
        "patch": "@@ -1508,7 +1508,7 @@ void ThreadOpenAddedConnections2(void* parg)\n                 Sleep(500);\n             }\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-            Sleep(120000); // Retry every 2 minutes\n+            Sleep(30000); // Retry every 0.5 minutes\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         }\n         return;\n@@ -1556,7 +1556,7 @@ void ThreadOpenAddedConnections2(void* parg)\n         if (fShutdown)\n             return;\n         vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-        Sleep(120000); // Retry every 2 minutes\n+        Sleep(30000); // Retry every 0.5 minutes\n         vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         if (fShutdown)\n             return;"
      }
    ]
  },
  {
    "sha": "767de89226fb214e171ced00789371ef10bd1a95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjdkZTg5MjI2ZmIyMTRlMTcxY2VkMDA3ODkzNzFlZjEwYmQxYTk1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T17:15:59Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:49Z"
      },
      "message": "Add DEBUG so Makefile has -g flags",
      "tree": {
        "sha": "4754ad221871b7d1174d489f7a6597bfc1671227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4754ad221871b7d1174d489f7a6597bfc1671227"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/767de89226fb214e171ced00789371ef10bd1a95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/767de89226fb214e171ced00789371ef10bd1a95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/767de89226fb214e171ced00789371ef10bd1a95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/767de89226fb214e171ced00789371ef10bd1a95/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/941544d02a4ce30d47375d8b31c108a1b4e6b4f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/941544d02a4ce30d47375d8b31c108a1b4e6b4f8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0632ab5b13dd26218d56a122317c36b83bb583aa",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/767de89226fb214e171ced00789371ef10bd1a95/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/767de89226fb214e171ced00789371ef10bd1a95/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=767de89226fb214e171ced00789371ef10bd1a95",
        "patch": "@@ -3,7 +3,7 @@ TARGET =\n VERSION = 0.6.99\n INCLUDEPATH += src src/json src/qt\n DEFINES += QT_GUI BOOST_THREAD_USE_LIB USE_IPV6\n-CONFIG += no_include_pwd\n+CONFIG += no_include_pwd DEBUG\n \n # for boost 1.37, add -mt to the boost libraries \n # use: qmake BOOST_LIB_SUFFIX=-mt"
      }
    ]
  },
  {
    "sha": "2f29884409f766e68d2d1d0a75e80909adc05850",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjI5ODg0NDA5Zjc2NmU2OGQyZDFkMGE3NWU4MDkwOWFkYzA1ODUw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T16:17:04Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:49Z"
      },
      "message": "Not needed when caught up...",
      "tree": {
        "sha": "392b2e2479ed1947b5078a7200ebfeaf2bf1ec3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/392b2e2479ed1947b5078a7200ebfeaf2bf1ec3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f29884409f766e68d2d1d0a75e80909adc05850",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f29884409f766e68d2d1d0a75e80909adc05850",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f29884409f766e68d2d1d0a75e80909adc05850",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f29884409f766e68d2d1d0a75e80909adc05850/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "767de89226fb214e171ced00789371ef10bd1a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/767de89226fb214e171ced00789371ef10bd1a95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/767de89226fb214e171ced00789371ef10bd1a95"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "66c997d8f9edc1b432b3d1ef711dde25ccbd6fc5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f29884409f766e68d2d1d0a75e80909adc05850/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f29884409f766e68d2d1d0a75e80909adc05850/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2f29884409f766e68d2d1d0a75e80909adc05850",
        "patch": "@@ -2514,12 +2514,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // find last block in inv vector\n         unsigned int nLastBlock = (unsigned int)(-1);\n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n-            if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n-                nLastBlock = vInv.size() - 1 - nInv;\n-                break;\n+        if (!CaughtUp()) // No need to do this once caught up...\n+            for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n+                if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n+                    nLastBlock = vInv.size() - 1 - nInv;\n+                    break;\n+                }\n             }\n-        }\n         CTxDB txdb(\"r\");\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {"
      }
    ]
  },
  {
    "sha": "77fa41524d3e50e8e7a71d204d1b14d030738ad0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2ZhNDE1MjRkM2U1MGU4ZTdhNzFkMjA0ZDFiMTRkMDMwNzM4YWQw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-14T18:39:50Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:49Z"
      },
      "message": "Show the timestamp for the block.\n\nwrap lines",
      "tree": {
        "sha": "d90650d2a0a7094449b1f186e5fabd33cda3cfa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d90650d2a0a7094449b1f186e5fabd33cda3cfa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77fa41524d3e50e8e7a71d204d1b14d030738ad0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fa41524d3e50e8e7a71d204d1b14d030738ad0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77fa41524d3e50e8e7a71d204d1b14d030738ad0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fa41524d3e50e8e7a71d204d1b14d030738ad0/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f29884409f766e68d2d1d0a75e80909adc05850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f29884409f766e68d2d1d0a75e80909adc05850",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f29884409f766e68d2d1d0a75e80909adc05850"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5c2c99fb021620b9b3542ccb0a07ee8c32fd1599",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77fa41524d3e50e8e7a71d204d1b14d030738ad0/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77fa41524d3e50e8e7a71d204d1b14d030738ad0/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=77fa41524d3e50e8e7a71d204d1b14d030738ad0",
        "patch": "@@ -592,7 +592,9 @@ bool CTxDB::LoadBlockIndex()\n     pindexBest = mapBlockIndex[hashBestChain];\n     nBestHeight = pindexBest->nHeight;\n     bnBestChainWork = pindexBest->bnChainWork;\n-    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight);\n+    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d  date=%s\\n\",\n+      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight,\n+      DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     // Load bnBestInvalidWork, OK if it doesn't exist\n     ReadBestInvalidWork(bnBestInvalidWork);"
      },
      {
        "sha": "09e4fe83a56eeb0b21181db1a6032b85ad9cd616",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77fa41524d3e50e8e7a71d204d1b14d030738ad0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77fa41524d3e50e8e7a71d204d1b14d030738ad0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=77fa41524d3e50e8e7a71d204d1b14d030738ad0",
        "patch": "@@ -951,8 +951,13 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         CTxDB().WriteBestInvalidWork(bnBestInvalidWork);\n         uiInterface.NotifyBlocksChanged();\n     }\n-    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n-    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n+      pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight,\n+      pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%x %H:%M:%S\",\n+      pindexNew->GetBlockTime()).c_str());\n+    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n+      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: WARNING: Displayed transactions may not be correct!  You may need to upgrade, or other nodes may need to upgrade.\\n\");\n }\n@@ -1593,7 +1598,9 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n-    printf(\"SetBestChain: new best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"SetBestChain: new best=%s  height=%d  work=%s  date=%s\\n\",\n+      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n "
      }
    ]
  },
  {
    "sha": "539d24f92f723ef7d30de45fb6329b1385b0d76d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzlkMjRmOTJmNzIzZWY3ZDMwZGU0NWZiNjMyOWIxMzg1YjBkNzZk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-14T18:59:09Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:54:49Z"
      },
      "message": "Display when SIGTERM received (or any signal, for that matter) in debug.log.",
      "tree": {
        "sha": "4a531362e2238e6b0d7300f057ba69741a4f0719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a531362e2238e6b0d7300f057ba69741a4f0719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/539d24f92f723ef7d30de45fb6329b1385b0d76d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539d24f92f723ef7d30de45fb6329b1385b0d76d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/539d24f92f723ef7d30de45fb6329b1385b0d76d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539d24f92f723ef7d30de45fb6329b1385b0d76d/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77fa41524d3e50e8e7a71d204d1b14d030738ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fa41524d3e50e8e7a71d204d1b14d030738ad0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77fa41524d3e50e8e7a71d204d1b14d030738ad0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eaa601a9b58101d9fcc6d18ce4a8b3a49ef5b610",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/539d24f92f723ef7d30de45fb6329b1385b0d76d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/539d24f92f723ef7d30de45fb6329b1385b0d76d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=539d24f92f723ef7d30de45fb6329b1385b0d76d",
        "patch": "@@ -77,9 +77,10 @@ void Shutdown(void* parg)\n     }\n }\n \n-void HandleSIGTERM(int)\n+void HandleSIGTERM(int signal)\n {\n     fRequestShutdown = true;\n+    printf(\"HandleSIGTERM(%d)\\n\", signal);\n }\n \n "
      }
    ]
  },
  {
    "sha": "1d3491c850858480e620eef62a12e7f4b5696f3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDM0OTFjODUwODU4NDgwZTYyMGVlZjYyYTEyZTdmNGI1Njk2ZjNl",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:55:18Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T09:55:18Z"
      },
      "message": "Add command line option -quietinitial.\n\nThis makes debugg.log quieter during block chain catch up, so that it is easier to see the block download process.\n\nYes, I know, potentially unnecessary with using third party log filtering tools, but not everynody uses these...\n\nConflicts:\n\n\tsrc/main.cpp\n\nConflicts:\n\n\tsrc/main.cpp",
      "tree": {
        "sha": "f1bba9603276c184a333000291a0125caa85d530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1bba9603276c184a333000291a0125caa85d530"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d3491c850858480e620eef62a12e7f4b5696f3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3491c850858480e620eef62a12e7f4b5696f3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3491c850858480e620eef62a12e7f4b5696f3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3491c850858480e620eef62a12e7f4b5696f3e/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "539d24f92f723ef7d30de45fb6329b1385b0d76d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539d24f92f723ef7d30de45fb6329b1385b0d76d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/539d24f92f723ef7d30de45fb6329b1385b0d76d"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 118,
      "deletions": 29
    },
    "files": [
      {
        "sha": "1f8e7b9e7659bdef5255ccb6eef2f97bd7623757",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -303,7 +303,8 @@ void CAddrMan::Good_(const CService &addr, int64 nTime)\n     // TODO: maybe re-add the node, but for now, just bail out\n     if (nUBucket == -1) return;\n \n-    printf(\"Moving %s to tried\\n\", addr.ToString().c_str());\n+    if (CaughtUp() || !fQuietInitial)\n+        printf(\"Moving %s to tried\\n\", addr.ToString().c_str());\n \n     // move nId to the tried tables\n     MakeTried(info, nId, nUBucket);"
      },
      {
        "sha": "dc1249692b600e3a4a0ce75b53efef17f61105ae",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -418,7 +418,7 @@ class CAddrMan\n             fRet |= Add_(addr, source, nTimePenalty);\n             Check();\n         }\n-        if (fRet)\n+        if (fRet && (CaughtUp() || !fQuietInitial))\n             printf(\"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort().c_str(), source.ToString().c_str(), nTried, nNew);\n         return fRet;\n     }\n@@ -434,7 +434,7 @@ class CAddrMan\n                 nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n             Check();\n         }\n-        if (nAdd)\n+        if (nAdd && (CaughtUp() || !fQuietInitial))\n             printf(\"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString().c_str(), nTried, nNew);\n         return nAdd > 0;\n     }"
      },
      {
        "sha": "f0cf60e6ee5f2cd7c77263384028e4c616b0bb70",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -239,6 +239,7 @@ std::string HelpMessage()\n         \"  -testnet               \" + _(\"Use the test network\") + \"\\n\" +\n         \"  -debug                 \" + _(\"Output extra debugging information\") + \"\\n\" +\n         \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n+        \"  -quietinitial          \" + _(\"Reduce debug output on initial block download\") + \"\\n\" +\n         \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n #ifdef WIN32\n         \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n@@ -322,6 +323,7 @@ bool AppInit2()\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n+    fQuietInitial = GetBoolArg(\"-quietinitial\");\n \n #if !defined(WIN32) && !defined(QT_GUI)\n     if (fDaemon)"
      },
      {
        "sha": "612c96e913394cbfe24ac495965e8b1489a2a64b",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -321,7 +321,8 @@ void ThreadIRCSeed2(void* parg)\n                 // index 7 is limited to 16 characters\n                 // could get full length name at index 10, but would be different from join messages\n                 strlcpy(pszName, vWords[7].c_str(), sizeof(pszName));\n-                printf(\"IRC got who\\n\");\n+                if (CaughtUp() || !fQuietInitial)\n+                    printf(\"IRC got who\\n\");\n             }\n \n             if (vWords[1] == \"JOIN\" && vWords[0].size() > 1)"
      },
      {
        "sha": "5ff963cf6ea3654f169e077dca7c5919f1da2165",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 18,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -928,6 +928,11 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n+bool CaughtUp()\n+{\n+    return (nBestHeight >= GetNumBlocksOfPeers());\n+}\n+\n bool IsInitialBlockDownload()\n {\n     if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n@@ -1058,8 +1063,11 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n             // Get prev tx from single transactions in memory\n             {\n                 LOCK(mempool.cs);\n-                if (!mempool.exists(prevout.hash))\n-                    return error(\"FetchInputs() : %s mempool Tx prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                if (!mempool.exists(prevout.hash)) {\n+                    if (CaughtUp() || !fQuietInitial)\n+                        printf(\"mempool.exists() : %s prev (%s) not found\\n\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n                 txPrev = mempool.lookup(prevout.hash);\n             }\n             if (!fFound)\n@@ -2250,7 +2258,8 @@ bool CAlert::ProcessAlert()\n             uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n     }\n \n-    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n+    if (CaughtUp() || !fQuietInitial)\n+        printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n     return true;\n }\n \n@@ -2518,6 +2527,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->Misbehaving(20);\n             return error(\"message inv size() = %d\", vInv.size());\n         }\n+        int invtxs = 0;\n+        int invblocks = 0;\n+        int askblocks = 0;\n+        int orphanget = 0;\n+        int lastblockget = 0;\n+        int64 nRequestTime = 0;\n+        CInv inv;\n \n         // find last block in inv vector\n         unsigned int nLastBlock = (unsigned int)(-1);\n@@ -2531,34 +2547,62 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CTxDB txdb(\"r\");\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n-            const CInv &inv = vInv[nInv];\n+            inv = vInv[nInv]; // was \"const CInv &inv =\"\n \n             if (fShutdown)\n                 return true;\n+\n+            if (inv.type == MSG_BLOCK) invblocks++;\n+            if (inv.type == MSG_TX) invtxs++;\n+\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(txdb, inv);\n             if (fDebug)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n \n-            if (!fAlreadyHave)\n-                pfrom->AskFor(inv);\n-            else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+            if (!fAlreadyHave) {\n+                nRequestTime = pfrom->AskFor(inv);\n+                if (inv.type == MSG_BLOCK) askblocks++;\n+            } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n                 pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n+                orphanget++;\n+                if (CaughtUp() || !fQuietInitial)\n+                    printf(\"orphan getblocks %s to %s\\n\", inv.ToString().c_str(), pfrom->addr.ToString().c_str());\n             } else if (nInv == nLastBlock) {\n                 // In case we are on a very long side-chain, it is possible that we already have\n                 // the last block in an inv bundle sent in response to getblocks. Try to detect\n                 // this situation and push another getblocks to continue.\n                 std::vector<CInv> vGetData(1,inv);\n                 pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n+                lastblockget++;\n                 if (fDebug)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n             // Track requests for our stuff\n             Inventory(inv.hash);\n-        }\n-    }\n+        } // for each item in inv bundle\n+\n+        if (!CaughtUp() && fQuietInitial) {\n+            if (invblocks) {\n+                if (vInv.size() == 1) {\n+                    if (askblocks)\n+                        printf(\"askfor %s at %s\", inv.ToString().c_str(), DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str());\n+                    else\n+                        printf(\"inv %s\", inv.ToString().c_str());\n+                } else {\n+                    printf(\"inv containing %d (askfor %d) blocks\", invblocks, askblocks);\n+                    if (invtxs) printf(\" and %d txs\", invtxs);\n+                }\n+                printf(\" at %s\\n\", pfrom->addr.ToString().c_str());\n+            } // inv cointained blocks\n+        } // !CaughtUp()\n+        if (orphanget)\n+            printf(\"orphan getblocks (%d) to %s\\n\", orphanget, pfrom->addr.ToString().c_str());\n+        if (lastblockget)\n+            printf(\"lastblock getblocks to %s\\n\", pfrom->addr.ToString().c_str());\n+    } // strCommand == \"inv\"\n \n \n     else if (strCommand == \"getdata\")\n@@ -2570,16 +2614,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->Misbehaving(20);\n             return error(\"message getdata size() = %d\", vInv.size());\n         }\n+        int nBlocks = 0;\n+        int nTxs = 0;\n \n         BOOST_FOREACH(const CInv& inv, vInv)\n         {\n             if (fShutdown)\n                 return true;\n-            printf(\"received getdata for: %s\\n\", inv.ToString().c_str());\n+            if (CaughtUp() || !fQuietInitial || vInv.size() < 5)\n+                printf(\"received getdata for: %s\\n\", inv.ToString().c_str());\n \n             if (inv.type == MSG_BLOCK)\n             {\n                 // Send block from disk\n+                nBlocks++;\n                 map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n@@ -2599,10 +2647,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         pfrom->hashContinue = 0;\n                     }\n                 }\n-            }\n+            } // if a block\n             else if (inv.IsKnownType())\n             {\n                 // Send stream from relay memory\n+                nTxs++;\n                 {\n                     LOCK(cs_mapRelay);\n                     map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n@@ -2613,8 +2662,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             // Track requests for our stuff\n             Inventory(inv.hash);\n+        } // for each getdata request\n+\n+        if (vInv.size() > 4 && fQuietInitial && !CaughtUp()) {\n+            printf(\"got getdata for \");\n+            if (nBlocks) {\n+                printf(\"%d blocks \", nBlocks);\n+                if (nTxs) printf(\"and \");\n+            }\n+            if (nTxs) printf(\"%d txs \", nTxs);\n+            printf(\"from %s. Sending.\\n\", pfrom->addr.ToString().c_str());\n         }\n-    }\n+\n+    } // strCommand = \"getdata\"\n \n \n     else if (strCommand == \"getblocks\")\n@@ -2631,12 +2691,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pindex = pindex->pnext;\n         int nLimit = 500 + locator.GetDistanceBack();\n         unsigned int nBytes = 0;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n+        if (CaughtUp() || !fQuietInitial)\n+            printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s (%u bytes)\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str(), nBytes);\n+                if (CaughtUp() || !fQuietInitial)\n+                    printf(\"  getblocks stopping at %d %s (%u bytes)\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str(), nBytes);\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n@@ -2739,7 +2801,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n         else if (fMissingInputs)\n         {\n-            printf(\"storing orphan tx %s (mapsz %d)\\n\",\n+            if (CaughtUp() || !fQuietInitial)\n+                printf(\"storing orphan tx %s (mapsz %d)\\n\",\n                    inv.hash.ToString().substr(0,10).c_str(),\n                    mapOrphanTransactions.size() + 1);\n             AddOrphanTx(vMsg);\n@@ -3134,26 +3197,41 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vGetData;\n         int64 nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n+        int gettxs = 0;\n+        int getblocks = 0;\n+\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(txdb, inv))\n             {\n-                printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n+                if (CaughtUp() || !fQuietInitial || inv.type == MSG_BLOCK)\n+                    printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n+\n+                if (inv.type == MSG_BLOCK) {\n+                    getblocks++; \n+                }\n+                if (inv.type == MSG_TX) gettxs++;\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n                     pto->PushMessage(\"getdata\", vGetData);\n                     vGetData.clear();\n                 }\n+                mapAlreadyAskedFor[inv] = nNow;\n             }\n-            mapAlreadyAskedFor[inv] = nNow;\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n \n-    }\n+        if (getblocks && !CaughtUp() && fQuietInitial) {\n+            printf(\"getdata %d blocks\", getblocks);\n+            if (gettxs) printf(\" and %d txs\", gettxs);\n+            printf(\" to %s\\n\", pto->addr.ToString().c_str());\n+        }\n+\n+    } // if LockMain\n     return true;\n }\n "
      },
      {
        "sha": "52f4d4db8bf92c812d95692fb75076b373b7feb8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -172,7 +172,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n             if (nBytes == 0)\n             {\n                 // socket closed\n-                printf(\"socket closed\\n\");\n+                if (fDebug) printf(\"socket closed\\n\");\n                 return false;\n             }\n             else\n@@ -488,7 +488,8 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n         addrman.Attempt(addrConnect);\n \n         /// debug print\n-        printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n+        if (CaughtUp() || !fQuietInitial)\n+            printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n \n         // Set to nonblocking\n #ifdef WIN32"
      },
      {
        "sha": "c125bb50874868770505eaae8431df60ee07774c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -293,12 +293,13 @@ class CNode\n         }\n     }\n \n-    void AskFor(const CInv& inv)\n+    int64 AskFor(const CInv& inv)\n     {\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n         int64& nRequestTime = mapAlreadyAskedFor[inv];\n-        printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n+        if (CaughtUp() || !fQuietInitial)\n+            printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n \n         // Make sure not to reuse time indexes to keep things in the same order\n         int64 nNow = (GetTime() - 1) * 1000000;\n@@ -310,6 +311,8 @@ class CNode\n         // Each retry is 2 minutes after the last\n         nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n         mapAskFor.insert(std::make_pair(nRequestTime, inv));\n+\n+        return nRequestTime;\n     }\n \n "
      },
      {
        "sha": "ccc90903ad7e9e3b22b3a17462608e9ad3e8b07d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -373,7 +373,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             int nRet = select(hSocket + 1, NULL, &fdset, NULL, &timeout);\n             if (nRet == 0)\n             {\n-                printf(\"connection timeout\\n\");\n+                if (fDebug) printf(\"connection timeout\\n\");\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -396,7 +396,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             }\n             if (nRet != 0)\n             {\n-                printf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n+                if (fDebug) printf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -407,7 +407,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         else\n #endif\n         {\n-            printf(\"connect() failed: %i\\n\",WSAGetLastError());\n+            if (fDebug) printf(\"connect() failed: %i\\n\", WSAGetLastError());\n             closesocket(hSocket);\n             return false;\n         }"
      },
      {
        "sha": "546d6b29aca601f5e52ae77907f8b902b96a1084",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -68,6 +68,7 @@ string strMiscWarning;\n bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n+bool fQuietInitial = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n \n // Init openssl library multithreading support"
      },
      {
        "sha": "848a95d7e8bca10d58ff8308e83e0c764a4815e7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3491c850858480e620eef62a12e7f4b5696f3e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3491c850858480e620eef62a12e7f4b5696f3e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1d3491c850858480e620eef62a12e7f4b5696f3e",
        "patch": "@@ -116,6 +116,7 @@ extern std::string strMiscWarning;\n extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n+extern bool fQuietInitial;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();\n@@ -169,6 +170,7 @@ int64 GetAdjustedTime();\n std::string FormatFullVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n void AddTimeData(const CNetAddr& ip, int64 nTime);\n+bool CaughtUp();\n \n \n "
      }
    ]
  },
  {
    "sha": "b5415a94cba8dff426c2dca66b889acab972f8c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTQxNWE5NGNiYThkZmY0MjZjMmRjYTY2Yjg4OWFjYWI5NzJmOGM1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:07:53Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:07:53Z"
      },
      "message": "show more tx info, and which node from for Dos(100) events.\n\nConflicts:\n\n\tsrc/main.cpp",
      "tree": {
        "sha": "511c0aa1373a1fcea547cbed1e46e14b19a77c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/511c0aa1373a1fcea547cbed1e46e14b19a77c16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5415a94cba8dff426c2dca66b889acab972f8c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5415a94cba8dff426c2dca66b889acab972f8c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5415a94cba8dff426c2dca66b889acab972f8c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5415a94cba8dff426c2dca66b889acab972f8c5/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d3491c850858480e620eef62a12e7f4b5696f3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3491c850858480e620eef62a12e7f4b5696f3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3491c850858480e620eef62a12e7f4b5696f3e"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 93,
      "deletions": 47
    },
    "files": [
      {
        "sha": "f8d5be0663eba46d22a08ec95968490accad4ad6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 47,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5415a94cba8dff426c2dca66b889acab972f8c5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5415a94cba8dff426c2dca66b889acab972f8c5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b5415a94cba8dff426c2dca66b889acab972f8c5",
        "patch": "@@ -413,47 +413,59 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n \n bool CTransaction::CheckTransaction() const\n {\n+    uint256 hash = this->GetHash();\n+\n     // Basic checks that don't depend on any context\n-    if (vin.empty())\n-        return DoS(10, error(\"CTransaction::CheckTransaction() : vin empty\"));\n-    if (vout.empty())\n-        return DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n+    if (vin.empty()) {\n+        return DoS(10, error(\"checktx: %s vin empty\", hash.ToString().substr(0,10).c_str()));\n+    }\n+    if (vout.empty()) {\n+        return DoS(10, error(\"checktx: %s vout empty\", hash.ToString().substr(0,10).c_str()));\n+    }\n     // Size limits\n-    if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n+    if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE) {\n+        return DoS(100, error(\"checktx: %s size limits failed\", hash.ToString().substr(0,10).c_str()));\n+    }\n \n     // Check for negative or overflow output values\n     int64 nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        if (txout.nValue < 0)\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue negative\"));\n-        if (txout.nValue > MAX_MONEY)\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue too high\"));\n+        if (txout.nValue < 0) {\n+            return DoS(100, error(\"checktx: %s txout.nValue negative\", hash.ToString().substr(0,10).c_str()));\n+        }\n+        if (txout.nValue > MAX_MONEY) {\n+            return DoS(100, error(\"checktx: %s txout.nValue too high\", hash.ToString().substr(0,10).c_str()));\n+        }\n         nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : txout total out of range\"));\n+        if (!MoneyRange(nValueOut)) {\n+            return DoS(100, error(\"checktx: %s txout total out of range\", hash.ToString().substr(0,10).c_str()));\n+        }\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n-        if (vInOutPoints.count(txin.prevout))\n+        if (vInOutPoints.count(txin.prevout)) {\n+            printf(\"checktx : %s duplicate input\\n\", hash.ToString().substr(0,10).c_str());\n             return false;\n+        }\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (IsCoinBase())\n     {\n-        if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100)\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : coinbase script size\"));\n+        if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100) {\n+            return DoS(100, error(\"checktx: %s coinbase script size %d\", hash.ToString().substr(0,10).c_str(), vin[0].scriptSig.size()));\n+        }\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, vin)\n-            if (txin.prevout.IsNull())\n-                return DoS(10, error(\"CTransaction::CheckTransaction() : prevout is null\"));\n+            if (txin.prevout.IsNull()) {\n+                return DoS(10, error(\"checktx: %s prevout is null\", hash.ToString().substr(0,10).c_str()));\n+            }\n     }\n \n     return true;\n@@ -462,26 +474,30 @@ bool CTransaction::CheckTransaction() const\n bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                         bool* pfMissingInputs)\n {\n+    uint256 hash = tx.GetHash();\n+\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n     if (!tx.CheckTransaction())\n-        return error(\"CTxMemPool::accept() : CheckTransaction failed\");\n+        return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n-    if (tx.IsCoinBase())\n-        return tx.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n+    if (tx.IsCoinBase()) {\n+        return tx.DoS(100, error(\"txaccept: %s coinbase as individual tx\", hash.ToString().substr(0,10).c_str()));\n+    }\n \n     // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n-        return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n+    if ((int64)tx.nLockTime > std::numeric_limits<int>::max()) {\n+        return error(\"txaccept: %s not accepting nLockTime beyond 2038 yet\", hash.ToString().substr(0,10).c_str());\n+    }\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !tx.IsStandard())\n-        return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n+    if (!fTestNet && !tx.IsStandard()) {\n+        return error(\"txaccept: %s nonstandard tx type\", hash.ToString().substr(0,10).c_str());\n+    }\n \n     // Do we already have it?\n-    uint256 hash = tx.GetHash();\n     {\n         LOCK(cs);\n         if (mapTx.count(hash))\n@@ -502,40 +518,58 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n             //return false; // enable this\n \n             // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n+            if (i != 0) {\n+                printf(\"txaccept: replacement failed as i != 0\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             ptxOld = mapNextTx[outpoint].ptx;\n-            if (ptxOld->IsFinal())\n+            if (ptxOld->IsFinal()) {\n+                printf(\"txaccept: replacement failed as old outpoint IsFinal\\n\", hash.ToString().substr(0,10).c_str()); \n                 return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n+            }\n+            if (!tx.IsNewerThan(*ptxOld)) {\n+                printf(\"txaccept: %s replacement failed as IsNewerThan\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 COutPoint outpoint = tx.vin[i].prevout;\n-                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n+                if (!mapNextTx.count(outpoint)) {\n+                    printf(\"txaccept: %s replacement failed as no outpoint found\\n\", hash.ToString().substr(0,10).c_str()); // REB\n                     return false;\n+                }\n+                if (mapNextTx[outpoint].ptx != ptxOld) {\n+                    printf(\"txaccept: %s replacement failed as outpoint is different\\n\", hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n             }\n+            printf(\"txaccept: %s is a replacement\\n\", hash.ToString().substr(0,10).c_str());\n+\n             break;\n         }\n     }\n \n+    bool fFreetx = false;\n+\n     if (fCheckInputs)\n     {\n         MapPrevTx mapInputs;\n         map<uint256, CTxIndex> mapUnused;\n         bool fInvalid = false;\n         if (!tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n         {\n-            if (fInvalid)\n-                return error(\"CTxMemPool::accept() : FetchInputs found invalid tx %s\", hash.ToString().substr(0,10).c_str());\n+            if (fInvalid) {\n+                return error(\"txaccept: %s FetchInputs found invalid\", hash.ToString().substr(0,10).c_str());\n+            }\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return false;\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!tx.AreInputsStandard(mapInputs) && !fTestNet)\n-            return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n+        if (!tx.AreInputsStandard(mapInputs) && !fTestNet) {\n+            return error(\"txaccept: %s nonstandard inputs\", hash.ToString().substr(0,10).c_str());\n+        }\n \n         // Note: if you modify this code to accept non-standard transactions, then\n         // you should add code here to check that the transaction does a\n@@ -545,8 +579,10 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY))\n-            return error(\"CTxMemPool::accept() : not enough fees\");\n+        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY)) {\n+            printf(\"txaccept: tx %s not enough fees\\n\", hash.ToString().substr(0,10).c_str());\n+            return false;\n+        }\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n@@ -565,28 +601,31 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                 nLastTime = nNow;\n                 // -limitfreerelay unit is thousand-bytes-per-minute\n                 // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))\n-                    return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n+                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx)) {\n+                    printf(\"txaccept: free tx %s rejected by rate limiter\\n\", hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                } else\n+                    fFreetx = true;\n                 if (fDebug)\n                     printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n                 dFreeCount += nSize;\n             }\n-        }\n+        } // nFees < MIN_RELAY_TX_FEE\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n-    }\n+    } // if (fCheckInputs)\n \n     // Store transaction in memory\n     {\n         LOCK(cs);\n         if (ptxOld)\n         {\n-            printf(\"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n+            printf(\"CTxMemPool::accept(): replacing tx %s with new version (%s)\\n\", ptxOld->GetHash().ToString().c_str(), hash.ToString().substr(0,10).c_str());\n             remove(*ptxOld);\n         }\n         addUnchecked(tx);\n@@ -597,9 +636,10 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     if (ptxOld)\n         EraseFromWallets(ptxOld->GetHash());\n \n-    printf(\"CTxMemPool::accept() : accepted %s (poolsz %u)\\n\",\n-           hash.ToString().substr(0,10).c_str(),\n-           mapTx.size());\n+    printf(\"mempool %lu: \", mapTx.size());\n+    if (fFreetx) printf(\"free \");\n+    printf(\"tx %s accepted\\n\", hash.ToString().substr(0,10).c_str());\n+\n     return true;\n }\n \n@@ -1167,8 +1207,10 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n             // If prev is coinbase, check that it's matured\n             if (txPrev.IsCoinBase())\n                 for (const CBlockIndex* pindex = pindexBlock; pindex && pindexBlock->nHeight - pindex->nHeight < COINBASE_MATURITY; pindex = pindex->pprev)\n-                    if (pindex->nBlockPos == txindex.pos.nBlockPos && pindex->nFile == txindex.pos.nFile)\n-                        return error(\"ConnectInputs() : tried to spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight);\n+                    if (pindex->nBlockPos == txindex.pos.nBlockPos && pindex->nFile == txindex.pos.nFile) {\n+                        if (fBlock) printf(\"AcceptBlock(): \");\n+                        return error(\"ConnectInputs(): tried to spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight);\n+                    }\n \n             // Check for conflicts (double-spend)\n             // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n@@ -1317,8 +1359,10 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             if (txdb.ReadTxIndex(tx.GetHash(), txindexOld))\n             {\n                 BOOST_FOREACH(CDiskTxPos &pos, txindexOld.vSpent)\n-                    if (pos.IsNull())\n+                    if (pos.IsNull()) {\n+                        printf(\"Failing ConnectBlock() due BIP30\\n\");\n                         return false;\n+                    }\n             }\n         }\n     }\n@@ -1375,8 +1419,10 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             return error(\"ConnectBlock() : UpdateTxIndex failed\");\n     }\n \n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees)) {\n+        printf(\"ConnectBlock() fail due to GetValueOut too high\\n\");\n         return false;\n+    }\n \n     // Update block index on disk without changing it in memory.\n     // The memory index structure will be changed after the db commits."
      }
    ]
  },
  {
    "sha": "d1d4721b39b06f1319f5ed0903105fe9e04dafed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWQ0NzIxYjM5YjA2ZjEzMTlmNWVkMDkwMzEwNWZlOWUwNGRhZmVk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T21:17:43Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:24:39Z"
      },
      "message": "Add -logtxpeer option\n\nConflicts:\n\n\t.gitignore",
      "tree": {
        "sha": "680340b42cc1dff605ace78c2e01b8b6adff8982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/680340b42cc1dff605ace78c2e01b8b6adff8982"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1d4721b39b06f1319f5ed0903105fe9e04dafed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1d4721b39b06f1319f5ed0903105fe9e04dafed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1d4721b39b06f1319f5ed0903105fe9e04dafed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1d4721b39b06f1319f5ed0903105fe9e04dafed/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46784d0826df00d218d25a1e3df419bef36d70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46784d0826df00d218d25a1e3df419bef36d70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46784d0826df00d218d25a1e3df419bef36d70ce"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 71,
      "deletions": 21
    },
    "files": [
      {
        "sha": "af802bdfa8e7cfa3cb167327692e6281351c3e29",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d1d4721b39b06f1319f5ed0903105fe9e04dafed",
        "patch": "@@ -321,6 +321,7 @@ bool AppInit2()\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n+    fLogTxPeer = GetBoolArg(\"-logtxpeer\"); // Not shown in syntax output for privacy reasons.\n \n #if !defined(WIN32) && !defined(QT_GUI)\n     if (fDaemon)"
      },
      {
        "sha": "42c6e7ca8e6f053c9434c442cb18d611b60f6393",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 21,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d1d4721b39b06f1319f5ed0903105fe9e04dafed",
        "patch": "@@ -32,6 +32,7 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n+CNode* txnode = NULL;           // node calling AcceptToMemoryPool()\n CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n@@ -412,10 +413,14 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n bool CTransaction::CheckTransaction() const\n {\n     // Basic checks that don't depend on any context\n-    if (vin.empty())\n+    if (vin.empty()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(10, error(\"CTransaction::CheckTransaction() : vin empty\"));\n-    if (vout.empty())\n+    }\n+    if (vout.empty()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n+    }\n     // Size limits\n     if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n@@ -471,12 +476,16 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         return tx.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n \n     // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n+    if ((int64)tx.nLockTime > std::numeric_limits<int>::max()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n+    }\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !tx.IsStandard())\n+    if (!fTestNet && !tx.IsStandard()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n+    }\n \n     // Do we already have it?\n     uint256 hash = tx.GetHash();\n@@ -500,19 +509,39 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n             return false;\n \n             // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n+            if (i != 0) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                printf(\"txaccept: replacement failed as i != 0\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             ptxOld = mapNextTx[outpoint].ptx;\n-            if (ptxOld->IsFinal())\n+            if (ptxOld->IsFinal()) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                printf(\"txaccept: replacement failed as old outpoint IsFinal\\n\", hash.ToString().substr(0,10).c_str()); \n                 return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n+            }\n+            if (!tx.IsNewerThan(*ptxOld)) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                printf(\"txaccept: %s replacement failed as IsNewerThan\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 COutPoint outpoint = tx.vin[i].prevout;\n-                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n+                if (!mapNextTx.count(outpoint)) {\n+                    if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                    printf(\"txaccept: %s replacement failed as no outpoint found\\n\", hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n+                if (mapNextTx[outpoint].ptx != ptxOld) {\n+                    if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                    printf(\"txaccept: %s replacement failed as outpoint is different\\n\", hash.ToString().substr(0,10).c_str());\n                     return false;\n+                }\n             }\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+            printf(\"txaccept: %s is a replacement\\n\", hash.ToString().substr(0,10).c_str());\n+\n             break;\n         }\n     }\n@@ -524,16 +553,20 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         bool fInvalid = false;\n         if (!tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n         {\n-            if (fInvalid)\n+            if (fInvalid) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                 return error(\"CTxMemPool::accept() : FetchInputs found invalid tx %s\", hash.ToString().substr(0,10).c_str());\n+            }\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return false;\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!tx.AreInputsStandard(mapInputs) && !fTestNet)\n+        if (!tx.AreInputsStandard(mapInputs) && !fTestNet) {\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n+        }\n \n         // Note: if you modify this code to accept non-standard transactions, then\n         // you should add code here to check that the transaction does a\n@@ -543,8 +576,12 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY))\n-            return error(\"CTxMemPool::accept() : not enough fees\");\n+        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY)) {\n+            printf(\"txaccept: tx %s \", hash.ToString().substr(0,10).c_str());\n+            if (txnode && fLogTxPeer) printf(\"from %s \", txnode->addr.ToString().c_str());\n+            printf(\"not enough fees\\n\");\n+            return false;\n+        }\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n@@ -563,21 +600,25 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                 nLastTime = nNow;\n                 // -limitfreerelay unit is thousand-bytes-per-minute\n                 // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))\n-                    return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n+                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx)) {\n+                    printf(\"txaccept: free tx %s \", hash.ToString().substr(0,10).c_str());\n+                    if (txnode && fLogTxPeer) printf(\"from %s \", txnode->addr.ToString().c_str());\n+                    printf(\"rejected by rate limiter\\n\");\n+                    return false;\n+                }\n                 if (fDebug)\n                     printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n                 dFreeCount += nSize;\n             }\n-        }\n+        } // nFees < MIN_RELAY_TX_FEE\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n-    }\n+    } // if (fCheckInputs)\n \n     // Store transaction in memory\n     {\n@@ -595,9 +636,9 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     if (ptxOld)\n         EraseFromWallets(ptxOld->GetHash());\n \n-    printf(\"CTxMemPool::accept() : accepted %s (poolsz %u)\\n\",\n-           hash.ToString().substr(0,10).c_str(),\n-           mapTx.size());\n+    printf(\"mempool %lu: \", mapTx.size());\n+    printf(\"tx %s accepted \", hash.ToString().substr(0,10).c_str());\n+\n     return true;\n }\n \n@@ -2685,8 +2726,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         bool fMissingInputs = false;\n+        txnode = pfrom; \n         if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))\n         {\n+            txnode = NULL;\n+            if (fLogTxPeer)\n+                printf(\"from %s\\n\", pfrom->addr.ToString().c_str());\n+            else\n+                printf(\"\\n\");\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n@@ -2707,7 +2754,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n                     if (tx.AcceptToMemoryPool(txdb, true))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"(orphan)\\n\");\n                         SyncWithWallets(tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n@@ -2718,7 +2765,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             BOOST_FOREACH(uint256 hash, vWorkQueue)\n                 EraseOrphanTx(hash);\n-        }\n+        } // if tx.AcceptToMemoryPool()\n         else if (fMissingInputs)\n         {\n             printf(\"storing orphan tx %s (mapsz %d)\\n\","
      },
      {
        "sha": "39695ec69f88b993ab170a4566cc1dcbec696888",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d1d4721b39b06f1319f5ed0903105fe9e04dafed",
        "patch": "@@ -68,6 +68,7 @@ string strMiscWarning;\n bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n+bool fLogTxPeer = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n \n // Init openssl library multithreading support"
      },
      {
        "sha": "419f7a855c1ce0960abc4e5b1967fed86abbc4c4",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1d4721b39b06f1319f5ed0903105fe9e04dafed/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d1d4721b39b06f1319f5ed0903105fe9e04dafed",
        "patch": "@@ -116,6 +116,7 @@ extern std::string strMiscWarning;\n extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n+extern bool fLogTxPeer;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();"
      }
    ]
  },
  {
    "sha": "dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzYyN2U1ZjE2MzBmZTRmNTY5ZThiNmQ1OTZlZjk0ODZiZjViZTQ0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:27:30Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:27:30Z"
      },
      "message": "Show peer that sent transaction when it causes a DoS(100).\n\nConflicts:\n\n\tsrc/main.cpp",
      "tree": {
        "sha": "b267127d589cdf517faa7d7234ba46db6d52c84c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b267127d589cdf517faa7d7234ba46db6d52c84c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc627e5f1630fe4f569e8b6d596ef9486bf5be44/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5415a94cba8dff426c2dca66b889acab972f8c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5415a94cba8dff426c2dca66b889acab972f8c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5415a94cba8dff426c2dca66b889acab972f8c5"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 57,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b02ed1e6d79449dba00b77956e0c4814b49ce05c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 16,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc627e5f1630fe4f569e8b6d596ef9486bf5be44/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc627e5f1630fe4f569e8b6d596ef9486bf5be44/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
        "patch": "@@ -424,6 +424,7 @@ bool CTransaction::CheckTransaction() const\n     }\n     // Size limits\n     if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"checktx: %s size limits failed\", hash.ToString().substr(0,10).c_str()));\n     }\n \n@@ -432,13 +433,16 @@ bool CTransaction::CheckTransaction() const\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         if (txout.nValue < 0) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"checktx: %s txout.nValue negative\", hash.ToString().substr(0,10).c_str()));\n         }\n         if (txout.nValue > MAX_MONEY) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"checktx: %s txout.nValue too high\", hash.ToString().substr(0,10).c_str()));\n         }\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut)) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"checktx: %s txout total out of range\", hash.ToString().substr(0,10).c_str()));\n         }\n     }\n@@ -457,6 +461,7 @@ bool CTransaction::CheckTransaction() const\n     if (IsCoinBase())\n     {\n         if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"checktx: %s coinbase script size %d\", hash.ToString().substr(0,10).c_str(), vin[0].scriptSig.size()));\n         }\n     }\n@@ -484,6 +489,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase()) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return tx.DoS(100, error(\"txaccept: %s coinbase as individual tx\", hash.ToString().substr(0,10).c_str()));\n     }\n \n@@ -1133,6 +1139,7 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n             // Revisit this if/when transaction replacement is implemented and allows\n             // adding inputs:\n             fInvalid = true;\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"FetchInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n         }\n     }\n@@ -1201,8 +1208,10 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n             CTxIndex& txindex = inputs[prevout.hash].first;\n             CTransaction& txPrev = inputs[prevout.hash].second;\n \n-            if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())\n+            if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size()) {\n+                if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n                 return DoS(100, error(\"ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n+            }\n \n             // If prev is coinbase, check that it's matured\n             if (txPrev.IsCoinBase())\n@@ -1220,8 +1229,10 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n \n             // Check for negative or overflow input values\n             nValueIn += txPrev.vout[prevout.n].nValue;\n-            if (!MoneyRange(txPrev.vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+            if (!MoneyRange(txPrev.vout[prevout.n].nValue) || !MoneyRange(nValueIn)) {\n+                if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n                 return DoS(100, error(\"ConnectInputs() : txin values out of range\"));\n+            }\n \n             // Skip ECDSA signature verification when connecting blocks (fBlock=true)\n             // before the last blockchain checkpoint. This is safe because block merkle hashes are\n@@ -1236,6 +1247,7 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n                     if (fStrictPayToScriptHash && VerifySignature(txPrev, *this, i, false, 0))\n                         return error(\"ConnectInputs() : %s P2SH VerifySignature failed\", GetHash().ToString().substr(0,10).c_str());\n \n+                    if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n                     return DoS(100,error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n                 }\n             }\n@@ -1250,16 +1262,22 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n             }\n         }\n \n-        if (nValueIn < GetValueOut())\n+        if (nValueIn < GetValueOut()) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"ConnectInputs() : %s value in < value out\", GetHash().ToString().substr(0,10).c_str()));\n+        }\n \n         // Tally transaction fees\n         int64 nTxFee = nValueIn - GetValueOut();\n-        if (nTxFee < 0)\n+        if (nTxFee < 0) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"ConnectInputs() : %s nTxFee < 0\", GetHash().ToString().substr(0,10).c_str()));\n+        }\n         nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n+        if (!MoneyRange(nFees)) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"ConnectInputs() : nFees out of range\"));\n+        }\n     }\n \n     return true;\n@@ -1380,8 +1398,10 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     BOOST_FOREACH(CTransaction& tx, vtx)\n     {\n         nSigOps += tx.GetLegacySigOpCount();\n-        if (nSigOps > MAX_BLOCK_SIGOPS)\n+        if (nSigOps > MAX_BLOCK_SIGOPS) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n+        }\n \n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n         nTxPos += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n@@ -1399,8 +1419,10 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n                 // this is to prevent a \"rogue miner\" from creating\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n+                if (nSigOps > MAX_BLOCK_SIGOPS) {\n+                    if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n                     return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n+                }\n             }\n \n             nFees += tx.GetValueIn(mapInputs)-tx.GetValueOut();\n@@ -1724,23 +1746,30 @@ bool CBlock::CheckBlock() const\n     // that can be verified before saving an orphan block.\n \n     // Size limits\n-    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"CheckBlock() : size limits failed\"));\n+    }\n \n     // Check proof of work matches claimed amount\n     if (!CheckProofOfWork(GetHash(), nBits))\n         return DoS(50, error(\"CheckBlock() : proof of work failed\"));\n \n     // Check timestamp\n-    if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+    if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60) {\n         return error(\"CheckBlock() : block timestamp too far in the future\");\n+    }\n \n     // First transaction must be coinbase, the rest must not be\n-    if (vtx.empty() || !vtx[0].IsCoinBase())\n+    if (vtx.empty() || !vtx[0].IsCoinBase()) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"CheckBlock() : first tx is not coinbase\"));\n+    }\n     for (unsigned int i = 1; i < vtx.size(); i++)\n-        if (vtx[i].IsCoinBase())\n+        if (vtx[i].IsCoinBase()) {\n+            if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n             return DoS(100, error(\"CheckBlock() : more than one coinbase\"));\n+        }\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n@@ -1754,20 +1783,26 @@ bool CBlock::CheckBlock() const\n     {\n         uniqueTx.insert(tx.GetHash());\n     }\n-    if (uniqueTx.size() != vtx.size())\n+    if (uniqueTx.size() != vtx.size()) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"CheckBlock() : duplicate transaction\"));\n+    }\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n         nSigOps += tx.GetLegacySigOpCount();\n     }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n+    if (nSigOps > MAX_BLOCK_SIGOPS) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n+    }\n \n     // Check merkleroot\n-    if (hashMerkleRoot != BuildMerkleTree())\n+    if (hashMerkleRoot != BuildMerkleTree()) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n+    }\n \n     return true;\n }\n@@ -1787,8 +1822,10 @@ bool CBlock::AcceptBlock()\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n+    if (nBits != GetNextWorkRequired(pindexPrev, this)) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    }\n \n     // Check timestamp against prev\n     if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n@@ -1800,8 +1837,10 @@ bool CBlock::AcceptBlock()\n             return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n+    if (!Checkpoints::CheckBlock(nHeight, hash)) {\n+        if (txnode) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+    }\n \n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n@@ -2811,8 +2850,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         bool fMissingInputs = false;\n+        txnode = pfrom;\n         if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))\n         {\n+            txnode = NULL;\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);"
      }
    ]
  },
  {
    "sha": "c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmUxMTU2NWY4YTJkNmQ2NTQxN2M4Yjg2YzJlOGIxZTNjYmVhMDcy",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:31:09Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:31:09Z"
      },
      "message": "Merge branch 'LogTxPeer'\n\nConflicts:\n\tsrc/init.cpp\n\tsrc/main.cpp\n\tsrc/util.cpp\n\tsrc/util.h",
      "tree": {
        "sha": "3391c19d4caddcaf2161525d9fe71b42dd5e00e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3391c19d4caddcaf2161525d9fe71b42dd5e00e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc627e5f1630fe4f569e8b6d596ef9486bf5be44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc627e5f1630fe4f569e8b6d596ef9486bf5be44"
      },
      {
        "sha": "d1d4721b39b06f1319f5ed0903105fe9e04dafed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1d4721b39b06f1319f5ed0903105fe9e04dafed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1d4721b39b06f1319f5ed0903105fe9e04dafed"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 30,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0477f47e9dd09811e41fe1f0acdacb9c2a92d0a6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
        "patch": "@@ -324,6 +324,7 @@ bool AppInit2()\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n     fQuietInitial = GetBoolArg(\"-quietinitial\");\n+    fLogTxPeer = GetBoolArg(\"-logtxpeer\"); // Not shown in syntax output for privacy reasons.\n \n #if !defined(WIN32) && !defined(QT_GUI)\n     if (fDaemon)"
      },
      {
        "sha": "a01f76d9a45f91e8a36fdb5d7ebf2df1952aab19",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
        "patch": "@@ -417,9 +417,11 @@ bool CTransaction::CheckTransaction() const\n \n     // Basic checks that don't depend on any context\n     if (vin.empty()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(10, error(\"checktx: %s vin empty\", hash.ToString().substr(0,10).c_str()));\n     }\n     if (vout.empty()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return DoS(10, error(\"checktx: %s vout empty\", hash.ToString().substr(0,10).c_str()));\n     }\n     // Size limits\n@@ -495,11 +497,13 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n     // To help v0.1.5 clients who would see it as a negative number\n     if ((int64)tx.nLockTime > std::numeric_limits<int>::max()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return error(\"txaccept: %s not accepting nLockTime beyond 2038 yet\", hash.ToString().substr(0,10).c_str());\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n     if (!fTestNet && !tx.IsStandard()) {\n+        if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n         return error(\"txaccept: %s nonstandard tx type\", hash.ToString().substr(0,10).c_str());\n     }\n \n@@ -525,30 +529,36 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n             // Allow replacing with a newer version of the same transaction\n             if (i != 0) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                 printf(\"txaccept: replacement failed as i != 0\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n             }\n             ptxOld = mapNextTx[outpoint].ptx;\n             if (ptxOld->IsFinal()) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                 printf(\"txaccept: replacement failed as old outpoint IsFinal\\n\", hash.ToString().substr(0,10).c_str()); \n                 return false;\n             }\n             if (!tx.IsNewerThan(*ptxOld)) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                 printf(\"txaccept: %s replacement failed as IsNewerThan\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n             }\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 COutPoint outpoint = tx.vin[i].prevout;\n                 if (!mapNextTx.count(outpoint)) {\n-                    printf(\"txaccept: %s replacement failed as no outpoint found\\n\", hash.ToString().substr(0,10).c_str()); // REB\n+                    if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n+                    printf(\"txaccept: %s replacement failed as no outpoint found\\n\", hash.ToString().substr(0,10).c_str());\n                     return false;\n                 }\n                 if (mapNextTx[outpoint].ptx != ptxOld) {\n+                    if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                     printf(\"txaccept: %s replacement failed as outpoint is different\\n\", hash.ToString().substr(0,10).c_str());\n                     return false;\n                 }\n             }\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n             printf(\"txaccept: %s is a replacement\\n\", hash.ToString().substr(0,10).c_str());\n \n             break;\n@@ -565,6 +575,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         if (!tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n         {\n             if (fInvalid) {\n+                if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n                 return error(\"txaccept: %s FetchInputs found invalid\", hash.ToString().substr(0,10).c_str());\n             }\n             if (pfMissingInputs)\n@@ -574,6 +585,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (!tx.AreInputsStandard(mapInputs) && !fTestNet) {\n+            if (txnode && fLogTxPeer) printf(\"%s \", txnode->addr.ToString().c_str());\n             return error(\"txaccept: %s nonstandard inputs\", hash.ToString().substr(0,10).c_str());\n         }\n \n@@ -586,7 +598,9 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n         // Don't accept it if it can't get into a block\n         if (nFees < tx.GetMinFee(1000, true, GMF_RELAY)) {\n-            printf(\"txaccept: tx %s not enough fees\\n\", hash.ToString().substr(0,10).c_str());\n+            printf(\"txaccept: tx %s \", hash.ToString().substr(0,10).c_str());\n+            if (txnode && fLogTxPeer) printf(\"from %s \", txnode->addr.ToString().c_str());\n+            printf(\"not enough fees\\n\");\n             return false;\n         }\n \n@@ -608,7 +622,9 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                 // -limitfreerelay unit is thousand-bytes-per-minute\n                 // At default rate it would take over a month to fill 1GB\n                 if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx)) {\n-                    printf(\"txaccept: free tx %s rejected by rate limiter\\n\", hash.ToString().substr(0,10).c_str());\n+                    printf(\"txaccept: free tx %s \", hash.ToString().substr(0,10).c_str());\n+                    if (txnode && fLogTxPeer) printf(\"from %s \", txnode->addr.ToString().c_str());\n+                    printf(\"rejected by rate limiter\\n\");\n                     return false;\n                 } else\n                     fFreetx = true;\n@@ -644,7 +660,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n     printf(\"mempool %lu: \", mapTx.size());\n     if (fFreetx) printf(\"free \");\n-    printf(\"tx %s accepted\\n\", hash.ToString().substr(0,10).c_str());\n+    printf(\"tx %s accepted \", hash.ToString().substr(0,10).c_str());\n \n     return true;\n }\n@@ -2850,10 +2866,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         bool fMissingInputs = false;\n-        txnode = pfrom;\n+        txnode = pfrom; \n         if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))\n         {\n             txnode = NULL;\n+            if (fLogTxPeer)\n+                printf(\"from %s\\n\", pfrom->addr.ToString().c_str());\n+            else\n+                printf(\"\\n\");\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n@@ -2874,7 +2894,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n                     if (tx.AcceptToMemoryPool(txdb, true))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"(orphan)\\n\");\n                         SyncWithWallets(tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n@@ -2885,7 +2905,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n             BOOST_FOREACH(uint256 hash, vWorkQueue)\n                 EraseOrphanTx(hash);\n-        }\n+        } // if tx.AcceptToMemoryPool()\n         else if (fMissingInputs)\n         {\n             if (CaughtUp() || !fQuietInitial)"
      },
      {
        "sha": "49870b5e89301570c76276ebf38c3b848c6e33d2",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
        "patch": "@@ -69,6 +69,7 @@ bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n bool fQuietInitial = false;\n+bool fLogTxPeer = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n \n // Init openssl library multithreading support"
      },
      {
        "sha": "90ad9cf65c8f4dfd6fda270e54beae8873d9e745",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
        "patch": "@@ -117,6 +117,7 @@ extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n extern bool fQuietInitial;\n+extern bool fLogTxPeer;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();"
      }
    ]
  },
  {
    "sha": "a679aa1f6e38c78a42855922aa808aed515adac0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjc5YWExZjZlMzhjNzhhNDI4NTU5MjJhYTgwOGFlZDUxNWFkYWMw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:46:11Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T10:46:11Z"
      },
      "message": "Show how long AcceptBlock() takes to process.\n\nAlso, when not catching up, show some progress in debug.log showing when block is being checked.",
      "tree": {
        "sha": "62afceba4c79e7f52e286dea98ecf3d87c6c3c93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62afceba4c79e7f52e286dea98ecf3d87c6c3c93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a679aa1f6e38c78a42855922aa808aed515adac0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a679aa1f6e38c78a42855922aa808aed515adac0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a679aa1f6e38c78a42855922aa808aed515adac0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a679aa1f6e38c78a42855922aa808aed515adac0/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46784d0826df00d218d25a1e3df419bef36d70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46784d0826df00d218d25a1e3df419bef36d70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46784d0826df00d218d25a1e3df419bef36d70ce"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a07cb2f9dfffa7b4996bb4e5884c4521d5f4a106",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a679aa1f6e38c78a42855922aa808aed515adac0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a679aa1f6e38c78a42855922aa808aed515adac0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a679aa1f6e38c78a42855922aa808aed515adac0",
        "patch": "@@ -926,6 +926,11 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n+bool CaughtUp()\n+{\n+    return (nBestHeight >= GetNumBlocksOfPeers());\n+}\n+\n bool IsInitialBlockDownload()\n {\n     if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n@@ -1634,9 +1639,14 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n         return false;\n \n     // New best\n-    if (pindexNew->bnChainWork > bnBestChainWork)\n-        if (!SetBestChain(txdb, pindexNew))\n+    if (pindexNew->bnChainWork > bnBestChainWork) {\n+        if (CaughtUp()) printf(\"New block is a potential best. Checkng...\\n\");\n+        if (!SetBestChain(txdb, pindexNew)) {\n+            printf(\"SetBestChain() failed\\n\");\n             return false;\n+        }\n+    } else\n+        printf(\"New block has less work than current best.\\n\");\n \n     txdb.Close();\n \n@@ -1765,6 +1775,7 @@ bool CBlock::AcceptBlock()\n \n bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n+    int64 nStart = GetTimeMillis();\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n@@ -1818,6 +1829,9 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     if (!pblock->AcceptBlock())\n         return error(\"ProcessBlock() : AcceptBlock FAILED\");\n \n+    printf(\"Block ACCEPTED %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    nStart = GetTimeMillis();\n+\n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n     vWorkQueue.push_back(hash);\n@@ -1829,15 +1843,20 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 orphanhash = pblockOrphan->GetHash();\n+            if (pblockOrphan->AcceptBlock()) {\n+                vWorkQueue.push_back(orphanhash);\n+                printf(\"Orphan block %s ACCEPTED %15\"PRI64d\"ms\\n\", orphanhash.ToString().substr(0,20).c_str(),\n+                  GetTimeMillis() - nStart);\n+            } else\n+                printf(\"Orphan block %s REJECTED %15\"PRI64d\"ms\\n\", orphanhash.ToString().substr(0,20).c_str(),\n+                  GetTimeMillis() - nStart);\n+            mapOrphanBlocks.erase(orphanhash);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "e094739a3c392b97477642d0771dd7a1014641c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDk0NzM5YTNjMzkyYjk3NDc3NjQyZDA3NzFkZDdhMTAxNDY0MWM2",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T11:00:59Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T11:00:59Z"
      },
      "message": "Merge branch 'AcceptBlockTiming'",
      "tree": {
        "sha": "7a10d062872b693630bbbef9656de2e1be4dbf82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a10d062872b693630bbbef9656de2e1be4dbf82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e094739a3c392b97477642d0771dd7a1014641c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e094739a3c392b97477642d0771dd7a1014641c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e094739a3c392b97477642d0771dd7a1014641c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e094739a3c392b97477642d0771dd7a1014641c6/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e11565f8a2d6d65417c8b86c2e8b1e3cbea072"
      },
      {
        "sha": "a679aa1f6e38c78a42855922aa808aed515adac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a679aa1f6e38c78a42855922aa808aed515adac0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a679aa1f6e38c78a42855922aa808aed515adac0"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8951788d51f98b58faa3ed9d71f5281be33a4d3e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e094739a3c392b97477642d0771dd7a1014641c6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e094739a3c392b97477642d0771dd7a1014641c6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e094739a3c392b97477642d0771dd7a1014641c6",
        "patch": "@@ -1735,9 +1735,14 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n         return false;\n \n     // New best\n-    if (pindexNew->bnChainWork > bnBestChainWork)\n-        if (!SetBestChain(txdb, pindexNew))\n+    if (pindexNew->bnChainWork > bnBestChainWork) {\n+        if (CaughtUp()) printf(\"New block is a potential best. Checkng...\\n\");\n+        if (!SetBestChain(txdb, pindexNew)) {\n+            printf(\"SetBestChain() failed\\n\");\n             return false;\n+        }\n+    } else\n+        printf(\"New block has less work than current best.\\n\");\n \n     txdb.Close();\n \n@@ -1883,6 +1888,7 @@ bool CBlock::AcceptBlock()\n \n bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n+    int64 nStart = GetTimeMillis();\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n@@ -1936,6 +1942,9 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     if (!pblock->AcceptBlock())\n         return error(\"ProcessBlock() : AcceptBlock FAILED\");\n \n+    printf(\"Block ACCEPTED %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    nStart = GetTimeMillis();\n+\n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n     vWorkQueue.push_back(hash);\n@@ -1947,15 +1956,20 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 orphanhash = pblockOrphan->GetHash();\n+            if (pblockOrphan->AcceptBlock()) {\n+                vWorkQueue.push_back(orphanhash);\n+                printf(\"Orphan block %s ACCEPTED %15\"PRI64d\"ms\\n\", orphanhash.ToString().substr(0,20).c_str(),\n+                  GetTimeMillis() - nStart);\n+            } else\n+                printf(\"Orphan block %s REJECTED %15\"PRI64d\"ms\\n\", orphanhash.ToString().substr(0,20).c_str(),\n+                  GetTimeMillis() - nStart);\n+            mapOrphanBlocks.erase(orphanhash);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "2cc93b73845ac1fd23e9813273746da4c6985553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2M5M2I3Mzg0NWFjMWZkMjNlOTgxMzI3Mzc0NmRhNGM2OTg1NTUz",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T11:22:56Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T11:22:56Z"
      },
      "message": "Sometimes nodes send many duplicate blocks. This patch disconnects the peer that's running\nbehind. This shouldn't happen, but it can and does sometimes, so this code caters for that.\n\nThis code also becomes more important as the block download algorithm is changed in future,\nsuch as concurrent block downloads from multiple peers, and retries are sent to other peers\nwhen peers seem unresponsive, only to become responsive again later, by which time\nthey are sending duplicate blocks.",
      "tree": {
        "sha": "086876353a50f1f6c369f54b187c9706727e31f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/086876353a50f1f6c369f54b187c9706727e31f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cc93b73845ac1fd23e9813273746da4c6985553",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc93b73845ac1fd23e9813273746da4c6985553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cc93b73845ac1fd23e9813273746da4c6985553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc93b73845ac1fd23e9813273746da4c6985553/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46784d0826df00d218d25a1e3df419bef36d70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46784d0826df00d218d25a1e3df419bef36d70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46784d0826df00d218d25a1e3df419bef36d70ce"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "74fc5b204017ee81fbf69332080670d81185f917",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cc93b73845ac1fd23e9813273746da4c6985553/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cc93b73845ac1fd23e9813273746da4c6985553/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2cc93b73845ac1fd23e9813273746da4c6985553",
        "patch": "@@ -1767,10 +1767,24 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    if (mapBlockIndex.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n+            printf(\"ProcessBlock() : already(%d) have block %d %s\", pfrom->nDupBlocks, mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        } else\n+            printf(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return false;\n+    } else if (mapOrphanBlocks.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n+            printf(\"ProcessBlock() : already(%d) have block (orphan) %s\", pfrom->nDupBlocks, hash.ToString().substr(0,20).c_str());\n+        } else\n+            printf(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+        return false;\n+    } else\n+        pfrom->nDupBlocks = 0; // reset the counter\n \n     // Preliminary checks\n     if (!pblock->CheckBlock())"
      },
      {
        "sha": "715cd2526d336b732f319613bd4ef4b1f57437b1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cc93b73845ac1fd23e9813273746da4c6985553/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cc93b73845ac1fd23e9813273746da4c6985553/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2cc93b73845ac1fd23e9813273746da4c6985553",
        "patch": "@@ -148,6 +148,7 @@ class CNode\n     std::string addrName;\n     CService addrLocal;\n     int nVersion;\n+    int nDupBlocks;\n     std::string strSubVer;\n     bool fOneShot;\n     bool fClient;\n@@ -199,6 +200,7 @@ class CNode\n         addr = addrIn;\n         addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n         nVersion = 0;\n+        nDupBlocks = 0;\n         strSubVer = \"\";\n         fOneShot = false;\n         fClient = false; // set by version message"
      }
    ]
  },
  {
    "sha": "eaa84069c60f4a5cd2ae951ef0180f77c933d829",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWE4NDA2OWM2MGY0YTVjZDJhZTk1MWVmMDE4MGY3N2M5MzNkODI5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T21:14:00Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T21:14:00Z"
      },
      "message": "Merge branch 'RepeatedDupBlocksDisconnect'",
      "tree": {
        "sha": "9aa49dd36b44cf0fb628dc7dbc28945cc0fcb705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9aa49dd36b44cf0fb628dc7dbc28945cc0fcb705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaa84069c60f4a5cd2ae951ef0180f77c933d829",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa84069c60f4a5cd2ae951ef0180f77c933d829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaa84069c60f4a5cd2ae951ef0180f77c933d829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa84069c60f4a5cd2ae951ef0180f77c933d829/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e094739a3c392b97477642d0771dd7a1014641c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e094739a3c392b97477642d0771dd7a1014641c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e094739a3c392b97477642d0771dd7a1014641c6"
      },
      {
        "sha": "2cc93b73845ac1fd23e9813273746da4c6985553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc93b73845ac1fd23e9813273746da4c6985553",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cc93b73845ac1fd23e9813273746da4c6985553"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d1f5c68d761d3aba0af57652b12b098d87416942",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa84069c60f4a5cd2ae951ef0180f77c933d829/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa84069c60f4a5cd2ae951ef0180f77c933d829/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eaa84069c60f4a5cd2ae951ef0180f77c933d829",
        "patch": "@@ -1891,10 +1891,24 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     int64 nStart = GetTimeMillis();\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    if (mapBlockIndex.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n+            printf(\"ProcessBlock() : already(%d) have block %d %s\", pfrom->nDupBlocks, mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        } else\n+            printf(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return false;\n+    } else if (mapOrphanBlocks.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 3) pfrom->fDisconnect = true;\n+            printf(\"ProcessBlock() : already(%d) have block (orphan) %s\", pfrom->nDupBlocks, hash.ToString().substr(0,20).c_str());\n+        } else\n+            printf(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+        return false;\n+    } else\n+        pfrom->nDupBlocks = 0; // reset the counter\n \n     // Preliminary checks\n     if (!pblock->CheckBlock())"
      },
      {
        "sha": "ec10ef7946860ff074d5030022072ea1f4a02227",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa84069c60f4a5cd2ae951ef0180f77c933d829/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa84069c60f4a5cd2ae951ef0180f77c933d829/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=eaa84069c60f4a5cd2ae951ef0180f77c933d829",
        "patch": "@@ -150,6 +150,7 @@ class CNode\n     std::string addrName;\n     CService addrLocal;\n     int nVersion;\n+    int nDupBlocks;\n     std::string strSubVer;\n     bool fOneShot;\n     bool fClient;\n@@ -203,6 +204,7 @@ class CNode\n         addr = addrIn;\n         addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n         nVersion = 0;\n+        nDupBlocks = 0;\n         strSubVer = \"\";\n         fOneShot = false;\n         fClient = false; // set by version message"
      }
    ]
  },
  {
    "sha": "571d562bba724686759ab3ae41a6407bef97726e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzFkNTYyYmJhNzI0Njg2NzU5YWIzYWU0MWE2NDA3YmVmOTc3MjZl",
    "commit": {
      "author": {
        "name": "grimd34th",
        "email": "ubpd34th@gmail.com",
        "date": "2012-05-31T23:14:27Z"
      },
      "committer": {
        "name": "grimd34th",
        "email": "ubpd34th@gmail.com",
        "date": "2012-05-31T23:14:27Z"
      },
      "message": "attempted fix",
      "tree": {
        "sha": "a612579eadafc31fe622afe936f66a8a0f9ac65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a612579eadafc31fe622afe936f66a8a0f9ac65b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/571d562bba724686759ab3ae41a6407bef97726e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/571d562bba724686759ab3ae41a6407bef97726e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/571d562bba724686759ab3ae41a6407bef97726e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/571d562bba724686759ab3ae41a6407bef97726e/comments",
    "author": {
      "login": "grimd34th",
      "id": 934782,
      "node_id": "MDQ6VXNlcjkzNDc4Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/934782?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grimd34th",
      "html_url": "https://github.com/grimd34th",
      "followers_url": "https://api.github.com/users/grimd34th/followers",
      "following_url": "https://api.github.com/users/grimd34th/following{/other_user}",
      "gists_url": "https://api.github.com/users/grimd34th/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grimd34th/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grimd34th/subscriptions",
      "organizations_url": "https://api.github.com/users/grimd34th/orgs",
      "repos_url": "https://api.github.com/users/grimd34th/repos",
      "events_url": "https://api.github.com/users/grimd34th/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grimd34th/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "grimd34th",
      "id": 934782,
      "node_id": "MDQ6VXNlcjkzNDc4Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/934782?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grimd34th",
      "html_url": "https://github.com/grimd34th",
      "followers_url": "https://api.github.com/users/grimd34th/followers",
      "following_url": "https://api.github.com/users/grimd34th/following{/other_user}",
      "gists_url": "https://api.github.com/users/grimd34th/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grimd34th/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grimd34th/subscriptions",
      "organizations_url": "https://api.github.com/users/grimd34th/orgs",
      "repos_url": "https://api.github.com/users/grimd34th/repos",
      "events_url": "https://api.github.com/users/grimd34th/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grimd34th/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaa84069c60f4a5cd2ae951ef0180f77c933d829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa84069c60f4a5cd2ae951ef0180f77c933d829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaa84069c60f4a5cd2ae951ef0180f77c933d829"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "21689f578f5355d68c378d35f5b297c07fdfcc02",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/571d562bba724686759ab3ae41a6407bef97726e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/571d562bba724686759ab3ae41a6407bef97726e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=571d562bba724686759ab3ae41a6407bef97726e",
        "patch": "@@ -573,8 +573,7 @@ bool AppInit2()\n         fProxyToo = true;\n         addrProxy = CService(mapArgs[\"-proxytoo\"], 9050);\n         if (!addrProxy.IsValid()) {\n-            ThreadSafeMessageBox(_(\"Invalid -proxytoo address\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n-            return false;\n+            return InitError(strprintf(_(\"Invalid -proxytoo address: '%S'\"),addrProxy));\n         }\n     }\n "
      }
    ]
  }
]