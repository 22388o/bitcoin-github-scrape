[
  {
    "sha": "8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTUwZTlhMzE2MzA3OWE1ZDI1MWFlNDZkNzVmNWFiYmYzZGZjNmUy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-12T00:10:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T19:51:24Z"
      },
      "message": "[tests] Remove unnecessary cs_mains in denialofservice_tests\n\n9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af resolved some lock\ninversion warnings in denialofservice_tests, but left in a number\nof cs_main locks that are unnecessary (introducing lock inversion\nwarnings in future changes).",
      "tree": {
        "sha": "ba8067b06751f44aea7400d8fa4c32352b6d7209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba8067b06751f44aea7400d8fa4c32352b6d7209"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd6cb9745e13a62e130b11f78a13bcc1d424b05e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd6cb9745e13a62e130b11f78a13bcc1d424b05e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd6cb9745e13a62e130b11f78a13bcc1d424b05e"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "21c8c34323bb6dac2a571489671bd528ba1c40fe",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
        "patch": "@@ -98,11 +98,11 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Test starts here\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n         dummyNode1.vSendMsg.clear();\n     }\n@@ -111,17 +111,17 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Wait 21 minutes\n     SetMockTime(nStartTime+21*60);\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     }\n     // Wait 3 more minutes\n     SetMockTime(nStartTime+24*60);\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in disconnect\n     }\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n@@ -252,7 +252,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     {\n-        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr2)); // 2 not banned yet...\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     {\n-        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(banman->IsBanned(addr2));\n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 100);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr1));\n@@ -300,7 +300,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 10);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr1));\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 1);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n@@ -341,7 +341,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n         Misbehaving(dummyNode.GetId(), 100);\n     }\n     {\n-        LOCK2(cs_main, dummyNode.cs_sendProcessing);\n+        LOCK(dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     }\n     BOOST_CHECK(banman->IsBanned(addr));"
      }
    ]
  },
  {
    "sha": "8cd7501997228031e0021aa9f19a7fb1227f5b72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2Q3NTAxOTk3MjI4MDMxZTAwMjFhYTlmMTlhN2ZiMTIyN2Y1Yjcy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T19:47:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-15T22:17:52Z"
      },
      "message": "[net processing] Deduplicate post-block-processing code\n\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "a86d7d231de5d1cf70d65f12ed5af28cf0691633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a86d7d231de5d1cf70d65f12ed5af28cf0691633"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cd7501997228031e0021aa9f19a7fb1227f5b72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cd7501997228031e0021aa9f19a7fb1227f5b72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cd7501997228031e0021aa9f19a7fb1227f5b72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cd7501997228031e0021aa9f19a7fb1227f5b72/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a50e9a3163079a5d251ae46d75f5abbf3dfc6e2"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9e9377fbf5ed01db55fda7a5cccfd4c9e82f8d47",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cd7501997228031e0021aa9f19a7fb1227f5b72/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cd7501997228031e0021aa9f19a7fb1227f5b72/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8cd7501997228031e0021aa9f19a7fb1227f5b72",
        "patch": "@@ -1880,6 +1880,20 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ *  A block has been processed. If this is the first time we've seen the block,\n+ *  update the node's nLastBlockTime. Otherwise erase it from mapBlockSource.\n+ */\n+void static BlockProcessed(CNode* pfrom, std::shared_ptr<CBlock> pblock, bool new_block)\n+{\n+    if (new_block) {\n+        pfrom->nLastBlockTime = GetTime();\n+    } else {\n+        LOCK(cs_main);\n+        ::mapBlockSource.erase(pblock->GetHash());\n+    }\n+}\n+\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n@@ -2819,12 +2833,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n             ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom->nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            BlockProcessed(pfrom, pblock, fNewBlock);\n+\n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n                 // Clear download state for this block, which is in\n@@ -2909,12 +2919,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n             ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom->nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            BlockProcessed(pfrom, pblock, fNewBlock);\n         }\n         return true;\n     }\n@@ -2972,12 +2977,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n         bool fNewBlock = false;\n         ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n-        if (fNewBlock) {\n-            pfrom->nLastBlockTime = GetTime();\n-        } else {\n-            LOCK(cs_main);\n-            mapBlockSource.erase(pblock->GetHash());\n-        }\n+        BlockProcessed(pfrom, pblock, fNewBlock);\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "57782d5f70c072cfc70568a3db58a04831454576",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Nzc4MmQ1ZjcwYzA3MmNmYzcwNTY4YTNkYjU4YTA0ODMxNDU0NTc2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T18:26:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-15T22:18:02Z"
      },
      "message": "[validation] Add BlockValidationState inout param to ProcessNewBlock\n\nThis is a pure refactor commit.\n\nThis commit enables the caller of ProcessNewBlock to access the final\nBlockValidationState passed around between CheckBlock(), AcceptBlock(),\nand BlockChecked() inside ProcessNewBlock(). This is useful because in a\nfuture commit, we will move the BlockChecked() call out of\nProcessNewBlock(), and BlockChecked() still needs to be able to access\nthe BlockValidationState.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "c9bc738d32433692a09dcd327da8a1de96d38018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9bc738d32433692a09dcd327da8a1de96d38018"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57782d5f70c072cfc70568a3db58a04831454576",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57782d5f70c072cfc70568a3db58a04831454576",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57782d5f70c072cfc70568a3db58a04831454576",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57782d5f70c072cfc70568a3db58a04831454576/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cd7501997228031e0021aa9f19a7fb1227f5b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cd7501997228031e0021aa9f19a7fb1227f5b72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cd7501997228031e0021aa9f19a7fb1227f5b72"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 46,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ffbc850ae12e788885e60f4d746c51f2769bb4db",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -2832,7 +2832,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            BlockValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, pblock, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n@@ -2918,7 +2919,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            BlockValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, pblock, fNewBlock);\n         }\n         return true;\n@@ -2976,7 +2978,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        BlockValidationState dos_state;\n+        ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n         BlockProcessed(pfrom, pblock, fNewBlock);\n         return true;\n     }"
      },
      {
        "sha": "c4b3a7ea343adda748be16434c6ab5cf0fa362e7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -135,7 +135,8 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n+        BlockValidationState state;\n+        if (!ProcessNewBlock(Params(), shared_pblock, state, true, nullptr))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -777,7 +778,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    BlockValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";"
      },
      {
        "sha": "aecd02dd2369f13b5323cb26d15e26817218f9b4",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -164,7 +164,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -182,7 +183,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     uint256 chainB_last_header = last_header;\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -211,10 +213,11 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     }\n \n     // Reorg back to chain A.\n-     for (size_t i = 2; i < 4; i++) {\n-         const auto& block = chainA[i];\n-         BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n-     }\n+    for (size_t i = 2; i < 4; i++) {\n+        const auto& block = chainA[i];\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+    }\n \n      // Check that chain A and B blocks can be retrieved.\n      chainA_last_header = last_header;"
      },
      {
        "sha": "2bd09321cf98f270f088c8f67a8aa067b6944978",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -7,6 +7,7 @@\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <script/standard.h>\n@@ -247,7 +248,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             pblock->nNonce = blockinfo[i].nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "fa6951ec24b21ffe4c873de608e192c4a13edb94",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n+#include <consensus/validation.h>\n #include <key_io.h>\n #include <miner.h>\n #include <outputtype.h>\n@@ -63,7 +64,8 @@ CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n         assert(block->nNonce);\n     }\n \n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    BlockValidationState dos_state;\n+    bool processed{ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "e5b8e8727c4a74dc88d7e4ebddb2b9115ff82b0f",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -190,7 +190,8 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    BlockValidationState dos_state;\n+    ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "34a6aef28bee1379ae886873144777707f53b62c",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -156,7 +156,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n+    BlockValidationState dos_state;\n+    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true, &ignored));\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -178,13 +179,15 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n-                ProcessNewBlock(Params(), block, true, &ignored);\n+                BlockValidationState dos_state;\n+                ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n-                    bool processed = ProcessNewBlock(Params(), block, true, &ignored);\n+                    BlockValidationState dos_state;\n+                    bool processed = ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n                 }\n             }\n@@ -225,7 +228,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n-        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        BlockValidationState dos_state;\n+        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "56262af58ed6b0dff206df16271a226598ca4178",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -3760,29 +3760,28 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        BlockValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            GetMainSignals().BlockChecked(*pblock, dos_state);\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));\n         }\n     }\n "
      },
      {
        "sha": "faea14d2aa241c23a3bab69844656b473dc0623f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57782d5f70c072cfc70568a3db58a04831454576/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57782d5f70c072cfc70568a3db58a04831454576/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=57782d5f70c072cfc70568a3db58a04831454576",
        "patch": "@@ -209,12 +209,13 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * May not be called in a\n  * validationinterface callback.\n  *\n- * @param[in]   pblock  The block we want to process.\n- * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n- * @returns     If the block was processed, independently of block validity\n+ * @param[in]   pblock            The block we want to process.\n+ * @param[out]  state             Currently unused.\n+ * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+ * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n+ * @returns     bool              If the block was processed, independently of block validity\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "bbc1bca53d2db873a1699566b4c6f682b15d26e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmMxYmNhNTNkMmRiODczYTE2OTk1NjZiNGM2ZjY4MmIxNWQyNmUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:51:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-15T22:18:02Z"
      },
      "message": "[net processing] Make BlockChecked a standalone, static function\n\nThis is a pure refactor commit.\n\nSince BlockChecked() doesn't actually depend on all of\nPeerLogicValidation but just PeerLogicValidation's CConnman, we can make\na standalone, static function that simply has an extra CConnman\nparameter and have the non-static version call the static one.\n\nThis also means that, in a future commit, when we move the\nBlockChecked() call out of ProcessNewBlock(), the caller of\nProcessNewBlock() can call BlockChecked() directly even if they only\nhave a CConnman.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "f6b708492c764358836315e04ccd13a6740c03a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6b708492c764358836315e04ccd13a6740c03a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbc1bca53d2db873a1699566b4c6f682b15d26e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc1bca53d2db873a1699566b4c6f682b15d26e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc1bca53d2db873a1699566b4c6f682b15d26e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc1bca53d2db873a1699566b4c6f682b15d26e3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57782d5f70c072cfc70568a3db58a04831454576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57782d5f70c072cfc70568a3db58a04831454576",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57782d5f70c072cfc70568a3db58a04831454576"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ba7c8d8dacf65d4e4df697cfae7ba4d9491460e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc1bca53d2db873a1699566b4c6f682b15d26e3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc1bca53d2db873a1699566b4c6f682b15d26e3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bbc1bca53d2db873a1699566b4c6f682b15d26e3",
        "patch": "@@ -1251,8 +1251,11 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n /**\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n+ * Called both in case of cursory DoS checks failing (implying the peer is likely\n+ * sending us bogus data) and after full validation of the block fails (which may\n+ * be OK if it was sent over compact blocks).\n  */\n-void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+static void BlockChecked(const CBlock& block, const BlockValidationState& state, CConnman* connman) {\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n@@ -1282,6 +1285,10 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n         mapBlockSource.erase(it);\n }\n \n+void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+    ::BlockChecked(block, state, connman);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      }
    ]
  },
  {
    "sha": "a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDlhMTUzZjdjYWIwNjNjZTRmOWFlODk4YzlmZmE5NGU4ZmNmNTEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:56:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-15T22:18:02Z"
      },
      "message": "[validation] Return the AcceptBlock BlockValidationState directly in ProcessNewBlock\n\nNet processing now passes a BlockValidationState object into\nProcessNewBlock(). If CheckBlock() or AcceptBlock() fails, then PNB\nreturns to net processing without calling the (asynchronous)\nBlockChecked Validation Interface method. net processing can use the\ninvalid BlockValidationState returned to punish peers.\n\nCheckBlock() and AcceptBlock() represent the DoS checks on a block (ie\nPoW and malleability). Net processing wants to know about those failed\nchecks immediately and shouldn't have to wait on a callback. Other\nvalidation interface clients don't care about net processing submitting\nbogus malleated blocks to validation, so they don't need to be notified\nof BlockChecked.\n\nFurthermore, if PNB returns a valid BlockValidationState, we never need\nto try to process (non-malleated) copies of the block from other peers.\nThat makes it much easier to move the best chain activation logic to a\nbackground thread in future work.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "ad9ca05e5ab6841a315536fefccc33592da74999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad9ca05e5ab6841a315536fefccc33592da74999"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc1bca53d2db873a1699566b4c6f682b15d26e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc1bca53d2db873a1699566b4c6f682b15d26e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc1bca53d2db873a1699566b4c6f682b15d26e3"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 37,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a69e8f04160fdd448a5f981af91e087e7aa97da6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
        "patch": "@@ -1888,16 +1888,23 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n }\n \n /**\n- *  A block has been processed. If this is the first time we've seen the block,\n+ *  A block has been processed. If the block was failed anti-dos / mutation checks, then\n+ *  call BlockChecked() to maybe punish peer. If this is the first time we've seen the block,\n  *  update the node's nLastBlockTime. Otherwise erase it from mapBlockSource.\n  */\n-void static BlockProcessed(CNode* pfrom, std::shared_ptr<CBlock> pblock, bool new_block)\n+void static BlockProcessed(CNode* pfrom, CConnman* connman, std::shared_ptr<CBlock> pblock, BlockValidationState& state, bool new_block)\n {\n-    if (new_block) {\n-        pfrom->nLastBlockTime = GetTime();\n-    } else {\n+    if (!state.IsValid()) {\n+        // The block failed anti-dos / mutation checks. Call BlockChecked() callback here.\n+        // This clears the block from mapBlockSource.\n+        BlockChecked(*pblock, state, connman);\n+    } else if (!new_block) {\n+        // Block was valid but we've seen it before. Clear it from mapBlockSource.\n         LOCK(cs_main);\n         ::mapBlockSource.erase(pblock->GetHash());\n+    } else {\n+        // Block is valid and we haven't seen it before. set nLastBlockTime for this peer.\n+        pfrom->nLastBlockTime = GetTime();\n     }\n }\n \n@@ -2841,7 +2848,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // reconstructed compact blocks as having been requested.\n             BlockValidationState dos_state;\n             ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n-            BlockProcessed(pfrom, pblock, fNewBlock);\n+            BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n@@ -2928,7 +2935,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // in compact block optimistic reconstruction handling.\n             BlockValidationState dos_state;\n             ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n-            BlockProcessed(pfrom, pblock, fNewBlock);\n+            BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         }\n         return true;\n     }\n@@ -2987,7 +2994,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         bool fNewBlock = false;\n         BlockValidationState dos_state;\n         ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n-        BlockProcessed(pfrom, pblock, fNewBlock);\n+        BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         return true;\n     }\n "
      },
      {
        "sha": "7427b4d70d479bb35f2df71a9343329fb58129b2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
        "patch": "@@ -784,6 +784,9 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n+    if (!dos_state.IsValid()) {\n+        return BIP22ValidationResult(dos_state);\n+    }\n     if (!sc.found) {\n         return \"inconclusive\";\n     }"
      },
      {
        "sha": "19791f75f4da3a3ae7f6fecb00c7690d22230a9e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
        "patch": "@@ -3780,7 +3780,6 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n             ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, dos_state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));\n         }\n     }"
      },
      {
        "sha": "86c2dc7c8923ffdd01b87f60805712e589eb724c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
        "patch": "@@ -199,18 +199,29 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided BlockValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n+ * state is guaranteed to be some non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n+ * barring pruning and a desire to re-download a pruned block, there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.\n  *\n  * @param[in]   pblock            The block we want to process.\n- * @param[out]  state             Currently unused.\n+ * @param[out]  state             Only used for failures in CheckBlock/AcceptBlock. For failure in block connection,\n+ *                                a CValidationInterface BlockChecked callback is used to notify clients of validity.\n  * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n  * @returns     bool              If the block was processed, independently of block validity"
      }
    ]
  },
  {
    "sha": "91d26915cd98e53c235d4b493b326f781837f1d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWQyNjkxNWNkOThlNTNjMjM1ZDRiNDkzYjMyNmY3ODE4MzdmMWQ3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:56:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-15T22:18:02Z"
      },
      "message": "[validation] trivial: Rename state to dummy_state for clarity\n\nThis is a pure refactor commit.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "469467eaf9b30eaabeaaa136eff7b45a002c8a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/469467eaf9b30eaabeaaa136eff7b45a002c8a2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91d26915cd98e53c235d4b493b326f781837f1d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d26915cd98e53c235d4b493b326f781837f1d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91d26915cd98e53c235d4b493b326f781837f1d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d26915cd98e53c235d4b493b326f781837f1d7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a49a153f7cab063ce4f9ae898c9ffa94e8fcf510"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c8893a21be0583247565220b534731e1527fde43",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d26915cd98e53c235d4b493b326f781837f1d7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d26915cd98e53c235d4b493b326f781837f1d7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=91d26915cd98e53c235d4b493b326f781837f1d7",
        "patch": "@@ -3786,9 +3786,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n     NotifyHeaderTip();\n \n-    BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n+    BlockValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n+    if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(dummy_state));\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmY4N2QyMDM0OTAyZTIzY2M0YjU4YzJmNmFlMGIwYWU0YWY0OGNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:58:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-15T22:18:02Z"
      },
      "message": "[test/rpc] Additional checks for dos_state validity\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "5cda7ac2f76aba911914ce540832106b160ada95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cda7ac2f76aba911914ce540832106b160ada95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91d26915cd98e53c235d4b493b326f781837f1d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d26915cd98e53c235d4b493b326f781837f1d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91d26915cd98e53c235d4b493b326f781837f1d7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f713206a823f00c8be180aea600164fb619c426",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "patch": "@@ -136,7 +136,7 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BlockValidationState state;\n-        if (!ProcessNewBlock(Params(), shared_pblock, state, true, nullptr))\n+        if (!ProcessNewBlock(Params(), shared_pblock, state, true, nullptr) || !state.IsValid())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());"
      },
      {
        "sha": "e85234a2040e8be913a6002ee4a3fbd6d739608e",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "patch": "@@ -166,6 +166,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -185,6 +186,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         const auto& block = chainB[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -217,6 +219,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n \n      // Check that chain A and B blocks can be retrieved."
      },
      {
        "sha": "b1451420df956f77e49d4b3d4d0c203482d2d133",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "patch": "@@ -250,6 +250,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BlockValidationState dos_state;\n         BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n+        BOOST_CHECK(dos_state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "f6939352a80330769c23530680f0dc3fb7b5c69b",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "patch": "@@ -67,6 +67,7 @@ CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n     BlockValidationState dos_state;\n     bool processed{ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n+    assert(dos_state.IsValid());\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};\n }"
      },
      {
        "sha": "f7f970e0f963a3c57535406858339959941ebbbb",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "patch": "@@ -189,6 +189,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n                     BlockValidationState dos_state;\n                     bool processed = ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n+                    assert(dos_state.IsValid());\n                 }\n             }\n         });\n@@ -229,7 +230,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n         BlockValidationState dos_state;\n-        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored) && dos_state.IsValid();\n     };\n \n     // Process all mined blocks"
      }
    ]
  },
  {
    "sha": "e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmE3MGU1YjhmNzZhNDI2MWM0NzUyMWU5Mjk3OWVlYmM5YTQ2ZjRi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T22:18:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-18T16:16:16Z"
      },
      "message": "[net processing] Improve comments for MarkBlockAsInFlight and MarkBlockAsReceived",
      "tree": {
        "sha": "e6769ec241eefd71e0bc98425547d64731e16d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6769ec241eefd71e0bc98425547d64731e16d44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a70e5b8f76a4261c47521e92979eebc9a46f4b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf87d2034902e23cc4b58c2f6ae0b0ae4af48cc"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 28,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b07cbf2dc18096bb6d7402252b15653a64797b3e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a70e5b8f76a4261c47521e92979eebc9a46f4b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a70e5b8f76a4261c47521e92979eebc9a46f4b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
        "patch": "@@ -430,8 +430,17 @@ static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n-// Returns a bool indicating whether we requested this block.\n-// Also used if a block was /not/ received and timed out or started with another peer\n+/**\n+ * Mark a block as no longer 'in flight' from any node. Called when the block\n+ * has been received, if it's timed out, of if we're requesting it from another\n+ * peer.\n+ *\n+ * Clear the block from the global mapBlocksInFlight map and any node's\n+ * vBlocksInFlight vector.\n+ *\n+ * @param[in]      hash       The block hash\n+ * @return         bool       Whether this block was already in flight from a peer.\n+ */\n static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n@@ -455,8 +464,23 @@ static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs\n     return false;\n }\n \n-// returns false, still setting pit, if the block was already in flight from the same peer\n-// pit will only be valid as long as the same cs_main lock is being held\n+/**\n+ * Mark a blocks as 'in flight' from a specific peer. This can be called either when\n+ * we send a GETDATA(BLOCK) or GETDATA(CMPCTBLOCK) to the peer, or when we receive\n+ * a CMPCTBLOCK from a peer.\n+ *\n+ * Add the block to the global mapBlocksInFlight map and to the node's vBlocksInFlight vector\n+ *\n+ * @param[in]      nodeid     The node that we send the GETDATA to or received the CMPCTBLOCKFROM\n+ * @param[in]      hash       The block hash\n+ * @param[in]      pindex     The block's BlockIndex\n+ * @param[in/out]  pit        Pointer to iterator to QueuedBlock. Only used when this function\n+ *                            is called during compact block handling. pit is only valid for\n+ *                            as long as cs_main is held.\n+ * @return         bool       Only used when this function is called during compact block processing\n+ *                            False indicates the block was already in flight from the same node.\n+ *                            Returns true otherwise.\n+ */\n static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);"
      }
    ]
  },
  {
    "sha": "367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjdjZTc1NGFhOGI0YTk1Njk3MjU0YWM1ZmRiZGQ3NjI4ZWZhNGM2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T22:19:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-18T16:16:16Z"
      },
      "message": "[net processing] rename MarkBlockAsReceived -> MarkBlockAsNotInFlight\n\nThe previous name was misleading, since we can call the function even\nwhen the block has not been received.",
      "tree": {
        "sha": "b3c66b89c7b9ca713a613714547517c7b89b1d56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3c66b89c7b9ca713a613714547517c7b89b1d56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/367ce754aa8b4a95697254ac5fdbdd7628efa4c6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a70e5b8f76a4261c47521e92979eebc9a46f4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a70e5b8f76a4261c47521e92979eebc9a46f4b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0d1c0a93e4ef7ba3f39f7f4749ceb55fd8b3349b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/367ce754aa8b4a95697254ac5fdbdd7628efa4c6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/367ce754aa8b4a95697254ac5fdbdd7628efa4c6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
        "patch": "@@ -441,7 +441,7 @@ static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n  * @param[in]      hash       The block hash\n  * @return         bool       Whether this block was already in flight from a peer.\n  */\n-static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+static bool MarkBlockAsNotInFlight(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -495,7 +495,7 @@ static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlock\n     }\n \n     // Make sure it's not listed somewhere already.\n-    MarkBlockAsReceived(hash);\n+    MarkBlockAsNotInFlight(hash);\n \n     std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n             {hash, pindex, pindex != nullptr, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : nullptr)});\n@@ -2782,7 +2782,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 PartiallyDownloadedBlock& partialBlock = *(*queuedBlockIt)->partialBlock;\n                 ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n-                    MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n+                    MarkBlockAsNotInFlight(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n                     Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId()));\n                     return true;\n                 } else if (status == READ_STATUS_FAILED) {\n@@ -2880,7 +2880,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // process from some other peer.  We do this after calling\n                 // ProcessNewBlock so that a malleated cmpctblock announcement\n                 // can't be used to interfere with block relay.\n-                MarkBlockAsReceived(pblock->GetHash());\n+                MarkBlockAsNotInFlight(pblock->GetHash());\n             }\n         }\n         return true;\n@@ -2912,7 +2912,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n             ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n-                MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n+                MarkBlockAsNotInFlight(resp.blockhash); // Reset in-flight state in case of whitelist\n                 Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId()));\n                 return true;\n             } else if (status == READ_STATUS_FAILED) {\n@@ -2938,7 +2938,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // though the block was successfully read, and rely on the\n                 // handling in ProcessNewBlock to ensure the block index is\n                 // updated, etc.\n-                MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n+                MarkBlockAsNotInFlight(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n                 // mapBlockSource is used for potentially punishing peers and\n                 // updating which peers send us compact blocks, so the race\n@@ -3009,7 +3009,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            forceProcessing |= MarkBlockAsNotInFlight(hash);\n             // mapBlockSource is only used for punishing peers and setting\n             // which peers send us compact blocks, so the race between here and\n             // cs_main in ProcessNewBlock is fine."
      }
    ]
  },
  {
    "sha": "11b7abdb42656f194b82eee46412ab2691f2efa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWI3YWJkYjQyNjU2ZjE5NGI4MmVlZTQ2NDEyYWIyNjkxZjJlZmE0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T21:25:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-18T16:22:48Z"
      },
      "message": "[net processing] Don't reach into CBlockIndex to check for block mutation\n\nIf a CMPCTBLOCK is in flight from peer A and we then succesfully\nreconstruct it during CMPCTBLOCK processing from peer B, we need to\nclear the in-flight state for the block from peer A.\n\nWe can only do that once we've ensured that the block hasn't been\nmutated (otherwise peer B could interfere with our block relay from peer\nA by providing a mutated block).\n\nMutation-checking used to be done indirectly by checking that the block\nhad been writted to disk by checking the CBlockIndex. Now that\nProcessNewBlock returns a BlockValidationState, we can check that state\ndirectly to determine whether to mark the block as no longer in-flight.",
      "tree": {
        "sha": "2b52eaed61664723aacc6c4fb4c215e30e2516d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b52eaed61664723aacc6c4fb4c215e30e2516d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11b7abdb42656f194b82eee46412ab2691f2efa4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11b7abdb42656f194b82eee46412ab2691f2efa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11b7abdb42656f194b82eee46412ab2691f2efa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11b7abdb42656f194b82eee46412ab2691f2efa4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/367ce754aa8b4a95697254ac5fdbdd7628efa4c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/367ce754aa8b4a95697254ac5fdbdd7628efa4c6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "90a4c03b1cbb25445c570a98d1677e70882f4239",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11b7abdb42656f194b82eee46412ab2691f2efa4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11b7abdb42656f194b82eee46412ab2691f2efa4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=11b7abdb42656f194b82eee46412ab2691f2efa4",
        "patch": "@@ -2874,12 +2874,15 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n \n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n-                // Clear download state for this block, which is in\n-                // process from some other peer.  We do this after calling\n-                // ProcessNewBlock so that a malleated cmpctblock announcement\n-                // can't be used to interfere with block relay.\n+            if (dos_state.IsValid()) {\n+                // This block has passed anti-dos / mutation checks in\n+                // ProcessNewBlock(). Clear the download state for the block,\n+                // which is in flight from some other peer.\n+                //\n+                // We do this after checking for mutation so that a mutated\n+                // cmpctblock announcement can't be used to interfere with\n+                // block relay.\n+                LOCK(cs_main);\n                 MarkBlockAsNotInFlight(pblock->GetHash());\n             }\n         }"
      }
    ]
  }
]