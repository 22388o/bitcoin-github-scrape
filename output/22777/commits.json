[
  {
    "sha": "0220b834b175dc8c45a2c60213474a72c0ef8193",
    "node_id": "C_kwDOABII59oAKDAyMjBiODM0YjE3NWRjOGM0NWEyYzYwMjEzNDc0YTcyYzBlZjgxOTM",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-23T09:42:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-22T15:12:14Z"
      },
      "message": "[test] Add testing for outbound feeler connections\n\nExtend the addconnection RPC method to allow creating outbound\nfeeler connections. Extend the test framework to accept those\nfeeler connections.",
      "tree": {
        "sha": "e3077a9f637e510cf3a388e4badac3ff942164d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3077a9f637e510cf3a388e4badac3ff942164d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0220b834b175dc8c45a2c60213474a72c0ef8193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0220b834b175dc8c45a2c60213474a72c0ef8193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0220b834b175dc8c45a2c60213474a72c0ef8193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0220b834b175dc8c45a2c60213474a72c0ef8193/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbcb5742c48fd26f77e500291d7083e12eec741b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbcb5742c48fd26f77e500291d7083e12eec741b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbcb5742c48fd26f77e500291d7083e12eec741b"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 33,
      "deletions": 9
    },
    "files": [
      {
        "sha": "504619dec58fc43cbd2fcc9eef849bff2509d3ac",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0220b834b175dc8c45a2c60213474a72c0ef8193/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0220b834b175dc8c45a2c60213474a72c0ef8193/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0220b834b175dc8c45a2c60213474a72c0ef8193",
        "patch": "@@ -1217,7 +1217,6 @@ bool CConnman::AddConnection(const std::string& address, ConnectionType conn_typ\n     switch (conn_type) {\n     case ConnectionType::INBOUND:\n     case ConnectionType::MANUAL:\n-    case ConnectionType::FEELER:\n         return false;\n     case ConnectionType::OUTBOUND_FULL_RELAY:\n         max_connections = m_max_outbound_full_relay;\n@@ -1228,6 +1227,9 @@ bool CConnman::AddConnection(const std::string& address, ConnectionType conn_typ\n     // no limit for ADDR_FETCH because -seednode has no limit either\n     case ConnectionType::ADDR_FETCH:\n         break;\n+    // no limit for FEELER connections since they're short-lived\n+    case ConnectionType::FEELER:\n+        break;\n     } // no default case, so the compiler can warn about missing cases\n \n     // Count existing connections"
      },
      {
        "sha": "81004a203cd977c045cb65cbf768348302b801f3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0220b834b175dc8c45a2c60213474a72c0ef8193/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0220b834b175dc8c45a2c60213474a72c0ef8193/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0220b834b175dc8c45a2c60213474a72c0ef8193",
        "patch": "@@ -892,8 +892,8 @@ class CConnman\n      * Attempts to open a connection. Currently only used from tests.\n      *\n      * @param[in]   address     Address of node to try connecting to\n-     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n-     *                          or ConnectionType::ADDR_FETCH\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND, ConnectionType::BLOCK_RELAY,\n+     *                          ConnectionType::ADDR_FETCH or ConnectionType::FEELER\n      * @return      bool        Returns false if there are no available\n      *                          slots for this connection:\n      *                          - conn_type not a supported ConnectionType"
      },
      {
        "sha": "4ef44a93dbe956ad790f34f28b85c25679a1cc34",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0220b834b175dc8c45a2c60213474a72c0ef8193/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0220b834b175dc8c45a2c60213474a72c0ef8193/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0220b834b175dc8c45a2c60213474a72c0ef8193",
        "patch": "@@ -343,7 +343,7 @@ static RPCHelpMan addconnection()\n         \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n         {\n             {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n-            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open (\\\"outbound-full-relay\\\", \\\"block-relay-only\\\" or \\\"addr-fetch\\\").\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open (\\\"outbound-full-relay\\\", \\\"block-relay-only\\\", \\\"addr-fetch\\\" or \\\"feeler\\\").\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -371,6 +371,8 @@ static RPCHelpMan addconnection()\n         conn_type = ConnectionType::BLOCK_RELAY;\n     } else if (conn_type_in == \"addr-fetch\") {\n         conn_type = ConnectionType::ADDR_FETCH;\n+    } else if (conn_type_in == \"feeler\") {\n+        conn_type = ConnectionType::FEELER;\n     } else {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n     }"
      },
      {
        "sha": "82674befeb110d23904a5c5322ffe4b2cf51a918",
        "filename": "test/functional/p2p_add_connections.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0220b834b175dc8c45a2c60213474a72c0ef8193/test/functional/p2p_add_connections.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0220b834b175dc8c45a2c60213474a72c0ef8193/test/functional/p2p_add_connections.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_add_connections.py?ref=0220b834b175dc8c45a2c60213474a72c0ef8193",
        "patch": "@@ -14,6 +14,13 @@ def check_node_connections(*, node, num_in, num_out):\n     assert_equal(info[\"connections_in\"], num_in)\n     assert_equal(info[\"connections_out\"], num_out)\n \n+class P2PFeelerReceiver(P2PInterface):\n+    def on_version(self, message):\n+        # The bitcoind node closes feeler connections as soon as a version\n+        # message is received from the test framework. Don't send any responses\n+        # to the node's version message since the connection will already be\n+        # closed.\n+        pass\n \n class P2PAddConnections(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -91,6 +98,14 @@ def run_test(self):\n \n         check_node_connections(node=self.nodes[1], num_in=5, num_out=10)\n \n+        self.log.info(\"Add 1 feeler connection to node 0\")\n+        feeler_conn = self.nodes[0].add_outbound_p2p_connection(P2PFeelerReceiver(), p2p_idx=6, connection_type=\"feeler\")\n+\n+        # Feeler connection is closed\n+        assert not feeler_conn.is_connected\n+\n+        # Verify version message received\n+        assert_equal(feeler_conn.message_count[\"version\"], 1)\n \n if __name__ == '__main__':\n     P2PAddConnections().main()"
      },
      {
        "sha": "d71deb76b6b3cb49b72a5ddeeec3f269ef433fdc",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0220b834b175dc8c45a2c60213474a72c0ef8193/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0220b834b175dc8c45a2c60213474a72c0ef8193/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=0220b834b175dc8c45a2c60213474a72c0ef8193",
        "patch": "@@ -558,7 +558,7 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n     def add_outbound_p2p_connection(self, p2p_conn, *, p2p_idx, connection_type=\"outbound-full-relay\", **kwargs):\n         \"\"\"Add an outbound p2p connection from node. Must be an\n-        \"outbound-full-relay\", \"block-relay-only\" or \"addr-fetch\" connection.\n+        \"outbound-full-relay\", \"block-relay-only\", \"addr-fetch\" or \"feeler\" connection.\n \n         This method adds the p2p connection to the self.p2ps list and returns\n         the connection to the caller.\n@@ -570,11 +570,16 @@ def addconnection_callback(address, port):\n \n         p2p_conn.peer_accept_connection(connect_cb=addconnection_callback, connect_id=p2p_idx + 1, net=self.chain, timeout_factor=self.timeout_factor, **kwargs)()\n \n-        p2p_conn.wait_for_connect()\n-        self.p2ps.append(p2p_conn)\n+        if connection_type == \"feeler\":\n+            # feeler connections are closed as soon as the node receives a `version` message\n+            p2p_conn.wait_until(lambda: p2p_conn.message_count[\"version\"] == 1, check_connected=False)\n+            p2p_conn.wait_until(lambda: not p2p_conn.is_connected, check_connected=False)\n+        else:\n+            p2p_conn.wait_for_connect()\n+            self.p2ps.append(p2p_conn)\n \n-        p2p_conn.wait_for_verack()\n-        p2p_conn.sync_with_ping()\n+            p2p_conn.wait_for_verack()\n+            p2p_conn.sync_with_ping()\n \n         return p2p_conn\n "
      }
    ]
  },
  {
    "sha": "eaf6be0114a6d7763767da9496907fe8a670ff9e",
    "node_id": "C_kwDOABII59oAKGVhZjZiZTAxMTRhNmQ3NzYzNzY3ZGE5NDk2OTA3ZmU4YTY3MGZmOWU",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-23T09:44:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-22T15:12:16Z"
      },
      "message": "[net processing] Do not request transaction relay from feeler connections\n\nAdd a test to verify that feeler connections do not request transaction relay.",
      "tree": {
        "sha": "8c3e399136b9835dfb49face2a0917320aab4498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c3e399136b9835dfb49face2a0917320aab4498"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaf6be0114a6d7763767da9496907fe8a670ff9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaf6be0114a6d7763767da9496907fe8a670ff9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaf6be0114a6d7763767da9496907fe8a670ff9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaf6be0114a6d7763767da9496907fe8a670ff9e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0220b834b175dc8c45a2c60213474a72c0ef8193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0220b834b175dc8c45a2c60213474a72c0ef8193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0220b834b175dc8c45a2c60213474a72c0ef8193"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bcc8bf1a2fdd6ac39d3d5b76754180bc41814430",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaf6be0114a6d7763767da9496907fe8a670ff9e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaf6be0114a6d7763767da9496907fe8a670ff9e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=eaf6be0114a6d7763767da9496907fe8a670ff9e",
        "patch": "@@ -1096,7 +1096,7 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n     CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n     uint64_t your_services{addr.nServices};\n \n-    const bool tx_relay = !m_ignore_incoming_txs && pnode.m_tx_relay != nullptr;\n+    const bool tx_relay = !m_ignore_incoming_txs && pnode.m_tx_relay != nullptr && !pnode.IsFeelerConn();\n     m_connman.PushMessage(&pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n             your_services, addr_you, // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n             my_services, CService(), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)"
      },
      {
        "sha": "89ed2f857aac6ac4257cc7478278d27bd817dd4e",
        "filename": "test/functional/p2p_add_connections.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaf6be0114a6d7763767da9496907fe8a670ff9e/test/functional/p2p_add_connections.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaf6be0114a6d7763767da9496907fe8a670ff9e/test/functional/p2p_add_connections.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_add_connections.py?ref=eaf6be0114a6d7763767da9496907fe8a670ff9e",
        "patch": "@@ -106,6 +106,8 @@ def run_test(self):\n \n         # Verify version message received\n         assert_equal(feeler_conn.message_count[\"version\"], 1)\n+        # Feeler connections do not request tx relay\n+        assert_equal(feeler_conn.last_message[\"version\"].relay, 0)\n \n if __name__ == '__main__':\n     P2PAddConnections().main()"
      }
    ]
  }
]