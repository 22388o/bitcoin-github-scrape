[
  {
    "sha": "dfeb6c10bba80dc91245318feb0ad1d879015a99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmViNmMxMGJiYTgwZGM5MTI0NTMxOGZlYjBhZDFkODc5MDE1YTk5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-20T10:26:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-16T09:20:04Z"
      },
      "message": "test: use pointers in denialofservice_tests/peer_discouragement\n\nThis is a non-functional change that replaces the `CNode` on-stack\nvariables with `CNode` pointers.\n\nThe reason for this is that it would allow us to add those `CNode`s\nto `CConnman::vNodes[]` which in turn would allow us to check that they\nare disconnected properly - a `CNode` object must be in\n`CConnman::vNodes[]` in order for its `fDisconnect` flag to be set.\n\nIf we store pointers to the on-stack variables in `CConnman` then it\nwould crash at the end, trying to `delete` them.\n\nGithub-Pull: #21571\nRebased-From: 4d6e246fa46f2309e2998b542e4c104d73d29071",
      "tree": {
        "sha": "31e083d4a55ac9cb359196da1e2c8f369d2bbe24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31e083d4a55ac9cb359196da1e2c8f369d2bbe24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfeb6c10bba80dc91245318feb0ad1d879015a99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfeb6c10bba80dc91245318feb0ad1d879015a99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfeb6c10bba80dc91245318feb0ad1d879015a99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfeb6c10bba80dc91245318feb0ad1d879015a99/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b76b6c13f81ca422e2b4c8582a56557c5b8442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b76b6c13f81ca422e2b4c8582a56557c5b8442",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b76b6c13f81ca422e2b4c8582a56557c5b8442"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 37,
      "deletions": 28
    },
    "files": [
      {
        "sha": "bf981fcbbf3959a2907cacbde5b759497aba6f79",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 28,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfeb6c10bba80dc91245318feb0ad1d879015a99/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfeb6c10bba80dc91245318feb0ad1d879015a99/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=dfeb6c10bba80dc91245318feb0ad1d879015a99",
        "patch": "@@ -22,6 +22,7 @@\n \n #include <test/util/setup_common.h>\n \n+#include <array>\n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -224,43 +225,51 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n     auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n+    const std::array<CAddress, 2> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE}};\n+\n+    const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n+\n+    std::array<CNode*, 2> nodes;\n+\n     banman->ClearBanned();\n-    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode{id++, NODE_NETWORK, 0, INVALID_SOCKET, addr[0], 0, 0, CAddress(), \"\", ConnectionType::INBOUND};\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));\n-    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n-\n-    CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n+\n+    nodes[1] = new CNode{id++, NODE_NETWORK, 0, INVALID_SOCKET, addr[1], 1, 1, CAddress(), \"\", ConnectionType::INBOUND};\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1])); // [1] not discouraged yet...\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));  // ... but [0] still should be\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n+    // Expect both [0] and [1] to be discouraged now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n \n     bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1, dummy);\n-    peerLogic->FinalizeNode(dummyNode2, dummy);\n+    for (CNode* node : nodes) {\n+        peerLogic->FinalizeNode(*node, dummy);\n+        delete node;\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  },
  {
    "sha": "b765f41164663c93d63e5a401d3b23c586a4e4fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzY1ZjQxMTY0NjYzYzkzZDYzZTVhNDAxZDNiMjNjNTg2YTRlNGZl",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-20T10:40:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-16T09:20:04Z"
      },
      "message": "test: also check disconnect in denialofservice_tests/peer_discouragement\n\nUse `CConnmanTest` instead of `CConnman` and add the nodes to it\nso that their `fDisconnect` flag is set during disconnection.\n\nGithub-Pull: #21571\nRebased-From: 637bb6da368b87711005b909f451f94909400092",
      "tree": {
        "sha": "85fd59919279af29901e948d575820d6889b355e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85fd59919279af29901e948d575820d6889b355e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b765f41164663c93d63e5a401d3b23c586a4e4fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b765f41164663c93d63e5a401d3b23c586a4e4fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b765f41164663c93d63e5a401d3b23c586a4e4fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b765f41164663c93d63e5a401d3b23c586a4e4fe/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfeb6c10bba80dc91245318feb0ad1d879015a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfeb6c10bba80dc91245318feb0ad1d879015a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfeb6c10bba80dc91245318feb0ad1d879015a99"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "22f1ccb2d253005eb4b54c6eb37cf14463dff1a5",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b765f41164663c93d63e5a401d3b23c586a4e4fe/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b765f41164663c93d63e5a401d3b23c586a4e4fe/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=b765f41164663c93d63e5a401d3b23c586a4e4fe",
        "patch": "@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+    auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n     auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     const std::array<CAddress, 2> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n@@ -237,39 +237,48 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[0]);\n     nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n     peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n         LOCK(nodes[0]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n \n     nodes[1] = new CNode{id++, NODE_NETWORK, 0, INVALID_SOCKET, addr[1], 1, 1, CAddress(), \"\", ConnectionType::INBOUND};\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[1]);\n     nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n     peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr[1])); // [1] not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr[0]));  // ... but [0] still should be\n+    // [0] is still discouraged/disconnected.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    // [1] is not discouraged/disconnected yet.\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n     peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    // Expect both [0] and [1] to be discouraged now.\n+    // Expect both [0] and [1] to be discouraged/disconnected now.\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n \n     bool dummy;\n     for (CNode* node : nodes) {\n         peerLogic->FinalizeNode(*node, dummy);\n-        delete node;\n     }\n+    connman->ClearNodes();\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  },
  {
    "sha": "79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWNkYjRhMTk4NGM5MGE0ZDkzNzdmYmIwZGRhN2JkZDYxZDU3MDMx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-20T10:54:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-16T09:20:04Z"
      },
      "message": "test: make sure non-IP peers get discouraged and disconnected\n\nGithub-Pull: #21571\nRebased-From: 81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "tree": {
        "sha": "6f6763aec7ade2fc7af337514b563538f55532be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f6763aec7ade2fc7af337514b563538f55532be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b765f41164663c93d63e5a401d3b23c586a4e4fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b765f41164663c93d63e5a401d3b23c586a4e4fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b765f41164663c93d63e5a401d3b23c586a4e4fe"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 29,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5cffa587e1857bedea66dd9374dd1b2caff0cd7c",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
        "patch": "@@ -225,12 +225,18 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n     auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n-    const std::array<CAddress, 2> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n-                                       CAddress{ip(0xa0b0c002), NODE_NONE}};\n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());\n+\n+    const std::array<CAddress, 3> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE},\n+                                       CAddress{tor_service, NODE_NONE}};\n \n     const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n \n-    std::array<CNode*, 2> nodes;\n+    std::array<CNode*, 3> nodes;\n \n     banman->ClearBanned();\n     nodes[0] = new CNode{id++, NODE_NETWORK, 0, INVALID_SOCKET, addr[0], 0, 0, CAddress(), \"\", ConnectionType::INBOUND};\n@@ -274,6 +280,26 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n     BOOST_CHECK(nodes[1]->fDisconnect);\n \n+    // Make sure non-IP peers are discouraged and disconnected properly.\n+\n+    nodes[2] = new CNode{id++, NODE_NETWORK, 0, INVALID_SOCKET, addr[2], 1, 1, CAddress(), \"\",\n+                         ConnectionType::OUTBOUND_FULL_RELAY};\n+    nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[2]);\n+    nodes[2]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[2]);\n+    peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n+    {\n+        LOCK(nodes[2]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n+    }\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(banman->IsDiscouraged(addr[2]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+    BOOST_CHECK(nodes[2]->fDisconnect);\n+\n     bool dummy;\n     for (CNode* node : nodes) {\n         peerLogic->FinalizeNode(*node, dummy);"
      }
    ]
  },
  {
    "sha": "b8af67eeefc9fc9622f839ec8919b7391d91bf6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGFmNjdlZWVmYzlmYzk2MjJmODM5ZWM4OTE5YjczOTFkOTFiZjZm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-21T00:45:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-16T09:21:02Z"
      },
      "message": "fuzz: cleanups for versionbits fuzzer\n\nGithub-Pull: #21489\nRebased-From: aa7f418fe32b3ec53285693a7731decd99be4528",
      "tree": {
        "sha": "e9a6cb1ea5c95ce8f3138ccd55fcfb1012afca98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9a6cb1ea5c95ce8f3138ccd55fcfb1012afca98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8af67eeefc9fc9622f839ec8919b7391d91bf6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8af67eeefc9fc9622f839ec8919b7391d91bf6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8af67eeefc9fc9622f839ec8919b7391d91bf6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8af67eeefc9fc9622f839ec8919b7391d91bf6f/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79cdb4a1984c90a4d9377fbb0dda7bdd61d57031"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "77a8d0d08ff927c2eaad2d5f4c6f32a8cfeaf1ef",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8af67eeefc9fc9622f839ec8919b7391d91bf6f/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8af67eeefc9fc9622f839ec8919b7391d91bf6f/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=b8af67eeefc9fc9622f839ec8919b7391d91bf6f",
        "patch": "@@ -52,9 +52,10 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, dummy_params, m_cache); }\n     BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindexPrev, dummy_params); }\n \n-    bool Condition(int64_t version) const\n+    bool Condition(int32_t version) const\n     {\n-        return ((version >> m_bit) & 1) != 0 && (version & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS;\n+        uint32_t mask = ((uint32_t)1) << m_bit;\n+        return (((version & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (version & mask) != 0);\n     }\n \n     bool Condition(const CBlockIndex* pindex) const { return Condition(pindex->nVersion); }\n@@ -98,17 +99,20 @@ class Blocks\n };\n } // namespace\n \n+std::unique_ptr<const CChainParams> g_params;\n+\n void initialize()\n {\n-    SelectParams(CBaseChainParams::MAIN);\n+    // this is actually comparatively slow, so only do it once\n+    g_params = CreateChainParams(ArgsManager{}, CBaseChainParams::MAIN);\n+    assert(g_params != nullptr);\n }\n \n-constexpr uint32_t MAX_TIME = 4102444800; // 2100-01-01\n+constexpr uint32_t MAX_START_TIME = 4102444800; // 2100-01-01\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n-    const CChainParams& params = Params();\n-\n+    const CChainParams& params = *g_params;\n     const int64_t interval = params.GetConsensus().nPowTargetSpacing;\n     assert(interval > 1); // need to be able to halve it\n     assert(interval < std::numeric_limits<int32_t>::max());\n@@ -125,9 +129,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     // too many blocks at 10min each might cause uint32_t time to overflow if\n     // block_start_time is at the end of the range above\n-    assert(std::numeric_limits<uint32_t>::max() - MAX_TIME > interval * max_blocks);\n+    assert(std::numeric_limits<uint32_t>::max() - MAX_START_TIME > interval * max_blocks);\n \n-    const int64_t block_start_time = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(params.GenesisBlock().nTime, MAX_TIME);\n+    const int64_t block_start_time = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(params.GenesisBlock().nTime, MAX_START_TIME);\n \n     // what values for version will we use to signal / not signal?\n     const int32_t ver_signal = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n@@ -171,8 +175,10 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     if (checker.Condition(ver_nosignal)) return;\n     if (ver_nosignal < 0) return;\n \n-    // TOP_BITS should ensure version will be positive\n+    // TOP_BITS should ensure version will be positive and meet min\n+    // version requirement\n     assert(ver_signal > 0);\n+    assert(ver_signal >= VERSIONBITS_LAST_OLD_BLOCK_VERSION);\n \n     // Now that we have chosen time and versions, setup to mine blocks\n     Blocks blocks(block_start_time, interval, ver_signal, ver_nosignal);\n@@ -201,7 +207,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n \n         // don't risk exceeding max_blocks or times may wrap around\n-        if (blocks.size() + period*2 > max_blocks) break;\n+        if (blocks.size() + 2 * period > max_blocks) break;\n     }\n     // NOTE: fuzzed_data_provider may be fully consumed at this point and should not be used further\n \n@@ -321,7 +327,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(false);\n     }\n \n-    if (blocks.size() >= max_periods * period) {\n+    if (blocks.size() >= period * max_periods) {\n         // we chose the timeout (and block times) so that by the time we have this many blocks it's all over\n         assert(state == ThresholdState::ACTIVE || state == ThresholdState::FAILED);\n     }"
      }
    ]
  }
]