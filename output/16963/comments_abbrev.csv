promag,2019-09-25 10:17:48,@ryanofsky maybe you have a better approach?,https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-534955357,534955357,
ryanofsky,2019-09-25 11:28:53,"Good catch! But why exactly is the fix in #16955 incorrect? It seems like a reasonable workaround to me as long as the wallet still shows up in the GUI (which I would expect if `m_node.getWallets()` is called later). But if the wallet doesn't show up in the GUI then the bigger fix is needed.\n\nThis clone fix should work now, and is more elegant than the nullptr workaround, but wouldn't work gre",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-534978002,534978002,
promag,2019-09-25 11:48:36,IMO it's incorrect because it doesn't remove the invalid `std::move`.,https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-534984001,534984001,
promag,2019-09-25 11:50:20,"> which I would expect if m_node.getWallets() is called later\n\nThere's nothing guaranteeing it (I think?)",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-534984556,534984556,
promag,2019-09-25 19:39:12,"For reference, the bug was introduced in 1106a6fde4bfde31a16de45e4cc84ed5da05c5a4 #15288 - backport not required.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535179262,535179262,
promag,2019-09-25 19:41:11,Related discussion https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261062566.,https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535180083,535180083,
fanquake,2019-09-26 12:21:51,"I started playing around with this change (7162be2eb2698eeea1eaaca2159d830acca63a1e). Using the same approach as in #16937 I was able to (only once so far) end up with the same wallet loaded twice:\n\n<img width=""328"" alt=""duplicate_big"" src=""https://user-images.githubusercontent.com/863730/65687090-e8648d00-e09a-11e9-8583-a694eae9626d.png"">\n\nMultiple times I've seen `bitcoin-qt` crash durin",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535477305,535477305,
promag,2019-09-26 13:06:49,"Thanks @fanquake!\n\n> I was able to (only once so far) end up with the same wallet loaded twice\n\nVery strange, I wonder if the ""big"" wallet has 2 `WalletModel` or not. I would suspect it is a bug on the `WalletView` creation, not on `WalletController::getOrCreateWallet` since it's guarded by a mutex.\n\nEdit: problem: 2 calls to `BitcoinGUI::addWallet` with the same wallet model are made ",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535493582,535493582,
promag,2019-09-26 20:53:25,"> Multiple times I've seen bitcoin-qt crash during load with:\n\n@fanquake that happens due to `loadwallet`? Or have you added other calls to the test script?",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535681808,535681808,
fanquake,2019-09-27 04:23:39,"> that happens due to loadwallet? Or have you added other calls to the test script?\n\nThat was happening with just the `loadwallet` calls. However I have not seen either issue while testing 40660302d6a38ff0c26ecd80777990332a574c78 so far.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535779866,535779866,
promag,2019-09-27 06:53:47,Going to `rebase --autosquash`.,https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535814926,535814926,
ryanofsky,2019-09-27 11:48:15,"re: https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-534978002\n\n> More ideally, I would delete `uiInterface.LoadWallet`\n\nI haven't seen any response to this suggestion, so I pushed a quick untested implementation to https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/loadwallets\n\nI think it would be a better solution than trying to clone interfaces because clonin",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535906538,535906538,
laanwj,2019-09-27 12:34:47,"I think calling a refactor a fix is strange (a refactor ,by definition, doesn't change behavior): what is this, a refactor or a bug fix? ",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535920291,535920291,
promag,2019-09-27 12:57:31,"@ryanofsky sorry for not replying, I'll take a look.\n\n@laanwj yeah in that case a fix.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-535927903,535927903,
promag,2019-10-01 15:13:28,"@ryanofsky \n\n> or see how #16955 is buggy or would be a bad workaround if documented appropriately.\n\nIt's a workaround due to bad usage of std::unique_ptr and boost::signals2. I think a fix is preferable.\n\n> I also don't agree a bug was introduced in the commit noted\n\nWhat you mean? can you reproduce #16937 before 1106a6f?\n\n> I haven't seen any response to this suggestion, so I",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-537084087,537084087,
promag,2019-10-02 07:04:11,Fixed disable wallet builds and squashed.,https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-537364864,537364864,
ryanofsky,2019-10-02 13:52:20,"Should update PR description. Also it'd be nice for the PR description to summarize the fix, instead of just linking off into other issues. Maybe: ""Prevent GUI LoadWallet handlers from crashing on startup when multiple handlers are attached, because the first handler takes ownership of the wallet unique pointer. Now every handler will receive its own unique pointer.""",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-537502219,537502219,
promag,2019-10-02 17:08:31,"@ryanofsky thank you, done.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-537589776,537589776,
DrahtBot,2019-10-03 20:53:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16426](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16426.html) (Reverse cs_main, cs_wallet lock order and r",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-538123863,538123863,
ryanofsky,2019-10-24 16:33:59,"It looks like a rebase here got messed up, and the latest code I acked from fce3b88ffae76d43cd5268ca364f593a5802525c is gone and replaced by older clone code. I wouldn't ack the current e956882a4fc43b250e0d675dc2e0043bc94792ca without a fix or explanation.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-546000063,546000063,
promag,2019-10-26 11:37:59,"Yeah forget to update local branch before rebase. Will fix, sorry.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-546594996,546594996,
promag,2019-10-26 13:57:33,"@ryanofsky fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-546605059,546605059,
ryanofsky,2019-11-04 15:46:47,"Second commit 81ea66c30e2953dee24d5b127c28daa0d9452a28 might need more code comments and a better commit description to be more easily reviewable.\n\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2019-11-02.html#l-128\n\n> \[11:33:40] <promag> wumpus: maybe see #16963?\n> \[11:36:06] <wumpus> promag: I honestly don't see myself qualified to review that\n> \[11:36:35] <wumpus> the inter-thre",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-549414669,549414669,
promag,2019-11-04 16:34:46,"> This just takes a `std::function<void()>` cleanup function, and returns an object which invokes the cleanup function when the object is destroyed. It's used to erase entries from the `std::list<LoadWalletFn>` list when the GUI no longer wants to receive callbacks.\n\nAnd for that reason a `std::list` is used - iterators aren't invalidated if other elements are added/removed.",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-549437413,549437413,
fjahr,2019-12-20 16:05:33,"tested ACK 81ea66c30e2953dee24d5b127c28daa0d9452a28\n\nI was able to reproduce the error using the script from https://github.com/bitcoin/bitcoin/issues/16937 on master but not with this fix.\n\ncode review ACK 6d6a7a8403ae923f189812edebdd95761de0e7f2\n\nI was not able to reproduce the duplicate wallet showing up after ~10 tries on master.\n",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-567976589,567976589,
laanwj,2020-01-08 15:48:22,"Code review ACK 6d6a7a8403ae923f189812edebdd95761de0e7f2.\n\n@ryanofsky Thanks for the explanation that was very helpful",https://github.com/bitcoin/bitcoin/pull/16963#issuecomment-572130002,572130002,
fanquake,2019-09-26 12:26:27,nit: s/implemantion/implementation ?,https://github.com/bitcoin/bitcoin/pull/16963#discussion_r328583218,328583218,src/interfaces/wallet.h
Empact,2019-12-27 19:39:15,"nit: this `HandleLoadWallet` arg could be an r-value reference, on account of the `std::move` calling pattern.",https://github.com/bitcoin/bitcoin/pull/16963#discussion_r361732811,361732811,src/wallet/wallet.h
kallewoof,2020-01-04 23:39:45,I would prefer a `bool ready()` method that simply checks the conditions rather than arbitrarily booling non-bool methods like this. I think it's unnecessarily confusing.,https://github.com/bitcoin/bitcoin/pull/16963#discussion_r363060717,363060717,src/qt/walletframe.h
promag,2020-01-04 23:55:29,"6d6a7a8403ae923f189812edebdd95761de0e7f2\n\n@kallewoof thanks for reviewing.\n\n> arbitrarily booling non-bool methods like this.\n\nWhat you mean ""like this""? I could refactor by adding `bool WalletFrame::hasWallet(WalletModel*) const` but IMO this is also fine, for instance, `std::set::insert` also returns whether the item was added.\n\nWhat it could have is the `NODISCARD` attribute, bu",https://github.com/bitcoin/bitcoin/pull/16963#discussion_r363061214,363061214,src/qt/walletframe.h
Empact,2020-01-04 23:56:15,"IMO it's an anti-pattern to silently fail when an operation is attempted, returning a success bool instead makes sense to me in that case, or alternatively raise on failure and use `ready` as you suggest.",https://github.com/bitcoin/bitcoin/pull/16963#discussion_r363061243,363061243,src/qt/walletframe.h
kallewoof,2020-01-05 00:06:09,"Yeah, I know this is done elsewhere (even in `std`), but I don't think it's a good idea, personally. It often results in having to look up what exactly is being returned, made even worse with things like `bool CreateThing(...)`. (Looking at the signature unless `Thing` is a bool type, the return value is most likely the result of the create operation, but seeing it in the wild as `auto foo = Creat",https://github.com/bitcoin/bitcoin/pull/16963#discussion_r363061566,363061566,src/qt/walletframe.h
