DrahtBot,2018-10-30T06:19:05Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14987](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14987.html) (RPCHelpMan: Pass through Result and Example",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-434184969,434184969,
laanwj,2018-10-31T17:14:49Z,"thank you for picking this up!\nWe welcome the Ban Man to our kingdom",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-434772194,434772194,
laanwj,2018-11-06T13:10:33Z,"No merge conflicts, but it does need rebase [#14555]; current build fails wiith\n```c++\n/.../bitcoin/src/banman.cpp:10:10: fatal error: util.h: No such file or directory\n #include <util.h>\n          ^~~~~~~~\ncompilation terminated.\n```",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-436247077,436247077,
dongcarl,2018-11-06T16:59:03Z,Done.,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-436327726,436327726,
dongcarl,2018-11-17T02:04:30Z,"Rebased, and addressed casing concerns. Additional review welcome.",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-439578933,439578933,
ryanofsky,2018-12-04T21:35:35Z,"I'd like to review this soon, but is there a description of what high level goal of this PR is? Is it cleanup geared towards making code maintenance easier? Or is it intended to enable a new feature? Is it cleaning up technical debt from a previously added feature? The previous PR #14605 just says it ""breaks the ban/unban functions out of CConnman and into a new class because, while logically bans",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-444267474,444267474,
theuni,2018-12-04T22:49:58Z,"@ryanofsky This is one step (one of the big ones) closer to instantiated CConnman (self-contained and no-globals), which would allow for all kinds of cool things, primarily running separate net instances against each-other.\n\nAnother nice side-effect of the above is that once self-contained, bitcoind could be run (or even compiled!) without net support.\n\nEdit: See my comment here as an exam",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-444289739,444289739,
dongcarl,2019-01-03T15:19:32Z,Rebased and addressed reviews!,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-451174048,451174048,
Empact,2019-01-09T11:28:19Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-452664289,452664289,
laanwj,2019-01-15T14:53:03Z,"We want to have this in for 0.18.0, there's not *that* much time anymore.\nThis has had a fair amount of review.\nLet's rebase, address the nits, do a last review round, and merge it.",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-454419225,454419225,
dongcarl,2019-01-15T18:35:46Z,@laanwj Yes. I will make it happen this week.,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-454501673,454501673,
dongcarl,2019-01-15T22:53:46Z,Rebased and addressed nits.,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-454583285,454583285,
laanwj,2019-01-16T12:52:32Z,Thank you @dongkarl!,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-454768278,454768278,
laanwj,2019-01-16T13:04:12Z,"utACK cb1ee04b6a7d56834a6447711ca5500fc8bd83cd\n\nOriginal PR had utACKs by me, @ryanofsky, @jimpo. Please re-review so that we can merge this!",https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-454771602,454771602,
Sjors,2019-01-16T19:10:13Z,re-tACK 18185b57,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-454901942,454901942,
laanwj,2019-01-21T17:58:48Z,re-utACK 18185b57c32d0a43afeca4c125b9352c692923e9,https://github.com/bitcoin/bitcoin/pull/14605#issuecomment-456156363,456156363,
MarcoFalke,2018-10-30T12:22:56Z,Accidental changes in the first commit?,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229283979,229283979,src/qt/rpcconsole.cpp
practicalswift,2018-10-30T14:35:03Z,Make sure parameter name matches between declaration and definition :-),https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229332038,229332038,src/addrdb.cpp
practicalswift,2018-10-30T14:35:46Z,"Make sure parameter names match between:\n\n```\n    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n    void BanMan::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n```",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229332334,229332334,src/banman.h
practicalswift,2018-10-30T14:36:09Z,"Make sure these match:\n\n```\n    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n    void BanMan::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n```",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229332503,229332503,src/banman.h
practicalswift,2018-10-30T14:36:32Z,"Make sure these match:\n\n```\n    bool Unban(const CNetAddr &ip);\n    bool BanMan::Unban(const CNetAddr &addr) {\n```",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229332663,229332663,src/banman.h
practicalswift,2018-10-30T14:36:44Z,"Same here:\n\n```\n    bool Unban(const CSubNet &ip);\n    bool BanMan::Unban(const CSubNet &subNet) {\n```",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229332746,229332746,src/banman.h
practicalswift,2018-10-30T14:37:02Z,"Same here:\n\n```\n    void GetBanned(banmap_t &banmap);\n    void BanMan::GetBanned(banmap_t &banMap)\n```",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229332892,229332892,src/banman.h
practicalswift,2018-10-30T14:37:19Z,"And here :-)\n\n```\n    void SetBanned(const banmap_t &banmap);\n    void BanMan::SetBanned(const banmap_t &banMap)\n```",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229333006,229333006,src/banman.h
practicalswift,2018-10-30T14:40:04Z,Nit: `if (m_banned.erase(subNet) == 0)` to increase readability and avoid implicit conversion?,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229334235,229334235,src/banman.cpp
practicalswift,2018-10-30T14:47:42Z,Since this is new code - please run all new C++ files through `clang-format` (using the project local settings) to get the expected formatting.,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229337596,229337596,src/banman.cpp
practicalswift,2018-10-30T20:55:33Z,Could this be re-formulated to avoid reassigning parameters?,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229482681,229482681,src/banman.cpp
dongcarl,2018-10-31T21:03:59Z,"Reformulated in https://github.com/bitcoin/bitcoin/pull/14605/commits/36e6b241d0ed6f6d6ab503d61dfd95053202ce9b, let me know if you think that's good",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r229867404,229867404,src/banman.cpp
kostyantyn,2018-11-06T17:25:03Z,"since it's a new class and it mostly everywhere follows `snake_case` notation, WDYS to stick to it and in a few other places?",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r231216991,231216991,src/banman.cpp
practicalswift,2018-11-15T21:07:41Z,@dongcarl Nice! Thanks! :-),https://github.com/bitcoin/bitcoin/pull/14605#discussion_r234008081,234008081,src/banman.cpp
theuni,2018-12-04T21:27:28Z,This can now use MakeUnique.,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238845235,238845235,src/init.cpp
theuni,2018-12-04T21:39:02Z,"Note for follow-up PR:\n\nconnman and banman pointers should be passed into NodeImpl's constructor. That would eliminate the use of globals here.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238849008,238849008,src/interfaces/node.cpp
theuni,2018-12-04T21:56:54Z,"@kostyantyn That'd be fine in a follow-up PR, but the primary interest here is renaming the member variables so that they're immediately distinguishable.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238855206,238855206,src/banman.cpp
theuni,2018-12-04T22:25:34Z,normalized_sinceUnixEpoch should be a bool.,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238863651,238863651,src/banman.cpp
theuni,2018-12-04T22:27:36Z,"Hungarian or snake_case, pick one :)",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238864267,238864267,src/banman.cpp
theuni,2018-12-04T22:38:24Z,"Please don't use special-cases in scripted-diffs to negate part of a change, as that means that manual review is required.\n\nInstead, please add a commit before the scripted-diff which renames any necessary conflicts.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238867453,238867453,src/banman.cpp
dongcarl,2018-12-05T13:54:41Z,Do you mean rename `CBanEntry.banReason` to `CBanEntry.m_ban_reason` before the scripted diff?,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r239071958,239071958,src/banman.cpp
dongcarl,2018-12-05T13:56:45Z,"Fixed in 9bad9fa1168ec53e92bb8b2df0b5e9d578344a2f, unless this should be squashed in",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r239072804,239072804,src/banman.cpp
theuni,2018-12-06T22:27:37Z,"How about just first adding a commit to hack around it so that we don't have to use the var by name?\n```patch\ndiff --git a/src/addrdb.h b/src/addrdb.h\nindex 90eca44..f50442f 100644\n--- a/src/addrdb.h\n+++ b/src/addrdb.h\n@@ -43,6 +43,11 @@ public:\n         nCreateTime = nCreateTimeIn;\n     }\n\n+    explicit CBanEntry(int64_t nCreateTimeIn, BanReason banReasonIn) : CBanEntry(nCreat",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r239638482,239638482,src/banman.cpp
Empact,2019-01-09T10:48:10Z,nit: could be initializer,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246336778,246336778,src/addrdb.h
Empact,2019-01-09T10:48:58Z,nit: could be const,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246337055,246337055,src/addrdb.h
Empact,2019-01-09T10:49:31Z,nit: could wrap this line,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246337237,246337237,src/banman.cpp
Empact,2019-01-09T10:50:22Z,"nit: one line or braces, here and a few other places",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246337519,246337519,src/banman.cpp
Empact,2019-01-09T11:04:14Z,nit: `#include <cstdint>`,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246341755,246341755,src/banman.h
Empact,2019-01-09T11:04:38Z,nit: `#include <memory>`,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246341868,246341868,src/banman.h
Empact,2019-01-09T11:14:24Z,"Seems `dynamic_cast` would be more appropriate here, given the cast to base class.\n\nEdit: maybe not:\n> A downcast can also be performed with static_cast, which avoids the cost of the runtime check, but it's only safe if the program can guarantee (through some other logic) that the object pointed to by expression is definitely Derived.\nhttps://en.cppreference.com/w/cpp/language/dynamic_cast",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246344474,246344474,src/net.cpp
Empact,2019-01-09T11:23:37Z,nit: could have a `CNode*` version of `DisconnectNode` to avoid the lookup,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r246346939,246346939,src/net_processing.cpp
dongcarl,2019-01-15T19:43:51Z,"I don't think this can be initializer as we need to `SetNull()`, the current one does the delegation thing.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248036863,248036863,src/addrdb.h
dongcarl,2019-01-15T20:28:30Z,"We are upcasting from CAddress to its base class of CNetAddr here, so it wouldn't need a `static_assert` I believe.\n\nSince we are just upcasting, we don't even need casting here, so I'll just remove it unless there are obscure C++ reasons for doing so.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248050771,248050771,src/net.cpp
dongcarl,2019-01-15T21:17:13Z,"I'm going to revert to doing\n```\npnode->fDisconnect = true;\n```\nso as to avoid the lookup, then in a followup PR we can make `fDisconnect` private, and have a `Disconnect` method on `CNode`.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248065847,248065847,src/net_processing.cpp
laanwj,2019-01-16T15:18:01Z,I'd advise against using `dynamic_cast`. It's not used anywhere else in the code and it relies on C++ run-time type information which has at least historically a large overhead. I'm also fairly sure it's unnecessary here.,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248322599,248322599,src/net.cpp
promag,2019-01-16T16:50:01Z,"Commit b4ca7e2\n\nDiscussed with @dongcarl about not changing behavior in this commit, the conclusion is to call `conman->DisconnectNode(pnode->addr)` here and add `pnode->fDisconnect = true;` above.",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248362793,248362793,src/net_processing.cpp
Sjors,2019-01-16T17:45:38Z,Maybe add a comment to `std::atomic_bool fDisconnect` in `net.h` that setting this to true will cause the node to be disconnected the next time `DisconnectNodes()` runs.,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248384309,248384309,src/net.cpp
Sjors,2019-01-16T18:01:15Z,Nit: `15 * 60` to be consistent with other `_INTERVAL` constants.,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248390091,248390091,src/net.cpp
Sjors,2019-01-16T18:06:51Z,cc @ryanofsky,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248391935,248391935,src/interfaces/node.cpp
dongcarl,2019-01-16T18:54:26Z,"I think this belongs in another PR, but happy to do that PR :-)",https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248408710,248408710,src/net.cpp
dongcarl,2019-01-16T18:55:28Z,Done!,https://github.com/bitcoin/bitcoin/pull/14605#discussion_r248409096,248409096,src/net.cpp
