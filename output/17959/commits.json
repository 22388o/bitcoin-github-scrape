[
  {
    "sha": "54be4e71d898de8f14e3269550d56097c023d1cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGJlNGU3MWQ4OThkZThmMTRlMzI2OTU1MGQ1NjA5N2MwMjNkMWNj",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-01-18T19:46:53Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-28T19:42:23Z"
      },
      "message": "test: check specific reject reasons in feature_csv_activation.py\n\nthis also fixes a bug that was uncovered with this checks:\nfor the BIP112 version 1 tx tests, certain txs (bip112txs_vary_OP_CSV_v1) have\nbeen sent twice due to a typo, leading also to a failure as expected but for the\nwrong reason",
      "tree": {
        "sha": "f5c40e11456e7c46d4bd4e16c162bd3a324ce3db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5c40e11456e7c46d4bd4e16c162bd3a324ce3db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54be4e71d898de8f14e3269550d56097c023d1cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54be4e71d898de8f14e3269550d56097c023d1cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54be4e71d898de8f14e3269550d56097c023d1cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54be4e71d898de8f14e3269550d56097c023d1cc/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ad80bec3f31c0e4bec0bc0b62dff28b32e4b8b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad80bec3f31c0e4bec0bc0b62dff28b32e4b8b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad80bec3f31c0e4bec0bc0b62dff28b32e4b8b5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a98480a6dd45d1b5e387128ca312e4e15bc93bb5",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54be4e71d898de8f14e3269550d56097c023d1cc/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54be4e71d898de8f14e3269550d56097c023d1cc/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=54be4e71d898de8f14e3269550d56097c023d1cc",
        "patch": "@@ -343,7 +343,7 @@ def run_test(self):\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n         bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            self.send_blocks([self.create_test_block([bip113tx])], success=False)\n+            self.send_blocks([self.create_test_block([bip113tx])], success=False, reject_reason='bad-txns-nonfinal')\n         # BIP 113 tests should now pass if the locktime is < MTP\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n         bip113signed1 = sign_transaction(self.nodes[0], bip113tx_v1)\n@@ -375,11 +375,11 @@ def run_test(self):\n         # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n         bip68timetxs = [tx['tx'] for tx in bip68txs_v2 if not tx['sdf'] and tx['stf']]\n         for tx in bip68timetxs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False, reject_reason='bad-txns-nonfinal')\n \n         bip68heighttxs = [tx['tx'] for tx in bip68txs_v2 if not tx['sdf'] and not tx['stf']]\n         for tx in bip68heighttxs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False, reject_reason='bad-txns-nonfinal')\n \n         # Advance one block to 438\n         test_blocks = self.generate_blocks(1)\n@@ -390,7 +390,7 @@ def run_test(self):\n         self.send_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         for tx in bip68heighttxs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False, reject_reason='bad-txns-nonfinal')\n \n         # Advance one block to 439\n         test_blocks = self.generate_blocks(1)\n@@ -405,7 +405,8 @@ def run_test(self):\n         self.log.info(\"Test version 1 txs\")\n \n         # -1 OP_CSV tx and (empty stack) OP_CSV tx should fail\n-        self.send_blocks([self.create_test_block([bip112tx_special_v1])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_special_v1])], success=False,\n+                         reject_reason='non-mandatory-script-verify-flag (Negative locktime)')\n         self.send_blocks([self.create_test_block([bip112tx_emptystack_v1])], success=False,\n                          reject_reason='non-mandatory-script-verify-flag (Operation not valid with the current stack size)')\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n@@ -418,15 +419,17 @@ def run_test(self):\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n         fail_txs = all_rlt_txs(bip112txs_vary_nSequence_v1)\n         fail_txs += all_rlt_txs(bip112txs_vary_nSequence_9_v1)\n-        fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if not tx['sdf']]\n+        fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_v1 if not tx['sdf']]\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if not tx['sdf']]\n         for tx in fail_txs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False,\n+                             reject_reason='non-mandatory-script-verify-flag (Locktime requirement not satisfied)')\n \n         self.log.info(\"Test version 2 txs\")\n \n         # -1 OP_CSV tx and (empty stack) OP_CSV tx should fail\n-        self.send_blocks([self.create_test_block([bip112tx_special_v2])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_special_v2])], success=False,\n+                         reject_reason='non-mandatory-script-verify-flag (Negative locktime)')\n         self.send_blocks([self.create_test_block([bip112tx_emptystack_v2])], success=False,\n                          reject_reason='non-mandatory-script-verify-flag (Operation not valid with the current stack size)')\n \n@@ -443,18 +446,21 @@ def run_test(self):\n         fail_txs = all_rlt_txs(bip112txs_vary_nSequence_9_v2)\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v2 if not tx['sdf']]\n         for tx in fail_txs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False,\n+                             reject_reason='non-mandatory-script-verify-flag (Locktime requirement not satisfied)')\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n         fail_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if tx['sdf']]\n         for tx in fail_txs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False,\n+                             reject_reason='non-mandatory-script-verify-flag (Locktime requirement not satisfied)')\n \n         # If sequencelock types mismatch, tx should fail\n         fail_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if not tx['sdf'] and tx['stf']]\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and tx['stf']]\n         for tx in fail_txs:\n-            self.send_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False,\n+                             reject_reason='non-mandatory-script-verify-flag (Locktime requirement not satisfied)')\n \n         # Remaining txs should pass, just test masking works properly\n         success_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if not tx['sdf'] and not tx['stf']]"
      }
    ]
  }
]