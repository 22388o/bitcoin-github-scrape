[
  {
    "sha": "fc146095d20452686efe1944b143452bec394343",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzE0NjA5NWQyMDQ1MjY4NmVmZTE5NDRiMTQzNDUyYmVjMzk0MzQz",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-05-06T22:08:39Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-10-19T13:08:39Z"
      },
      "message": "RPC: augment getblockchaininfo bip9_softforks data",
      "tree": {
        "sha": "d57fe4980f09dab389f55ddb0658de4d97d8096a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d57fe4980f09dab389f55ddb0658de4d97d8096a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc146095d20452686efe1944b143452bec394343",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc146095d20452686efe1944b143452bec394343",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc146095d20452686efe1944b143452bec394343",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc146095d20452686efe1944b143452bec394343/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 121,
      "deletions": 44
    },
    "files": [
      {
        "sha": "c42ed44c259a3c2c123eb86f8e9d75490203df79",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -81,6 +81,9 @@ def get_bip9_status(self, key):\n         return info['bip9_softforks'][key]\n \n     def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature, bitno):\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 0)\n+\n         # generate some coins for later\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         self.height = 3  # height of the next block to build\n@@ -89,6 +92,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.last_block_time = int(time.time())\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 0)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])\n@@ -101,6 +105,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 144)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -117,6 +122,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 144)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -133,6 +139,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -142,6 +149,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -167,6 +175,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, True]])\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 576)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])"
      },
      {
        "sha": "50158b468780aa231f1586e192de3acab319c1f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -6918,6 +6918,12 @@ ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::D\n     return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n+int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsStateSinceHeight(chainActive.Tip(), params, pos, versionbitscache);\n+}\n+\n class CMainCleanup\n {\n public:"
      },
      {
        "sha": "3eab9b89daa66ab25a674944458247d790df91f9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -297,7 +297,8 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-\n+/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way"
      },
      {
        "sha": "141ca87b69bdc66ef2afb26e47fce503eb1a6ae9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -1009,6 +1009,7 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     }\n     rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n     rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n+    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n     return rv;\n }\n \n@@ -1053,7 +1054,8 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n             \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n             \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"since\\\": xx            (numeric) height of the first block to which the status applies\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"}\\n\""
      },
      {
        "sha": "784e7969985248ee73d2c012c431b0ea11be5d27",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 41,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2015 The Bitcoin Core developers\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,6 +30,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n };\n \n #define CHECKERS 6\n@@ -78,6 +79,16 @@ class VersionBitsTester\n         return *this;\n     }\n \n+    VersionBitsTester& TestStateSinceHeight(int height) {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? NULL : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n     VersionBitsTester& TestDefined() {\n         for (int i = 0; i < CHECKERS; i++) {\n             if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n@@ -137,53 +148,64 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n         // DEFINED -> FAILED\n-        VersionBitsTester().TestDefined()\n-                           .Mine(1, TestTime(1), 0x100).TestDefined()\n-                           .Mine(11, TestTime(11), 0x100).TestDefined()\n-                           .Mine(989, TestTime(989), 0x100).TestDefined()\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined()\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed()\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed()\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed()\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed()\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed()\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed()\n+        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n \n         // DEFINED -> STARTED -> FAILED\n-                           .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x100).TestStarted() // So that's what happens the next period\n-                           .Mine(2051, TestTime(10010), 0).TestStarted() // 51 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 899 new blocks\n-                           .Mine(3000, TestTime(20000), 0).TestFailed() // 50 old blocks (so 899 out of the past 1000)\n-                           .Mine(4000, TestTime(20010), 0x100).TestFailed()\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2051, TestTime(10010), 0).TestStarted().TestStateSinceHeight(2000) // 51 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 899 new blocks\n+                           .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n+                           .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n \n         // DEFINED -> STARTED -> FAILED while threshold reached\n-                           .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n-                           .Mine(2999, TestTime(30000), 0x100).TestStarted() // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed() // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed()\n-                           .Mine(4000, TestTime(30002), 0).TestFailed()\n-                           .Mine(14333, TestTime(30003), 0).TestFailed()\n-                           .Mine(24000, TestTime(40000), 0).TestFailed()\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n+                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n \n         // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n                            .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n-                           .Mine(2050, TestTime(10010), 0x200).TestStarted() // 50 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 900 new blocks\n-                           .Mine(2999, TestTime(19999), 0x200).TestStarted() // 49 old blocks\n-                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn() // 1 old block (so 900 out of the past 1000)\n-                           .Mine(3999, TestTime(30001), 0).TestLockedIn()\n-                           .Mine(4000, TestTime(30002), 0).TestActive()\n-                           .Mine(14333, TestTime(30003), 0).TestActive()\n-                           .Mine(24000, TestTime(40000), 0).TestActive();\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n+                           .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n+                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+\n+        // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n+                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n     }\n \n     // Sanity checks of version bit deployments"
      },
      {
        "sha": "d73f3405109d0843a289496d3e7aad1f9df3a812",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -105,6 +105,36 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n+int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+{\n+    const ThresholdState initialState = GetStateFor(pindexPrev, params, cache);\n+\n+    // BIP 9 about state DEFINED: \"The genesis block is by definition in this state for each deployment.\"\n+    if (initialState == THRESHOLD_DEFINED) {\n+        return 0;\n+    }\n+\n+    const int nPeriod = Period(params);\n+\n+    // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n+    // To ease understanding of the following height calculation, it helps to remember that\n+    // right now pindexPrev points to the block prior to the block that we are computing for, thus:\n+    // if we are computing for the last block of a period, then pindexPrev points to the second to last block of the period, and\n+    // if we are computing for the first block of a period, then pindexPrev points to the last block of the previous period.\n+    // The parent of the genesis block is represented by NULL.\n+    pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+\n+    const CBlockIndex* previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+\n+    while (previousPeriodParent != NULL && GetStateFor(previousPeriodParent, params, cache) == initialState) {\n+        pindexPrev = previousPeriodParent;\n+        previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+    }\n+\n+    // Adjust the result because right now we point to the parent block.\n+    return pindexPrev->nHeight + 1;\n+}\n+\n namespace\n {\n /**\n@@ -137,6 +167,11 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n+int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+}\n+\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);"
      },
      {
        "sha": "7a929266aa24c27f5d5695d61c432e4cdb84f80d",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -51,8 +51,9 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n-    // Note that the function below takes a pindexPrev as input: they compute information for block B based on its parent.\n+    // Note that the functions below take a pindexPrev as input: they compute information for block B based on its parent.\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n struct VersionBitsCache\n@@ -63,6 +64,7 @@ struct VersionBitsCache\n };\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n #endif"
      }
    ]
  }
]