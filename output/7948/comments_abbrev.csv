paveljanik,2016-04-26T20:31:37Z,Why do you prefer to print block hash instead of block height?\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-214876642,214876642,
mruddy,2016-04-26T21:21:04Z,"No real strong reason. Just that the height does not uniquely identify a block like its hash does, and if you want to lookup the block info (including its height), all you have to do after you have the hash is `getblock <hash>` instead of `getblockhash <height>` then `getblock <hash>`.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-214890443,214890443,
paveljanik,2016-04-26T21:24:18Z,"@mruddy Sure. But in this case, the lock in happens at height, not in the particular block hash - it can be reorganized. No?\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-214891264,214891264,
mruddy,2016-04-26T22:39:56Z,"@paveljanik Yes, that's usually going to be the case. It would take an extraordinarily long re-org to change the height too (testnet style shenanigans). Height may be more intuitive to use here in that sense. If I made that change, I'd probably rename the attribute ""lockedInHeight"" too. I might do this tomorrow pending other feedback that that's not a good idea for some reason.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-214909023,214909023,
mruddy,2016-04-27T14:00:59Z,"Changed my mind on how this should work. Now a new member named ""since"" is part of the BIP9 data and it gives the height of the first block to which the current deployment status applied. Seems like this might be more useful.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-215092701,215092701,
paveljanik,2016-04-27T15:51:36Z,"Travis problem unrelated (`wallet.py`).\n\nACK https://github.com/bitcoin/bitcoin/pull/7948/commits/4ba7830bbedbd1739056f80a347f1d4553328091\n\nThanks!\n\n```\n  ""bip9_softforks"": {\n    ""csv"": {\n      ""status"": ""active"",\n      ""startTime"": 1456790400,\n      ""timeout"": 1493596800,\n      ""since"": 770111\n    }\n  }\n```\n\nThis corresponds with the activation (https://www.reddit.com/r/Bitcoin/c",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-215128052,215128052,
sdaftuar,2016-04-28T18:01:49Z,"The ""since"" height is off-by-one, as the rules wouldn't have gone into effect until block height 770112 (all the version bits state calculations take the prev block as an argument, so 770111 was the height of the last block before the rules were activated).\n\nAlso, when walking the versionbitscache, we should skip over entries that are not on `chainActive`, as presumably the question we're intere",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-215511959,215511959,
mruddy,2016-04-29T00:57:53Z,"@sdaftuar Wow, great code review, thanks! You're right. Geez, I totally missed that. Updates made. Added tests. I also used some C++11 in the latest updates because that was enabled earlier today.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-215604495,215604495,
mruddy,2016-05-05T10:50:45Z,@sipa now that this is stable (hasn't changed in about a week) are you ok with adding this bip9 data in this way?\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-217123756,217123756,
mruddy,2016-05-06T18:31:27Z,"@sipa I restructured things how I believe you meant. I tried to follow existing patterns at the same time. Please check it when you get a chance. I also added more tests. Thanks!\nEDIT: I just had an idea on how to do this with a little less code. I'll get that pushed up in a little bit if it works out.\nEDIT2: ok, i guess that's good enough now.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-217523208,217523208,
mruddy,2016-05-16T10:27:20Z,@laanwj I think this is ready. Do you agree?\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-219395093,219395093,
sipa,2016-05-16T21:02:54Z,utACK 62934242e85d693de13d31d84da80e6f9bc2927b\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-219547050,219547050,
luke-jr,2016-06-02T15:36:09Z,"IMO it would be nice to know at which block hash/height each transition was made. I think using the hash makes more sense, but not sure it matters much with BIP 9 (perhaps it might with some future softfork scheme?).\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-223330322,223330322,
sipa,2016-06-02T15:45:40Z,"@luke-jr By definition, consensus rules within a blockchain can only depend on its history, and not on that of other branches, so height is the only relevant value as it uniquely determines the block within the current chain. Furthermore, in BIP9, the status changes are never affected by the block itself (and often not by any of those in recent history before it either).\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-223333220,223333220,
paveljanik,2016-06-02T15:59:53Z,ACK https://github.com/bitcoin/bitcoin/pull/7948/commits/62934242e85d693de13d31d84da80e6f9bc2927b\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-223337698,223337698,
laanwj,2016-06-16T10:12:50Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-226444512,226444512,
mruddy,2016-06-16T12:25:00Z,rebase complete.\ni only had to resolve minor changes to bip9-softforks.py. nothing else changed.\nhere's a link to the previous commit that got acks for a quick double check: https://github.com/mruddy/bitcoin/commit/62934242e85d693de13d31d84da80e6f9bc2927b\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-226469990,226469990,
mruddy,2016-08-24T12:05:19Z,@laanwj want to merge this? haven't changed since mid june. thanks!\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-242039593,242039593,
mruddy,2016-08-24T13:37:07Z,"yep, that one-off travis failure looks unrelated to these changes. looks like something with compiling boost.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-242066117,242066117,
mruddy,2016-09-04T12:52:38Z,rebased to stay current and get travis green again\n,https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-244601948,244601948,
mruddy,2016-10-18T21:24:06Z,"@laanwj if i rebase this to the 0.13 branch, would you merge it? if not, then should i close this pull? it's been unchanged for about four months and just got a conflict. the changes provide a little softfork info, but they also add a fair bit of code. i'm ok with either way you choose.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-254643723,254643723,
laanwj,2016-10-19T07:34:49Z,"This missed 0.13, and adds a feature, should be rebased to master instead.\n(and truly sorry for it taking so long, but there's just so many pulls being opened all the time, I can't handle it anymore)\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-254735387,254735387,
mruddy,2016-10-19T14:17:47Z,"rebased on master. no worries, thanks for all the good work you do.\n",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-254826413,254826413,
mruddy,2017-01-18T11:52:32Z,"@pinheadmz I received your question: ""Are you sure this offset is necessary? In regtest mode on my machine, segwit status is ""started"" on block 143, but this RPC call returns ""since"": 144 even though that block height has not been generated yet.""\n\nAnswer: When you start a fresh regtest node (regtest uses a retarget interval of 144 blocks), you have 1 block @ height 0 (the genesis block) and th",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-273456366,273456366,
pinheadmz,2017-01-18T16:49:19Z,"@mruddy Thanks! I also just saw the offset was already discussed earlier in the thread, it makes sense.",https://github.com/bitcoin/bitcoin/pull/7948#issuecomment-273531127,273531127,
sipa,2016-04-26T14:43:10Z,Use a reference here; no need to copy the entire cache\n,https://github.com/bitcoin/bitcoin/pull/7948#discussion_r61098168,61098168,src/main.cpp
mruddy,2016-04-26T15:32:59Z,"done, thanks\n",https://github.com/bitcoin/bitcoin/pull/7948#discussion_r61108214,61108214,src/main.cpp
sipa,2016-05-05T16:15:34Z,"I think there is a more efficient implementation possible, but it would be cleaner to put it in AbstractThresholdConditionChecker, I think.\n",https://github.com/bitcoin/bitcoin/pull/7948#discussion_r62210972,62210972,src/main.cpp
sipa,2016-05-05T16:18:21Z,"AbstracrThresholdConditionChecker has the logic to walk the chain efficiently already (including first jumping back to a multiple of the period etc), so it could use the same and call GetStateFor for every multiple-or-period block back from the tip that was passed. That would also avoid breaking the abstraction that ThresholdConditionCache gives.\n",https://github.com/bitcoin/bitcoin/pull/7948#discussion_r62211530,62211530,src/main.cpp
sipa,2016-05-09T19:35:18Z,Can't this cause a segfault if pindexPrev is NULL?\n,https://github.com/bitcoin/bitcoin/pull/7948#discussion_r62558800,62558800,src/versionbits.cpp
mruddy,2016-05-09T22:05:25Z,"There is protection against pindexPrev being NULL at that point though.\n\nIf this method gets called with the initial argument value of pindexPrev being NULL, or for a first period block (or more generally, for a block in any period that is in state DEFINED), then the first call of GetStateFor returns THRESHOLD_DEFINED and the method returns at line 97. Else, pindexPrev won't become NULL before p",https://github.com/bitcoin/bitcoin/pull/7948#discussion_r62581407,62581407,src/versionbits.cpp
mruddy,2016-05-13T10:45:52Z,@sipa did that make sense? are we good now?\n,https://github.com/bitcoin/bitcoin/pull/7948#discussion_r63164754,63164754,src/versionbits.cpp
sipa,2016-05-16T21:02:07Z,"Yes, agree.\n",https://github.com/bitcoin/bitcoin/pull/7948#discussion_r63424871,63424871,src/versionbits.cpp
