[
  {
    "sha": "2742c3428633b6ceaab6714635dc3adb74bf121b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzQyYzM0Mjg2MzNiNmNlYWFiNjcxNDYzNWRjM2FkYjc0YmYxMjFi",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-02T23:42:40Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-02T23:42:40Z"
      },
      "message": "test: add factor option to adjust test timeouts\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "2ad74e29a0a3c97c8ca945065c59ae33fdaa2417",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ad74e29a0a3c97c8ca945065c59ae33fdaa2417"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2742c3428633b6ceaab6714635dc3adb74bf121b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl6uBXAACgkQJiaFvHjt\nEfty9wgAlXULkwW/gJrRGniwPAYhUHst54k68WfhW7dZ/T84cgFLvfQWVScAIqiT\nvs4Z26G20hBiwpEXcZlK29bUqXJLBjHOliOU3kJfRzD3vcHkwObXGMI21UyeTQGs\nPEJHtSK+iJEOp4at9BelqQbs1UUFUtIGMyqhxyxEWKUO2wfXXfPJkZKnSx/ijLgB\n52ckrvvcBfC6uApBRWkizQHNkA+/eHjnkjF6QUjMt2V+CLSMpLMO+KKeVn+la9EE\nrAsJNCPdUtBnjuz/ay5H+g22KxYaJ5tGGERA/0VU0Ln398581ePy4SaoA3J3EiFb\nwWqvJdZta7O2TPo+x/xMttRMwIxz8g==\n=ZFxU\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ad74e29a0a3c97c8ca945065c59ae33fdaa2417\nparent eef90c14ed0f559e3f6e187341009270b84f45cb\nauthor Harris <brakmic@gmail.com> 1588462960 +0200\ncommitter Harris <brakmic@gmail.com> 1588462960 +0200\n\ntest: add factor option to adjust test timeouts\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2742c3428633b6ceaab6714635dc3adb74bf121b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2742c3428633b6ceaab6714635dc3adb74bf121b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2742c3428633b6ceaab6714635dc3adb74bf121b/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eef90c14ed0f559e3f6e187341009270b84f45cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eef90c14ed0f559e3f6e187341009270b84f45cb"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 30,
      "deletions": 20
    },
    "files": [
      {
        "sha": "153a781b0a66230e646254af6933ec98716daa87",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2742c3428633b6ceaab6714635dc3adb74bf121b/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2742c3428633b6ceaab6714635dc3adb74bf121b/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=2742c3428633b6ceaab6714635dc3adb74bf121b",
        "patch": "@@ -13,7 +13,7 @@ export NO_DEPENDS=1\n if [[ \"${TRAVIS}\" == \"true\" && \"${TRAVIS_REPO_SLUG}\" != \"bitcoin/bitcoin\" ]]; then\n   export TEST_RUNNER_EXTRA=\"wallet_disable\"  # Only run wallet_disable as a smoke test to not hit the 50 min travis time limit\n else\n-  export TEST_RUNNER_EXTRA=\"--exclude rpc_bind\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n+  export TEST_RUNNER_EXTRA=\"--exclude rpc_bind --factor=2\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n fi\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no CC=clang CXX=clang++\"  # TODO enable GUI"
      },
      {
        "sha": "c17876fdc002d6f9fad3e9fdf2960315c3b821a6",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2742c3428633b6ceaab6714635dc3adb74bf121b",
        "patch": "@@ -117,8 +117,9 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net):\n+    def peer_connect(self, dstaddr, dstport, *, net, factor):\n         assert not self.is_connected\n+        self.factor = factor\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         # The initial message to send after the connection was made:\n@@ -364,9 +365,12 @@ def on_version(self, message):\n \n     # Connection helper methods\n \n+    def wait_until(self, test_function, timeout):\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock, factor=self.factor)\n+\n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.is_connected\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     # Message receiving helper methods\n \n@@ -377,14 +381,14 @@ def test_function():\n                 return False\n             return self.last_message['tx'].tx.rehash() == txid\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_block(self, blockhash, timeout=60):\n         def test_function():\n             assert self.is_connected\n             return self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_header(self, blockhash, timeout=60):\n         def test_function():\n@@ -394,7 +398,7 @@ def test_function():\n                 return False\n             return last_headers.headers[0].rehash() == int(blockhash, 16)\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_merkleblock(self, blockhash, timeout=60):\n         def test_function():\n@@ -404,7 +408,7 @@ def test_function():\n                 return False\n             return last_filtered_block.merkleblock.header.rehash() == int(blockhash, 16)\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_getdata(self, hash_list, timeout=60):\n         \"\"\"Waits for a getdata message.\n@@ -418,7 +422,7 @@ def test_function():\n                 return False\n             return [x.hash for x in last_data.inv] == hash_list\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_getheaders(self, timeout=60):\n         \"\"\"Waits for a getheaders message.\n@@ -432,7 +436,7 @@ def test_function():\n             assert self.is_connected\n             return self.last_message.get(\"getheaders\")\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_inv(self, expected_inv, timeout=60):\n         \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n@@ -445,13 +449,13 @@ def test_function():\n                                 self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n                                 self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     def wait_for_verack(self, timeout=60):\n         def test_function():\n             return self.message_count[\"verack\"]\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n \n     # Message sending helper functions\n \n@@ -467,7 +471,7 @@ def test_function():\n             assert self.is_connected\n             return self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.wait_until(test_function, timeout=timeout)\n         self.ping_counter += 1\n \n \n@@ -583,15 +587,15 @@ def send_blocks_and_test(self, blocks, node, *, success=True, force_send=False,\n                     self.send_message(msg_block(block=b))\n             else:\n                 self.send_message(msg_headers([CBlockHeader(block) for block in blocks]))\n-                wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+                self.wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout)\n \n             if expect_disconnect:\n                 self.wait_for_disconnect(timeout=timeout)\n             else:\n                 self.sync_with_ping(timeout=timeout)\n \n             if success:\n-                wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+                self.wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n             else:\n                 assert node.getbestblockhash() != blocks[-1].hash\n "
      },
      {
        "sha": "107836991ca035bb61b24526cd9bcc532225707f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=2742c3428633b6ceaab6714635dc3adb74bf121b",
        "patch": "@@ -101,6 +101,7 @@ def __init__(self):\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n         self.parse_args()\n+        self.rpc_timeout = int(self.rpc_timeout * self.options.factor) # optionally, increase timeout by a factor\n \n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n@@ -167,6 +168,7 @@ def parse_args(self):\n                             help=\"set a random seed for deterministically reproducing a previous test run\")\n         parser.add_argument(\"--descriptors\", default=False, action=\"store_true\",\n                             help=\"Run test using a descriptor wallet\")\n+        parser.add_argument('--factor', type=float, default=1.0, help='adjust test timeouts by a factor')\n         self.add_options(parser)\n         self.options = parser.parse_args()\n \n@@ -412,6 +414,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None, bi\n                 chain=self.chain,\n                 rpchost=rpchost,\n                 timewait=self.rpc_timeout,\n+                factor=self.options.factor,\n                 bitcoind=binary[i],\n                 bitcoin_cli=binary_cli[i],\n                 version=versions[i],\n@@ -558,6 +561,7 @@ def _initialize_chain(self):\n                     extra_args=['-disablewallet'],\n                     rpchost=None,\n                     timewait=self.rpc_timeout,\n+                    factor=self.options.factor,\n                     bitcoind=self.options.bitcoind,\n                     bitcoin_cli=self.options.bitcoincli,\n                     coverage_dir=None,"
      },
      {
        "sha": "e6ec3c1b2d64e349570f63a717595bcfd95decd9",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2742c3428633b6ceaab6714635dc3adb74bf121b",
        "patch": "@@ -62,7 +62,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n+    def __init__(self, i, datadir, *, chain, rpchost, timewait, factor, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -128,6 +128,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cl\n         self.perf_subprocesses = {}\n \n         self.p2ps = []\n+        self.factor = factor\n \n     AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n     PRIV_KEYS = [\n@@ -324,13 +325,13 @@ def is_node_stopped(self):\n         return True\n \n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n-        wait_until(self.is_node_stopped, timeout=timeout)\n+        wait_until(self.is_node_stopped, timeout=timeout, factor=self.factor)\n \n     @contextlib.contextmanager\n     def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n         if unexpected_msgs is None:\n             unexpected_msgs = []\n-        time_end = time.time() + timeout\n+        time_end = time.time() + timeout * self.factor\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n@@ -487,7 +488,7 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n \n-        p2p_conn.peer_connect(**kwargs, net=self.chain)()\n+        p2p_conn.peer_connect(**kwargs, net=self.chain, factor=self.factor)()\n         self.p2ps.append(p2p_conn)\n         if wait_for_verack:\n             # Wait for the node to send us the version and verack"
      },
      {
        "sha": "0b151d958a28c10dbfb5803276def3ac6a5c79b6",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2742c3428633b6ceaab6714635dc3adb74bf121b/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=2742c3428633b6ceaab6714635dc3adb74bf121b",
        "patch": "@@ -208,9 +208,10 @@ def str_to_b64str(string):\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n-def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None):\n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None, factor=1.0):\n     if attempts == float('inf') and timeout == float('inf'):\n         timeout = 60\n+    timeout = timeout * factor\n     attempt = 0\n     time_end = time.time() + timeout\n \n@@ -265,7 +266,7 @@ def get_rpc_proxy(url, node_number, *, timeout=None, coveragedir=None):\n     \"\"\"\n     proxy_kwargs = {}\n     if timeout is not None:\n-        proxy_kwargs['timeout'] = timeout\n+        proxy_kwargs['timeout'] = int(timeout)\n \n     proxy = AuthServiceProxy(url, **proxy_kwargs)\n     proxy.url = url  # store URL on proxy for info"
      }
    ]
  }
]