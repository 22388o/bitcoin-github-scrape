[
  {
    "sha": "6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzRmZWNmYWY3YmVlZmFkMGQxYzNmODUyMGJmNTBiYjUxNWEwNzE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T05:33:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T05:43:32Z"
      },
      "message": "Merge #11351: Refactor: Modernize disallowed copy constructors/assignment\n\n2a07f878a Refactor: Modernize disallowed copy constructors/assignment (Dan Raviv)\n\nPull request description:\n\n  Use C++11's better capability of expressing an interface of a non-copyable class by publicly deleting its copy ctor and assignment operator instead of just declaring them private.\n\nTree-SHA512: 878f446be5a136bb2a90643aaeaca62948b575e6ef71ccc5b4b8f373e66f36ced00665128f36504e0ccfee639863d969329c4276154ef9f2a9de9137f0801e01",
      "tree": {
        "sha": "710f596864a2dc5534bc725b94ceeef30c112258",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/710f596864a2dc5534bc725b94ceeef30c112258"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZxKMEAAoJEKY26XYx92fgvcsP/jjxoowCldTFUCADMuQOezDY\ni3UJGTVjImXKdaBDLs7FA1pzFa1x5X43Ko6vKEJQPA8bwBpEiKl07TLj0tOXWO81\nmLgd1+NLK8GjL3CcBQWuCs4cWUxFb8oL8kNvoRFC2P9UFxjtvkegXTvupgfVQgpG\nlQS/Yye1lp/Gqo95XS5sOAMAxqm3wgK6AgUcRV3djw9djPkGwe/9z9Pb3q2jTbXv\nQx6tdI+4cxrEu2c9xvrB8xqFDvWKh+E64csnYt4gUhIbt/PCBddQ48aMrgSPgCWv\nl+qp6ySWILDYwDlDPu8J5wqdHbl9raHy+ma9rEzntFhEUwTj8p1sz3El8FF5Sows\nI1VCiMryPXlSNgEynZ0X+Ug49DMTp23Yi1DIm/UBwQh6hccr18vL22XX2GG7DLYT\nqcYSFCfvjeZRdtFjHY17dZ85+yUJdlqJuEILjetYEqF1JKdkHbm+Wf2l+XqdH/d0\n/odPLUm6ZqT7zFhQ9uSrY7z32BhQCfrhrihUR6kNSPN0S2W8u3yIxavgNWXkzEfM\nv/w0X5GeLpVJDk7HkJYil0mk2r/2RfuACRRSEQCGgUMp1Y4RyQtlOaEP4VZXdJgI\nWkLFDnZQwJx4ydc9GqGICTf7yPt6dxTp4fXrGuK3iodiTV1Pw2Sf8zKFVXLjePpt\nSH/jJrz6efAlMH87dNL1\n=XMRT\n-----END PGP SIGNATURE-----",
        "payload": "tree 710f596864a2dc5534bc725b94ceeef30c112258\nparent 49f3d57eeb66370cb849edacc25744ac3d22a5e7\nparent 2a07f878a80003f2142d5052d015a9ac81a3a6bc\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1506058386 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1506059012 -0700\n\nMerge #11351: Refactor: Modernize disallowed copy constructors/assignment\n\n2a07f878a Refactor: Modernize disallowed copy constructors/assignment (Dan Raviv)\n\nPull request description:\n\n  Use C++11's better capability of expressing an interface of a non-copyable class by publicly deleting its copy ctor and assignment operator instead of just declaring them private.\n\nTree-SHA512: 878f446be5a136bb2a90643aaeaca62948b575e6ef71ccc5b4b8f373e66f36ced00665128f36504e0ccfee639863d969329c4276154ef9f2a9de9137f0801e01\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49f3d57eeb66370cb849edacc25744ac3d22a5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49f3d57eeb66370cb849edacc25744ac3d22a5e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49f3d57eeb66370cb849edacc25744ac3d22a5e7"
      },
      {
        "sha": "2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a07f878a80003f2142d5052d015a9ac81a3a6bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a07f878a80003f2142d5052d015a9ac81a3a6bc"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 30,
      "deletions": 34
    },
    "files": [
      {
        "sha": "181b2fd4b9798614a486ef24e3e8f89520f7b2f6",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -214,6 +214,11 @@ class CCoinsViewCache : public CCoinsViewBacked\n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n \n+    /**\n+     * By deleting the copy constructor, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n+     */\n+    CCoinsViewCache(const CCoinsViewCache &) = delete;\n+\n     // Standard CCoinsView methods\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n@@ -290,11 +295,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n private:\n     CCoinsMap::iterator FetchCoin(const COutPoint &outpoint) const;\n-\n-    /**\n-     * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n-     */\n-    CCoinsViewCache(const CCoinsViewCache &);\n };\n \n //! Utility function to add all of a transaction's outputs to a cache."
      },
      {
        "sha": "cfc383ced5d9bbe92a0adcc1d70075c8980ee48f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -702,13 +702,11 @@ class CNode\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n+    CNode(const CNode&) = delete;\n+    CNode& operator=(const CNode&) = delete;\n \n private:\n-    CNode(const CNode&);\n-    void operator=(const CNode&);\n     const NodeId id;\n-\n-\n     const uint64_t nLocalHostNonce;\n     // Services offered to this peer\n     const ServiceFlags nLocalServices;"
      },
      {
        "sha": "9a3badea57848090219d5048312c2af2afc7542f",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -455,10 +455,6 @@ class CDataStream\n class CAutoFile\n {\n private:\n-    // Disallow copies\n-    CAutoFile(const CAutoFile&);\n-    CAutoFile& operator=(const CAutoFile&);\n-\n     const int nType;\n     const int nVersion;\n \n@@ -475,6 +471,10 @@ class CAutoFile\n         fclose();\n     }\n \n+    // Disallow copies\n+    CAutoFile(const CAutoFile&) = delete;\n+    CAutoFile& operator=(const CAutoFile&) = delete;\n+\n     void fclose()\n     {\n         if (file) {\n@@ -564,10 +564,6 @@ class CAutoFile\n class CBufferedFile\n {\n private:\n-    // Disallow copies\n-    CBufferedFile(const CBufferedFile&);\n-    CBufferedFile& operator=(const CBufferedFile&);\n-\n     const int nType;\n     const int nVersion;\n \n@@ -609,6 +605,10 @@ class CBufferedFile\n         fclose();\n     }\n \n+    // Disallow copies\n+    CBufferedFile(const CBufferedFile&) = delete;\n+    CBufferedFile& operator=(const CBufferedFile&) = delete;\n+\n     int GetVersion() const { return nVersion; }\n     int GetType() const { return nType; }\n "
      },
      {
        "sha": "834f0371e2db5e419a1cc9ec5fb4a55d94273943",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -50,6 +50,9 @@ class Arena\n     Arena(void *base, size_t size, size_t alignment);\n     virtual ~Arena();\n \n+    Arena(const Arena& other) = delete; // non construction-copyable\n+    Arena& operator=(const Arena&) = delete; // non copyable\n+\n     /** Memory statistics. */\n     struct Stats\n     {\n@@ -85,9 +88,6 @@ class Arena\n      */\n     bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }\n private:\n-    Arena(const Arena& other) = delete; // non construction-copyable\n-    Arena& operator=(const Arena&) = delete; // non copyable\n-\n     /** Map of chunk address to chunk information. This class makes use of the\n      * sorted order to merge previous and next chunks during deallocation.\n      */\n@@ -153,6 +153,9 @@ class LockedPool\n     explicit LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = nullptr);\n     ~LockedPool();\n \n+    LockedPool(const LockedPool& other) = delete; // non construction-copyable\n+    LockedPool& operator=(const LockedPool&) = delete; // non copyable\n+\n     /** Allocate size bytes from this arena.\n      * Returns pointer on success, or 0 if memory is full or\n      * the application tried to allocate 0 bytes.\n@@ -168,9 +171,6 @@ class LockedPool\n     /** Get pool usage statistics */\n     Stats stats() const;\n private:\n-    LockedPool(const LockedPool& other) = delete; // non construction-copyable\n-    LockedPool& operator=(const LockedPool&) = delete; // non copyable\n-\n     std::unique_ptr<LockedPageAllocator> allocator;\n \n     /** Create an arena from locked pages */"
      },
      {
        "sha": "c254ba91c88bc3e057f28d5cba05733d413910dc",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -110,10 +110,10 @@ class CBlockTreeDB : public CDBWrapper\n {\n public:\n     explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n-private:\n-    CBlockTreeDB(const CBlockTreeDB&);\n-    void operator=(const CBlockTreeDB&);\n-public:\n+\n+    CBlockTreeDB(const CBlockTreeDB&) = delete;\n+    CBlockTreeDB& operator=(const CBlockTreeDB&) = delete;\n+\n     bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &fileinfo);\n     bool ReadLastBlockFile(int &nFile);"
      },
      {
        "sha": "14283ac8f8f18150fde7f0f8d67b296a7a92fbb4",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -156,6 +156,9 @@ class CDB\n     explicit CDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n+    CDB(const CDB&) = delete;\n+    CDB& operator=(const CDB&) = delete;\n+\n     void Flush();\n     void Close();\n     static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n@@ -168,10 +171,6 @@ class CDB\n     /* verifies the database file */\n     static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n-private:\n-    CDB(const CDB&);\n-    void operator=(const CDB&);\n-\n public:\n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "3a146179afb21e5519c2b6a8bf0fe4509af70ae7",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -167,6 +167,8 @@ class CWalletDB\n         m_dbw(dbw)\n     {\n     }\n+    CWalletDB(const CWalletDB&) = delete;\n+    CWalletDB& operator=(const CWalletDB&) = delete;\n \n     bool WriteName(const std::string& strAddress, const std::string& strName);\n     bool EraseName(const std::string& strAddress);\n@@ -244,9 +246,6 @@ class CWalletDB\n private:\n     CDB batch;\n     CWalletDBWrapper& m_dbw;\n-\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n };\n \n //! Compacts BDB state so that wallet.dat is self-contained (if there are changes)"
      }
    ]
  },
  {
    "sha": "3a131b72446724b2d6322930d92348065f1c1891",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTEzMWI3MjQ0NjcyNGIyZDYzMjI5MzBkOTIzNDgwNjVmMWMxODkx",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-22T06:27:03Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-22T06:27:03Z"
      },
      "message": "Rename out to m_tx_out in CScriptCheck",
      "tree": {
        "sha": "0698d945e1ea75ae4ee2874699010f277d4cbc33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0698d945e1ea75ae4ee2874699010f277d4cbc33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a131b72446724b2d6322930d92348065f1c1891",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a131b72446724b2d6322930d92348065f1c1891",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a131b72446724b2d6322930d92348065f1c1891",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a131b72446724b2d6322930d92348065f1c1891/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e912118786f867d6821e2c1a2e4e1d4937fefd85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e912118786f867d6821e2c1a2e4e1d4937fefd85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e912118786f867d6821e2c1a2e4e1d4937fefd85"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1d6454e1aec276e7406cac01407fa525b88c9255",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a131b72446724b2d6322930d92348065f1c1891/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a131b72446724b2d6322930d92348065f1c1891/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a131b72446724b2d6322930d92348065f1c1891",
        "patch": "@@ -1202,7 +1202,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n-    return VerifyScript(scriptSig, out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, out.nValue, cacheStore, *txdata), &error);\n+    return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n }\n \n int GetSpendHeight(const CCoinsViewCache& inputs)"
      },
      {
        "sha": "9cd9fe536bb99ef317fabcbcb80a73092f065a9c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a131b72446724b2d6322930d92348065f1c1891/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a131b72446724b2d6322930d92348065f1c1891/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3a131b72446724b2d6322930d92348065f1c1891",
        "patch": "@@ -355,7 +355,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = null\n class CScriptCheck\n {\n private:\n-    CTxOut out;\n+    CTxOut m_tx_out;\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n@@ -366,13 +366,13 @@ class CScriptCheck\n public:\n     CScriptCheck(): ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n     CScriptCheck(const CTxOut& outIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n-        out(outIn), ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n+        m_tx_out(outIn), ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n \n     bool operator()();\n \n     void swap(CScriptCheck &check) {\n         std::swap(ptxTo, check.ptxTo);\n-        std::swap(out, check.out);\n+        std::swap(m_tx_out, check.m_tx_out);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);"
      }
    ]
  },
  {
    "sha": "46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM5MDQzN2Y5ZWZiYWJjYjVjODEwY2Q4MmIwMGE5ZTVkMWM1Y2Q3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T06:40:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T06:40:33Z"
      },
      "message": "Remove some unused functions and methods\n\nIn the case of CKey's destructor, it seems to have been an oversight in\nf4d1fc259 not to delete it. At this point, it results in the move\nconstructors/assignment operators for CKey being deleted, which may have\na performance impact.",
      "tree": {
        "sha": "ce0cc0a235e4b2f432f56ecd131f7e346942a166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce0cc0a235e4b2f432f56ecd131f7e346942a166"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 0,
      "deletions": 21
    },
    "files": [
      {
        "sha": "474b13d65b50b444d89a5b9beafb71f39870ac6d",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
        "patch": "@@ -88,20 +88,6 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n     return result;\n }\n \n-/** Compute the 256-bit hash of the concatenation of three objects. */\n-template<typename T1, typename T2, typename T3>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end,\n-                    const T3 p3begin, const T3 p3end) {\n-    static const unsigned char pblank[1] = {};\n-    uint256 result;\n-    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n-              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n-              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n-              .Finalize((unsigned char*)&result);\n-    return result;\n-}\n-\n /** Compute the 160-bit hash an object. */\n template<typename T1>\n inline uint160 Hash160(const T1 pbegin, const T1 pend)"
      },
      {
        "sha": "54b5be2270f62eeac1077f0ecc7a82d6556c72cb",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
        "patch": "@@ -56,11 +56,6 @@ class CKey\n         keydata.resize(32);\n     }\n \n-    //! Destructor (again necessary because of memlocking).\n-    ~CKey()\n-    {\n-    }\n-\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&"
      },
      {
        "sha": "94a4f7fc30d9a09a3e09cf3f565ed6da06e4f6ad",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
        "patch": "@@ -111,7 +111,6 @@ class base_blob\n class uint160 : public base_blob<160> {\n public:\n     uint160() {}\n-    explicit uint160(const base_blob<160>& b) : base_blob<160>(b) {}\n     explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n };\n \n@@ -123,7 +122,6 @@ class uint160 : public base_blob<160> {\n class uint256 : public base_blob<256> {\n public:\n     uint256() {}\n-    explicit uint256(const base_blob<256>& b) : base_blob<256>(b) {}\n     explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n \n     /** A cheap hash function that just returns 64 bits from the result, it can be"
      }
    ]
  },
  {
    "sha": "390771be62760492a8c902443d2feb268c76b2c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTA3NzFiZTYyNzYwNDkyYThjOTAyNDQzZDJmZWIyNjhjNzZiMmM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-22T11:31:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-22T11:31:43Z"
      },
      "message": "Merge #11380: Remove outdated share/certs/ directory\n\n6951a1c Remove extremely outdated share/certs dir (MeshCollider)\n\nPull request description:\n\n  The directory hasn't been touched for 5 years (other than a couple of typo fixes/renaming). The certificates are expired, the build process notes are out of date, especially with the gitian building and everything, Gavin no longer has anything to do with it, etc.\n\n  The signing process is all documented (and scripted) elsewhere (e.g. doc/release-process.md and gitian-building.md, contrib/macdeploy and windeploy), this can just be removed\n\n  @theuni can confirm if this is okay, we discussed it on IRC for a bit :)\n\nTree-SHA512: e229785f7514a0f9988105f2ce68531a0a876032983ee5c77f41f1a976b9e732eb63cf2eb1f82841df8f7194940635c5ea5d4f8b30f95e69c763f74d4a3a28b1",
      "tree": {
        "sha": "cb29230715857c7e6df97cea11014df1f0e6b2da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb29230715857c7e6df97cea11014df1f0e6b2da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/390771be62760492a8c902443d2feb268c76b2c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZxPSfAAoJEB5K7WKYbNJdmz8H/R9dKasayzw75JaEmPHN9Z/C\nSF+H4UEf659WtSKDyETHm77RFMhjOVzYFcz8BmMEF4g+M6Vn42ZQcUvJuxPiRSkb\nEnkepNkVhQyuKKp/A8/Snjdr/ePdHL35DMlt8ibT5UEx8JpuC+ootX6VOZK3ktQi\nzzELwXmFaSNUwXjGZ0TV4qh0+P3H2aS6LC75BFdLcR+OcaHqu92OT/1cqAwv+Yoq\nq8chxLbyKtfxIMuykier9T476UglXRDSprtVv/HptvgZDFJ4addnXfhAzeg7BXdd\nXmxx7M6I+ULswl6j4xlL087lMZaRKKo12c18AYstd+ya2n+jYPM6TEtwktevps4=\n=af+t\n-----END PGP SIGNATURE-----",
        "payload": "tree cb29230715857c7e6df97cea11014df1f0e6b2da\nparent 6c4fecfaf7beefad0d1c3f8520bf50bb515a0716\nparent 6951a1c6758ab642ef99f93c8d6a43f1b72214cb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506079882 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506079903 +0200\n\nMerge #11380: Remove outdated share/certs/ directory\n\n6951a1c Remove extremely outdated share/certs dir (MeshCollider)\n\nPull request description:\n\n  The directory hasn't been touched for 5 years (other than a couple of typo fixes/renaming). The certificates are expired, the build process notes are out of date, especially with the gitian building and everything, Gavin no longer has anything to do with it, etc.\n\n  The signing process is all documented (and scripted) elsewhere (e.g. doc/release-process.md and gitian-building.md, contrib/macdeploy and windeploy), this can just be removed\n\n  @theuni can confirm if this is okay, we discussed it on IRC for a bit :)\n\nTree-SHA512: e229785f7514a0f9988105f2ce68531a0a876032983ee5c77f41f1a976b9e732eb63cf2eb1f82841df8f7194940635c5ea5d4f8b30f95e69c763f74d4a3a28b1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390771be62760492a8c902443d2feb268c76b2c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/390771be62760492a8c902443d2feb268c76b2c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390771be62760492a8c902443d2feb268c76b2c8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716"
      },
      {
        "sha": "6951a1c6758ab642ef99f93c8d6a43f1b72214cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6951a1c6758ab642ef99f93c8d6a43f1b72214cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6951a1c6758ab642ef99f93c8d6a43f1b72214cb"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 0,
      "deletions": 120
    },
    "files": [
      {
        "sha": "beb0d7073c0d27596dce49fe58aa2b05307bea7f",
        "filename": "share/certs/BitcoinFoundation_Apple_Cert.pem",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/share/certs/BitcoinFoundation_Apple_Cert.pem",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/share/certs/BitcoinFoundation_Apple_Cert.pem",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/BitcoinFoundation_Apple_Cert.pem?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -1,37 +0,0 @@\n-Bag Attributes\n-    friendlyName: Developer ID Application: BITCOIN FOUNDATION, INC., THE\n-    localKeyID: 6B 9C 6C A8 A5 73 70 70 E2 57 A3 49 D8 62 FB 97 C7 A5 5D 5E \n-subject=/UID=PBV4GLS9J4/CN=Developer ID Application: BITCOIN FOUNDATION, INC., THE/OU=PBV4GLS9J4/O=BITCOIN FOUNDATION, INC., THE/C=US\n-issuer=/CN=Developer ID Certification Authority/OU=Apple Certification Authority/O=Apple Inc./C=US\n------BEGIN CERTIFICATE-----\n-MIIFhzCCBG+gAwIBAgIIJ0r1rumyfZAwDQYJKoZIhvcNAQELBQAweTEtMCsGA1UE\n-AwwkRGV2ZWxvcGVyIElEIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MSYwJAYDVQQL\n-DB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUg\n-SW5jLjELMAkGA1UEBhMCVVMwHhcNMTMwMTEwMjIzOTAxWhcNMTgwMTExMjIzOTAx\n-WjCBqDEaMBgGCgmSJomT8ixkAQEMClBCVjRHTFM5SjQxQDA+BgNVBAMMN0RldmVs\n-b3BlciBJRCBBcHBsaWNhdGlvbjogQklUQ09JTiBGT1VOREFUSU9OLCBJTkMuLCBU\n-SEUxEzARBgNVBAsMClBCVjRHTFM5SjQxJjAkBgNVBAoMHUJJVENPSU4gRk9VTkRB\n-VElPTiwgSU5DLiwgVEhFMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEBBQAD\n-ggEPADCCAQoCggEBALTd5zURuZVoJviusr119aktXksenb9IN9vq6kBbq38vxEk7\n-9wkKMES2XfBRh0HxcEizGzhMNy5OCXuTLMaNMihYdfwYSoBoR2foEU+6kjPUnyJ4\n-dQBFLJZJr5/QeQmALmYHEgZ6lwXFD2lU8t92340zeJ4y5LZw5pcEHtH9IummYDut\n-OGCkCGXDcjL+5nHhNScJiXHhswM+62o6XXsQiP6EWbM1CsgrGTNLtaa0U/UvVDwE\n-79YKklSC5Bog2LD0jBcTuveI66mFzqu++L9X9u+ZArtebwCl7BPNQ+uboYy5uV2d\n-zf8lpNNZLfXCFjoLe9bLICKfZ7ub9V5aC8+GhckCAwEAAaOCAeEwggHdMD4GCCsG\n-AQUFBwEBBDIwMDAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuYXBwbGUuY29tL29j\n-c3AtZGV2aWQwMTAdBgNVHQ4EFgQUa5xsqKVzcHDiV6NJ2GL7l8elXV4wDAYDVR0T\n-AQH/BAIwADAfBgNVHSMEGDAWgBRXF+2iz9x8mKEQ4Py+hy0s8uMXVDCCAQ4GA1Ud\n-IASCAQUwggEBMIH+BgkqhkiG92NkBQEwgfAwKAYIKwYBBQUHAgEWHGh0dHA6Ly93\n-d3cuYXBwbGUuY29tL2FwcGxlY2EwgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ug\n-b24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRh\n-bmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNv\n-bmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmlj\n-YXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wDgYDVR0PAQH/BAQDAgeAMBYGA1Ud\n-JQEB/wQMMAoGCCsGAQUFBwMDMBMGCiqGSIb3Y2QGAQ0BAf8EAgUAMA0GCSqGSIb3\n-DQEBCwUAA4IBAQAfJ0BjID/1dS2aEeVyhAzPzCBjG8vm0gDf+/qfwRn3+yWeL9vS\n-nMdbilwM48IyQWTagjGGcojbsAd/vE4N7NhQyHInoCllNoeor1I5xx+blTaGRBK+\n-dDhJbbdlGCjsLnH/BczGZi5fyEJds9lUIrp1hJidRcUKO76qb/9gc6qNZpl1vH5k\n-lDUuJYt7YhAs+L6rTXDyqcK9maeQr0gaOPsRRAQLLwiQCorPeMTUNsbVMdMwZYJs\n-R+PxiAnk+nyi7rfiFvPoASAYUuI6OzYL/Fa6QU4/gYyPgic944QYVkaQBnc0vEP1\n-nXq6LGKwgVGcqJnkr/E2kui5gJoV5C3qll3e\n------END CERTIFICATE-----"
      },
      {
        "sha": "dc752d455c911113eac90c4a601925ce6dd59f5f",
        "filename": "share/certs/BitcoinFoundation_Comodo_Cert.pem",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/share/certs/BitcoinFoundation_Comodo_Cert.pem",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/share/certs/BitcoinFoundation_Comodo_Cert.pem",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/BitcoinFoundation_Comodo_Cert.pem?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -1,37 +0,0 @@\n-Bag Attributes\n-    friendlyName: The Bitcoin Foundation, Inc.'s COMODO CA Limited ID\n-    localKeyID: 8C 94 64 E3 B5 B0 41 89 5B 89 B0 57 CC 74 B9 44 E5 B2 92 66 \n-subject=/C=US/postalCode=98104-1444/ST=WA/L=Seattle/street=Suite 300/street=71 Columbia St/O=The Bitcoin Foundation, Inc./CN=The Bitcoin Foundation, Inc.\n-issuer=/C=GB/ST=Greater Manchester/L=Salford/O=COMODO CA Limited/CN=COMODO Code Signing CA 2\n------BEGIN CERTIFICATE-----\n-MIIFeDCCBGCgAwIBAgIRAJVYMd+waOER7lUqtiz3M2IwDQYJKoZIhvcNAQEFBQAw\n-ezELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxITAfBgNV\n-BAMTGENPTU9ETyBDb2RlIFNpZ25pbmcgQ0EgMjAeFw0xMzAxMTYwMDAwMDBaFw0x\n-NDAxMTYyMzU5NTlaMIG8MQswCQYDVQQGEwJVUzETMBEGA1UEEQwKOTgxMDQtMTQ0\n-NDELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0bGUxEjAQBgNVBAkMCVN1aXRl\n-IDMwMDEXMBUGA1UECQwONzEgQ29sdW1iaWEgU3QxJTAjBgNVBAoMHFRoZSBCaXRj\n-b2luIEZvdW5kYXRpb24sIEluYy4xJTAjBgNVBAMMHFRoZSBCaXRjb2luIEZvdW5k\n-YXRpb24sIEluYy4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQChUwLD\n-u/hu5aFZ/n11B27awONaaDrmHm0pamiWHb01yL4JmTBtaLCrSftF8RhCscQ8jpI0\n-UG1Cchmay0e3zH5o5XRs0H9C3x+SM5ozms0TWDmAYiB8aQEghsGovDk0D2nyTQeK\n-Q0xqyCh0m8ZPOnMnYrakHEmF6WvhLdJvI6Od4KIwbKxgN17cPFIfLVsZ7GrzmmbU\n-Gdi4wSQCHy5rxzvBxho8Qq/SfBl93uOMUrqOHjOUAPhNuTJG3t/MdhU8Zp24s29M\n-abHtYkT9W86hMjIiI8RTAR+WHKVglx9SB0cjDabXN8SZ3gME0+H++LyzlySHT8sI\n-ykepojZ7UBRgp9w3AgMBAAGjggGzMIIBrzAfBgNVHSMEGDAWgBQexbEsfYfaAmh8\n-JbwMB4Q/ts/e8TAdBgNVHQ4EFgQUfPf+ZyDWl/4LH0Y5BuJTelkRd/EwDgYDVR0P\n-AQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwMwEQYJ\n-YIZIAYb4QgEBBAQDAgQQMEYGA1UdIAQ/MD0wOwYMKwYBBAGyMQECAQMCMCswKQYI\n-KwYBBQUHAgEWHWh0dHBzOi8vc2VjdXJlLmNvbW9kby5uZXQvQ1BTMEEGA1UdHwQ6\n-MDgwNqA0oDKGMGh0dHA6Ly9jcmwuY29tb2RvY2EuY29tL0NPTU9ET0NvZGVTaWdu\n-aW5nQ0EyLmNybDByBggrBgEFBQcBAQRmMGQwPAYIKwYBBQUHMAKGMGh0dHA6Ly9j\n-cnQuY29tb2RvY2EuY29tL0NPTU9ET0NvZGVTaWduaW5nQ0EyLmNydDAkBggrBgEF\n-BQcwAYYYaHR0cDovL29jc3AuY29tb2RvY2EuY29tMCgGA1UdEQQhMB+BHWxpbmRz\n-YXlAYml0Y29pbmZvdW5kYXRpb24ub3JnMA0GCSqGSIb3DQEBBQUAA4IBAQAqibjo\n-D4HG5XSIIMCmYE5RgQBSEAJfI+EZERk1G9F83ZUWr0yNRZCw4O+RaM7xQhvJhEoD\n-G2kpk/q2bNOc71/VyZ6SrE1JRVUON41/Flhz4M6cP0BclTicXvh+efVwqZhIz+ws\n-UxF2hvC/1Xx6rqI7NYAlOYXk2MSUq3HREo+gWUPKM8em4MZZV/7XCH4QbsfxOl1J\n-xS6EOQmV8hfUN4KRXI5WfGUmedBxq7dM0RSJOSQl8fq2f+JjRLfjQwQucy7LDY+y\n-pRTsL2TdQV/DuDuI3s0NHRGznQNddoX5jqpXhSQFAAdgrhN1gGkWaaTPzr9IF2TG\n-qgr6PEp9tIYC+MbM\n------END CERTIFICATE-----"
      },
      {
        "sha": "8d50144c21f9bd3726b9b12e09e8c3ff44d6e595",
        "filename": "share/certs/PrivateKeyNotes.md",
        "status": "removed",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/share/certs/PrivateKeyNotes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4fecfaf7beefad0d1c3f8520bf50bb515a0716/share/certs/PrivateKeyNotes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/PrivateKeyNotes.md?ref=6c4fecfaf7beefad0d1c3f8520bf50bb515a0716",
        "patch": "@@ -1,46 +0,0 @@\n-Code-signing private key notes\n-==\n-\n-The private keys for these certificates were generated on Gavin's main work machine,\n-following the certificate authority's recommendations for generating certificate\n-signing requests.\n-\n-For OSX, the private key was generated by Keychain.app on Gavin's main work machine.\n-The key and certificate is in a separate, passphrase-protected keychain file that is\n-unlocked to sign the Bitcoin-Qt.app bundle.\n-\n-For Windows, the private key was generated by Firefox running on Gavin's main work machine.\n-The key and certificate were exported into a separate, passphrase-protected PKCS#12 file, and\n-then deleted from Firefox's keystore. The exported file is used to sign the Windows setup.exe.\n-\n-Threat analysis\n---\n-\n-Gavin is a single point of failure. He could be coerced to divulge the secret signing keys,\n-allowing somebody to distribute a Bitcoin-Qt.app or bitcoin-qt-setup.exe with a valid\n-signature but containing a malicious binary.\n-\n-Or the machine Gavin uses to sign the binaries could be compromised, either remotely or\n-by breaking in to his office, allowing the attacker to get the private key files and then\n-install a keylogger to get the passphrase that protects them.\n-\n-Threat Mitigation\n---\n-\n-\"Air gapping\" the machine used to do the signing will not work, because the signing\n-process needs to access a timestamp server over the network. And it would not\n-prevent the \"rubber hose cryptography\" threat (coercing Gavin to sign a bad binary\n-or divulge the private keys).\n-\n-Windows binaries are reproducibly 'gitian-built', and the setup.exe file created\n-by the NSIS installer system is a 7zip archive, so you could check to make sure\n-that the bitcoin-qt.exe file inside the installer had not been tampered with.\n-However, an attacker could modify the installer's code, so when the setup.exe\n-was run it compromised users' systems. A volunteer to write an auditing tool\n-that checks the setup.exe for tampering, and checks the files in it against\n-the list of gitian signatures, is needed.\n-\n-The long-term solution is something like the 'gitian downloader' system, which\n-uses signatures from multiple developers to determine whether or not a binary\n-should be trusted. However, that just pushes the problem to \"how will\n-non-technical users securely get the gitian downloader code to start?\""
      }
    ]
  },
  {
    "sha": "94c9015bca861085f76ca3c045e17d0591aa6c8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGM5MDE1YmNhODYxMDg1Zjc2Y2EzYzA0NWUxN2QwNTkxYWE2Yzhi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-22T11:33:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-22T11:33:41Z"
      },
      "message": "Merge #11385: Remove some unused functions and methods\n\n46c9043 Remove some unused functions and methods (Pieter Wuille)\n\nPull request description:\n\n  In the case of CKey's destructor, it seems to have been an oversight in #8753 not to delete it. At this point, it results in the move constructors/assignment operators for CKey being deleted, which may have\n  a performance impact (requiring a pool allocation/copy/free, rather than just handing over the pointer from one CKey to another)\n\nTree-SHA512: 89715bafe3e0bea2c46fc92bc6a1010360a3fee2719f97b81ca379581003409b0876b50f992208a3c13c7f5b77f1866db09954e7d102f6a452fe5d7aed2044a1",
      "tree": {
        "sha": "0e72443c381734a1a0290aec91840d338228d365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e72443c381734a1a0290aec91840d338228d365"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZxPUVAAoJEB5K7WKYbNJdO+AIAK5M6Q2yVPL/nWlai83Ye3MH\ndNjqNXNPJD9aFXNyR9/nlRkIJv90roz+0NfNjkslQXPSo3fj3D9HHDnBkmrLAj6y\niMc+QeOh9OwmqGHK1/LIx+OpmegK9M268Tg0H7R4yo3WLjI26doB4lEYWHGl/yi8\nQZojFg+/e+ZcN3xLrQCAr37blLwijEKWok5w0tlhCUwkDHrPIcjtflp3hpyQI9Vm\n28JD0dNhCpEnuBRyalu78SYYcwLWRAFVVJBkKdL39Jmu/hybzAUYXA0oRpOjodER\nVj9kNRmhQbKNTaDGUR4h0s5sjV092dwcbNnmzweLnJb5QTY2VLNfes9Z215tTIE=\n=/G4q\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e72443c381734a1a0290aec91840d338228d365\nparent 390771be62760492a8c902443d2feb268c76b2c8\nparent 46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506080012 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506080021 +0200\n\nMerge #11385: Remove some unused functions and methods\n\n46c9043 Remove some unused functions and methods (Pieter Wuille)\n\nPull request description:\n\n  In the case of CKey's destructor, it seems to have been an oversight in #8753 not to delete it. At this point, it results in the move constructors/assignment operators for CKey being deleted, which may have\n  a performance impact (requiring a pool allocation/copy/free, rather than just handing over the pointer from one CKey to another)\n\nTree-SHA512: 89715bafe3e0bea2c46fc92bc6a1010360a3fee2719f97b81ca379581003409b0876b50f992208a3c13c7f5b77f1866db09954e7d102f6a452fe5d7aed2044a1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94c9015bca861085f76ca3c045e17d0591aa6c8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "390771be62760492a8c902443d2feb268c76b2c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390771be62760492a8c902443d2feb268c76b2c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/390771be62760492a8c902443d2feb268c76b2c8"
      },
      {
        "sha": "46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46c90437f9efbabcb5c810cd82b00a9e5d1c5cd7"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 0,
      "deletions": 21
    },
    "files": [
      {
        "sha": "474b13d65b50b444d89a5b9beafb71f39870ac6d",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c9015bca861085f76ca3c045e17d0591aa6c8b/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c9015bca861085f76ca3c045e17d0591aa6c8b/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "patch": "@@ -88,20 +88,6 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n     return result;\n }\n \n-/** Compute the 256-bit hash of the concatenation of three objects. */\n-template<typename T1, typename T2, typename T3>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end,\n-                    const T3 p3begin, const T3 p3end) {\n-    static const unsigned char pblank[1] = {};\n-    uint256 result;\n-    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n-              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n-              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n-              .Finalize((unsigned char*)&result);\n-    return result;\n-}\n-\n /** Compute the 160-bit hash an object. */\n template<typename T1>\n inline uint160 Hash160(const T1 pbegin, const T1 pend)"
      },
      {
        "sha": "54b5be2270f62eeac1077f0ecc7a82d6556c72cb",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c9015bca861085f76ca3c045e17d0591aa6c8b/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c9015bca861085f76ca3c045e17d0591aa6c8b/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "patch": "@@ -56,11 +56,6 @@ class CKey\n         keydata.resize(32);\n     }\n \n-    //! Destructor (again necessary because of memlocking).\n-    ~CKey()\n-    {\n-    }\n-\n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&"
      },
      {
        "sha": "94a4f7fc30d9a09a3e09cf3f565ed6da06e4f6ad",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c9015bca861085f76ca3c045e17d0591aa6c8b/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c9015bca861085f76ca3c045e17d0591aa6c8b/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "patch": "@@ -111,7 +111,6 @@ class base_blob\n class uint160 : public base_blob<160> {\n public:\n     uint160() {}\n-    explicit uint160(const base_blob<160>& b) : base_blob<160>(b) {}\n     explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n };\n \n@@ -123,7 +122,6 @@ class uint160 : public base_blob<160> {\n class uint256 : public base_blob<256> {\n public:\n     uint256() {}\n-    explicit uint256(const base_blob<256>& b) : base_blob<256>(b) {}\n     explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n \n     /** A cheap hash function that just returns 64 bits from the result, it can be"
      }
    ]
  },
  {
    "sha": "877678710800a4d78afc12519424f232f1a583d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Nzc2Nzg3MTA4MDBhNGQ3OGFmYzEyNTE5NDI0ZjIzMmYxYTU4M2Qz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T21:58:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T23:05:50Z"
      },
      "message": "Merge #11301: add m_added_nodes to connman options\n\n35e5c2269 remove unused IsArgSet check (Marko Bencun)\n605918272 add m_added_nodes to connman options (Marko Bencun)\n\nPull request description:\n\nTree-SHA512: ca4527a964dcda816b32d335e7fe4d0d8a668a83fbc5e4707ee452d00a7089fa59a88c9f2b1ecdf50e673f2a63fc364b23979e0153f91136525eceec10c2ede2",
      "tree": {
        "sha": "fb6f257e6a3083955d6de44e423b4f2ef33979ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb6f257e6a3083955d6de44e423b4f2ef33979ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/877678710800a4d78afc12519424f232f1a583d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZxZdOAAoJEKY26XYx92fgl4IP/23m7x981Nzg8hzKamfNU8RX\nESCWMP/ro7roJM4flH7XtKfbwsgIgjhzPpB94kStY879XXXcktfjZcsoXqJAsSg3\nq36ZuHd2TvoEeMMmFcGUpmntO3OOL1cBa3rEIBrwP/v7ytC8FFOLPF4emdFBf666\na4QgcGTfJsotGzBqa2IuP2FjTfg8zSbH542/CRADKjwUCuqrpnwvY7pnvwdMsuwf\nFUDiNlVRc3TlmG84r4I1fIYV6b7YtNg6tBX3NBpTETdxdEa8Jr3GHL6iJkXGkQ/T\nBRbosrtoiju2HvIkh9kYFsdL4mRkuoDJsfIyQLTCx4d6/sTjPMLN/yq1y1pizk9d\n+N1zm6no4XY5BZVQ+cPXpPn+y3oG+XJ4GVQZhJVpkCYR06S2YkN4WpiFKI4n7n69\n2I+pcpux0uIwpQcfoJ2PK6pF0S6G9PJzliuzuIYFbezkvqBZq77NiM6Bur7B8yBa\nIryYqlaxnePzZS/Ic51xdXLZHOBnHiESL+suBGPKH+HKu/PcOyaM236v4L2fb+hF\n9MYRLyW+SJBZOU0aAqL7InwK0NitNu87GRrs0ebArtCa5kV+yCYvbuWql4yuICUg\nwTIBEMbiuXNu74bHNbfbQxSg8kLBiuFXG10Md2kYk57QJVI8wOgWierRtlmxuQD5\nNJAaMk4ApH/sOcWLbg5A\n=bWzZ\n-----END PGP SIGNATURE-----",
        "payload": "tree fb6f257e6a3083955d6de44e423b4f2ef33979ca\nparent 94c9015bca861085f76ca3c045e17d0591aa6c8b\nparent 35e5c2269c9a9dc71e4141d15837683d5b3363a1\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1506117532 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1506121550 -0700\n\nMerge #11301: add m_added_nodes to connman options\n\n35e5c2269 remove unused IsArgSet check (Marko Bencun)\n605918272 add m_added_nodes to connman options (Marko Bencun)\n\nPull request description:\n\nTree-SHA512: ca4527a964dcda816b32d335e7fe4d0d8a668a83fbc5e4707ee452d00a7089fa59a88c9f2b1ecdf50e673f2a63fc364b23979e0153f91136525eceec10c2ede2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877678710800a4d78afc12519424f232f1a583d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/877678710800a4d78afc12519424f232f1a583d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877678710800a4d78afc12519424f232f1a583d3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c9015bca861085f76ca3c045e17d0591aa6c8b"
      },
      {
        "sha": "35e5c2269c9a9dc71e4141d15837683d5b3363a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35e5c2269c9a9dc71e4141d15837683d5b3363a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35e5c2269c9a9dc71e4141d15837683d5b3363a1"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e80170b24dfe35c87216c44da79bc4c711e25feb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877678710800a4d78afc12519424f232f1a583d3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877678710800a4d78afc12519424f232f1a583d3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=877678710800a4d78afc12519424f232f1a583d3",
        "patch": "@@ -1664,6 +1664,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.m_msgproc = peerLogic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.m_added_nodes = gArgs.GetArgs(\"-addnode\");\n \n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n@@ -1694,9 +1695,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n-    if (gArgs.IsArgSet(\"-seednode\")) {\n-        connOptions.vSeedNodes = gArgs.GetArgs(\"-seednode\");\n-    }\n+    connOptions.vSeedNodes = gArgs.GetArgs(\"-seednode\");\n+\n     // Initiate outbound connections unless connect=0\n     connOptions.m_use_addrman_outgoing = !gArgs.IsArgSet(\"-connect\");\n     if (!connOptions.m_use_addrman_outgoing) {"
      },
      {
        "sha": "c3f16a8f1f1b77c34a86bca6336ba00a3e585607",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877678710800a4d78afc12519424f232f1a583d3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877678710800a4d78afc12519424f232f1a583d3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=877678710800a4d78afc12519424f232f1a583d3",
        "patch": "@@ -1900,11 +1900,6 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n \n void CConnman::ThreadOpenAddedConnections()\n {\n-    {\n-        LOCK(cs_vAddedNodes);\n-        vAddedNodes = gArgs.GetArgs(\"-addnode\");\n-    }\n-\n     while (true)\n     {\n         CSemaphoreGrant grant(*semAddnode);"
      },
      {
        "sha": "905d6eb95640dbd8b97f15afd736f329b79f56b1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877678710800a4d78afc12519424f232f1a583d3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877678710800a4d78afc12519424f232f1a583d3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=877678710800a4d78afc12519424f232f1a583d3",
        "patch": "@@ -147,6 +147,7 @@ class CConnman\n         std::vector<CService> vBinds, vWhiteBinds;\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n+        std::vector<std::string> m_added_nodes;\n     };\n \n     void Init(const Options& connOptions) {\n@@ -164,6 +165,7 @@ class CConnman\n         nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n         nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n+        vAddedNodes = connOptions.m_added_nodes;\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);"
      }
    ]
  },
  {
    "sha": "c6223b3daab0328ca742b1cc3c15e89e698630bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjIyM2IzZGFhYjAzMjhjYTc0MmIxY2MzYzE1ZTg5ZTY5ODYzMGJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T23:06:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T23:09:05Z"
      },
      "message": "Merge #11362: Remove nBlockMaxSize from miner opt struct as it is no longer used.\n\n22fd04beb Remove nBlockMaxSize from miner opt struct as it is no longer used. (Gregory Maxwell)\n\nPull request description:\n\nTree-SHA512: f7a0fa380b4173120f33f96de90581cb57b8bd7af50996f0c726845acff7b92bb1212b924495ef89645624239d2b60d19c1cee2a13139b00e917154a33f7da4c",
      "tree": {
        "sha": "f1954d3618bf669bf5ea49e411b1b3d2a6277f85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1954d3618bf669bf5ea49e411b1b3d2a6277f85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6223b3daab0328ca742b1cc3c15e89e698630bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZxZgRAAoJEKY26XYx92fgvG4P/3HTXRsnlY4hWJdRIWSUfzYB\nCca5SjtP24pxNIW2brP/9pFjdIaRvsC0X/7EFEcmxuFA3ghHZZ2qu/MGqT/REScU\nWKTsue/GKCIizuTNR9nSVug2zaI5Eb42JZcIHoPDkFJbEyF+m6MZkfoNDSrSayTI\n629C00SkM1+myC/0OktrcOlOKQyw+nCVRreUqaRRu68kB7x/oeSrYeQ/ZxzZPmCG\n78Wh0c4VAXEKPRYYwONTjanW8c8dL3t1Ek4dvV7LCtAyx/qiuXKyZlYFq+1QRgNF\nuOh81vxDQTdkpLd4vBpRzGafVPDKM7Z4oeiERE4bfaoLugUBd+kYxBn4Zljcb6gJ\nt3Nu90nJrAOudrN2EnYQSiVDfTNSEQVpXGoMy/gXSsBaHzv7Mmsq1Rpki1ykyP8U\nboOWJFUZ4isG4SXCZP2RMDI7/51gvJ06BF4agGM+CkNEz0wYHOg9Kc2dv+QG0pwP\nA3uM0oXjuzqqvcRg4oN6/f7TwOmTJbzQSt/bmFGTrDqQXxhlAg/gdbJEBBOOqsKj\ndiwnpejT84MKxkNTrLDVufx7IQMbavsTCz414/ZcY0z6gxFQqUsqd6cU/oFU/w66\ny+E1mN9hubrymMwCYh+lgs9FWKB91jAk14PejRS90lfov0h0ySB1T2CHcZBaLAml\nVWbdhQ8rBdKmxqiyMBT3\n=DyEg\n-----END PGP SIGNATURE-----",
        "payload": "tree f1954d3618bf669bf5ea49e411b1b3d2a6277f85\nparent 877678710800a4d78afc12519424f232f1a583d3\nparent 22fd04beb9e7ee4c8576a2f43796200faa780938\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1506121591 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1506121745 -0700\n\nMerge #11362: Remove nBlockMaxSize from miner opt struct as it is no longer used.\n\n22fd04beb Remove nBlockMaxSize from miner opt struct as it is no longer used. (Gregory Maxwell)\n\nPull request description:\n\nTree-SHA512: f7a0fa380b4173120f33f96de90581cb57b8bd7af50996f0c726845acff7b92bb1212b924495ef89645624239d2b60d19c1cee2a13139b00e917154a33f7da4c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6223b3daab0328ca742b1cc3c15e89e698630bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6223b3daab0328ca742b1cc3c15e89e698630bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6223b3daab0328ca742b1cc3c15e89e698630bb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "877678710800a4d78afc12519424f232f1a583d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877678710800a4d78afc12519424f232f1a583d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/877678710800a4d78afc12519424f232f1a583d3"
      },
      {
        "sha": "22fd04beb9e7ee4c8576a2f43796200faa780938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22fd04beb9e7ee4c8576a2f43796200faa780938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22fd04beb9e7ee4c8576a2f43796200faa780938"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "db165e71c6bb467730564208792ed635727557c7",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6223b3daab0328ca742b1cc3c15e89e698630bb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6223b3daab0328ca742b1cc3c15e89e698630bb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=c6223b3daab0328ca742b1cc3c15e89e698630bb",
        "patch": "@@ -158,7 +158,6 @@ class BlockAssembler\n     struct Options {\n         Options();\n         size_t nBlockMaxWeight;\n-        size_t nBlockMaxSize;\n         CFeeRate blockMinFeeRate;\n     };\n "
      },
      {
        "sha": "41e0626eb9011ac4520ff7c6ada91ab5bb475209",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6223b3daab0328ca742b1cc3c15e89e698630bb/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6223b3daab0328ca742b1cc3c15e89e698630bb/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c6223b3daab0328ca742b1cc3c15e89e698630bb",
        "patch": "@@ -32,7 +32,6 @@ static BlockAssembler AssemblerForTest(const CChainParams& params) {\n     BlockAssembler::Options options;\n \n     options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n-    options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n     options.blockMinFeeRate = blockMinFeeRate;\n     return BlockAssembler(params, options);\n }"
      }
    ]
  },
  {
    "sha": "aeed345c9bade5d52a3fbf0a943203f6c82e6344",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWVkMzQ1YzliYWRlNWQ1MmEzZmJmMGE5NDMyMDNmNmM4MmU2MzQ0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T23:10:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-22T23:17:44Z"
      },
      "message": "Merge #10953: [Refactor] Combine scriptPubKey and amount as CTxOut in CScriptCheck\n\n3a131b724 Rename out to m_tx_out in CScriptCheck (Johnson Lau)\ne91211878 [Refactor] Combine scriptPubKey and amount as CTxOut in CScriptCheck (Johnson Lau)\n\nPull request description:\n\n  This simplifies CScriptCheck by combining scriptPubKey and amount\n\nTree-SHA512: 6422363cf5394c6cfefb30c1709db6def63230b809cc7697887e4a2e8c684149208edf91dd139e031b9fe732776b2db59305f77c3cba6f333b11cceb39ef0cc2",
      "tree": {
        "sha": "a015a9100036360a3c11e8e6decdfb786bf7f453",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a015a9100036360a3c11e8e6decdfb786bf7f453"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeed345c9bade5d52a3fbf0a943203f6c82e6344",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZxZoYAAoJEKY26XYx92fgGu8P/3L/EBiXifnErmRonIk8GsdY\nobHNCe8b5QumyLoytSo5zuPxRd/7uTtRzw3B4vqgGy70x7hfV5MCZmmF7Iw4tiiO\nY1FJ3fsCg72P/6TYC7Q1aRgYJSCP/zaDptUrjsiYx34ggMaKwR81w+mLDWBEN7K5\nlZdPggFoKYTutPImmUNBZ1zCTUQwn1r3EdmxQ0gUxSOjtCCFjwyUDGfd2fe4o/hb\nkP8RgiSolGLIyd++dDUbwxs/JEQMYpMEZPai+2Xn9U3n5XnRAu8uGMczDT2plt4O\nxUbAm0KuyqCYzeT5415qRa7lLV9Pj/vkv//f3ZT7Bj42gwJARlQ+QuhwamtgmHAq\ncNql+KhlbQdLdXcJAcLC4bwfDjhFQo6U7UEduheFA8kc4W5I66oa4k+dhSKxfIcC\njjuoydnwnpztbS9iXYHTmJ6QIc9RRPRBsbt68NuOrXsPeGb6G2DdSFYE4vr+cqkG\nGUhQcWiBanytrhmeadVkt47vkBqi/fFnKI9BSm9yocyOecCEnNwemkE3FyoxPetc\nsvUzJBpTQdTsCYWyURmiTKyYT8SrolnrarMxxlmIs06WV623dvmP8/0WTs4qUKLA\n4YKNyNjzNo8rnNMaDBPXEUmHN5A22ZTGmTNePjBAV0yVWxpjfhPvy06+46hoVru3\nkrMxZ0LtUvCWQyRYxAui\n=1f4w\n-----END PGP SIGNATURE-----",
        "payload": "tree a015a9100036360a3c11e8e6decdfb786bf7f453\nparent c6223b3daab0328ca742b1cc3c15e89e698630bb\nparent 3a131b72446724b2d6322930d92348065f1c1891\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1506121809 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1506122264 -0700\n\nMerge #10953: [Refactor] Combine scriptPubKey and amount as CTxOut in CScriptCheck\n\n3a131b724 Rename out to m_tx_out in CScriptCheck (Johnson Lau)\ne91211878 [Refactor] Combine scriptPubKey and amount as CTxOut in CScriptCheck (Johnson Lau)\n\nPull request description:\n\n  This simplifies CScriptCheck by combining scriptPubKey and amount\n\nTree-SHA512: 6422363cf5394c6cfefb30c1709db6def63230b809cc7697887e4a2e8c684149208edf91dd139e031b9fe732776b2db59305f77c3cba6f333b11cceb39ef0cc2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeed345c9bade5d52a3fbf0a943203f6c82e6344",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeed345c9bade5d52a3fbf0a943203f6c82e6344",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeed345c9bade5d52a3fbf0a943203f6c82e6344/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6223b3daab0328ca742b1cc3c15e89e698630bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6223b3daab0328ca742b1cc3c15e89e698630bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6223b3daab0328ca742b1cc3c15e89e698630bb"
      },
      {
        "sha": "3a131b72446724b2d6322930d92348065f1c1891",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a131b72446724b2d6322930d92348065f1c1891",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a131b72446724b2d6322930d92348065f1c1891"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 10,
      "deletions": 17
    },
    "files": [
      {
        "sha": "58aa32c96913e6b180275f01408768b2c1f9ded1",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=aeed345c9bade5d52a3fbf0a943203f6c82e6344",
        "patch": "@@ -112,8 +112,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            const CTxOut& output = txFrom.vout[txTo[i].vin[0].prevout.n];\n-            bool sigOK = CScriptCheck(output.scriptPubKey, output.nValue, txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &txdata)();\n+            bool sigOK = CScriptCheck(txFrom.vout[txTo[i].vin[0].prevout.n], txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &txdata)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "cb6ab7cdbec27ed23111d8ae43a810d3d38b1ea0",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=aeed345c9bade5d52a3fbf0a943203f6c82e6344",
        "patch": "@@ -480,8 +480,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n \n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n         std::vector<CScriptCheck> vChecks;\n-        const CTxOut& output = coins[tx.vin[i].prevout.n].out;\n-        CScriptCheck check(output.scriptPubKey, output.nValue, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n+        CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n         vChecks.push_back(CScriptCheck());\n         check.swap(vChecks.back());\n         control.Add(vChecks);"
      },
      {
        "sha": "bd9640e74988e32659ad1bf3bf8a8bdfa380bc30",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aeed345c9bade5d52a3fbf0a943203f6c82e6344",
        "patch": "@@ -1203,7 +1203,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n-    return VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore, *txdata), &error);\n+    return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n }\n \n int GetSpendHeight(const CCoinsViewCache& inputs)\n@@ -1285,11 +1285,9 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 // a sanity check that our caching is not introducing consensus\n                 // failures through additional data in, eg, the coins being\n                 // spent being checked as a part of CScriptCheck.\n-                const CScript& scriptPubKey = coin.out.scriptPubKey;\n-                const CAmount amount = coin.out.nValue;\n \n                 // Verify signature\n-                CScriptCheck check(scriptPubKey, amount, tx, i, flags, cacheSigStore, &txdata);\n+                CScriptCheck check(coin.out, tx, i, flags, cacheSigStore, &txdata);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1301,7 +1299,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // arguments; if so, don't trigger DoS protection to\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n-                        CScriptCheck check2(scriptPubKey, amount, tx, i,\n+                        CScriptCheck check2(coin.out, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n                         if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));"
      },
      {
        "sha": "bba621b84f51e85daa4810fe92ceec378aff272b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeed345c9bade5d52a3fbf0a943203f6c82e6344/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=aeed345c9bade5d52a3fbf0a943203f6c82e6344",
        "patch": "@@ -357,8 +357,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = null\n class CScriptCheck\n {\n private:\n-    CScript scriptPubKey;\n-    CAmount amount;\n+    CTxOut m_tx_out;\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n@@ -367,17 +366,15 @@ class CScriptCheck\n     PrecomputedTransactionData *txdata;\n \n public:\n-    CScriptCheck(): amount(0), ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CScript& scriptPubKeyIn, const CAmount amountIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n-        scriptPubKey(scriptPubKeyIn), amount(amountIn),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n+    CScriptCheck(): ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n+    CScriptCheck(const CTxOut& outIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n+        m_tx_out(outIn), ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n \n     bool operator()();\n \n     void swap(CScriptCheck &check) {\n-        scriptPubKey.swap(check.scriptPubKey);\n         std::swap(ptxTo, check.ptxTo);\n-        std::swap(amount, check.amount);\n+        std::swap(m_tx_out, check.m_tx_out);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);"
      }
    ]
  },
  {
    "sha": "723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjNhYTFiODc1MmMxZDZjNmMwYTc2MDU5YzUzMmViZTJmNDA2ZmMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T09:50:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T07:34:53Z"
      },
      "message": "qt: Backup former GUI settings on `-resetguisettings`\n\nWrites the GUI settings to `guisettings.bak` in the data directory\nbefore wiping them. This can be used to retroactively troubleshoot\nissues (e.g. #11262) where `-resetguisettings` solves the problem.",
      "tree": {
        "sha": "c76db380e10b0936c8386456dc38c0178fea4e2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c76db380e10b0936c8386456dc38c0178fea4e2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09627b1dd41d1151a709d5ead82a924bf59e3d38"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d603445fbfcd7d75a8541f0c7f41c6ee289840e",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
        "patch": "@@ -15,6 +15,7 @@\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n * onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "feb00a33b0a91c8be9dd260b3b2d41bc0269e402",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
        "patch": "@@ -151,10 +151,32 @@ void OptionsModel::Init(bool resetSettings)\n     language = settings.value(\"language\").toString();\n }\n \n+/** Helper function to copy contents from one QSettings to another.\n+ * By using allKeys this also covers nested settings in a hierarchy.\n+ */\n+static void CopySettings(QSettings& dst, const QSettings& src)\n+{\n+    for (const QString& key : src.allKeys()) {\n+        dst.setValue(key, src.value(key));\n+    }\n+}\n+\n+/** Back up a QSettings to an ini-formatted file. */\n+static void BackupSettings(const fs::path& filename, const QSettings& src)\n+{\n+    qWarning() << \"Backing up GUI settings to\" << GUIUtil::boostPathToQString(filename);\n+    QSettings dst(GUIUtil::boostPathToQString(filename), QSettings::IniFormat);\n+    dst.clear();\n+    CopySettings(dst, src);\n+}\n+\n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n+    // Backup old settings to chain-specific datadir for troubleshooting\n+    BackupSettings(GetDataDir(true) / \"guisettings.ini.bak\", settings);\n+\n     // Save the strDataDir setting\n     QString dataDir = Intro::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();"
      }
    ]
  },
  {
    "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGEyMGJmNzcwMGUzZDU5ZjhlMmNlM2Q0ZWFlYmY0NzJkMTc1NGNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T07:40:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T07:40:28Z"
      },
      "message": "Merge #11338: qt: Backup former GUI settings on `-resetguisettings`\n\n723aa1b qt: Backup former GUI settings on `-resetguisettings` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Writes the GUI settings to `guisettings.bak` in the data directory before wiping them. This can be used to retroactively troubleshoot issues (e.g. #11262) where `-resetguisettings` solves the problem.\n  (as discussed in yesterday's IRC meeting)\n\nTree-SHA512: c64f5052d992eb02057ba285435f143c42d0cc456144a4c565e1c87be833737f9df750d0aee10810f85047c820d9b4f9f22fd94a6f09f4b28a9cf41b63a56586",
      "tree": {
        "sha": "923df0d0321cf69e967d7832bd17c246b4e4228d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/923df0d0321cf69e967d7832bd17c246b4e4228d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZxg/sAAoJEB5K7WKYbNJdwfQH/jZJALyp9P4wrp7q70w8/UCd\n24UAEhv6NT9t8Khz73dZwJ0s7o7HSgfiTvxg1oxOJg5kleNU0EiWshSFWSH1gs7Z\nob7PKrP9Bc9ZCRc5SbkYJ/7WQX6ud0lalEfDiAklz/gvO2qg/MLkER8c2xW1o/g1\nm+q8AJ2KU1Z6rIhKB7nTwrR8/gH2QBPgjuuuYaA284/bIsmUzoVYt3vCqixKLXKF\nt+sZKgP2v8gN/Yl3HXOHcSRUSwD3nKnO9d9FFKI/s8vp8DRg/iJxdWQW83/gdugk\nUYBbrBjph+WhEWP7uotoHCn7SXRQ123L40dNyHnDw7zli/R27/Fcel2h4FifoPc=\n=IUm0\n-----END PGP SIGNATURE-----",
        "payload": "tree 923df0d0321cf69e967d7832bd17c246b4e4228d\nparent aeed345c9bade5d52a3fbf0a943203f6c82e6344\nparent 723aa1b8752c1d6c6c0a76059c532ebe2f406fc1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506152402 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506152428 +0200\n\nMerge #11338: qt: Backup former GUI settings on `-resetguisettings`\n\n723aa1b qt: Backup former GUI settings on `-resetguisettings` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Writes the GUI settings to `guisettings.bak` in the data directory before wiping them. This can be used to retroactively troubleshoot issues (e.g. #11262) where `-resetguisettings` solves the problem.\n  (as discussed in yesterday's IRC meeting)\n\nTree-SHA512: c64f5052d992eb02057ba285435f143c42d0cc456144a4c565e1c87be833737f9df750d0aee10810f85047c820d9b4f9f22fd94a6f09f4b28a9cf41b63a56586\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeed345c9bade5d52a3fbf0a943203f6c82e6344",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeed345c9bade5d52a3fbf0a943203f6c82e6344",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeed345c9bade5d52a3fbf0a943203f6c82e6344"
      },
      {
        "sha": "723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d603445fbfcd7d75a8541f0c7f41c6ee289840e",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "patch": "@@ -15,6 +15,7 @@\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n * onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "feb00a33b0a91c8be9dd260b3b2d41bc0269e402",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "patch": "@@ -151,10 +151,32 @@ void OptionsModel::Init(bool resetSettings)\n     language = settings.value(\"language\").toString();\n }\n \n+/** Helper function to copy contents from one QSettings to another.\n+ * By using allKeys this also covers nested settings in a hierarchy.\n+ */\n+static void CopySettings(QSettings& dst, const QSettings& src)\n+{\n+    for (const QString& key : src.allKeys()) {\n+        dst.setValue(key, src.value(key));\n+    }\n+}\n+\n+/** Back up a QSettings to an ini-formatted file. */\n+static void BackupSettings(const fs::path& filename, const QSettings& src)\n+{\n+    qWarning() << \"Backing up GUI settings to\" << GUIUtil::boostPathToQString(filename);\n+    QSettings dst(GUIUtil::boostPathToQString(filename), QSettings::IniFormat);\n+    dst.clear();\n+    CopySettings(dst, src);\n+}\n+\n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n+    // Backup old settings to chain-specific datadir for troubleshooting\n+    BackupSettings(GetDataDir(true) / \"guisettings.ini.bak\", settings);\n+\n     // Save the strDataDir setting\n     QString dataDir = Intro::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();"
      }
    ]
  },
  {
    "sha": "1e46ebdf8618e585568ffc1b093c79cc9be07b57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ2ZWJkZjg2MThlNTg1NTY4ZmZjMWIwOTNjNzljYzliZTA3YjU3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T00:43:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-23T21:45:01Z"
      },
      "message": "Implement {Encode,Decode}Destination without CBitcoinAddress",
      "tree": {
        "sha": "a9c8d433e3555bcfcdc171a7a58d9818a397a203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9c8d433e3555bcfcdc171a7a58d9818a397a203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 49,
      "deletions": 82
    },
    "files": [
      {
        "sha": "0272711575e50909f814b8c60d4ad0e4b4bc97d7",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 81,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "patch": "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n-#include <assert.h>\n-#include <stdint.h>\n-#include <string.h>\n-#include <vector>\n-#include <string>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n+#include <algorithm>\n+#include <assert.h>\n+#include <string.h>\n+\n+\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -212,86 +213,55 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    return CNoDestination();\n }\n+} // namespace\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {\n@@ -328,22 +298,20 @@ bool CBitcoinSecret::SetString(const std::string& strSecret)\n \n std::string EncodeDestination(const CTxDestination& dest)\n {\n-    CBitcoinAddress addr(dest);\n-    if (!addr.IsValid()) return \"\";\n-    return addr.ToString();\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n }\n \n CTxDestination DecodeDestination(const std::string& str)\n {\n-    return CBitcoinAddress(str).Get();\n+    return DecodeDestination(str, Params());\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n-    return CBitcoinAddress(str).IsValid(params);\n+    return IsValidDestination(DecodeDestination(str, params));\n }\n \n bool IsValidDestinationString(const std::string& str)\n {\n-    return CBitcoinAddress(str).IsValid();\n+    return IsValidDestinationString(str, Params());\n }"
      },
      {
        "sha": "9dc4234248b0b411280776e8ae0c4a2443907bf4",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "patch": "@@ -17,7 +17,6 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n-#include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"support/allocators/zeroafterfree.h\"\n "
      }
    ]
  },
  {
    "sha": "8849130415f69bb506950b0eb247e3e97c3cd1a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODQ5MTMwNDE1ZjY5YmI1MDY5NTBiMGViMjQ3ZTNlOTdjM2NkMWEz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-24T01:00:26Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-24T01:00:26Z"
      },
      "message": "Remove lxcbr0 lines from gitian-build.sh",
      "tree": {
        "sha": "415eb7ef0d2d3fe136c2a93ad6d54e9822777bfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/415eb7ef0d2d3fe136c2a93ad6d54e9822777bfd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8849130415f69bb506950b0eb247e3e97c3cd1a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8849130415f69bb506950b0eb247e3e97c3cd1a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8849130415f69bb506950b0eb247e3e97c3cd1a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8849130415f69bb506950b0eb247e3e97c3cd1a3/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8fdec21b0e88f19b380480e5341656828c1f998b",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8849130415f69bb506950b0eb247e3e97c3cd1a3/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8849130415f69bb506950b0eb247e3e97c3cd1a3/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=8849130415f69bb506950b0eb247e3e97c3cd1a3",
        "patch": "@@ -179,8 +179,6 @@ done\n if [[ $lxc = true ]]\n then\n     export USE_LXC=1\n-    export LXC_BRIDGE=lxcbr0\n-    sudo ifconfig lxcbr0 up 10.0.2.2\n fi\n \n # Check for OSX SDK"
      }
    ]
  },
  {
    "sha": "204cc98261f68233aec6ce5e4ce75182cfd82677",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDRjYzk4MjYxZjY4MjMzYWVjNmNlNWU0Y2U3NTE4MmNmZDgyNjc3",
    "commit": {
      "author": {
        "name": "Shooter",
        "email": "shooterman@users.noreply.github.com",
        "date": "2017-09-24T09:39:41Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-09-24T09:39:41Z"
      },
      "message": "fix  link error\n\nThe  `perform-gitian-builds`  is  not  exists,\r\nrepalce  `perform-gitian-builds` with  `setup-and-perform-gitian-builds`.",
      "tree": {
        "sha": "97c3a6822c5133ac15673fdc9f1ed0d70c6f5922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97c3a6822c5133ac15673fdc9f1ed0d70c6f5922"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/204cc98261f68233aec6ce5e4ce75182cfd82677",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/204cc98261f68233aec6ce5e4ce75182cfd82677",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/204cc98261f68233aec6ce5e4ce75182cfd82677",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/204cc98261f68233aec6ce5e4ce75182cfd82677/comments",
    "author": {
      "login": "shooterman",
      "id": 67615546,
      "node_id": "MDQ6VXNlcjY3NjE1NTQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/67615546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shooterman",
      "html_url": "https://github.com/shooterman",
      "followers_url": "https://api.github.com/users/shooterman/followers",
      "following_url": "https://api.github.com/users/shooterman/following{/other_user}",
      "gists_url": "https://api.github.com/users/shooterman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shooterman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shooterman/subscriptions",
      "organizations_url": "https://api.github.com/users/shooterman/orgs",
      "repos_url": "https://api.github.com/users/shooterman/repos",
      "events_url": "https://api.github.com/users/shooterman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shooterman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f88d14eb9c7d18340e17d0a2427fe7f394eaabff",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/204cc98261f68233aec6ce5e4ce75182cfd82677/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/204cc98261f68233aec6ce5e4ce75182cfd82677/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=204cc98261f68233aec6ce5e4ce75182cfd82677",
        "patch": "@@ -353,7 +353,7 @@ Building Bitcoin Core\n ----------------\n \n To build Bitcoin Core (for Linux, OS X and Windows) just follow the steps under 'perform\n-Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n+Gitian builds' in [doc/release-process.md](release-process.md#setup-and-perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n These dependencies will be cached after a successful build to avoid rebuilding them when possible."
      }
    ]
  },
  {
    "sha": "90ab62c4512942f1d252259a892e1cbeeb92789e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGFiNjJjNDUxMjk0MmYxZDI1MjI1OWE4OTJlMWNiZWViOTI3ODll",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-22T20:10:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-24T12:16:48Z"
      },
      "message": "[docs] document scripted-diff",
      "tree": {
        "sha": "e682885f63f58961f125443d8d52bbd7d014ce98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e682885f63f58961f125443d8d52bbd7d014ce98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90ab62c4512942f1d252259a892e1cbeeb92789e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ab62c4512942f1d252259a892e1cbeeb92789e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90ab62c4512942f1d252259a892e1cbeeb92789e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ab62c4512942f1d252259a892e1cbeeb92789e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c9015bca861085f76ca3c045e17d0591aa6c8b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "33c6ab9cb3daad7960b65c57d2c4dd744cfd233e",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90ab62c4512942f1d252259a892e1cbeeb92789e/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90ab62c4512942f1d252259a892e1cbeeb92789e/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=90ab62c4512942f1d252259a892e1cbeeb92789e",
        "patch": "@@ -549,6 +549,26 @@ Git and GitHub tips\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n \n+Scripted diffs\n+--------------\n+\n+For reformatting and refactoring commits where the changes can be easily automated using a bash script, we use\n+scripted-diff commits. The bash script is included in the commit message and our Travis CI job checks that\n+the result of the script is identical to the commit. This aids reviewers since they can verify that the script\n+does exactly what it's supposed to do. It is also helpful for rebasing (since the same script can just be re-run\n+on the new master commit).\n+\n+To create a scripted-diff:\n+\n+- start the commit message with `scripted-diff:` (and then a description of the diff on the same line)\n+- in the commit message include the bash script between lines containing just the following text:\n+    - `-BEGIN VERIFY SCRIPT-`\n+    - `-END VERIFY SCRIPT-`\n+\n+The scripted-diff is verified by the tool `contrib/devtools/commit-script-check.sh`\n+\n+Commit `bb81e173` is an example of a scripted-diff.\n+\n RPC interface guidelines\n --------------------------\n "
      }
    ]
  },
  {
    "sha": "12ed800ab870e0fc527a84d6e4584b10c8d239f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmVkODAwYWI4NzBlMGZjNTI3YTg0ZDZlNDU4NGIxMGM4ZDIzOWY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-25T00:38:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-25T00:38:59Z"
      },
      "message": "Merge #11390: [docs] document scripted-diff\n\n90ab62c45 [docs] document scripted-diff (John Newbery)\n\nPull request description:\n\n  Document scripted-diffs in developer-notes.md\n\n  I sometimes comment on PRs that a scripted-diff would be appropriate, but I don't have any documentation to point to. Fix that.\n\nTree-SHA512: 7d4a14b9217c812e4c27601e5e6dd8054cf5104cd20ecbe1ec0a84c217cc4b0645b7c0d2e3a89fdd4d059cafbc388acbddba75a430308f8279200b9383e009de",
      "tree": {
        "sha": "5a564255d14fae0849ba8f797fe1a10663b210c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a564255d14fae0849ba8f797fe1a10663b210c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12ed800ab870e0fc527a84d6e4584b10c8d239f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZyFAjAAoJEKY26XYx92fgXaoQAIxxlkFrzWLweUcdMkI2BHMl\nJCTrbkASDWbC3+jIMOBlUDlA2QCLXFwlOsz9Bjx1ZAHfo2otW29qA9dMuPuMwBJO\nviV21oVkSEGvRAB5I65IiSrV7zuaOgwjUwuf5hPUB2SE00EHRbvQtG63GY2e+PEs\n4/tmNKzpTVRO6N1jcIhE4/uwuCq8nDKPPBEhoMuxT04gXUoyjLPwLD5eeX38USFQ\nYqIj9JtBzAnxM1qbzi4l5r3sPPyM+wrJKSmqS5+4IuJvzE1fjKqoEaP9ndhokOFw\nou09fngkJgYlxah8RhYhlfRILwnBh7z2wjWkw7+HLw5btv9syYJAhxsMiDfYQjdQ\nrTgrfaJqczQb8yVbpzovc2jXOh9cs71L9wE/Z53fWX0QerwooGGC9qSuJjv9RmiC\nW9NUGOJ1ey5sYxOuF0lMyknSm5E95jP/NoZHzpPiMFFDJ3pbJqpKCbgRlnEhAC98\n4bgQeBu/KTW3bMw5maLV0A/uSiwZrkzMmIxs8OkL2r3Zf7u1kjbhntOmZZ4q+Xl+\nnaHOWXA7udrj5k2IwO35fgvnOntp3v3EYoIu/gK2WmZfAlLh8dhXx0+6EB8PMSey\n+zO0A3drsgjyN58YRxnlRhcRH+TcLBPXuKnhJDrroHpueYJzR7Rhbct6v+N7ml7f\nEnyeZH3vsl7D8vpv2OxC\n=TvdQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a564255d14fae0849ba8f797fe1a10663b210c4\nparent 10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce\nparent 90ab62c4512942f1d252259a892e1cbeeb92789e\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1506299927 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1506299939 -0700\n\nMerge #11390: [docs] document scripted-diff\n\n90ab62c45 [docs] document scripted-diff (John Newbery)\n\nPull request description:\n\n  Document scripted-diffs in developer-notes.md\n\n  I sometimes comment on PRs that a scripted-diff would be appropriate, but I don't have any documentation to point to. Fix that.\n\nTree-SHA512: 7d4a14b9217c812e4c27601e5e6dd8054cf5104cd20ecbe1ec0a84c217cc4b0645b7c0d2e3a89fdd4d059cafbc388acbddba75a430308f8279200b9383e009de\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ed800ab870e0fc527a84d6e4584b10c8d239f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12ed800ab870e0fc527a84d6e4584b10c8d239f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ed800ab870e0fc527a84d6e4584b10c8d239f5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      },
      {
        "sha": "90ab62c4512942f1d252259a892e1cbeeb92789e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ab62c4512942f1d252259a892e1cbeeb92789e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90ab62c4512942f1d252259a892e1cbeeb92789e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "33c6ab9cb3daad7960b65c57d2c4dd744cfd233e",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12ed800ab870e0fc527a84d6e4584b10c8d239f5/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12ed800ab870e0fc527a84d6e4584b10c8d239f5/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=12ed800ab870e0fc527a84d6e4584b10c8d239f5",
        "patch": "@@ -549,6 +549,26 @@ Git and GitHub tips\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n \n+Scripted diffs\n+--------------\n+\n+For reformatting and refactoring commits where the changes can be easily automated using a bash script, we use\n+scripted-diff commits. The bash script is included in the commit message and our Travis CI job checks that\n+the result of the script is identical to the commit. This aids reviewers since they can verify that the script\n+does exactly what it's supposed to do. It is also helpful for rebasing (since the same script can just be re-run\n+on the new master commit).\n+\n+To create a scripted-diff:\n+\n+- start the commit message with `scripted-diff:` (and then a description of the diff on the same line)\n+- in the commit message include the bash script between lines containing just the following text:\n+    - `-BEGIN VERIFY SCRIPT-`\n+    - `-END VERIFY SCRIPT-`\n+\n+The scripted-diff is verified by the tool `contrib/devtools/commit-script-check.sh`\n+\n+Commit `bb81e173` is an example of a scripted-diff.\n+\n RPC interface guidelines\n --------------------------\n "
      }
    ]
  },
  {
    "sha": "a3b4c5943b315eb28b10816645c1396369b14ca7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2I0YzU5NDNiMzE1ZWIyOGIxMDgxNjY0NWMxMzk2MzY5YjE0Y2E3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-25T09:46:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-25T09:48:26Z"
      },
      "message": "Merge #11392: Fix stale link in gitian-building.md\n\n204cc98 fix  link error (Shooter)\n\nPull request description:\n\n  The  `perform-gitian-builds`  is  not  exist,\n  replace  `perform-gitian-builds` with  `setup-and-perform-gitian-builds`.\n\nTree-SHA512: c4f3fb4b6ae502a2e7a6857d3075734d493f549871b80ec00a2733ee689b00f98aa67ce7c3b7facf1ae4949b7845e1e2ef6f727aeca0c88c00b46d77b4d7e570",
      "tree": {
        "sha": "d47c9f2057660af5d82544d3294467e131548886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d47c9f2057660af5d82544d3294467e131548886"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3b4c5943b315eb28b10816645c1396369b14ca7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZyNDqAAoJEB5K7WKYbNJdtSUH/jZt/gK/UKUF3jN+ZidTfjWn\n2X8mhjYOR1hjYR4SsuaMpa5B5kfM4xiWzEqOSjgOmfvTdu6JNrRyz7YUxwL/Ukup\niz/6FnhQ5pR5TXOfMdzUxDPKog+AgEx5qGDrT8o6aY3ZGDfJeYXZpuxA6Le8n/ej\nFYEZZXN7et3fGVUTw83C0oo6Zl7M8GMYgvfjGADRZbwzhCK5hL62C7tVH7VBi5GI\nIhWVkbulx9VNYm2rSCW4HXqSt6tpGhVIp9pbJDqb9oGleRx+rNz/veszngS8lYMg\nawgjJSzc5+gqYKrf5pcvR4gAC8YnEkGwGb8oHhBeeSQXtnmKAPYFMGaFYLl7I8k=\n=wM9g\n-----END PGP SIGNATURE-----",
        "payload": "tree d47c9f2057660af5d82544d3294467e131548886\nparent 12ed800ab870e0fc527a84d6e4584b10c8d239f5\nparent 204cc98261f68233aec6ce5e4ce75182cfd82677\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506332789 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506332906 +0200\n\nMerge #11392: Fix stale link in gitian-building.md\n\n204cc98 fix  link error (Shooter)\n\nPull request description:\n\n  The  `perform-gitian-builds`  is  not  exist,\n  replace  `perform-gitian-builds` with  `setup-and-perform-gitian-builds`.\n\nTree-SHA512: c4f3fb4b6ae502a2e7a6857d3075734d493f549871b80ec00a2733ee689b00f98aa67ce7c3b7facf1ae4949b7845e1e2ef6f727aeca0c88c00b46d77b4d7e570\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b4c5943b315eb28b10816645c1396369b14ca7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b4c5943b315eb28b10816645c1396369b14ca7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b4c5943b315eb28b10816645c1396369b14ca7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12ed800ab870e0fc527a84d6e4584b10c8d239f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ed800ab870e0fc527a84d6e4584b10c8d239f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12ed800ab870e0fc527a84d6e4584b10c8d239f5"
      },
      {
        "sha": "204cc98261f68233aec6ce5e4ce75182cfd82677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/204cc98261f68233aec6ce5e4ce75182cfd82677",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/204cc98261f68233aec6ce5e4ce75182cfd82677"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f88d14eb9c7d18340e17d0a2427fe7f394eaabff",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3b4c5943b315eb28b10816645c1396369b14ca7/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3b4c5943b315eb28b10816645c1396369b14ca7/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=a3b4c5943b315eb28b10816645c1396369b14ca7",
        "patch": "@@ -353,7 +353,7 @@ Building Bitcoin Core\n ----------------\n \n To build Bitcoin Core (for Linux, OS X and Windows) just follow the steps under 'perform\n-Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n+Gitian builds' in [doc/release-process.md](release-process.md#setup-and-perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n These dependencies will be cached after a successful build to avoid rebuilding them when possible."
      }
    ]
  },
  {
    "sha": "2d858993035f3b969d0fa741efc0857f434c696f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDg1ODk5MzAzNWYzYjk2OWQwZmE3NDFlZmMwODU3ZjQzNGM2OTZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-25T11:16:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-25T11:16:16Z"
      },
      "message": "Merge #11370: [test] Add getblockchaininfo functional test\n\nf6ffb14 [test] Add getblockchaininfo functional test (Jo\u00e3o Barbosa)\nfd8f45f [test] Add restart_node to BitcoinTestFramework (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Adds functional test for `getblockchaininfo`. Also deals with the fact that `pruneheight` is only in the response when pruning is enabled (related to #11366).\n\nTree-SHA512: 56cdec0921f572874f2fdded0990d1722d1435c3ff9979e6bff1afdccdca6f8b214dbe8d7490cdac07b5758909db085132d14340de2cce943241f7ebde7e5b6c",
      "tree": {
        "sha": "13eff8693d134d3440526dd3087dbd83f8d3d08c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13eff8693d134d3440526dd3087dbd83f8d3d08c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d858993035f3b969d0fa741efc0857f434c696f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZyOWAAAoJEB5K7WKYbNJdcvoH/iTKn1Xu2WMohVyncLx7pmHS\nCFaNrAkY2UFYMNBmQVxwp4Z2uHRKv0marSeuNTXrlHNr4B8Qv/iRx9HsH1ajSdHt\nYVKlE1n9V3u9DSGoaz5unlMPbk8L0wFWU1kGasAre10p9oLYFRQeE81vWBogZVpY\nVxquzp58ciJmeonnKI8ITZoGvVu9BeFlkPMcYEK4VFkLMZruVn4qK9/fCvnOlGwN\n7aL6T+yqTCDhOtJ1FF34vDSFlAdeCDkWcwhM6Yqr85F+iswXRGqfT42++egl7/Hg\nWegqS5mfc92gR2mnAjKx9pGZkzUOAspCS/GPgwQ3VHt86OxSHxZdOVufi/lUh7k=\n=ISt3\n-----END PGP SIGNATURE-----",
        "payload": "tree 13eff8693d134d3440526dd3087dbd83f8d3d08c\nparent a3b4c5943b315eb28b10816645c1396369b14ca7\nparent f6ffb143679aa7e89ad3c3342ceba5e5aaf71a0e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506338168 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506338176 +0200\n\nMerge #11370: [test] Add getblockchaininfo functional test\n\nf6ffb14 [test] Add getblockchaininfo functional test (Jo\u00e3o Barbosa)\nfd8f45f [test] Add restart_node to BitcoinTestFramework (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Adds functional test for `getblockchaininfo`. Also deals with the fact that `pruneheight` is only in the response when pruning is enabled (related to #11366).\n\nTree-SHA512: 56cdec0921f572874f2fdded0990d1722d1435c3ff9979e6bff1afdccdca6f8b214dbe8d7490cdac07b5758909db085132d14340de2cce943241f7ebde7e5b6c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d858993035f3b969d0fa741efc0857f434c696f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d858993035f3b969d0fa741efc0857f434c696f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d858993035f3b969d0fa741efc0857f434c696f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3b4c5943b315eb28b10816645c1396369b14ca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b4c5943b315eb28b10816645c1396369b14ca7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b4c5943b315eb28b10816645c1396369b14ca7"
      },
      {
        "sha": "f6ffb143679aa7e89ad3c3342ceba5e5aaf71a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ffb143679aa7e89ad3c3342ceba5e5aaf71a0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6ffb143679aa7e89ad3c3342ceba5e5aaf71a0e"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 34,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63c56d0e9b55c328cbac695708912c0b6d0528b9",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d858993035f3b969d0fa741efc0857f434c696f/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d858993035f3b969d0fa741efc0857f434c696f/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=2d858993035f3b969d0fa741efc0857f434c696f",
        "patch": "@@ -33,9 +33,10 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207']]\n+        self.extra_args = [['-stopatheight=207', '-prune=1']]\n \n     def run_test(self):\n+        self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n         self._test_getblockheader()\n@@ -44,6 +45,33 @@ def run_test(self):\n         self._test_stopatheight()\n         assert self.nodes[0].verifychain(4, 0)\n \n+    def _test_getblockchaininfo(self):\n+        self.log.info(\"Test getblockchaininfo\")\n+\n+        keys = [\n+            'bestblockhash',\n+            'bip9_softforks',\n+            'blocks',\n+            'chain',\n+            'chainwork',\n+            'difficulty',\n+            'headers',\n+            'mediantime',\n+            'pruned',\n+            'softforks',\n+            'verificationprogress',\n+        ]\n+        res = self.nodes[0].getblockchaininfo()\n+        # result should have pruneheight and default keys if pruning is enabled\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight'] + keys))\n+        # pruneheight should be greater or equal to 0\n+        assert res['pruneheight'] >= 0\n+\n+        self.restart_node(0, ['-stopatheight=207'])\n+        res = self.nodes[0].getblockchaininfo()\n+        # should have exact keys\n+        assert_equal(sorted(res.keys()), keys)\n+\n     def _test_getchaintxstats(self):\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx"
      },
      {
        "sha": "381513ab9ed2fedb8d38c2d969e809b1b397bc6f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d858993035f3b969d0fa741efc0857f434c696f/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d858993035f3b969d0fa741efc0857f434c696f/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=2d858993035f3b969d0fa741efc0857f434c696f",
        "patch": "@@ -273,6 +273,11 @@ def stop_nodes(self):\n             # Wait for nodes to stop\n             node.wait_until_stopped()\n \n+    def restart_node(self, i, extra_args=None):\n+        \"\"\"Stop and start a test node\"\"\"\n+        self.stop_node(i)\n+        self.start_node(i, extra_args)\n+\n     def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:"
      }
    ]
  },
  {
    "sha": "8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2Y4OGI0YWFlYWY0Zjc0NDZmZWE2ZGM2ZDI0MDJhOWNjOTM2OGVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-25T11:16:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-25T11:16:56Z"
      },
      "message": "Merge #11335: Replace save|restoreWindowGeometry with Qt functions\n\n13baf72 Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n\nPull request description:\n\n  Alternative to https://github.com/bitcoin/bitcoin/pull/11208, closes https://github.com/bitcoin/bitcoin/issues/11207\n\n  According to the [Qt documentation](https://doc.qt.io/qt-4.8/qwidget.html#restoreGeometry), restoreGeometry does all the checks we need, so it would be better to rely on them instead of doing it ourselves.\n\n  ~Haven't tested this properly yet, hence the WIP.~\n  Gives expected behavior exactly as the other system apps do based on my tests. Only potential issue is the case when the GUI is almost entirely offscreen with only a single strip of pixels, its not really possible to see the GUI, but if you know it's there you can bring it back onscreen with just the mouse. And that's exactly how notepad behaves on Windows so I don't think its a real issue.\n\n  This also gives much better behavior when closing a maximized window, currently (0.15.0 release) a maximized window will save the window size on close, and then reopen as a not-maximized but still that size, which is really annoying. This reopens as maximized.\n\n  Gitian build here: https://bitcoin.jonasschnelli.ch/build/305\n\nTree-SHA512: a8bde14793b4316192df1fa2eaaeb32b44d5ebc5219c35252379840056cd737a9fd162625fd715987f275fec8375334ec1ec328dbc671563f084c611a938985c",
      "tree": {
        "sha": "9a7463963b6e5a0e5d5d8b20d1e49cae5dbaa6d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a7463963b6e5a0e5d5d8b20d1e49cae5dbaa6d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZyOWoAAoJEB5K7WKYbNJd8NQH/AusRYYj+RXAQPCNP9KGfhMM\nn9QgQ+JOkcGpgs9bMNXg2SvKPCM43XwyhVjKqy/wu8UObMcKNPWHWq0IEAckRHGI\nOF1uIjLVI1orWf2aSwz4IKQLBNWenxwd/ZwsTDTPXfwzypq42Jr2Bv2waRbECwSc\n+eU5t+SYesnp+DF05cWpUw8Ux48zNrD2aVBNCAJ6Wt2+gvxWNswsAke+IQjBfzkC\n7Z80Zn+ubwrMwIFAAWuU1pkAc5dFYshp7/D7sWzAPtIsx3UqB9AuuM9gzID0B69G\nipC6DLeM6k5kXxN1R8VW4u6uCTfJ4pHPS033Wu5qZJsyyEOL3qm+Ob4EWU+2Nko=\n=m/DS\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a7463963b6e5a0e5d5d8b20d1e49cae5dbaa6d7\nparent 2d858993035f3b969d0fa741efc0857f434c696f\nparent 13baf7217bf8394ae02efc376208ae86eac4d0f6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506338211 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506338216 +0200\n\nMerge #11335: Replace save|restoreWindowGeometry with Qt functions\n\n13baf72 Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n\nPull request description:\n\n  Alternative to https://github.com/bitcoin/bitcoin/pull/11208, closes https://github.com/bitcoin/bitcoin/issues/11207\n\n  According to the [Qt documentation](https://doc.qt.io/qt-4.8/qwidget.html#restoreGeometry), restoreGeometry does all the checks we need, so it would be better to rely on them instead of doing it ourselves.\n\n  ~Haven't tested this properly yet, hence the WIP.~\n  Gives expected behavior exactly as the other system apps do based on my tests. Only potential issue is the case when the GUI is almost entirely offscreen with only a single strip of pixels, its not really possible to see the GUI, but if you know it's there you can bring it back onscreen with just the mouse. And that's exactly how notepad behaves on Windows so I don't think its a real issue.\n\n  This also gives much better behavior when closing a maximized window, currently (0.15.0 release) a maximized window will save the window size on close, and then reopen as a not-maximized but still that size, which is really annoying. This reopens as maximized.\n\n  Gitian build here: https://bitcoin.jonasschnelli.ch/build/305\n\nTree-SHA512: a8bde14793b4316192df1fa2eaaeb32b44d5ebc5219c35252379840056cd737a9fd162625fd715987f275fec8375334ec1ec328dbc671563f084c611a938985c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d858993035f3b969d0fa741efc0857f434c696f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d858993035f3b969d0fa741efc0857f434c696f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d858993035f3b969d0fa741efc0857f434c696f"
      },
      {
        "sha": "13baf7217bf8394ae02efc376208ae86eac4d0f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13baf7217bf8394ae02efc376208ae86eac4d0f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13baf7217bf8394ae02efc376208ae86eac4d0f6"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 15,
      "deletions": 36
    },
    "files": [
      {
        "sha": "dc551419002a45aea838ec17596634e1d5f26218",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "patch": "@@ -123,7 +123,11 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     spinnerFrame(0),\n     platformStyle(_platformStyle)\n {\n-    GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n+    QSettings settings;\n+    if (!restoreGeometry(settings.value(\"MainWindowGeometry\").toByteArray())) {\n+        // Restore failed (perhaps missing setting), center the window\n+        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+    }\n \n     QString windowTitle = tr(PACKAGE_NAME) + \" - \";\n #ifdef ENABLE_WALLET\n@@ -261,7 +265,8 @@ BitcoinGUI::~BitcoinGUI()\n     // Unsubscribe from notifications from core\n     unsubscribeFromCoreSignals();\n \n-    GUIUtil::saveWindowGeometry(\"nWindow\", this);\n+    QSettings settings;\n+    settings.setValue(\"MainWindowGeometry\", saveGeometry());\n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)\n         trayIcon->hide();\n #ifdef Q_OS_MAC"
      },
      {
        "sha": "b916df69aaeef520c9d75d5ce2a9395957aece67",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "patch": "@@ -862,32 +862,6 @@ bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n \n #endif\n \n-void saveWindowGeometry(const QString& strSetting, QWidget *parent)\n-{\n-    QSettings settings;\n-    settings.setValue(strSetting + \"Pos\", parent->pos());\n-    settings.setValue(strSetting + \"Size\", parent->size());\n-}\n-\n-void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize, QWidget *parent)\n-{\n-    QSettings settings;\n-    QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n-    QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n-\n-    parent->resize(size);\n-    parent->move(pos);\n-\n-    if ((!pos.x() && !pos.y()) || (QApplication::desktop()->screenNumber(parent) == -1))\n-    {\n-        QRect screen = QApplication::desktop()->screenGeometry();\n-        QPoint defaultPos((screen.width() - defaultSize.width()) / 2,\n-                          (screen.height() - defaultSize.height()) / 2);\n-        parent->resize(defaultSize);\n-        parent->move(defaultPos);\n-    }\n-}\n-\n void setClipboard(const QString& str)\n {\n     QApplication::clipboard()->setText(str, QClipboard::Clipboard);"
      },
      {
        "sha": "d10818d0c88e9804497266e5eb738d3948e484e0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "patch": "@@ -179,11 +179,6 @@ namespace GUIUtil\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n \n-    /** Save window size and position */\n-    void saveWindowGeometry(const QString& strSetting, QWidget *parent);\n-    /** Restore window size and position */\n-    void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n-\n     /* Convert QString to OS specific boost path through UTF-8 */\n     fs::path qstringToBoostPath(const QString &path);\n "
      },
      {
        "sha": "d895fc16630c96c621bd2c358adcb7499d156781",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "patch": "@@ -28,6 +28,7 @@\n #include <wallet/wallet.h>\n #endif\n \n+#include <QDesktopWidget>\n #include <QKeyEvent>\n #include <QMenu>\n #include <QMessageBox>\n@@ -428,7 +429,11 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     consoleFontSize(0)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n+    QSettings settings;\n+    if (!restoreGeometry(settings.value(\"RPCConsoleWindowGeometry\").toByteArray())) {\n+        // Restore failed (perhaps missing setting), center the window\n+        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+    }\n \n     ui->openDebugLogfileButton->setToolTip(ui->openDebugLogfileButton->toolTip().arg(tr(PACKAGE_NAME)));\n \n@@ -466,14 +471,14 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     ui->detailWidget->hide();\n     ui->peerHeading->setText(tr(\"Select a peer to view detailed information.\"));\n \n-    QSettings settings;\n     consoleFontSize = settings.value(fontSizeSettingsKey, QFontInfo(QFont()).pointSize()).toInt();\n     clear();\n }\n \n RPCConsole::~RPCConsole()\n {\n-    GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n+    QSettings settings;\n+    settings.setValue(\"RPCConsoleWindowGeometry\", saveGeometry());\n     RPCUnsetTimerInterface(rpcTimerInterface);\n     delete rpcTimerInterface;\n     delete ui;"
      }
    ]
  },
  {
    "sha": "fa082b4ee05e83ffa0c7c3e6e433595343707c59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA4MmI0ZWUwNWU4M2ZmYTBjN2MzZTZlNDMzNTk1MzQzNzA3YzU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-25T17:27:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-25T13:45:38Z"
      },
      "message": "doc: move gitian building to external repo\n\nThis reduces the overhead in the git repo due to binary blobs of\nthe png files.\n\nAlso, the documentation can be updated independent of any tags and\nrelease cycles.",
      "tree": {
        "sha": "bb15a80f56de9c90d7f373235590a67675cf02f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb15a80f56de9c90d7f373235590a67675cf02f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa082b4ee05e83ffa0c7c3e6e433595343707c59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa082b4ee05e83ffa0c7c3e6e433595343707c59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa082b4ee05e83ffa0c7c3e6e433595343707c59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa082b4ee05e83ffa0c7c3e6e433595343707c59/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      }
    ],
    "stats": {
      "total": 482,
      "additions": 1,
      "deletions": 481
    },
    "files": [
      {
        "sha": "3a48f4a0b397770e44f51477df854f8298ce1b75",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 481,
        "changes": 482,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa082b4ee05e83ffa0c7c3e6e433595343707c59/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa082b4ee05e83ffa0c7c3e6e433595343707c59/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=fa082b4ee05e83ffa0c7c3e6e433595343707c59",
        "patch": "@@ -1,484 +1,4 @@\n Gitian building\n ================\n \n-*Setup instructions for a Gitian build of Bitcoin Core using a Debian VM or physical system.*\n-\n-Gitian is the deterministic build process that is used to build the Bitcoin\n-Core executables. It provides a way to be reasonably sure that the\n-executables are really built from the source on GitHub. It also makes sure that\n-the same, tested dependencies are used and statically built into the executable.\n-\n-Multiple developers build the source code by following a specific descriptor\n-(\"recipe\"), cryptographically sign the result, and upload the resulting signature.\n-These results are compared and only if they match, the build is accepted and uploaded\n-to bitcoin.org.\n-\n-More independent Gitian builders are needed, which is why this guide exists.\n-It is preferred you follow these steps yourself instead of using someone else's\n-VM image to avoid 'contaminating' the build.\n-\n-Table of Contents\n-------------------\n-\n-- [Create a new VirtualBox VM](#create-a-new-virtualbox-vm)\n-- [Connecting to the VM](#connecting-to-the-vm)\n-- [Setting up Debian for Gitian building](#setting-up-debian-for-gitian-building)\n-- [Installing Gitian](#installing-gitian)\n-- [Setting up the Gitian image](#setting-up-the-gitian-image)\n-- [Getting and building the inputs](#getting-and-building-the-inputs)\n-- [Building Bitcoin Core](#building-bitcoin-core)\n-- [Building an alternative repository](#building-an-alternative-repository)\n-- [Signing externally](#signing-externally)\n-- [Uploading signatures](#uploading-signatures)\n-\n-Preparing the Gitian builder host\n----------------------------------\n-\n-The first step is to prepare the host environment that will be used to perform the Gitian builds.\n-This guide explains how to set up the environment, and how to start the builds.\n-\n-Debian Linux was chosen as the host distribution because it has a lightweight install (in contrast to Ubuntu) and is readily available.\n-Any kind of virtualization can be used, for example:\n-- [VirtualBox](https://www.virtualbox.org/) (covered by this guide)\n-- [KVM](http://www.linux-kvm.org/page/Main_Page)\n-- [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n-\n-You can also install Gitian on actual hardware instead of using virtualization.\n-\n-Create a new VirtualBox VM\n----------------------------\n-In the VirtualBox GUI click \"New\" and choose the following parameters in the wizard:\n-\n-![](gitian-building/create_new_vm.png)\n-\n-- Type: Linux, Debian (64-bit)\n-\n-![](gitian-building/create_vm_memsize.png)\n-\n-- Memory Size: at least 3000MB, anything less and the build might not complete.\n-\n-![](gitian-building/create_vm_hard_disk.png)\n-\n-- Hard Disk: Create a virtual hard disk now\n-\n-![](gitian-building/create_vm_hard_disk_file_type.png)\n-\n-- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image)\n-\n-![](gitian-building/create_vm_storage_physical_hard_disk.png)\n-\n-- Storage on physical hard disk: Dynamically Allocated\n-\n-![](gitian-building/create_vm_file_location_size.png)\n-\n-- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side\n-- Click `Create`\n-\n-After creating the VM, we need to configure it.\n-\n-- Click the `Settings` button, then go to `System` tab and `Processor` sub-tab. Increase the number of processors to the number of cores on your machine if you want builds to be faster.\n-\n-![](gitian-building/system_settings.png)\n-\n-- Go to the `Network` tab. Adapter 1 should be attached to `NAT`.\n-\n-![](gitian-building/network_settings.png)\n-\n-- Click `Advanced`, then `Port Forwarding`. We want to set up a port through which we can reach the VM to get files in and out.\n-- Create a new rule by clicking the plus icon.\n-\n-![](gitian-building/port_forwarding_rules.png)\n-\n-- Set up the new rule the following way:\n-  - Name: `SSH`\n-  - Protocol: `TCP`\n-  - Leave Host IP empty\n-  - Host Port: `22222`\n-  - Leave Guest IP empty\n-  - Guest Port: `22`\n-\n-- Click `Ok` twice to save.\n-\n-Get the [Debian 8.x net installer](http://cdimage.debian.org/mirror/cdimage/archive/8.5.0/amd64/iso-cd/debian-8.5.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n-This DVD image can be [validated](https://www.debian.org/CD/verify) using a SHA256 hashing tool, for example on\n-Unixy OSes by entering the following in a terminal:\n-\n-    echo \"ad4e8c27c561ad8248d5ebc1d36eb172f884057bfeb2c22ead823f59fa8c3dff  debian-8.5.0-amd64-netinst.iso\" | sha256sum -c\n-    # (must return OK)\n-\n-Then start the VM. On the first launch you will be asked for a CD or DVD image. Choose the downloaded ISO.\n-\n-![](gitian-building/select_startup_disk.png)\n-\n-Installing Debian\n-------------------\n-\n-This section will explain how to install Debian on the newly created VM.\n-\n-- Choose the non-graphical installer.  We do not need the graphical environment; it will only increase installation time and disk usage.\n-\n-![](gitian-building/debian_install_1_boot_menu.png)\n-\n-**Note**: Navigating in the Debian installer:\n-To keep a setting at the default and proceed, just press `Enter`.\n-To select a different button, press `Tab`.\n-\n-- Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n-\n-![](gitian-building/debian_install_2_select_a_language.png)\n-![](gitian-building/debian_install_3_select_location.png)\n-![](gitian-building/debian_install_4_configure_keyboard.png)\n-\n-- The VM will detect network settings using DHCP, this should all proceed automatically\n-- Configure the network:\n-  - Hostname `debian`.\n-  - Leave domain name empty.\n-\n-![](gitian-building/debian_install_5_configure_the_network.png)\n-![](gitian-building/debian_install_6_domain_name.png)\n-\n-- Choose a root password and enter it twice (remember it for later)\n-\n-![](gitian-building/debian_install_6a_set_up_root_password.png)\n-\n-- Name the new user `debian` (the full name doesn't matter, you can leave it empty)\n-- Set the account username as `debian`\n-\n-![](gitian-building/debian_install_7_set_up_user_fullname.png)\n-![](gitian-building/debian_install_8_set_up_username.png)\n-\n-- Choose a user password and enter it twice (remember it for later)\n-\n-![](gitian-building/debian_install_9_user_password.png)\n-\n-- The installer will set up the clock using a time server; this process should be automatic\n-- Set up the clock: choose a time zone (depends on the locale settings that you picked earlier; specifics don't matter)  \n-\n-![](gitian-building/debian_install_10_configure_clock.png)\n-\n-- Disk setup\n-  - Partitioning method: Guided - Use the entire disk\n-\n-![](gitian-building/debian_install_11_partition_disks.png)\n-\n-  - Select disk to partition: SCSI1 (0,0,0)\n-\n-![](gitian-building/debian_install_12_choose_disk.png)\n-\n-  - Partition Disks -> *All files in one partition*\n-\n-![](gitian-building/all_files_in_one_partition.png)\n-\n-  - Finish partitioning and write changes to disk -> *Yes* (`Tab`, `Enter` to select the `Yes` button)\n-\n-![](gitian-building/debian_install_14_finish.png)\n-![](gitian-building/debian_install_15_write_changes.png)\n-\n-- The base system will be installed, this will take a minute or so\n-- Choose a mirror (any will do)\n-\n-![](gitian-building/debian_install_16_choose_a_mirror.png)\n-\n-- Enter proxy information (unless you are on an intranet, leave this empty)\n-\n-![](gitian-building/debian_install_18_proxy_settings.png)\n-\n-- Wait a bit while 'Select and install software' runs\n-- Participate in popularity contest -> *No*\n-- Choose software to install. We need just the base system.\n-- Make sure only 'SSH server' and 'Standard System Utilities' are checked\n-- Uncheck 'Debian Desktop Environment' and 'Print Server'\n-\n-![](gitian-building/debian_install_19_software_selection.png)\n-\n-- Install the GRUB boot loader to the master boot record? -> Yes\n-\n-![](gitian-building/debian_install_20_install_grub.png)\n-\n-- Device for boot loader installation -> ata-VBOX_HARDDISK\n-\n-![](gitian-building/debian_install_21_install_grub_bootloader.png)\n-\n-- Installation Complete -> *Continue*\n-- After installation, the VM will reboot and you will have a working Debian VM. Congratulations!\n-\n-![](gitian-building/debian_install_22_finish_installation.png)\n-\n-\n-After Installation\n--------------------\n-The next step in the guide involves logging in as root via SSH.\n-SSH login for root users is disabled by default, so we'll enable that now.\n-\n-Login to the VM using username `root` and the root password you chose earlier.\n-You'll be presented with a screen similar to this.\n-\n-![](gitian-building/debian_root_login.png)\n-\n-Type:\n-\n-```\n-sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config\n-```\n-and press enter. Then,\n-```\n-/etc/init.d/ssh restart\n-```\n-and enter to restart SSH. Logout by typing 'logout' and pressing 'enter'.\n-\n-Connecting to the VM\n-----------------------\n-\n-After the VM has booted you can connect to it using SSH, and files can be copied from and to the VM using a SFTP utility.\n-Connect to `localhost`, port `22222` (or the port configured when installing the VM).\n-On Windows you can use [putty](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html) and [WinSCP](http://winscp.net/eng/index.php).\n-\n-For example, to connect as `root` from a Linux command prompt use\n-\n-    $ ssh root@localhost -p 22222\n-    The authenticity of host '[localhost]:22222 ([127.0.0.1]:22222)' can't be established.\n-    RSA key fingerprint is ae:f5:c8:9f:17:c6:c7:1b:c2:1b:12:31:1d:bb:d0:c7.\n-    Are you sure you want to continue connecting (yes/no)? yes\n-    Warning: Permanently added '[localhost]:22222' (RSA) to the list of known hosts.\n-    root@localhost's password: (enter root password configured during install)\n-\n-    The programs included with the Debian GNU/Linux system are free software;\n-    the exact distribution terms for each program are described in the\n-    individual files in /usr/share/doc/*/copyright.\n-\n-    Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n-    permitted by applicable law.\n-    root@debian:~#\n-\n-Replace `root` with `debian` to log in as user.\n-\n-Setting up Debian for Gitian building\n---------------------------------------\n-\n-In this section we will be setting up the Debian installation for Gitian building.\n-\n-First we need to log in as `root` to set up dependencies and make sure that our\n-user can use the sudo command. Type/paste the following in the terminal:\n-\n-```bash\n-apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring curl\n-adduser debian sudo\n-```\n-\n-Then set up LXC and the rest with the following, which is a complex jumble of settings and workarounds:\n-\n-```bash\n-# the version of lxc-start in Debian needs to run as root, so make sure\n-# that the build script can execute it without providing a password\n-echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-start\" > /etc/sudoers.d/gitian-lxc\n-echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-execute\" >> /etc/sudoers.d/gitian-lxc\n-# make /etc/rc.local script that sets up bridge between guest and host\n-echo '#!/bin/sh -e' > /etc/rc.local\n-echo 'brctl addbr br0' >> /etc/rc.local\n-echo 'ifconfig br0 10.0.3.2/24 up' >> /etc/rc.local\n-echo 'iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE' >> /etc/rc.local\n-echo 'echo 1 > /proc/sys/net/ipv4/ip_forward' >> /etc/rc.local\n-echo 'exit 0' >> /etc/rc.local\n-# make sure that USE_LXC is always set when logging in as debian,\n-# and configure LXC IP addresses\n-echo 'export USE_LXC=1' >> /home/debian/.profile\n-echo 'export GITIAN_HOST_IP=10.0.3.2' >> /home/debian/.profile\n-echo 'export LXC_GUEST_IP=10.0.3.5' >> /home/debian/.profile\n-reboot\n-```\n-\n-At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n-section only need to be performed once.\n-\n-Installing Gitian\n-------------------\n-\n-Re-login as the user `debian` that was created during installation.\n-The rest of the steps in this guide will be performed as that user.\n-\n-There is no `python-vm-builder` package in Debian, so we need to install it from source ourselves,\n-\n-```bash\n-wget http://archive.ubuntu.com/ubuntu/pool/universe/v/vm-builder/vm-builder_0.12.4+bzr494.orig.tar.gz\n-echo \"76cbf8c52c391160b2641e7120dbade5afded713afaa6032f733a261f13e6a8e  vm-builder_0.12.4+bzr494.orig.tar.gz\" | sha256sum -c\n-# (verification -- must return OK)\n-tar -zxvf vm-builder_0.12.4+bzr494.orig.tar.gz\n-cd vm-builder-0.12.4+bzr494\n-sudo python setup.py install\n-cd ..\n-```\n-\n-**Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n-\n-Clone the git repositories for bitcoin and Gitian.\n-\n-```bash\n-git clone https://github.com/devrandom/gitian-builder.git\n-git clone https://github.com/bitcoin/bitcoin\n-git clone https://github.com/bitcoin-core/gitian.sigs.git\n-```\n-\n-Setting up the Gitian image\n--------------------------\n-\n-Gitian needs a virtual image of the operating system to build in.\n-Currently this is Ubuntu Trusty x86_64.\n-This image will be copied and used every time that a build is started to\n-make sure that the build is deterministic.\n-Creating the image will take a while, but only has to be done once.\n-\n-Execute the following as user `debian`:\n-\n-```bash\n-cd gitian-builder\n-bin/make-base-vm --lxc --arch amd64 --suite trusty\n-```\n-\n-There will be a lot of warnings printed during the build of the image. These can be ignored.\n-\n-**Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n-\n-Getting and building the inputs\n---------------------------------\n-\n-At this point you have two options, you can either use the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)) or you could manually do everything by following this guide. If you're using the automated script, then run it with the \"--setup\" command. Afterwards, run it with the \"--build\" command (example: \"contrib/gitian-build.sh -b signer 0.13.0\"). Otherwise ignore this.\n-\n-Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-create-inputs-first-time-or-when-dependency-versions-change)\n-in the bitcoin repository under 'Fetch and create inputs' to install sources which require\n-manual intervention. Also optionally follow the next step: 'Seed the Gitian sources cache\n-and offline git repositories' which will fetch the remaining files required for building\n-offline.\n-\n-Building Bitcoin Core\n-----------------\n-\n-To build Bitcoin Core (for Linux, OS X and Windows) just follow the steps under 'perform\n-Gitian builds' in [doc/release-process.md](release-process.md#setup-and-perform-gitian-builds) in the bitcoin repository.\n-\n-This may take some time as it will build all the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n-\n-At any time you can check the package installation and build progress with\n-\n-```bash\n-tail -f var/install.log\n-tail -f var/build.log\n-```\n-\n-Output from `gbuild` will look something like\n-\n-    Initialized empty Git repository in /home/debian/gitian-builder/inputs/bitcoin/.git/\n-    remote: Counting objects: 57959, done.\n-    remote: Total 57959 (delta 0), reused 0 (delta 0), pack-reused 57958\n-    Receiving objects: 100% (57959/57959), 53.76 MiB | 484.00 KiB/s, done.\n-    Resolving deltas: 100% (41590/41590), done.\n-    From https://github.com/bitcoin/bitcoin\n-    ... (new tags, new branch etc)\n-    --- Building for trusty amd64 ---\n-    Stopping target if it is up\n-    Making a new image copy\n-    stdin: is not a tty\n-    Starting target\n-    Checking if target is up\n-    Preparing build environment\n-    Updating apt-get repository (log in var/install.log)\n-    Installing additional packages (log in var/install.log)\n-    Grabbing package manifest\n-    stdin: is not a tty\n-    Creating build script (var/build-script)\n-    lxc-start: Connection refused - inotify event with no name (mask 32768)\n-    Running build script (log in var/build.log)\n-\n-Building an alternative repository\n------------------------------------\n-\n-If you want to do a test build of a pull on GitHub it can be useful to point\n-the Gitian builder at an alternative repository, using the same descriptors\n-and inputs.\n-\n-For example:\n-```bash\n-URL=https://github.com/laanwj/bitcoin.git\n-COMMIT=2014_03_windows_unicode_path\n-./bin/gbuild --commit bitcoin=${COMMIT} --url bitcoin=${URL} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-./bin/gbuild --commit bitcoin=${COMMIT} --url bitcoin=${URL} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-./bin/gbuild --commit bitcoin=${COMMIT} --url bitcoin=${URL} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-```\n-\n-Building fully offline\n------------------------\n-\n-For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository\n-and the bitcoin git repository with the desired tag must both be available locally, and then gbuild must be\n-told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or\n-manually disabling gitian-builder's use of apt-get to update the VM build environment.\n-\n-To configure apt-cacher-ng as an offline cacher, you will need to first populate its cache with the relevant\n-files. You must additionally patch target-bin/bootstrap-fixup to set its apt sources to something other than\n-plain archive.ubuntu.com: us.archive.ubuntu.com works.\n-\n-So, if you use LXC:\n-\n-```bash\n-export PATH=\"$PATH\":/path/to/gitian-builder/libexec\n-export USE_LXC=1\n-cd /path/to/gitian-builder\n-./libexec/make-clean-vm --suite trusty --arch amd64\n-\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root apt-get update\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root \\\n-  -e DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n-  $( sed -ne '/^packages:/,/[^-] .*/ {/^- .*/{s/\"//g;s/- //;p}}' ../bitcoin/contrib/gitian-descriptors/*|sort|uniq )\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root apt-get -q -y purge grub\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n-```\n-\n-And then set offline mode for apt-cacher-ng:\n-\n-```\n-/etc/apt-cacher-ng/acng.conf\n-[...]\n-Offlinemode: 1\n-[...]\n-\n-service apt-cacher-ng restart\n-```\n-\n-Then when building, override the remote URLs that gbuild would otherwise pull from the Gitian descriptors::\n-```bash\n-\n-cd /some/root/path/\n-git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n-\n-BTCPATH=/some/root/path/bitcoin\n-SIGPATH=/some/root/path/bitcoin-detached-sigs\n-\n-./bin/gbuild --url bitcoin=${BTCPATH},signature=${SIGPATH} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-```\n-\n-Signing externally\n--------------------\n-\n-If you want to do the PGP signing on another device, that's also possible; just define `SIGNER` as mentioned\n-and follow the steps in the build process as normal.\n-\n-    gpg: skipped \"laanwj\": secret key not available\n-\n-When you execute `gsign` you will get an error from GPG, which can be ignored. Copy the resulting `.assert` files\n-in `gitian.sigs` to your signing machine and do\n-\n-```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n-    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n-```\n-\n-This will create the `.sig` files that can be committed together with the `.assert` files to assert your\n-Gitian build.\n-\n-Uploading signatures\n----------------------\n-\n-After building and signing you can push your signatures (both the `.assert` and `.assert.sig` files) to the\n-[bitcoin-core/gitian.sigs](https://github.com/bitcoin-core/gitian.sigs/) repository, or if that's not possible create a pull\n-request. You can also mail the files to Wladimir (laanwj@gmail.com) and he will commit them.\n+This file was moved to [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md) at [https://github.com/bitcoin-core/docs](https://github.com/bitcoin-core/docs)."
      },
      {
        "sha": "8cbb0d8adc1deda1c7c4023611b65521e054ff69",
        "filename": "doc/gitian-building/all_files_in_one_partition.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/all_files_in_one_partition.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/all_files_in_one_partition.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/all_files_in_one_partition.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "dd22428e176b874afb2f5b9d1b018592fb0175d0",
        "filename": "doc/gitian-building/create_new_vm.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_new_vm.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_new_vm.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_new_vm.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "5f77206b6fa8f9f0f1bbd6d02819d67bf18327ad",
        "filename": "doc/gitian-building/create_vm_file_location_size.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_file_location_size.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_file_location_size.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_file_location_size.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "8e29816fab9e7c8f97338ed43f0893f655134a5f",
        "filename": "doc/gitian-building/create_vm_hard_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "a157211cf5baf909149e73fddfc2556305f4b123",
        "filename": "doc/gitian-building/create_vm_hard_disk_file_type.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk_file_type.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "6f42cda73f3cabb02e39ae0309ac67f419a168c7",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "cee16a6c63b4f2dcd592ae8c9cdc02f278fbad81",
        "filename": "doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_storage_physical_hard_disk.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "7cda038ae47f97ddfaa905478599cafc6572dd1f",
        "filename": "doc/gitian-building/debian_install_10_configure_clock.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_10_configure_clock.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_10_configure_clock.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_10_configure_clock.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "2a648c517f429fb937275d5444a58f4830e8eae4",
        "filename": "doc/gitian-building/debian_install_11_partition_disks.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_11_partition_disks.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_11_partition_disks.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_11_partition_disks.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "0f3acc498e3e9cc04692a9c557a8eecb5029dc25",
        "filename": "doc/gitian-building/debian_install_12_choose_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_12_choose_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_12_choose_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_12_choose_disk.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "c8ef0b37ad6232f87593ea448beaba089b568a91",
        "filename": "doc/gitian-building/debian_install_14_finish.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_14_finish.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_14_finish.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_14_finish.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "d8de00dec68c826485034c698079e5808f7dadfd",
        "filename": "doc/gitian-building/debian_install_15_write_changes.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_15_write_changes.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_15_write_changes.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_15_write_changes.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "0bd985b38c113ed9bbbe03808ace284476680edc",
        "filename": "doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_16_choose_a_mirror.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "2c19919f64b62d89883dc8e1308f179978b95ca4",
        "filename": "doc/gitian-building/debian_install_18_proxy_settings.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_18_proxy_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_18_proxy_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_18_proxy_settings.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "5430456b14f098d9e3561653352b826d19a2c38a",
        "filename": "doc/gitian-building/debian_install_19_software_selection.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_19_software_selection.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_19_software_selection.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_19_software_selection.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "216502e1c6eb6930ce60c1a36e7476e6fb8781d9",
        "filename": "doc/gitian-building/debian_install_1_boot_menu.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_1_boot_menu.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_1_boot_menu.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_1_boot_menu.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "d853c1587188c5fd4ede94ab00f9d8b6731674ac",
        "filename": "doc/gitian-building/debian_install_20_install_grub.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_20_install_grub.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_20_install_grub.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_20_install_grub.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "493ab806a673f5c8ee47db0bb5de6af0d5042b03",
        "filename": "doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_21_install_grub_bootloader.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "7c4445585bc9982a5015959dba70d73b01885e08",
        "filename": "doc/gitian-building/debian_install_22_finish_installation.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_22_finish_installation.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_22_finish_installation.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_22_finish_installation.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "0228ae2c011daeababc75b915a12b28b702456c0",
        "filename": "doc/gitian-building/debian_install_2_select_a_language.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_2_select_a_language.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_2_select_a_language.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_2_select_a_language.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "7b18fba97577b521944f909ed57fd251942a9eab",
        "filename": "doc/gitian-building/debian_install_3_select_location.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_3_select_location.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_3_select_location.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_3_select_location.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "8e46117de4879a6de8b276813bef12c219cb4e8b",
        "filename": "doc/gitian-building/debian_install_4_configure_keyboard.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_4_configure_keyboard.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "8e3720f24322a54ef33893e8eff95383158bf3d9",
        "filename": "doc/gitian-building/debian_install_5_configure_the_network.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_5_configure_the_network.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_5_configure_the_network.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_5_configure_the_network.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "7a986d92f48ca3755e37993d098053321109751d",
        "filename": "doc/gitian-building/debian_install_6_domain_name.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_6_domain_name.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_6_domain_name.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_6_domain_name.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "dcade119676ed7e0c0f92cff6d6a064929a07a07",
        "filename": "doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_6a_set_up_root_password.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "6763c6e08ade2b17f050da257a76132f916e38f5",
        "filename": "doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_7_set_up_user_fullname.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "bb04de96d23bdaa3e29fbe19891e42b881dd0a99",
        "filename": "doc/gitian-building/debian_install_8_set_up_username.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_8_set_up_username.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_8_set_up_username.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_8_set_up_username.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "981f1181d79d0d7fe2138f036d0f1bb41ec472fa",
        "filename": "doc/gitian-building/debian_install_9_user_password.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_9_user_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_install_9_user_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_9_user_password.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "14cdd5ba5b52cc32fbc0da62cf3671c3679b8d79",
        "filename": "doc/gitian-building/debian_root_login.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_root_login.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/debian_root_login.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_root_login.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "9e714fd15451837980b9d12a931c294fc962b2a2",
        "filename": "doc/gitian-building/network_settings.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/network_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/network_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/network_settings.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "9e1fa2af20f48d482892b722b7288600bece322a",
        "filename": "doc/gitian-building/port_forwarding_rules.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/port_forwarding_rules.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/port_forwarding_rules.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/port_forwarding_rules.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "59bc093e2c3d35bee0d1bdc50f11f2cf2a6fdafe",
        "filename": "doc/gitian-building/select_startup_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/select_startup_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/select_startup_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/select_startup_disk.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "a5720ef3a345d9a52a64298fd68c3c8402f86b38",
        "filename": "doc/gitian-building/system_settings.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/system_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb/doc/gitian-building/system_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/system_settings.png?ref=8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      }
    ]
  },
  {
    "sha": "67879b7c443144e479c763f64abb9c1ed7e44eaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Nzg3OWI3YzQ0MzE0NGU0NzljNzYzZjY0YWJiOWMxZWQ3ZTQ0ZWFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T10:27:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T10:27:37Z"
      },
      "message": "Merge #11377: Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds\n\n28d4542 Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (Matt Corallo)\n\nPull request description:\n\n  Does what it says on the tin.\n\nTree-SHA512: 324b8da8a9f9a35d3ade74f6c587f981894a085dfea9d64f78de745d5e6ec05c3a7bced487e9aad9c8a48151cd14969a0806f30f80b621edfce0da082fe6f4be",
      "tree": {
        "sha": "49d2b2a41279c49fe5b1771120cf54e51d53684b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49d2b2a41279c49fe5b1771120cf54e51d53684b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67879b7c443144e479c763f64abb9c1ed7e44eaa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZyiuZAAoJEB5K7WKYbNJdrC0IAJwkSymBmYZtsG1qXTc0Ls7S\nq6rx7Y5ICAKApu2jg9uD0+7qCFsknqZhxR90R95hRWMd1IOluCiHBYpbkXh2uIWP\nf0l1784ES8dT62oRhdopncnUf7M6IalrZ+Jx2ZW7bOzZuQQN5xDBAa2gkmXLETPj\niBVVWtFKykrT9NJizy/i3wTUUqFa1pNeyC/ZdIpGt8QrHKV9Q+mhzTdpwCUT/wfB\nG4QorzjEbqfTytVX+/quoODeUHGxvc5k9nQwIr4hcLM6VBOE2F2WsR7noajf3D+0\n5yHhJp9PiK//XRqgQSTALMgbu2Bg7Ja/ZpF7Wxeds/SAc0rg84jpSeZiasiG4fc=\n=csn8\n-----END PGP SIGNATURE-----",
        "payload": "tree 49d2b2a41279c49fe5b1771120cf54e51d53684b\nparent 8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb\nparent 28d4542a0ac77a30a242d0568e580a5b437f53fa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506421642 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506421657 +0200\n\nMerge #11377: Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds\n\n28d4542 Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (Matt Corallo)\n\nPull request description:\n\n  Does what it says on the tin.\n\nTree-SHA512: 324b8da8a9f9a35d3ade74f6c587f981894a085dfea9d64f78de745d5e6ec05c3a7bced487e9aad9c8a48151cd14969a0806f30f80b621edfce0da082fe6f4be\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67879b7c443144e479c763f64abb9c1ed7e44eaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67879b7c443144e479c763f64abb9c1ed7e44eaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67879b7c443144e479c763f64abb9c1ed7e44eaa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      },
      {
        "sha": "28d4542a0ac77a30a242d0568e580a5b437f53fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4542a0ac77a30a242d0568e580a5b437f53fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28d4542a0ac77a30a242d0568e580a5b437f53fa"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3b62a106031c86f431981d4bae5f5447ef0efea1",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67879b7c443144e479c763f64abb9c1ed7e44eaa/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67879b7c443144e479c763f64abb9c1ed7e44eaa/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=67879b7c443144e479c763f64abb9c1ed7e44eaa",
        "patch": "@@ -249,6 +249,7 @@ EXTRA_DIST += \\\n     test/util/data/txcreatemultisig3.json \\\n     test/util/data/txcreatemultisig4.hex \\\n     test/util/data/txcreatemultisig4.json \\\n+    test/util/data/txcreatemultisig5.json \\\n     test/util/data/txcreateoutpubkey1.hex \\\n     test/util/data/txcreateoutpubkey1.json \\\n     test/util/data/txcreateoutpubkey2.hex \\"
      },
      {
        "sha": "e4f44435ba292312e9d755d1a468bf09c6bf835b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67879b7c443144e479c763f64abb9c1ed7e44eaa/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67879b7c443144e479c763f64abb9c1ed7e44eaa/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=67879b7c443144e479c763f64abb9c1ed7e44eaa",
        "patch": "@@ -310,6 +310,9 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n     }\n \n     if (bSegWit) {\n+        if (!pubkey.IsCompressed()) {\n+            throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n+        }\n         // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n         scriptPubKey = GetScriptForWitness(scriptPubKey);\n     }\n@@ -375,6 +378,11 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     CScript scriptPubKey = GetScriptForMultisig(required, pubkeys);\n \n     if (bSegWit) {\n+        for (CPubKey& pubkey : pubkeys) {\n+            if (!pubkey.IsCompressed()) {\n+                throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n+            }\n+        }\n         // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n         scriptPubKey = GetScriptForWitness(scriptPubKey);\n     }"
      },
      {
        "sha": "89b28bba6ced9ccd0633221405bc27cfaeac23dd",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67879b7c443144e479c763f64abb9c1ed7e44eaa/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67879b7c443144e479c763f64abb9c1ed7e44eaa/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=67879b7c443144e479c763f64abb9c1ed7e44eaa",
        "patch": "@@ -261,6 +261,13 @@\n     \"output_cmp\": \"txcreateoutpubkey3.json\",\n     \"description\": \"Creates a new transaction with a single pay-to-pub-key output, wrapped in P2SH (output as json)\"\n   },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-json\", \"-create\", \"outpubkey=0:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:WS\", \"nversion=1\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: Uncompressed pubkeys are not useable for SegWit outputs\",\n+    \"description\": \"Creates a new transaction with a single pay-to-pub-key output, wrapped in P2SH (output as json)\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n@@ -388,5 +395,16 @@\n     \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:02df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb485:WS\", \"nversion=1\"],\n     \"output_cmp\": \"txcreatemultisig4.json\",\n     \"description\": \"Creates a new transaction with a single 2-of-3 multisig in a P2WSH output, wrapped in P2SH (output in json)\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:S\"],\n+    \"output_cmp\": \"txcreatemultisig5.json\",\n+    \"description\": \"Uncompressed pubkeys should work just fine for non-witness outputs\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:WS\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: Uncompressed pubkeys are not useable for SegWit outputs\",\n+    \"description\": \"Ensure adding witness outputs with uncompressed pubkeys fails\"\n   }\n ]"
      },
      {
        "sha": "20e9bb077bbf5bc85bc4a60876e7061dbd7e6960",
        "filename": "test/util/data/txcreatemultisig5.json",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67879b7c443144e479c763f64abb9c1ed7e44eaa/test/util/data/txcreatemultisig5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67879b7c443144e479c763f64abb9c1ed7e44eaa/test/util/data/txcreatemultisig5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig5.json?ref=67879b7c443144e479c763f64abb9c1ed7e44eaa",
        "patch": "@@ -0,0 +1,26 @@\n+{\n+    \"txid\": \"813cf75e1f08debd242ef7c8192b7d478fb651355209369499a0de779ba7eb2f\",\n+    \"hash\": \"813cf75e1f08debd242ef7c8192b7d478fb651355209369499a0de779ba7eb2f\",\n+    \"version\": 2,\n+    \"size\": 42,\n+    \"vsize\": 42,\n+    \"locktime\": 0,\n+    \"vin\": [\n+    ],\n+    \"vout\": [\n+        {\n+            \"value\": 1.00000000,\n+            \"n\": 0,\n+            \"scriptPubKey\": {\n+                \"asm\": \"OP_HASH160 a4051c02398868af83f28f083208fae99a769263 OP_EQUAL\",\n+                \"hex\": \"a914a4051c02398868af83f28f083208fae99a76926387\",\n+                \"reqSigs\": 1,\n+                \"type\": \"scripthash\",\n+                \"addresses\": [\n+                    \"3GeGs1eHUxPz5YyuFe9WPpXid2UsUb5Jos\"\n+                ]\n+            }\n+        }\n+    ],\n+    \"hex\": \"02000000000100e1f5050000000017a914a4051c02398868af83f28f083208fae99a7692638700000000\"\n+}"
      }
    ]
  },
  {
    "sha": "22f816ef4dd57785627d801c247714cace7fc5b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmY4MTZlZjRkZDU3Nzg1NjI3ZDgwMWMyNDc3MTRjYWNlN2ZjNWI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T08:36:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:00:14Z"
      },
      "message": "net: Improve and document SOCKS code\n\nMake the SOCKS code more consistent, and document the constants used.",
      "tree": {
        "sha": "eae65c49d1361f195a80a8a79a417dfa91d5bd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eae65c49d1361f195a80a8a79a417dfa91d5bd00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22f816ef4dd57785627d801c247714cace7fc5b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22f816ef4dd57785627d801c247714cace7fc5b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22f816ef4dd57785627d801c247714cace7fc5b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22f816ef4dd57785627d801c247714cace7fc5b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 89,
      "deletions": 36
    },
    "files": [
      {
        "sha": "914124cb178183bd7ae726e610d97cdc6b410c74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 36,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22f816ef4dd57785627d801c247714cace7fc5b5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22f816ef4dd57785627d801c247714cace7fc5b5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=22f816ef4dd57785627d801c247714cace7fc5b5",
        "patch": "@@ -184,6 +184,48 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+/** SOCKS version */\n+enum SOCKSVersion: uint8_t {\n+    SOCKS4 = 0x04,\n+    SOCKS5 = 0x05\n+};\n+\n+/** Values defined for METHOD in RFC1928 */\n+enum SOCKS5Method: uint8_t {\n+    NOAUTH = 0x00,        //! No authentication required\n+    GSSAPI = 0x01,        //! GSSAPI\n+    USER_PASS = 0x02,     //! Username/password\n+    NO_ACCEPTABLE = 0xff, //! No acceptable methods\n+};\n+\n+/** Values defined for CMD in RFC1928 */\n+enum SOCKS5Command: uint8_t {\n+    CONNECT = 0x01,\n+    BIND = 0x02,\n+    UDP_ASSOCIATE = 0x03\n+};\n+\n+/** Values defined for REP in RFC1928 */\n+enum SOCKS5Reply: uint8_t {\n+    SUCCEEDED = 0x00,        //! Succeeded\n+    GENFAILURE = 0x01,       //! General failure\n+    NOTALLOWED = 0x02,       //! Connection not allowed by ruleset\n+    NETUNREACHABLE = 0x03,   //! Network unreachable\n+    HOSTUNREACHABLE = 0x04,  //! Network unreachable\n+    CONNREFUSED = 0x05,      //! Connection refused\n+    TTLEXPIRED = 0x06,       //! TTL expired\n+    CMDUNSUPPORTED = 0x07,   //! Command not supported\n+    ATYPEUNSUPPORTED = 0x08, //! Address type not supported\n+};\n+\n+/** Values defined for ATYPE in RFC1928 */\n+enum SOCKS5Atyp: uint8_t {\n+    IPV4 = 0x01,\n+    DOMAINNAME = 0x03,\n+    IPV6 = 0x04,\n+};\n+\n+/** Status codes that can be returned by InterruptibleRecv */\n enum class IntrRecvError {\n     OK,\n     Timeout,\n@@ -203,15 +245,15 @@ enum class IntrRecvError {\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n     // Maximum time to wait in one select call. It will take up until this time (in millis)\n     // to break off in case of an interruption.\n     const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n-        ssize_t ret = recv(hSocket, data, len, 0); // Optimistically try the recv first\n+        ssize_t ret = recv(hSocket, (char*)data, len, 0); // Optimistically try the recv first\n         if (ret > 0) {\n             len -= ret;\n             data += ret;\n@@ -242,24 +284,35 @@ static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, cons\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n+/** Credentials for proxy authentication */\n struct ProxyCredentials\n {\n     std::string username;\n     std::string password;\n };\n \n-std::string Socks5ErrorString(int err)\n+/** Convert SOCKS5 reply to a an error message */\n+std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {\n-        case 0x01: return \"general failure\";\n-        case 0x02: return \"connection not allowed\";\n-        case 0x03: return \"network unreachable\";\n-        case 0x04: return \"host unreachable\";\n-        case 0x05: return \"connection refused\";\n-        case 0x06: return \"TTL expired\";\n-        case 0x07: return \"protocol error\";\n-        case 0x08: return \"address type not supported\";\n-        default:   return \"unknown\";\n+        case SOCKS5Reply::GENFAILURE:\n+            return \"general failure\";\n+        case SOCKS5Reply::NOTALLOWED:\n+            return \"connection not allowed\";\n+        case SOCKS5Reply::NETUNREACHABLE:\n+            return \"network unreachable\";\n+        case SOCKS5Reply::HOSTUNREACHABLE:\n+            return \"host unreachable\";\n+        case SOCKS5Reply::CONNREFUSED:\n+            return \"connection refused\";\n+        case SOCKS5Reply::TTLEXPIRED:\n+            return \"TTL expired\";\n+        case SOCKS5Reply::CMDUNSUPPORTED:\n+            return \"protocol error\";\n+        case SOCKS5Reply::ATYPEUNSUPPORTED:\n+            return \"address type not supported\";\n+        default:\n+            return \"unknown\";\n     }\n }\n \n@@ -274,34 +327,34 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     // Accepted authentication methods\n     std::vector<uint8_t> vSocks5Init;\n-    vSocks5Init.push_back(0x05);\n+    vSocks5Init.push_back(SOCKSVersion::SOCKS5);\n     if (auth) {\n-        vSocks5Init.push_back(0x02); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n-        vSocks5Init.push_back(0x02); // X'02' USERNAME/PASSWORD (RFC1929)\n+        vSocks5Init.push_back(0x02); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n+        vSocks5Init.push_back(SOCKS5Method::USER_PASS);\n     } else {\n-        vSocks5Init.push_back(0x01); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n+        vSocks5Init.push_back(0x01); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet1[2];\n+    uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n-    if (pchRet1[0] != 0x05) {\n+    if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n-    if (pchRet1[1] == 0x02 && auth) {\n+    if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n         // Perform username/password authentication (as described in RFC1929)\n         std::vector<uint8_t> vAuth;\n-        vAuth.push_back(0x01);\n+        vAuth.push_back(0x01); // Current (and only) version of user/pass subnegotiation\n         if (auth->username.size() > 255 || auth->password.size() > 255)\n             return error(\"Proxy username or password too long\");\n         vAuth.push_back(auth->username.size());\n@@ -314,7 +367,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n-        char pchRetA[2];\n+        uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n@@ -323,17 +376,17 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n-    } else if (pchRet1[1] == 0x00) {\n+    } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n         CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n-    vSocks5.push_back(0x05); // VER protocol version\n-    vSocks5.push_back(0x01); // CMD CONNECT\n-    vSocks5.push_back(0x00); // RSV Reserved\n-    vSocks5.push_back(0x03); // ATYP DOMAINNAME\n+    vSocks5.push_back(SOCKSVersion::SOCKS5); // VER protocol version\n+    vSocks5.push_back(SOCKS5Command::CONNECT); // CMD CONNECT\n+    vSocks5.push_back(0x00); // RSV Reserved must be 0\n+    vSocks5.push_back(SOCKS5Atyp::DOMAINNAME); // ATYP DOMAINNAME\n     vSocks5.push_back(strDest.size()); // Length<=255 is checked at beginning of function\n     vSocks5.insert(vSocks5.end(), strDest.begin(), strDest.end());\n     vSocks5.push_back((port >> 8) & 0xFF);\n@@ -343,7 +396,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet2[4];\n+    uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n@@ -355,26 +408,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error while reading proxy response\");\n         }\n     }\n-    if (pchRet2[0] != 0x05) {\n+    if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n-    if (pchRet2[1] != 0x00) {\n+    if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n-    if (pchRet2[2] != 0x00) {\n+    if (pchRet2[2] != 0x00) { // Reserved field must be 0\n         CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n-    char pchRet3[256];\n+    uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x03:\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::DOMAINNAME:\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {"
      }
    ]
  },
  {
    "sha": "0cd9273fd959c6742574259d026039f7da0309a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2Q5MjczZmQ5NTljNjc0MjU3NDI1OWQwMjYwMzlmN2RhMDMwOWEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-07T08:50:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:12:47Z"
      },
      "message": "rpc: Prevent `dumpwallet` from overwriting files\n\nPrevent arbitrary files from being overwritten. There have been reports\nthat users have overwritten wallet files this way. It may also avoid\nother security issues.\n\nFixes #9934. Adds mention to release notes and adds a test.",
      "tree": {
        "sha": "575776245a1af0acffb9f22a987ef7bbf1d86eba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/575776245a1af0acffb9f22a987ef7bbf1d86eba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cd9273fd959c6742574259d026039f7da0309a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd9273fd959c6742574259d026039f7da0309a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cd9273fd959c6742574259d026039f7da0309a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd9273fd959c6742574259d026039f7da0309a2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c9015bca861085f76ca3c045e17d0591aa6c8b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4ecca7897cb7db793ee082b3d732e85ec9040649",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9273fd959c6742574259d026039f7da0309a2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9273fd959c6742574259d026039f7da0309a2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=0cd9273fd959c6742574259d026039f7da0309a2",
        "patch": "@@ -83,6 +83,9 @@ Low-level RPC changes\n   * `getwalletinfo`\n   * `getmininginfo`\n \n+- `dumpwallet` no longer allows overwriting files. This is a security measure\n+  as well as prevents dangerous user mistakes.\n+\n Credits\n =======\n "
      },
      {
        "sha": "1123fd6dbb18084e11b490738fa1829076566257",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9273fd959c6742574259d026039f7da0309a2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9273fd959c6742574259d026039f7da0309a2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0cd9273fd959c6742574259d026039f7da0309a2",
        "patch": "@@ -600,7 +600,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n+            \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n             \"\\nResult:\\n\"\n@@ -616,9 +616,19 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    std::ofstream file;\n     boost::filesystem::path filepath = request.params[0].get_str();\n     filepath = boost::filesystem::absolute(filepath);\n+\n+    /* Prevent arbitrary files from being overwritten. There have been reports\n+     * that users have overwritten wallet files this way:\n+     * https://github.com/bitcoin/bitcoin/issues/9934\n+     * It may also avoid other security issues.\n+     */\n+    if (boost::filesystem::exists(filepath)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+    }\n+\n+    std::ofstream file;\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");"
      },
      {
        "sha": "12db95e5d999e3c14bc8a1ca4bd735fc0bbbd949",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9273fd959c6742574259d026039f7da0309a2/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9273fd959c6742574259d026039f7da0309a2/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=0cd9273fd959c6742574259d026039f7da0309a2",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -105,5 +105,8 @@ def run_test (self):\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n \n+        # Overwriting should fail\n+        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjhlMDk1OTlkYjZmZDM0ZmE1ZDgzMTYwNjIwY2IyZGRiMDVmMDlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:16:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:16:50Z"
      },
      "message": "Merge #11288: More user-friendly error message when partially signing\n\ndf10edf More user-friendly error message when partially signing (MeshCollider)\n\nPull request description:\n\n  When partially signing a transaction using `signrawtransaction`, if the wallet doesn't have access to a key, it will output a scary error message `\"error\": \"Operation not valid with the current stack size\"`, yet it will partially sign the transaction anyway. This puts a lot of users off, because they don't realise the signing actually succeeded for some inputs. This catches that specific error when signing, and outputs a friendlier message which says `Unable to sign input, invalid stack size (possibly missing key)`.\n\n  This is the best way I could think of to fix the issue, but please let me know if you come up with a better way to do it :)\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/9988\n\nTree-SHA512: 65e1d4a49caa4202e1357b0b3f42329d76456c7b4286d63232226e03267809027b0c44e0faaa1da8b86c9ad677e3a3d655698a24fc870d6a661203c9f56ef95b",
      "tree": {
        "sha": "58ec91131f64a18d44ff1ec059c3a8675a443273",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58ec91131f64a18d44ff1ec059c3a8675a443273"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZymFSAAoJEB5K7WKYbNJdSsoH/0kAIWAammXkyOPrCLYLEtoI\n5ZHoDfJkcqGyye4MRzxfdTDmu9HuaBRh3/5FL46EjepUNW5es908rty4ScKIhkap\nX2gFKefJKh72RCQfvmE876Wx2lpWIRoXjvpIe7Ghm36GyAzTcWaVmBc3RktTvVve\nrxFbaOiqfBrK5gmpnV8wnqV25nDb5VA9lUTWdUDAj8AnaH5HfwOy/GO0j1wkZdST\nAdGKBSwbYgydXy0uRhPXAs13x6dMZI8hL5fLv6z+2cvPtoYGxmho0HVlDVu5dLmo\n7seREtIFXHkLpFgHpEDRpkT9Ymdnp2wY7pWg2V+3rcLCYq8RUsybl0Tue7Ni8W8=\n=fM3R\n-----END PGP SIGNATURE-----",
        "payload": "tree 58ec91131f64a18d44ff1ec059c3a8675a443273\nparent 67879b7c443144e479c763f64abb9c1ed7e44eaa\nparent df10edfd03fe4c9d1eca43a17ac4c54a14ac4832\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506435406 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506435410 +0200\n\nMerge #11288: More user-friendly error message when partially signing\n\ndf10edf More user-friendly error message when partially signing (MeshCollider)\n\nPull request description:\n\n  When partially signing a transaction using `signrawtransaction`, if the wallet doesn't have access to a key, it will output a scary error message `\"error\": \"Operation not valid with the current stack size\"`, yet it will partially sign the transaction anyway. This puts a lot of users off, because they don't realise the signing actually succeeded for some inputs. This catches that specific error when signing, and outputs a friendlier message which says `Unable to sign input, invalid stack size (possibly missing key)`.\n\n  This is the best way I could think of to fix the issue, but please let me know if you come up with a better way to do it :)\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/9988\n\nTree-SHA512: 65e1d4a49caa4202e1357b0b3f42329d76456c7b4286d63232226e03267809027b0c44e0faaa1da8b86c9ad677e3a3d655698a24fc870d6a661203c9f56ef95b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8e09599db6fd34fa5d83160620cb2ddb05f09f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67879b7c443144e479c763f64abb9c1ed7e44eaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67879b7c443144e479c763f64abb9c1ed7e44eaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67879b7c443144e479c763f64abb9c1ed7e44eaa"
      },
      {
        "sha": "df10edfd03fe4c9d1eca43a17ac4c54a14ac4832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df10edfd03fe4c9d1eca43a17ac4c54a14ac4832",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df10edfd03fe4c9d1eca43a17ac4c54a14ac4832"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2fc6a357a5952b144ebc4efebf68483d152a7b4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8e09599db6fd34fa5d83160620cb2ddb05f09f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8e09599db6fd34fa5d83160620cb2ddb05f09f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
        "patch": "@@ -873,7 +873,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n-            TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n+            } else {\n+                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n+            }\n         }\n     }\n     bool fComplete = vErrors.empty();"
      }
    ]
  },
  {
    "sha": "dc597bb895ef4b74d8564253813c2d140e76c2d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzU5N2JiODk1ZWY0Yjc0ZDg1NjQyNTM4MTNjMmQxNDBlNzZjMmQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:24:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:24:28Z"
      },
      "message": "Merge #11225: wallet: update stored witness in AddToWallet\n\nd01a968 wallet: update stored witness in AddToWallet (Suhas Daftuar)\n\nPull request description:\n\n  Replace witness-stripped wallet transactions with full transactions;\n  this can happen when upgrading from a pre-segwit wallet to a segwit-\n  aware wallet.\n\nTree-SHA512: a348b16b38ae738fa75cf7d3ff50ebd0d0071d5d6061c9a10dc3325fc34f6bc96a67aea21fde460ca20f6178768ee0af04d6d8785b35647f436a9083c4270b07",
      "tree": {
        "sha": "61e11723274b0de026dfff59c350a2243d69aab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61e11723274b0de026dfff59c350a2243d69aab4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc597bb895ef4b74d8564253813c2d140e76c2d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZymMcAAoJEB5K7WKYbNJdokgIAKaAP9yc3uKlu/sK6G+LPrQ6\nVXs24sAZz/U8OwaAsvUywk9TagMlHgXR4zmU7jHh2LmTbddXaiTKFLEoGPRqccy8\nmDONqQL5w0Z9mFIfWwuIgot9wQDa7vPi64tUNvZ0Wl7w7zpk9oIqZdpkoCQT1Nq3\naQM0DCsxeHDto1CAw+scICDk6rhzbdE8fH+wl/6Hy0CrKdnyiqmtsmqD/xufFyAL\nYkM9nkZR3qXjGRbOvqAQ2ioZa8RCOsnrCaW+SSQ9LYih9W2yQL8CLPd7VHxc2YUb\ni0H/3QeAYL1mU93OEA/+9IgqWPWKMRDIKU6QgO4jRwJWxEUKT/PhGPKsCbOGLjE=\n=o/AJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 61e11723274b0de026dfff59c350a2243d69aab4\nparent 0f8e09599db6fd34fa5d83160620cb2ddb05f09f\nparent d01a9682b126a5f83c7311e652e6e62f2c2e1d20\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506435861 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506435868 +0200\n\nMerge #11225: wallet: update stored witness in AddToWallet\n\nd01a968 wallet: update stored witness in AddToWallet (Suhas Daftuar)\n\nPull request description:\n\n  Replace witness-stripped wallet transactions with full transactions;\n  this can happen when upgrading from a pre-segwit wallet to a segwit-\n  aware wallet.\n\nTree-SHA512: a348b16b38ae738fa75cf7d3ff50ebd0d0071d5d6061c9a10dc3325fc34f6bc96a67aea21fde460ca20f6178768ee0af04d6d8785b35647f436a9083c4270b07\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc597bb895ef4b74d8564253813c2d140e76c2d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc597bb895ef4b74d8564253813c2d140e76c2d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc597bb895ef4b74d8564253813c2d140e76c2d6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8e09599db6fd34fa5d83160620cb2ddb05f09f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8e09599db6fd34fa5d83160620cb2ddb05f09f"
      },
      {
        "sha": "d01a9682b126a5f83c7311e652e6e62f2c2e1d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d01a9682b126a5f83c7311e652e6e62f2c2e1d20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d01a9682b126a5f83c7311e652e6e62f2c2e1d20"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d83203f4095c3f965fa854bfe79c29b103612bc2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc597bb895ef4b74d8564253813c2d140e76c2d6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc597bb895ef4b74d8564253813c2d140e76c2d6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dc597bb895ef4b74d8564253813c2d140e76c2d6",
        "patch": "@@ -915,6 +915,15 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n             wtx.fFromMe = wtxIn.fFromMe;\n             fUpdated = true;\n         }\n+        // If we have a witness-stripped version of this transaction, and we\n+        // see a new version with a witness, then we must be upgrading a pre-segwit\n+        // wallet.  Store the new version of the transaction with the witness,\n+        // as the stripped-version must be invalid.\n+        // TODO: Store all versions of the transaction, instead of just one.\n+        if (wtxIn.tx->HasWitness() && !wtx.tx->HasWitness()) {\n+            wtx.SetTx(wtxIn.tx);\n+            fUpdated = true;\n+        }\n     }\n \n     //// debug print"
      }
    ]
  },
  {
    "sha": "d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGNkYmQ2ZmI2YWMzNjYzZDA2OTMwN2M0ZmQwMDc4ZjRlY2YwMjQ1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-11T15:25:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-26T16:17:19Z"
      },
      "message": "[rpc] Deprecate estimatefee RPC\n\nDeprecate estimatefee in v0.16, for final removal in v0.17.\n\nThis commit introduces a phased removal of RPC methods. RPC method is\ndisabled by default in version x, but can be enabled by using the\n`-deprecatedrpc=<method>` argument. RPC method is removed entirely in\nversion (x+1).",
      "tree": {
        "sha": "2a3e1a54e474e79ab491c46205ca26fd84f91da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a3e1a54e474e79ab491c46205ca26fd84f91da4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86700d3d056caf54b091a6673dd6dabb65fac1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86700d3d056caf54b091a6673dd6dabb65fac1f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86700d3d056caf54b091a6673dd6dabb65fac1f2"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a1c49a0992b48b94790a93712839dcdab40301c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "patch": "@@ -430,6 +430,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\");\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");"
      },
      {
        "sha": "5ac32dc9742a5338ba5310855b879fa032aeccea",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "patch": "@@ -789,6 +789,12 @@ UniValue estimatefee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n+    if (!IsDeprecatedRPCEnabled(\"estimatefee\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee is deprecated and will be fully removed in v0.17. \"\n+            \"To use estimatefee in v0.16, restart bitcoind with -deprecatedrpc=estimatefee.\\n\"\n+            \"Projects should transition to using estimatesmartfee before upgrading to v0.17\");\n+    }\n+\n     RPCTypeCheck(request.params, {UniValue::VNUM});\n \n     int nBlocks = request.params[0].get_int();"
      },
      {
        "sha": "056f93e7dbaa6cc33e6eac6fc05c0596f4d74b87",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "patch": "@@ -57,6 +57,7 @@ enum RPCErrorCode\n     RPC_VERIFY_REJECTED             = -26, //!< Transaction or block was rejected by network rules\n     RPC_VERIFY_ALREADY_IN_CHAIN     = -27, //!< Transaction already in chain\n     RPC_IN_WARMUP                   = -28, //!< Client still warming up\n+    RPC_METHOD_DEPRECATED           = -32, //!< RPC method is deprecated\n \n     //! Aliases for backward compatibility\n     RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,"
      },
      {
        "sha": "a73b697e01e0b87cb96816cfed26c5dc898f8d15",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "patch": "@@ -382,6 +382,13 @@ void JSONRPCRequest::parse(const UniValue& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n }\n \n+bool IsDeprecatedRPCEnabled(const std::string& method)\n+{\n+    const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");\n+\n+    return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n+}\n+\n static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);"
      },
      {
        "sha": "31d630427104b2843c90bbf8db9d2ddee1a291a2",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "patch": "@@ -171,6 +171,8 @@ class CRPCTable\n     bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n };\n \n+bool IsDeprecatedRPCEnabled(const std::string& method);\n+\n extern CRPCTable tableRPC;\n \n /**"
      },
      {
        "sha": "986f4546a8b75a044ba0fef3f3c7842b6a57c5d7",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "patch": "@@ -151,7 +151,7 @@ def setup_network(self):\n         which we will use to generate our transactions.\n         \"\"\"\n         self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n                                       [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate."
      }
    ]
  },
  {
    "sha": "048e0c3e26051e66e027a84128923ea341d5337b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDhlMGMzZTI2MDUxZTY2ZTAyN2E4NDEyODkyM2VhMzQxZDUzMzdi",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-08-23T14:58:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-26T16:17:41Z"
      },
      "message": "[rpc] [tests] Add deprecated RPC test",
      "tree": {
        "sha": "c3cacc882f0b86b050360ff79873e67aee87cf1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3cacc882f0b86b050360ff79873e67aee87cf1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/048e0c3e26051e66e027a84128923ea341d5337b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048e0c3e26051e66e027a84128923ea341d5337b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/048e0c3e26051e66e027a84128923ea341d5337b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048e0c3e26051e66e027a84128923ea341d5337b/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4cdbd6fb6ac3663d069307c4fd0078f4ecf0245"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ec500ccbf967333c783b492dbf4f677acb88e5c1",
        "filename": "test/functional/deprecated_rpc.py",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/048e0c3e26051e66e027a84128923ea341d5337b/test/functional/deprecated_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/048e0c3e26051e66e027a84128923ea341d5337b/test/functional/deprecated_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/deprecated_rpc.py?ref=048e0c3e26051e66e027a84128923ea341d5337b",
        "patch": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+if __name__ == '__main__':\n+    DeprecatedRpcTest().main()"
      },
      {
        "sha": "5c8740d7cdc39df6b7dc5f2ef5bb9190602541b7",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/048e0c3e26051e66e027a84128923ea341d5337b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/048e0c3e26051e66e027a84128923ea341d5337b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=048e0c3e26051e66e027a84128923ea341d5337b",
        "patch": "@@ -98,6 +98,7 @@\n     'disconnect_ban.py',\n     'decodescript.py',\n     'blockchain.py',\n+    'deprecated_rpc.py',\n     'disablewallet.py',\n     'net.py',\n     'keypool.py',"
      }
    ]
  },
  {
    "sha": "6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjQzYjgwZDFjMDEzNGJjOGVmNWVkZDY1ZmJlMDljOGI2M2IwMWQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-26T20:23:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-26T20:23:41Z"
      },
      "message": "Add state message print to AcceptBlock failure message.\n\nThis should make it easier to debug issues where the CheckBlock at\nthe top of ProcessNewBlock fails (which does not print, in contrast\nto AcceptBlock, which always prints).",
      "tree": {
        "sha": "fff1132fbeeae251d64b42682e5229b860ee4dd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fff1132fbeeae251d64b42682e5229b860ee4dd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc597bb895ef4b74d8564253813c2d140e76c2d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc597bb895ef4b74d8564253813c2d140e76c2d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc597bb895ef4b74d8564253813c2d140e76c2d6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a0db1c50ae9636cf89db0556cf9922b83a462f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
        "patch": "@@ -3189,7 +3189,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.GetDebugMessage());\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTA1YzVjMGE5ZjgzMGUzMWZhNjkzNGMzNTMxYzc3NTJmOWNhMGNk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-26T21:59:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-26T21:59:08Z"
      },
      "message": "Merge #11015: [Qt] Add delay before filtering transactions\n\n7b137aced [Qt] Add delay before filtering transactions Fixes 3141 (Lucas Betschart)\n\nPull request description:\n\n  As discussed in https://github.com/bitcoin/bitcoin/issues/3141.\n\n  This adds a QTimer pause of 200ms before start to filter so it should be possible to filter big data sets easier.\n\nTree-SHA512: ee599367794eac2c5b8bc7ecac47f44295e40c0ff543ff2f2c4860590f917b59b1cfb273fa564e6eb4c44016c0ef412d49f1a8f1b36b07e034022f51bb76653c",
      "tree": {
        "sha": "b1a7e9fc40020297c6db771e521c5e93de730d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1a7e9fc40020297c6db771e521c5e93de730d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnKzawACgkQHrd2uwPH\nki0XrhAAuGJmm2m2ZQQ4v4Zx5Porx1ITAF5OiCTydMX18NK7B8ch101WIZiRlyZ/\n1ZeCJGMH5RdKgt/eoVPwjtvSIeegDRl2m+UWK3kaPOH/I6O/C4m47wxek2//lcFW\nyfXu7k5xPzxhLmt1jSscw14KGPKgiwM+my8UAkow/g7bP0hx2fb++9dYhD8JgdFw\n/Afw8J1ruXvjBcQnSJ/4U/1//ghpL09Gin/nPw6fqEHnX6TndevXv9HdNsQqov3a\nxwegP+4N38ZR2/aD2PAdRkcPYzjN7isPBrdA0AXCgLb4QyGgWibham+U19Z3kBgK\nK6tUtRheIOAjujxqLxfaM/Ie0FQZSfNKdy4aq+dTyP8N+pPzzyqs9Rvgr1v3lgwa\n5plMYUrMacZd/2qRyGtKRRwHf5TTfiIq4qqka4Xf/OSaQVPArpClT7f7jtR3m80W\nAXNTGU4IZeeg6DU/oIuvsKRcoX+UYnSunDPR3iH1JwNXiTXF64BQBtonAYvnGAgw\nCTtbbDUdMrBs1hqOdImEZ+S3th1l0YgougpgszUzE+DfXHP9ss/chn75E6dX5sRc\nQie99eciIGSVHgdMi6AiQ2pJmejshC5s14kXaLybE9WZTDlkDkn1wShk0tr10tli\nz4dRrecJoIfL9o1/MQGndpl6u7Mugdwf+qZ4dSQP0XwFa03EN7o=\n=x1xT\n-----END PGP SIGNATURE-----",
        "payload": "tree b1a7e9fc40020297c6db771e521c5e93de730d6d\nparent dc597bb895ef4b74d8564253813c2d140e76c2d6\nparent 7b137acedd5e2ff3fe5395a927c546a528b0cac6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1506463141 -0600\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1506463148 -0600\n\nMerge #11015: [Qt] Add delay before filtering transactions\n\n7b137aced [Qt] Add delay before filtering transactions Fixes 3141 (Lucas Betschart)\n\nPull request description:\n\n  As discussed in https://github.com/bitcoin/bitcoin/issues/3141.\n\n  This adds a QTimer pause of 200ms before start to filter so it should be possible to filter big data sets easier.\n\nTree-SHA512: ee599367794eac2c5b8bc7ecac47f44295e40c0ff543ff2f2c4860590f917b59b1cfb273fa564e6eb4c44016c0ef412d49f1a8f1b36b07e034022f51bb76653c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc597bb895ef4b74d8564253813c2d140e76c2d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc597bb895ef4b74d8564253813c2d140e76c2d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc597bb895ef4b74d8564253813c2d140e76c2d6"
      },
      {
        "sha": "7b137acedd5e2ff3fe5395a927c546a528b0cac6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b137acedd5e2ff3fe5395a927c546a528b0cac6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b137acedd5e2ff3fe5395a927c546a528b0cac6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "39dfdb587c2a6c1d0288a400d8dbb7e4551bfa8b",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
        "patch": "@@ -33,6 +33,7 @@\n #include <QScrollBar>\n #include <QSignalMapper>\n #include <QTableView>\n+#include <QTimer>\n #include <QUrl>\n #include <QVBoxLayout>\n \n@@ -112,6 +113,17 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n+    // Delay before filtering transactions in ms\n+    static const int input_filter_delay = 200;\n+\n+    QTimer* amount_typing_delay = new QTimer(this);\n+    amount_typing_delay->setSingleShot(true);\n+    amount_typing_delay->setInterval(input_filter_delay);\n+\n+    QTimer* prefix_typing_delay = new QTimer(this);\n+    prefix_typing_delay->setSingleShot(true);\n+    prefix_typing_delay->setInterval(input_filter_delay);\n+\n     QVBoxLayout *vlayout = new QVBoxLayout(this);\n     vlayout->setContentsMargins(0,0,0,0);\n     vlayout->setSpacing(0);\n@@ -173,8 +185,10 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(dateWidget, SIGNAL(activated(int)), this, SLOT(chooseDate(int)));\n     connect(typeWidget, SIGNAL(activated(int)), this, SLOT(chooseType(int)));\n     connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n-    connect(addressWidget, SIGNAL(textChanged(QString)), this, SLOT(changedPrefix(QString)));\n-    connect(amountWidget, SIGNAL(textChanged(QString)), this, SLOT(changedAmount(QString)));\n+    connect(amountWidget, SIGNAL(textChanged(QString)), amount_typing_delay, SLOT(start()));\n+    connect(amount_typing_delay, SIGNAL(timeout()), this, SLOT(changedAmount()));\n+    connect(addressWidget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n+    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedPrefix()));\n \n     connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n     connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n@@ -312,20 +326,19 @@ void TransactionView::chooseWatchonly(int idx)\n         (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n }\n \n-void TransactionView::changedPrefix(const QString &prefix)\n+void TransactionView::changedPrefix()\n {\n     if(!transactionProxyModel)\n         return;\n-    transactionProxyModel->setAddressPrefix(prefix);\n+    transactionProxyModel->setAddressPrefix(addressWidget->text());\n }\n \n-void TransactionView::changedAmount(const QString &amount)\n+void TransactionView::changedAmount()\n {\n     if(!transactionProxyModel)\n         return;\n     CAmount amount_parsed = 0;\n-    if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n-    {\n+    if (BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amountWidget->text(), &amount_parsed)) {\n         transactionProxyModel->setMinAmount(amount_parsed);\n     }\n     else"
      },
      {
        "sha": "5b4cfd4a88d3822eb1c3559317a53374fd6b651e",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
        "patch": "@@ -112,8 +112,8 @@ public Q_SLOTS:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);\n-    void changedPrefix(const QString &prefix);\n-    void changedAmount(const QString &amount);\n+    void changedAmount();\n+    void changedPrefix();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n "
      }
    ]
  },
  {
    "sha": "603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDNlZmU5ZmM0NjAwOGM5YjcwNTFjOGMxOGQ5NjBjZmQxZTdlMGU1",
    "commit": {
      "author": {
        "name": "Pierre Rochard",
        "email": "pierre.rochard@axial.net",
        "date": "2017-09-26T22:02:09Z"
      },
      "committer": {
        "name": "Pierre Rochard",
        "email": "pierre.rochard@axial.net",
        "date": "2017-09-26T22:02:09Z"
      },
      "message": "Fix parameter name typo in ErasePurpose walletdb method.",
      "tree": {
        "sha": "f0ce14246d0bb2709dfcf14fff61eabbec7b7f79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0ce14246d0bb2709dfcf14fff61eabbec7b7f79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "16e41844e7d6c5876d2caaeef6010656950c6ec5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e41844e7d6c5876d2caaeef6010656950c6ec5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16e41844e7d6c5876d2caaeef6010656950c6ec5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7f873c1e4e558a50aed13adc7ff4c1f8977fb1c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
        "patch": "@@ -41,9 +41,9 @@ bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& s\n     return WriteIC(std::make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n }\n \n-bool CWalletDB::ErasePurpose(const std::string& strPurpose)\n+bool CWalletDB::ErasePurpose(const std::string& strAddress)\n {\n-    return EraseIC(std::make_pair(std::string(\"purpose\"), strPurpose));\n+    return EraseIC(std::make_pair(std::string(\"purpose\"), strAddress));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)"
      }
    ]
  },
  {
    "sha": "49f869fe91716785b3276925d64bf8955feff69f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWY4NjlmZTkxNzE2Nzg1YjMyNzY5MjVkNjRiZjg5NTVmZWZmNjlm",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-25T10:14:03Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-27T08:04:17Z"
      },
      "message": "Fix bip68-sequence rpc test",
      "tree": {
        "sha": "4543fc9733cb767b0f87c939ea210f29c6a3111a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4543fc9733cb767b0f87c939ea210f29c6a3111a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49f869fe91716785b3276925d64bf8955feff69f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49f869fe91716785b3276925d64bf8955feff69f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49f869fe91716785b3276925d64bf8955feff69f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49f869fe91716785b3276925d64bf8955feff69f/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12ed800ab870e0fc527a84d6e4584b10c8d239f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ed800ab870e0fc527a84d6e4584b10c8d239f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12ed800ab870e0fc527a84d6e4584b10c8d239f5"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "74f51d8cfb35851350e15c3d0c8f405283e47cce",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49f869fe91716785b3276925d64bf8955feff69f/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49f869fe91716785b3276925d64bf8955feff69f/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=49f869fe91716785b3276925d64bf8955feff69f",
        "patch": "@@ -369,11 +369,14 @@ def test_bip68_not_consensus(self):\n \n     def activateCSV(self):\n         # activation should happen at block height 432 (3 periods)\n+        # getblockchaininfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n-        assert(height < min_activation_height)\n-        self.nodes[0].generate(min_activation_height-height)\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        assert_greater_than(min_activation_height - height, 2)\n+        self.nodes[0].generate(min_activation_height - height - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      }
    ]
  },
  {
    "sha": "69c7ecef405d168f658a9cc7996da84c17f61e66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWM3ZWNlZjQwNWQxNjhmNjU4YTljYzc5OTZkYTg0YzE3ZjYxZTY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-27T12:23:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-27T12:23:39Z"
      },
      "message": "Merge #11408: Trivial: Fix parameter name typo in ErasePurpose walletdb method\n\n603efe9fc Fix parameter name typo in ErasePurpose walletdb method. (Pierre Rochard)\n\nPull request description:\n\n  The header file has the correct method signature and the one usage in CWallet::DelAddressBook is correctly passing in EncodeDestination(address)\n\nTree-SHA512: ee0808a74111fd23a1c47ba5ab51de151fdd33a01d92895671e562ac184cbcb33180a3ff26c22e5717595592097b9fa33deca9878d89ce8d34687f09cfadfcf0",
      "tree": {
        "sha": "47dcd620e6958e74d9b6d714752a42a5a0e410a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47dcd620e6958e74d9b6d714752a42a5a0e410a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69c7ecef405d168f658a9cc7996da84c17f61e66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZy5hLAAoJENLqSFDnUosl1DQP/R/fGB5JfUb16cLTI5raMDFa\nu+XBBTSG834imnJBn5wBbyj832yecAf57PhSe7O/rawPWN60Ul7yG1eyupruLlxL\no1XtnXEwvkkS4eBXYpBD57qdx1XWMW9kbVgpzZyfOMbSWZIJFVCGvtPi0u8iCPZ7\nEhsB3fHWkx9p43QYPBD7NsNYp6XH18Vqx6fMBT6DNanRnsH5PdQMDJdMTtlJ8Mbs\nDtMaaWAVzeOkg1I6m8w9c6Dik/HSvhv8yhhcqwE+hme5mE9XoAQsb1WpjNbqE0sq\npLp11A/o++kLZnN67Ct/ePrTuca5DZtNyzqLSq5Xm9euQY2c2mksOD/mzHM89QPe\niXa8aNLajy6tyhyrT+iQkt627WGiWMOGI4PutTEOPpevQf1h+o7tJZ4uSmtz42kY\n/Ps9bi4yD1pXtiI7eBsULvXQhSyYpWSIpt9ZLylNbi1Xp1vI0F7st8jOlYVGRgzt\nk+LXRhRADldFASOS3f4DoXFGJBDnFs73UEvkdAEzWvfQOzpN4crcDw9Ckf2hiZAU\nBnpvn0OS6HOpSbM3ILDNa+whNI7u63aa4CPeMZZQXbAEGsLHJeRMGhwoygko8PAY\nS/aVUUnfe1HbohNqBfqo43tSUiAcCgKMaPhkZUbXiqv6kzR/50EIM7TQXk3h6Lsc\n55WQuq08CwDWaWZgA/Ug\n=Dw93\n-----END PGP SIGNATURE-----",
        "payload": "tree 47dcd620e6958e74d9b6d714752a42a5a0e410a1\nparent 2505c5c0a9f830e31fa6934c3531c7752f9ca0cd\nparent 603efe9fc46008c9b7051c8c18d960cfd1e7e0e5\nauthor MarcoFalke <falke.marco@gmail.com> 1506514995 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506515019 +0200\n\nMerge #11408: Trivial: Fix parameter name typo in ErasePurpose walletdb method\n\n603efe9fc Fix parameter name typo in ErasePurpose walletdb method. (Pierre Rochard)\n\nPull request description:\n\n  The header file has the correct method signature and the one usage in CWallet::DelAddressBook is correctly passing in EncodeDestination(address)\n\nTree-SHA512: ee0808a74111fd23a1c47ba5ab51de151fdd33a01d92895671e562ac184cbcb33180a3ff26c22e5717595592097b9fa33deca9878d89ce8d34687f09cfadfcf0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c7ecef405d168f658a9cc7996da84c17f61e66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69c7ecef405d168f658a9cc7996da84c17f61e66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c7ecef405d168f658a9cc7996da84c17f61e66/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2505c5c0a9f830e31fa6934c3531c7752f9ca0cd"
      },
      {
        "sha": "603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/603efe9fc46008c9b7051c8c18d960cfd1e7e0e5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7f873c1e4e558a50aed13adc7ff4c1f8977fb1c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c7ecef405d168f658a9cc7996da84c17f61e66/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c7ecef405d168f658a9cc7996da84c17f61e66/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=69c7ecef405d168f658a9cc7996da84c17f61e66",
        "patch": "@@ -41,9 +41,9 @@ bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& s\n     return WriteIC(std::make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n }\n \n-bool CWalletDB::ErasePurpose(const std::string& strPurpose)\n+bool CWalletDB::ErasePurpose(const std::string& strAddress)\n {\n-    return EraseIC(std::make_pair(std::string(\"purpose\"), strPurpose));\n+    return EraseIC(std::make_pair(std::string(\"purpose\"), strAddress));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)"
      }
    ]
  },
  {
    "sha": "ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjgzNDBkMjVmN2M1ZGQ1NjgyYmRlY2VhOTdjZTg0Y2ZjZTE0OTNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-27T12:38:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-27T12:38:13Z"
      },
      "message": "Merge #11031: [rpc] deprecate estimatefee\n\n048e0c3e2 [rpc] [tests] Add deprecated RPC test (Cristian Mircea Messel)\nd4cdbd6fb [rpc] Deprecate estimatefee RPC (John Newbery)\n\nPull request description:\n\n  Deprecates estimatefee in v0.16, for final removal in v0.17.\n\n  This commit introduces a phased removal of RPC methods. RPC method is\n  disabled by default in version x, but can be enabled by using the\n  `-deprecatedrpc=<methodname>` argument. RPC method is removed entirely in version\n  (x+1).\n\n  This gives users fair warning that an RPC is to be removed, and time to change client software if necessary. Deprecation warnings in RPC return values or release notes are easily ignored.\n\n  This is a more generic version of the approach I tried to use in #10841, which too late to make it into v0.15.\n\nTree-SHA512: 9695a600e84b812974387333e4a6805d18972da30befb754e9e4da77cd9815d00c5cc2ee0b0350bdbbdb5fdc6ba47789f8b2c6f5b15c8cd5a1deefcc4832da30",
      "tree": {
        "sha": "f14fcc4812d9c4d4119f5b9d00c4f7ac40f32427",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f14fcc4812d9c4d4119f5b9d00c4f7ac40f32427"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZy5u1AAoJENLqSFDnUoslZegQALSYbBWHY/pHHezi+gIj4cmZ\nPBt/UUvNMZMGa2WKcUiNtID1WdSjfU9T9j+5JvnFNQa0CwLZWOAe8gWEzu/Aj2Ow\nFe9r8doJQrcZEalH5sE3HOLR9xGpvp77vFovog4Ml19rA1gbmIDLoAQyv7iLYrzH\nXaTWbRRY7PmU3jF31E1DLT6G0BAHsyuPjqB7m2swwxKZ0QFQ5rGsNQb1bWE6Rmyq\nNsckzcFpOp80xdq8FyvxDyjCZeH6j5qLiEUmDBGsxN0CVc/WDQAp44kUaZGla7Zk\nNTi3jfheSIQWABhjMPNnhFv4JtP4pXkv0mpoBqsd+XASkBPtZcL8PKJqs1//pG9V\nBtfK4rGdJ/ShW4ANQuS/LpEhzzcFAYGI8IfnCOJaSzbbcvFaaRGonEpkcdMWxePy\nh5Je0ig4FCBVVhUVZqN4cMgTnzu4gn1UwUYlxgV/xHqNWU259gwjxj/QFpkEbX6x\n7lBYy9iZu3heEdGgFWP4C4lADxfBxK3DO87tJGwkImzn4grxB5bIFj8SzGWllHEi\n3CWLHymOc8z+R/XTaHVrEMauhx0Pqw2gHDv4yPB6DPNDPrzAcA2mbVP7NDxJ00eR\nuXzFTRpRL4hGfIszyyIS+Bt0SMGHHDYnkce0JMwX5c8W2eCtqclpVPR3PNIWrC9Y\nwskRE1b2qsUUhmaNaJcn\n=FZu5\n-----END PGP SIGNATURE-----",
        "payload": "tree f14fcc4812d9c4d4119f5b9d00c4f7ac40f32427\nparent 69c7ecef405d168f658a9cc7996da84c17f61e66\nparent 048e0c3e26051e66e027a84128923ea341d5337b\nauthor MarcoFalke <falke.marco@gmail.com> 1506515883 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506515893 +0200\n\nMerge #11031: [rpc] deprecate estimatefee\n\n048e0c3e2 [rpc] [tests] Add deprecated RPC test (Cristian Mircea Messel)\nd4cdbd6fb [rpc] Deprecate estimatefee RPC (John Newbery)\n\nPull request description:\n\n  Deprecates estimatefee in v0.16, for final removal in v0.17.\n\n  This commit introduces a phased removal of RPC methods. RPC method is\n  disabled by default in version x, but can be enabled by using the\n  `-deprecatedrpc=<methodname>` argument. RPC method is removed entirely in version\n  (x+1).\n\n  This gives users fair warning that an RPC is to be removed, and time to change client software if necessary. Deprecation warnings in RPC return values or release notes are easily ignored.\n\n  This is a more generic version of the approach I tried to use in #10841, which too late to make it into v0.15.\n\nTree-SHA512: 9695a600e84b812974387333e4a6805d18972da30befb754e9e4da77cd9815d00c5cc2ee0b0350bdbbdb5fdc6ba47789f8b2c6f5b15c8cd5a1deefcc4832da30\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69c7ecef405d168f658a9cc7996da84c17f61e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c7ecef405d168f658a9cc7996da84c17f61e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69c7ecef405d168f658a9cc7996da84c17f61e66"
      },
      {
        "sha": "048e0c3e26051e66e027a84128923ea341d5337b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048e0c3e26051e66e027a84128923ea341d5337b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/048e0c3e26051e66e027a84128923ea341d5337b"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 42,
      "deletions": 1
    },
    "files": [
      {
        "sha": "55670c7dc6b6404eb6436004a2b522e05bc0c691",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -430,6 +430,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\");\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");"
      },
      {
        "sha": "5ac32dc9742a5338ba5310855b879fa032aeccea",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -789,6 +789,12 @@ UniValue estimatefee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n+    if (!IsDeprecatedRPCEnabled(\"estimatefee\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee is deprecated and will be fully removed in v0.17. \"\n+            \"To use estimatefee in v0.16, restart bitcoind with -deprecatedrpc=estimatefee.\\n\"\n+            \"Projects should transition to using estimatesmartfee before upgrading to v0.17\");\n+    }\n+\n     RPCTypeCheck(request.params, {UniValue::VNUM});\n \n     int nBlocks = request.params[0].get_int();"
      },
      {
        "sha": "056f93e7dbaa6cc33e6eac6fc05c0596f4d74b87",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -57,6 +57,7 @@ enum RPCErrorCode\n     RPC_VERIFY_REJECTED             = -26, //!< Transaction or block was rejected by network rules\n     RPC_VERIFY_ALREADY_IN_CHAIN     = -27, //!< Transaction already in chain\n     RPC_IN_WARMUP                   = -28, //!< Client still warming up\n+    RPC_METHOD_DEPRECATED           = -32, //!< RPC method is deprecated\n \n     //! Aliases for backward compatibility\n     RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,"
      },
      {
        "sha": "a73b697e01e0b87cb96816cfed26c5dc898f8d15",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -382,6 +382,13 @@ void JSONRPCRequest::parse(const UniValue& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n }\n \n+bool IsDeprecatedRPCEnabled(const std::string& method)\n+{\n+    const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");\n+\n+    return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n+}\n+\n static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);"
      },
      {
        "sha": "31d630427104b2843c90bbf8db9d2ddee1a291a2",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -171,6 +171,8 @@ class CRPCTable\n     bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n };\n \n+bool IsDeprecatedRPCEnabled(const std::string& method);\n+\n extern CRPCTable tableRPC;\n \n /**"
      },
      {
        "sha": "ec500ccbf967333c783b492dbf4f677acb88e5c1",
        "filename": "test/functional/deprecated_rpc.py",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/test/functional/deprecated_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/test/functional/deprecated_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/deprecated_rpc.py?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+if __name__ == '__main__':\n+    DeprecatedRpcTest().main()"
      },
      {
        "sha": "986f4546a8b75a044ba0fef3f3c7842b6a57c5d7",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -151,7 +151,7 @@ def setup_network(self):\n         which we will use to generate our transactions.\n         \"\"\"\n         self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n                                       [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate."
      },
      {
        "sha": "5c8740d7cdc39df6b7dc5f2ef5bb9190602541b7",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8340d25f7c5dd5682bdecea97ce84cfce1493c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "patch": "@@ -98,6 +98,7 @@\n     'disconnect_ban.py',\n     'decodescript.py',\n     'blockchain.py',\n+    'deprecated_rpc.py',\n     'disablewallet.py',\n     'net.py',\n     'keypool.py',"
      }
    ]
  },
  {
    "sha": "f77f0e4825e17fdda5984ce556a1102e32e7af72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzdmMGU0ODI1ZTE3ZmRkYTU5ODRjZTU1NmExMTAyZTMyZTdhZjcy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-07-17T22:43:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-27T15:27:26Z"
      },
      "message": "Add warnings field to getblockchaininfo",
      "tree": {
        "sha": "0c806fc449508d4b642d69a5c763c1f41b18bdfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c806fc449508d4b642d69a5c763c1f41b18bdfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f77f0e4825e17fdda5984ce556a1102e32e7af72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77f0e4825e17fdda5984ce556a1102e32e7af72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f77f0e4825e17fdda5984ce556a1102e32e7af72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77f0e4825e17fdda5984ce556a1102e32e7af72/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8340d25f7c5dd5682bdecea97ce84cfce1493c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "099e4825d4f59df96d5324ac37da7d9f54286fee",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77f0e4825e17fdda5984ce556a1102e32e7af72/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77f0e4825e17fdda5984ce556a1102e32e7af72/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f77f0e4825e17fdda5984ce556a1102e32e7af72",
        "patch": "@@ -1162,6 +1162,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"        }\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n+            \"  \\\"warnings\\\" : \\\"...\\\",         (string) any network and blockchain errors.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n@@ -1201,6 +1202,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n \n         obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n     }\n+    obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n     return obj;\n }\n "
      },
      {
        "sha": "c5967aa10b3fd61c7f10ceedf219803622a24513",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77f0e4825e17fdda5984ce556a1102e32e7af72/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77f0e4825e17fdda5984ce556a1102e32e7af72/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=f77f0e4825e17fdda5984ce556a1102e32e7af72",
        "patch": "@@ -60,6 +60,7 @@ def _test_getblockchaininfo(self):\n             'pruned',\n             'softforks',\n             'verificationprogress',\n+            'warnings',\n         ]\n         res = self.nodes[0].getblockchaininfo()\n         # result should have pruneheight and default keys if pruning is enabled"
      }
    ]
  },
  {
    "sha": "8502b2085288bcf5b5ff96b77236a3b04c65f082",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTAyYjIwODUyODhiY2Y1YjVmZjk2Yjc3MjM2YTNiMDRjNjVmMDgy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-07-17T22:55:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-27T15:27:26Z"
      },
      "message": "Unify help text for GetWarnings output in get*info RPCs",
      "tree": {
        "sha": "17f1cb32aa4a3e46296acd0f1bff51e6e03708de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17f1cb32aa4a3e46296acd0f1bff51e6e03708de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8502b2085288bcf5b5ff96b77236a3b04c65f082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502b2085288bcf5b5ff96b77236a3b04c65f082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8502b2085288bcf5b5ff96b77236a3b04c65f082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502b2085288bcf5b5ff96b77236a3b04c65f082/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f77f0e4825e17fdda5984ce556a1102e32e7af72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77f0e4825e17fdda5984ce556a1102e32e7af72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f77f0e4825e17fdda5984ce556a1102e32e7af72"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8c0268e2640c78c6ecc50e3c77ce123c0f0dc317",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8502b2085288bcf5b5ff96b77236a3b04c65f082/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8502b2085288bcf5b5ff96b77236a3b04c65f082/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8502b2085288bcf5b5ff96b77236a3b04c65f082",
        "patch": "@@ -24,6 +24,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"hash.h\"\n+#include \"warnings.h\"\n \n #include <stdint.h>\n \n@@ -1162,7 +1163,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"        }\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n-            \"  \\\"warnings\\\" : \\\"...\\\",         (string) any network and blockchain errors.\\n\"\n+            \"  \\\"warnings\\\" : \\\"...\\\",         (string) any network and blockchain warnings.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")"
      },
      {
        "sha": "85cc906b7b12ecedb5e03b70c3fb4ba4c691612e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8502b2085288bcf5b5ff96b77236a3b04c65f082/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8502b2085288bcf5b5ff96b77236a3b04c65f082/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=8502b2085288bcf5b5ff96b77236a3b04c65f082",
        "patch": "@@ -199,10 +199,10 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) Current errors\\n\"\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"            (string) (string) any network and blockchain warnings\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -217,10 +217,10 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n+    obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n     return obj;\n }\n "
      },
      {
        "sha": "018444821338a35d357ff73dba273b882e635274",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8502b2085288bcf5b5ff96b77236a3b04c65f082/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8502b2085288bcf5b5ff96b77236a3b04c65f082/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=8502b2085288bcf5b5ff96b77236a3b04c65f082",
        "patch": "@@ -447,7 +447,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network warnings\\n\"\n+            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network and blockchain warnings\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnetworkinfo\", \"\")"
      }
    ]
  },
  {
    "sha": "395cef7601479b97f5794b0c98067c859f00fc7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTVjZWY3NjAxNDc5Yjk3ZjU3OTRiMGM5ODA2N2M4NTlmMDBmYzdm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-26T16:03:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-27T15:27:26Z"
      },
      "message": "Change getmininginfo errors field to warnings\n\nChanges the errors field to warnings. To maintain compatibility,\nthe errors field is deprecated and enabled by starting bitcoind with\n-deprecatedrpc=getmininginfo",
      "tree": {
        "sha": "049c02c832025cee4388f1de367af4234c290dba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/049c02c832025cee4388f1de367af4234c290dba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/395cef7601479b97f5794b0c98067c859f00fc7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395cef7601479b97f5794b0c98067c859f00fc7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/395cef7601479b97f5794b0c98067c859f00fc7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395cef7601479b97f5794b0c98067c859f00fc7f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8502b2085288bcf5b5ff96b77236a3b04c65f082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502b2085288bcf5b5ff96b77236a3b04c65f082",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8502b2085288bcf5b5ff96b77236a3b04c65f082"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f79439f038ce6af232c47619d3782bd417fc1359",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395cef7601479b97f5794b0c98067c859f00fc7f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395cef7601479b97f5794b0c98067c859f00fc7f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=395cef7601479b97f5794b0c98067c859f00fc7f",
        "patch": "@@ -202,7 +202,8 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) (string) any network and blockchain warnings\\n\"\n+            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -220,7 +221,11 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n+    if (IsDeprecatedRPCEnabled(\"getmininginfo\")) {\n+        obj.push_back(Pair(\"errors\",       GetWarnings(\"statusbar\")));\n+    } else {\n+        obj.push_back(Pair(\"warnings\",     GetWarnings(\"statusbar\")));\n+    }\n     return obj;\n }\n "
      },
      {
        "sha": "f9bef2580a6d589cc03c255117bf4e04345699fa",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395cef7601479b97f5794b0c98067c859f00fc7f/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395cef7601479b97f5794b0c98067c859f00fc7f/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=395cef7601479b97f5794b0c98067c859f00fc7f",
        "patch": "@@ -87,7 +87,7 @@ def run_test(self):\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n         # Check that we're not getting any versionbit-related errors in\n         # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"errors\"]))\n+        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n         # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n@@ -98,7 +98,7 @@ def run_test(self):\n         # have gotten a different alert due to more than 51/100 blocks\n         # being of unexpected version.\n         # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n \n         # Mine a period worth of expected blocks so the generic block-version warning\n@@ -113,7 +113,7 @@ def run_test(self):\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n         self.stop_nodes()\n         self.test_versionbits_in_alert_file()"
      }
    ]
  },
  {
    "sha": "382625318d8734fd71a6c9620d3e88b5617da0c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODI2MjUzMThkODczNGZkNzFhNmM5NjIwZDNlODhiNTYxN2RhMGM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-29T14:45:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-28T01:53:07Z"
      },
      "message": "rpc: Handle `getinfo` locally in bitcoin-cli w/ `-getinfo`\n\nThis adds the infrastructure `BaseRequestHandler` class that takes care\nof converting bitcoin-cli arguments into a JSON-RPC request object, and\nconverting the reply into a JSON object that can be shown as result.\n\nThis is subsequently used to handle the `-getinfo` option, which sends\na JSON-RPC batch request to the RPC server with\n`[\"getnetworkinfo\", \"getblockchaininfo\", \"getwalletinfo\"]`,\nand after reply combines the result into what looks like a `getinfo`\nresult.\n\nThere have been some requests for a client-side `getinfo` and this\nis my PoC of how to do it. If this is considered a good idea\nsome of the logic could be moved up to rpcclient.cpp and\nused in the GUI console as well.\n\nExtra-Author: Andrew Chow <achow101@gmail.com>",
      "tree": {
        "sha": "69bc966e75c296275fcdd62062712a1fd82c13f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69bc966e75c296275fcdd62062712a1fd82c13f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/382625318d8734fd71a6c9620d3e88b5617da0c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/382625318d8734fd71a6c9620d3e88b5617da0c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/382625318d8734fd71a6c9620d3e88b5617da0c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/382625318d8734fd71a6c9620d3e88b5617da0c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea729d55b4dbd17a53ced474a8457d4759cfb5a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea729d55b4dbd17a53ced474a8457d4759cfb5a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea729d55b4dbd17a53ced474a8457d4759cfb5a5"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 127,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e21a2692212a4a7660581f9c6413d4cd1f233664",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 14,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/382625318d8734fd71a6c9620d3e88b5617da0c5/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/382625318d8734fd71a6c9620d3e88b5617da0c5/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=382625318d8734fd71a6c9620d3e88b5617da0c5",
        "patch": "@@ -37,6 +37,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n@@ -191,7 +192,96 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n }\n #endif\n \n-static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n+/** Class that handles the conversion from a command-line to a JSON-RPC request,\n+ * as well as converting back to a JSON object that can be shown as result.\n+ */\n+class BaseRequestHandler\n+{\n+public:\n+    virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n+    virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n+};\n+\n+/** Process getinfo requests */\n+class GetinfoRequestHandler: public BaseRequestHandler\n+{\n+public:\n+    const int ID_NETWORKINFO = 0;\n+    const int ID_BLOCKCHAININFO = 1;\n+    const int ID_WALLETINFO = 2;\n+\n+    /** Create a simulated `getinfo` request. */\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));\n+        result.push_back(JSONRPCRequestObj(\"getwalletinfo\", NullUniValue, ID_WALLETINFO));\n+        return result;\n+    }\n+\n+    /** Collect values from the batch and form a simulated `getinfo` reply. */\n+    UniValue ProcessReply(const UniValue &batch_in) override\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in, 3);\n+        // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on\n+        // getwalletinfo() is allowed to fail in case there is no wallet.\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) {\n+            return batch[ID_NETWORKINFO];\n+        }\n+        if (!batch[ID_BLOCKCHAININFO][\"error\"].isNull()) {\n+            return batch[ID_BLOCKCHAININFO];\n+        }\n+        result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n+        result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+        }\n+        result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n+        result.pushKV(\"timeoffset\", batch[ID_NETWORKINFO][\"result\"][\"timeoffset\"]);\n+        result.pushKV(\"connections\", batch[ID_NETWORKINFO][\"result\"][\"connections\"]);\n+        result.pushKV(\"proxy\", batch[ID_NETWORKINFO][\"result\"][\"networks\"][0][\"proxy\"]);\n+        result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n+        result.pushKV(\"testnet\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"].get_str() == \"test\"));\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+            result.pushKV(\"keypoololdest\", batch[ID_WALLETINFO][\"result\"][\"keypoololdest\"]);\n+            result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n+            if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n+                result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);\n+            }\n+            result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n+        }\n+        result.pushKV(\"relayfee\", batch[ID_NETWORKINFO][\"result\"][\"relayfee\"]);\n+        result.pushKV(\"warnings\", batch[ID_NETWORKINFO][\"result\"][\"warnings\"]);\n+        return JSONRPCReplyObj(result, NullUniValue, 1);\n+    }\n+};\n+\n+/** Process default single requests */\n+class DefaultRequestHandler: public BaseRequestHandler {\n+public:\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        UniValue params;\n+        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+            params = RPCConvertNamedValues(method, args);\n+        } else {\n+            params = RPCConvertValues(method, args);\n+        }\n+        return JSONRPCRequestObj(method, params, 1);\n+    }\n+\n+    UniValue ProcessReply(const UniValue &reply) override\n+    {\n+        return reply.get_obj();\n+    }\n+};\n+\n+static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -238,7 +328,7 @@ static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n+    std::string strRequest = rh->PrepareRequest(strMethod, args).write() + \"\\n\";\n     struct evbuffer* output_buffer = evhttp_request_get_output_buffer(req.get());\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n@@ -277,7 +367,7 @@ static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     UniValue valReply(UniValue::VSTR);\n     if (!valReply.read(response.body))\n         throw std::runtime_error(\"couldn't parse reply from server\");\n-    const UniValue& reply = valReply.get_obj();\n+    const UniValue reply = rh->ProcessReply(valReply);\n     if (reply.empty())\n         throw std::runtime_error(\"expected reply to have result, error and id properties\");\n \n@@ -309,24 +399,25 @@ int CommandLineRPC(int argc, char *argv[])\n                 args.push_back(line);\n             }\n         }\n-        if (args.size() < 1) {\n-            throw std::runtime_error(\"too few parameters (need at least command)\");\n-        }\n-        std::string strMethod = args[0];\n-        args.erase(args.begin()); // Remove trailing method name from arguments vector\n-\n-        UniValue params;\n-        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n-            params = RPCConvertNamedValues(strMethod, args);\n+        std::unique_ptr<BaseRequestHandler> rh;\n+        std::string method;\n+        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+            rh.reset(new GetinfoRequestHandler());\n+            method = \"\";\n         } else {\n-            params = RPCConvertValues(strMethod, args);\n+            rh.reset(new DefaultRequestHandler());\n+            if (args.size() < 1) {\n+                throw std::runtime_error(\"too few parameters (need at least command)\");\n+            }\n+            method = args[0];\n+            args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n         // Execute and handle connection failures with -rpcwait\n         const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n-                const UniValue reply = CallRPC(strMethod, params);\n+                const UniValue reply = CallRPC(rh.get(), method, args);\n \n                 // Parse reply\n                 const UniValue& result = find_value(reply, \"result\");"
      },
      {
        "sha": "1f4ae75b18e25dfb00c7109a9cff6a3809a55090",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=382625318d8734fd71a6c9620d3e88b5617da0c5",
        "patch": "@@ -19,7 +19,7 @@\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n  * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were\n  * unspecified (HTTP errors and contents of 'error').\n- * \n+ *\n  * 1.0 spec: http://json-rpc.org/wiki/specification\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n  */\n@@ -135,3 +135,22 @@ void DeleteAuthCookie()\n     }\n }\n \n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+{\n+    if (!in.isArray()) {\n+        throw std::runtime_error(\"Batch must be an array\");\n+    }\n+    std::vector<UniValue> batch(num);\n+    for (size_t i=0; i<in.size(); ++i) {\n+        const UniValue &rec = in[i];\n+        if (!rec.isObject()) {\n+            throw std::runtime_error(\"Batch member must be object\");\n+        }\n+        size_t id = rec[\"id\"].get_int();\n+        if (id >= num) {\n+            throw std::runtime_error(\"Batch member id larger than size\");\n+        }\n+        batch[id] = rec;\n+    }\n+    return batch;\n+}"
      },
      {
        "sha": "bba7438c953fe195e9ed690bc5bc8fc9942e1ef0",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=382625318d8734fd71a6c9620d3e88b5617da0c5",
        "patch": "@@ -97,5 +97,7 @@ bool GenerateAuthCookie(std::string *cookie_out);\n bool GetAuthCookie(std::string *cookie_out);\n /** Delete RPC authentication cookie from disk */\n void DeleteAuthCookie();\n+/** Parse JSON-RPC batch reply into a vector */\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n \n #endif // BITCOIN_RPCPROTOCOL_H"
      }
    ]
  },
  {
    "sha": "5e69a430ee260950b69e0c36394671381add2b94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTY5YTQzMGVlMjYwOTUwYjY5ZTBjMzYzOTQ2NzEzODFhZGQyYjk0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-23T18:30:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-28T01:53:14Z"
      },
      "message": "Add test for bitcoin-cli -getinfo\n\nExtra-Author: Andrew Chow <achow101@gmail.com>",
      "tree": {
        "sha": "02820dcf6cdaa98f89994987519112e78dfbcf01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02820dcf6cdaa98f89994987519112e78dfbcf01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e69a430ee260950b69e0c36394671381add2b94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e69a430ee260950b69e0c36394671381add2b94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e69a430ee260950b69e0c36394671381add2b94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e69a430ee260950b69e0c36394671381add2b94/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "382625318d8734fd71a6c9620d3e88b5617da0c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/382625318d8734fd71a6c9620d3e88b5617da0c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/382625318d8734fd71a6c9620d3e88b5617da0c5"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "996cbb8a12d095d9613994193b5f29b971cd804c",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e69a430ee260950b69e0c36394671381add2b94/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e69a430ee260950b69e0c36394671381add2b94/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=5e69a430ee260950b69e0c36394671381add2b94",
        "patch": "@@ -35,5 +35,28 @@ def run_test(self):\n         assert_equal([\"foo\", \"bar\"], self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=password + \"\\nfoo\\nbar\").echo())\n         assert_raises_process_error(1, \"incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=\"foo\").echo)\n \n+        self.log.info(\"Compare responses from `bitcoin-cli -getinfo` and the RPCs data is retrieved from.\")\n+        cli_get_info = self.nodes[0].cli('-getinfo').help()\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        network_info = self.nodes[0].getnetworkinfo()\n+        blockchain_info = self.nodes[0].getblockchaininfo()\n+\n+        assert_equal(cli_get_info['version'], network_info['version'])\n+        assert_equal(cli_get_info['protocolversion'], network_info['protocolversion'])\n+        assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n+        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n+        assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n+        assert_equal(cli_get_info['connections'], network_info['connections'])\n+        assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n+        assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n+        assert_equal(cli_get_info['testnet'], blockchain_info['chain'] == \"test\")\n+        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n+        assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n+        assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n+        assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n+        # unlocked_until is not tested because the wallet is not encrypted\n+\n if __name__ == '__main__':\n     TestBitcoinCli().main()"
      }
    ]
  },
  {
    "sha": "5ddf56045ad65162c7cd5c757c81d9446299a5aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGRmNTYwNDVhZDY1MTYyYzdjZDVjNzU3YzgxZDk0NDYyOTlhNWFh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-09-28T02:49:18Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-09-28T02:49:18Z"
      },
      "message": "script: Change SignatureHash input index check to an assert.\n\nIn the SignatureHash function, the input index must refer to a valid\nindex. This is not enforced equally in the segwit/non-segwit branches\nand should be an assertion rather than returning a error hash.",
      "tree": {
        "sha": "858a75ffe10592458f7f15608c1a3289da97faf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/858a75ffe10592458f7f15608c1a3289da97faf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ddf56045ad65162c7cd5c757c81d9446299a5aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ddf56045ad65162c7cd5c757c81d9446299a5aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ddf56045ad65162c7cd5c757c81d9446299a5aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ddf56045ad65162c7cd5c757c81d9446299a5aa/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8340d25f7c5dd5682bdecea97ce84cfce1493c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "77314e8cb22cbf59bf89020b77a6053b4774abbd",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ddf56045ad65162c7cd5c757c81d9446299a5aa/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ddf56045ad65162c7cd5c757c81d9446299a5aa/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5ddf56045ad65162c7cd5c757c81d9446299a5aa",
        "patch": "@@ -1175,6 +1175,8 @@ PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n \n uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {\n+    assert(nIn < txTo.vin.size());\n+\n     if (sigversion == SIGVERSION_WITNESS_V0) {\n         uint256 hashPrevouts;\n         uint256 hashSequence;\n@@ -1221,10 +1223,6 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     }\n \n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n-    if (nIn >= txTo.vin.size()) {\n-        //  nIn out of range\n-        return one;\n-    }\n \n     // Check for invalid use of SIGHASH_SINGLE\n     if ((nHashType & 0x1f) == SIGHASH_SINGLE) {"
      }
    ]
  },
  {
    "sha": "d90a00eabed0f3f1acea4834ad489484d0012372",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTBhMDBlYWJlZDBmM2YxYWNlYTQ4MzRhZDQ4OTQ4NGQwMDEyMzcy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-28T03:09:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-28T03:09:59Z"
      },
      "message": "Merge #11397: net: Improve and document SOCKS code\n\n22f816ef4 net: Improve and document SOCKS code (Wladimir J. van der Laan)\n\nPull request description:\n\n  Make the SOCKS code more consistent, and document the constants used.\n\nTree-SHA512: 1bb04fcd6aacb6bfd2c54989d8298c892036466a895efb88be36fbace041af67c964ae0f5fb76c96f813f20a040109de4e0aac49a20844640e4d7633fcb22f25",
      "tree": {
        "sha": "67939f3b3548c456c8c5000fdf9626e1812c512b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67939f3b3548c456c8c5000fdf9626e1812c512b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d90a00eabed0f3f1acea4834ad489484d0012372",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnMaAcACgkQHrd2uwPH\nki3jug//ap1WSOB+A96gDmjpf40APKcSNlwGa79XSGcQnvjDz2O6x+jbDusiiAjj\nnX+wC1Pi99+jN/EpWN47huUD9Za5d0Dh8Luc0oMJ+p/EVYTKavUXcP4fbqx/5Ky4\n63OAHkjKO4iGmxO/d3Ivqgbu8Tv6/qvNq7r3/ArgLS6TbkcZCxy/PWIz67Oe0CQh\nUgR//6TbKYGLxJiApj3jh2Lhxv5aNqs7zy3Z5cb+h24n6iFHDajDhS5L6sJqAzn9\nXUSh9UQufVFUxeq1YsenWmPW421uVDlQqjYnSCcx4XeCHBw9q5fRc/XGKRif2xZH\njOK7gopdQVFdVAxiyM3EKRnlWou+KPLBXFZcqxgPm/cNLxEC9gpAS0AWz21cxTIS\nUs6XVOYyX19qHMCvCei9l0C3oRhqN2UoxJu3rxqkKt/6dr36wS+mrDM4Bc9eBlUe\nGidWKnuxpqGHug3G6HzBmJBDFKV266Vp8yYAL+7tLBE3IePo698NhAzedwrvtZ9B\no0VCX8SaJCw2wIdUUQcGqpVfHydBchMVq1S+B+CxwHyr6cDIaPOYPeRQzzK7+YF0\nbaGeafrbckkpXHlwZIzbXlrseL4MibJ+B2L9QihaozgZLYFThAqvpFGqJ/wnDA3/\nwZzRIL1G8R2m+PnWZco70/v1ADg9KK+ieCsOZxHvwjnGVOEjvbs=\n=RpW9\n-----END PGP SIGNATURE-----",
        "payload": "tree 67939f3b3548c456c8c5000fdf9626e1812c512b\nparent ef8340d25f7c5dd5682bdecea97ce84cfce1493c\nparent 22f816ef4dd57785627d801c247714cace7fc5b5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1506568189 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1506568199 -0700\n\nMerge #11397: net: Improve and document SOCKS code\n\n22f816ef4 net: Improve and document SOCKS code (Wladimir J. van der Laan)\n\nPull request description:\n\n  Make the SOCKS code more consistent, and document the constants used.\n\nTree-SHA512: 1bb04fcd6aacb6bfd2c54989d8298c892036466a895efb88be36fbace041af67c964ae0f5fb76c96f813f20a040109de4e0aac49a20844640e4d7633fcb22f25\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d90a00eabed0f3f1acea4834ad489484d0012372",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d90a00eabed0f3f1acea4834ad489484d0012372",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d90a00eabed0f3f1acea4834ad489484d0012372/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8340d25f7c5dd5682bdecea97ce84cfce1493c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8340d25f7c5dd5682bdecea97ce84cfce1493c"
      },
      {
        "sha": "22f816ef4dd57785627d801c247714cace7fc5b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22f816ef4dd57785627d801c247714cace7fc5b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22f816ef4dd57785627d801c247714cace7fc5b5"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 89,
      "deletions": 36
    },
    "files": [
      {
        "sha": "914124cb178183bd7ae726e610d97cdc6b410c74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 36,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d90a00eabed0f3f1acea4834ad489484d0012372/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d90a00eabed0f3f1acea4834ad489484d0012372/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d90a00eabed0f3f1acea4834ad489484d0012372",
        "patch": "@@ -184,6 +184,48 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+/** SOCKS version */\n+enum SOCKSVersion: uint8_t {\n+    SOCKS4 = 0x04,\n+    SOCKS5 = 0x05\n+};\n+\n+/** Values defined for METHOD in RFC1928 */\n+enum SOCKS5Method: uint8_t {\n+    NOAUTH = 0x00,        //! No authentication required\n+    GSSAPI = 0x01,        //! GSSAPI\n+    USER_PASS = 0x02,     //! Username/password\n+    NO_ACCEPTABLE = 0xff, //! No acceptable methods\n+};\n+\n+/** Values defined for CMD in RFC1928 */\n+enum SOCKS5Command: uint8_t {\n+    CONNECT = 0x01,\n+    BIND = 0x02,\n+    UDP_ASSOCIATE = 0x03\n+};\n+\n+/** Values defined for REP in RFC1928 */\n+enum SOCKS5Reply: uint8_t {\n+    SUCCEEDED = 0x00,        //! Succeeded\n+    GENFAILURE = 0x01,       //! General failure\n+    NOTALLOWED = 0x02,       //! Connection not allowed by ruleset\n+    NETUNREACHABLE = 0x03,   //! Network unreachable\n+    HOSTUNREACHABLE = 0x04,  //! Network unreachable\n+    CONNREFUSED = 0x05,      //! Connection refused\n+    TTLEXPIRED = 0x06,       //! TTL expired\n+    CMDUNSUPPORTED = 0x07,   //! Command not supported\n+    ATYPEUNSUPPORTED = 0x08, //! Address type not supported\n+};\n+\n+/** Values defined for ATYPE in RFC1928 */\n+enum SOCKS5Atyp: uint8_t {\n+    IPV4 = 0x01,\n+    DOMAINNAME = 0x03,\n+    IPV6 = 0x04,\n+};\n+\n+/** Status codes that can be returned by InterruptibleRecv */\n enum class IntrRecvError {\n     OK,\n     Timeout,\n@@ -203,15 +245,15 @@ enum class IntrRecvError {\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n     // Maximum time to wait in one select call. It will take up until this time (in millis)\n     // to break off in case of an interruption.\n     const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n-        ssize_t ret = recv(hSocket, data, len, 0); // Optimistically try the recv first\n+        ssize_t ret = recv(hSocket, (char*)data, len, 0); // Optimistically try the recv first\n         if (ret > 0) {\n             len -= ret;\n             data += ret;\n@@ -242,24 +284,35 @@ static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, cons\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n+/** Credentials for proxy authentication */\n struct ProxyCredentials\n {\n     std::string username;\n     std::string password;\n };\n \n-std::string Socks5ErrorString(int err)\n+/** Convert SOCKS5 reply to a an error message */\n+std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {\n-        case 0x01: return \"general failure\";\n-        case 0x02: return \"connection not allowed\";\n-        case 0x03: return \"network unreachable\";\n-        case 0x04: return \"host unreachable\";\n-        case 0x05: return \"connection refused\";\n-        case 0x06: return \"TTL expired\";\n-        case 0x07: return \"protocol error\";\n-        case 0x08: return \"address type not supported\";\n-        default:   return \"unknown\";\n+        case SOCKS5Reply::GENFAILURE:\n+            return \"general failure\";\n+        case SOCKS5Reply::NOTALLOWED:\n+            return \"connection not allowed\";\n+        case SOCKS5Reply::NETUNREACHABLE:\n+            return \"network unreachable\";\n+        case SOCKS5Reply::HOSTUNREACHABLE:\n+            return \"host unreachable\";\n+        case SOCKS5Reply::CONNREFUSED:\n+            return \"connection refused\";\n+        case SOCKS5Reply::TTLEXPIRED:\n+            return \"TTL expired\";\n+        case SOCKS5Reply::CMDUNSUPPORTED:\n+            return \"protocol error\";\n+        case SOCKS5Reply::ATYPEUNSUPPORTED:\n+            return \"address type not supported\";\n+        default:\n+            return \"unknown\";\n     }\n }\n \n@@ -274,34 +327,34 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     // Accepted authentication methods\n     std::vector<uint8_t> vSocks5Init;\n-    vSocks5Init.push_back(0x05);\n+    vSocks5Init.push_back(SOCKSVersion::SOCKS5);\n     if (auth) {\n-        vSocks5Init.push_back(0x02); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n-        vSocks5Init.push_back(0x02); // X'02' USERNAME/PASSWORD (RFC1929)\n+        vSocks5Init.push_back(0x02); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n+        vSocks5Init.push_back(SOCKS5Method::USER_PASS);\n     } else {\n-        vSocks5Init.push_back(0x01); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n+        vSocks5Init.push_back(0x01); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet1[2];\n+    uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n-    if (pchRet1[0] != 0x05) {\n+    if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n-    if (pchRet1[1] == 0x02 && auth) {\n+    if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n         // Perform username/password authentication (as described in RFC1929)\n         std::vector<uint8_t> vAuth;\n-        vAuth.push_back(0x01);\n+        vAuth.push_back(0x01); // Current (and only) version of user/pass subnegotiation\n         if (auth->username.size() > 255 || auth->password.size() > 255)\n             return error(\"Proxy username or password too long\");\n         vAuth.push_back(auth->username.size());\n@@ -314,7 +367,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n-        char pchRetA[2];\n+        uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n@@ -323,17 +376,17 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n-    } else if (pchRet1[1] == 0x00) {\n+    } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n         CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n-    vSocks5.push_back(0x05); // VER protocol version\n-    vSocks5.push_back(0x01); // CMD CONNECT\n-    vSocks5.push_back(0x00); // RSV Reserved\n-    vSocks5.push_back(0x03); // ATYP DOMAINNAME\n+    vSocks5.push_back(SOCKSVersion::SOCKS5); // VER protocol version\n+    vSocks5.push_back(SOCKS5Command::CONNECT); // CMD CONNECT\n+    vSocks5.push_back(0x00); // RSV Reserved must be 0\n+    vSocks5.push_back(SOCKS5Atyp::DOMAINNAME); // ATYP DOMAINNAME\n     vSocks5.push_back(strDest.size()); // Length<=255 is checked at beginning of function\n     vSocks5.insert(vSocks5.end(), strDest.begin(), strDest.end());\n     vSocks5.push_back((port >> 8) & 0xFF);\n@@ -343,7 +396,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet2[4];\n+    uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n@@ -355,26 +408,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error while reading proxy response\");\n         }\n     }\n-    if (pchRet2[0] != 0x05) {\n+    if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n-    if (pchRet2[1] != 0x00) {\n+    if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n-    if (pchRet2[2] != 0x00) {\n+    if (pchRet2[2] != 0x00) { // Reserved field must be 0\n         CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n-    char pchRet3[256];\n+    uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x03:\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::DOMAINNAME:\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {"
      }
    ]
  },
  {
    "sha": "c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWE0YWE4YTBlN2UwZTIyZjJkOGJiZjg4ZjU4ZWI3NDlhZDgzYTI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T06:33:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T06:33:36Z"
      },
      "message": "Merge #10871: Handle getinfo in bitcoin-cli w/ -getinfo (revival of #8843)\n\n5e69a43 Add test for bitcoin-cli -getinfo (John Newbery)\n3826253 rpc: Handle `getinfo` locally in bitcoin-cli w/ `-getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Since @laanwj doesn't want to maintain these changes anymore, I will.\n\n  This PR is a revival of #8843. I have addressed @jnewbery's comments.\n\n  Regarding atomicity, I don't think that is a concern here. This is explicitly a new API and those who use it will know that this is different and that it is not atomic.\n\nTree-SHA512: 9664ed13a5557bda8c43f34d6527669a641f260b7830e592409b28c845258fc7e0fdd85dd42bfa88c103fea3ecdfede5f81e3d91870e2accba81c6d6de6b21ff",
      "tree": {
        "sha": "ee07628ca362621060d28660c71f2abd4d6b051e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee07628ca362621060d28660c71f2abd4d6b051e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzJfAAAoJEB5K7WKYbNJdI48H/jOXFV4+YADuQEw+hSGPLPOM\nkoLjtYekJle627lv2JejWwOPYvcmWgWYYnagX0UTpLv1xyS6lTJz53VxaFke8tgT\nJxNm4TOOCJ6x5uHMlfXgvR/GKaZxs1+boFSJgZavlNQFgFsrSwTNMGxUJHes42R3\nvZTRng8MCHNkJluORyZmcYqmd9I84CdenF8gs2eZ4ycVOyT44MPMPJoSL7AOD5m1\nO5GoCvmgjoPkW8QQxnbMGhura95Zv+WV6iKDKyWqJBAWT4irAWfelLNB/RHQ6zt6\nz7zu30QOY5udEx63gHKqxLsWIYikKgN6x1pAmy6kmqyqc5muIzsfVf+Gaom4Asc=\n=hOoI\n-----END PGP SIGNATURE-----",
        "payload": "tree ee07628ca362621060d28660c71f2abd4d6b051e\nparent d90a00eabed0f3f1acea4834ad489484d0012372\nparent 5e69a430ee260950b69e0c36394671381add2b94\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506580392 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506580416 +0200\n\nMerge #10871: Handle getinfo in bitcoin-cli w/ -getinfo (revival of #8843)\n\n5e69a43 Add test for bitcoin-cli -getinfo (John Newbery)\n3826253 rpc: Handle `getinfo` locally in bitcoin-cli w/ `-getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Since @laanwj doesn't want to maintain these changes anymore, I will.\n\n  This PR is a revival of #8843. I have addressed @jnewbery's comments.\n\n  Regarding atomicity, I don't think that is a concern here. This is explicitly a new API and those who use it will know that this is different and that it is not atomic.\n\nTree-SHA512: 9664ed13a5557bda8c43f34d6527669a641f260b7830e592409b28c845258fc7e0fdd85dd42bfa88c103fea3ecdfede5f81e3d91870e2accba81c6d6de6b21ff\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d90a00eabed0f3f1acea4834ad489484d0012372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d90a00eabed0f3f1acea4834ad489484d0012372",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d90a00eabed0f3f1acea4834ad489484d0012372"
      },
      {
        "sha": "5e69a430ee260950b69e0c36394671381add2b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e69a430ee260950b69e0c36394671381add2b94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e69a430ee260950b69e0c36394671381add2b94"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 150,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e21a2692212a4a7660581f9c6413d4cd1f233664",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 14,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
        "patch": "@@ -37,6 +37,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n@@ -191,7 +192,96 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n }\n #endif\n \n-static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n+/** Class that handles the conversion from a command-line to a JSON-RPC request,\n+ * as well as converting back to a JSON object that can be shown as result.\n+ */\n+class BaseRequestHandler\n+{\n+public:\n+    virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n+    virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n+};\n+\n+/** Process getinfo requests */\n+class GetinfoRequestHandler: public BaseRequestHandler\n+{\n+public:\n+    const int ID_NETWORKINFO = 0;\n+    const int ID_BLOCKCHAININFO = 1;\n+    const int ID_WALLETINFO = 2;\n+\n+    /** Create a simulated `getinfo` request. */\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));\n+        result.push_back(JSONRPCRequestObj(\"getwalletinfo\", NullUniValue, ID_WALLETINFO));\n+        return result;\n+    }\n+\n+    /** Collect values from the batch and form a simulated `getinfo` reply. */\n+    UniValue ProcessReply(const UniValue &batch_in) override\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in, 3);\n+        // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on\n+        // getwalletinfo() is allowed to fail in case there is no wallet.\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) {\n+            return batch[ID_NETWORKINFO];\n+        }\n+        if (!batch[ID_BLOCKCHAININFO][\"error\"].isNull()) {\n+            return batch[ID_BLOCKCHAININFO];\n+        }\n+        result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n+        result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+        }\n+        result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n+        result.pushKV(\"timeoffset\", batch[ID_NETWORKINFO][\"result\"][\"timeoffset\"]);\n+        result.pushKV(\"connections\", batch[ID_NETWORKINFO][\"result\"][\"connections\"]);\n+        result.pushKV(\"proxy\", batch[ID_NETWORKINFO][\"result\"][\"networks\"][0][\"proxy\"]);\n+        result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n+        result.pushKV(\"testnet\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"].get_str() == \"test\"));\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+            result.pushKV(\"keypoololdest\", batch[ID_WALLETINFO][\"result\"][\"keypoololdest\"]);\n+            result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n+            if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n+                result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);\n+            }\n+            result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n+        }\n+        result.pushKV(\"relayfee\", batch[ID_NETWORKINFO][\"result\"][\"relayfee\"]);\n+        result.pushKV(\"warnings\", batch[ID_NETWORKINFO][\"result\"][\"warnings\"]);\n+        return JSONRPCReplyObj(result, NullUniValue, 1);\n+    }\n+};\n+\n+/** Process default single requests */\n+class DefaultRequestHandler: public BaseRequestHandler {\n+public:\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        UniValue params;\n+        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+            params = RPCConvertNamedValues(method, args);\n+        } else {\n+            params = RPCConvertValues(method, args);\n+        }\n+        return JSONRPCRequestObj(method, params, 1);\n+    }\n+\n+    UniValue ProcessReply(const UniValue &reply) override\n+    {\n+        return reply.get_obj();\n+    }\n+};\n+\n+static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -238,7 +328,7 @@ static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n+    std::string strRequest = rh->PrepareRequest(strMethod, args).write() + \"\\n\";\n     struct evbuffer* output_buffer = evhttp_request_get_output_buffer(req.get());\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n@@ -277,7 +367,7 @@ static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     UniValue valReply(UniValue::VSTR);\n     if (!valReply.read(response.body))\n         throw std::runtime_error(\"couldn't parse reply from server\");\n-    const UniValue& reply = valReply.get_obj();\n+    const UniValue reply = rh->ProcessReply(valReply);\n     if (reply.empty())\n         throw std::runtime_error(\"expected reply to have result, error and id properties\");\n \n@@ -309,24 +399,25 @@ int CommandLineRPC(int argc, char *argv[])\n                 args.push_back(line);\n             }\n         }\n-        if (args.size() < 1) {\n-            throw std::runtime_error(\"too few parameters (need at least command)\");\n-        }\n-        std::string strMethod = args[0];\n-        args.erase(args.begin()); // Remove trailing method name from arguments vector\n-\n-        UniValue params;\n-        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n-            params = RPCConvertNamedValues(strMethod, args);\n+        std::unique_ptr<BaseRequestHandler> rh;\n+        std::string method;\n+        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+            rh.reset(new GetinfoRequestHandler());\n+            method = \"\";\n         } else {\n-            params = RPCConvertValues(strMethod, args);\n+            rh.reset(new DefaultRequestHandler());\n+            if (args.size() < 1) {\n+                throw std::runtime_error(\"too few parameters (need at least command)\");\n+            }\n+            method = args[0];\n+            args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n         // Execute and handle connection failures with -rpcwait\n         const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n-                const UniValue reply = CallRPC(strMethod, params);\n+                const UniValue reply = CallRPC(rh.get(), method, args);\n \n                 // Parse reply\n                 const UniValue& result = find_value(reply, \"result\");"
      },
      {
        "sha": "1f4ae75b18e25dfb00c7109a9cff6a3809a55090",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
        "patch": "@@ -19,7 +19,7 @@\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n  * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were\n  * unspecified (HTTP errors and contents of 'error').\n- * \n+ *\n  * 1.0 spec: http://json-rpc.org/wiki/specification\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n  */\n@@ -135,3 +135,22 @@ void DeleteAuthCookie()\n     }\n }\n \n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+{\n+    if (!in.isArray()) {\n+        throw std::runtime_error(\"Batch must be an array\");\n+    }\n+    std::vector<UniValue> batch(num);\n+    for (size_t i=0; i<in.size(); ++i) {\n+        const UniValue &rec = in[i];\n+        if (!rec.isObject()) {\n+            throw std::runtime_error(\"Batch member must be object\");\n+        }\n+        size_t id = rec[\"id\"].get_int();\n+        if (id >= num) {\n+            throw std::runtime_error(\"Batch member id larger than size\");\n+        }\n+        batch[id] = rec;\n+    }\n+    return batch;\n+}"
      },
      {
        "sha": "cb668f3db9388e20f2639e2565ef688ec3c45fa9",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
        "patch": "@@ -98,5 +98,7 @@ bool GenerateAuthCookie(std::string *cookie_out);\n bool GetAuthCookie(std::string *cookie_out);\n /** Delete RPC authentication cookie from disk */\n void DeleteAuthCookie();\n+/** Parse JSON-RPC batch reply into a vector */\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n \n #endif // BITCOIN_RPCPROTOCOL_H"
      },
      {
        "sha": "996cbb8a12d095d9613994193b5f29b971cd804c",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
        "patch": "@@ -35,5 +35,28 @@ def run_test(self):\n         assert_equal([\"foo\", \"bar\"], self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=password + \"\\nfoo\\nbar\").echo())\n         assert_raises_process_error(1, \"incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=\"foo\").echo)\n \n+        self.log.info(\"Compare responses from `bitcoin-cli -getinfo` and the RPCs data is retrieved from.\")\n+        cli_get_info = self.nodes[0].cli('-getinfo').help()\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        network_info = self.nodes[0].getnetworkinfo()\n+        blockchain_info = self.nodes[0].getblockchaininfo()\n+\n+        assert_equal(cli_get_info['version'], network_info['version'])\n+        assert_equal(cli_get_info['protocolversion'], network_info['protocolversion'])\n+        assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n+        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n+        assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n+        assert_equal(cli_get_info['connections'], network_info['connections'])\n+        assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n+        assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n+        assert_equal(cli_get_info['testnet'], blockchain_info['chain'] == \"test\")\n+        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n+        assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n+        assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n+        assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n+        # unlocked_until is not tested because the wallet is not encrypted\n+\n if __name__ == '__main__':\n     TestBitcoinCli().main()"
      }
    ]
  },
  {
    "sha": "4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjAyMjczZmZhNDViYjE3NWVmNWI1NWViMzAyNWI1MmZjN2Q0YzI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T11:19:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T11:19:38Z"
      },
      "message": "Merge #11401: doc: move gitian building to external repo\n\nfa082b4 doc: move gitian building to external repo (MarcoFalke)\n\nPull request description:\n\n  The guide was moved to [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md).\n\n  It now includes not only instructions to run on a debian host, but also on\n  any recent fedora host.\n\n  This is an ongoing effort to reduce the fraction caused by incoming\n  pull requests to docs (usually fixups, typo fixes, version bumps).\n\n  This is especially important for documentation that is independent\n  of any release cycles and should thus be up-to-date regardless\n  of a tag on a non-master branch.\n\n  Finally, fetching a shallow copy of the source is less heavy,\n  as many binary png files are moved out of the repo.\n\nTree-SHA512: c88a11667826d44f90af41e50f9e8d5b3132ae83b278597f13be694872212e7eff99fd877feec0308e00259c69fd4e0ebaf3ff5ab45e08a1e41336aa505bb72b",
      "tree": {
        "sha": "77c65ed66f712564c8798f775e2d3bdb26cec0a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77c65ed66f712564c8798f775e2d3bdb26cec0a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzNrKAAoJEB5K7WKYbNJdXjgIAMMTGPnibS5kT4FNu9u9QpNi\nKy2vhLfVJXY4JK4PQ5fw0Nr4arzoDAnJqe5/Nt7CTw5oeb/CEN6pkPC2HiQmCTsI\nI8iiriUpglhN5teiPYJpLJktQ9IMbow6WOqOCIT73UAYvq+nepg8RZnHLi6P94BL\nGUC3VZbFl0TXCTsD7hNuCViLjgcNpmYWy8+ZBIwXutDGWKP0BPRPD2aQmyVO2My+\n/CE1Y8tvnKPPrJ5vXCVVlYqWG33ffn0H9NjvQOBZr4J62FzSQ2rvfpbbGxNpV5Kq\nCEcO7ysVKVEkTQ8RlJs+DFyFTnUl9SvN9hLTh2REF1ytJpLhpUT8D7RDvxIJyH4=\n=4hSv\n-----END PGP SIGNATURE-----",
        "payload": "tree 77c65ed66f712564c8798f775e2d3bdb26cec0a8\nparent c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25\nparent fa082b4ee05e83ffa0c7c3e6e433595343707c59\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506597548 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506597578 +0200\n\nMerge #11401: doc: move gitian building to external repo\n\nfa082b4 doc: move gitian building to external repo (MarcoFalke)\n\nPull request description:\n\n  The guide was moved to [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md).\n\n  It now includes not only instructions to run on a debian host, but also on\n  any recent fedora host.\n\n  This is an ongoing effort to reduce the fraction caused by incoming\n  pull requests to docs (usually fixups, typo fixes, version bumps).\n\n  This is especially important for documentation that is independent\n  of any release cycles and should thus be up-to-date regardless\n  of a tag on a non-master branch.\n\n  Finally, fetching a shallow copy of the source is less heavy,\n  as many binary png files are moved out of the repo.\n\nTree-SHA512: c88a11667826d44f90af41e50f9e8d5b3132ae83b278597f13be694872212e7eff99fd877feec0308e00259c69fd4e0ebaf3ff5ab45e08a1e41336aa505bb72b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4202273ffa45bb175ef5b55eb3025b52fc7d4c26/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "fa082b4ee05e83ffa0c7c3e6e433595343707c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa082b4ee05e83ffa0c7c3e6e433595343707c59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa082b4ee05e83ffa0c7c3e6e433595343707c59"
      }
    ],
    "stats": {
      "total": 482,
      "additions": 1,
      "deletions": 481
    },
    "files": [
      {
        "sha": "3a48f4a0b397770e44f51477df854f8298ce1b75",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 481,
        "changes": 482,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4202273ffa45bb175ef5b55eb3025b52fc7d4c26/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4202273ffa45bb175ef5b55eb3025b52fc7d4c26/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
        "patch": "@@ -1,484 +1,4 @@\n Gitian building\n ================\n \n-*Setup instructions for a Gitian build of Bitcoin Core using a Debian VM or physical system.*\n-\n-Gitian is the deterministic build process that is used to build the Bitcoin\n-Core executables. It provides a way to be reasonably sure that the\n-executables are really built from the source on GitHub. It also makes sure that\n-the same, tested dependencies are used and statically built into the executable.\n-\n-Multiple developers build the source code by following a specific descriptor\n-(\"recipe\"), cryptographically sign the result, and upload the resulting signature.\n-These results are compared and only if they match, the build is accepted and uploaded\n-to bitcoin.org.\n-\n-More independent Gitian builders are needed, which is why this guide exists.\n-It is preferred you follow these steps yourself instead of using someone else's\n-VM image to avoid 'contaminating' the build.\n-\n-Table of Contents\n-------------------\n-\n-- [Create a new VirtualBox VM](#create-a-new-virtualbox-vm)\n-- [Connecting to the VM](#connecting-to-the-vm)\n-- [Setting up Debian for Gitian building](#setting-up-debian-for-gitian-building)\n-- [Installing Gitian](#installing-gitian)\n-- [Setting up the Gitian image](#setting-up-the-gitian-image)\n-- [Getting and building the inputs](#getting-and-building-the-inputs)\n-- [Building Bitcoin Core](#building-bitcoin-core)\n-- [Building an alternative repository](#building-an-alternative-repository)\n-- [Signing externally](#signing-externally)\n-- [Uploading signatures](#uploading-signatures)\n-\n-Preparing the Gitian builder host\n----------------------------------\n-\n-The first step is to prepare the host environment that will be used to perform the Gitian builds.\n-This guide explains how to set up the environment, and how to start the builds.\n-\n-Debian Linux was chosen as the host distribution because it has a lightweight install (in contrast to Ubuntu) and is readily available.\n-Any kind of virtualization can be used, for example:\n-- [VirtualBox](https://www.virtualbox.org/) (covered by this guide)\n-- [KVM](http://www.linux-kvm.org/page/Main_Page)\n-- [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n-\n-You can also install Gitian on actual hardware instead of using virtualization.\n-\n-Create a new VirtualBox VM\n----------------------------\n-In the VirtualBox GUI click \"New\" and choose the following parameters in the wizard:\n-\n-![](gitian-building/create_new_vm.png)\n-\n-- Type: Linux, Debian (64-bit)\n-\n-![](gitian-building/create_vm_memsize.png)\n-\n-- Memory Size: at least 3000MB, anything less and the build might not complete.\n-\n-![](gitian-building/create_vm_hard_disk.png)\n-\n-- Hard Disk: Create a virtual hard disk now\n-\n-![](gitian-building/create_vm_hard_disk_file_type.png)\n-\n-- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image)\n-\n-![](gitian-building/create_vm_storage_physical_hard_disk.png)\n-\n-- Storage on physical hard disk: Dynamically Allocated\n-\n-![](gitian-building/create_vm_file_location_size.png)\n-\n-- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side\n-- Click `Create`\n-\n-After creating the VM, we need to configure it.\n-\n-- Click the `Settings` button, then go to `System` tab and `Processor` sub-tab. Increase the number of processors to the number of cores on your machine if you want builds to be faster.\n-\n-![](gitian-building/system_settings.png)\n-\n-- Go to the `Network` tab. Adapter 1 should be attached to `NAT`.\n-\n-![](gitian-building/network_settings.png)\n-\n-- Click `Advanced`, then `Port Forwarding`. We want to set up a port through which we can reach the VM to get files in and out.\n-- Create a new rule by clicking the plus icon.\n-\n-![](gitian-building/port_forwarding_rules.png)\n-\n-- Set up the new rule the following way:\n-  - Name: `SSH`\n-  - Protocol: `TCP`\n-  - Leave Host IP empty\n-  - Host Port: `22222`\n-  - Leave Guest IP empty\n-  - Guest Port: `22`\n-\n-- Click `Ok` twice to save.\n-\n-Get the [Debian 8.x net installer](http://cdimage.debian.org/mirror/cdimage/archive/8.5.0/amd64/iso-cd/debian-8.5.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n-This DVD image can be [validated](https://www.debian.org/CD/verify) using a SHA256 hashing tool, for example on\n-Unixy OSes by entering the following in a terminal:\n-\n-    echo \"ad4e8c27c561ad8248d5ebc1d36eb172f884057bfeb2c22ead823f59fa8c3dff  debian-8.5.0-amd64-netinst.iso\" | sha256sum -c\n-    # (must return OK)\n-\n-Then start the VM. On the first launch you will be asked for a CD or DVD image. Choose the downloaded ISO.\n-\n-![](gitian-building/select_startup_disk.png)\n-\n-Installing Debian\n-------------------\n-\n-This section will explain how to install Debian on the newly created VM.\n-\n-- Choose the non-graphical installer.  We do not need the graphical environment; it will only increase installation time and disk usage.\n-\n-![](gitian-building/debian_install_1_boot_menu.png)\n-\n-**Note**: Navigating in the Debian installer:\n-To keep a setting at the default and proceed, just press `Enter`.\n-To select a different button, press `Tab`.\n-\n-- Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n-\n-![](gitian-building/debian_install_2_select_a_language.png)\n-![](gitian-building/debian_install_3_select_location.png)\n-![](gitian-building/debian_install_4_configure_keyboard.png)\n-\n-- The VM will detect network settings using DHCP, this should all proceed automatically\n-- Configure the network:\n-  - Hostname `debian`.\n-  - Leave domain name empty.\n-\n-![](gitian-building/debian_install_5_configure_the_network.png)\n-![](gitian-building/debian_install_6_domain_name.png)\n-\n-- Choose a root password and enter it twice (remember it for later)\n-\n-![](gitian-building/debian_install_6a_set_up_root_password.png)\n-\n-- Name the new user `debian` (the full name doesn't matter, you can leave it empty)\n-- Set the account username as `debian`\n-\n-![](gitian-building/debian_install_7_set_up_user_fullname.png)\n-![](gitian-building/debian_install_8_set_up_username.png)\n-\n-- Choose a user password and enter it twice (remember it for later)\n-\n-![](gitian-building/debian_install_9_user_password.png)\n-\n-- The installer will set up the clock using a time server; this process should be automatic\n-- Set up the clock: choose a time zone (depends on the locale settings that you picked earlier; specifics don't matter)  \n-\n-![](gitian-building/debian_install_10_configure_clock.png)\n-\n-- Disk setup\n-  - Partitioning method: Guided - Use the entire disk\n-\n-![](gitian-building/debian_install_11_partition_disks.png)\n-\n-  - Select disk to partition: SCSI1 (0,0,0)\n-\n-![](gitian-building/debian_install_12_choose_disk.png)\n-\n-  - Partition Disks -> *All files in one partition*\n-\n-![](gitian-building/all_files_in_one_partition.png)\n-\n-  - Finish partitioning and write changes to disk -> *Yes* (`Tab`, `Enter` to select the `Yes` button)\n-\n-![](gitian-building/debian_install_14_finish.png)\n-![](gitian-building/debian_install_15_write_changes.png)\n-\n-- The base system will be installed, this will take a minute or so\n-- Choose a mirror (any will do)\n-\n-![](gitian-building/debian_install_16_choose_a_mirror.png)\n-\n-- Enter proxy information (unless you are on an intranet, leave this empty)\n-\n-![](gitian-building/debian_install_18_proxy_settings.png)\n-\n-- Wait a bit while 'Select and install software' runs\n-- Participate in popularity contest -> *No*\n-- Choose software to install. We need just the base system.\n-- Make sure only 'SSH server' and 'Standard System Utilities' are checked\n-- Uncheck 'Debian Desktop Environment' and 'Print Server'\n-\n-![](gitian-building/debian_install_19_software_selection.png)\n-\n-- Install the GRUB boot loader to the master boot record? -> Yes\n-\n-![](gitian-building/debian_install_20_install_grub.png)\n-\n-- Device for boot loader installation -> ata-VBOX_HARDDISK\n-\n-![](gitian-building/debian_install_21_install_grub_bootloader.png)\n-\n-- Installation Complete -> *Continue*\n-- After installation, the VM will reboot and you will have a working Debian VM. Congratulations!\n-\n-![](gitian-building/debian_install_22_finish_installation.png)\n-\n-\n-After Installation\n--------------------\n-The next step in the guide involves logging in as root via SSH.\n-SSH login for root users is disabled by default, so we'll enable that now.\n-\n-Login to the VM using username `root` and the root password you chose earlier.\n-You'll be presented with a screen similar to this.\n-\n-![](gitian-building/debian_root_login.png)\n-\n-Type:\n-\n-```\n-sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config\n-```\n-and press enter. Then,\n-```\n-/etc/init.d/ssh restart\n-```\n-and enter to restart SSH. Logout by typing 'logout' and pressing 'enter'.\n-\n-Connecting to the VM\n-----------------------\n-\n-After the VM has booted you can connect to it using SSH, and files can be copied from and to the VM using a SFTP utility.\n-Connect to `localhost`, port `22222` (or the port configured when installing the VM).\n-On Windows you can use [putty](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html) and [WinSCP](http://winscp.net/eng/index.php).\n-\n-For example, to connect as `root` from a Linux command prompt use\n-\n-    $ ssh root@localhost -p 22222\n-    The authenticity of host '[localhost]:22222 ([127.0.0.1]:22222)' can't be established.\n-    RSA key fingerprint is ae:f5:c8:9f:17:c6:c7:1b:c2:1b:12:31:1d:bb:d0:c7.\n-    Are you sure you want to continue connecting (yes/no)? yes\n-    Warning: Permanently added '[localhost]:22222' (RSA) to the list of known hosts.\n-    root@localhost's password: (enter root password configured during install)\n-\n-    The programs included with the Debian GNU/Linux system are free software;\n-    the exact distribution terms for each program are described in the\n-    individual files in /usr/share/doc/*/copyright.\n-\n-    Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n-    permitted by applicable law.\n-    root@debian:~#\n-\n-Replace `root` with `debian` to log in as user.\n-\n-Setting up Debian for Gitian building\n---------------------------------------\n-\n-In this section we will be setting up the Debian installation for Gitian building.\n-\n-First we need to log in as `root` to set up dependencies and make sure that our\n-user can use the sudo command. Type/paste the following in the terminal:\n-\n-```bash\n-apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring curl\n-adduser debian sudo\n-```\n-\n-Then set up LXC and the rest with the following, which is a complex jumble of settings and workarounds:\n-\n-```bash\n-# the version of lxc-start in Debian needs to run as root, so make sure\n-# that the build script can execute it without providing a password\n-echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-start\" > /etc/sudoers.d/gitian-lxc\n-echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-execute\" >> /etc/sudoers.d/gitian-lxc\n-# make /etc/rc.local script that sets up bridge between guest and host\n-echo '#!/bin/sh -e' > /etc/rc.local\n-echo 'brctl addbr br0' >> /etc/rc.local\n-echo 'ifconfig br0 10.0.3.2/24 up' >> /etc/rc.local\n-echo 'iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE' >> /etc/rc.local\n-echo 'echo 1 > /proc/sys/net/ipv4/ip_forward' >> /etc/rc.local\n-echo 'exit 0' >> /etc/rc.local\n-# make sure that USE_LXC is always set when logging in as debian,\n-# and configure LXC IP addresses\n-echo 'export USE_LXC=1' >> /home/debian/.profile\n-echo 'export GITIAN_HOST_IP=10.0.3.2' >> /home/debian/.profile\n-echo 'export LXC_GUEST_IP=10.0.3.5' >> /home/debian/.profile\n-reboot\n-```\n-\n-At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n-section only need to be performed once.\n-\n-Installing Gitian\n-------------------\n-\n-Re-login as the user `debian` that was created during installation.\n-The rest of the steps in this guide will be performed as that user.\n-\n-There is no `python-vm-builder` package in Debian, so we need to install it from source ourselves,\n-\n-```bash\n-wget http://archive.ubuntu.com/ubuntu/pool/universe/v/vm-builder/vm-builder_0.12.4+bzr494.orig.tar.gz\n-echo \"76cbf8c52c391160b2641e7120dbade5afded713afaa6032f733a261f13e6a8e  vm-builder_0.12.4+bzr494.orig.tar.gz\" | sha256sum -c\n-# (verification -- must return OK)\n-tar -zxvf vm-builder_0.12.4+bzr494.orig.tar.gz\n-cd vm-builder-0.12.4+bzr494\n-sudo python setup.py install\n-cd ..\n-```\n-\n-**Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n-\n-Clone the git repositories for bitcoin and Gitian.\n-\n-```bash\n-git clone https://github.com/devrandom/gitian-builder.git\n-git clone https://github.com/bitcoin/bitcoin\n-git clone https://github.com/bitcoin-core/gitian.sigs.git\n-```\n-\n-Setting up the Gitian image\n--------------------------\n-\n-Gitian needs a virtual image of the operating system to build in.\n-Currently this is Ubuntu Trusty x86_64.\n-This image will be copied and used every time that a build is started to\n-make sure that the build is deterministic.\n-Creating the image will take a while, but only has to be done once.\n-\n-Execute the following as user `debian`:\n-\n-```bash\n-cd gitian-builder\n-bin/make-base-vm --lxc --arch amd64 --suite trusty\n-```\n-\n-There will be a lot of warnings printed during the build of the image. These can be ignored.\n-\n-**Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n-\n-Getting and building the inputs\n---------------------------------\n-\n-At this point you have two options, you can either use the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)) or you could manually do everything by following this guide. If you're using the automated script, then run it with the \"--setup\" command. Afterwards, run it with the \"--build\" command (example: \"contrib/gitian-build.sh -b signer 0.13.0\"). Otherwise ignore this.\n-\n-Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-create-inputs-first-time-or-when-dependency-versions-change)\n-in the bitcoin repository under 'Fetch and create inputs' to install sources which require\n-manual intervention. Also optionally follow the next step: 'Seed the Gitian sources cache\n-and offline git repositories' which will fetch the remaining files required for building\n-offline.\n-\n-Building Bitcoin Core\n-----------------\n-\n-To build Bitcoin Core (for Linux, OS X and Windows) just follow the steps under 'perform\n-Gitian builds' in [doc/release-process.md](release-process.md#setup-and-perform-gitian-builds) in the bitcoin repository.\n-\n-This may take some time as it will build all the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n-\n-At any time you can check the package installation and build progress with\n-\n-```bash\n-tail -f var/install.log\n-tail -f var/build.log\n-```\n-\n-Output from `gbuild` will look something like\n-\n-    Initialized empty Git repository in /home/debian/gitian-builder/inputs/bitcoin/.git/\n-    remote: Counting objects: 57959, done.\n-    remote: Total 57959 (delta 0), reused 0 (delta 0), pack-reused 57958\n-    Receiving objects: 100% (57959/57959), 53.76 MiB | 484.00 KiB/s, done.\n-    Resolving deltas: 100% (41590/41590), done.\n-    From https://github.com/bitcoin/bitcoin\n-    ... (new tags, new branch etc)\n-    --- Building for trusty amd64 ---\n-    Stopping target if it is up\n-    Making a new image copy\n-    stdin: is not a tty\n-    Starting target\n-    Checking if target is up\n-    Preparing build environment\n-    Updating apt-get repository (log in var/install.log)\n-    Installing additional packages (log in var/install.log)\n-    Grabbing package manifest\n-    stdin: is not a tty\n-    Creating build script (var/build-script)\n-    lxc-start: Connection refused - inotify event with no name (mask 32768)\n-    Running build script (log in var/build.log)\n-\n-Building an alternative repository\n------------------------------------\n-\n-If you want to do a test build of a pull on GitHub it can be useful to point\n-the Gitian builder at an alternative repository, using the same descriptors\n-and inputs.\n-\n-For example:\n-```bash\n-URL=https://github.com/laanwj/bitcoin.git\n-COMMIT=2014_03_windows_unicode_path\n-./bin/gbuild --commit bitcoin=${COMMIT} --url bitcoin=${URL} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-./bin/gbuild --commit bitcoin=${COMMIT} --url bitcoin=${URL} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-./bin/gbuild --commit bitcoin=${COMMIT} --url bitcoin=${URL} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-```\n-\n-Building fully offline\n------------------------\n-\n-For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository\n-and the bitcoin git repository with the desired tag must both be available locally, and then gbuild must be\n-told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or\n-manually disabling gitian-builder's use of apt-get to update the VM build environment.\n-\n-To configure apt-cacher-ng as an offline cacher, you will need to first populate its cache with the relevant\n-files. You must additionally patch target-bin/bootstrap-fixup to set its apt sources to something other than\n-plain archive.ubuntu.com: us.archive.ubuntu.com works.\n-\n-So, if you use LXC:\n-\n-```bash\n-export PATH=\"$PATH\":/path/to/gitian-builder/libexec\n-export USE_LXC=1\n-cd /path/to/gitian-builder\n-./libexec/make-clean-vm --suite trusty --arch amd64\n-\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root apt-get update\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root \\\n-  -e DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n-  $( sed -ne '/^packages:/,/[^-] .*/ {/^- .*/{s/\"//g;s/- //;p}}' ../bitcoin/contrib/gitian-descriptors/*|sort|uniq )\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root apt-get -q -y purge grub\n-LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n-```\n-\n-And then set offline mode for apt-cacher-ng:\n-\n-```\n-/etc/apt-cacher-ng/acng.conf\n-[...]\n-Offlinemode: 1\n-[...]\n-\n-service apt-cacher-ng restart\n-```\n-\n-Then when building, override the remote URLs that gbuild would otherwise pull from the Gitian descriptors::\n-```bash\n-\n-cd /some/root/path/\n-git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n-\n-BTCPATH=/some/root/path/bitcoin\n-SIGPATH=/some/root/path/bitcoin-detached-sigs\n-\n-./bin/gbuild --url bitcoin=${BTCPATH},signature=${SIGPATH} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-```\n-\n-Signing externally\n--------------------\n-\n-If you want to do the PGP signing on another device, that's also possible; just define `SIGNER` as mentioned\n-and follow the steps in the build process as normal.\n-\n-    gpg: skipped \"laanwj\": secret key not available\n-\n-When you execute `gsign` you will get an error from GPG, which can be ignored. Copy the resulting `.assert` files\n-in `gitian.sigs` to your signing machine and do\n-\n-```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n-    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n-```\n-\n-This will create the `.sig` files that can be committed together with the `.assert` files to assert your\n-Gitian build.\n-\n-Uploading signatures\n----------------------\n-\n-After building and signing you can push your signatures (both the `.assert` and `.assert.sig` files) to the\n-[bitcoin-core/gitian.sigs](https://github.com/bitcoin-core/gitian.sigs/) repository, or if that's not possible create a pull\n-request. You can also mail the files to Wladimir (laanwj@gmail.com) and he will commit them.\n+This file was moved to [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md) at [https://github.com/bitcoin-core/docs](https://github.com/bitcoin-core/docs)."
      },
      {
        "sha": "8cbb0d8adc1deda1c7c4023611b65521e054ff69",
        "filename": "doc/gitian-building/all_files_in_one_partition.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/all_files_in_one_partition.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/all_files_in_one_partition.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/all_files_in_one_partition.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "dd22428e176b874afb2f5b9d1b018592fb0175d0",
        "filename": "doc/gitian-building/create_new_vm.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_new_vm.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_new_vm.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_new_vm.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "5f77206b6fa8f9f0f1bbd6d02819d67bf18327ad",
        "filename": "doc/gitian-building/create_vm_file_location_size.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_file_location_size.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_file_location_size.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_file_location_size.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "8e29816fab9e7c8f97338ed43f0893f655134a5f",
        "filename": "doc/gitian-building/create_vm_hard_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "a157211cf5baf909149e73fddfc2556305f4b123",
        "filename": "doc/gitian-building/create_vm_hard_disk_file_type.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk_file_type.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "6f42cda73f3cabb02e39ae0309ac67f419a168c7",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "cee16a6c63b4f2dcd592ae8c9cdc02f278fbad81",
        "filename": "doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_storage_physical_hard_disk.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "7cda038ae47f97ddfaa905478599cafc6572dd1f",
        "filename": "doc/gitian-building/debian_install_10_configure_clock.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_10_configure_clock.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_10_configure_clock.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_10_configure_clock.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "2a648c517f429fb937275d5444a58f4830e8eae4",
        "filename": "doc/gitian-building/debian_install_11_partition_disks.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_11_partition_disks.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_11_partition_disks.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_11_partition_disks.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "0f3acc498e3e9cc04692a9c557a8eecb5029dc25",
        "filename": "doc/gitian-building/debian_install_12_choose_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_12_choose_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_12_choose_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_12_choose_disk.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "c8ef0b37ad6232f87593ea448beaba089b568a91",
        "filename": "doc/gitian-building/debian_install_14_finish.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_14_finish.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_14_finish.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_14_finish.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "d8de00dec68c826485034c698079e5808f7dadfd",
        "filename": "doc/gitian-building/debian_install_15_write_changes.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_15_write_changes.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_15_write_changes.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_15_write_changes.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "0bd985b38c113ed9bbbe03808ace284476680edc",
        "filename": "doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_16_choose_a_mirror.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "2c19919f64b62d89883dc8e1308f179978b95ca4",
        "filename": "doc/gitian-building/debian_install_18_proxy_settings.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_18_proxy_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_18_proxy_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_18_proxy_settings.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "5430456b14f098d9e3561653352b826d19a2c38a",
        "filename": "doc/gitian-building/debian_install_19_software_selection.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_19_software_selection.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_19_software_selection.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_19_software_selection.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "216502e1c6eb6930ce60c1a36e7476e6fb8781d9",
        "filename": "doc/gitian-building/debian_install_1_boot_menu.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_1_boot_menu.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_1_boot_menu.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_1_boot_menu.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "d853c1587188c5fd4ede94ab00f9d8b6731674ac",
        "filename": "doc/gitian-building/debian_install_20_install_grub.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_20_install_grub.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_20_install_grub.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_20_install_grub.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "493ab806a673f5c8ee47db0bb5de6af0d5042b03",
        "filename": "doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_21_install_grub_bootloader.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "7c4445585bc9982a5015959dba70d73b01885e08",
        "filename": "doc/gitian-building/debian_install_22_finish_installation.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_22_finish_installation.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_22_finish_installation.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_22_finish_installation.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "0228ae2c011daeababc75b915a12b28b702456c0",
        "filename": "doc/gitian-building/debian_install_2_select_a_language.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_2_select_a_language.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_2_select_a_language.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_2_select_a_language.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "7b18fba97577b521944f909ed57fd251942a9eab",
        "filename": "doc/gitian-building/debian_install_3_select_location.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_3_select_location.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_3_select_location.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_3_select_location.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "8e46117de4879a6de8b276813bef12c219cb4e8b",
        "filename": "doc/gitian-building/debian_install_4_configure_keyboard.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_4_configure_keyboard.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "8e3720f24322a54ef33893e8eff95383158bf3d9",
        "filename": "doc/gitian-building/debian_install_5_configure_the_network.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_5_configure_the_network.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_5_configure_the_network.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_5_configure_the_network.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "7a986d92f48ca3755e37993d098053321109751d",
        "filename": "doc/gitian-building/debian_install_6_domain_name.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_6_domain_name.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_6_domain_name.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_6_domain_name.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "dcade119676ed7e0c0f92cff6d6a064929a07a07",
        "filename": "doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_6a_set_up_root_password.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "6763c6e08ade2b17f050da257a76132f916e38f5",
        "filename": "doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_7_set_up_user_fullname.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "bb04de96d23bdaa3e29fbe19891e42b881dd0a99",
        "filename": "doc/gitian-building/debian_install_8_set_up_username.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_8_set_up_username.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_8_set_up_username.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_8_set_up_username.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "981f1181d79d0d7fe2138f036d0f1bb41ec472fa",
        "filename": "doc/gitian-building/debian_install_9_user_password.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_9_user_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_install_9_user_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_9_user_password.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "14cdd5ba5b52cc32fbc0da62cf3671c3679b8d79",
        "filename": "doc/gitian-building/debian_root_login.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_root_login.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/debian_root_login.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_root_login.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "9e714fd15451837980b9d12a931c294fc962b2a2",
        "filename": "doc/gitian-building/network_settings.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/network_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/network_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/network_settings.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "9e1fa2af20f48d482892b722b7288600bece322a",
        "filename": "doc/gitian-building/port_forwarding_rules.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/port_forwarding_rules.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/port_forwarding_rules.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/port_forwarding_rules.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "59bc093e2c3d35bee0d1bdc50f11f2cf2a6fdafe",
        "filename": "doc/gitian-building/select_startup_disk.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/select_startup_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/select_startup_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/select_startup_disk.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      },
      {
        "sha": "a5720ef3a345d9a52a64298fd68c3c8402f86b38",
        "filename": "doc/gitian-building/system_settings.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/system_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25/doc/gitian-building/system_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/system_settings.png?ref=c9a4aa8a0e7e0e22f2d8bbf88f58eb749ad83a25"
      }
    ]
  },
  {
    "sha": "bb174e19bc0e91854c40269cf8214943d70049a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjE3NGUxOWJjMGU5MTg1NGM0MDI2OWNmODIxNDk0M2Q3MDA0OWEy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-09-28T13:04:22Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-09-28T13:07:36Z"
      },
      "message": "[docs] Remove partial gitian instructions from descriptors dir",
      "tree": {
        "sha": "b8d51a39faff368d8f3c3a734fc464e57fe32598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8d51a39faff368d8f3c3a734fc464e57fe32598"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb174e19bc0e91854c40269cf8214943d70049a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnM9BgACgkQLuufXMCV\nJsHsGw//Z2iQ4tQrc5vwsDVuC/mAqn+au82cneVCsocmCkii1UMQsq0znED+/y38\ndhkKwFJLl+EHE++RHniGa2zHAY5h1I8A1cdljMq2QcY8yPwxJe9gm/FBxGNbGlh/\nmFe5EUxOCXhP+7floTOQhHDujru547eYRnEq2yO0YcyIZ84+zxFUQy49HzDgaFOU\n4bzZv6g5flda3XXk/CsROutXOowFBemvBqhhZn+ooIl84za/NzmqRHYDOXWNzqDm\nw25cLdB5mA1VSXhp7FNqglGFyIQjsdBIxL0WoV1fQirVmbTbaTZfoBs9zmx0GOXk\nqwm4wyBhps1UMdd4zS3rNO10ze2jzir/MW+KdAqXHug+Jn9A9Qe29LBcv5aKDRZ7\nFhV5c07kijlU8GkV3LfIubVEpybxuv3d8W0WQ7hNJDUpNvkYYjSaxjpZROtKJiZI\nMibsACsWzvbwzqM5DarqbfA/v2ttIVe/jofUkNBLuj2wnrRi1zVYt/hxVbUdSzQl\nr4/+NAeFaCwtUQkJHQdQlvitiTrMNqqqQ8pmr+bSruqZr+Cjqp662+Jk0KA50ez0\n+vmFtNdh2Wab4FIcQc1aS5vAAD9qzNJXup12F3fuhV8W6mkCh3zb5mloVhQeQJIY\nopgh+8qq/rBA4LapCf4SfIg5YvQPQAZXqzNuKJWD2MkECWlbiDg=\n=1LKN\n-----END PGP SIGNATURE-----",
        "payload": "tree b8d51a39faff368d8f3c3a734fc464e57fe32598\nparent 4202273ffa45bb175ef5b55eb3025b52fc7d4c26\nauthor fanquake <fanquake@gmail.com> 1506603862 +0800\ncommitter fanquake <fanquake@gmail.com> 1506604056 +0800\n\n[docs] Remove partial gitian instructions from descriptors dir\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb174e19bc0e91854c40269cf8214943d70049a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb174e19bc0e91854c40269cf8214943d70049a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb174e19bc0e91854c40269cf8214943d70049a2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4202273ffa45bb175ef5b55eb3025b52fc7d4c26"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 1,
      "deletions": 66
    },
    "files": [
      {
        "sha": "a582a724f75ae59e6a1c1f19fbde10d7f0834462",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb174e19bc0e91854c40269cf8214943d70049a2/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb174e19bc0e91854c40269cf8214943d70049a2/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=bb174e19bc0e91854c40269cf8214943d70049a2",
        "patch": "@@ -26,7 +26,7 @@ Contains files used to package bitcoind/bitcoin-qt\n for Debian-based Linux systems. If you compile bitcoind/bitcoin-qt yourself, there are some useful files here.\n \n ### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n-Notes on getting Gitian builds up and running using KVM.\n+Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n \n ### [Gitian-keys](/contrib/gitian-keys)\n PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results."
      },
      {
        "sha": "d9dbfd3cb3d1dfff43d36b4d1867b58cbea6c3e6",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4202273ffa45bb175ef5b55eb3025b52fc7d4c26/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4202273ffa45bb175ef5b55eb3025b52fc7d4c26/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
        "patch": "@@ -1,65 +0,0 @@\n-### Gavin's notes on getting Gitian builds up and running using KVM\n-\n-These instructions distilled from\n-[https://help.ubuntu.com/community/KVM/Installation](https://help.ubuntu.com/community/KVM/Installation).\n-\n-You need the right hardware: you need a 64-bit-capable CPU with hardware virtualization support (Intel VT-x or AMD-V). Not all modern CPUs support hardware virtualization.\n-\n-You probably need to enable hardware virtualization in your machine's BIOS.\n-\n-You need to be running a recent version of 64-bit-Ubuntu, and you need to install several prerequisites:\n-\n-\tsudo apt-get install ruby apache2 git apt-cacher-ng python-vm-builder qemu-kvm\n-\n-Sanity checks:\n-\n-\tsudo service apt-cacher-ng status  # Should return apt-cacher-ng is running\n-\tls -l /dev/kvm   # Should show a /dev/kvm device\n-\n-\n-Once you've got the right hardware and software:\n-\n-    git clone git://github.com/bitcoin/bitcoin.git\n-    git clone git://github.com/devrandom/gitian-builder.git\n-    mkdir gitian-builder/inputs\n-    cd gitian-builder/inputs\n-\n-    # Create base images\n-    cd gitian-builder\n-    bin/make-base-vm --suite trusty --arch amd64\n-    cd ..\n-\n-    # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)\n-    ...\n-\n-    # For further build instructions see doc/release-process.md\n-    ...\n-\n----------------------\n-\n-`gitian-builder` now also supports building using LXC. See\n-[help.ubuntu.com](https://help.ubuntu.com/14.04/serverguide/lxc.html)\n-for how to get LXC up and running under Ubuntu.\n-\n-If your main machine is a 64-bit Mac or PC with a few gigabytes of memory\n-and at least 10 gigabytes of free disk space, you can `gitian-build` using\n-LXC running inside a virtual machine.\n-\n-Here's a description of Gavin's setup on OSX 10.6:\n-\n-1. Download and install VirtualBox from [https://www.virtualbox.org/](https://www.virtualbox.org/)\n-\n-2. Download the 64-bit Ubuntu Desktop 12.04 LTS .iso CD image from\n-   [http://www.ubuntu.com/](http://www.ubuntu.com/)\n-\n-3. Run VirtualBox and create a new virtual machine, using the Ubuntu .iso (see the [VirtualBox documentation](https://www.virtualbox.org/wiki/Documentation) for details). Create it with at least 2 gigabytes of memory and a disk that is at least 20 gigabytes big.\n-\n-4. Inside the running Ubuntu desktop, install:\n-\n-\t\tsudo apt-get install debootstrap lxc ruby apache2 git apt-cacher-ng python-vm-builder\n-\n-5. Still inside Ubuntu, tell gitian-builder to use LXC, then follow the \"Once you've got the right hardware and software\" instructions above:\n-\n-\t\texport USE_LXC=1\n-\t\tgit clone git://github.com/bitcoin/bitcoin.git\n-\t\t... etc"
      }
    ]
  },
  {
    "sha": "9a8e9167f2636fdc2fc047dfed1747920b0f047f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YThlOTE2N2YyNjM2ZmRjMmZjMDQ3ZGZlZDE3NDc5MjBiMGYwNDdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T11:46:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T14:39:15Z"
      },
      "message": "Merge #10858: [RPC] Add \"errors\" field to getblockchaininfo and unify \"errors\" field in get*info RPCs\n\n395cef7 Change getmininginfo errors field to warnings (Andrew Chow)\n8502b20 Unify help text for GetWarnings output in get*info RPCs (Andrew Chow)\nf77f0e4 Add warnings field to getblockchaininfo (Andrew Chow)\n\nPull request description:\n\n  The `getblockchaininfo` output does not contain the `errors` field which the `getinfo`, `getmininginfo`, and `getnetworkinfo` RPCs have. It should have it as the errors pertain to the blockchain. This PR adds that field.\n\n  This PR also unifies the help text for the `errors` field and its output position so that all of the `get*info` commands are consistent.\n\n  `getnetworkinfo`'s `errors` field is named `warnings`. I did not change this even though it is inconsistent since this naming has been in use for a long time.\n\nTree-SHA512: 385ab6acfee67fc8816f4d51ab2bd7a623264c7973906dfbab0a171f199e9db16fde19093a5bc3dfbdd4ff5f19d2186b646eb6b3bae0a4d7c9add43650a4a9d9",
      "tree": {
        "sha": "a8a8ab490e3a53f7fc4b17c16e17f73ba99d3af7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a8ab490e3a53f7fc4b17c16e17f73ba99d3af7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a8e9167f2636fdc2fc047dfed1747920b0f047f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzQmTAAoJEB5K7WKYbNJduR4IAJgUeacxg+pZgsh62t8enlJ/\nge7grEB2hJ9nh588hU4NL4ymxqFQdhbASNzB3lPwU2CqtrIy8in/pQ8wVdes1HDu\n/qYFBg8NpMj+LKT++1abbhBzsZmUqtaIXZ6qK0ygYUBIOIbgijo9iJV74/1Nceum\nskqmDiGyo4GIzrgaGgLPyTIFawK3yUUipwF0XsYQ64hbuXe5G3yV1YWTQOeEzhs+\nD3+klpBtxKG6fDrxPGoTTq4egfub4QJLJsZdbF0/exsH57krIo+0IMqZ3nkPdRH3\neNvmrsXzUy7fZq+2XLsbM+86jbopQbsVjacQTpx32LkRg02uMw05t6W0oIf4zRw=\n=uDMT\n-----END PGP SIGNATURE-----",
        "payload": "tree a8a8ab490e3a53f7fc4b17c16e17f73ba99d3af7\nparent 4202273ffa45bb175ef5b55eb3025b52fc7d4c26\nparent 395cef7601479b97f5794b0c98067c859f00fc7f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506599160 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506609555 +0200\n\nMerge #10858: [RPC] Add \"errors\" field to getblockchaininfo and unify \"errors\" field in get*info RPCs\n\n395cef7 Change getmininginfo errors field to warnings (Andrew Chow)\n8502b20 Unify help text for GetWarnings output in get*info RPCs (Andrew Chow)\nf77f0e4 Add warnings field to getblockchaininfo (Andrew Chow)\n\nPull request description:\n\n  The `getblockchaininfo` output does not contain the `errors` field which the `getinfo`, `getmininginfo`, and `getnetworkinfo` RPCs have. It should have it as the errors pertain to the blockchain. This PR adds that field.\n\n  This PR also unifies the help text for the `errors` field and its output position so that all of the `get*info` commands are consistent.\n\n  `getnetworkinfo`'s `errors` field is named `warnings`. I did not change this even though it is inconsistent since this naming has been in use for a long time.\n\nTree-SHA512: 385ab6acfee67fc8816f4d51ab2bd7a623264c7973906dfbab0a171f199e9db16fde19093a5bc3dfbdd4ff5f19d2186b646eb6b3bae0a4d7c9add43650a4a9d9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8e9167f2636fdc2fc047dfed1747920b0f047f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8e9167f2636fdc2fc047dfed1747920b0f047f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8e9167f2636fdc2fc047dfed1747920b0f047f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4202273ffa45bb175ef5b55eb3025b52fc7d4c26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4202273ffa45bb175ef5b55eb3025b52fc7d4c26"
      },
      {
        "sha": "395cef7601479b97f5794b0c98067c859f00fc7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395cef7601479b97f5794b0c98067c859f00fc7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/395cef7601479b97f5794b0c98067c859f00fc7f"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 15,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8c0268e2640c78c6ecc50e3c77ce123c0f0dc317",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8e9167f2636fdc2fc047dfed1747920b0f047f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8e9167f2636fdc2fc047dfed1747920b0f047f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "patch": "@@ -24,6 +24,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"hash.h\"\n+#include \"warnings.h\"\n \n #include <stdint.h>\n \n@@ -1162,6 +1163,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"        }\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n+            \"  \\\"warnings\\\" : \\\"...\\\",         (string) any network and blockchain warnings.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n@@ -1201,6 +1203,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n \n         obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n     }\n+    obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n     return obj;\n }\n "
      },
      {
        "sha": "f79439f038ce6af232c47619d3782bd417fc1359",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8e9167f2636fdc2fc047dfed1747920b0f047f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8e9167f2636fdc2fc047dfed1747920b0f047f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "patch": "@@ -199,10 +199,11 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) Current errors\\n\"\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n+            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -217,10 +218,14 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n+    if (IsDeprecatedRPCEnabled(\"getmininginfo\")) {\n+        obj.push_back(Pair(\"errors\",       GetWarnings(\"statusbar\")));\n+    } else {\n+        obj.push_back(Pair(\"warnings\",     GetWarnings(\"statusbar\")));\n+    }\n     return obj;\n }\n "
      },
      {
        "sha": "018444821338a35d357ff73dba273b882e635274",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8e9167f2636fdc2fc047dfed1747920b0f047f/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8e9167f2636fdc2fc047dfed1747920b0f047f/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "patch": "@@ -447,7 +447,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network warnings\\n\"\n+            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network and blockchain warnings\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnetworkinfo\", \"\")"
      },
      {
        "sha": "c5967aa10b3fd61c7f10ceedf219803622a24513",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8e9167f2636fdc2fc047dfed1747920b0f047f/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8e9167f2636fdc2fc047dfed1747920b0f047f/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "patch": "@@ -60,6 +60,7 @@ def _test_getblockchaininfo(self):\n             'pruned',\n             'softforks',\n             'verificationprogress',\n+            'warnings',\n         ]\n         res = self.nodes[0].getblockchaininfo()\n         # result should have pruneheight and default keys if pruning is enabled"
      },
      {
        "sha": "f9bef2580a6d589cc03c255117bf4e04345699fa",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8e9167f2636fdc2fc047dfed1747920b0f047f/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8e9167f2636fdc2fc047dfed1747920b0f047f/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "patch": "@@ -87,7 +87,7 @@ def run_test(self):\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n         # Check that we're not getting any versionbit-related errors in\n         # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"errors\"]))\n+        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n         # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n@@ -98,7 +98,7 @@ def run_test(self):\n         # have gotten a different alert due to more than 51/100 blocks\n         # being of unexpected version.\n         # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n \n         # Mine a period worth of expected blocks so the generic block-version warning\n@@ -113,7 +113,7 @@ def run_test(self):\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n         self.stop_nodes()\n         self.test_versionbits_in_alert_file()"
      }
    ]
  },
  {
    "sha": "9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDMxZWQyZTY5ZmQ1Y2RlNWZiYzUyMDhiZDA0Mjc2YTU4YWZkMTMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T15:02:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T15:05:47Z"
      },
      "message": "Merge #10663: net: split resolve out of connect\n\nb887676 net: remove now-unused functions (Cory Fields)\n45fd754 net: remove now-superfluous numeric resolve (Cory Fields)\n2416dd7 net: separate resolving and conecting (Cory Fields)\n\nPull request description:\n\n  This is a greatly simplified version of #10285, which only aims to address async resolving.\n\n  It essentially breaks up two wrapper functions for things only used in one place (ConnectSocketDirectly/ConnectThroughProxy) in favor of calling them directly. This allows us to fully handle resolves before attempting a connection, as is necessary for async connections.\n\n  As a bonus, I believe the logic is now much easier to follow than before.\n\nTree-SHA512: f03f618107379edf3efe2a9f3e3677e8f075017ab140a0b4fdc3b8263e6beff148d55256263ab10bc2125ef089ca68e0d8e865beeae176f1eca544e769c976d3",
      "tree": {
        "sha": "8bd50a657490eef76d828a0a5171370061bbf37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bd50a657490eef76d828a0a5171370061bbf37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzQ/LAAoJEB5K7WKYbNJd5GgIANAVtIQjZezKd/xxpmjS8VsL\nKKjVplZKoEmQQQBKlnyghzD88c0yFBm4Eo0V99JXe76Q/3vedJ0awUki//SJ3bPR\nNLNq9fmZgwQVqY6VcBfnEoGdCrC1XAXrKhZMRYsia4kOmfdk9XbjYRqpDj4WOQ3o\nBPe4XJzdK8ZCV0bRWyBEHaA5EAhhvE3egiDSC97wkVDOjz+4t84szCsjVjiAI/Wt\n050Ml1YufldbvVZOfCUvsAee9XXTnGPuP355okbl2fFusRazVq9KFbzbz4dtaZnO\naq9BRMVapcP4oJur0/QadWTYpGYGlUzCFJJW5ZiKLE+x5TOc9nXwZNk9uUPkqHU=\n=cZmB\n-----END PGP SIGNATURE-----",
        "payload": "tree 8bd50a657490eef76d828a0a5171370061bbf37e\nparent 9a8e9167f2636fdc2fc047dfed1747920b0f047f\nparent b887676e1b86ce03181b5876cf6203d617750d0a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506610973 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506611147 +0200\n\nMerge #10663: net: split resolve out of connect\n\nb887676 net: remove now-unused functions (Cory Fields)\n45fd754 net: remove now-superfluous numeric resolve (Cory Fields)\n2416dd7 net: separate resolving and conecting (Cory Fields)\n\nPull request description:\n\n  This is a greatly simplified version of #10285, which only aims to address async resolving.\n\n  It essentially breaks up two wrapper functions for things only used in one place (ConnectSocketDirectly/ConnectThroughProxy) in favor of calling them directly. This allows us to fully handle resolves before attempting a connection, as is necessary for async connections.\n\n  As a bonus, I believe the logic is now much easier to follow than before.\n\nTree-SHA512: f03f618107379edf3efe2a9f3e3677e8f075017ab140a0b4fdc3b8263e6beff148d55256263ab10bc2125ef089ca68e0d8e865beeae176f1eca544e769c976d3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8e9167f2636fdc2fc047dfed1747920b0f047f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8e9167f2636fdc2fc047dfed1747920b0f047f"
      },
      {
        "sha": "b887676e1b86ce03181b5876cf6203d617750d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887676e1b86ce03181b5876cf6203d617750d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b887676e1b86ce03181b5876cf6203d617750d0a"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 46,
      "deletions": 68
    },
    "files": [
      {
        "sha": "ea3840a708614b3a915c1b11c6fd0e49ac7bfc46",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 23,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
        "patch": "@@ -385,19 +385,16 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? pszDest : addrConnect.ToString(),\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n-    // Connect\n-    SOCKET hSocket;\n-    bool proxyConnectionFailed = false;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n-                  ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n-    {\n-        if (!IsSelectableSocket(hSocket)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n-            return nullptr;\n-        }\n-\n-        if (pszDest && addrConnect.IsValid()) {\n+    // Resolve\n+    const int default_port = Params().GetDefaultPort();\n+    if (pszDest) {\n+        std::vector<CService> resolved;\n+        if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n+            addrConnect = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n+            if (!addrConnect.IsValid()) {\n+                LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\", addrConnect.ToString(), pszDest);\n+                return nullptr;\n+            }\n             // It is possible that we already have a connection to the IP/port pszDest resolved to.\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n@@ -407,13 +404,40 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             if (pnode)\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n-                CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return nullptr;\n             }\n         }\n+    }\n \n-        addrman.Attempt(addrConnect, fCountFailure);\n+    // Connect\n+    bool connected = false;\n+    SOCKET hSocket;\n+    proxyType proxy;\n+    if (addrConnect.IsValid()) {\n+        bool proxyConnectionFailed = false;\n+\n+        if (GetProxy(addrConnect.GetNetwork(), proxy))\n+            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n+        else // no proxy needed (none set for target network)\n+            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout);\n+        if (!proxyConnectionFailed) {\n+            // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n+            // the proxy, mark this as an attempt.\n+            addrman.Attempt(addrConnect, fCountFailure);\n+        }\n+    } else if (pszDest && GetNameProxy(proxy)) {\n+        std::string host;\n+        int port = default_port;\n+        SplitHostPort(std::string(pszDest), port, host);\n+        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n+    }\n+    if (connected) {\n+        if (!IsSelectableSocket(hSocket)) {\n+            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+            CloseSocket(hSocket);\n+            return nullptr;\n+        }\n \n         // Add node\n         NodeId id = GetNewNodeId();\n@@ -424,10 +448,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pnode->AddRef();\n \n         return pnode;\n-    } else if (!proxyConnectionFailed) {\n-        // If connecting to the node failed, and failure is not caused by a problem connecting to\n-        // the proxy, mark this as an attempt.\n-        addrman.Attempt(addrConnect, fCountFailure);\n     }\n \n     return nullptr;\n@@ -1912,11 +1932,9 @@ void CConnman::ThreadOpenAddedConnections()\n                     // the addednodeinfo state might change.\n                     break;\n                 }\n-                // If strAddedNode is an IP/port, decode it immediately, so\n-                // OpenNetworkConnection can detect existing connections to that IP/port.\n                 tried = true;\n-                CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n-                OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false, false, true);\n+                CAddress addr(CService(), NODE_NONE);\n+                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, true);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }"
      },
      {
        "sha": "5a560bc95a4750533d3ba627d9d195ffd0c3fd9c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 43,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
        "patch": "@@ -452,7 +452,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     return true;\n }\n \n-bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n {\n     hSocketRet = INVALID_SOCKET;\n \n@@ -587,7 +587,7 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n     // first connect to proxy server\n@@ -611,47 +611,6 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n     hSocketRet = hSocket;\n     return true;\n }\n-\n-bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    proxyType proxy;\n-    if (outProxyConnectionFailed)\n-        *outProxyConnectionFailed = false;\n-\n-    if (GetProxy(addrDest.GetNetwork(), proxy))\n-        return ConnectThroughProxy(proxy, addrDest.ToStringIP(), addrDest.GetPort(), hSocketRet, nTimeout, outProxyConnectionFailed);\n-    else // no proxy needed (none set for target network)\n-        return ConnectSocketDirectly(addrDest, hSocketRet, nTimeout);\n-}\n-\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    std::string strDest;\n-    int port = portDefault;\n-\n-    if (outProxyConnectionFailed)\n-        *outProxyConnectionFailed = false;\n-\n-    SplitHostPort(std::string(pszDest), port, strDest);\n-\n-    proxyType proxy;\n-    GetNameProxy(proxy);\n-\n-    std::vector<CService> addrResolved;\n-    if (Lookup(strDest.c_str(), addrResolved, port, fNameLookup && !HaveNameProxy(), 256)) {\n-        if (addrResolved.size() > 0) {\n-            addr = addrResolved[GetRand(addrResolved.size())];\n-            return ConnectSocket(addr, hSocketRet, nTimeout);\n-        }\n-    }\n-\n-    addr = CService();\n-\n-    if (!HaveNameProxy())\n-        return false;\n-    return ConnectThroughProxy(proxy, strDest, port, hSocketRet, nTimeout, outProxyConnectionFailed);\n-}\n-\n bool LookupSubNet(const char* pszName, CSubNet& ret)\n {\n     std::string strSubnet(pszName);"
      },
      {
        "sha": "e7d7bcb3751d1a94aa9eaec77a1438e3492f7edd",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d31ed2e69fd5cde5fbc5208bd04276a58afd132/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
        "patch": "@@ -44,14 +44,15 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n+bool GetNameProxy(proxyType &nameProxyOut);\n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\n bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n-bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      }
    ]
  },
  {
    "sha": "a72003d794f39230db476d4f358eb244b7cb2d36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzIwMDNkNzk0ZjM5MjMwZGI0NzZkNGYzNThlYjI0NGI3Y2IyZDM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T18:01:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-28T18:01:21Z"
      },
      "message": "Merge #11318: Put back inadvertently removed copyright notices\n\nd552ed6 Put back inadvertently removed copyright notices (Paul Berg)\n\nPull request description:\n\n  In an abundance of caution this restores \"Bitcoin Developers\" to the COPYING file in\n  case there were contributors before that point in time that would object to the\n  current label.  It's harmless and more pedantically correct.\n\n  (Change extracted from the Bitcoin-abc github)\n\nTree-SHA512: ea71645fbca5548bcae750b9bb7c7cc56791d8c8d2574b778fa1666e09abad23b30fcb434f0d92c52a2eb7d7e89caa32695dff3a5a99a2ab43ed0f3636436677",
      "tree": {
        "sha": "0eb689083378ee2a33c1590669203a0f0c670249",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0eb689083378ee2a33c1590669203a0f0c670249"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzTjxAAoJEB5K7WKYbNJdXF4H/0oaMJYtxyJ11eKDpnM38S5S\nhx6QsOjXerjtvzpnyGR6mUNknKIqbiNg+OcUeeJPMRIA3bZIG8c/NHldHbNDwC/d\nDzaVGJh5fr9qZFoS4XdSrRiR4lVvWDB63zQJwemIFvNG9CToHjG+wE3j05A/M1Mf\nOgG2AxuNWYf4JKCayT2CIRavYGy5MsIKssGUY47m5drav0JOmyqZR7DVybaGzZJl\nMZi3TMnWYFcBb3hFNVPqi6/D57R9nT0cMUxotb3FwAxZI/xnZO5oN82eNvGIIfQb\nSga2v68uhdun4UbU7GdTQh6W2DGB9/GoKVn8GkqXeqTNxeDbov4LS/Sb2p2Koik=\n=nAcm\n-----END PGP SIGNATURE-----",
        "payload": "tree 0eb689083378ee2a33c1590669203a0f0c670249\nparent 9d31ed2e69fd5cde5fbc5208bd04276a58afd132\nparent d552ed678c2632bafeab695c639f5fe185dc9853\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506621660 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506621681 +0200\n\nMerge #11318: Put back inadvertently removed copyright notices\n\nd552ed6 Put back inadvertently removed copyright notices (Paul Berg)\n\nPull request description:\n\n  In an abundance of caution this restores \"Bitcoin Developers\" to the COPYING file in\n  case there were contributors before that point in time that would object to the\n  current label.  It's harmless and more pedantically correct.\n\n  (Change extracted from the Bitcoin-abc github)\n\nTree-SHA512: ea71645fbca5548bcae750b9bb7c7cc56791d8c8d2574b778fa1666e09abad23b30fcb434f0d92c52a2eb7d7e89caa32695dff3a5a99a2ab43ed0f3636436677\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a72003d794f39230db476d4f358eb244b7cb2d36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d31ed2e69fd5cde5fbc5208bd04276a58afd132",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d31ed2e69fd5cde5fbc5208bd04276a58afd132"
      },
      {
        "sha": "d552ed678c2632bafeab695c639f5fe185dc9853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d552ed678c2632bafeab695c639f5fe185dc9853",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d552ed678c2632bafeab695c639f5fe185dc9853"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45d51c3c7851ed2043b6b540f31fcd0d54dc861f",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a72003d794f39230db476d4f358eb244b7cb2d36/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a72003d794f39230db476d4f358eb244b7cb2d36/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=a72003d794f39230db476d4f358eb244b7cb2d36",
        "patch": "@@ -1,6 +1,7 @@\n The MIT License (MIT)\n \n Copyright (c) 2009-2017 The Bitcoin Core developers\n+Copyright (c) 2009-2017 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      }
    ]
  },
  {
    "sha": "8fd226705347c2b3955d0d98f8ca21e4325e6765",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmQyMjY3MDUzNDdjMmIzOTU1ZDBkOThmOGNhMjFlNDMyNWU2NzY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T01:12:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:02:16Z"
      },
      "message": "Import Bech32 C++ reference code & tests\n\nThis includes a reformatted version of the Bech32 reference code\n(see https://github.com/sipa/bech32/tree/master/ref/c%2B%2B), with\nextra documentation.",
      "tree": {
        "sha": "0a5e9d0e14fddb614700a06d00cd5ae23955780a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5e9d0e14fddb614700a06d00cd5ae23955780a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd226705347c2b3955d0d98f8ca21e4325e6765",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e46ebdf8618e585568ffc1b093c79cc9be07b57"
      }
    ],
    "stats": {
      "total": 286,
      "additions": 286,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c71e457ebe940e0ad021f6708f5f9dabf365490b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -78,6 +78,7 @@ BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n   base58.h \\\n+  bech32.h \\\n   bloom.h \\\n   blockencodings.h \\\n   chain.h \\\n@@ -316,6 +317,7 @@ libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n+  bech32.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\"
      },
      {
        "sha": "ed95f345b1e90c64ca824b0588f5a0684ae5bcff",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -31,6 +31,7 @@ BITCOIN_TESTS =\\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n+  test/bech32_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\"
      },
      {
        "sha": "573eac58bb8eec775a28ce76ea088dbaac8e705a",
        "filename": "src/bech32.cpp",
        "status": "added",
        "additions": 191,
        "deletions": 0,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (auto v_i : v) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v_i) mod g(x), where v_i is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v_i) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v_i) mod g(x)\n+        //         (c(x) * x + v_i) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v_i mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i:\n+        c = ((c & 0x1ffffff) << 5) ^ v_i;\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.reserve(hrp.size() + 90);\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (auto c : combined) {\n+        ret += CHARSET[c];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return {};\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return {};\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return {};\n+    }\n+    data values(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        int8_t rev = (c < 33 || c > 126) ? -1 : CHARSET_REV[c];\n+        if (rev == -1) {\n+            return {};\n+        }\n+        values[i] = rev;\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) {\n+        return {};\n+    }\n+    return {hrp, data(values.begin(), values.end() - 6)};\n+}\n+\n+} // namespace bech32"
      },
      {
        "sha": "7ef7b22213fe6f5a95e6b4c01bc6222c0c7885ca",
        "filename": "src/bech32.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Bech32 is a string encoding format used in newer address types.\n+// The output consists of a human-readable part (alphanumeric), a\n+// separator character (1), and a base32 data section, the last\n+// 6 characters of which are a checksum.\n+//\n+// For more information, see BIP 173.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. Returns the empty string in case of failure. */\n+std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n+\n+/** Decode a Bech32 string. Returns (hrp, data). Empty hrp means failure. */\n+std::pair<std::string, std::vector<uint8_t>> Decode(const std::string& str);\n+\n+} // namespace bech32"
      },
      {
        "sha": "ce4cddd64bc9bc46f7e3da171c3b5620f208371c",
        "filename": "src/test/bech32_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n+{\n+    static const std::string CASES[] = {\n+        \"A12UEL5L\",\n+        \"a12uel5l\",\n+        \"an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs\",\n+        \"abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw\",\n+        \"11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j\",\n+        \"split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w\",\n+        \"?1ezyfcl\",\n+    };\n+    for (const std::string& str : CASES) {\n+        auto ret = bech32::Decode(str);\n+        BOOST_CHECK(!ret.first.empty());\n+        std::string recode = bech32::Encode(ret.first, ret.second);\n+        BOOST_CHECK(!recode.empty());\n+        BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n+{\n+    static const std::string CASES[] = {\n+        \" 1nwldj5\",\n+        \"\\x7f\"\"1axkwrx\",\n+        \"\\x80\"\"1eym55h\",\n+        \"an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx\",\n+        \"pzry9x0s0muk\",\n+        \"1pzry9x0s0muk\",\n+        \"x1b4n0q5v\",\n+        \"li1dgmt3\",\n+        \"de1lg7wt\\xff\",\n+        \"A1G7SGD8\",\n+        \"10a06t8\",\n+        \"1qzzfhee\",\n+    };\n+    for (const std::string& str : CASES) {\n+        auto ret = bech32::Decode(str);\n+        BOOST_CHECK(ret.first.empty());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTY1YzU1MDFjZmU3NzU1NTg1ZmQ3MmY2MzI5ZWVhNGM1ZWIyYmYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-19T22:30:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:04:11Z"
      },
      "message": "Convert base58_tests from type/payload to scriptPubKey comparison",
      "tree": {
        "sha": "1216c17e4a3ac94d9d656bcb0413bbfc084c7527",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1216c17e4a3ac94d9d656bcb0413bbfc084c7527"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd226705347c2b3955d0d98f8ca21e4325e6765"
      }
    ],
    "stats": {
      "total": 679,
      "additions": 294,
      "deletions": 385
    },
    "files": [
      {
        "sha": "f6613b0b94b69ac8a4422656ad54b43a9d5f28f8",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 86,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "patch": "@@ -10,14 +10,15 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+\n+#include <univalue.h>\n \n #include <boost/test/unit_test.hpp>\n \n-#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n \n@@ -72,50 +73,6 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n-// Visitor to check address type\n-class TestAddrTypeVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    std::string exp_addrType;\n-public:\n-    explicit TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }\n-    bool operator()(const CKeyID &id) const\n-    {\n-        return (exp_addrType == \"pubkey\");\n-    }\n-    bool operator()(const CScriptID &id) const\n-    {\n-        return (exp_addrType == \"script\");\n-    }\n-    bool operator()(const CNoDestination &no) const\n-    {\n-        return (exp_addrType == \"none\");\n-    }\n-};\n-\n-// Visitor to check address payload\n-class TestPayloadVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    std::vector<unsigned char> exp_payload;\n-public:\n-    explicit TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }\n-    bool operator()(const CKeyID &id) const\n-    {\n-        uint160 exp_key(exp_payload);\n-        return exp_key == id;\n-    }\n-    bool operator()(const CScriptID &id) const\n-    {\n-        uint160 exp_key(exp_payload);\n-        return exp_key == id;\n-    }\n-    bool operator()(const CNoDestination &no) const\n-    {\n-        return exp_payload.size() == 0;\n-    }\n-};\n-\n // Goal: check that parsed keys match test payload\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n@@ -127,22 +84,21 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        if (isTestnet) {\n             SelectParams(CBaseChainParams::TESTNET);\n-        else\n+        } else {\n             SelectParams(CBaseChainParams::MAIN);\n-        if(isPrivkey)\n-        {\n+        }\n+        if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n             BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n@@ -154,15 +110,12 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             // Private key must be invalid public key\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n-        }\n-        else\n-        {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str(); // \"script\" or \"pubkey\"\n+        } else {\n             // Must be valid public key\n             destination = DecodeDestination(exp_base58string);\n+            CScript script = GetScriptForDestination(destination);\n             BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_MESSAGE((boost::get<CScriptID>(&destination) != nullptr) == (exp_addrType == \"script\"), \"isScript mismatch\" + strTest);\n-            BOOST_CHECK_MESSAGE(boost::apply_visitor(TestAddrTypeVisitor(exp_addrType), destination), \"addrType mismatch\" + strTest);\n+            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n \n             // Public key must be invalid private key\n             secret.SetString(exp_base58string);\n@@ -188,44 +141,26 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        if (isTestnet) {\n             SelectParams(CBaseChainParams::TESTNET);\n-        else\n+        } else {\n             SelectParams(CBaseChainParams::MAIN);\n-        if(isPrivkey)\n-        {\n+        }\n+        if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n             key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n             assert(key.IsValid());\n             CBitcoinSecret secret;\n             secret.SetKey(key);\n             BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n-        }\n-        else\n-        {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str();\n+        } else {\n             CTxDestination dest;\n-            if(exp_addrType == \"pubkey\")\n-            {\n-                dest = CKeyID(uint160(exp_payload));\n-            }\n-            else if(exp_addrType == \"script\")\n-            {\n-                dest = CScriptID(uint160(exp_payload));\n-            }\n-            else if(exp_addrType == \"none\")\n-            {\n-                dest = CNoDestination();\n-            }\n-            else\n-            {\n-                BOOST_ERROR(\"Bad addrtype: \" << strTest);\n-                continue;\n-            }\n+            CScript exp_script(exp_payload.begin(), exp_payload.end());\n+            ExtractDestination(exp_script, dest);\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_EQUAL(address, exp_base58string);\n         }\n     }\n "
      },
      {
        "sha": "e1e4d0a304ad9ba45531b42d09e3d08cf54f0ea1",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 273,
        "deletions": 299,
        "changes": 572,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "patch": "@@ -1,452 +1,426 @@\n [\n     [\n-        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\", \n-        \"65a16059864a2fdbc7c99a4723a8395bc6f188eb\", \n+        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\",\n+        \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\", \n-        \"74f209f6ea907e2ea48f74fae05782ae8a665257\", \n+        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n+        \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\", \n-        \"53c0307d6851aa0ce7825ba883c6bd9ad242b486\", \n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n+        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\", \n-        \"6349a418fc4578d10a372b54b45c280cc8c4382f\", \n+        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n+        \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\", \n-        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\", \n+        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\",\n+        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\", \n-        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\", \n+        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\",\n+        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\", \n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\", \n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\", \n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\", \n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\", \n-        \"6d23156cbbdcc82a5a47eee4c2c7c583c18b6bf4\", \n+        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n+        \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\", \n-        \"fcc5460dd6e2487c7d75b1963625da0e8f4c5975\", \n+        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n+        \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\", \n-        \"f1d470f9b02370fdec2e6b708b08ac431bf7a5f7\", \n+        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n+        \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\", \n-        \"c579342c2c4c9220205e2cdc285617040c924a0a\", \n+        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n+        \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\", \n-        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\", \n+        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\",\n+        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\", \n-        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\", \n+        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\",\n+        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\", \n-        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\", \n+        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\",\n+        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\", \n-        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\", \n+        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\",\n+        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\", \n-        \"7987ccaa53d02c8873487ef919677cd3db7a6912\", \n+        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n+        \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\", \n-        \"63bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb\", \n+        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n+        \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\", \n-        \"ef66444b5b17f14e8fae6e7e19b045a78c54fd79\", \n+        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n+        \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\", \n-        \"c3e55fceceaa4391ed2a9677f4a4d34eacd021a0\", \n+        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n+        \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\", \n-        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\", \n+        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\",\n+        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\", \n-        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\", \n+        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\",\n+        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\", \n-        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\", \n+        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\",\n+        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\", \n-        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\", \n+        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\",\n+        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\", \n-        \"adc1cc2081a27206fae25792f28bbc55b831549d\", \n+        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n+        \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\", \n-        \"188f91a931947eddd7432d6e614387e32b244709\", \n+        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n+        \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\", \n-        \"1694f5bc1a7295b600f40018a618a6ea48eeb498\", \n+        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n+        \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\", \n-        \"3b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f3\", \n+        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n+        \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\", \n-        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\", \n+        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\",\n+        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\", \n-        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\", \n+        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\",\n+        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\", \n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\", \n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\", \n-        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\", \n+        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\",\n+        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\", \n-        \"c4c1b72491ede1eedaca00618407ee0b772cad0d\", \n+        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n+        \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\", \n-        \"f6fe69bcb548a829cce4c57bf6fff8af3a5981f9\", \n+        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n+        \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\", \n-        \"261f83568a098a8638844bd7aeca039d5f2352c0\", \n+        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n+        \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\", \n-        \"e930e1834a4d234702773951d627cce82fbb5d2e\", \n+        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n+        \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\", \n-        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\", \n+        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\",\n+        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\", \n-        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\", \n+        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\",\n+        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\", \n-        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\", \n+        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\",\n+        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\", \n-        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\", \n+        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\",\n+        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\", \n-        \"5eadaf9bb7121f0f192561a5a62f5e5f54210292\", \n+        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n+        \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\", \n-        \"3f210e7277c899c3a155cc1c90f4106cbddeec6e\", \n+        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n+        \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\", \n-        \"c8a3c2a09a298592c3e180f02487cd91ba3400b5\", \n+        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n+        \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\", \n-        \"99b31df7c9068d1481b596578ddbb4d3bd90baeb\", \n+        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n+        \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\", \n-        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\", \n+        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\",\n+        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\", \n-        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\", \n+        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\",\n+        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\", \n-        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\", \n+        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\",\n+        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\", \n-        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\", \n+        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\",\n+        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\", \n-        \"1ed467017f043e91ed4c44b4e8dd674db211c4e6\", \n+        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n+        \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\", \n-        \"5ece0cadddc415b1980f001785947120acdb36fc\", \n+        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n+        \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n     ]\n ]"
      }
    ]
  },
  {
    "sha": "bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDM1NWI4ZGI5ZmZhYWNhYWZkMTBlYjE0ZjZiNzRjZjAwZDhmYzA2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T07:13:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:04:11Z"
      },
      "message": "Add regtest testing to base58_tests",
      "tree": {
        "sha": "1dff72fe6be9896639d898dafc3442706230f279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dff72fe6be9896639d898dafc3442706230f279"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6565c5501cfe7755585fd72f6329eea4c5eb2bf1"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 94,
      "deletions": 66
    },
    "files": [
      {
        "sha": "65092f593b86c5d7f8e63eb784796a4111009833",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "patch": "@@ -92,12 +92,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n-        if (isTestnet) {\n-            SelectParams(CBaseChainParams::TESTNET);\n-        } else {\n-            SelectParams(CBaseChainParams::MAIN);\n-        }\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n@@ -141,12 +136,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n-        if (isTestnet) {\n-            SelectParams(CBaseChainParams::TESTNET);\n-        } else {\n-            SelectParams(CBaseChainParams::MAIN);\n-        }\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n@@ -185,10 +175,13 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        destination = DecodeDestination(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey:\" + strTest);\n-        secret.SetString(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey:\" + strTest);\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n+            secret.SetString(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+        }\n     }\n }\n "
      },
      {
        "sha": "175b297a1cac0eb62aa4dc7ee8fad121bfb0d2f7",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 85,
        "deletions": 50,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "patch": "@@ -4,31 +4,39 @@\n         \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n         \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n         \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n+        }\n+    ],\n+    [\n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n+        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n         \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n         \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -37,7 +45,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -46,7 +54,16 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n+        {\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -55,7 +72,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n@@ -64,39 +81,48 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n+        }\n+    ],\n+    [\n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n+        {\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n         \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n         \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n         \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n         \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n         \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -105,7 +131,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -114,7 +140,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -123,7 +149,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -132,39 +158,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n         \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n         \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n         \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n         \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -173,7 +199,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -182,7 +208,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -191,7 +217,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -200,39 +226,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n         \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n         \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n         \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n         \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -241,7 +267,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -250,7 +276,16 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n+        {\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -259,7 +294,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n@@ -268,39 +303,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n         \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n         \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n         \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n         \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -309,7 +344,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -318,7 +353,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -327,7 +362,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -336,39 +371,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n         \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n         \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n         \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n         \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -377,7 +412,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -386,7 +421,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -395,7 +430,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -404,23 +439,23 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n         \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n         \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ]\n ]"
      }
    ]
  },
  {
    "sha": "c091b99379b97cb314c9fa123beabdbc324cf7a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDkxYjk5Mzc5Yjk3Y2IzMTRjOWZhMTIzYmVhYmRiYzMyNGNmN2E0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T02:55:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:24:30Z"
      },
      "message": "Implement BIP173 addresses and tests",
      "tree": {
        "sha": "f1cc720f195b18842831f964a3dd1fc71d29a4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1cc720f195b18842831f964a3dd1fc71d29a4ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c091b99379b97cb314c9fa123beabdbc324cf7a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06"
      }
    ],
    "stats": {
      "total": 429,
      "additions": 397,
      "deletions": 32
    },
    "files": [
      {
        "sha": "c2cc5d979f79660a029a01533c9276a58712675f",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 1,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -4,9 +4,11 @@\n \n #include \"base58.h\"\n \n+#include \"bech32.h\"\n #include \"hash.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n@@ -235,7 +237,31 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n-    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n@@ -259,6 +285,40 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             return CScriptID(hash);\n         }\n     }\n+    data.clear();\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                {\n+                    WitnessV0KeyHash keyid;\n+                    if (data.size() == keyid.size()) {\n+                        std::copy(data.begin(), data.end(), keyid.begin());\n+                        return keyid;\n+                    }\n+                }\n+                {\n+                    WitnessV0ScriptHash scriptid;\n+                    if (data.size() == scriptid.size()) {\n+                        std::copy(data.begin(), data.end(), scriptid.begin());\n+                        return scriptid;\n+                    }\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            std::copy(data.begin(), data.end(), unk.program);\n+            unk.length = data.size();\n+            return unk;\n+        }\n+    }\n     return CNoDestination();\n }\n } // namespace"
      },
      {
        "sha": "85c9cd6934210a4967c5c106ea104474e06a4faa",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -137,6 +137,8 @@ class CMainParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n+        bech32_hrp = \"bc\";\n+\n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n         fDefaultConsistencyChecks = false;\n@@ -236,6 +238,8 @@ class CTestNetParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n+        bech32_hrp = \"tb\";\n+\n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n         fDefaultConsistencyChecks = false;\n@@ -330,6 +334,8 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"bcrt\";\n     }\n };\n "
      },
      {
        "sha": "3948c9163feb89ba11a1583b97a2b21b00359915",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -73,6 +73,7 @@ class CChainParams\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    const std::string& Bech32HRP() const { return bech32_hrp; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n@@ -86,6 +87,7 @@ class CChainParams\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n+    std::string bech32_hrp;\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;"
      },
      {
        "sha": "b2fb284508a7bdc359216aa69cfe604e2891b91a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -76,7 +76,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n     else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n         return false;\n \n-    return whichType != TX_NONSTANDARD;\n+    return whichType != TX_NONSTANDARD && whichType != TX_WITNESS_UNKNOWN;\n }\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)"
      },
      {
        "sha": "521b49e2a729dcaa3fcd2ee657756225300d0ea7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chain.h\"\n #include \"clientversion.h\"\n #include \"core_io.h\"\n+#include \"crypto/ripemd160.h\"\n #include \"init.h\"\n #include \"validation.h\"\n #include \"httpserver.h\"\n@@ -45,6 +46,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n@@ -56,6 +58,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n@@ -73,6 +76,47 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         }\n         return obj;\n     }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n };\n #endif\n "
      },
      {
        "sha": "6b68f0679e823fe4f8c35a03f542764b2b768927",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -61,6 +61,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();"
      },
      {
        "sha": "ac58b690a2f1f6d99f11345ef701ad5c8df5b17c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -79,6 +79,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -309,6 +310,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         // Don't know anything about this, assume bigger one is correct:\n         if (sigs1.script.size() >= sigs2.script.size())\n             return sigs1;"
      },
      {
        "sha": "f57f1f61b4f5999dc9ced88489999861f6445e07",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -30,6 +30,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_NULL_DATA: return \"nulldata\";\n     case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n+    case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n     }\n     return nullptr;\n }\n@@ -75,6 +76,12 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n             vSolutionsRet.push_back(witnessprogram);\n             return true;\n         }\n+        if (witnessversion != 0) {\n+            typeRet = TX_WITNESS_UNKNOWN;\n+            vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n+            return true;\n+        }\n         return false;\n     }\n \n@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_V0_SCRIPTHASH) {\n+        WitnessV0ScriptHash hash;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_UNKNOWN) {\n+        WitnessUnknown unk;\n+        unk.version = vSolutions[0][0];\n+        std::copy(vSolutions[1].begin(), vSolutions[1].end(), unk.program);\n+        unk.length = vSolutions[1].size();\n+        addressRet = unk;\n+        return true;\n     }\n     // Multisig txns have more than one address...\n     return false;\n@@ -268,6 +292,27 @@ class CScriptVisitor : public boost::static_visitor<bool>\n         *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n         return true;\n     }\n+\n+    bool operator()(const WitnessV0KeyHash& id) const\n+    {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(id);\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(id);\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessUnknown& id) const\n+    {\n+        script->clear();\n+        *script << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);\n+        return true;\n+    }\n };\n } // namespace\n "
      },
      {
        "sha": "fa07ea88c1aa1487cb774ddc5f29ca6e0d98a12a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -64,6 +64,7 @@ enum txnouttype\n     TX_NULL_DATA, //!< unspendable OP_RETURN script that carries data\n     TX_WITNESS_V0_SCRIPTHASH,\n     TX_WITNESS_V0_KEYHASH,\n+    TX_WITNESS_UNKNOWN, //!< Only for Witness versions not already defined above\n };\n \n class CNoDestination {\n@@ -72,14 +73,42 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        return std::equal(w1.program, w1.program + w1.length, w2.program);\n+    }\n+\n+    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version < w2.version) return true;\n+        if (w1.version > w2.version) return false;\n+        if (w1.length < w2.length) return true;\n+        if (w1.length > w2.length) return false;\n+        return std::lexicographical_compare(w1.program, w1.program + w1.length, w2.program, w2.program + w2.length);\n+    }\n+};\n+\n /**\n  * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n+ *  * CKeyID: TX_PUBKEYHASH destination (P2PKH)\n+ *  * CScriptID: TX_SCRIPTHASH destination (P2SH)\n+ *  * WitnessV0ScriptHash: TX_WITNESS_V0_SCRIPTHASH destination (P2WSH)\n+ *  * WitnessV0KeyHash: TX_WITNESS_V0_KEYHASH destination (P2WPKH)\n+ *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);\n@@ -104,7 +133,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n  * Parse a standard scriptPubKey for the destination address. Assigns result to\n  * the addressRet parameter and returns true if successful. For multisig\n  * scripts, instead use ExtractDestinations. Currently only works for P2PK,\n- * P2PKH, and P2SH scripts.\n+ * P2PKH, P2SH, P2WPKH, and P2WSH scripts.\n  */\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n "
      },
      {
        "sha": "6bc6dd51873bc8511e85968ebc395ec1c46a5ffd",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -93,6 +93,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         SelectParams(find_value(metadata, \"chain\").get_str());\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n@@ -112,6 +113,21 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n             BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n \n+            // Try flipped case version\n+            for (char& c : exp_base58string) {\n+                if (c >= 'a' && c <= 'z') {\n+                    c = (c - 'a') + 'A';\n+                } else if (c >= 'A' && c <= 'Z') {\n+                    c = (c - 'A') + 'a';\n+                }\n+            }\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n+            if (IsValidDestination(destination)) {\n+                script = GetScriptForDestination(destination);\n+                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+            }\n+\n             // Public key must be invalid private key\n             secret.SetString(exp_base58string);\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n@@ -150,13 +166,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             CScript exp_script(exp_payload.begin(), exp_payload.end());\n             ExtractDestination(exp_script, dest);\n             std::string address = EncodeDestination(dest);\n+\n             BOOST_CHECK_EQUAL(address, exp_base58string);\n         }\n     }\n \n     SelectParams(CBaseChainParams::MAIN);\n }\n \n+\n // Goal: check that base58 parsing code is robust against a variety of corrupted data\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n@@ -187,4 +205,3 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n \n \n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "2056c7491c491bdab249ea193dd35f82a3731eb6",
        "filename": "src/test/data/base58_keys_invalid.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_invalid.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -148,5 +148,35 @@\n     ], \n     [\n         \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n+    ],\n+    [\n+        \"tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty\"\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5\"\n+    ],\n+    [\n+        \"BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2\"\n+    ],\n+    [\n+        \"bc1rw5uspcuh\"\n+    ],\n+    [\n+        \"bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90\"\n+    ],\n+    [\n+        \"BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P\"\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7\"\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du\"\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv\"\n+    ],\n+    [\n+        \"bc1gmk9yu\"\n     ]\n ]"
      },
      {
        "sha": "8418a6002da810ca44f7a84561777af3aa99ab5c",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -457,5 +457,77 @@\n             \"isPrivkey\": false,\n             \"chain\": \"main\"\n         }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bcrt1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvseswlauz7\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\",\n+            \"tryCaseFlip\": true\n+        }\n     ]\n ]"
      },
      {
        "sha": "bd2d9ed115353d56a44267bc0af2e745e68d130d",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -170,11 +170,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n     s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n     BOOST_CHECK(!Solver(s, whichType, solutions));\n \n-    // TX_WITNESS with unknown version\n-    s.clear();\n-    s << OP_1 << ToByteVector(pubkey);\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n-\n     // TX_WITNESS with incorrect program size\n     s.clear();\n     s << OP_0 << std::vector<unsigned char>(19, 0x01);\n@@ -225,13 +220,29 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n \n     // TX_WITNESS_V0_KEYHASH\n     s.clear();\n-    s << OP_0 << ToByteVector(pubkey);\n-    BOOST_CHECK(!ExtractDestination(s, address));\n+    s << OP_0 << ToByteVector(pubkey.GetID());\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    WitnessV0KeyHash keyhash;\n+    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(keyhash.begin());\n+    BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n \n     // TX_WITNESS_V0_SCRIPTHASH\n     s.clear();\n-    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n-    BOOST_CHECK(!ExtractDestination(s, address));\n+    WitnessV0ScriptHash scripthash;\n+    CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n+    s << OP_0 << ToByteVector(scripthash);\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n+\n+    // TX_WITNESS with unknown version\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey);\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    WitnessUnknown unk;\n+    unk.length = 33;\n+    unk.version = 1;\n+    std::copy(pubkey.begin(), pubkey.end(), unk.program);\n+    BOOST_CHECK(boost::get<WitnessUnknown>(&address) && *boost::get<WitnessUnknown>(&address) == unk);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n@@ -298,16 +309,6 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75});\n     BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-\n-    // TX_WITNESS_V0_KEYHASH\n-    s.clear();\n-    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-\n-    // TX_WITNESS_V0_SCRIPTHASH\n-    s.clear();\n-    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)"
      },
      {
        "sha": "af33f0e5f8c7daa744124332b3bbd3871671243c",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -149,4 +149,28 @@ bool TimingResistantEqual(const T& a, const T& b)\n  */\n bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n+/** Convert from one power-of-2 number base to another. */\n+template<int frombits, int tobits, bool pad, typename O, typename I>\n+bool ConvertBits(O& out, I it, I end) {\n+    size_t acc = 0;\n+    size_t bits = 0;\n+    constexpr size_t maxv = (1 << tobits) - 1;\n+    constexpr size_t max_acc = (1 << (frombits + tobits - 1)) - 1;\n+    while (it != end) {\n+        acc = ((acc << frombits) | *it) & max_acc;\n+        bits += frombits;\n+        while (bits >= tobits) {\n+            bits -= tobits;\n+            out.push_back((acc >> bits) & maxv);\n+        }\n+        ++it;\n+    }\n+    if (pad) {\n+        if (bits) out.push_back((acc << (tobits - bits)) & maxv);\n+    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "8e2b7d04a81b7663f2c1288ed378271d8b04e97b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -1158,8 +1158,6 @@ class Witnessifier : public boost::static_visitor<bool>\n \n     explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n \n-    bool operator()(const CNoDestination &dest) const { return false; }\n-\n     bool operator()(const CKeyID &keyID) {\n         if (pwallet) {\n             CScript basescript = GetScriptForDestination(keyID);\n@@ -1203,6 +1201,9 @@ class Witnessifier : public boost::static_visitor<bool>\n         }\n         return false;\n     }\n+\n+    template<typename T>\n+    bool operator()(const T& dest) { return false; }\n };\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "594b82a09e63b6037cfea6dccacc9b546222dc3a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -111,7 +111,26 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n             Process(script);\n     }\n \n-    void operator()(const CNoDestination &none) {}\n+    void operator()(const WitnessV0ScriptHash& scriptID)\n+    {\n+        CScriptID id;\n+        CRIPEMD160().Write(scriptID.begin(), 32).Finalize(id.begin());\n+        CScript script;\n+        if (keystore.GetCScript(id, script)) {\n+            Process(script);\n+        }\n+    }\n+\n+    void operator()(const WitnessV0KeyHash& keyid)\n+    {\n+        CKeyID id(keyid);\n+        if (keystore.HaveKey(id)) {\n+            vKeys.push_back(id);\n+        }\n+    }\n+\n+    template<typename X>\n+    void operator()(const X &none) {}\n };\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const"
      },
      {
        "sha": "6c5b49d8765bec28e3f22927d39346ca3875e4e5",
        "filename": "test/util/data/txcreatemultisig3.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatemultisig3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatemultisig3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig3.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 e15a86a23178f433d514dbbce042e87d72662b8b5edcacfd2e37ab7a2d135f05\",\n                 \"hex\": \"0020e15a86a23178f433d514dbbce042e87d72662b8b5edcacfd2e37ab7a2d135f05\",\n-                \"type\": \"witness_v0_scripthash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_scripthash\",\n+                \"addresses\": [\n+                    \"bc1qu9dgdg330r6r84g5mw7wqshg04exv2uttmw2elfwx74h5tgntuzs44gyfg\"\n+                ]\n             }\n         }\n     ],"
      },
      {
        "sha": "4ba5dcb282fedaf6397f76b18db9172e66f4c7d7",
        "filename": "test/util/data/txcreateoutpubkey2.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreateoutpubkey2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreateoutpubkey2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreateoutpubkey2.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 a2516e770582864a6a56ed21a102044e388c62e3\",\n                 \"hex\": \"0014a2516e770582864a6a56ed21a102044e388c62e3\",\n-                \"type\": \"witness_v0_keyhash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_keyhash\",\n+                \"addresses\": [\n+                    \"bc1q5fgkuac9s2ry56jka5s6zqsyfcugcchry5cwu0\"\n+                ]\n             }\n         }\n     ],"
      },
      {
        "sha": "31b6459214f832083bcedbe0665225ea1386d6a4",
        "filename": "test/util/data/txcreatescript3.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatescript3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatescript3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatescript3.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 0bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6\",\n                 \"hex\": \"00200bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6\",\n-                \"type\": \"witness_v0_scripthash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_scripthash\",\n+                \"addresses\": [\n+                    \"bc1qp0lfxhnscvsu0j36l36uurgv5tuck4pzuqytkvwqp3kh78cupttqyf705v\"\n+                ]\n             }\n         }\n     ],"
      }
    ]
  },
  {
    "sha": "e278f12ca71c2d11916352b91594b068183b605e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjc4ZjEyY2E3MWMyZDExOTE2MzUyYjkxNTk0YjA2ODE4M2I2MDVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T21:52:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:24:33Z"
      },
      "message": "Support BIP173 in addwitnessaddress",
      "tree": {
        "sha": "86f01077650298edbd1e64328707c299a047c35c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86f01077650298edbd1e64328707c299a047c35c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e278f12ca71c2d11916352b91594b068183b605e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f12ca71c2d11916352b91594b068183b605e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e278f12ca71c2d11916352b91594b068183b605e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f12ca71c2d11916352b91594b068183b605e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c091b99379b97cb314c9fa123beabdbc324cf7a4"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 46,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f54f24e2a70cad5547caa3aed681d9f9a58f46f0",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e278f12ca71c2d11916352b91594b068183b605e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e278f12ca71c2d11916352b91594b068183b605e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=e278f12ca71c2d11916352b91594b068183b605e",
        "patch": "@@ -129,6 +129,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n+    { \"addwitnessaddress\", 1, \"p2sh\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "5d98498a4b0b4487b3d7245a75f4ea8306e9cf73",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 14,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e278f12ca71c2d11916352b91594b068183b605e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e278f12ca71c2d11916352b91594b068183b605e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e278f12ca71c2d11916352b91594b068183b605e",
        "patch": "@@ -1154,9 +1154,10 @@ class Witnessifier : public boost::static_visitor<bool>\n {\n public:\n     CWallet * const pwallet;\n-    CScriptID result;\n+    CTxDestination result;\n+    bool already_witness;\n \n-    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet), already_witness(false) {}\n \n     bool operator()(const CKeyID &keyID) {\n         if (pwallet) {\n@@ -1170,9 +1171,7 @@ class Witnessifier : public boost::static_visitor<bool>\n                 !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n                 return false;\n             }\n-            pwallet->AddCScript(witscript);\n-            result = CScriptID(witscript);\n-            return true;\n+            return ExtractDestination(witscript, result);\n         }\n         return false;\n     }\n@@ -1183,7 +1182,8 @@ class Witnessifier : public boost::static_visitor<bool>\n             int witnessversion;\n             std::vector<unsigned char> witprog;\n             if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n-                result = scriptID;\n+                ExtractDestination(subscript, result);\n+                already_witness = true;\n                 return true;\n             }\n             CScript witscript = GetScriptForWitness(subscript);\n@@ -1195,13 +1195,25 @@ class Witnessifier : public boost::static_visitor<bool>\n                 !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n                 return false;\n             }\n-            pwallet->AddCScript(witscript);\n-            result = CScriptID(witscript);\n-            return true;\n+            return ExtractDestination(witscript, result);\n         }\n         return false;\n     }\n \n+    bool operator()(const WitnessV0KeyHash& id)\n+    {\n+        already_witness = true;\n+        result = id;\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessV0ScriptHash& id)\n+    {\n+        already_witness = true;\n+        result = id;\n+        return true;\n+    }\n+\n     template<typename T>\n     bool operator()(const T& dest) { return false; }\n };\n@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional, default=true) Embed inside P2SH\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"\n             \"}\\n\"\n         ;\n         throw std::runtime_error(msg);\n@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript witprogram = GetScriptForDestination(w.result);\n+\n+    if (p2sh) {\n+        w.result = CScriptID(witprogram);\n+    }\n+\n+    if (w.already_witness) {\n+        if (!(dest == w.result)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot convert between witness address types\");\n+        }\n+    } else {\n+        pwallet->AddCScript(witprogram);\n+        pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    }\n \n     return EncodeDestination(w.result);\n }\n@@ -3200,7 +3231,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\"} },\n-    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\"} },\n+    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },"
      }
    ]
  },
  {
    "sha": "fd0041aa27cd0571af0ec018605067137d27ce43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDAwNDFhYTI3Y2QwNTcxYWYwZWMwMTg2MDUwNjcxMzdkMjdjZTQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-27T07:41:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T00:29:01Z"
      },
      "message": "Use BIP173 addresses in segwit.py test",
      "tree": {
        "sha": "4db77a946ca18c7ddefb26c42aeb1636dd22ed8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4db77a946ca18c7ddefb26c42aeb1636dd22ed8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd0041aa27cd0571af0ec018605067137d27ce43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd0041aa27cd0571af0ec018605067137d27ce43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd0041aa27cd0571af0ec018605067137d27ce43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd0041aa27cd0571af0ec018605067137d27ce43/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e278f12ca71c2d11916352b91594b068183b605e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f12ca71c2d11916352b91594b068183b605e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e278f12ca71c2d11916352b91594b068183b605e"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 162,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4888bbd308515b083ed1b4295f6f0d503cf7f719",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=fd0041aa27cd0571af0ec018605067137d27ce43",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n-from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.address import script_to_p2sh, key_to_p2pkh, key_to_p2sh_p2wpkh, key_to_p2wpkh, script_to_p2sh_p2wsh, script_to_p2wsh, program_to_witness\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n from io import BytesIO\n \n@@ -33,23 +33,23 @@ def witness_script(use_p2wsh, pubkey):\n \n # Return a transaction (in hex) that spends the given utxo to a segwit output,\n # optionally wrapping the segwit output using P2SH.\n-def create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = hex_str_to_bytes(witness_script(use_p2wsh, pubkey))\n-    if (encode_p2sh):\n-        p2sh_hash = hash160(pkscript)\n-        pkscript = CScript([OP_HASH160, p2sh_hash, OP_EQUAL])\n-    tx = CTransaction()\n-    tx.vin.append(CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), b\"\"))\n-    tx.vout.append(CTxOut(int(amount*COIN), pkscript))\n-    return ToHex(tx)\n+def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n+    if use_p2wsh:\n+        program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n+    else:\n+        addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n+    if not encode_p2sh:\n+        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+    return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding\n # to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n # encode_p2sh determines whether to wrap in P2SH.\n # sign=True will have the given node sign the transaction.\n # insert_redeem_script will be added to the scriptSig, if given.\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n-    tx_to_witness = create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n+    tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransaction(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n@@ -133,8 +133,15 @@ def run_test(self):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n             multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n-            self.nodes[i].addwitnessaddress(newaddress)\n-            self.nodes[i].addwitnessaddress(multiaddress)\n+            multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n+            p2sh_addr = self.nodes[i].addwitnessaddress(newaddress, True)\n+            bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n+            p2sh_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, True)\n+            bip173_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, False)\n+            assert_equal(p2sh_addr, key_to_p2sh_p2wpkh(self.pubkey[-1]))\n+            assert_equal(bip173_addr, key_to_p2wpkh(self.pubkey[-1]))\n+            assert_equal(p2sh_ms_addr, script_to_p2sh_p2wsh(multiscript))\n+            assert_equal(bip173_ms_addr, script_to_p2wsh(multiscript))\n             p2sh_ids.append([])\n             wit_ids.append([])\n             for v in range(2):\n@@ -558,6 +565,13 @@ def run_test(self):\n         solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n         self.mine_and_test_listunspent(unseen_anytime, 0)\n \n+        # Check that createrawtransaction/decoderawtransaction with non-v0 Bech32 works\n+        v1_addr = program_to_witness(1, [3,5])\n+        v1_tx = self.nodes[0].createrawtransaction([getutxo(spendable_txid[0])],{v1_addr: 1})\n+        v1_decoded = self.nodes[1].decoderawtransaction(v1_tx)\n+        assert_equal(v1_decoded['vout'][0]['scriptPubKey']['addresses'][0], v1_addr)\n+        assert_equal(v1_decoded['vout'][0]['scriptPubKey']['hex'], \"51020305\")\n+\n         # Check that spendable outputs are really spendable\n         self.create_and_mine_tx_from_txids(spendable_txid)\n "
      },
      {
        "sha": "2e2db5ffb21a06aec9556ed7f942972d9e0bc371",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=fd0041aa27cd0571af0ec018605067137d27ce43",
        "patch": "@@ -7,6 +7,8 @@\n from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import bytes_to_hex_str, hex_str_to_bytes\n \n+from . import segwit_addr\n+\n chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n \n def byte_to_base58(b, version):\n@@ -44,6 +46,32 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def program_to_witness(version, program, main = False):\n+    if (type(program) is str):\n+        program = hex_str_to_bytes(program)\n+    assert 0 <= version <= 16\n+    assert 2 <= len(program) <= 40\n+    assert version > 0 or len(program) in [20, 32]\n+    return segwit_addr.encode(\"bc\" if main else \"bcrt\", version, program)\n+\n+def script_to_p2wsh(script, main = False):\n+    script = check_script(script)\n+    return program_to_witness(0, sha256(script), main)\n+\n+def key_to_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    return program_to_witness(0, hash160(key), main)\n+\n+def script_to_p2sh_p2wsh(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh(p2shscript, main)\n+\n def check_key(key):\n     if (type(key) is str):\n         key = hex_str_to_bytes(key) # Assuming this is hex string"
      },
      {
        "sha": "02368e938fbb75557def0f9565c8b468515b690f",
        "filename": "test/functional/test_framework/segwit_addr.py",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/segwit_addr.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/segwit_addr.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/segwit_addr.py?ref=fd0041aa27cd0571af0ec018605067137d27ce43",
        "patch": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Reference implementation for Bech32 and segwit addresses.\"\"\"\n+\n+\n+CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+\n+\n+def bech32_polymod(values):\n+    \"\"\"Internal function that computes the Bech32 checksum.\"\"\"\n+    generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n+    chk = 1\n+    for value in values:\n+        top = chk >> 25\n+        chk = (chk & 0x1ffffff) << 5 ^ value\n+        for i in range(5):\n+            chk ^= generator[i] if ((top >> i) & 1) else 0\n+    return chk\n+\n+\n+def bech32_hrp_expand(hrp):\n+    \"\"\"Expand the HRP into values for checksum computation.\"\"\"\n+    return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n+\n+\n+def bech32_verify_checksum(hrp, data):\n+    \"\"\"Verify a checksum given HRP and converted data characters.\"\"\"\n+    return bech32_polymod(bech32_hrp_expand(hrp) + data) == 1\n+\n+\n+def bech32_create_checksum(hrp, data):\n+    \"\"\"Compute the checksum values given HRP and data.\"\"\"\n+    values = bech32_hrp_expand(hrp) + data\n+    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n+    return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n+\n+\n+def bech32_encode(hrp, data):\n+    \"\"\"Compute a Bech32 string given HRP and data values.\"\"\"\n+    combined = data + bech32_create_checksum(hrp, data)\n+    return hrp + '1' + ''.join([CHARSET[d] for d in combined])\n+\n+\n+def bech32_decode(bech):\n+    \"\"\"Validate a Bech32 string, and determine HRP and data.\"\"\"\n+    if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or\n+            (bech.lower() != bech and bech.upper() != bech)):\n+        return (None, None)\n+    bech = bech.lower()\n+    pos = bech.rfind('1')\n+    if pos < 1 or pos + 7 > len(bech) or len(bech) > 90:\n+        return (None, None)\n+    if not all(x in CHARSET for x in bech[pos+1:]):\n+        return (None, None)\n+    hrp = bech[:pos]\n+    data = [CHARSET.find(x) for x in bech[pos+1:]]\n+    if not bech32_verify_checksum(hrp, data):\n+        return (None, None)\n+    return (hrp, data[:-6])\n+\n+\n+def convertbits(data, frombits, tobits, pad=True):\n+    \"\"\"General power-of-2 base conversion.\"\"\"\n+    acc = 0\n+    bits = 0\n+    ret = []\n+    maxv = (1 << tobits) - 1\n+    max_acc = (1 << (frombits + tobits - 1)) - 1\n+    for value in data:\n+        if value < 0 or (value >> frombits):\n+            return None\n+        acc = ((acc << frombits) | value) & max_acc\n+        bits += frombits\n+        while bits >= tobits:\n+            bits -= tobits\n+            ret.append((acc >> bits) & maxv)\n+    if pad:\n+        if bits:\n+            ret.append((acc << (tobits - bits)) & maxv)\n+    elif bits >= frombits or ((acc << (tobits - bits)) & maxv):\n+        return None\n+    return ret\n+\n+\n+def decode(hrp, addr):\n+    \"\"\"Decode a segwit address.\"\"\"\n+    hrpgot, data = bech32_decode(addr)\n+    if hrpgot != hrp:\n+        return (None, None)\n+    decoded = convertbits(data[1:], 5, 8, False)\n+    if decoded is None or len(decoded) < 2 or len(decoded) > 40:\n+        return (None, None)\n+    if data[0] > 16:\n+        return (None, None)\n+    if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n+        return (None, None)\n+    return (data[0], decoded)\n+\n+\n+def encode(hrp, witver, witprog):\n+    \"\"\"Encode a segwit address.\"\"\"\n+    ret = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    if decode(hrp, ret) == (None, None):\n+        return None\n+    return ret"
      }
    ]
  },
  {
    "sha": "06eaca63139ac02abf82b0245b42493c9b383905",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmVhY2E2MzEzOWFjMDJhYmY4MmIwMjQ1YjQyNDkzYzliMzgzOTA1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-09-10T19:37:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T00:29:04Z"
      },
      "message": "[RPC] Wallet: test importing of native witness scripts\n\nIntegration into segwit.py test by Pieter Wuille.",
      "tree": {
        "sha": "299104a014495da88cbef0bcc994ac2e69becbe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/299104a014495da88cbef0bcc994ac2e69becbe6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06eaca63139ac02abf82b0245b42493c9b383905",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06eaca63139ac02abf82b0245b42493c9b383905",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06eaca63139ac02abf82b0245b42493c9b383905",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06eaca63139ac02abf82b0245b42493c9b383905/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd0041aa27cd0571af0ec018605067137d27ce43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd0041aa27cd0571af0ec018605067137d27ce43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd0041aa27cd0571af0ec018605067137d27ce43"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "de5c8c6c87e9f121f9de19876ac4e5eb63e70a3a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06eaca63139ac02abf82b0245b42493c9b383905/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06eaca63139ac02abf82b0245b42493c9b383905/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=06eaca63139ac02abf82b0245b42493c9b383905",
        "patch": "@@ -584,6 +584,29 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].sendrawtransaction(rawtxfund)\n+\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n+            # Assert it is properly saved\n+            self.stop_node(1)\n+            self.start_node(1)\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n     def mine_and_test_listunspent(self, script_list, ismine):\n         utxo = find_unspent(self.nodes[0], 50)\n         tx = CTransaction()"
      }
    ]
  },
  {
    "sha": "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjEzODM4ZGIyZTA2MjViN2E3NGU1ZjliNjgzN2U1OWRhNmNiY2Iz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-23T02:48:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T00:29:04Z"
      },
      "message": "[Qt] tolerate BIP173/bech32 addresses during input validation\n\nThis eases the during-type validation to allow Bech32 chars.\nOnce the focus has been lost, the address will be properly verified through IsValidDestinationString",
      "tree": {
        "sha": "5d9bb4969bba02a9143cd796b324ad6c04dca8d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d9bb4969bba02a9143cd796b324ad6c04dca8d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06eaca63139ac02abf82b0245b42493c9b383905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06eaca63139ac02abf82b0245b42493c9b383905",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06eaca63139ac02abf82b0245b42493c9b383905"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "362a71f04d050e568ac0b90459795988248e81a2",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8213838db2e0625b7a74e5f9b6837e59da6cbcb3/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8213838db2e0625b7a74e5f9b6837e59da6cbcb3/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
        "patch": "@@ -67,7 +67,7 @@ QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &po\n         if (((ch >= '0' && ch<='9') ||\n             (ch >= 'a' && ch<='z') ||\n             (ch >= 'A' && ch<='Z')) &&\n-            ch != 'l' && ch != 'I' && ch != '0' && ch != 'O')\n+            ch != 'I' && ch != 'O') // Characters invalid in both Base58 and Bech32\n         {\n             // Alphanumeric and not a 'forbidden' character\n         }"
      }
    ]
  },
  {
    "sha": "6f33d8c79129a049c0f8a0f25e09b310e17dd252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjMzZDhjNzkxMjlhMDQ5YzBmOGEwZjI1ZTA5YjMxMGUxN2RkMjUy",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2017-09-29T06:50:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-09-29T06:50:30Z"
      },
      "message": "Correct typo in comments",
      "tree": {
        "sha": "f902a1da6f804dfbb9fc16daf7620aa847fc2f64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f902a1da6f804dfbb9fc16daf7620aa847fc2f64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f33d8c79129a049c0f8a0f25e09b310e17dd252",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f33d8c79129a049c0f8a0f25e09b310e17dd252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f33d8c79129a049c0f8a0f25e09b310e17dd252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f33d8c79129a049c0f8a0f25e09b310e17dd252/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a72003d794f39230db476d4f358eb244b7cb2d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a72003d794f39230db476d4f358eb244b7cb2d36"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a4b408831f66540d5c87b027fd22dfbd27d8527",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f33d8c79129a049c0f8a0f25e09b310e17dd252/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f33d8c79129a049c0f8a0f25e09b310e17dd252/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=6f33d8c79129a049c0f8a0f25e09b310e17dd252",
        "patch": "@@ -10,7 +10,7 @@\n \n /**\n  * Name of client reported in the 'version' message. Report the same name\n- * for both bitcoind and bitcoin-core, to make it harder for attackers to\n+ * for both bitcoind and bitcoin-qt, to make it harder for attackers to\n  * target servers or GUI users specifically.\n  */\n const std::string CLIENT_NAME(\"Satoshi\");"
      }
    ]
  },
  {
    "sha": "aa624b61c928295c27ffbb4d27be582f5aa31b56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTYyNGI2MWM5MjgyOTVjMjdmZmJiNGQyN2JlNTgyZjVhYTMxYjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-29T08:11:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-29T08:18:45Z"
      },
      "message": "Merge #11167: Full BIP173 (Bech32) support\n\n8213838 [Qt] tolerate BIP173/bech32 addresses during input validation (Jonas Schnelli)\n06eaca6 [RPC] Wallet: test importing of native witness scripts (NicolasDorier)\nfd0041a Use BIP173 addresses in segwit.py test (Pieter Wuille)\ne278f12 Support BIP173 in addwitnessaddress (Pieter Wuille)\nc091b99 Implement BIP173 addresses and tests (Pieter Wuille)\nbd355b8 Add regtest testing to base58_tests (Pieter Wuille)\n6565c55 Convert base58_tests from type/payload to scriptPubKey comparison (Pieter Wuille)\n8fd2267 Import Bech32 C++ reference code & tests (Pieter Wuille)\n1e46ebd Implement {Encode,Decode}Destination without CBitcoinAddress (Pieter Wuille)\n\nPull request description:\n\n  Builds on top of #11117.\n\n  This adds support for:\n  * Creating BIP173 addresses for testing (through `addwitnessaddress`, though by default it still produces P2SH versions)\n  * Sending to BIP173 addresses (including non-v0 ones)\n  * Analysing BIP173 addresses (through `validateaddress`)\n\n  It includes a reformatted version of the [C++ Bech32 reference code](https://github.com/sipa/bech32/tree/master/ref/c%2B%2B) and an independent implementation of the address encoding/decoding logic (integrated with CTxDestination). All BIP173 test vectors are included.\n\n  Not included (and intended for other PRs):\n  * Full wallet support for SegWit (which would include automatically adding witness scripts to the wallet during automatic keypool topup, SegWit change outputs, ...) [see #11403]\n  * Splitting base58.cpp and tests/base58_tests.cpp up into base58-specific code, and \"address encoding\"-code [see #11372]\n  * Error locating in UI for BIP173 addresses.\n\nTree-SHA512: 238031185fd07f3ac873c586043970cc2db91bf7735c3c168cb33a3db39a7bda81d4891b649685bb17ef90dc63af0328e7705d8cd3e8dafd6c4d3c08fb230341",
      "tree": {
        "sha": "5e57067127d2af375d38f4255a53177678ef0225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e57067127d2af375d38f4255a53177678ef0225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa624b61c928295c27ffbb4d27be582f5aa31b56",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzgHlAAoJEB5K7WKYbNJdlGIH/38TXJAbIu7cfTD+/hOhoLT/\nZBUV4/u20YyIXL3ExpDnnzAYrE7oRHKxjLlkYrGMZtUioJfP5c2HnU30uo/tceI3\nNHw+xgTGeZIoTtmwON/JHbcYmRXsS/T/KlmsQsEreYofvRkSp9gBhCZftc0Jz3xW\nf9KI8AVpTbHgca4UA2bNDUY2MQmKGN0jKh4tcTg91p1V1C4HK3COT6X46sTz3ny+\nLbuTKmStEH9xK2nJdikDYUduSG649GvtsgttNYpPWSPAzGSTyYQ0WLQrWwYMzpr5\n44++Vr+GWVSBUBuPgdTm0+LdBOhvdDrJkhSZ75VJj6PP1R9K/m/Lxpd0CC3ssTE=\n=glnr\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e57067127d2af375d38f4255a53177678ef0225\nparent a72003d794f39230db476d4f358eb244b7cb2d36\nparent 8213838db2e0625b7a74e5f9b6837e59da6cbcb3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506672661 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506673125 +0200\n\nMerge #11167: Full BIP173 (Bech32) support\n\n8213838 [Qt] tolerate BIP173/bech32 addresses during input validation (Jonas Schnelli)\n06eaca6 [RPC] Wallet: test importing of native witness scripts (NicolasDorier)\nfd0041a Use BIP173 addresses in segwit.py test (Pieter Wuille)\ne278f12 Support BIP173 in addwitnessaddress (Pieter Wuille)\nc091b99 Implement BIP173 addresses and tests (Pieter Wuille)\nbd355b8 Add regtest testing to base58_tests (Pieter Wuille)\n6565c55 Convert base58_tests from type/payload to scriptPubKey comparison (Pieter Wuille)\n8fd2267 Import Bech32 C++ reference code & tests (Pieter Wuille)\n1e46ebd Implement {Encode,Decode}Destination without CBitcoinAddress (Pieter Wuille)\n\nPull request description:\n\n  Builds on top of #11117.\n\n  This adds support for:\n  * Creating BIP173 addresses for testing (through `addwitnessaddress`, though by default it still produces P2SH versions)\n  * Sending to BIP173 addresses (including non-v0 ones)\n  * Analysing BIP173 addresses (through `validateaddress`)\n\n  It includes a reformatted version of the [C++ Bech32 reference code](https://github.com/sipa/bech32/tree/master/ref/c%2B%2B) and an independent implementation of the address encoding/decoding logic (integrated with CTxDestination). All BIP173 test vectors are included.\n\n  Not included (and intended for other PRs):\n  * Full wallet support for SegWit (which would include automatically adding witness scripts to the wallet during automatic keypool topup, SegWit change outputs, ...) [see #11403]\n  * Splitting base58.cpp and tests/base58_tests.cpp up into base58-specific code, and \"address encoding\"-code [see #11372]\n  * Error locating in UI for BIP173 addresses.\n\nTree-SHA512: 238031185fd07f3ac873c586043970cc2db91bf7735c3c168cb33a3db39a7bda81d4891b649685bb17ef90dc63af0328e7705d8cd3e8dafd6c4d3c08fb230341\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa624b61c928295c27ffbb4d27be582f5aa31b56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa624b61c928295c27ffbb4d27be582f5aa31b56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa624b61c928295c27ffbb4d27be582f5aa31b56/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a72003d794f39230db476d4f358eb244b7cb2d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a72003d794f39230db476d4f358eb244b7cb2d36"
      },
      {
        "sha": "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8213838db2e0625b7a74e5f9b6837e59da6cbcb3"
      }
    ],
    "stats": {
      "total": 1821,
      "additions": 1290,
      "deletions": 531
    },
    "files": [
      {
        "sha": "c71e457ebe940e0ad021f6708f5f9dabf365490b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -78,6 +78,7 @@ BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n   base58.h \\\n+  bech32.h \\\n   bloom.h \\\n   blockencodings.h \\\n   chain.h \\\n@@ -316,6 +317,7 @@ libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n+  bech32.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\"
      },
      {
        "sha": "ed95f345b1e90c64ca824b0588f5a0684ae5bcff",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -31,6 +31,7 @@ BITCOIN_TESTS =\\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n+  test/bech32_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\"
      },
      {
        "sha": "c2cc5d979f79660a029a01533c9276a58712675f",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 78,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -4,17 +4,20 @@\n \n #include \"base58.h\"\n \n+#include \"bech32.h\"\n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n-#include <assert.h>\n-#include <stdint.h>\n-#include <string.h>\n-#include <vector>\n-#include <string>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n+#include <algorithm>\n+#include <assert.h>\n+#include <string.h>\n+\n+\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -212,86 +215,113 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    data.clear();\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                {\n+                    WitnessV0KeyHash keyid;\n+                    if (data.size() == keyid.size()) {\n+                        std::copy(data.begin(), data.end(), keyid.begin());\n+                        return keyid;\n+                    }\n+                }\n+                {\n+                    WitnessV0ScriptHash scriptid;\n+                    if (data.size() == scriptid.size()) {\n+                        std::copy(data.begin(), data.end(), scriptid.begin());\n+                        return scriptid;\n+                    }\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            std::copy(data.begin(), data.end(), unk.program);\n+            unk.length = data.size();\n+            return unk;\n+        }\n+    }\n+    return CNoDestination();\n }\n+} // namespace\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {\n@@ -328,22 +358,20 @@ bool CBitcoinSecret::SetString(const std::string& strSecret)\n \n std::string EncodeDestination(const CTxDestination& dest)\n {\n-    CBitcoinAddress addr(dest);\n-    if (!addr.IsValid()) return \"\";\n-    return addr.ToString();\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n }\n \n CTxDestination DecodeDestination(const std::string& str)\n {\n-    return CBitcoinAddress(str).Get();\n+    return DecodeDestination(str, Params());\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n-    return CBitcoinAddress(str).IsValid(params);\n+    return IsValidDestination(DecodeDestination(str, params));\n }\n \n bool IsValidDestinationString(const std::string& str)\n {\n-    return CBitcoinAddress(str).IsValid();\n+    return IsValidDestinationString(str, Params());\n }"
      },
      {
        "sha": "9dc4234248b0b411280776e8ae0c4a2443907bf4",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -17,7 +17,6 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n-#include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"support/allocators/zeroafterfree.h\"\n "
      },
      {
        "sha": "573eac58bb8eec775a28ce76ea088dbaac8e705a",
        "filename": "src/bech32.cpp",
        "status": "added",
        "additions": 191,
        "deletions": 0,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (auto v_i : v) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v_i) mod g(x), where v_i is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v_i) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v_i) mod g(x)\n+        //         (c(x) * x + v_i) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v_i mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i:\n+        c = ((c & 0x1ffffff) << 5) ^ v_i;\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.reserve(hrp.size() + 90);\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (auto c : combined) {\n+        ret += CHARSET[c];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return {};\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return {};\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return {};\n+    }\n+    data values(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        int8_t rev = (c < 33 || c > 126) ? -1 : CHARSET_REV[c];\n+        if (rev == -1) {\n+            return {};\n+        }\n+        values[i] = rev;\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) {\n+        return {};\n+    }\n+    return {hrp, data(values.begin(), values.end() - 6)};\n+}\n+\n+} // namespace bech32"
      },
      {
        "sha": "7ef7b22213fe6f5a95e6b4c01bc6222c0c7885ca",
        "filename": "src/bech32.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Bech32 is a string encoding format used in newer address types.\n+// The output consists of a human-readable part (alphanumeric), a\n+// separator character (1), and a base32 data section, the last\n+// 6 characters of which are a checksum.\n+//\n+// For more information, see BIP 173.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. Returns the empty string in case of failure. */\n+std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n+\n+/** Decode a Bech32 string. Returns (hrp, data). Empty hrp means failure. */\n+std::pair<std::string, std::vector<uint8_t>> Decode(const std::string& str);\n+\n+} // namespace bech32"
      },
      {
        "sha": "85c9cd6934210a4967c5c106ea104474e06a4faa",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -137,6 +137,8 @@ class CMainParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n+        bech32_hrp = \"bc\";\n+\n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n         fDefaultConsistencyChecks = false;\n@@ -236,6 +238,8 @@ class CTestNetParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n+        bech32_hrp = \"tb\";\n+\n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n         fDefaultConsistencyChecks = false;\n@@ -330,6 +334,8 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"bcrt\";\n     }\n };\n "
      },
      {
        "sha": "3948c9163feb89ba11a1583b97a2b21b00359915",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -73,6 +73,7 @@ class CChainParams\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    const std::string& Bech32HRP() const { return bech32_hrp; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n@@ -86,6 +87,7 @@ class CChainParams\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n+    std::string bech32_hrp;\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;"
      },
      {
        "sha": "b2fb284508a7bdc359216aa69cfe604e2891b91a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -76,7 +76,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n     else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n         return false;\n \n-    return whichType != TX_NONSTANDARD;\n+    return whichType != TX_NONSTANDARD && whichType != TX_WITNESS_UNKNOWN;\n }\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)"
      },
      {
        "sha": "362a71f04d050e568ac0b90459795988248e81a2",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -67,7 +67,7 @@ QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &po\n         if (((ch >= '0' && ch<='9') ||\n             (ch >= 'a' && ch<='z') ||\n             (ch >= 'A' && ch<='Z')) &&\n-            ch != 'l' && ch != 'I' && ch != '0' && ch != 'O')\n+            ch != 'I' && ch != 'O') // Characters invalid in both Base58 and Bech32\n         {\n             // Alphanumeric and not a 'forbidden' character\n         }"
      },
      {
        "sha": "f54f24e2a70cad5547caa3aed681d9f9a58f46f0",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -129,6 +129,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n+    { \"addwitnessaddress\", 1, \"p2sh\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "521b49e2a729dcaa3fcd2ee657756225300d0ea7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chain.h\"\n #include \"clientversion.h\"\n #include \"core_io.h\"\n+#include \"crypto/ripemd160.h\"\n #include \"init.h\"\n #include \"validation.h\"\n #include \"httpserver.h\"\n@@ -45,6 +46,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n@@ -56,6 +58,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n@@ -73,6 +76,47 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         }\n         return obj;\n     }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n };\n #endif\n "
      },
      {
        "sha": "6b68f0679e823fe4f8c35a03f542764b2b768927",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -61,6 +61,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();"
      },
      {
        "sha": "ac58b690a2f1f6d99f11345ef701ad5c8df5b17c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -79,6 +79,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -309,6 +310,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         // Don't know anything about this, assume bigger one is correct:\n         if (sigs1.script.size() >= sigs2.script.size())\n             return sigs1;"
      },
      {
        "sha": "f57f1f61b4f5999dc9ced88489999861f6445e07",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -30,6 +30,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_NULL_DATA: return \"nulldata\";\n     case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n+    case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n     }\n     return nullptr;\n }\n@@ -75,6 +76,12 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n             vSolutionsRet.push_back(witnessprogram);\n             return true;\n         }\n+        if (witnessversion != 0) {\n+            typeRet = TX_WITNESS_UNKNOWN;\n+            vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n+            return true;\n+        }\n         return false;\n     }\n \n@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_V0_SCRIPTHASH) {\n+        WitnessV0ScriptHash hash;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_UNKNOWN) {\n+        WitnessUnknown unk;\n+        unk.version = vSolutions[0][0];\n+        std::copy(vSolutions[1].begin(), vSolutions[1].end(), unk.program);\n+        unk.length = vSolutions[1].size();\n+        addressRet = unk;\n+        return true;\n     }\n     // Multisig txns have more than one address...\n     return false;\n@@ -268,6 +292,27 @@ class CScriptVisitor : public boost::static_visitor<bool>\n         *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n         return true;\n     }\n+\n+    bool operator()(const WitnessV0KeyHash& id) const\n+    {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(id);\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(id);\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessUnknown& id) const\n+    {\n+        script->clear();\n+        *script << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);\n+        return true;\n+    }\n };\n } // namespace\n "
      },
      {
        "sha": "fa07ea88c1aa1487cb774ddc5f29ca6e0d98a12a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -64,6 +64,7 @@ enum txnouttype\n     TX_NULL_DATA, //!< unspendable OP_RETURN script that carries data\n     TX_WITNESS_V0_SCRIPTHASH,\n     TX_WITNESS_V0_KEYHASH,\n+    TX_WITNESS_UNKNOWN, //!< Only for Witness versions not already defined above\n };\n \n class CNoDestination {\n@@ -72,14 +73,42 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        return std::equal(w1.program, w1.program + w1.length, w2.program);\n+    }\n+\n+    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version < w2.version) return true;\n+        if (w1.version > w2.version) return false;\n+        if (w1.length < w2.length) return true;\n+        if (w1.length > w2.length) return false;\n+        return std::lexicographical_compare(w1.program, w1.program + w1.length, w2.program, w2.program + w2.length);\n+    }\n+};\n+\n /**\n  * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n+ *  * CKeyID: TX_PUBKEYHASH destination (P2PKH)\n+ *  * CScriptID: TX_SCRIPTHASH destination (P2SH)\n+ *  * WitnessV0ScriptHash: TX_WITNESS_V0_SCRIPTHASH destination (P2WSH)\n+ *  * WitnessV0KeyHash: TX_WITNESS_V0_KEYHASH destination (P2WPKH)\n+ *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);\n@@ -104,7 +133,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n  * Parse a standard scriptPubKey for the destination address. Assigns result to\n  * the addressRet parameter and returns true if successful. For multisig\n  * scripts, instead use ExtractDestinations. Currently only works for P2PK,\n- * P2PKH, and P2SH scripts.\n+ * P2PKH, P2SH, P2WPKH, and P2WSH scripts.\n  */\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n "
      },
      {
        "sha": "6bc6dd51873bc8511e85968ebc395ec1c46a5ffd",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 95,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -10,14 +10,15 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+\n+#include <univalue.h>\n \n #include <boost/test/unit_test.hpp>\n \n-#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n \n@@ -72,50 +73,6 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n-// Visitor to check address type\n-class TestAddrTypeVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    std::string exp_addrType;\n-public:\n-    explicit TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }\n-    bool operator()(const CKeyID &id) const\n-    {\n-        return (exp_addrType == \"pubkey\");\n-    }\n-    bool operator()(const CScriptID &id) const\n-    {\n-        return (exp_addrType == \"script\");\n-    }\n-    bool operator()(const CNoDestination &no) const\n-    {\n-        return (exp_addrType == \"none\");\n-    }\n-};\n-\n-// Visitor to check address payload\n-class TestPayloadVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    std::vector<unsigned char> exp_payload;\n-public:\n-    explicit TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }\n-    bool operator()(const CKeyID &id) const\n-    {\n-        uint160 exp_key(exp_payload);\n-        return exp_key == id;\n-    }\n-    bool operator()(const CScriptID &id) const\n-    {\n-        uint160 exp_key(exp_payload);\n-        return exp_key == id;\n-    }\n-    bool operator()(const CNoDestination &no) const\n-    {\n-        return exp_payload.size() == 0;\n-    }\n-};\n-\n // Goal: check that parsed keys match test payload\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n@@ -127,22 +84,17 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n-            SelectParams(CBaseChainParams::TESTNET);\n-        else\n-            SelectParams(CBaseChainParams::MAIN);\n-        if(isPrivkey)\n-        {\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n             BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n@@ -154,15 +106,27 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             // Private key must be invalid public key\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n-        }\n-        else\n-        {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str(); // \"script\" or \"pubkey\"\n+        } else {\n             // Must be valid public key\n             destination = DecodeDestination(exp_base58string);\n+            CScript script = GetScriptForDestination(destination);\n             BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_MESSAGE((boost::get<CScriptID>(&destination) != nullptr) == (exp_addrType == \"script\"), \"isScript mismatch\" + strTest);\n-            BOOST_CHECK_MESSAGE(boost::apply_visitor(TestAddrTypeVisitor(exp_addrType), destination), \"addrType mismatch\" + strTest);\n+            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+\n+            // Try flipped case version\n+            for (char& c : exp_base58string) {\n+                if (c >= 'a' && c <= 'z') {\n+                    c = (c - 'a') + 'A';\n+                } else if (c >= 'A' && c <= 'Z') {\n+                    c = (c - 'A') + 'a';\n+                }\n+            }\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n+            if (IsValidDestination(destination)) {\n+                script = GetScriptForDestination(destination);\n+                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+            }\n \n             // Public key must be invalid private key\n             secret.SetString(exp_base58string);\n@@ -188,50 +152,29 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n-            SelectParams(CBaseChainParams::TESTNET);\n-        else\n-            SelectParams(CBaseChainParams::MAIN);\n-        if(isPrivkey)\n-        {\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n             key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n             assert(key.IsValid());\n             CBitcoinSecret secret;\n             secret.SetKey(key);\n             BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n-        }\n-        else\n-        {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str();\n+        } else {\n             CTxDestination dest;\n-            if(exp_addrType == \"pubkey\")\n-            {\n-                dest = CKeyID(uint160(exp_payload));\n-            }\n-            else if(exp_addrType == \"script\")\n-            {\n-                dest = CScriptID(uint160(exp_payload));\n-            }\n-            else if(exp_addrType == \"none\")\n-            {\n-                dest = CNoDestination();\n-            }\n-            else\n-            {\n-                BOOST_ERROR(\"Bad addrtype: \" << strTest);\n-                continue;\n-            }\n+            CScript exp_script(exp_payload.begin(), exp_payload.end());\n+            ExtractDestination(exp_script, dest);\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+\n+            BOOST_CHECK_EQUAL(address, exp_base58string);\n         }\n     }\n \n     SelectParams(CBaseChainParams::MAIN);\n }\n \n+\n // Goal: check that base58 parsing code is robust against a variety of corrupted data\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n@@ -250,13 +193,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        destination = DecodeDestination(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey:\" + strTest);\n-        secret.SetString(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey:\" + strTest);\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n+            secret.SetString(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+        }\n     }\n }\n \n \n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "ce4cddd64bc9bc46f7e3da171c3b5620f208371c",
        "filename": "src/test/bech32_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n+{\n+    static const std::string CASES[] = {\n+        \"A12UEL5L\",\n+        \"a12uel5l\",\n+        \"an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs\",\n+        \"abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw\",\n+        \"11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j\",\n+        \"split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w\",\n+        \"?1ezyfcl\",\n+    };\n+    for (const std::string& str : CASES) {\n+        auto ret = bech32::Decode(str);\n+        BOOST_CHECK(!ret.first.empty());\n+        std::string recode = bech32::Encode(ret.first, ret.second);\n+        BOOST_CHECK(!recode.empty());\n+        BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n+{\n+    static const std::string CASES[] = {\n+        \" 1nwldj5\",\n+        \"\\x7f\"\"1axkwrx\",\n+        \"\\x80\"\"1eym55h\",\n+        \"an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx\",\n+        \"pzry9x0s0muk\",\n+        \"1pzry9x0s0muk\",\n+        \"x1b4n0q5v\",\n+        \"li1dgmt3\",\n+        \"de1lg7wt\\xff\",\n+        \"A1G7SGD8\",\n+        \"10a06t8\",\n+        \"1qzzfhee\",\n+    };\n+    for (const std::string& str : CASES) {\n+        auto ret = bech32::Decode(str);\n+        BOOST_CHECK(ret.first.empty());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2056c7491c491bdab249ea193dd35f82a3731eb6",
        "filename": "src/test/data/base58_keys_invalid.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/data/base58_keys_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/data/base58_keys_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_invalid.json?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -148,5 +148,35 @@\n     ], \n     [\n         \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n+    ],\n+    [\n+        \"tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty\"\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5\"\n+    ],\n+    [\n+        \"BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2\"\n+    ],\n+    [\n+        \"bc1rw5uspcuh\"\n+    ],\n+    [\n+        \"bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90\"\n+    ],\n+    [\n+        \"BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P\"\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7\"\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du\"\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv\"\n+    ],\n+    [\n+        \"bc1gmk9yu\"\n     ]\n ]"
      },
      {
        "sha": "8418a6002da810ca44f7a84561777af3aa99ab5c",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 380,
        "deletions": 299,
        "changes": 679,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -1,452 +1,533 @@\n [\n     [\n-        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\", \n-        \"65a16059864a2fdbc7c99a4723a8395bc6f188eb\", \n+        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\",\n+        \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\", \n-        \"74f209f6ea907e2ea48f74fae05782ae8a665257\", \n+        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n+        \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\", \n-        \"53c0307d6851aa0ce7825ba883c6bd9ad242b486\", \n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n+        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\", \n-        \"6349a418fc4578d10a372b54b45c280cc8c4382f\", \n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n+        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\"\n         }\n-    ], \n+    ],\n     [\n-        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\", \n-        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\", \n+        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n+        \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\", \n-        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\", \n+        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\",\n+        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\", \n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\", \n+        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\",\n+        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\", \n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\", \n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\", \n-        \"6d23156cbbdcc82a5a47eee4c2c7c583c18b6bf4\", \n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"regtest\"\n         }\n-    ], \n+    ],\n     [\n-        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\", \n-        \"fcc5460dd6e2487c7d75b1963625da0e8f4c5975\", \n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\", \n-        \"f1d470f9b02370fdec2e6b708b08ac431bf7a5f7\", \n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"regtest\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\", \n-        \"c579342c2c4c9220205e2cdc285617040c924a0a\", \n+        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n+        \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\", \n-        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\", \n+        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n+        \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\", \n-        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\", \n+        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n+        \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\", \n-        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\", \n+        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n+        \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\", \n-        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\", \n+        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\",\n+        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\", \n-        \"7987ccaa53d02c8873487ef919677cd3db7a6912\", \n+        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\",\n+        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\", \n-        \"63bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb\", \n+        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\",\n+        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\", \n-        \"ef66444b5b17f14e8fae6e7e19b045a78c54fd79\", \n+        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\",\n+        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\", \n-        \"c3e55fceceaa4391ed2a9677f4a4d34eacd021a0\", \n+        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n+        \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\", \n-        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\", \n+        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n+        \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\", \n-        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\", \n+        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n+        \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\", \n-        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\", \n+        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n+        \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\", \n-        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\", \n+        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\",\n+        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\", \n-        \"adc1cc2081a27206fae25792f28bbc55b831549d\", \n+        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\",\n+        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\", \n-        \"188f91a931947eddd7432d6e614387e32b244709\", \n+        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\",\n+        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\", \n-        \"1694f5bc1a7295b600f40018a618a6ea48eeb498\", \n+        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\",\n+        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\", \n-        \"3b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f3\", \n+        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n+        \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\", \n-        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\", \n+        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n+        \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\", \n-        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\", \n+        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n+        \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\", \n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\", \n+        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n+        \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\", \n-        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\", \n+        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\",\n+        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\", \n-        \"c4c1b72491ede1eedaca00618407ee0b772cad0d\", \n+        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\",\n+        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\", \n-        \"f6fe69bcb548a829cce4c57bf6fff8af3a5981f9\", \n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\", \n-        \"261f83568a098a8638844bd7aeca039d5f2352c0\", \n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"regtest\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\", \n-        \"e930e1834a4d234702773951d627cce82fbb5d2e\", \n+        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\",\n+        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\", \n-        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\", \n+        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n+        \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\", \n-        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\", \n+        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n+        \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\", \n-        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\", \n+        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n+        \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\", \n-        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\", \n+        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n+        \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\", \n-        \"5eadaf9bb7121f0f192561a5a62f5e5f54210292\", \n+        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\",\n+        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\", \n-        \"3f210e7277c899c3a155cc1c90f4106cbddeec6e\", \n+        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\",\n+        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\", \n-        \"c8a3c2a09a298592c3e180f02487cd91ba3400b5\", \n+        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\",\n+        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\", \n-        \"99b31df7c9068d1481b596578ddbb4d3bd90baeb\", \n+        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\",\n+        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\", \n-        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\", \n+        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n+        \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\", \n-        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\", \n+        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n+        \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\", \n-        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\", \n+        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n+        \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\", \n-        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\", \n+        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n+        \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\"\n         }\n-    ], \n+    ],\n     [\n-        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\", \n-        \"1ed467017f043e91ed4c44b4e8dd674db211c4e6\", \n+        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\",\n+        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n         }\n-    ], \n+    ],\n     [\n-        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\", \n-        \"5ece0cadddc415b1980f001785947120acdb36fc\", \n+        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\",\n+        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\",\n+        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\",\n+        {\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n+        }\n+    ],\n+    [\n+        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\",\n+        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\",\n+        {\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n+        }\n+    ],\n+    [\n+        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n+        \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n+        \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bcrt1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvseswlauz7\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\",\n+            \"tryCaseFlip\": true\n         }\n     ]\n ]"
      },
      {
        "sha": "bd2d9ed115353d56a44267bc0af2e745e68d130d",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -170,11 +170,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n     s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n     BOOST_CHECK(!Solver(s, whichType, solutions));\n \n-    // TX_WITNESS with unknown version\n-    s.clear();\n-    s << OP_1 << ToByteVector(pubkey);\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n-\n     // TX_WITNESS with incorrect program size\n     s.clear();\n     s << OP_0 << std::vector<unsigned char>(19, 0x01);\n@@ -225,13 +220,29 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n \n     // TX_WITNESS_V0_KEYHASH\n     s.clear();\n-    s << OP_0 << ToByteVector(pubkey);\n-    BOOST_CHECK(!ExtractDestination(s, address));\n+    s << OP_0 << ToByteVector(pubkey.GetID());\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    WitnessV0KeyHash keyhash;\n+    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(keyhash.begin());\n+    BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n \n     // TX_WITNESS_V0_SCRIPTHASH\n     s.clear();\n-    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n-    BOOST_CHECK(!ExtractDestination(s, address));\n+    WitnessV0ScriptHash scripthash;\n+    CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n+    s << OP_0 << ToByteVector(scripthash);\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n+\n+    // TX_WITNESS with unknown version\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey);\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    WitnessUnknown unk;\n+    unk.length = 33;\n+    unk.version = 1;\n+    std::copy(pubkey.begin(), pubkey.end(), unk.program);\n+    BOOST_CHECK(boost::get<WitnessUnknown>(&address) && *boost::get<WitnessUnknown>(&address) == unk);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n@@ -298,16 +309,6 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75});\n     BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-\n-    // TX_WITNESS_V0_KEYHASH\n-    s.clear();\n-    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-\n-    // TX_WITNESS_V0_SCRIPTHASH\n-    s.clear();\n-    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)"
      },
      {
        "sha": "af33f0e5f8c7daa744124332b3bbd3871671243c",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -149,4 +149,28 @@ bool TimingResistantEqual(const T& a, const T& b)\n  */\n bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n+/** Convert from one power-of-2 number base to another. */\n+template<int frombits, int tobits, bool pad, typename O, typename I>\n+bool ConvertBits(O& out, I it, I end) {\n+    size_t acc = 0;\n+    size_t bits = 0;\n+    constexpr size_t maxv = (1 << tobits) - 1;\n+    constexpr size_t max_acc = (1 << (frombits + tobits - 1)) - 1;\n+    while (it != end) {\n+        acc = ((acc << frombits) | *it) & max_acc;\n+        bits += frombits;\n+        while (bits >= tobits) {\n+            bits -= tobits;\n+            out.push_back((acc >> bits) & maxv);\n+        }\n+        ++it;\n+    }\n+    if (pad) {\n+        if (bits) out.push_back((acc << (tobits - bits)) & maxv);\n+    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "5d98498a4b0b4487b3d7245a75f4ea8306e9cf73",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 16,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -1154,11 +1154,10 @@ class Witnessifier : public boost::static_visitor<bool>\n {\n public:\n     CWallet * const pwallet;\n-    CScriptID result;\n+    CTxDestination result;\n+    bool already_witness;\n \n-    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    bool operator()(const CNoDestination &dest) const { return false; }\n+    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet), already_witness(false) {}\n \n     bool operator()(const CKeyID &keyID) {\n         if (pwallet) {\n@@ -1172,9 +1171,7 @@ class Witnessifier : public boost::static_visitor<bool>\n                 !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n                 return false;\n             }\n-            pwallet->AddCScript(witscript);\n-            result = CScriptID(witscript);\n-            return true;\n+            return ExtractDestination(witscript, result);\n         }\n         return false;\n     }\n@@ -1185,7 +1182,8 @@ class Witnessifier : public boost::static_visitor<bool>\n             int witnessversion;\n             std::vector<unsigned char> witprog;\n             if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n-                result = scriptID;\n+                ExtractDestination(subscript, result);\n+                already_witness = true;\n                 return true;\n             }\n             CScript witscript = GetScriptForWitness(subscript);\n@@ -1197,12 +1195,27 @@ class Witnessifier : public boost::static_visitor<bool>\n                 !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n                 return false;\n             }\n-            pwallet->AddCScript(witscript);\n-            result = CScriptID(witscript);\n-            return true;\n+            return ExtractDestination(witscript, result);\n         }\n         return false;\n     }\n+\n+    bool operator()(const WitnessV0KeyHash& id)\n+    {\n+        already_witness = true;\n+        result = id;\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessV0ScriptHash& id)\n+    {\n+        already_witness = true;\n+        result = id;\n+        return true;\n+    }\n+\n+    template<typename T>\n+    bool operator()(const T& dest) { return false; }\n };\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)\n@@ -1212,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional, default=true) Embed inside P2SH\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"\n             \"}\\n\"\n         ;\n         throw std::runtime_error(msg);\n@@ -1240,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript witprogram = GetScriptForDestination(w.result);\n+\n+    if (p2sh) {\n+        w.result = CScriptID(witprogram);\n+    }\n+\n+    if (w.already_witness) {\n+        if (!(dest == w.result)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot convert between witness address types\");\n+        }\n+    } else {\n+        pwallet->AddCScript(witprogram);\n+        pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    }\n \n     return EncodeDestination(w.result);\n }\n@@ -3199,7 +3231,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\"} },\n-    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\"} },\n+    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },"
      },
      {
        "sha": "6760d6ff849d6c6d1092ce2370a8047fcd8bca80",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -111,7 +111,26 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n             Process(script);\n     }\n \n-    void operator()(const CNoDestination &none) {}\n+    void operator()(const WitnessV0ScriptHash& scriptID)\n+    {\n+        CScriptID id;\n+        CRIPEMD160().Write(scriptID.begin(), 32).Finalize(id.begin());\n+        CScript script;\n+        if (keystore.GetCScript(id, script)) {\n+            Process(script);\n+        }\n+    }\n+\n+    void operator()(const WitnessV0KeyHash& keyid)\n+    {\n+        CKeyID id(keyid);\n+        if (keystore.HaveKey(id)) {\n+            vKeys.push_back(id);\n+        }\n+    }\n+\n+    template<typename X>\n+    void operator()(const X &none) {}\n };\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const"
      },
      {
        "sha": "de5c8c6c87e9f121f9de19876ac4e5eb63e70a3a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 50,
        "deletions": 13,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n-from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.address import script_to_p2sh, key_to_p2pkh, key_to_p2sh_p2wpkh, key_to_p2wpkh, script_to_p2sh_p2wsh, script_to_p2wsh, program_to_witness\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n from io import BytesIO\n \n@@ -33,23 +33,23 @@ def witness_script(use_p2wsh, pubkey):\n \n # Return a transaction (in hex) that spends the given utxo to a segwit output,\n # optionally wrapping the segwit output using P2SH.\n-def create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = hex_str_to_bytes(witness_script(use_p2wsh, pubkey))\n-    if (encode_p2sh):\n-        p2sh_hash = hash160(pkscript)\n-        pkscript = CScript([OP_HASH160, p2sh_hash, OP_EQUAL])\n-    tx = CTransaction()\n-    tx.vin.append(CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), b\"\"))\n-    tx.vout.append(CTxOut(int(amount*COIN), pkscript))\n-    return ToHex(tx)\n+def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n+    if use_p2wsh:\n+        program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n+    else:\n+        addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n+    if not encode_p2sh:\n+        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+    return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding\n # to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n # encode_p2sh determines whether to wrap in P2SH.\n # sign=True will have the given node sign the transaction.\n # insert_redeem_script will be added to the scriptSig, if given.\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n-    tx_to_witness = create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n+    tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransaction(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n@@ -133,8 +133,15 @@ def run_test(self):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n             multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n-            self.nodes[i].addwitnessaddress(newaddress)\n-            self.nodes[i].addwitnessaddress(multiaddress)\n+            multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n+            p2sh_addr = self.nodes[i].addwitnessaddress(newaddress, True)\n+            bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n+            p2sh_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, True)\n+            bip173_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, False)\n+            assert_equal(p2sh_addr, key_to_p2sh_p2wpkh(self.pubkey[-1]))\n+            assert_equal(bip173_addr, key_to_p2wpkh(self.pubkey[-1]))\n+            assert_equal(p2sh_ms_addr, script_to_p2sh_p2wsh(multiscript))\n+            assert_equal(bip173_ms_addr, script_to_p2wsh(multiscript))\n             p2sh_ids.append([])\n             wit_ids.append([])\n             for v in range(2):\n@@ -558,6 +565,13 @@ def run_test(self):\n         solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n         self.mine_and_test_listunspent(unseen_anytime, 0)\n \n+        # Check that createrawtransaction/decoderawtransaction with non-v0 Bech32 works\n+        v1_addr = program_to_witness(1, [3,5])\n+        v1_tx = self.nodes[0].createrawtransaction([getutxo(spendable_txid[0])],{v1_addr: 1})\n+        v1_decoded = self.nodes[1].decoderawtransaction(v1_tx)\n+        assert_equal(v1_decoded['vout'][0]['scriptPubKey']['addresses'][0], v1_addr)\n+        assert_equal(v1_decoded['vout'][0]['scriptPubKey']['hex'], \"51020305\")\n+\n         # Check that spendable outputs are really spendable\n         self.create_and_mine_tx_from_txids(spendable_txid)\n \n@@ -570,6 +584,29 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].sendrawtransaction(rawtxfund)\n+\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n+            # Assert it is properly saved\n+            self.stop_node(1)\n+            self.start_node(1)\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n     def mine_and_test_listunspent(self, script_list, ismine):\n         utxo = find_unspent(self.nodes[0], 50)\n         tx = CTransaction()"
      },
      {
        "sha": "2e2db5ffb21a06aec9556ed7f942972d9e0bc371",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -7,6 +7,8 @@\n from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import bytes_to_hex_str, hex_str_to_bytes\n \n+from . import segwit_addr\n+\n chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n \n def byte_to_base58(b, version):\n@@ -44,6 +46,32 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def program_to_witness(version, program, main = False):\n+    if (type(program) is str):\n+        program = hex_str_to_bytes(program)\n+    assert 0 <= version <= 16\n+    assert 2 <= len(program) <= 40\n+    assert version > 0 or len(program) in [20, 32]\n+    return segwit_addr.encode(\"bc\" if main else \"bcrt\", version, program)\n+\n+def script_to_p2wsh(script, main = False):\n+    script = check_script(script)\n+    return program_to_witness(0, sha256(script), main)\n+\n+def key_to_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    return program_to_witness(0, hash160(key), main)\n+\n+def script_to_p2sh_p2wsh(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh(p2shscript, main)\n+\n def check_key(key):\n     if (type(key) is str):\n         key = hex_str_to_bytes(key) # Assuming this is hex string"
      },
      {
        "sha": "02368e938fbb75557def0f9565c8b468515b690f",
        "filename": "test/functional/test_framework/segwit_addr.py",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/functional/test_framework/segwit_addr.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/functional/test_framework/segwit_addr.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/segwit_addr.py?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Reference implementation for Bech32 and segwit addresses.\"\"\"\n+\n+\n+CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+\n+\n+def bech32_polymod(values):\n+    \"\"\"Internal function that computes the Bech32 checksum.\"\"\"\n+    generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n+    chk = 1\n+    for value in values:\n+        top = chk >> 25\n+        chk = (chk & 0x1ffffff) << 5 ^ value\n+        for i in range(5):\n+            chk ^= generator[i] if ((top >> i) & 1) else 0\n+    return chk\n+\n+\n+def bech32_hrp_expand(hrp):\n+    \"\"\"Expand the HRP into values for checksum computation.\"\"\"\n+    return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n+\n+\n+def bech32_verify_checksum(hrp, data):\n+    \"\"\"Verify a checksum given HRP and converted data characters.\"\"\"\n+    return bech32_polymod(bech32_hrp_expand(hrp) + data) == 1\n+\n+\n+def bech32_create_checksum(hrp, data):\n+    \"\"\"Compute the checksum values given HRP and data.\"\"\"\n+    values = bech32_hrp_expand(hrp) + data\n+    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n+    return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n+\n+\n+def bech32_encode(hrp, data):\n+    \"\"\"Compute a Bech32 string given HRP and data values.\"\"\"\n+    combined = data + bech32_create_checksum(hrp, data)\n+    return hrp + '1' + ''.join([CHARSET[d] for d in combined])\n+\n+\n+def bech32_decode(bech):\n+    \"\"\"Validate a Bech32 string, and determine HRP and data.\"\"\"\n+    if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or\n+            (bech.lower() != bech and bech.upper() != bech)):\n+        return (None, None)\n+    bech = bech.lower()\n+    pos = bech.rfind('1')\n+    if pos < 1 or pos + 7 > len(bech) or len(bech) > 90:\n+        return (None, None)\n+    if not all(x in CHARSET for x in bech[pos+1:]):\n+        return (None, None)\n+    hrp = bech[:pos]\n+    data = [CHARSET.find(x) for x in bech[pos+1:]]\n+    if not bech32_verify_checksum(hrp, data):\n+        return (None, None)\n+    return (hrp, data[:-6])\n+\n+\n+def convertbits(data, frombits, tobits, pad=True):\n+    \"\"\"General power-of-2 base conversion.\"\"\"\n+    acc = 0\n+    bits = 0\n+    ret = []\n+    maxv = (1 << tobits) - 1\n+    max_acc = (1 << (frombits + tobits - 1)) - 1\n+    for value in data:\n+        if value < 0 or (value >> frombits):\n+            return None\n+        acc = ((acc << frombits) | value) & max_acc\n+        bits += frombits\n+        while bits >= tobits:\n+            bits -= tobits\n+            ret.append((acc >> bits) & maxv)\n+    if pad:\n+        if bits:\n+            ret.append((acc << (tobits - bits)) & maxv)\n+    elif bits >= frombits or ((acc << (tobits - bits)) & maxv):\n+        return None\n+    return ret\n+\n+\n+def decode(hrp, addr):\n+    \"\"\"Decode a segwit address.\"\"\"\n+    hrpgot, data = bech32_decode(addr)\n+    if hrpgot != hrp:\n+        return (None, None)\n+    decoded = convertbits(data[1:], 5, 8, False)\n+    if decoded is None or len(decoded) < 2 or len(decoded) > 40:\n+        return (None, None)\n+    if data[0] > 16:\n+        return (None, None)\n+    if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n+        return (None, None)\n+    return (data[0], decoded)\n+\n+\n+def encode(hrp, witver, witprog):\n+    \"\"\"Encode a segwit address.\"\"\"\n+    ret = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    if decode(hrp, ret) == (None, None):\n+        return None\n+    return ret"
      },
      {
        "sha": "6c5b49d8765bec28e3f22927d39346ca3875e4e5",
        "filename": "test/util/data/txcreatemultisig3.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/util/data/txcreatemultisig3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/util/data/txcreatemultisig3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig3.json?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 e15a86a23178f433d514dbbce042e87d72662b8b5edcacfd2e37ab7a2d135f05\",\n                 \"hex\": \"0020e15a86a23178f433d514dbbce042e87d72662b8b5edcacfd2e37ab7a2d135f05\",\n-                \"type\": \"witness_v0_scripthash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_scripthash\",\n+                \"addresses\": [\n+                    \"bc1qu9dgdg330r6r84g5mw7wqshg04exv2uttmw2elfwx74h5tgntuzs44gyfg\"\n+                ]\n             }\n         }\n     ],"
      },
      {
        "sha": "4ba5dcb282fedaf6397f76b18db9172e66f4c7d7",
        "filename": "test/util/data/txcreateoutpubkey2.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/util/data/txcreateoutpubkey2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/util/data/txcreateoutpubkey2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreateoutpubkey2.json?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 a2516e770582864a6a56ed21a102044e388c62e3\",\n                 \"hex\": \"0014a2516e770582864a6a56ed21a102044e388c62e3\",\n-                \"type\": \"witness_v0_keyhash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_keyhash\",\n+                \"addresses\": [\n+                    \"bc1q5fgkuac9s2ry56jka5s6zqsyfcugcchry5cwu0\"\n+                ]\n             }\n         }\n     ],"
      },
      {
        "sha": "31b6459214f832083bcedbe0665225ea1386d6a4",
        "filename": "test/util/data/txcreatescript3.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/util/data/txcreatescript3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa624b61c928295c27ffbb4d27be582f5aa31b56/test/util/data/txcreatescript3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatescript3.json?ref=aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 0bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6\",\n                 \"hex\": \"00200bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6\",\n-                \"type\": \"witness_v0_scripthash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_scripthash\",\n+                \"addresses\": [\n+                    \"bc1qp0lfxhnscvsu0j36l36uurgv5tuck4pzuqytkvwqp3kh78cupttqyf705v\"\n+                ]\n             }\n         }\n     ],"
      }
    ]
  },
  {
    "sha": "0ec9c91623fc3389b3ff1741e1207e92c28649b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWM5YzkxNjIzZmMzMzg5YjNmZjE3NDFlMTIwN2U5MmMyODY0OWI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-29T08:19:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-29T08:20:31Z"
      },
      "message": "Merge #11417: Correct typo in comments\n\n6f33d8c Correct typo in comments (Johnson Lau)\n\nPull request description:\n\n  I think this is a search and replace mistake\n\nTree-SHA512: a83e081b817f1607496bfdcee47593d45d75cbe72effe944cdb5494b49a341eeeebdeb954f6db59dfa1ddfa350a117a4b26c754725a3459be78f2a1a093c6fde",
      "tree": {
        "sha": "195e34dd7587271fa425985de564a7ae18009a59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/195e34dd7587271fa425985de564a7ae18009a59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec9c91623fc3389b3ff1741e1207e92c28649b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzgJPAAoJEB5K7WKYbNJdXE4H/jFT9vKEKtHOVo5yTVN98w67\nRHsjo73ZkpuxAfuHgYasmPese4t/iawfRycJs69QvqhpMMVrTCcQUCy6S6HrNpNi\nUyHHtAlCHmP0Ifo10wMsI4ARYYEw5i5256WVB6ZWxBPg63HvYtX7hty79xzo4Qx/\n30amhsPp3k2oKSt9hQelmfTg0O7eQ4b8l/8/jp7aKY4sJHdma6E1dTdTsmcU3yUj\nhH4ynHXETHUCWUZYlmngHL9Us9VoYRbWr1o/okDPsW1tidtqns9RDrh6Gy353bxh\n1J2K+8X5Swbar9jV7wSG8xpfp6B03WvaxsxSBAttEBCXYfV9rBzEENCkRJOVkdw=\n=cQVO\n-----END PGP SIGNATURE-----",
        "payload": "tree 195e34dd7587271fa425985de564a7ae18009a59\nparent aa624b61c928295c27ffbb4d27be582f5aa31b56\nparent 6f33d8c79129a049c0f8a0f25e09b310e17dd252\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506673176 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506673231 +0200\n\nMerge #11417: Correct typo in comments\n\n6f33d8c Correct typo in comments (Johnson Lau)\n\nPull request description:\n\n  I think this is a search and replace mistake\n\nTree-SHA512: a83e081b817f1607496bfdcee47593d45d75cbe72effe944cdb5494b49a341eeeebdeb954f6db59dfa1ddfa350a117a4b26c754725a3459be78f2a1a093c6fde\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec9c91623fc3389b3ff1741e1207e92c28649b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec9c91623fc3389b3ff1741e1207e92c28649b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec9c91623fc3389b3ff1741e1207e92c28649b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa624b61c928295c27ffbb4d27be582f5aa31b56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa624b61c928295c27ffbb4d27be582f5aa31b56"
      },
      {
        "sha": "6f33d8c79129a049c0f8a0f25e09b310e17dd252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f33d8c79129a049c0f8a0f25e09b310e17dd252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f33d8c79129a049c0f8a0f25e09b310e17dd252"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a4b408831f66540d5c87b027fd22dfbd27d8527",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec9c91623fc3389b3ff1741e1207e92c28649b8/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec9c91623fc3389b3ff1741e1207e92c28649b8/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=0ec9c91623fc3389b3ff1741e1207e92c28649b8",
        "patch": "@@ -10,7 +10,7 @@\n \n /**\n  * Name of client reported in the 'version' message. Report the same name\n- * for both bitcoind and bitcoin-core, to make it harder for attackers to\n+ * for both bitcoind and bitcoin-qt, to make it harder for attackers to\n  * target servers or GUI users specifically.\n  */\n const std::string CLIENT_NAME(\"Satoshi\");"
      }
    ]
  },
  {
    "sha": "bbc901d3a683c92438a6b28dca50b956decc4433",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmM5MDFkM2E2ODNjOTI0MzhhNmIyOGRjYTUwYjk1NmRlY2M0NDMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-29T08:24:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-29T08:24:58Z"
      },
      "message": "Merge #11414: [docs] Remove partial gitian build instructions from descriptors dir.\n\nbb174e1 [docs] Remove partial gitian instructions from descriptors dir (fanquake)\n\nPull request description:\n\n  Cleanup after #11401.\n\nTree-SHA512: 9378463d3dd7a3c5b41388749002aef767581de28c92c19c89cc39c4e8ec5959f91d0232c6333e440c157d448be2f686dbcc7099aedd9510e4b36807690201fc",
      "tree": {
        "sha": "b932c732fb3990c6e9c2264e05d9ba6435ab8716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b932c732fb3990c6e9c2264e05d9ba6435ab8716"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZzgNaAAoJEB5K7WKYbNJdeQEIAJ+2ZnzuEbm2MnL+CW4ujwQg\nxkTNIPkje7HIHl6oOT9g6Q6O4b13QoW+ZeLSn3nyjtMkU+DX7hfdnXMpKnP4F3z0\nyBLwg/fP/L/dRhi870zDZAa+ig3R9fBb+J9LV1IU6H1AWdQXiYSQ4OIf/CSxL5yL\nhHzPzz9eibPyrpJP1Ff8Lv6Xl0lzzx1ukvQaHTeQ5gxCM6KTfDiZYCvHHNUYt+iL\nFWbAUphnT6K+2VXqewavDOR0GyO8g2ErRhPooO1QL7D2ALqjED28iPDOgyEyvPIj\nBHXbyxJgO8JBd8PXvfhqfsdVGKJRWeejZXQ3/h7etduwZCfLuzl4q2UdgjuaRH8=\n=vaB7\n-----END PGP SIGNATURE-----",
        "payload": "tree b932c732fb3990c6e9c2264e05d9ba6435ab8716\nparent 0ec9c91623fc3389b3ff1741e1207e92c28649b8\nparent bb174e19bc0e91854c40269cf8214943d70049a2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506673494 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506673498 +0200\n\nMerge #11414: [docs] Remove partial gitian build instructions from descriptors dir.\n\nbb174e1 [docs] Remove partial gitian instructions from descriptors dir (fanquake)\n\nPull request description:\n\n  Cleanup after #11401.\n\nTree-SHA512: 9378463d3dd7a3c5b41388749002aef767581de28c92c19c89cc39c4e8ec5959f91d0232c6333e440c157d448be2f686dbcc7099aedd9510e4b36807690201fc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc901d3a683c92438a6b28dca50b956decc4433",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ec9c91623fc3389b3ff1741e1207e92c28649b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec9c91623fc3389b3ff1741e1207e92c28649b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec9c91623fc3389b3ff1741e1207e92c28649b8"
      },
      {
        "sha": "bb174e19bc0e91854c40269cf8214943d70049a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb174e19bc0e91854c40269cf8214943d70049a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb174e19bc0e91854c40269cf8214943d70049a2"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 1,
      "deletions": 66
    },
    "files": [
      {
        "sha": "a582a724f75ae59e6a1c1f19fbde10d7f0834462",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc901d3a683c92438a6b28dca50b956decc4433/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc901d3a683c92438a6b28dca50b956decc4433/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=bbc901d3a683c92438a6b28dca50b956decc4433",
        "patch": "@@ -26,7 +26,7 @@ Contains files used to package bitcoind/bitcoin-qt\n for Debian-based Linux systems. If you compile bitcoind/bitcoin-qt yourself, there are some useful files here.\n \n ### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n-Notes on getting Gitian builds up and running using KVM.\n+Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n \n ### [Gitian-keys](/contrib/gitian-keys)\n PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results."
      },
      {
        "sha": "d9dbfd3cb3d1dfff43d36b4d1867b58cbea6c3e6",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec9c91623fc3389b3ff1741e1207e92c28649b8/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec9c91623fc3389b3ff1741e1207e92c28649b8/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=0ec9c91623fc3389b3ff1741e1207e92c28649b8",
        "patch": "@@ -1,65 +0,0 @@\n-### Gavin's notes on getting Gitian builds up and running using KVM\n-\n-These instructions distilled from\n-[https://help.ubuntu.com/community/KVM/Installation](https://help.ubuntu.com/community/KVM/Installation).\n-\n-You need the right hardware: you need a 64-bit-capable CPU with hardware virtualization support (Intel VT-x or AMD-V). Not all modern CPUs support hardware virtualization.\n-\n-You probably need to enable hardware virtualization in your machine's BIOS.\n-\n-You need to be running a recent version of 64-bit-Ubuntu, and you need to install several prerequisites:\n-\n-\tsudo apt-get install ruby apache2 git apt-cacher-ng python-vm-builder qemu-kvm\n-\n-Sanity checks:\n-\n-\tsudo service apt-cacher-ng status  # Should return apt-cacher-ng is running\n-\tls -l /dev/kvm   # Should show a /dev/kvm device\n-\n-\n-Once you've got the right hardware and software:\n-\n-    git clone git://github.com/bitcoin/bitcoin.git\n-    git clone git://github.com/devrandom/gitian-builder.git\n-    mkdir gitian-builder/inputs\n-    cd gitian-builder/inputs\n-\n-    # Create base images\n-    cd gitian-builder\n-    bin/make-base-vm --suite trusty --arch amd64\n-    cd ..\n-\n-    # Get inputs (see doc/release-process.md for exact inputs needed and where to get them)\n-    ...\n-\n-    # For further build instructions see doc/release-process.md\n-    ...\n-\n----------------------\n-\n-`gitian-builder` now also supports building using LXC. See\n-[help.ubuntu.com](https://help.ubuntu.com/14.04/serverguide/lxc.html)\n-for how to get LXC up and running under Ubuntu.\n-\n-If your main machine is a 64-bit Mac or PC with a few gigabytes of memory\n-and at least 10 gigabytes of free disk space, you can `gitian-build` using\n-LXC running inside a virtual machine.\n-\n-Here's a description of Gavin's setup on OSX 10.6:\n-\n-1. Download and install VirtualBox from [https://www.virtualbox.org/](https://www.virtualbox.org/)\n-\n-2. Download the 64-bit Ubuntu Desktop 12.04 LTS .iso CD image from\n-   [http://www.ubuntu.com/](http://www.ubuntu.com/)\n-\n-3. Run VirtualBox and create a new virtual machine, using the Ubuntu .iso (see the [VirtualBox documentation](https://www.virtualbox.org/wiki/Documentation) for details). Create it with at least 2 gigabytes of memory and a disk that is at least 20 gigabytes big.\n-\n-4. Inside the running Ubuntu desktop, install:\n-\n-\t\tsudo apt-get install debootstrap lxc ruby apache2 git apt-cacher-ng python-vm-builder\n-\n-5. Still inside Ubuntu, tell gitian-builder to use LXC, then follow the \"Once you've got the right hardware and software\" instructions above:\n-\n-\t\texport USE_LXC=1\n-\t\tgit clone git://github.com/bitcoin/bitcoin.git\n-\t\t... etc"
      }
    ]
  },
  {
    "sha": "cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWUyOGZiYzNmMDU1NWNhNDFiZGVmZjRjZWVjMjlmYTYyMjU3YWI4",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-09-29T08:48:43Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-09-29T08:48:43Z"
      },
      "message": "Add error string for CLEANSTACK script violation, preventing an \"unknown error\" if the CLEANSTACK error condition is set.",
      "tree": {
        "sha": "df87aa9d396ea28b0a1d869d3ad1aa5e30d88e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df87aa9d396ea28b0a1d869d3ad1aa5e30d88e9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc901d3a683c92438a6b28dca50b956decc4433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc901d3a683c92438a6b28dca50b956decc4433"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c590f53e3c006afe0cc9befcd92fe0fb29ea1ee",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
        "patch": "@@ -73,6 +73,8 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness version reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_PUBKEYTYPE:\n             return \"Public key is neither compressed or uncompressed\";\n+        case SCRIPT_ERR_CLEANSTACK:\n+            return \"Extra items left on stack after execution\";\n         case SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH:\n             return \"Witness program has incorrect length\";\n         case SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY:"
      }
    ]
  },
  {
    "sha": "ab5bba7783d2927e513af91e6c89c41bdfa47964",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjViYmE3NzgzZDI5MjdlNTEzYWY5MWU2Yzg5YzQxYmRmYTQ3OTY0",
    "commit": {
      "author": {
        "name": "Alejandro Avil\u00e9s",
        "email": "omegak@gmail.com",
        "date": "2017-09-29T08:54:10Z"
      },
      "committer": {
        "name": "Alejandro Avil\u00e9s",
        "email": "omegak@gmail.com",
        "date": "2017-09-29T08:54:10Z"
      },
      "message": "Fix launchctl not being able to stop bitcoind\n\nbitcoind should not be launched as daemon from launchctl. Otherwise, the\nprocess cannot be stopped from launchctl.",
      "tree": {
        "sha": "1aa655cde9daeb68a0bc03d7180ec62dbda9b847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aa655cde9daeb68a0bc03d7180ec62dbda9b847"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab5bba7783d2927e513af91e6c89c41bdfa47964",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab5bba7783d2927e513af91e6c89c41bdfa47964",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab5bba7783d2927e513af91e6c89c41bdfa47964",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab5bba7783d2927e513af91e6c89c41bdfa47964/comments",
    "author": {
      "login": "OmeGak",
      "id": 716307,
      "node_id": "MDQ6VXNlcjcxNjMwNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/716307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmeGak",
      "html_url": "https://github.com/OmeGak",
      "followers_url": "https://api.github.com/users/OmeGak/followers",
      "following_url": "https://api.github.com/users/OmeGak/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmeGak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmeGak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmeGak/subscriptions",
      "organizations_url": "https://api.github.com/users/OmeGak/orgs",
      "repos_url": "https://api.github.com/users/OmeGak/repos",
      "events_url": "https://api.github.com/users/OmeGak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmeGak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "OmeGak",
      "id": 716307,
      "node_id": "MDQ6VXNlcjcxNjMwNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/716307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmeGak",
      "html_url": "https://github.com/OmeGak",
      "followers_url": "https://api.github.com/users/OmeGak/followers",
      "following_url": "https://api.github.com/users/OmeGak/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmeGak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmeGak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmeGak/subscriptions",
      "organizations_url": "https://api.github.com/users/OmeGak/orgs",
      "repos_url": "https://api.github.com/users/OmeGak/repos",
      "events_url": "https://api.github.com/users/OmeGak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmeGak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a72003d794f39230db476d4f358eb244b7cb2d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a72003d794f39230db476d4f358eb244b7cb2d36"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95b5342f1ef9dc9b9bb66538d0cc842d02951d62",
        "filename": "contrib/init/org.bitcoin.bitcoind.plist",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab5bba7783d2927e513af91e6c89c41bdfa47964/contrib/init/org.bitcoin.bitcoind.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab5bba7783d2927e513af91e6c89c41bdfa47964/contrib/init/org.bitcoin.bitcoind.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/org.bitcoin.bitcoind.plist?ref=ab5bba7783d2927e513af91e6c89c41bdfa47964",
        "patch": "@@ -7,7 +7,6 @@\n \t<key>ProgramArguments</key>\n \t<array>\n \t\t<string>/usr/local/bin/bitcoind</string>\n-\t\t<string>-daemon</string>\n \t</array>\n \t<key>RunAtLoad</key>\n \t<true/>"
      }
    ]
  },
  {
    "sha": "619bb05037a55c4b73973965989d199d8cb62f74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTliYjA1MDM3YTU1YzRiNzM5NzM5NjU5ODlkMTk5ZDhjYjYyZjc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:27:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:27:20Z"
      },
      "message": "Squashed 'src/univalue/' changes from 16a1f7f6e..fe805ea74\n\nfe805ea74 Declare single-argument (non-converting) constructors \"explicit\"\n8a2d6f1e3 Merge pull request #41 from jgarzik/get-obj-map\nba341a20d Add getObjMap() helper method.  Also, constify checkObject().\nceb119413 Handle .pushKV() and .checkObject() edge cases.\n107db9829 Add ::push_back(double) method for feature parity.\nd41530031 Move one-line implementation of UniValue::read() to header.\n52e85b35b Move exception-throwing get_* methods into separate implementation module.\ndac529675 README.md: update code quotes\n3e31dcffb README.md: close code quote\nd09b8429d Update README.md\nf1b86edb4 Convert README to markdown style.\n1dfe464ef Import UniValue class unit tests from bitcoin project.\n0d3e74dd1 operator[] takes size_t index parameter (versus unsigned int)\n640158fa2 Private findKey() method becomes size_t clean, and returns bool on failure.\n709913585 Merge pull request #36 from ryanofsky/pr/end-str\na31231b51 Version 1.0.3\n4fd5444d1 Reject unterminated strings\n81eba332b Merge pull request #26 from isle2983/pushBackHelpers\n36405413e Merge PR #32 from branch 'nul-not-special' of git://github.com/ryanofsky/univalue into merge\n89bb07322 Merge pull request #31 from ryanofsky/raw-literals\n511008c36 Merge pull request #30 from ryanofsky/test-driver\n77974f3a9 Merge pull request #34 from paveljanik/20161116_Wshadow_codepoint\na38fcd355 Do not shadow member variable codepoint.\nfd32d1ab8 Don't require nul-terminated string inputs\n0bb1439d0 Support parsing raw literals in UniValue\n28876d045 Merge pull request #29 from btcdrak/exportspace\n839ccd71f Add test driver for JSONTestSuite\n26ef3fff1 Remove trailing whitespace from JSON export\ncfa0384d6 Convenience wrappers for push_back-ing integer types\nREVERT: 16a1f7f6e Merge #3: Pull upstream\nREVERT: daf1285af Merge pull request #2 from jgarzik/master\nREVERT: f32df99e9 Merge branch '2016_04_unicode' into bitcoin\nREVERT: 280b191cb Merge remote-tracking branch 'jgarzik/master' into bitcoin\nREVERT: 2740c4f71 Merge branch '2015_11_escape_plan' into bitcoin\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: fe805ea74f8919382720b09a905a14e81311b3ad",
      "tree": {
        "sha": "5d48005ff778ddf521705b5d08d19189966fc36b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d48005ff778ddf521705b5d08d19189966fc36b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/619bb05037a55c4b73973965989d199d8cb62f74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/619bb05037a55c4b73973965989d199d8cb62f74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/619bb05037a55c4b73973965989d199d8cb62f74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/619bb05037a55c4b73973965989d199d8cb62f74/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0"
      }
    ],
    "stats": {
      "total": 1012,
      "additions": 783,
      "deletions": 229
    },
    "files": [
      {
        "sha": "e283fc890e232dc5ce447678a294912ee222a93b",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -12,6 +12,7 @@ pkgconfig_DATA = pc/libunivalue.pc\n \n libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n+\tlib/univalue_get.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n@@ -20,7 +21,7 @@ libunivalue_la_LDFLAGS = \\\n \t-no-undefined\n libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n-TESTS = test/unitester\n+TESTS = test/object test/unitester test/no_nul\n \n GENBIN = gen/gen$(BUILD_EXEEXT)\n GEN_SRCS = gen/gen.cpp\n@@ -33,7 +34,7 @@ gen: lib/univalue_escapes.h $(GENBIN)\n \t@echo Updating $<\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n-noinst_PROGRAMS = $(TESTS)\n+noinst_PROGRAMS = $(TESTS) test/test_json\n \n TEST_DATA_DIR=test\n \n@@ -42,6 +43,21 @@ test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n+test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_LDADD = libunivalue.la\n+test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n+test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_LDADD = libunivalue.la\n+test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n+test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_object_SOURCES = test/object.cpp\n+test_object_LDADD = libunivalue.la\n+test_object_CXXFLAGS = -I$(top_srcdir)/include\n+test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail10.json \\\n \t$(TEST_DATA_DIR)/fail11.json \\\n@@ -77,6 +93,8 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail39.json \\\n \t$(TEST_DATA_DIR)/fail40.json \\\n \t$(TEST_DATA_DIR)/fail41.json \\\n+\t$(TEST_DATA_DIR)/fail42.json \\\n+\t$(TEST_DATA_DIR)/fail44.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -88,6 +106,11 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n \t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json\n+\t$(TEST_DATA_DIR)/round2.json \\\n+\t$(TEST_DATA_DIR)/round3.json \\\n+\t$(TEST_DATA_DIR)/round4.json \\\n+\t$(TEST_DATA_DIR)/round5.json \\\n+\t$(TEST_DATA_DIR)/round6.json \\\n+\t$(TEST_DATA_DIR)/round7.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "README",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README?ref=2ca7faab4205822b06dc2ab2bbda0a9a70fce7e0",
        "patch": "@@ -1,7 +0,0 @@\n-\n-\t\tUniValue\n-\n-A universal value object, with JSON encoding (output) and decoding (input).\n-\n-Built as a single dynamic RAII C++ object class, and no templates.\n-"
      },
      {
        "sha": "36aa786a4c5de14bb0295d0dc3d82a5f09679db7",
        "filename": "README.md",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,32 @@\n+\n+# UniValue\n+\n+## Summary\n+\n+A universal value class, with JSON encoding and decoding.\n+\n+UniValue is an abstract data type that may be a null, boolean, string,\n+number, array container, or a key/value dictionary container, nested to\n+an arbitrary depth.\n+\n+This class is aligned with the JSON standard, [RFC\n+7159](https://tools.ietf.org/html/rfc7159.html).\n+\n+## Installation\n+\n+This project is a standard GNU\n+[autotools](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)\n+project.  Build and install instructions are available in the `INSTALL`\n+file provided with GNU autotools.\n+\n+```\n+$ ./autogen.sh\n+$ ./configure\n+$ make\n+```\n+\n+## Design\n+\n+UniValue provides a single dynamic RAII C++ object class,\n+and minimizes template use (contra json_spirit).\n+"
      },
      {
        "sha": "8298332ac132cba1fdc61a1a48f2d666cfb5dbba",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [2])\n-m4_define([libunivalue_interface_age], [2])\n+m4_define([libunivalue_micro_version], [3])\n+m4_define([libunivalue_interface_age], [3])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.2],\n+AC_INIT([univalue], [1.0.3],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "4fd2223b302e7a2b1979654b5e900f3a4123ec3c",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -7,6 +7,7 @@\n #define __UNIVALUE_H__\n \n #include <stdint.h>\n+#include <string.h>\n \n #include <string>\n #include <vector>\n@@ -69,10 +70,11 @@ class UniValue {\n     size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    void getObjMap(std::map<std::string,UniValue>& kv) const;\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes) const;\n     const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+    const UniValue& operator[](size_t index) const;\n+    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }\n \n     bool isNull() const { return (typ == VNULL); }\n     bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n@@ -92,8 +94,25 @@ class UniValue {\n         std::string s(val_);\n         return push_back(s);\n     }\n+    bool push_back(uint64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(double val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n     bool push_backV(const std::vector<UniValue>& vec);\n \n+    void __pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n@@ -124,9 +143,10 @@ class UniValue {\n     std::string write(unsigned int prettyIndent = 0,\n                       unsigned int indentLevel = 0) const;\n \n-    bool read(const char *raw);\n+    bool read(const char *raw, size_t len);\n+    bool read(const char *raw) { return read(raw, strlen(raw)); }\n     bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n+        return read(rawStr.data(), rawStr.size());\n     }\n \n private:\n@@ -135,7 +155,7 @@ class UniValue {\n     std::vector<std::string> keys;\n     std::vector<UniValue> values;\n \n-    int findKey(const std::string& key) const;\n+    bool findKey(const std::string& key, size_t& retIdx) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n \n@@ -240,7 +260,7 @@ enum jtokentype {\n };\n \n extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n+                                    unsigned int& consumed, const char *raw, const char *end);\n extern const char *uvTypeName(UniValue::VType t);\n \n static inline bool jsonTokenIsValue(enum jtokentype jtt)"
      },
      {
        "sha": "d8ad7c4b90c6b1564d378c1e93b30f58ef37c889",
        "filename": "lib/univalue.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 153,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -4,75 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n-#include <errno.h>\n #include <iomanip>\n-#include <limits>\n #include <sstream>\n-#include <stdexcept>\n #include <stdlib.h>\n-#include <string.h>\n \n #include \"univalue.h\"\n \n-namespace \n-{\n-static bool ParsePrechecks(const std::string& str)\n-{\n-    if (str.empty()) // No empty string allowed\n-        return false;\n-    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n-        return false;\n-    return true;\n-}\n-\n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n-bool ParseInt64(const std::string& str, int64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n-}\n-\n-bool ParseDouble(const std::string& str, double *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n-}\n-}\n-\n using namespace std;\n \n const UniValue NullUniValue;\n@@ -104,7 +41,7 @@ static bool validNumStr(const string& s)\n {\n     string tokenVal;\n     unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n@@ -189,13 +126,22 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n+void UniValue::__pushKV(const std::string& key, const UniValue& val_)\n+{\n+    keys.push_back(key);\n+    values.push_back(val_);\n+}\n+\n bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n-    keys.push_back(key);\n-    values.push_back(val_);\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = val_;\n+    else\n+        __pushKV(key, val_);\n     return true;\n }\n \n@@ -204,30 +150,43 @@ bool UniValue::pushKVs(const UniValue& obj)\n     if (typ != VOBJ || obj.typ != VOBJ)\n         return false;\n \n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values.at(i));\n-    }\n+    for (size_t i = 0; i < obj.keys.size(); i++)\n+        __pushKV(obj.keys[i], obj.values.at(i));\n \n     return true;\n }\n \n-int UniValue::findKey(const std::string& key) const\n+void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const\n+{\n+    if (typ != VOBJ)\n+        return;\n+\n+    kv.clear();\n+    for (size_t i = 0; i < keys.size(); i++)\n+        kv[keys[i]] = values[i];\n+}\n+\n+bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n {\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n+    for (size_t i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key) {\n+            retIdx = i;\n+            return true;\n+        }\n     }\n \n-    return -1;\n+    return false;\n }\n \n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n+    if (typ != VOBJ)\n+        return false;\n+\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n          it != t.end(); ++it) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n+        size_t idx = 0;\n+        if (!findKey(it->first, idx))\n             return false;\n \n         if (values.at(idx).getType() != it->second)\n@@ -242,14 +201,14 @@ const UniValue& UniValue::operator[](const std::string& key) const\n     if (typ != VOBJ)\n         return NullUniValue;\n \n-    int index = findKey(key);\n-    if (index < 0)\n+    size_t index = 0;\n+    if (!findKey(key, index))\n         return NullUniValue;\n \n     return values.at(index);\n }\n \n-const UniValue& UniValue::operator[](unsigned int index) const\n+const UniValue& UniValue::operator[](size_t index) const\n {\n     if (typ != VOBJ && typ != VARR)\n         return NullUniValue;\n@@ -283,75 +242,3 @@ const UniValue& find_value(const UniValue& obj, const std::string& name)\n     return NullUniValue;\n }\n \n-const std::vector<std::string>& UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-const std::vector<UniValue>& UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-const std::string& UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "eabcf2dad1acc67451fb9fec9d01ef55ef6fe255",
        "filename": "lib/univalue_get.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_get.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <errno.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdexcept>\n+#include <vector>\n+#include <limits>\n+#include <string>\n+\n+#include \"univalue.h\"\n+\n+namespace\n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+const std::vector<std::string>& UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+const std::vector<UniValue>& UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+const std::string& UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "ae75cb462a0188c48181af5e225bca883a1a241d",
        "filename": "lib/univalue_read.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 31,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -43,21 +43,21 @@ static const char *hatoui(const char *first, const char *last,\n }\n \n enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n+                            const char *raw, const char *end)\n {\n     tokenVal.clear();\n     consumed = 0;\n \n     const char *rawStart = raw;\n \n-    while ((*raw) && (json_isspace(*raw)))             // skip whitespace\n+    while (raw < end && (json_isspace(*raw)))          // skip whitespace\n         raw++;\n \n-    switch (*raw) {\n-\n-    case 0:\n+    if (raw >= end)\n         return JTOK_NONE;\n \n+    switch (*raw) {\n+\n     case '{':\n         raw++;\n         consumed = (raw - rawStart);\n@@ -127,40 +127,40 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         numStr += *raw;                       // copy first char\n         raw++;\n \n-        if ((*first == '-') && (!json_isdigit(*raw)))\n+        if ((*first == '-') && (raw < end) && (!json_isdigit(*raw)))\n             return JTOK_ERR;\n \n-        while ((*raw) && json_isdigit(*raw)) {     // copy digits\n+        while (raw < end && json_isdigit(*raw)) {  // copy digits\n             numStr += *raw;\n             raw++;\n         }\n \n         // part 2: frac\n-        if (*raw == '.') {\n+        if (raw < end && *raw == '.') {\n             numStr += *raw;                   // copy .\n             raw++;\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n         }\n \n         // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n+        if (raw < end && (*raw == 'e' || *raw == 'E')) {\n             numStr += *raw;                   // copy E\n             raw++;\n \n-            if (*raw == '-' || *raw == '+') { // copy +/-\n+            if (raw < end && (*raw == '-' || *raw == '+')) { // copy +/-\n                 numStr += *raw;\n                 raw++;\n             }\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -177,13 +177,16 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n-        while (*raw) {\n-            if ((unsigned char)*raw < 0x20)\n+        while (true) {\n+            if (raw >= end || (unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n+                if (raw >= end)\n+                    return JTOK_ERR;\n+\n                 switch (*raw) {\n                 case '\"':  writer.push_back('\\\"'); break;\n                 case '\\\\': writer.push_back('\\\\'); break;\n@@ -196,7 +199,8 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n \n                 case 'u': {\n                     unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                    if (raw + 1 + 4 >= end ||\n+                        hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n                     writer.push_back_u(codepoint);\n@@ -246,7 +250,7 @@ enum expect_bits {\n #define setExpect(bit) (expectMask |= EXP_##bit)\n #define clearExpect(bit) (expectMask &= ~EXP_##bit)\n \n-bool UniValue::read(const char *raw)\n+bool UniValue::read(const char *raw, size_t size)\n {\n     clear();\n \n@@ -257,10 +261,11 @@ bool UniValue::read(const char *raw)\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n+    const char* end = raw + size;\n     do {\n         last_tok = tok;\n \n-        tok = getJsonToken(tokenVal, consumed, raw);\n+        tok = getJsonToken(tokenVal, consumed, raw, end);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n             return false;\n         raw += consumed;\n@@ -371,9 +376,6 @@ bool UniValue::read(const char *raw)\n         case JTOK_KW_NULL:\n         case JTOK_KW_TRUE:\n         case JTOK_KW_FALSE: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal;\n             switch (tok) {\n             case JTOK_KW_NULL:\n@@ -388,6 +390,11 @@ bool UniValue::read(const char *raw)\n             default: /* impossible */ break;\n             }\n \n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -396,10 +403,12 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_NUMBER: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal(VNUM, tokenVal);\n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -408,17 +417,18 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n             if (expect(OBJ_NAME)) {\n+                UniValue *top = stack.back();\n                 top->keys.push_back(tokenVal);\n                 clearExpect(OBJ_NAME);\n                 setExpect(COLON);\n             } else {\n                 UniValue tmpVal(VSTR, tokenVal);\n+                if (!stack.size()) {\n+                    *this = tmpVal;\n+                    break;\n+                }\n+                UniValue *top = stack.back();\n                 top->values.push_back(tmpVal);\n             }\n \n@@ -432,7 +442,7 @@ bool UniValue::read(const char *raw)\n     } while (!stack.empty ());\n \n     /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n+    tok = getJsonToken(tokenVal, consumed, raw, end);\n     if (tok != JTOK_NONE)\n         return false;\n "
      },
      {
        "sha": "20d40430095841a460adef8d3c60a56746785b24",
        "filename": "lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_utffilter.h?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -13,7 +13,7 @@\n class JSONUTF8StringFilter\n {\n public:\n-    JSONUTF8StringFilter(std::string &s):\n+    explicit JSONUTF8StringFilter(std::string &s):\n         str(s), is_valid(true), codepoint(0), state(0), surpair(0)\n     {\n     }\n@@ -46,27 +46,27 @@ class JSONUTF8StringFilter\n         }\n     }\n     // Write codepoint directly, possibly collating surrogate pairs\n-    void push_back_u(unsigned int codepoint)\n+    void push_back_u(unsigned int codepoint_)\n     {\n         if (state) // Only accept full codepoints in open state\n             is_valid = false;\n-        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+        if (codepoint_ >= 0xD800 && codepoint_ < 0xDC00) { // First half of surrogate pair\n             if (surpair) // Two subsequent surrogate pair openers - fail\n                 is_valid = false;\n             else\n-                surpair = codepoint;\n-        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+                surpair = codepoint_;\n+        } else if (codepoint_ >= 0xDC00 && codepoint_ < 0xE000) { // Second half of surrogate pair\n             if (surpair) { // Open surrogate pair, expect second half\n                 // Compute code point from UTF-16 surrogate pair\n-                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint_ - 0xDC00));\n                 surpair = 0;\n             } else // Second half doesn't follow a first half - fail\n                 is_valid = false;\n         } else {\n             if (surpair) // First half of surrogate pair not followed by second - fail\n                 is_valid = false;\n             else\n-                append_codepoint(codepoint);\n+                append_codepoint(codepoint_);\n         }\n     }\n     // Check that we're in a state where the string can be ended\n@@ -96,22 +96,22 @@ class JSONUTF8StringFilter\n     //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n     unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n \n-    void append_codepoint(unsigned int codepoint)\n+    void append_codepoint(unsigned int codepoint_)\n     {\n-        if (codepoint <= 0x7f)\n-            str.push_back((char)codepoint);\n-        else if (codepoint <= 0x7FF) {\n-            str.push_back((char)(0xC0 | (codepoint >> 6)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0xFFFF) {\n-            str.push_back((char)(0xE0 | (codepoint >> 12)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0x1FFFFF) {\n-            str.push_back((char)(0xF0 | (codepoint >> 18)));\n-            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        if (codepoint_ <= 0x7f)\n+            str.push_back((char)codepoint_);\n+        else if (codepoint_ <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint_ >> 6)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint_ >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint_ >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n         }\n     }\n };"
      },
      {
        "sha": "cf27835991162b2a1e7c0053223f36ea26eaa589",
        "filename": "lib/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -79,8 +79,6 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n         s += values[i].write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1)) {\n             s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n         }\n         if (prettyIndent)\n             s += \"\\n\";"
      },
      {
        "sha": "7b27cf0da2901bf1438b00efc277d19d7bd6643f",
        "filename": "test/.gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/.gitignore?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -1,4 +1,8 @@\n+\n+object\n unitester\n+test_json\n+no_nul\n \n *.trs\n *.log"
      },
      {
        "sha": "8feb01a6d0db2a3db29889a623b00ba51d51490b",
        "filename": "test/fail1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail1.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -1 +1 @@\n-\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file\n+\"This is a string that never ends, yes it goes on and on, my friends."
      },
      {
        "sha": "9c7565adbddf645df5edfbdcd630c7a0f94aa2eb",
        "filename": "test/fail42.json",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/fail42.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/fail42.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail42.json?ref=619bb05037a55c4b73973965989d199d8cb62f74"
      },
      {
        "sha": "80edceddf1ef6c90cee1e9f979a0d31b1630bca4",
        "filename": "test/fail44.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/fail44.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/fail44.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail44.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+\"This file ends without a newline or close-quote.\n\\ No newline at end of file"
      },
      {
        "sha": "83d292200bf875126f7a25f1c5b032beec9ed6dd",
        "filename": "test/no_nul.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/no_nul.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/no_nul.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/no_nul.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,8 @@\n+#include \"univalue.h\"\n+\n+int main (int argc, char *argv[])\n+{\n+    char buf[] = \"___[1,2,3]___\";\n+    UniValue val;\n+    return val.read(buf + 3, 7) ? 0 : 1;\n+}"
      },
      {
        "sha": "02446292a1aa4a3a76a2f7a1ed7f1a22cc138a56",
        "filename": "test/object.cpp",
        "status": "added",
        "additions": 395,
        "deletions": 0,
        "changes": 395,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/object.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,395 @@\n+// Copyright (c) 2014 BitPay Inc.\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include <cassert>\n+#include <stdexcept>\n+#include <univalue.h>\n+\n+#define BOOST_FIXTURE_TEST_SUITE(a, b)\n+#define BOOST_AUTO_TEST_CASE(funcName) void funcName()\n+#define BOOST_AUTO_TEST_SUITE_END()\n+#define BOOST_CHECK(expr) assert(expr)\n+#define BOOST_CHECK_EQUAL(v1, v2) assert((v1) == (v2))\n+#define BOOST_CHECK_THROW(stmt, excMatch) { \\\n+        try { \\\n+            (stmt); \\\n+        } catch (excMatch & e) { \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+#define BOOST_CHECK_NO_THROW(stmt) { \\\n+        try { \\\n+            (stmt); \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    std::string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_typecheck)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.setNumStr(\"1\"));\n+    BOOST_CHECK(v1.isNum());\n+    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n+\n+    UniValue v2;\n+    BOOST_CHECK(v2.setBool(true));\n+    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n+    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n+\n+    UniValue v3;\n+    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n+    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n+    BOOST_CHECK(v3.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n+\n+    UniValue v4;\n+    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n+    BOOST_CHECK(v4.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n+    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n+    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n+\n+    UniValue v5;\n+    BOOST_CHECK(v5.read(\"[true, 10]\"));\n+    BOOST_CHECK_NO_THROW(v5.get_array());\n+    std::vector<UniValue> vals = v5.getValues();\n+    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n+\n+    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK(v.isNull());\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_array)\n+{\n+    UniValue arr(UniValue::VARR);\n+\n+    UniValue v((int64_t)1023LL);\n+    BOOST_CHECK(arr.push_back(v));\n+\n+    std::string vStr(\"zippy\");\n+    BOOST_CHECK(arr.push_back(vStr));\n+\n+    const char *s = \"pippy\";\n+    BOOST_CHECK(arr.push_back(s));\n+\n+    std::vector<UniValue> vec;\n+    v.setStr(\"boing\");\n+    vec.push_back(v);\n+\n+    v.setStr(\"going\");\n+    vec.push_back(v);\n+\n+    BOOST_CHECK(arr.push_backV(vec));\n+\n+    BOOST_CHECK(arr.push_back((uint64_t) 400ULL));\n+    BOOST_CHECK(arr.push_back((int64_t) -400LL));\n+    BOOST_CHECK(arr.push_back((int) -401));\n+    BOOST_CHECK(arr.push_back(-40.1));\n+\n+    BOOST_CHECK_EQUAL(arr.empty(), false);\n+    BOOST_CHECK_EQUAL(arr.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n+    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n+    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n+    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n+    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n+    BOOST_CHECK_EQUAL(arr[5].getValStr(), \"400\");\n+    BOOST_CHECK_EQUAL(arr[6].getValStr(), \"-400\");\n+    BOOST_CHECK_EQUAL(arr[7].getValStr(), \"-401\");\n+    BOOST_CHECK_EQUAL(arr[8].getValStr(), \"-40.1\");\n+\n+    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n+\n+    arr.clear();\n+    BOOST_CHECK(arr.empty());\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_object)\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    std::string strKey, strVal;\n+    UniValue v;\n+\n+    strKey = \"age\";\n+    v.setInt(100);\n+    BOOST_CHECK(obj.pushKV(strKey, v));\n+\n+    strKey = \"first\";\n+    strVal = \"John\";\n+    BOOST_CHECK(obj.pushKV(strKey, strVal));\n+\n+    strKey = \"last\";\n+    const char *cVal = \"Smith\";\n+    BOOST_CHECK(obj.pushKV(strKey, cVal));\n+\n+    strKey = \"distance\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n+\n+    strKey = \"time\";\n+    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n+\n+    strKey = \"calories\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n+\n+    strKey = \"temperature\";\n+    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n+\n+    UniValue obj2(UniValue::VOBJ);\n+    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n+    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n+\n+    BOOST_CHECK(obj.pushKVs(obj2));\n+\n+    BOOST_CHECK_EQUAL(obj.empty(), false);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n+    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n+    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n+    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n+    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n+    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n+    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n+    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n+\n+    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n+\n+    BOOST_CHECK(obj.exists(\"age\"));\n+    BOOST_CHECK(obj.exists(\"first\"));\n+    BOOST_CHECK(obj.exists(\"last\"));\n+    BOOST_CHECK(obj.exists(\"distance\"));\n+    BOOST_CHECK(obj.exists(\"time\"));\n+    BOOST_CHECK(obj.exists(\"calories\"));\n+    BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"cat1\"));\n+    BOOST_CHECK(obj.exists(\"cat2\"));\n+\n+    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n+\n+    std::map<std::string, UniValue::VType> objTypes;\n+    objTypes[\"age\"] = UniValue::VNUM;\n+    objTypes[\"first\"] = UniValue::VSTR;\n+    objTypes[\"last\"] = UniValue::VSTR;\n+    objTypes[\"distance\"] = UniValue::VNUM;\n+    objTypes[\"time\"] = UniValue::VNUM;\n+    objTypes[\"calories\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"cat1\"] = UniValue::VNUM;\n+    objTypes[\"cat2\"] = UniValue::VNUM;\n+    BOOST_CHECK(obj.checkObject(objTypes));\n+\n+    objTypes[\"cat2\"] = UniValue::VSTR;\n+    BOOST_CHECK(!obj.checkObject(objTypes));\n+\n+    obj.clear();\n+    BOOST_CHECK(obj.empty());\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n+    BOOST_CHECK_EQUAL(obj.getType(), UniValue::VNULL);\n+\n+    BOOST_CHECK_EQUAL(obj.setObject(), true);\n+    UniValue uv;\n+    uv.setInt(42);\n+    obj.__pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"42\");\n+\n+    uv.setInt(43);\n+    obj.pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"43\");\n+\n+    obj.pushKV(\"name\", \"foo bar\");\n+\n+    std::map<std::string,UniValue> kv;\n+    obj.getObjMap(kv);\n+    BOOST_CHECK_EQUAL(kv[\"age\"].getValStr(), \"43\");\n+    BOOST_CHECK_EQUAL(kv[\"name\"].getValStr(), \"foo bar\");\n+\n+}\n+\n+static const char *json1 =\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n+\n+BOOST_AUTO_TEST_CASE(univalue_readwrite)\n+{\n+    UniValue v;\n+    BOOST_CHECK(v.read(json1));\n+\n+    std::string strJson1(json1);\n+    BOOST_CHECK(v.read(strJson1));\n+\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n+\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n+\n+    UniValue obj = v[1];\n+    BOOST_CHECK(obj.isObject());\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n+\n+    BOOST_CHECK(obj[\"key1\"].isStr());\n+    std::string correctValue(\"str\");\n+    correctValue.push_back('\\0');\n+    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), correctValue);\n+    BOOST_CHECK(obj[\"key2\"].isNum());\n+    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n+    BOOST_CHECK(obj[\"key3\"].isObject());\n+\n+    BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+int main (int argc, char *argv[])\n+{\n+    univalue_constructor();\n+    univalue_typecheck();\n+    univalue_set();\n+    univalue_array();\n+    univalue_object();\n+    univalue_readwrite();\n+    return 0;\n+}\n+"
      },
      {
        "sha": "7182dc2f9b8e47dbcbbaa2e18a47a44f424d491f",
        "filename": "test/round3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round3.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+\"abcdefghijklmnopqrstuvwxyz\""
      },
      {
        "sha": "7f8f011eb73d6043d2e6db9d2c101195ae2801f2",
        "filename": "test/round4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round4.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+7"
      },
      {
        "sha": "27ba77ddaf61532f217964734769a42cdabc17dc",
        "filename": "test/round5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round5.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+true"
      },
      {
        "sha": "c508d5366f70bba37fcc09d128b6537c4adb2c79",
        "filename": "test/round6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round6.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+false"
      },
      {
        "sha": "19765bd501b636fce433540d9e6735f51d66151d",
        "filename": "test/round7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/round7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/round7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round7.json?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1 @@\n+null"
      },
      {
        "sha": "2943bae2b15e928e345af49b5802e7241058a1b5",
        "filename": "test/test_json.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/test_json.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/test_json.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/test_json.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -0,0 +1,24 @@\n+// Test program that can be called by the JSON test suite at\n+// https://github.com/nst/JSONTestSuite.\n+//\n+// It reads JSON input from stdin and exits with code 0 if it can be parsed\n+// successfully. It also pretty prints the parsed JSON value to stdout.\n+\n+#include <iostream>\n+#include <string>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+int main (int argc, char *argv[])\n+{\n+    UniValue val;\n+    if (val.read(string(istreambuf_iterator<char>(cin),\n+                        istreambuf_iterator<char>()))) {\n+        cout << val.write(1 /* prettyIndent */, 4 /* indentLevel */) << endl;\n+        return 0;\n+    } else {\n+        cerr << \"JSON Parse Error.\" << endl;\n+        return 1;\n+    }\n+}"
      },
      {
        "sha": "2c37794a4bdb8fb77fa02d5cbb90291033ef2af4",
        "filename": "test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/619bb05037a55c4b73973965989d199d8cb62f74/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/619bb05037a55c4b73973965989d199d8cb62f74/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=619bb05037a55c4b73973965989d199d8cb62f74",
        "patch": "@@ -113,6 +113,8 @@ static const char *filenames[] = {\n         \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n         \"fail40.json\",               // invalid unicode: broken UTF-8\n         \"fail41.json\",               // invalid unicode: unfinished UTF-8\n+        \"fail42.json\",               // valid json with garbage following a nul byte\n+        \"fail44.json\",               // unterminated string\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -125,6 +127,11 @@ static const char *filenames[] = {\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n         \"round2.json\",              // unicode\n+        \"round3.json\",              // bare string\n+        \"round4.json\",              // bare number\n+        \"round5.json\",              // bare true\n+        \"round6.json\",              // bare false\n+        \"round7.json\",              // bare null\n };\n \n // Test \\u handling"
      }
    ]
  },
  {
    "sha": "faaeeb0d3e777d991c7cfee983bea369c109f5cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFlZWIwZDNlNzc3ZDk5MWM3Y2ZlZTk4M2JlYTM2OWMxMDlmNWNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:31:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T12:35:46Z"
      },
      "message": "Bump univalue and fix json formatting in tests\n\nThis merge commit bumps the univalue subtree and also updates the whitespace\nfor some failing tests.",
      "tree": {
        "sha": "c55d3d58f96acbbe9a4fc4ccd5b6f3a7e638a179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c55d3d58f96acbbe9a4fc4ccd5b6f3a7e638a179"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc901d3a683c92438a6b28dca50b956decc4433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc901d3a683c92438a6b28dca50b956decc4433"
      },
      {
        "sha": "619bb05037a55c4b73973965989d199d8cb62f74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/619bb05037a55c4b73973965989d199d8cb62f74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/619bb05037a55c4b73973965989d199d8cb62f74"
      }
    ],
    "stats": {
      "total": 1148,
      "additions": 851,
      "deletions": 297
    },
    "files": [
      {
        "sha": "e283fc890e232dc5ce447678a294912ee222a93b",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -12,6 +12,7 @@ pkgconfig_DATA = pc/libunivalue.pc\n \n libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n+\tlib/univalue_get.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n@@ -20,7 +21,7 @@ libunivalue_la_LDFLAGS = \\\n \t-no-undefined\n libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n-TESTS = test/unitester\n+TESTS = test/object test/unitester test/no_nul\n \n GENBIN = gen/gen$(BUILD_EXEEXT)\n GEN_SRCS = gen/gen.cpp\n@@ -33,7 +34,7 @@ gen: lib/univalue_escapes.h $(GENBIN)\n \t@echo Updating $<\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n-noinst_PROGRAMS = $(TESTS)\n+noinst_PROGRAMS = $(TESTS) test/test_json\n \n TEST_DATA_DIR=test\n \n@@ -42,6 +43,21 @@ test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n+test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_LDADD = libunivalue.la\n+test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n+test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_LDADD = libunivalue.la\n+test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n+test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_object_SOURCES = test/object.cpp\n+test_object_LDADD = libunivalue.la\n+test_object_CXXFLAGS = -I$(top_srcdir)/include\n+test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail10.json \\\n \t$(TEST_DATA_DIR)/fail11.json \\\n@@ -77,6 +93,8 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail39.json \\\n \t$(TEST_DATA_DIR)/fail40.json \\\n \t$(TEST_DATA_DIR)/fail41.json \\\n+\t$(TEST_DATA_DIR)/fail42.json \\\n+\t$(TEST_DATA_DIR)/fail44.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -88,6 +106,11 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n \t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json\n+\t$(TEST_DATA_DIR)/round2.json \\\n+\t$(TEST_DATA_DIR)/round3.json \\\n+\t$(TEST_DATA_DIR)/round4.json \\\n+\t$(TEST_DATA_DIR)/round5.json \\\n+\t$(TEST_DATA_DIR)/round6.json \\\n+\t$(TEST_DATA_DIR)/round7.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "src/univalue/README",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc901d3a683c92438a6b28dca50b956decc4433/src/univalue/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc901d3a683c92438a6b28dca50b956decc4433/src/univalue/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README?ref=bbc901d3a683c92438a6b28dca50b956decc4433",
        "patch": "@@ -1,7 +0,0 @@\n-\n-\t\tUniValue\n-\n-A universal value object, with JSON encoding (output) and decoding (input).\n-\n-Built as a single dynamic RAII C++ object class, and no templates.\n-"
      },
      {
        "sha": "36aa786a4c5de14bb0295d0dc3d82a5f09679db7",
        "filename": "src/univalue/README.md",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README.md?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,32 @@\n+\n+# UniValue\n+\n+## Summary\n+\n+A universal value class, with JSON encoding and decoding.\n+\n+UniValue is an abstract data type that may be a null, boolean, string,\n+number, array container, or a key/value dictionary container, nested to\n+an arbitrary depth.\n+\n+This class is aligned with the JSON standard, [RFC\n+7159](https://tools.ietf.org/html/rfc7159.html).\n+\n+## Installation\n+\n+This project is a standard GNU\n+[autotools](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)\n+project.  Build and install instructions are available in the `INSTALL`\n+file provided with GNU autotools.\n+\n+```\n+$ ./autogen.sh\n+$ ./configure\n+$ make\n+```\n+\n+## Design\n+\n+UniValue provides a single dynamic RAII C++ object class,\n+and minimizes template use (contra json_spirit).\n+"
      },
      {
        "sha": "8298332ac132cba1fdc61a1a48f2d666cfb5dbba",
        "filename": "src/univalue/configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [2])\n-m4_define([libunivalue_interface_age], [2])\n+m4_define([libunivalue_micro_version], [3])\n+m4_define([libunivalue_interface_age], [3])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.2],\n+AC_INIT([univalue], [1.0.3],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "4fd2223b302e7a2b1979654b5e900f3a4123ec3c",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -7,6 +7,7 @@\n #define __UNIVALUE_H__\n \n #include <stdint.h>\n+#include <string.h>\n \n #include <string>\n #include <vector>\n@@ -69,10 +70,11 @@ class UniValue {\n     size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    void getObjMap(std::map<std::string,UniValue>& kv) const;\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes) const;\n     const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+    const UniValue& operator[](size_t index) const;\n+    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }\n \n     bool isNull() const { return (typ == VNULL); }\n     bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n@@ -92,8 +94,25 @@ class UniValue {\n         std::string s(val_);\n         return push_back(s);\n     }\n+    bool push_back(uint64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(double val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n     bool push_backV(const std::vector<UniValue>& vec);\n \n+    void __pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n@@ -124,9 +143,10 @@ class UniValue {\n     std::string write(unsigned int prettyIndent = 0,\n                       unsigned int indentLevel = 0) const;\n \n-    bool read(const char *raw);\n+    bool read(const char *raw, size_t len);\n+    bool read(const char *raw) { return read(raw, strlen(raw)); }\n     bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n+        return read(rawStr.data(), rawStr.size());\n     }\n \n private:\n@@ -135,7 +155,7 @@ class UniValue {\n     std::vector<std::string> keys;\n     std::vector<UniValue> values;\n \n-    int findKey(const std::string& key) const;\n+    bool findKey(const std::string& key, size_t& retIdx) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n \n@@ -240,7 +260,7 @@ enum jtokentype {\n };\n \n extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n+                                    unsigned int& consumed, const char *raw, const char *end);\n extern const char *uvTypeName(UniValue::VType t);\n \n static inline bool jsonTokenIsValue(enum jtokentype jtt)"
      },
      {
        "sha": "d8ad7c4b90c6b1564d378c1e93b30f58ef37c889",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 153,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -4,75 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n-#include <errno.h>\n #include <iomanip>\n-#include <limits>\n #include <sstream>\n-#include <stdexcept>\n #include <stdlib.h>\n-#include <string.h>\n \n #include \"univalue.h\"\n \n-namespace \n-{\n-static bool ParsePrechecks(const std::string& str)\n-{\n-    if (str.empty()) // No empty string allowed\n-        return false;\n-    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n-        return false;\n-    return true;\n-}\n-\n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n-bool ParseInt64(const std::string& str, int64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n-}\n-\n-bool ParseDouble(const std::string& str, double *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n-}\n-}\n-\n using namespace std;\n \n const UniValue NullUniValue;\n@@ -104,7 +41,7 @@ static bool validNumStr(const string& s)\n {\n     string tokenVal;\n     unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n@@ -189,13 +126,22 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n+void UniValue::__pushKV(const std::string& key, const UniValue& val_)\n+{\n+    keys.push_back(key);\n+    values.push_back(val_);\n+}\n+\n bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n-    keys.push_back(key);\n-    values.push_back(val_);\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = val_;\n+    else\n+        __pushKV(key, val_);\n     return true;\n }\n \n@@ -204,30 +150,43 @@ bool UniValue::pushKVs(const UniValue& obj)\n     if (typ != VOBJ || obj.typ != VOBJ)\n         return false;\n \n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values.at(i));\n-    }\n+    for (size_t i = 0; i < obj.keys.size(); i++)\n+        __pushKV(obj.keys[i], obj.values.at(i));\n \n     return true;\n }\n \n-int UniValue::findKey(const std::string& key) const\n+void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const\n+{\n+    if (typ != VOBJ)\n+        return;\n+\n+    kv.clear();\n+    for (size_t i = 0; i < keys.size(); i++)\n+        kv[keys[i]] = values[i];\n+}\n+\n+bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n {\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n+    for (size_t i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key) {\n+            retIdx = i;\n+            return true;\n+        }\n     }\n \n-    return -1;\n+    return false;\n }\n \n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n+    if (typ != VOBJ)\n+        return false;\n+\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n          it != t.end(); ++it) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n+        size_t idx = 0;\n+        if (!findKey(it->first, idx))\n             return false;\n \n         if (values.at(idx).getType() != it->second)\n@@ -242,14 +201,14 @@ const UniValue& UniValue::operator[](const std::string& key) const\n     if (typ != VOBJ)\n         return NullUniValue;\n \n-    int index = findKey(key);\n-    if (index < 0)\n+    size_t index = 0;\n+    if (!findKey(key, index))\n         return NullUniValue;\n \n     return values.at(index);\n }\n \n-const UniValue& UniValue::operator[](unsigned int index) const\n+const UniValue& UniValue::operator[](size_t index) const\n {\n     if (typ != VOBJ && typ != VARR)\n         return NullUniValue;\n@@ -283,75 +242,3 @@ const UniValue& find_value(const UniValue& obj, const std::string& name)\n     return NullUniValue;\n }\n \n-const std::vector<std::string>& UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-const std::vector<UniValue>& UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-const std::string& UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "eabcf2dad1acc67451fb9fec9d01ef55ef6fe255",
        "filename": "src/univalue/lib/univalue_get.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_get.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <errno.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdexcept>\n+#include <vector>\n+#include <limits>\n+#include <string>\n+\n+#include \"univalue.h\"\n+\n+namespace\n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+const std::vector<std::string>& UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+const std::vector<UniValue>& UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+const std::string& UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "ae75cb462a0188c48181af5e225bca883a1a241d",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 31,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -43,21 +43,21 @@ static const char *hatoui(const char *first, const char *last,\n }\n \n enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n+                            const char *raw, const char *end)\n {\n     tokenVal.clear();\n     consumed = 0;\n \n     const char *rawStart = raw;\n \n-    while ((*raw) && (json_isspace(*raw)))             // skip whitespace\n+    while (raw < end && (json_isspace(*raw)))          // skip whitespace\n         raw++;\n \n-    switch (*raw) {\n-\n-    case 0:\n+    if (raw >= end)\n         return JTOK_NONE;\n \n+    switch (*raw) {\n+\n     case '{':\n         raw++;\n         consumed = (raw - rawStart);\n@@ -127,40 +127,40 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         numStr += *raw;                       // copy first char\n         raw++;\n \n-        if ((*first == '-') && (!json_isdigit(*raw)))\n+        if ((*first == '-') && (raw < end) && (!json_isdigit(*raw)))\n             return JTOK_ERR;\n \n-        while ((*raw) && json_isdigit(*raw)) {     // copy digits\n+        while (raw < end && json_isdigit(*raw)) {  // copy digits\n             numStr += *raw;\n             raw++;\n         }\n \n         // part 2: frac\n-        if (*raw == '.') {\n+        if (raw < end && *raw == '.') {\n             numStr += *raw;                   // copy .\n             raw++;\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n         }\n \n         // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n+        if (raw < end && (*raw == 'e' || *raw == 'E')) {\n             numStr += *raw;                   // copy E\n             raw++;\n \n-            if (*raw == '-' || *raw == '+') { // copy +/-\n+            if (raw < end && (*raw == '-' || *raw == '+')) { // copy +/-\n                 numStr += *raw;\n                 raw++;\n             }\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -177,13 +177,16 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n-        while (*raw) {\n-            if ((unsigned char)*raw < 0x20)\n+        while (true) {\n+            if (raw >= end || (unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n+                if (raw >= end)\n+                    return JTOK_ERR;\n+\n                 switch (*raw) {\n                 case '\"':  writer.push_back('\\\"'); break;\n                 case '\\\\': writer.push_back('\\\\'); break;\n@@ -196,7 +199,8 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n \n                 case 'u': {\n                     unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                    if (raw + 1 + 4 >= end ||\n+                        hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n                     writer.push_back_u(codepoint);\n@@ -246,7 +250,7 @@ enum expect_bits {\n #define setExpect(bit) (expectMask |= EXP_##bit)\n #define clearExpect(bit) (expectMask &= ~EXP_##bit)\n \n-bool UniValue::read(const char *raw)\n+bool UniValue::read(const char *raw, size_t size)\n {\n     clear();\n \n@@ -257,10 +261,11 @@ bool UniValue::read(const char *raw)\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n+    const char* end = raw + size;\n     do {\n         last_tok = tok;\n \n-        tok = getJsonToken(tokenVal, consumed, raw);\n+        tok = getJsonToken(tokenVal, consumed, raw, end);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n             return false;\n         raw += consumed;\n@@ -371,9 +376,6 @@ bool UniValue::read(const char *raw)\n         case JTOK_KW_NULL:\n         case JTOK_KW_TRUE:\n         case JTOK_KW_FALSE: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal;\n             switch (tok) {\n             case JTOK_KW_NULL:\n@@ -388,6 +390,11 @@ bool UniValue::read(const char *raw)\n             default: /* impossible */ break;\n             }\n \n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -396,10 +403,12 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_NUMBER: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal(VNUM, tokenVal);\n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -408,17 +417,18 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n             if (expect(OBJ_NAME)) {\n+                UniValue *top = stack.back();\n                 top->keys.push_back(tokenVal);\n                 clearExpect(OBJ_NAME);\n                 setExpect(COLON);\n             } else {\n                 UniValue tmpVal(VSTR, tokenVal);\n+                if (!stack.size()) {\n+                    *this = tmpVal;\n+                    break;\n+                }\n+                UniValue *top = stack.back();\n                 top->values.push_back(tmpVal);\n             }\n \n@@ -432,7 +442,7 @@ bool UniValue::read(const char *raw)\n     } while (!stack.empty ());\n \n     /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n+    tok = getJsonToken(tokenVal, consumed, raw, end);\n     if (tok != JTOK_NONE)\n         return false;\n "
      },
      {
        "sha": "20d40430095841a460adef8d3c60a56746785b24",
        "filename": "src/univalue/lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_utffilter.h?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -46,27 +46,27 @@ class JSONUTF8StringFilter\n         }\n     }\n     // Write codepoint directly, possibly collating surrogate pairs\n-    void push_back_u(unsigned int codepoint)\n+    void push_back_u(unsigned int codepoint_)\n     {\n         if (state) // Only accept full codepoints in open state\n             is_valid = false;\n-        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+        if (codepoint_ >= 0xD800 && codepoint_ < 0xDC00) { // First half of surrogate pair\n             if (surpair) // Two subsequent surrogate pair openers - fail\n                 is_valid = false;\n             else\n-                surpair = codepoint;\n-        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+                surpair = codepoint_;\n+        } else if (codepoint_ >= 0xDC00 && codepoint_ < 0xE000) { // Second half of surrogate pair\n             if (surpair) { // Open surrogate pair, expect second half\n                 // Compute code point from UTF-16 surrogate pair\n-                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint_ - 0xDC00));\n                 surpair = 0;\n             } else // Second half doesn't follow a first half - fail\n                 is_valid = false;\n         } else {\n             if (surpair) // First half of surrogate pair not followed by second - fail\n                 is_valid = false;\n             else\n-                append_codepoint(codepoint);\n+                append_codepoint(codepoint_);\n         }\n     }\n     // Check that we're in a state where the string can be ended\n@@ -96,22 +96,22 @@ class JSONUTF8StringFilter\n     //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n     unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n \n-    void append_codepoint(unsigned int codepoint)\n+    void append_codepoint(unsigned int codepoint_)\n     {\n-        if (codepoint <= 0x7f)\n-            str.push_back((char)codepoint);\n-        else if (codepoint <= 0x7FF) {\n-            str.push_back((char)(0xC0 | (codepoint >> 6)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0xFFFF) {\n-            str.push_back((char)(0xE0 | (codepoint >> 12)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0x1FFFFF) {\n-            str.push_back((char)(0xF0 | (codepoint >> 18)));\n-            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        if (codepoint_ <= 0x7f)\n+            str.push_back((char)codepoint_);\n+        else if (codepoint_ <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint_ >> 6)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint_ >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint_ >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n         }\n     }\n };"
      },
      {
        "sha": "cf27835991162b2a1e7c0053223f36ea26eaa589",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -79,8 +79,6 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n         s += values[i].write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1)) {\n             s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n         }\n         if (prettyIndent)\n             s += \"\\n\";"
      },
      {
        "sha": "7b27cf0da2901bf1438b00efc277d19d7bd6643f",
        "filename": "src/univalue/test/.gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -1,4 +1,8 @@\n+\n+object\n unitester\n+test_json\n+no_nul\n \n *.trs\n *.log"
      },
      {
        "sha": "8feb01a6d0db2a3db29889a623b00ba51d51490b",
        "filename": "src/univalue/test/fail1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -1 +1 @@\n-\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file\n+\"This is a string that never ends, yes it goes on and on, my friends."
      },
      {
        "sha": "9c7565adbddf645df5edfbdcd630c7a0f94aa2eb",
        "filename": "src/univalue/test/fail42.json",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail42.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail42.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail42.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc"
      },
      {
        "sha": "80edceddf1ef6c90cee1e9f979a0d31b1630bca4",
        "filename": "src/univalue/test/fail44.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail44.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/fail44.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail44.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+\"This file ends without a newline or close-quote.\n\\ No newline at end of file"
      },
      {
        "sha": "83d292200bf875126f7a25f1c5b032beec9ed6dd",
        "filename": "src/univalue/test/no_nul.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/no_nul.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/no_nul.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/no_nul.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,8 @@\n+#include \"univalue.h\"\n+\n+int main (int argc, char *argv[])\n+{\n+    char buf[] = \"___[1,2,3]___\";\n+    UniValue val;\n+    return val.read(buf + 3, 7) ? 0 : 1;\n+}"
      },
      {
        "sha": "02446292a1aa4a3a76a2f7a1ed7f1a22cc138a56",
        "filename": "src/univalue/test/object.cpp",
        "status": "added",
        "additions": 395,
        "deletions": 0,
        "changes": 395,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,395 @@\n+// Copyright (c) 2014 BitPay Inc.\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include <cassert>\n+#include <stdexcept>\n+#include <univalue.h>\n+\n+#define BOOST_FIXTURE_TEST_SUITE(a, b)\n+#define BOOST_AUTO_TEST_CASE(funcName) void funcName()\n+#define BOOST_AUTO_TEST_SUITE_END()\n+#define BOOST_CHECK(expr) assert(expr)\n+#define BOOST_CHECK_EQUAL(v1, v2) assert((v1) == (v2))\n+#define BOOST_CHECK_THROW(stmt, excMatch) { \\\n+        try { \\\n+            (stmt); \\\n+        } catch (excMatch & e) { \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+#define BOOST_CHECK_NO_THROW(stmt) { \\\n+        try { \\\n+            (stmt); \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    std::string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_typecheck)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.setNumStr(\"1\"));\n+    BOOST_CHECK(v1.isNum());\n+    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n+\n+    UniValue v2;\n+    BOOST_CHECK(v2.setBool(true));\n+    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n+    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n+\n+    UniValue v3;\n+    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n+    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n+    BOOST_CHECK(v3.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n+\n+    UniValue v4;\n+    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n+    BOOST_CHECK(v4.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n+    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n+    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n+\n+    UniValue v5;\n+    BOOST_CHECK(v5.read(\"[true, 10]\"));\n+    BOOST_CHECK_NO_THROW(v5.get_array());\n+    std::vector<UniValue> vals = v5.getValues();\n+    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n+\n+    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK(v.isNull());\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_array)\n+{\n+    UniValue arr(UniValue::VARR);\n+\n+    UniValue v((int64_t)1023LL);\n+    BOOST_CHECK(arr.push_back(v));\n+\n+    std::string vStr(\"zippy\");\n+    BOOST_CHECK(arr.push_back(vStr));\n+\n+    const char *s = \"pippy\";\n+    BOOST_CHECK(arr.push_back(s));\n+\n+    std::vector<UniValue> vec;\n+    v.setStr(\"boing\");\n+    vec.push_back(v);\n+\n+    v.setStr(\"going\");\n+    vec.push_back(v);\n+\n+    BOOST_CHECK(arr.push_backV(vec));\n+\n+    BOOST_CHECK(arr.push_back((uint64_t) 400ULL));\n+    BOOST_CHECK(arr.push_back((int64_t) -400LL));\n+    BOOST_CHECK(arr.push_back((int) -401));\n+    BOOST_CHECK(arr.push_back(-40.1));\n+\n+    BOOST_CHECK_EQUAL(arr.empty(), false);\n+    BOOST_CHECK_EQUAL(arr.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n+    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n+    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n+    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n+    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n+    BOOST_CHECK_EQUAL(arr[5].getValStr(), \"400\");\n+    BOOST_CHECK_EQUAL(arr[6].getValStr(), \"-400\");\n+    BOOST_CHECK_EQUAL(arr[7].getValStr(), \"-401\");\n+    BOOST_CHECK_EQUAL(arr[8].getValStr(), \"-40.1\");\n+\n+    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n+\n+    arr.clear();\n+    BOOST_CHECK(arr.empty());\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_object)\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    std::string strKey, strVal;\n+    UniValue v;\n+\n+    strKey = \"age\";\n+    v.setInt(100);\n+    BOOST_CHECK(obj.pushKV(strKey, v));\n+\n+    strKey = \"first\";\n+    strVal = \"John\";\n+    BOOST_CHECK(obj.pushKV(strKey, strVal));\n+\n+    strKey = \"last\";\n+    const char *cVal = \"Smith\";\n+    BOOST_CHECK(obj.pushKV(strKey, cVal));\n+\n+    strKey = \"distance\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n+\n+    strKey = \"time\";\n+    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n+\n+    strKey = \"calories\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n+\n+    strKey = \"temperature\";\n+    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n+\n+    UniValue obj2(UniValue::VOBJ);\n+    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n+    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n+\n+    BOOST_CHECK(obj.pushKVs(obj2));\n+\n+    BOOST_CHECK_EQUAL(obj.empty(), false);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n+    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n+    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n+    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n+    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n+    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n+    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n+    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n+\n+    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n+\n+    BOOST_CHECK(obj.exists(\"age\"));\n+    BOOST_CHECK(obj.exists(\"first\"));\n+    BOOST_CHECK(obj.exists(\"last\"));\n+    BOOST_CHECK(obj.exists(\"distance\"));\n+    BOOST_CHECK(obj.exists(\"time\"));\n+    BOOST_CHECK(obj.exists(\"calories\"));\n+    BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"cat1\"));\n+    BOOST_CHECK(obj.exists(\"cat2\"));\n+\n+    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n+\n+    std::map<std::string, UniValue::VType> objTypes;\n+    objTypes[\"age\"] = UniValue::VNUM;\n+    objTypes[\"first\"] = UniValue::VSTR;\n+    objTypes[\"last\"] = UniValue::VSTR;\n+    objTypes[\"distance\"] = UniValue::VNUM;\n+    objTypes[\"time\"] = UniValue::VNUM;\n+    objTypes[\"calories\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"cat1\"] = UniValue::VNUM;\n+    objTypes[\"cat2\"] = UniValue::VNUM;\n+    BOOST_CHECK(obj.checkObject(objTypes));\n+\n+    objTypes[\"cat2\"] = UniValue::VSTR;\n+    BOOST_CHECK(!obj.checkObject(objTypes));\n+\n+    obj.clear();\n+    BOOST_CHECK(obj.empty());\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n+    BOOST_CHECK_EQUAL(obj.getType(), UniValue::VNULL);\n+\n+    BOOST_CHECK_EQUAL(obj.setObject(), true);\n+    UniValue uv;\n+    uv.setInt(42);\n+    obj.__pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"42\");\n+\n+    uv.setInt(43);\n+    obj.pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"43\");\n+\n+    obj.pushKV(\"name\", \"foo bar\");\n+\n+    std::map<std::string,UniValue> kv;\n+    obj.getObjMap(kv);\n+    BOOST_CHECK_EQUAL(kv[\"age\"].getValStr(), \"43\");\n+    BOOST_CHECK_EQUAL(kv[\"name\"].getValStr(), \"foo bar\");\n+\n+}\n+\n+static const char *json1 =\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n+\n+BOOST_AUTO_TEST_CASE(univalue_readwrite)\n+{\n+    UniValue v;\n+    BOOST_CHECK(v.read(json1));\n+\n+    std::string strJson1(json1);\n+    BOOST_CHECK(v.read(strJson1));\n+\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n+\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n+\n+    UniValue obj = v[1];\n+    BOOST_CHECK(obj.isObject());\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n+\n+    BOOST_CHECK(obj[\"key1\"].isStr());\n+    std::string correctValue(\"str\");\n+    correctValue.push_back('\\0');\n+    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), correctValue);\n+    BOOST_CHECK(obj[\"key2\"].isNum());\n+    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n+    BOOST_CHECK(obj[\"key3\"].isObject());\n+\n+    BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+int main (int argc, char *argv[])\n+{\n+    univalue_constructor();\n+    univalue_typecheck();\n+    univalue_set();\n+    univalue_array();\n+    univalue_object();\n+    univalue_readwrite();\n+    return 0;\n+}\n+"
      },
      {
        "sha": "7182dc2f9b8e47dbcbbaa2e18a47a44f424d491f",
        "filename": "src/univalue/test/round3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round3.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+\"abcdefghijklmnopqrstuvwxyz\""
      },
      {
        "sha": "7f8f011eb73d6043d2e6db9d2c101195ae2801f2",
        "filename": "src/univalue/test/round4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round4.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+7"
      },
      {
        "sha": "27ba77ddaf61532f217964734769a42cdabc17dc",
        "filename": "src/univalue/test/round5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round5.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+true"
      },
      {
        "sha": "c508d5366f70bba37fcc09d128b6537c4adb2c79",
        "filename": "src/univalue/test/round6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round6.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+false"
      },
      {
        "sha": "19765bd501b636fce433540d9e6735f51d66151d",
        "filename": "src/univalue/test/round7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/round7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round7.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1 @@\n+null"
      },
      {
        "sha": "2943bae2b15e928e345af49b5802e7241058a1b5",
        "filename": "src/univalue/test/test_json.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/test_json.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/test_json.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/test_json.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -0,0 +1,24 @@\n+// Test program that can be called by the JSON test suite at\n+// https://github.com/nst/JSONTestSuite.\n+//\n+// It reads JSON input from stdin and exits with code 0 if it can be parsed\n+// successfully. It also pretty prints the parsed JSON value to stdout.\n+\n+#include <iostream>\n+#include <string>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+int main (int argc, char *argv[])\n+{\n+    UniValue val;\n+    if (val.read(string(istreambuf_iterator<char>(cin),\n+                        istreambuf_iterator<char>()))) {\n+        cout << val.write(1 /* prettyIndent */, 4 /* indentLevel */) << endl;\n+        return 0;\n+    } else {\n+        cerr << \"JSON Parse Error.\" << endl;\n+        return 1;\n+    }\n+}"
      },
      {
        "sha": "2c37794a4bdb8fb77fa02d5cbb90291033ef2af4",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -113,6 +113,8 @@ static const char *filenames[] = {\n         \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n         \"fail40.json\",               // invalid unicode: broken UTF-8\n         \"fail41.json\",               // invalid unicode: unfinished UTF-8\n+        \"fail42.json\",               // valid json with garbage following a nul byte\n+        \"fail44.json\",               // unterminated string\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -125,6 +127,11 @@ static const char *filenames[] = {\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n         \"round2.json\",              // unicode\n+        \"round3.json\",              // bare string\n+        \"round4.json\",              // bare number\n+        \"round5.json\",              // bare true\n+        \"round6.json\",              // bare false\n+        \"round7.json\",              // bare null\n };\n \n // Test \\u handling"
      },
      {
        "sha": "de647f98b6cf0727111c11609d2dce25a40905ef",
        "filename": "test/util/data/tt-delin1-out.json",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delin1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delin1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-delin1-out.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,\n@@ -200,7 +200,7 @@\n                     \"1E7SGgAZFCHDnVZLuRViX3gUmxpMfdvd2o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.01000001,\n             \"n\": 1,"
      },
      {
        "sha": "067ffe74e791d2d58fd43eeed88cb94cefb4b1d3",
        "filename": "test/util/data/tt-delout1-out.json",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delout1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-delout1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-delout1-out.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a72ec96bd0d022d1b0c2f9078cdd46b3725b8eecdd001e17b21e3ababad14ecb\",\n             \"vout\": 0,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"493046022100a9b617843b68c284715d3e02fd120479cd0d96a6c43bf01e697fb0a460a21a3a022100ba0a12fbe8b993d4e7911fa3467615765dbe421ddf5c51b57a9c1ee19dcc00ba012103e633b4fa4ceb705c2da712390767199be8ef2448b3095dc01652e11b2b751505\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -185,7 +185,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,"
      },
      {
        "sha": "af7903d1dd915fb05b5a17aeac25a98ffc708d7a",
        "filename": "test/util/data/tt-locktime317000-out.json",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-locktime317000-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/tt-locktime317000-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-locktime317000-out.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a72ec96bd0d022d1b0c2f9078cdd46b3725b8eecdd001e17b21e3ababad14ecb\",\n             \"vout\": 0,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"493046022100a9b617843b68c284715d3e02fd120479cd0d96a6c43bf01e697fb0a460a21a3a022100ba0a12fbe8b993d4e7911fa3467615765dbe421ddf5c51b57a9c1ee19dcc00ba012103e633b4fa4ceb705c2da712390767199be8ef2448b3095dc01652e11b2b751505\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -185,7 +185,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,\n@@ -209,7 +209,7 @@\n                     \"1E7SGgAZFCHDnVZLuRViX3gUmxpMfdvd2o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.01000001,\n             \"n\": 1,"
      },
      {
        "sha": "83a86649e0dd43814b46bf03cf86ed1ddc50732f",
        "filename": "test/util/data/txcreate1.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreate1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreate1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreate1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"bf829c6bcf84579331337659d31f89dfd138f7f7785802d5501c92333145ca7c\",\n             \"vout\": 18,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc\",\n             \"vout\": 1,\n@@ -47,7 +47,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 4.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "15a4246ae5717e117c12c8c3c220ab842a517562",
        "filename": "test/util/data/txcreatedata1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -29,7 +29,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 4.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "cb93c27971fd74cb06dc2d220b34835fdf9c31cf",
        "filename": "test/util/data/txcreatedata2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata2.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -29,7 +29,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "dea48ba3731df983da0690cf8b5e5d0d893fae0b",
        "filename": "test/util/data/txcreatedata_seq1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata_seq1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatedata_seq1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata_seq1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967293\n-        }, \n+        },\n         {\n             \"txid\": \"5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f\",\n             \"vout\": 0,"
      },
      {
        "sha": "72e20c869123be493927817e27d492c8f75cf5b5",
        "filename": "test/util/data/txcreatemultisig1.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatemultisig1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaeeb0d3e777d991c7cfee983bea369c109f5cc/test/util/data/txcreatemultisig1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig1.json?ref=faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "patch": "@@ -17,8 +17,8 @@\n                 \"reqSigs\": 2,\n                 \"type\": \"multisig\",\n                 \"addresses\": [\n-                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\", \n-                    \"1FXtz9KU8JNmQDyHdiEm5HDiALuP3zdHvV\", \n+                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\",\n+                    \"1FXtz9KU8JNmQDyHdiEm5HDiALuP3zdHvV\",\n                     \"14LuavcBbXZYJ6Tsz3cAUQj9SuQoL2xCQX\"\n                 ]\n             }"
      }
    ]
  },
  {
    "sha": "93d20a734d2ee873832bed8ca5c05cf8e539c53c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2QyMGE3MzRkMmVlODczODMyYmVkOGNhNWMwNWNmOGU1MzljNTNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T13:07:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T13:07:57Z"
      },
      "message": "Merge #11309: Minor cleanups for AcceptToMemoryPool\n\nbf64c3cb3 Ignore transactions added to mempool during a reorg for fee estimation purposes. (Alex Morcos)\n04f78ab5b Do not reject based on mempool min fee when bypass_limits is set. (Alex Morcos)\nfd849e1b0 Change AcceptToMemoryPool function signature (Alex Morcos)\n\nPull request description:\n\n  First commit just removes default arguments from `AcceptToMemoryPool` and consolidates two arguments, it does not change behavior.\n\n  Second commit finally fixes the fact that we're not meant to reject based on mempool min fee when adding a transaction from a disconnected block during a reorg as mentioned [here](https://github.com/bitcoin/bitcoin/pull/9602#issue-202197849)\n\n  Third commit makes fee estimation ignore transactions added from a disconnected block during a reorg. I think this was another source of fee estimates returning estimates below 1000 sat/kB as in #11303.\n\nTree-SHA512: 30925ca8b341915bb214f1d2590b36b7931f2e125b7660150e38ae70338f00db5aa7f1608546dddb181446924177eb7cf62ea8bd2583068acc074d6c3f86bc0c",
      "tree": {
        "sha": "1e1fd330de591b6564e82dadf3c2c82625fb3e04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e1fd330de591b6564e82dadf3c2c82625fb3e04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93d20a734d2ee873832bed8ca5c05cf8e539c53c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZzkWtAAoJENLqSFDnUoslvKgP/2BTEtJ3G5I/0A8WNh+dwf4e\nPl9Q/QyyPVk2Jmi9cXD0+mzEH1ZmfAcOkozJJn8RZ7TVg39GudNlZWb08lK5FW+t\nWfcKWIiJPWzu9WDCpTrCW64nNbEYW7yJMMd0ZK6tjS4Grlk9GiODDH2ndJEZnoo3\nTQ2GhJE8/9OCS8h7tqmScGo4CHbYImyzK6ct2t42O32CmSbVJEpXEB9lwVh3jq3C\nAeWodw1A0iUOB1t/2ShZ2DscrbiIQkMyMS53BPTYc7XESqCfPB23qo/bqDNbyD9j\nLiT9RnNQINNLyujGhF7Dinq0AK0/jWY8lecZeoN7qU7VyqFJtkj0ixIbgamSrFxc\nUVyEa5ygQoZ8qRDxErqk30zJZ0I5eohRl4sSWnizgYcB/oAT5TwVDfscvORc1Axu\nhdgj/AQeu0ZNLYyz6+O+uPlQlor1x9l/MpeVJqd8wsiFueE6Qlf/PdWk0dhPBrTv\n4Tj58ZhmjUPQrETRhIs7Z6wou9Nmenm3/pOzdiEtjNuWy14OkWCf/dOIiRrYibXT\nXGS+A0wXs19Bs0t+t1ik00s+hWZnMIFv0O0CG8n/ap/m3Hse4N6Oe92uESkESVUc\nf5iywS/Pa3E1l6QAQPBkgiYbcwquNzLYflUnkeC759EFOKXeDtORnwYHGMBdBeWm\n0iS1qtej/G3KjpZFopx2\n=EsWW\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e1fd330de591b6564e82dadf3c2c82625fb3e04\nparent bbc901d3a683c92438a6b28dca50b956decc4433\nparent bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c\nauthor MarcoFalke <falke.marco@gmail.com> 1506690468 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506690477 +0200\n\nMerge #11309: Minor cleanups for AcceptToMemoryPool\n\nbf64c3cb3 Ignore transactions added to mempool during a reorg for fee estimation purposes. (Alex Morcos)\n04f78ab5b Do not reject based on mempool min fee when bypass_limits is set. (Alex Morcos)\nfd849e1b0 Change AcceptToMemoryPool function signature (Alex Morcos)\n\nPull request description:\n\n  First commit just removes default arguments from `AcceptToMemoryPool` and consolidates two arguments, it does not change behavior.\n\n  Second commit finally fixes the fact that we're not meant to reject based on mempool min fee when adding a transaction from a disconnected block during a reorg as mentioned [here](https://github.com/bitcoin/bitcoin/pull/9602#issue-202197849)\n\n  Third commit makes fee estimation ignore transactions added from a disconnected block during a reorg. I think this was another source of fee estimates returning estimates below 1000 sat/kB as in #11303.\n\nTree-SHA512: 30925ca8b341915bb214f1d2590b36b7931f2e125b7660150e38ae70338f00db5aa7f1608546dddb181446924177eb7cf62ea8bd2583068acc074d6c3f86bc0c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d20a734d2ee873832bed8ca5c05cf8e539c53c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93d20a734d2ee873832bed8ca5c05cf8e539c53c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d20a734d2ee873832bed8ca5c05cf8e539c53c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc901d3a683c92438a6b28dca50b956decc4433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc901d3a683c92438a6b28dca50b956decc4433"
      },
      {
        "sha": "bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 34,
      "deletions": 27
    },
    "files": [
      {
        "sha": "7fced41d4fa70b4ccd86f2f142d6ee10024658bd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "patch": "@@ -1788,7 +1788,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs, &lRemovedTxn)) {\n+        if (!AlreadyHave(inv) &&\n+            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -1826,7 +1827,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2, &lRemovedTxn)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n                         LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {"
      },
      {
        "sha": "d860dbc24457d3f6fcbcd5aec9f68ee1fa107099",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "patch": "@@ -942,8 +942,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        bool fLimitFree = true;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, nullptr, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "82ca93e7dae369b804ca9efa7a1ffee11908dae8",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "patch": "@@ -29,7 +29,8 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, nullptr, nullptr, true, 0);\n+    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr /* pfMissingInputs */,\n+                              nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "a958afe84fd2967ae1f387af9a5f283de9812c0f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "patch": "@@ -384,7 +384,9 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, *it, false, nullptr, nullptr, true)) {\n+        if (!fAddToMempool || (*it)->IsCoinBase() ||\n+            !AcceptToMemoryPool(mempool, stateDummy, *it, nullptr /* pfMissingInputs */,\n+                                nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -443,9 +445,9 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n     return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n }\n \n-static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -618,12 +620,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n+        if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n+        if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n         }\n \n@@ -855,17 +857,18 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n         pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n-        // This transaction should only count for fee estimation if it isn't a\n-        // BIP 125 replacement transaction (may not be widely supported), the\n-        // node is not behind, and the transaction is not dependent on any other\n-        // transactions in the mempool.\n-        bool validForFeeEstimation = !fReplacementTransaction && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n+        // This transaction should only count for fee estimation if:\n+        // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n+        // - it's not being readded during a reorg which bypasses typical mempool fee limits\n+        // - the node is not behind\n+        // - the transaction is not dependent on any other transactions in the mempool\n+        bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);\n \n         // trim mempool and check if tx was trimmed\n-        if (!fOverrideMempoolLimit) {\n+        if (!bypass_limits) {\n             LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n@@ -878,12 +881,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n }\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, coins_to_uncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -894,12 +897,12 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -4306,7 +4309,8 @@ bool LoadMempool(void)\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, nullptr, nTime, nullptr, false, 0);\n+                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n+                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "c7ef556b473797b46f03acb92971fbcb353acf99",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "patch": "@@ -301,9 +301,9 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = nullptr,\n-                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n+                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n+                        bool bypass_limits, const CAmount nAbsurdFee);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "b774305a34f3730a6c07fd55d29f52900dcb04dc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d20a734d2ee873832bed8ca5c05cf8e539c53c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "patch": "@@ -4047,5 +4047,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, true, nullptr, nullptr, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n }"
      }
    ]
  },
  {
    "sha": "fd86f998fcfd25d823d67a2920814e22445655f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDg2Zjk5OGZjZmQyNWQ4MjNkNjdhMjkyMDgxNGUyMjQ0NTY1NWY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T14:00:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T14:00:20Z"
      },
      "message": "Squashed 'src/secp256k1/' changes from 84973d393..0b7024185\n\n0b7024185 Merge #474: Fix header guards using reserved identifiers\nab1f89f00 Merge #478: Fixed multiple typos\n8c7ea22d5 Fixed multiple typos\nabe2d3e84 Fix header guards using reserved identifiers\nf532bdc9f Merge #459: Add pubkey prefix constants to include/secp256k1.h\ncac7c5559 Merge #470: Fix wnaf_const documentation\n768514bac Fix wnaf_const documentation with respect to return value and number of words set\nb8c26a399 Merge #458: Fix typo in API documentation\n817fb2013 Merge #440: Fix typos\n12230f90e Merge #468: Remove redundant conditional expression\n2e1ccdca0 Remove redundant conditional expression\nbc61b91ac add pubkey prefix constants to include/secp256k1.h\nb0452e664 Fix typo in API documentation\n4c0f32ed5 Fix typo: \"Agressive\" \u2192 \"Aggressive\"\n73aca8364 Fix typo: \"exectured\" \u2192 \"executed\"\n\ngit-subtree-dir: src/secp256k1\ngit-subtree-split: 0b7024185045a49a1a6a4c5615bf31c94f63d9c4",
      "tree": {
        "sha": "af619602c243e0d8fbd5934f375faa4aedb4ca6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af619602c243e0d8fbd5934f375faa4aedb4ca6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd86f998fcfd25d823d67a2920814e22445655f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd86f998fcfd25d823d67a2920814e22445655f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd86f998fcfd25d823d67a2920814e22445655f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd86f998fcfd25d823d67a2920814e22445655f9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7c1b4490f2c559b050b8255df2d347dd0e4945f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7c1b4490f2c559b050b8255df2d347dd0e4945f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7c1b4490f2c559b050b8255df2d347dd0e4945f"
      }
    ],
    "stats": {
      "total": 365,
      "additions": 187,
      "deletions": 178
    },
    "files": [
      {
        "sha": "7eaf63bf6a0ee44ec22be25bf9bbb100c551be1f",
        "filename": "contrib/lax_der_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/contrib/lax_der_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/contrib/lax_der_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/lax_der_parsing.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -48,14 +48,14 @@\n  *   8.3.1.\n  */\n \n-#ifndef _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n-#define _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n+#ifndef SECP256K1_CONTRIB_LAX_DER_PARSING_H\n+#define SECP256K1_CONTRIB_LAX_DER_PARSING_H\n \n #include <secp256k1.h>\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Parse a signature in \"lax DER\" format\n  *\n@@ -88,4 +88,4 @@ int ecdsa_signature_parse_der_lax(\n }\n #endif\n \n-#endif\n+#endif /* SECP256K1_CONTRIB_LAX_DER_PARSING_H */"
      },
      {
        "sha": "fece261fb9ed2b24df692cb059338f9f91aece6e",
        "filename": "contrib/lax_der_privatekey_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/contrib/lax_der_privatekey_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/contrib/lax_der_privatekey_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/lax_der_privatekey_parsing.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -25,14 +25,14 @@\n  * library are sufficient.\n  */\n \n-#ifndef _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n-#define _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n+#ifndef SECP256K1_CONTRIB_BER_PRIVATEKEY_H\n+#define SECP256K1_CONTRIB_BER_PRIVATEKEY_H\n \n #include <secp256k1.h>\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Export a private key in DER format.\n  *\n@@ -87,4 +87,4 @@ SECP256K1_WARN_UNUSED_RESULT int ec_privkey_import_der(\n }\n #endif\n \n-#endif\n+#endif /* SECP256K1_CONTRIB_BER_PRIVATEKEY_H */"
      },
      {
        "sha": "3e9c098d19f6a043f5f2fc0f9f1e05245487e0cd",
        "filename": "include/secp256k1.h",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/secp256k1.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -1,9 +1,9 @@\n-#ifndef _SECP256K1_\n-# define _SECP256K1_\n+#ifndef SECP256K1_H\n+#define SECP256K1_H\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n #include <stddef.h>\n \n@@ -61,7 +61,7 @@ typedef struct {\n  *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n  *  If you need to convert to a format suitable for storage, transmission, or\n  *  comparison, use the secp256k1_ecdsa_signature_serialize_* and\n- *  secp256k1_ecdsa_signature_serialize_* functions.\n+ *  secp256k1_ecdsa_signature_parse_* functions.\n  */\n typedef struct {\n     unsigned char data[64];\n@@ -159,6 +159,13 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n #define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n+/** Prefix byte used to tag various encoded curvepoints for specific purposes */\n+#define SECP256K1_TAG_PUBKEY_EVEN 0x02\n+#define SECP256K1_TAG_PUBKEY_ODD 0x03\n+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED 0x04\n+#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN 0x06\n+#define SECP256K1_TAG_PUBKEY_HYBRID_ODD 0x07\n+\n /** Create a secp256k1 context object.\n  *\n  *  Returns: a newly created context object.\n@@ -607,8 +614,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_combine(\n     size_t n\n ) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_H */"
      },
      {
        "sha": "88492dc1a40bcf4f907a97c88d892d9e9122107d",
        "filename": "include/secp256k1_ecdh.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/include/secp256k1_ecdh.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/include/secp256k1_ecdh.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/secp256k1_ecdh.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -1,11 +1,11 @@\n-#ifndef _SECP256K1_ECDH_\n-# define _SECP256K1_ECDH_\n+#ifndef SECP256K1_ECDH_H\n+#define SECP256K1_ECDH_H\n \n-# include \"secp256k1.h\"\n+#include \"secp256k1.h\"\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Compute an EC Diffie-Hellman secret in constant time\n  *  Returns: 1: exponentiation was successful\n@@ -24,8 +24,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdh(\n   const unsigned char *privkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_ECDH_H */"
      },
      {
        "sha": "cf6c5ed7f5e3db97507ed3d68dee95081abe3ddb",
        "filename": "include/secp256k1_recovery.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/include/secp256k1_recovery.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/include/secp256k1_recovery.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/secp256k1_recovery.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -1,11 +1,11 @@\n-#ifndef _SECP256K1_RECOVERY_\n-# define _SECP256K1_RECOVERY_\n+#ifndef SECP256K1_RECOVERY_H\n+#define SECP256K1_RECOVERY_H\n \n-# include \"secp256k1.h\"\n+#include \"secp256k1.h\"\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Opaque data structured that holds a parsed ECDSA signature,\n  *  supporting pubkey recovery.\n@@ -103,8 +103,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover(\n     const unsigned char *msg32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_RECOVERY_H */"
      },
      {
        "sha": "8521f07999322d709c4232b3649d39b54be19307",
        "filename": "sage/group_prover.sage",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/sage/group_prover.sage?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -3,7 +3,7 @@\n # to independently set assumptions on input or intermediary variables.\n #\n # The general approach is:\n-# * A constraint is a tuple of two sets of of symbolic expressions:\n+# * A constraint is a tuple of two sets of symbolic expressions:\n #   the first of which are required to evaluate to zero, the second of which\n #   are required to evaluate to nonzero.\n #   - A constraint is said to be conflicting if any of its nonzero expressions\n@@ -17,7 +17,7 @@\n #   - A constraint describing the requirements of the law, called \"require\"\n # * Implementations are transliterated into functions that operate as well on\n #   algebraic input points, and are called once per combination of branches\n-#   exectured. Each execution returns:\n+#   executed. Each execution returns:\n #   - A constraint describing the assumptions this implementation requires\n #     (such as Z1=1), called \"assumeFormula\"\n #   - A constraint describing the assumptions this specific branch requires,"
      },
      {
        "sha": "5a9cc3ffcfdaf200779eea6082b5168e8311211c",
        "filename": "src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asm/field_10x26_arm.s?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -11,7 +11,7 @@ Note:\n \n - To avoid unnecessary loads and make use of available registers, two\n   'passes' have every time been interleaved, with the odd passes accumulating c' and d' \n-  which will be added to c and d respectively in the the even passes\n+  which will be added to c and d respectively in the even passes\n \n */\n \n@@ -23,7 +23,7 @@ Note:\n \t.eabi_attribute 10, 0 @ Tag_FP_arch = none\n \t.eabi_attribute 24, 1 @ Tag_ABI_align_needed = 8-byte\n \t.eabi_attribute 25, 1 @ Tag_ABI_align_preserved = 8-byte, except leaf SP\n-\t.eabi_attribute 30, 2 @ Tag_ABI_optimization_goals = Agressive Speed\n+\t.eabi_attribute 30, 2 @ Tag_ABI_optimization_goals = Aggressive Speed\n \t.eabi_attribute 34, 1 @ Tag_CPU_unaligned_access = v6\n \t.text\n "
      },
      {
        "sha": "fc588061ca40cdcc30151f5b7e17bc83b4a7125e",
        "filename": "src/basic-config.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/basic-config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/basic-config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/basic-config.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_BASIC_CONFIG_\n-#define _SECP256K1_BASIC_CONFIG_\n+#ifndef SECP256K1_BASIC_CONFIG_H\n+#define SECP256K1_BASIC_CONFIG_H\n \n #ifdef USE_BASIC_CONFIG\n \n@@ -28,5 +28,6 @@\n #define USE_FIELD_10X26 1\n #define USE_SCALAR_8X32 1\n \n-#endif // USE_BASIC_CONFIG\n-#endif // _SECP256K1_BASIC_CONFIG_\n+#endif /* USE_BASIC_CONFIG */\n+\n+#endif /* SECP256K1_BASIC_CONFIG_H */"
      },
      {
        "sha": "d5ebe01301b81457cc3db630687458046b70af22",
        "filename": "src/bench.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_BENCH_H_\n-#define _SECP256K1_BENCH_H_\n+#ifndef SECP256K1_BENCH_H\n+#define SECP256K1_BENCH_H\n \n #include <stdio.h>\n #include <math.h>\n@@ -63,4 +63,4 @@ void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), v\n     printf(\"us\\n\");\n }\n \n-#endif\n+#endif /* SECP256K1_BENCH_H */"
      },
      {
        "sha": "80590c7cc862db786aac61092753b78057d89ecb",
        "filename": "src/ecdsa.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecdsa.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecdsa.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecdsa.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECDSA_\n-#define _SECP256K1_ECDSA_\n+#ifndef SECP256K1_ECDSA_H\n+#define SECP256K1_ECDSA_H\n \n #include <stddef.h>\n \n@@ -18,4 +18,4 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const\n static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar* r, const secp256k1_scalar* s, const secp256k1_ge *pubkey, const secp256k1_scalar *message);\n static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid);\n \n-#endif\n+#endif /* SECP256K1_ECDSA_H */"
      },
      {
        "sha": "c3400042d83935b6c3900ada179ebaaeb4afefa9",
        "filename": "src/ecdsa_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecdsa_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -5,8 +5,8 @@\n  **********************************************************************/\n \n \n-#ifndef _SECP256K1_ECDSA_IMPL_H_\n-#define _SECP256K1_ECDSA_IMPL_H_\n+#ifndef SECP256K1_ECDSA_IMPL_H\n+#define SECP256K1_ECDSA_IMPL_H\n \n #include \"scalar.h\"\n #include \"field.h\"\n@@ -81,8 +81,6 @@ static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned cha\n         return -1;\n     }\n     while (lenleft > 0) {\n-        if ((ret >> ((sizeof(size_t) - 1) * 8)) != 0) {\n-        }\n         ret = (ret << 8) | **sigp;\n         if (ret + lenleft > (size_t)(sigend - *sigp)) {\n             /* Result exceeds the length of the passed array. */\n@@ -312,4 +310,4 @@ static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, sec\n     return 1;\n }\n \n-#endif\n+#endif /* SECP256K1_ECDSA_IMPL_H */"
      },
      {
        "sha": "b621f1e6c39d93f0539d2090b326dcd4f26c61a3",
        "filename": "src/eckey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/eckey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/eckey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eckey.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECKEY_\n-#define _SECP256K1_ECKEY_\n+#ifndef SECP256K1_ECKEY_H\n+#define SECP256K1_ECKEY_H\n \n #include <stddef.h>\n \n@@ -22,4 +22,4 @@ static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx,\n static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak);\n static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak);\n \n-#endif\n+#endif /* SECP256K1_ECKEY_H */"
      },
      {
        "sha": "1ab9a68ec048c55a72e79674073e805e92487d63",
        "filename": "src/eckey_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/eckey_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/eckey_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eckey_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECKEY_IMPL_H_\n-#define _SECP256K1_ECKEY_IMPL_H_\n+#ifndef SECP256K1_ECKEY_IMPL_H\n+#define SECP256K1_ECKEY_IMPL_H\n \n #include \"eckey.h\"\n \n@@ -15,16 +15,17 @@\n #include \"ecmult_gen.h\"\n \n static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {\n-    if (size == 33 && (pub[0] == 0x02 || pub[0] == 0x03)) {\n+    if (size == 33 && (pub[0] == SECP256K1_TAG_PUBKEY_EVEN || pub[0] == SECP256K1_TAG_PUBKEY_ODD)) {\n         secp256k1_fe x;\n-        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == 0x03);\n+        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == SECP256K1_TAG_PUBKEY_ODD);\n     } else if (size == 65 && (pub[0] == 0x04 || pub[0] == 0x06 || pub[0] == 0x07)) {\n         secp256k1_fe x, y;\n         if (!secp256k1_fe_set_b32(&x, pub+1) || !secp256k1_fe_set_b32(&y, pub+33)) {\n             return 0;\n         }\n         secp256k1_ge_set_xy(elem, &x, &y);\n-        if ((pub[0] == 0x06 || pub[0] == 0x07) && secp256k1_fe_is_odd(&y) != (pub[0] == 0x07)) {\n+        if ((pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_EVEN || pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_ODD) &&\n+            secp256k1_fe_is_odd(&y) != (pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_ODD)) {\n             return 0;\n         }\n         return secp256k1_ge_is_valid_var(elem);\n@@ -42,10 +43,10 @@ static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *p\n     secp256k1_fe_get_b32(&pub[1], &elem->x);\n     if (compressed) {\n         *size = 33;\n-        pub[0] = 0x02 | (secp256k1_fe_is_odd(&elem->y) ? 0x01 : 0x00);\n+        pub[0] = secp256k1_fe_is_odd(&elem->y) ? SECP256K1_TAG_PUBKEY_ODD : SECP256K1_TAG_PUBKEY_EVEN;\n     } else {\n         *size = 65;\n-        pub[0] = 0x04;\n+        pub[0] = SECP256K1_TAG_PUBKEY_UNCOMPRESSED;\n         secp256k1_fe_get_b32(&pub[33], &elem->y);\n     }\n     return 1;\n@@ -96,4 +97,4 @@ static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx,\n     return 1;\n }\n \n-#endif\n+#endif /* SECP256K1_ECKEY_IMPL_H */"
      },
      {
        "sha": "6d44aba60b53b3ba6c3ad9e5cc67edce1faf4661",
        "filename": "src/ecmult.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_\n-#define _SECP256K1_ECMULT_\n+#ifndef SECP256K1_ECMULT_H\n+#define SECP256K1_ECMULT_H\n \n #include \"num.h\"\n #include \"group.h\"\n@@ -28,4 +28,4 @@ static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx\n /** Double multiply: R = na*A + ng*G */\n static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_H */"
      },
      {
        "sha": "72bf7d7582f15f9eb176bf215ea7622701481e08",
        "filename": "src/ecmult_const.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_const.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_const.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_const.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,12 +4,12 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_CONST_\n-#define _SECP256K1_ECMULT_CONST_\n+#ifndef SECP256K1_ECMULT_CONST_H\n+#define SECP256K1_ECMULT_CONST_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n \n static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *q);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_CONST_H */"
      },
      {
        "sha": "7d7a172b7b385d5eea8fb81e3b9ee785a8bef971",
        "filename": "src/ecmult_const_impl.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_const_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_const_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_const_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_CONST_IMPL_\n-#define _SECP256K1_ECMULT_CONST_IMPL_\n+#ifndef SECP256K1_ECMULT_CONST_IMPL_H\n+#define SECP256K1_ECMULT_CONST_IMPL_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -42,11 +42,12 @@\n } while(0)\n \n \n-/** Convert a number to WNAF notation. The number becomes represented by sum(2^{wi} * wnaf[i], i=0..return_val)\n- *  with the following guarantees:\n+/** Convert a number to WNAF notation.\n+ *  The number becomes represented by sum(2^{wi} * wnaf[i], i=0..WNAF_SIZE(w)+1) - return_val.\n+ *  It has the following guarantees:\n  *  - each wnaf[i] an odd integer between -(1 << w) and (1 << w)\n  *  - each wnaf[i] is nonzero\n- *  - the number of words set is returned; this is always (WNAF_BITS + w - 1) / w\n+ *  - the number of words set is always WNAF_SIZE(w) + 1\n  *\n  *  Adapted from `The Width-w NAF Method Provides Small Memory and Fast Elliptic Scalar\n  *  Multiplications Secure against Side Channel Attacks`, Okeya and Tagaki. M. Joye (Ed.)\n@@ -236,4 +237,4 @@ static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, cons\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_CONST_IMPL_H */"
      },
      {
        "sha": "7564b7015f0b79aaa49ac6f81656cc22e5f3f08f",
        "filename": "src/ecmult_gen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_gen.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_GEN_\n-#define _SECP256K1_ECMULT_GEN_\n+#ifndef SECP256K1_ECMULT_GEN_H\n+#define SECP256K1_ECMULT_GEN_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -40,4 +40,4 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context* ctx, secp25\n \n static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_GEN_H */"
      },
      {
        "sha": "9615b932dd5956562cdb521e62fd09ecdfec3fae",
        "filename": "src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_gen_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_GEN_IMPL_H_\n-#define _SECP256K1_ECMULT_GEN_IMPL_H_\n+#ifndef SECP256K1_ECMULT_GEN_IMPL_H\n+#define SECP256K1_ECMULT_GEN_IMPL_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -207,4 +207,4 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const\n     secp256k1_gej_clear(&gb);\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_GEN_IMPL_H */"
      },
      {
        "sha": "93d3794cb43488eac6b6ab231f067ff7f3db71c8",
        "filename": "src/ecmult_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_IMPL_H_\n-#define _SECP256K1_ECMULT_IMPL_H_\n+#ifndef SECP256K1_ECMULT_IMPL_H\n+#define SECP256K1_ECMULT_IMPL_H\n \n #include <string.h>\n \n@@ -403,4 +403,4 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_IMPL_H */"
      },
      {
        "sha": "bb6692ad57835498257a492028e1646d7cc584f5",
        "filename": "src/field.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_\n-#define _SECP256K1_FIELD_\n+#ifndef SECP256K1_FIELD_H\n+#define SECP256K1_FIELD_H\n \n /** Field element module.\n  *\n@@ -129,4 +129,4 @@ static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_f\n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n-#endif\n+#endif /* SECP256K1_FIELD_H */"
      },
      {
        "sha": "727c5267fbb5fc46894d7d9ca2b7bab5ab7eb10d",
        "filename": "src/field_10x26.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_10x26.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_10x26.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_10x26.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n+#ifndef SECP256K1_FIELD_REPR_H\n+#define SECP256K1_FIELD_REPR_H\n \n #include <stdint.h>\n \n@@ -44,4 +44,5 @@ typedef struct {\n \n #define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }}\n #define SECP256K1_FE_STORAGE_CONST_GET(d) d.n[7], d.n[6], d.n[5], d.n[4],d.n[3], d.n[2], d.n[1], d.n[0]\n-#endif\n+\n+#endif /* SECP256K1_FIELD_REPR_H */"
      },
      {
        "sha": "94f8132fc8e62bd3276c14d4ab910378a430d388",
        "filename": "src/field_10x26_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_10x26_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n+#ifndef SECP256K1_FIELD_REPR_IMPL_H\n+#define SECP256K1_FIELD_REPR_IMPL_H\n \n #include \"util.h\"\n #include \"num.h\"\n@@ -1158,4 +1158,4 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "bccd8feb4dde63dc0e9d2197fa5e9943882e2069",
        "filename": "src/field_5x52.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_5x52.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n+#ifndef SECP256K1_FIELD_REPR_H\n+#define SECP256K1_FIELD_REPR_H\n \n #include <stdint.h>\n \n@@ -44,4 +44,4 @@ typedef struct {\n     (d6) | (((uint64_t)(d7)) << 32) \\\n }}\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_H */"
      },
      {
        "sha": "1fc3171f6b0ed85323807c26dabbe883eb24355f",
        "filename": "src/field_5x52_asm_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52_asm_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52_asm_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_5x52_asm_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -11,8 +11,8 @@\n  * - December 2014, Pieter Wuille: converted from YASM to GCC inline assembly\n  */\n \n-#ifndef _SECP256K1_FIELD_INNER5X52_IMPL_H_\n-#define _SECP256K1_FIELD_INNER5X52_IMPL_H_\n+#ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n+#define SECP256K1_FIELD_INNER5X52_IMPL_H\n \n SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n /**\n@@ -499,4 +499,4 @@ __asm__ __volatile__(\n );\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_INNER5X52_IMPL_H */"
      },
      {
        "sha": "957c61b01451a0f09ee6499db45c0745180da3b4",
        "filename": "src/field_5x52_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_5x52_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n+#ifndef SECP256K1_FIELD_REPR_IMPL_H\n+#define SECP256K1_FIELD_REPR_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -493,4 +493,4 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "95a0d1791c0557fe65995c96acb26a1a1bae36cf",
        "filename": "src/field_5x52_int128_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52_int128_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_5x52_int128_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_5x52_int128_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_INNER5X52_IMPL_H_\n-#define _SECP256K1_FIELD_INNER5X52_IMPL_H_\n+#ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n+#define SECP256K1_FIELD_INNER5X52_IMPL_H\n \n #include <stdint.h>\n \n@@ -274,4 +274,4 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t\n     /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_INNER5X52_IMPL_H */"
      },
      {
        "sha": "20428648af31299921fa0dc250e6951912178ec8",
        "filename": "src/field_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_IMPL_H_\n-#define _SECP256K1_FIELD_IMPL_H_\n+#ifndef SECP256K1_FIELD_IMPL_H\n+#define SECP256K1_FIELD_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -312,4 +312,4 @@ static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_IMPL_H */"
      },
      {
        "sha": "ea1302deb8296eef824abed82ccad35dcab749cd",
        "filename": "src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/group.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_GROUP_\n-#define _SECP256K1_GROUP_\n+#ifndef SECP256K1_GROUP_H\n+#define SECP256K1_GROUP_H\n \n #include \"num.h\"\n #include \"field.h\"\n@@ -141,4 +141,4 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n-#endif\n+#endif /* SECP256K1_GROUP_H */"
      },
      {
        "sha": "b31b6c12efe336d0b866b95e58e1ecb4adef61af",
        "filename": "src/group_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/group_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_GROUP_IMPL_H_\n-#define _SECP256K1_GROUP_IMPL_H_\n+#ifndef SECP256K1_GROUP_IMPL_H\n+#define SECP256K1_GROUP_IMPL_H\n \n #include \"num.h\"\n #include \"field.h\"\n@@ -697,4 +697,4 @@ static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {\n     return secp256k1_fe_is_quad_var(&yz);\n }\n \n-#endif\n+#endif /* SECP256K1_GROUP_IMPL_H */"
      },
      {
        "sha": "e08d25d2255c097e6574d55145b173b3f0ed0fdb",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_HASH_\n-#define _SECP256K1_HASH_\n+#ifndef SECP256K1_HASH_H\n+#define SECP256K1_HASH_H\n \n #include <stdlib.h>\n #include <stdint.h>\n@@ -38,4 +38,4 @@ static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha2\n static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n \n-#endif\n+#endif /* SECP256K1_HASH_H */"
      },
      {
        "sha": "4c9964ee06284338cf33a5c2be4661f11ea40652",
        "filename": "src/hash_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_HASH_IMPL_H_\n-#define _SECP256K1_HASH_IMPL_H_\n+#ifndef SECP256K1_HASH_IMPL_H\n+#define SECP256K1_HASH_IMPL_H\n \n #include \"hash.h\"\n \n@@ -278,4 +278,4 @@ static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256\n #undef Maj\n #undef Ch\n \n-#endif\n+#endif /* SECP256K1_HASH_IMPL_H */"
      },
      {
        "sha": "01ecba4d537483998ded89af1ef307eb7da0c301",
        "filename": "src/modules/ecdh/main_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/ecdh/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/ecdh/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/modules/ecdh/main_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_ECDH_MAIN_\n-#define _SECP256K1_MODULE_ECDH_MAIN_\n+#ifndef SECP256K1_MODULE_ECDH_MAIN_H\n+#define SECP256K1_MODULE_ECDH_MAIN_H\n \n #include \"include/secp256k1_ecdh.h\"\n #include \"ecmult_const_impl.h\"\n@@ -51,4 +51,4 @@ int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const se\n     return ret;\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_ECDH_MAIN_H */"
      },
      {
        "sha": "cec30b67c67c2858eea9229863e8e74246523c2b",
        "filename": "src/modules/ecdh/tests_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/ecdh/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/ecdh/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/modules/ecdh/tests_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_ECDH_TESTS_\n-#define _SECP256K1_MODULE_ECDH_TESTS_\n+#ifndef SECP256K1_MODULE_ECDH_TESTS_H\n+#define SECP256K1_MODULE_ECDH_TESTS_H\n \n void test_ecdh_api(void) {\n     /* Setup context that just counts errors */\n@@ -102,4 +102,4 @@ void run_ecdh_tests(void) {\n     test_bad_scalar();\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_ECDH_TESTS_H */"
      },
      {
        "sha": "2f6691c5a1309d1b3a8b67014617f425202c88ca",
        "filename": "src/modules/recovery/main_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/recovery/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/recovery/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/modules/recovery/main_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_RECOVERY_MAIN_\n-#define _SECP256K1_MODULE_RECOVERY_MAIN_\n+#ifndef SECP256K1_MODULE_RECOVERY_MAIN_H\n+#define SECP256K1_MODULE_RECOVERY_MAIN_H\n \n #include \"include/secp256k1_recovery.h\"\n \n@@ -190,4 +190,4 @@ int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubk\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_RECOVERY_MAIN_H */"
      },
      {
        "sha": "5c9bbe86101c9f59bf288019c2923fe6c5019b0e",
        "filename": "src/modules/recovery/tests_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/recovery/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/modules/recovery/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/modules/recovery/tests_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_RECOVERY_TESTS_\n-#define _SECP256K1_MODULE_RECOVERY_TESTS_\n+#ifndef SECP256K1_MODULE_RECOVERY_TESTS_H\n+#define SECP256K1_MODULE_RECOVERY_TESTS_H\n \n static int recovery_test_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n     (void) msg32;\n@@ -390,4 +390,4 @@ void run_recovery_tests(void) {\n     test_ecdsa_recovery_edge_cases();\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_RECOVERY_TESTS_H */"
      },
      {
        "sha": "49f2dd791d5696bf89a11caf5461e3f5b33aaca0",
        "filename": "src/num.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/num.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/num.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/num.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_\n-#define _SECP256K1_NUM_\n+#ifndef SECP256K1_NUM_H\n+#define SECP256K1_NUM_H\n \n #ifndef USE_NUM_NONE\n \n@@ -71,4 +71,4 @@ static void secp256k1_num_negate(secp256k1_num *r);\n \n #endif\n \n-#endif\n+#endif /* SECP256K1_NUM_H */"
      },
      {
        "sha": "3619844bd5127eb4018efc05e16e78ae9143a93a",
        "filename": "src/num_gmp.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/num_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/num_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/num_gmp.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_REPR_\n-#define _SECP256K1_NUM_REPR_\n+#ifndef SECP256K1_NUM_REPR_H\n+#define SECP256K1_NUM_REPR_H\n \n #include <gmp.h>\n \n@@ -17,4 +17,4 @@ typedef struct {\n     int limbs;\n } secp256k1_num;\n \n-#endif\n+#endif /* SECP256K1_NUM_REPR_H */"
      },
      {
        "sha": "0ae2a8ba0ecb7b5b61aca0f94676dd7cbf86c437",
        "filename": "src/num_gmp_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/num_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/num_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/num_gmp_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_REPR_IMPL_H_\n-#define _SECP256K1_NUM_REPR_IMPL_H_\n+#ifndef SECP256K1_NUM_REPR_IMPL_H\n+#define SECP256K1_NUM_REPR_IMPL_H\n \n #include <string.h>\n #include <stdlib.h>\n@@ -285,4 +285,4 @@ static void secp256k1_num_negate(secp256k1_num *r) {\n     r->neg ^= 1;\n }\n \n-#endif\n+#endif /* SECP256K1_NUM_REPR_IMPL_H */"
      },
      {
        "sha": "c45193b033dab813c0ec30697f23fd60098b8e9a",
        "filename": "src/num_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/num_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/num_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/num_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_IMPL_H_\n-#define _SECP256K1_NUM_IMPL_H_\n+#ifndef SECP256K1_NUM_IMPL_H\n+#define SECP256K1_NUM_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -21,4 +21,4 @@\n #error \"Please select num implementation\"\n #endif\n \n-#endif\n+#endif /* SECP256K1_NUM_IMPL_H */"
      },
      {
        "sha": "59304cb66e90504bbc65ec13449160336c91d66a",
        "filename": "src/scalar.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_\n-#define _SECP256K1_SCALAR_\n+#ifndef SECP256K1_SCALAR_H\n+#define SECP256K1_SCALAR_H\n \n #include \"num.h\"\n \n@@ -103,4 +103,4 @@ static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar\n /** Multiply a and b (without taking the modulus!), divide by 2**shift, and round to the nearest integer. Shift must be at least 256. */\n static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift);\n \n-#endif\n+#endif /* SECP256K1_SCALAR_H */"
      },
      {
        "sha": "19c7495d1c8e38db57068425f9b6bcc89abe5747",
        "filename": "src/scalar_4x64.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_4x64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_4x64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_4x64.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n@@ -16,4 +16,4 @@ typedef struct {\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "db1ebf94bee0415abcc20a0aa6359997a4b53b25",
        "filename": "src/scalar_4x64_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_4x64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_4x64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_4x64_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)\n@@ -946,4 +946,4 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r,\n     secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1);\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "2c9a348e2476057521f6ce89c7847333d031daf3",
        "filename": "src/scalar_8x32.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_8x32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_8x32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_8x32.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n@@ -16,4 +16,4 @@ typedef struct {\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{(d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7)}}\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "4f9ed61feaeccf4fca036df8d9f24df2ad7a14ed",
        "filename": "src/scalar_8x32_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_8x32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_8x32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_8x32_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint32_t)0xD0364141UL)\n@@ -718,4 +718,4 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r,\n     secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 5] >> ((shift - 1) & 0x1f)) & 1);\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "fa790570ff837e2d98a1b606ed598bc9ac70fd4b",
        "filename": "src/scalar_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_IMPL_H_\n-#define _SECP256K1_SCALAR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_IMPL_H\n+#define SECP256K1_SCALAR_IMPL_H\n \n #include \"group.h\"\n #include \"scalar.h\"\n@@ -330,4 +330,4 @@ static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar\n #endif\n #endif\n \n-#endif\n+#endif /* SECP256K1_SCALAR_IMPL_H */"
      },
      {
        "sha": "5836febc5b729d8113842212b31fee01b21410cb",
        "filename": "src/scalar_low.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_low.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_low.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_low.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,12 +4,12 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n /** A scalar modulo the group order of the secp256k1 curve. */\n typedef uint32_t secp256k1_scalar;\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "c80e70c5a2ad2e310110ebd834edd2d1ad5a1a79",
        "filename": "src/scalar_low_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_low_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/scalar_low_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scalar_low_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n #include \"scalar.h\"\n \n@@ -111,4 +111,4 @@ SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const\n     return *a == *b;\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "f1f9be077e378839e9c763a6d29e6a3682243e60",
        "filename": "src/testrand.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/testrand.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/testrand.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/testrand.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_TESTRAND_H_\n-#define _SECP256K1_TESTRAND_H_\n+#ifndef SECP256K1_TESTRAND_H\n+#define SECP256K1_TESTRAND_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -35,4 +35,4 @@ static void secp256k1_rand256_test(unsigned char *b32);\n /** Generate pseudorandom bytes with long sequences of zero and one bits. */\n static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len);\n \n-#endif\n+#endif /* SECP256K1_TESTRAND_H */"
      },
      {
        "sha": "1255574209440a1c77dcd9cf60502f2d15cffcc2",
        "filename": "src/testrand_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/testrand_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/testrand_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/testrand_impl.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_TESTRAND_IMPL_H_\n-#define _SECP256K1_TESTRAND_IMPL_H_\n+#ifndef SECP256K1_TESTRAND_IMPL_H\n+#define SECP256K1_TESTRAND_IMPL_H\n \n #include <stdint.h>\n #include <string.h>\n@@ -107,4 +107,4 @@ static void secp256k1_rand256_test(unsigned char *b32) {\n     secp256k1_rand_bytes_test(b32, 32);\n }\n \n-#endif\n+#endif /* SECP256K1_TESTRAND_IMPL_H */"
      },
      {
        "sha": "b0441d8e305a4d6b557f46d6417d28dde9553f9c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd86f998fcfd25d823d67a2920814e22445655f9/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd86f998fcfd25d823d67a2920814e22445655f9/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=fd86f998fcfd25d823d67a2920814e22445655f9",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_UTIL_H_\n-#define _SECP256K1_UTIL_H_\n+#ifndef SECP256K1_UTIL_H\n+#define SECP256K1_UTIL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -110,4 +110,4 @@ static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_\n SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;\n #endif\n \n-#endif\n+#endif /* SECP256K1_UTIL_H */"
      }
    ]
  },
  {
    "sha": "999968e41662c1a676936db423db82af4411d78d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk5NjhlNDE2NjJjMWE2NzY5MzZkYjQyM2RiODJhZjQ0MTFkNzhk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T14:03:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T14:02:39Z"
      },
      "message": "Bump secp256k1 subtree",
      "tree": {
        "sha": "11f29ac9fd4c65928ee439baa14f138d1b79a826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11f29ac9fd4c65928ee439baa14f138d1b79a826"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999968e41662c1a676936db423db82af4411d78d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999968e41662c1a676936db423db82af4411d78d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999968e41662c1a676936db423db82af4411d78d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999968e41662c1a676936db423db82af4411d78d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc901d3a683c92438a6b28dca50b956decc4433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc901d3a683c92438a6b28dca50b956decc4433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc901d3a683c92438a6b28dca50b956decc4433"
      },
      {
        "sha": "fd86f998fcfd25d823d67a2920814e22445655f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd86f998fcfd25d823d67a2920814e22445655f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd86f998fcfd25d823d67a2920814e22445655f9"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 185,
      "deletions": 176
    },
    "files": [
      {
        "sha": "7eaf63bf6a0ee44ec22be25bf9bbb100c551be1f",
        "filename": "src/secp256k1/contrib/lax_der_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/contrib/lax_der_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/contrib/lax_der_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_parsing.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -48,14 +48,14 @@\n  *   8.3.1.\n  */\n \n-#ifndef _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n-#define _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n+#ifndef SECP256K1_CONTRIB_LAX_DER_PARSING_H\n+#define SECP256K1_CONTRIB_LAX_DER_PARSING_H\n \n #include <secp256k1.h>\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Parse a signature in \"lax DER\" format\n  *\n@@ -88,4 +88,4 @@ int ecdsa_signature_parse_der_lax(\n }\n #endif\n \n-#endif\n+#endif /* SECP256K1_CONTRIB_LAX_DER_PARSING_H */"
      },
      {
        "sha": "fece261fb9ed2b24df692cb059338f9f91aece6e",
        "filename": "src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_privatekey_parsing.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -25,14 +25,14 @@\n  * library are sufficient.\n  */\n \n-#ifndef _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n-#define _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n+#ifndef SECP256K1_CONTRIB_BER_PRIVATEKEY_H\n+#define SECP256K1_CONTRIB_BER_PRIVATEKEY_H\n \n #include <secp256k1.h>\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Export a private key in DER format.\n  *\n@@ -87,4 +87,4 @@ SECP256K1_WARN_UNUSED_RESULT int ec_privkey_import_der(\n }\n #endif\n \n-#endif\n+#endif /* SECP256K1_CONTRIB_BER_PRIVATEKEY_H */"
      },
      {
        "sha": "3e9c098d19f6a043f5f2fc0f9f1e05245487e0cd",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -1,9 +1,9 @@\n-#ifndef _SECP256K1_\n-# define _SECP256K1_\n+#ifndef SECP256K1_H\n+#define SECP256K1_H\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n #include <stddef.h>\n \n@@ -61,7 +61,7 @@ typedef struct {\n  *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n  *  If you need to convert to a format suitable for storage, transmission, or\n  *  comparison, use the secp256k1_ecdsa_signature_serialize_* and\n- *  secp256k1_ecdsa_signature_serialize_* functions.\n+ *  secp256k1_ecdsa_signature_parse_* functions.\n  */\n typedef struct {\n     unsigned char data[64];\n@@ -159,6 +159,13 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n #define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n+/** Prefix byte used to tag various encoded curvepoints for specific purposes */\n+#define SECP256K1_TAG_PUBKEY_EVEN 0x02\n+#define SECP256K1_TAG_PUBKEY_ODD 0x03\n+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED 0x04\n+#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN 0x06\n+#define SECP256K1_TAG_PUBKEY_HYBRID_ODD 0x07\n+\n /** Create a secp256k1 context object.\n  *\n  *  Returns: a newly created context object.\n@@ -607,8 +614,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_combine(\n     size_t n\n ) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_H */"
      },
      {
        "sha": "88492dc1a40bcf4f907a97c88d892d9e9122107d",
        "filename": "src/secp256k1/include/secp256k1_ecdh.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/include/secp256k1_ecdh.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/include/secp256k1_ecdh.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_ecdh.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -1,11 +1,11 @@\n-#ifndef _SECP256K1_ECDH_\n-# define _SECP256K1_ECDH_\n+#ifndef SECP256K1_ECDH_H\n+#define SECP256K1_ECDH_H\n \n-# include \"secp256k1.h\"\n+#include \"secp256k1.h\"\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Compute an EC Diffie-Hellman secret in constant time\n  *  Returns: 1: exponentiation was successful\n@@ -24,8 +24,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdh(\n   const unsigned char *privkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_ECDH_H */"
      },
      {
        "sha": "cf6c5ed7f5e3db97507ed3d68dee95081abe3ddb",
        "filename": "src/secp256k1/include/secp256k1_recovery.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/include/secp256k1_recovery.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/include/secp256k1_recovery.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_recovery.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -1,11 +1,11 @@\n-#ifndef _SECP256K1_RECOVERY_\n-# define _SECP256K1_RECOVERY_\n+#ifndef SECP256K1_RECOVERY_H\n+#define SECP256K1_RECOVERY_H\n \n-# include \"secp256k1.h\"\n+#include \"secp256k1.h\"\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Opaque data structured that holds a parsed ECDSA signature,\n  *  supporting pubkey recovery.\n@@ -103,8 +103,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover(\n     const unsigned char *msg32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_RECOVERY_H */"
      },
      {
        "sha": "8521f07999322d709c4232b3649d39b54be19307",
        "filename": "src/secp256k1/sage/group_prover.sage",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/group_prover.sage?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -17,7 +17,7 @@\n #   - A constraint describing the requirements of the law, called \"require\"\n # * Implementations are transliterated into functions that operate as well on\n #   algebraic input points, and are called once per combination of branches\n-#   exectured. Each execution returns:\n+#   executed. Each execution returns:\n #   - A constraint describing the assumptions this implementation requires\n #     (such as Z1=1), called \"assumeFormula\"\n #   - A constraint describing the assumptions this specific branch requires,"
      },
      {
        "sha": "5a9cc3ffcfdaf200779eea6082b5168e8311211c",
        "filename": "src/secp256k1/src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/asm/field_10x26_arm.s?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -23,7 +23,7 @@ Note:\n \t.eabi_attribute 10, 0 @ Tag_FP_arch = none\n \t.eabi_attribute 24, 1 @ Tag_ABI_align_needed = 8-byte\n \t.eabi_attribute 25, 1 @ Tag_ABI_align_preserved = 8-byte, except leaf SP\n-\t.eabi_attribute 30, 2 @ Tag_ABI_optimization_goals = Agressive Speed\n+\t.eabi_attribute 30, 2 @ Tag_ABI_optimization_goals = Aggressive Speed\n \t.eabi_attribute 34, 1 @ Tag_CPU_unaligned_access = v6\n \t.text\n "
      },
      {
        "sha": "fc588061ca40cdcc30151f5b7e17bc83b4a7125e",
        "filename": "src/secp256k1/src/basic-config.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/basic-config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/basic-config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/basic-config.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_BASIC_CONFIG_\n-#define _SECP256K1_BASIC_CONFIG_\n+#ifndef SECP256K1_BASIC_CONFIG_H\n+#define SECP256K1_BASIC_CONFIG_H\n \n #ifdef USE_BASIC_CONFIG\n \n@@ -28,5 +28,6 @@\n #define USE_FIELD_10X26 1\n #define USE_SCALAR_8X32 1\n \n-#endif // USE_BASIC_CONFIG\n-#endif // _SECP256K1_BASIC_CONFIG_\n+#endif /* USE_BASIC_CONFIG */\n+\n+#endif /* SECP256K1_BASIC_CONFIG_H */"
      },
      {
        "sha": "d5ebe01301b81457cc3db630687458046b70af22",
        "filename": "src/secp256k1/src/bench.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_BENCH_H_\n-#define _SECP256K1_BENCH_H_\n+#ifndef SECP256K1_BENCH_H\n+#define SECP256K1_BENCH_H\n \n #include <stdio.h>\n #include <math.h>\n@@ -63,4 +63,4 @@ void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), v\n     printf(\"us\\n\");\n }\n \n-#endif\n+#endif /* SECP256K1_BENCH_H */"
      },
      {
        "sha": "80590c7cc862db786aac61092753b78057d89ecb",
        "filename": "src/secp256k1/src/ecdsa.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecdsa.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecdsa.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECDSA_\n-#define _SECP256K1_ECDSA_\n+#ifndef SECP256K1_ECDSA_H\n+#define SECP256K1_ECDSA_H\n \n #include <stddef.h>\n \n@@ -18,4 +18,4 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const\n static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar* r, const secp256k1_scalar* s, const secp256k1_ge *pubkey, const secp256k1_scalar *message);\n static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid);\n \n-#endif\n+#endif /* SECP256K1_ECDSA_H */"
      },
      {
        "sha": "c3400042d83935b6c3900ada179ebaaeb4afefa9",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -5,8 +5,8 @@\n  **********************************************************************/\n \n \n-#ifndef _SECP256K1_ECDSA_IMPL_H_\n-#define _SECP256K1_ECDSA_IMPL_H_\n+#ifndef SECP256K1_ECDSA_IMPL_H\n+#define SECP256K1_ECDSA_IMPL_H\n \n #include \"scalar.h\"\n #include \"field.h\"\n@@ -81,8 +81,6 @@ static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned cha\n         return -1;\n     }\n     while (lenleft > 0) {\n-        if ((ret >> ((sizeof(size_t) - 1) * 8)) != 0) {\n-        }\n         ret = (ret << 8) | **sigp;\n         if (ret + lenleft > (size_t)(sigend - *sigp)) {\n             /* Result exceeds the length of the passed array. */\n@@ -312,4 +310,4 @@ static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, sec\n     return 1;\n }\n \n-#endif\n+#endif /* SECP256K1_ECDSA_IMPL_H */"
      },
      {
        "sha": "b621f1e6c39d93f0539d2090b326dcd4f26c61a3",
        "filename": "src/secp256k1/src/eckey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/eckey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/eckey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECKEY_\n-#define _SECP256K1_ECKEY_\n+#ifndef SECP256K1_ECKEY_H\n+#define SECP256K1_ECKEY_H\n \n #include <stddef.h>\n \n@@ -22,4 +22,4 @@ static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx,\n static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak);\n static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak);\n \n-#endif\n+#endif /* SECP256K1_ECKEY_H */"
      },
      {
        "sha": "1ab9a68ec048c55a72e79674073e805e92487d63",
        "filename": "src/secp256k1/src/eckey_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/eckey_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/eckey_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECKEY_IMPL_H_\n-#define _SECP256K1_ECKEY_IMPL_H_\n+#ifndef SECP256K1_ECKEY_IMPL_H\n+#define SECP256K1_ECKEY_IMPL_H\n \n #include \"eckey.h\"\n \n@@ -15,16 +15,17 @@\n #include \"ecmult_gen.h\"\n \n static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {\n-    if (size == 33 && (pub[0] == 0x02 || pub[0] == 0x03)) {\n+    if (size == 33 && (pub[0] == SECP256K1_TAG_PUBKEY_EVEN || pub[0] == SECP256K1_TAG_PUBKEY_ODD)) {\n         secp256k1_fe x;\n-        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == 0x03);\n+        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == SECP256K1_TAG_PUBKEY_ODD);\n     } else if (size == 65 && (pub[0] == 0x04 || pub[0] == 0x06 || pub[0] == 0x07)) {\n         secp256k1_fe x, y;\n         if (!secp256k1_fe_set_b32(&x, pub+1) || !secp256k1_fe_set_b32(&y, pub+33)) {\n             return 0;\n         }\n         secp256k1_ge_set_xy(elem, &x, &y);\n-        if ((pub[0] == 0x06 || pub[0] == 0x07) && secp256k1_fe_is_odd(&y) != (pub[0] == 0x07)) {\n+        if ((pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_EVEN || pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_ODD) &&\n+            secp256k1_fe_is_odd(&y) != (pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_ODD)) {\n             return 0;\n         }\n         return secp256k1_ge_is_valid_var(elem);\n@@ -42,10 +43,10 @@ static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *p\n     secp256k1_fe_get_b32(&pub[1], &elem->x);\n     if (compressed) {\n         *size = 33;\n-        pub[0] = 0x02 | (secp256k1_fe_is_odd(&elem->y) ? 0x01 : 0x00);\n+        pub[0] = secp256k1_fe_is_odd(&elem->y) ? SECP256K1_TAG_PUBKEY_ODD : SECP256K1_TAG_PUBKEY_EVEN;\n     } else {\n         *size = 65;\n-        pub[0] = 0x04;\n+        pub[0] = SECP256K1_TAG_PUBKEY_UNCOMPRESSED;\n         secp256k1_fe_get_b32(&pub[33], &elem->y);\n     }\n     return 1;\n@@ -96,4 +97,4 @@ static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx,\n     return 1;\n }\n \n-#endif\n+#endif /* SECP256K1_ECKEY_IMPL_H */"
      },
      {
        "sha": "6d44aba60b53b3ba6c3ad9e5cc67edce1faf4661",
        "filename": "src/secp256k1/src/ecmult.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_\n-#define _SECP256K1_ECMULT_\n+#ifndef SECP256K1_ECMULT_H\n+#define SECP256K1_ECMULT_H\n \n #include \"num.h\"\n #include \"group.h\"\n@@ -28,4 +28,4 @@ static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx\n /** Double multiply: R = na*A + ng*G */\n static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_H */"
      },
      {
        "sha": "72bf7d7582f15f9eb176bf215ea7622701481e08",
        "filename": "src/secp256k1/src/ecmult_const.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_const.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_const.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,12 +4,12 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_CONST_\n-#define _SECP256K1_ECMULT_CONST_\n+#ifndef SECP256K1_ECMULT_CONST_H\n+#define SECP256K1_ECMULT_CONST_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n \n static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *q);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_CONST_H */"
      },
      {
        "sha": "7d7a172b7b385d5eea8fb81e3b9ee785a8bef971",
        "filename": "src/secp256k1/src/ecmult_const_impl.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_const_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_const_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_CONST_IMPL_\n-#define _SECP256K1_ECMULT_CONST_IMPL_\n+#ifndef SECP256K1_ECMULT_CONST_IMPL_H\n+#define SECP256K1_ECMULT_CONST_IMPL_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -42,11 +42,12 @@\n } while(0)\n \n \n-/** Convert a number to WNAF notation. The number becomes represented by sum(2^{wi} * wnaf[i], i=0..return_val)\n- *  with the following guarantees:\n+/** Convert a number to WNAF notation.\n+ *  The number becomes represented by sum(2^{wi} * wnaf[i], i=0..WNAF_SIZE(w)+1) - return_val.\n+ *  It has the following guarantees:\n  *  - each wnaf[i] an odd integer between -(1 << w) and (1 << w)\n  *  - each wnaf[i] is nonzero\n- *  - the number of words set is returned; this is always (WNAF_BITS + w - 1) / w\n+ *  - the number of words set is always WNAF_SIZE(w) + 1\n  *\n  *  Adapted from `The Width-w NAF Method Provides Small Memory and Fast Elliptic Scalar\n  *  Multiplications Secure against Side Channel Attacks`, Okeya and Tagaki. M. Joye (Ed.)\n@@ -236,4 +237,4 @@ static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, cons\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_CONST_IMPL_H */"
      },
      {
        "sha": "7564b7015f0b79aaa49ac6f81656cc22e5f3f08f",
        "filename": "src/secp256k1/src/ecmult_gen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_GEN_\n-#define _SECP256K1_ECMULT_GEN_\n+#ifndef SECP256K1_ECMULT_GEN_H\n+#define SECP256K1_ECMULT_GEN_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -40,4 +40,4 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context* ctx, secp25\n \n static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_GEN_H */"
      },
      {
        "sha": "9615b932dd5956562cdb521e62fd09ecdfec3fae",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_GEN_IMPL_H_\n-#define _SECP256K1_ECMULT_GEN_IMPL_H_\n+#ifndef SECP256K1_ECMULT_GEN_IMPL_H\n+#define SECP256K1_ECMULT_GEN_IMPL_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -207,4 +207,4 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const\n     secp256k1_gej_clear(&gb);\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_GEN_IMPL_H */"
      },
      {
        "sha": "93d3794cb43488eac6b6ab231f067ff7f3db71c8",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_IMPL_H_\n-#define _SECP256K1_ECMULT_IMPL_H_\n+#ifndef SECP256K1_ECMULT_IMPL_H\n+#define SECP256K1_ECMULT_IMPL_H\n \n #include <string.h>\n \n@@ -403,4 +403,4 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_IMPL_H */"
      },
      {
        "sha": "bb6692ad57835498257a492028e1646d7cc584f5",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_\n-#define _SECP256K1_FIELD_\n+#ifndef SECP256K1_FIELD_H\n+#define SECP256K1_FIELD_H\n \n /** Field element module.\n  *\n@@ -129,4 +129,4 @@ static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_f\n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n-#endif\n+#endif /* SECP256K1_FIELD_H */"
      },
      {
        "sha": "727c5267fbb5fc46894d7d9ca2b7bab5ab7eb10d",
        "filename": "src/secp256k1/src/field_10x26.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_10x26.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_10x26.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n+#ifndef SECP256K1_FIELD_REPR_H\n+#define SECP256K1_FIELD_REPR_H\n \n #include <stdint.h>\n \n@@ -44,4 +44,5 @@ typedef struct {\n \n #define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }}\n #define SECP256K1_FE_STORAGE_CONST_GET(d) d.n[7], d.n[6], d.n[5], d.n[4],d.n[3], d.n[2], d.n[1], d.n[0]\n-#endif\n+\n+#endif /* SECP256K1_FIELD_REPR_H */"
      },
      {
        "sha": "94f8132fc8e62bd3276c14d4ab910378a430d388",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n+#ifndef SECP256K1_FIELD_REPR_IMPL_H\n+#define SECP256K1_FIELD_REPR_IMPL_H\n \n #include \"util.h\"\n #include \"num.h\"\n@@ -1158,4 +1158,4 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "bccd8feb4dde63dc0e9d2197fa5e9943882e2069",
        "filename": "src/secp256k1/src/field_5x52.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n+#ifndef SECP256K1_FIELD_REPR_H\n+#define SECP256K1_FIELD_REPR_H\n \n #include <stdint.h>\n \n@@ -44,4 +44,4 @@ typedef struct {\n     (d6) | (((uint64_t)(d7)) << 32) \\\n }}\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_H */"
      },
      {
        "sha": "1fc3171f6b0ed85323807c26dabbe883eb24355f",
        "filename": "src/secp256k1/src/field_5x52_asm_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52_asm_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52_asm_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_asm_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -11,8 +11,8 @@\n  * - December 2014, Pieter Wuille: converted from YASM to GCC inline assembly\n  */\n \n-#ifndef _SECP256K1_FIELD_INNER5X52_IMPL_H_\n-#define _SECP256K1_FIELD_INNER5X52_IMPL_H_\n+#ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n+#define SECP256K1_FIELD_INNER5X52_IMPL_H\n \n SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n /**\n@@ -499,4 +499,4 @@ __asm__ __volatile__(\n );\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_INNER5X52_IMPL_H */"
      },
      {
        "sha": "957c61b01451a0f09ee6499db45c0745180da3b4",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n+#ifndef SECP256K1_FIELD_REPR_IMPL_H\n+#define SECP256K1_FIELD_REPR_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -493,4 +493,4 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "95a0d1791c0557fe65995c96acb26a1a1bae36cf",
        "filename": "src/secp256k1/src/field_5x52_int128_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52_int128_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_5x52_int128_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_int128_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_INNER5X52_IMPL_H_\n-#define _SECP256K1_FIELD_INNER5X52_IMPL_H_\n+#ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n+#define SECP256K1_FIELD_INNER5X52_IMPL_H\n \n #include <stdint.h>\n \n@@ -274,4 +274,4 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t\n     /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_INNER5X52_IMPL_H */"
      },
      {
        "sha": "20428648af31299921fa0dc250e6951912178ec8",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_IMPL_H_\n-#define _SECP256K1_FIELD_IMPL_H_\n+#ifndef SECP256K1_FIELD_IMPL_H\n+#define SECP256K1_FIELD_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -312,4 +312,4 @@ static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_IMPL_H */"
      },
      {
        "sha": "ea1302deb8296eef824abed82ccad35dcab749cd",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_GROUP_\n-#define _SECP256K1_GROUP_\n+#ifndef SECP256K1_GROUP_H\n+#define SECP256K1_GROUP_H\n \n #include \"num.h\"\n #include \"field.h\"\n@@ -141,4 +141,4 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n-#endif\n+#endif /* SECP256K1_GROUP_H */"
      },
      {
        "sha": "b31b6c12efe336d0b866b95e58e1ecb4adef61af",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_GROUP_IMPL_H_\n-#define _SECP256K1_GROUP_IMPL_H_\n+#ifndef SECP256K1_GROUP_IMPL_H\n+#define SECP256K1_GROUP_IMPL_H\n \n #include \"num.h\"\n #include \"field.h\"\n@@ -697,4 +697,4 @@ static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {\n     return secp256k1_fe_is_quad_var(&yz);\n }\n \n-#endif\n+#endif /* SECP256K1_GROUP_IMPL_H */"
      },
      {
        "sha": "e08d25d2255c097e6574d55145b173b3f0ed0fdb",
        "filename": "src/secp256k1/src/hash.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_HASH_\n-#define _SECP256K1_HASH_\n+#ifndef SECP256K1_HASH_H\n+#define SECP256K1_HASH_H\n \n #include <stdlib.h>\n #include <stdint.h>\n@@ -38,4 +38,4 @@ static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha2\n static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n \n-#endif\n+#endif /* SECP256K1_HASH_H */"
      },
      {
        "sha": "4c9964ee06284338cf33a5c2be4661f11ea40652",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_HASH_IMPL_H_\n-#define _SECP256K1_HASH_IMPL_H_\n+#ifndef SECP256K1_HASH_IMPL_H\n+#define SECP256K1_HASH_IMPL_H\n \n #include \"hash.h\"\n \n@@ -278,4 +278,4 @@ static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256\n #undef Maj\n #undef Ch\n \n-#endif\n+#endif /* SECP256K1_HASH_IMPL_H */"
      },
      {
        "sha": "01ecba4d537483998ded89af1ef307eb7da0c301",
        "filename": "src/secp256k1/src/modules/ecdh/main_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/ecdh/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/ecdh/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/main_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_ECDH_MAIN_\n-#define _SECP256K1_MODULE_ECDH_MAIN_\n+#ifndef SECP256K1_MODULE_ECDH_MAIN_H\n+#define SECP256K1_MODULE_ECDH_MAIN_H\n \n #include \"include/secp256k1_ecdh.h\"\n #include \"ecmult_const_impl.h\"\n@@ -51,4 +51,4 @@ int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const se\n     return ret;\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_ECDH_MAIN_H */"
      },
      {
        "sha": "cec30b67c67c2858eea9229863e8e74246523c2b",
        "filename": "src/secp256k1/src/modules/ecdh/tests_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/tests_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_ECDH_TESTS_\n-#define _SECP256K1_MODULE_ECDH_TESTS_\n+#ifndef SECP256K1_MODULE_ECDH_TESTS_H\n+#define SECP256K1_MODULE_ECDH_TESTS_H\n \n void test_ecdh_api(void) {\n     /* Setup context that just counts errors */\n@@ -102,4 +102,4 @@ void run_ecdh_tests(void) {\n     test_bad_scalar();\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_ECDH_TESTS_H */"
      },
      {
        "sha": "2f6691c5a1309d1b3a8b67014617f425202c88ca",
        "filename": "src/secp256k1/src/modules/recovery/main_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/recovery/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/recovery/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/main_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_RECOVERY_MAIN_\n-#define _SECP256K1_MODULE_RECOVERY_MAIN_\n+#ifndef SECP256K1_MODULE_RECOVERY_MAIN_H\n+#define SECP256K1_MODULE_RECOVERY_MAIN_H\n \n #include \"include/secp256k1_recovery.h\"\n \n@@ -190,4 +190,4 @@ int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubk\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_RECOVERY_MAIN_H */"
      },
      {
        "sha": "5c9bbe86101c9f59bf288019c2923fe6c5019b0e",
        "filename": "src/secp256k1/src/modules/recovery/tests_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/recovery/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/modules/recovery/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/tests_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_RECOVERY_TESTS_\n-#define _SECP256K1_MODULE_RECOVERY_TESTS_\n+#ifndef SECP256K1_MODULE_RECOVERY_TESTS_H\n+#define SECP256K1_MODULE_RECOVERY_TESTS_H\n \n static int recovery_test_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n     (void) msg32;\n@@ -390,4 +390,4 @@ void run_recovery_tests(void) {\n     test_ecdsa_recovery_edge_cases();\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_RECOVERY_TESTS_H */"
      },
      {
        "sha": "49f2dd791d5696bf89a11caf5461e3f5b33aaca0",
        "filename": "src/secp256k1/src/num.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_\n-#define _SECP256K1_NUM_\n+#ifndef SECP256K1_NUM_H\n+#define SECP256K1_NUM_H\n \n #ifndef USE_NUM_NONE\n \n@@ -71,4 +71,4 @@ static void secp256k1_num_negate(secp256k1_num *r);\n \n #endif\n \n-#endif\n+#endif /* SECP256K1_NUM_H */"
      },
      {
        "sha": "3619844bd5127eb4018efc05e16e78ae9143a93a",
        "filename": "src/secp256k1/src/num_gmp.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_REPR_\n-#define _SECP256K1_NUM_REPR_\n+#ifndef SECP256K1_NUM_REPR_H\n+#define SECP256K1_NUM_REPR_H\n \n #include <gmp.h>\n \n@@ -17,4 +17,4 @@ typedef struct {\n     int limbs;\n } secp256k1_num;\n \n-#endif\n+#endif /* SECP256K1_NUM_REPR_H */"
      },
      {
        "sha": "0ae2a8ba0ecb7b5b61aca0f94676dd7cbf86c437",
        "filename": "src/secp256k1/src/num_gmp_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_REPR_IMPL_H_\n-#define _SECP256K1_NUM_REPR_IMPL_H_\n+#ifndef SECP256K1_NUM_REPR_IMPL_H\n+#define SECP256K1_NUM_REPR_IMPL_H\n \n #include <string.h>\n #include <stdlib.h>\n@@ -285,4 +285,4 @@ static void secp256k1_num_negate(secp256k1_num *r) {\n     r->neg ^= 1;\n }\n \n-#endif\n+#endif /* SECP256K1_NUM_REPR_IMPL_H */"
      },
      {
        "sha": "c45193b033dab813c0ec30697f23fd60098b8e9a",
        "filename": "src/secp256k1/src/num_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/num_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_IMPL_H_\n-#define _SECP256K1_NUM_IMPL_H_\n+#ifndef SECP256K1_NUM_IMPL_H\n+#define SECP256K1_NUM_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -21,4 +21,4 @@\n #error \"Please select num implementation\"\n #endif\n \n-#endif\n+#endif /* SECP256K1_NUM_IMPL_H */"
      },
      {
        "sha": "59304cb66e90504bbc65ec13449160336c91d66a",
        "filename": "src/secp256k1/src/scalar.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_\n-#define _SECP256K1_SCALAR_\n+#ifndef SECP256K1_SCALAR_H\n+#define SECP256K1_SCALAR_H\n \n #include \"num.h\"\n \n@@ -103,4 +103,4 @@ static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar\n /** Multiply a and b (without taking the modulus!), divide by 2**shift, and round to the nearest integer. Shift must be at least 256. */\n static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift);\n \n-#endif\n+#endif /* SECP256K1_SCALAR_H */"
      },
      {
        "sha": "19c7495d1c8e38db57068425f9b6bcc89abe5747",
        "filename": "src/secp256k1/src/scalar_4x64.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_4x64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_4x64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n@@ -16,4 +16,4 @@ typedef struct {\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "db1ebf94bee0415abcc20a0aa6359997a4b53b25",
        "filename": "src/secp256k1/src/scalar_4x64_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_4x64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_4x64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)\n@@ -946,4 +946,4 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r,\n     secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1);\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "2c9a348e2476057521f6ce89c7847333d031daf3",
        "filename": "src/secp256k1/src/scalar_8x32.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_8x32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_8x32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n@@ -16,4 +16,4 @@ typedef struct {\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{(d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7)}}\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "4f9ed61feaeccf4fca036df8d9f24df2ad7a14ed",
        "filename": "src/secp256k1/src/scalar_8x32_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_8x32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_8x32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint32_t)0xD0364141UL)\n@@ -718,4 +718,4 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r,\n     secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 5] >> ((shift - 1) & 0x1f)) & 1);\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "fa790570ff837e2d98a1b606ed598bc9ac70fd4b",
        "filename": "src/secp256k1/src/scalar_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_IMPL_H_\n-#define _SECP256K1_SCALAR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_IMPL_H\n+#define SECP256K1_SCALAR_IMPL_H\n \n #include \"group.h\"\n #include \"scalar.h\"\n@@ -330,4 +330,4 @@ static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar\n #endif\n #endif\n \n-#endif\n+#endif /* SECP256K1_SCALAR_IMPL_H */"
      },
      {
        "sha": "5836febc5b729d8113842212b31fee01b21410cb",
        "filename": "src/secp256k1/src/scalar_low.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_low.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_low.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_low.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,12 +4,12 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n /** A scalar modulo the group order of the secp256k1 curve. */\n typedef uint32_t secp256k1_scalar;\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "c80e70c5a2ad2e310110ebd834edd2d1ad5a1a79",
        "filename": "src/secp256k1/src/scalar_low_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_low_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/scalar_low_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_low_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n #include \"scalar.h\"\n \n@@ -111,4 +111,4 @@ SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const\n     return *a == *b;\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "f1f9be077e378839e9c763a6d29e6a3682243e60",
        "filename": "src/secp256k1/src/testrand.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/testrand.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/testrand.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_TESTRAND_H_\n-#define _SECP256K1_TESTRAND_H_\n+#ifndef SECP256K1_TESTRAND_H\n+#define SECP256K1_TESTRAND_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -35,4 +35,4 @@ static void secp256k1_rand256_test(unsigned char *b32);\n /** Generate pseudorandom bytes with long sequences of zero and one bits. */\n static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len);\n \n-#endif\n+#endif /* SECP256K1_TESTRAND_H */"
      },
      {
        "sha": "1255574209440a1c77dcd9cf60502f2d15cffcc2",
        "filename": "src/secp256k1/src/testrand_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/testrand_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/testrand_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand_impl.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_TESTRAND_IMPL_H_\n-#define _SECP256K1_TESTRAND_IMPL_H_\n+#ifndef SECP256K1_TESTRAND_IMPL_H\n+#define SECP256K1_TESTRAND_IMPL_H\n \n #include <stdint.h>\n #include <string.h>\n@@ -107,4 +107,4 @@ static void secp256k1_rand256_test(unsigned char *b32) {\n     secp256k1_rand_bytes_test(b32, 32);\n }\n \n-#endif\n+#endif /* SECP256K1_TESTRAND_IMPL_H */"
      },
      {
        "sha": "b0441d8e305a4d6b557f46d6417d28dde9553f9c",
        "filename": "src/secp256k1/src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999968e41662c1a676936db423db82af4411d78d/src/secp256k1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/util.h?ref=999968e41662c1a676936db423db82af4411d78d",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_UTIL_H_\n-#define _SECP256K1_UTIL_H_\n+#ifndef SECP256K1_UTIL_H\n+#define SECP256K1_UTIL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -110,4 +110,4 @@ static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_\n SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;\n #endif\n \n-#endif\n+#endif /* SECP256K1_UTIL_H */"
      }
    ]
  },
  {
    "sha": "1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDg4YjUzMjJkMGU3YTgzNjZhMjg1ZTJiYWE0OWM3NjZhOWJhNWJk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-09-26T21:24:26Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-09-29T15:29:38Z"
      },
      "message": "add functional test for mempoolreplacement command line arg",
      "tree": {
        "sha": "c58ff3bb8a5d76f666768052a92e25118d219cc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58ff3bb8a5d76f666768052a92e25118d219cc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1088b5322d0e7a8366a285e2baa49c766a9ba5bd/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a72003d794f39230db476d4f358eb244b7cb2d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a72003d794f39230db476d4f358eb244b7cb2d36"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "75f3d77c138089febe524fab11228dad83ea7d7b",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1088b5322d0e7a8366a285e2baa49c766a9ba5bd/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1088b5322d0e7a8366a285e2baa49c766a9ba5bd/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
        "patch": "@@ -62,13 +62,14 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n class ReplaceByFeeTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\",\n                            \"-limitancestorsize=101\",\n                            \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"]]\n+                           \"-limitdescendantsize=101\"],\n+                           [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n@@ -115,6 +116,8 @@ def test_simple_doublespend(self):\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n+        self.sync_all([self.nodes])\n+\n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -123,12 +126,17 @@ def test_simple_doublespend(self):\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        # This will raise an exception due to transaction replacement being disabled\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n+        # Replacement still disabled even with \"enough fee\"\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -138,6 +146,11 @@ def test_simple_doublespend(self):\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n+        # Second node is running mempoolreplacement=0, will not replace originally-seen txn\n+        mempool = self.nodes[1].getrawmempool()\n+        assert tx1a_txid in mempool\n+        assert tx1b_txid not in mempool\n+\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n "
      }
    ]
  },
  {
    "sha": "9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzNjOWNkYWUzZTIwYjViZGVhOTFhMDYzMWVkYWM1MTE2YmJjODlm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T17:44:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T17:44:54Z"
      },
      "message": "Merge #10552: [Test] Tests for zmqpubrawtx and zmqpubrawblock\n\nd3677ab75 Tests for zmqpubrawtx and zmqpubrawblock (Andrew Chow)\n\nPull request description:\n\nTree-SHA512: 9e367fd8936514bfb567ef3f3d83770d374287354b59c9187e844056dd086e8aa2de32ce55d35486cecd706e7c93cd1c1e2709ee82d3dddb805827be8d2bcb14",
      "tree": {
        "sha": "9b4e25d1f070572f09c601c4406c41304819c6eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b4e25d1f070572f09c601c4406c41304819c6eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZzoaWAAoJENLqSFDnUoslesIP/idJLlm0PTyIPJ8s7ccZVY5g\nOvs3SaKHR55l8UA8fwPiF7MsMBfybwu2IzIeFT14bTTkqGN1JydLYlmx8Gib0bdb\nkk8Bq7v/iDMqFrOYyK5s5qowkAZ1tDQUQ5TRuKwyWFIHgYNm7RhYhpGJwpxrBY/v\n1RDhidprQ6hMULDHAveHz8CztF9a7b1j5gqZhHvLT13eOI6W5ZwFHYfAD2xs8hft\n9es2Zpp0bAS8F9buaRuHn5pVYfUkpV/EIt7IZ8aszfhGH1fyiSRJXzTt6KAt4hTv\nl+x0v8ovlOFzBjlyIzdCKv5uIfg/KpDjHs6r1J8ZmJNndBt4zyUXy4V6KGXU/1ZJ\n+38QCzqiHhLiyfcIHXyN9/SlABDv22kDa9FAC6/ZI6wMqRBVjXI8Hwk8YpSdb0CN\nZSNsdWCekwOpgut/uvaMtED8vvEHQjQGCtO6tkObQs69Et5aEN6bA4chjxjX4otQ\ncbwqHKQ0QjRIoYW29aqdTz8yMvHg2tT9Va/MSdE1Eq1D9qwLSWAcml5+OZXakhi8\npjYvBUHtbuhtTN4LtwD2ZqGRvDDvoJuWWneLSb6ASSLXFxMl3k0ROf5IN+IOn2/z\n0B8Pf3+F+5RUJ4CSrW8nN0ZJu7W0hLBShpdu5fh0OorJh62KStWyu2MvOXzg6x+M\nEl2wbEE8dFYtxVXAgQ9L\n=bfrK\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b4e25d1f070572f09c601c4406c41304819c6eb\nparent 93d20a734d2ee873832bed8ca5c05cf8e539c53c\nparent d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c\nauthor MarcoFalke <falke.marco@gmail.com> 1506707050 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506707094 +0200\n\nMerge #10552: [Test] Tests for zmqpubrawtx and zmqpubrawblock\n\nd3677ab75 Tests for zmqpubrawtx and zmqpubrawblock (Andrew Chow)\n\nPull request description:\n\nTree-SHA512: 9e367fd8936514bfb567ef3f3d83770d374287354b59c9187e844056dd086e8aa2de32ce55d35486cecd706e7c93cd1c1e2709ee82d3dddb805827be8d2bcb14\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d20a734d2ee873832bed8ca5c05cf8e539c53c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93d20a734d2ee873832bed8ca5c05cf8e539c53c"
      },
      {
        "sha": "d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 54,
      "deletions": 6
    },
    "files": [
      {
        "sha": "64966adb9738fc0814c480f6ad4d5b9800ff63dc",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
        "patch": "@@ -7,6 +7,7 @@\n from base64 import b64encode\n from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n+import hashlib\n import json\n import logging\n import os\n@@ -173,6 +174,13 @@ def count_bytes(hex_string):\n def bytes_to_hex_str(byte_str):\n     return hexlify(byte_str).decode('ascii')\n \n+def hash256(byte_str):\n+    sha256 = hashlib.sha256()\n+    sha256.update(byte_str)\n+    sha256d = hashlib.sha256()\n+    sha256d.update(sha256.digest())\n+    return sha256d.digest()[::-1]\n+\n def hex_str_to_bytes(hex_str):\n     return unhexlify(hex_str.encode('ascii'))\n "
      },
      {
        "sha": "382ef5bae2891df08c627e9878a0aaf45205feef",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
        "patch": "@@ -10,7 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n-                                 )\n+                                 hash256,\n+                                )\n \n class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -37,9 +38,12 @@ def setup_nodes(self):\n         self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n+                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n@@ -59,28 +63,51 @@ def _zmq_test(self):\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n+        txhash = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n+        # rawtx\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n+\n+        # Check that the rawtx hashes to the hashtx\n+        assert_equal(hash256(body), txhash)\n+\n         self.log.info(\"Wait for block\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n+        assert_equal(topic, b\"hashblock\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n-\n         assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        # rawblock\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawblock\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n+\n+        # Check the hash of the rawblock's header matches generate\n+        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n+\n         self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n+        zmqRawHashed = []\n         blockcount = 0\n-        for x in range(n * 2):\n+        for x in range(n * 4):\n             msg = self.zmqSubSocket.recv_multipart()\n             topic = msg[0]\n             body = msg[1]\n@@ -89,9 +116,14 @@ def _zmq_test(self):\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n                 assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n+            if topic == b\"rawblock\":\n+                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n+                msgSequence = struct.unpack('<I', msg[-1])[-1]\n+                assert_equal(msgSequence, blockcount)\n \n         for x in range(n):\n             assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n+            assert_equal(genhashes[x], zmqRawHashed[x])\n \n         self.log.info(\"Wait for tx from second node\")\n         # test tx from a second node\n@@ -101,13 +133,21 @@ def _zmq_test(self):\n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        body = msg[1]\n         assert_equal(topic, b\"hashtx\")\n+        body = msg[1]\n         hashZMQ = bytes_to_hex_str(body)\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, blockcount + 1)\n \n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        hashedZMQ = bytes_to_hex_str(hash256(body))\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount+1)\n         assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashedZMQ)\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  },
  {
    "sha": "ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjRjZDYwNzViMTJmYjMyYjlhOTA2ZGVlYTNlZDAzM2UzZjk1NjBh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T18:23:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-29T18:23:59Z"
      },
      "message": "Merge #11319: [qa] Fix error introduced into p2p-segwit.py, and prevent future similar errors\n\nf97ab35fa qa: Fix bug introduced in p2p-segwit.py (Suhas Daftuar)\na7820422e qa: Treat mininode p2p exceptions as fatal (Suhas Daftuar)\n\nPull request description:\n\n  #11121 inadvertently broke the constructor for the `TestNode()` object in `p2p-segwit.py`, silently breaking at least one of the tests.\n\n  Although the python code was raising exceptions due to a `TestNode()` object not existing (or having the right type), mininode was masking these from anyone running the test through the test_runner (like travis), because it catches all exceptions during message delivery and just prints a log message and continues.  Such \"graceful\" handling of errors is almost certainly something we don't want in our test suite, so the first commit here attempts to prevent that type of failure from ever being masked.\n\n  The second commit fixes the particular bug in `p2p-segwit.py`.\n\nTree-SHA512: b6646e3cb1e05c35c28e8899c44104bf2e2d0384643ca87042ab7f6ec0960d89f5bf25a7b95bab6e32d401c20a6018226160500f6ddceb923e81ffb04adb4f2f",
      "tree": {
        "sha": "f2eb79a88a5ef8f9ba87a8f31094551e1cd368b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2eb79a88a5ef8f9ba87a8f31094551e1cd368b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZzo+/AAoJENLqSFDnUoslEnoQALH8G9EsoGofxZN2STbhEvfH\nuAJBRB2u3DgtptaLRLPeQvhX1zOCixWdUNiw1WQ4uStuYMws9ykqjEDd0IjwilUu\n+Ru+ZRN1McyLJK0pdICwiDN7jcEIkGKCvpBxrGY8M6K1yT+VaWIjAPDAP1lYd5Uf\nvH5FV/893TcGat10taAOlIO0cUJCn6VE5tcvcXL6xC5Yq0ZNEPeiiNCbi38J8m7p\nrZJMCNsSBBo+mDm7Qz1mA0zFvp+MRupMXfGH5BoXP4BQ0XE5S8hdtuw4mDiyymtd\n/5+nTu9Sv3ZEyqfq9GYp+6zFCx8f9pQ38QgdrRCeOpXGWzIWEK7byzsBKvcIwKvd\nebAQD13LfwdZc/sWbUti0mkl4mv8cZ9p2QseNY6oKjmk/i3kFxwtRjlYj2JFu00E\n7zGxdczxks2pxRaKM6EgC77jfRIYRLcArIaI7gL/sLBhPj/Pz9lKA0zc+PvDifZk\nRJwf4d71GTiitDkd8/pTIHkMXgAoZ7d/TrTRBxJvlXabLs8TnamN5SM/h3QfPtTm\nXgmiEpS9FvYpE/f2vOk+bOSniKv5ySq6xw9fCDwWCUvi3F+tK0PMpzH4pHNtiiKY\npMz5c3o5BGRi/3HAvFPZcqTzViHrpi/ngXb3VaSopAltEasLK3hZUqTXSBlxb153\nLdZv2T6XSJuXuJq/0eqZ\n=JxKe\n-----END PGP SIGNATURE-----",
        "payload": "tree f2eb79a88a5ef8f9ba87a8f31094551e1cd368b0\nparent 9c3c9cdae3e20b5bdea91a0631edac5116bbc89f\nparent f97ab35fa9687fd5c110ad6cca5be5b4a5c2142d\nauthor MarcoFalke <falke.marco@gmail.com> 1506709432 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506709439 +0200\n\nMerge #11319: [qa] Fix error introduced into p2p-segwit.py, and prevent future similar errors\n\nf97ab35fa qa: Fix bug introduced in p2p-segwit.py (Suhas Daftuar)\na7820422e qa: Treat mininode p2p exceptions as fatal (Suhas Daftuar)\n\nPull request description:\n\n  #11121 inadvertently broke the constructor for the `TestNode()` object in `p2p-segwit.py`, silently breaking at least one of the tests.\n\n  Although the python code was raising exceptions due to a `TestNode()` object not existing (or having the right type), mininode was masking these from anyone running the test through the test_runner (like travis), because it catches all exceptions during message delivery and just prints a log message and continues.  Such \"graceful\" handling of errors is almost certainly something we don't want in our test suite, so the first commit here attempts to prevent that type of failure from ever being masked.\n\n  The second commit fixes the particular bug in `p2p-segwit.py`.\n\nTree-SHA512: b6646e3cb1e05c35c28e8899c44104bf2e2d0384643ca87042ab7f6ec0960d89f5bf25a7b95bab6e32d401c20a6018226160500f6ddceb923e81ffb04adb4f2f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3c9cdae3e20b5bdea91a0631edac5116bbc89f"
      },
      {
        "sha": "f97ab35fa9687fd5c110ad6cca5be5b4a5c2142d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97ab35fa9687fd5c110ad6cca5be5b4a5c2142d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f97ab35fa9687fd5c110ad6cca5be5b4a5c2142d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a9ef47559b6bc172dec8087f0c442749e8a5d4d1",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff4cd6075b12fb32b9a906deea3ed033e3f9560a/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff4cd6075b12fb32b9a906deea3ed033e3f9560a/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "patch": "@@ -32,8 +32,8 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def set_test_params(self):\n-        self.num_nodes = 3\n+    def __init__(self):\n+        super().__init__()\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):"
      },
      {
        "sha": "d072969d7f413ccbb4889719219349d65e3e313f",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff4cd6075b12fb32b9a906deea3ed033e3f9560a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff4cd6075b12fb32b9a906deea3ed033e3f9560a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "patch": "@@ -1502,6 +1502,7 @@ def deliver(self, conn, message):\n             except:\n                 print(\"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0]))\n+                raise\n \n     def get_deliver_sleep_time(self):\n         with mininode_lock:\n@@ -1702,13 +1703,10 @@ def handle_close(self):\n         self.cb.on_close(self)\n \n     def handle_read(self):\n-        try:\n-            t = self.recv(8192)\n-            if len(t) > 0:\n-                self.recvbuf += t\n-                self.got_data()\n-        except:\n-            pass\n+        t = self.recv(8192)\n+        if len(t) > 0:\n+            self.recvbuf += t\n+            self.got_data()\n \n     def readable(self):\n         return True\n@@ -1774,8 +1772,10 @@ def got_data(self):\n                     self.got_message(t)\n                 else:\n                     logger.warning(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n+                    raise ValueError(\"Unknown command: '%s'\" % (command))\n         except Exception as e:\n             logger.exception('got_data:', repr(e))\n+            raise\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:"
      }
    ]
  },
  {
    "sha": "b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2RmYzZjNGI4OWI2MmY5YmI3OWVhMDA5ZWUxMDNhNjI5OWFjMDA1",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-20T23:52:20Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-29T18:40:50Z"
      },
      "message": "[rpc] getblockchaininfo: add size_on_disk, prune_target_size, automatic_pruning\n\nFix pruneheight help text.\nMove fPruneMode block to match output ordering with help text.\nAdd functional tests for new fields in getblockchaininfo.",
      "tree": {
        "sha": "46c129303778821e49b1bd11de55ab07c62a07cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c129303778821e49b1bd11de55ab07c62a07cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4cd6075b12fb32b9a906deea3ed033e3f9560a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 58,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c9d46444ea69b83d5779f28ea1ecf2af8d4c6e45",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -1136,8 +1136,11 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"size_on_disk\\\": xxxxxx,   (numeric) the estimated size of the block and undo files on disk\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n+            \"  \\\"automatic_pruning\\\": xx,  (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n+            \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n@@ -1181,7 +1184,24 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n     obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n+    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    if (fPruneMode) {\n+        CBlockIndex* block = chainActive.Tip();\n+        assert(block);\n+        while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+            block = block->pprev;\n+        }\n+\n+        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+\n+        // if 0, execution bypasses the whole if block.\n+        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        if (automatic_pruning) {\n+            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+        }\n+    }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n@@ -1195,14 +1215,6 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n-    if (fPruneMode)\n-    {\n-        CBlockIndex *block = chainActive.Tip();\n-        while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA))\n-            block = block->pprev;\n-\n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n-    }\n     obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "48c323698f20954a7fcc19fef89298501e90ea68",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -3233,8 +3233,10 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n  */\n \n /* Calculate the amount of disk space the block & undo files currently use */\n-static uint64_t CalculateCurrentUsage()\n+uint64_t CalculateCurrentUsage()\n {\n+    LOCK(cs_LastBlockFile);\n+\n     uint64_t retval = 0;\n     for (const CBlockFileInfo &file : vinfoBlockFile) {\n         retval += file.nSize + file.nUndoSize;\n@@ -3245,6 +3247,8 @@ static uint64_t CalculateCurrentUsage()\n /* Prune a block file (modify associated database entries)*/\n void PruneOneBlockFile(const int fileNumber)\n {\n+    LOCK(cs_LastBlockFile);\n+\n     for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindex = it->second;\n         if (pindex->nFile == fileNumber) {\n@@ -4247,6 +4251,8 @@ std::string CBlockFileInfo::ToString() const\n \n CBlockFileInfo* GetBlockFileInfo(size_t n)\n {\n+    LOCK(cs_LastBlockFile);\n+\n     return &vinfoBlockFile.at(n);\n }\n "
      },
      {
        "sha": "75b897f3de639fcbaad0ee899d51ce4f4ab13d94",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -280,6 +280,9 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n \n+/** Calculate the amount of disk space the block & undo files currently use */\n+uint64_t CalculateCurrentUsage();\n+\n /**\n  *  Mark one block file as pruned.\n  */"
      },
      {
        "sha": "1918caf004b04d637f9ec95693da3fa72bba643d",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -24,6 +24,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n     assert_raises,\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n@@ -58,21 +60,43 @@ def _test_getblockchaininfo(self):\n             'headers',\n             'mediantime',\n             'pruned',\n+            'size_on_disk',\n             'softforks',\n             'verificationprogress',\n             'warnings',\n         ]\n         res = self.nodes[0].getblockchaininfo()\n-        # result should have pruneheight and default keys if pruning is enabled\n-        assert_equal(sorted(res.keys()), sorted(['pruneheight'] + keys))\n+\n+        # result should have these additional pruning keys if manual pruning is enabled\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning'] + keys))\n+\n+        # size_on_disk should be > 0\n+        assert_greater_than(res['size_on_disk'], 0)\n+\n         # pruneheight should be greater or equal to 0\n-        assert res['pruneheight'] >= 0\n+        assert_greater_than_or_equal(res['pruneheight'], 0)\n+\n+        # check other pruning fields given that prune=1\n+        assert res['pruned']\n+        assert not res['automatic_pruning']\n \n         self.restart_node(0, ['-stopatheight=207'])\n         res = self.nodes[0].getblockchaininfo()\n         # should have exact keys\n         assert_equal(sorted(res.keys()), keys)\n \n+        self.restart_node(0, ['-stopatheight=207', '-prune=550'])\n+        res = self.nodes[0].getblockchaininfo()\n+        # result should have these additional pruning keys if prune=550\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning', 'prune_target_size'] + keys))\n+\n+        # check related fields\n+        assert res['pruned']\n+        assert_equal(res['pruneheight'], 0)\n+        assert res['automatic_pruning']\n+        assert_equal(res['prune_target_size'], 576716800)\n+        assert_greater_than(res['size_on_disk'], 0)\n+\n     def _test_getchaintxstats(self):\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx"
      }
    ]
  },
  {
    "sha": "38c201f47c0bc388a05cdb35d6137150fa90193e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGMyMDFmNDdjMGJjMzg4YTA1Y2RiMzVkNjEzNzE1MGZhOTAxOTNl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T21:53:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T22:05:42Z"
      },
      "message": "Merge #11418: Add error string for CLEANSTACK script violation\n\ncee28fbc3 Add error string for CLEANSTACK script violation, preventing an \"unknown error\" if the CLEANSTACK error condition is set. (Mark Friedenbach)\n\nPull request description:\n\n  This prevents an unhelpful \"unknown error\" from being printed in test logs if the CLEANSTACK error condition is set.\n\nTree-SHA512: cd6764e930184aef3d662e40c67f2ea8aea8552a26d33a567d0315a19d707a82aa2afad9f48ecbb731aa5b77fbbfbd7a6a3a989fdb1424a1181350052ff2a9b5",
      "tree": {
        "sha": "04d787d9b10eb5e3464257e963cb69f3ef5579b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04d787d9b10eb5e3464257e963cb69f3ef5579b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38c201f47c0bc388a05cdb35d6137150fa90193e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZzsO2AAoJEKY26XYx92fgzXIP+QFYOx09OpIehLzL6GDXFdsf\nFoFhgw5K7oKXWDTJYTgh4sZaBqAkm2uX6DYTWbtWN7R8tdb1PAwMXHK9/CR6mQXu\nZ6COQcl0lDx053T9qL2JBmR6uvXzesTKaKABZ6/RNZJeTgdBb5e1xB3HTy25jXjp\n2xHJXoAkyAWlZltw2a1Xuhzk4gDeLGloGLRRmzrYLxmpePG/G4xMrXwTH25T1g7+\nNXo2fQmJzoP7r5QRdFbTU0iUPDI5NpAgwVRuFY0443OB3uXsoZ7o7HRispanrAkx\nT+iCWLBs6JBkBGdAgWC1YZdzQiitr+nzkhbK5OJOlquG2jm5gKP1UUGVuVoqca71\ntC4q6diMstqvJTfNvt7CiGWN92ItqESOdDnWBpuaMxdObuY3VV9/urbDIQmw5NWJ\n6/b/qYcWVMzkVXeRInnGupvX3vvv6zPxJmfUGGXoZyMcbtjzk1MmTTwLlmNbOYEQ\nluN89XWanS6T7lcSS/ZO5km8vlCXHi0shzTXkgaJZTeiAPGlkma1vrj08EPU73xq\nU7J1jPwvPHZ0NdYT73HuWV1/MZmuc9UNPd9xINkCY0eZZLbjqWY7eDD0L3pNqwtv\n2G9vOEqcIG4BEma5SWJl3JQv/SFKYhISZg8bEbDFIHipNc6fYIYXewZqxhD0vEY2\neqLAJ1dHWo4sB0UstAwz\n=FzoD\n-----END PGP SIGNATURE-----",
        "payload": "tree 04d787d9b10eb5e3464257e963cb69f3ef5579b1\nparent ff4cd6075b12fb32b9a906deea3ed033e3f9560a\nparent cee28fbc3f0555ca41bdeff4ceec29fa62257ab8\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1506722038 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1506722742 -0700\n\nMerge #11418: Add error string for CLEANSTACK script violation\n\ncee28fbc3 Add error string for CLEANSTACK script violation, preventing an \"unknown error\" if the CLEANSTACK error condition is set. (Mark Friedenbach)\n\nPull request description:\n\n  This prevents an unhelpful \"unknown error\" from being printed in test logs if the CLEANSTACK error condition is set.\n\nTree-SHA512: cd6764e930184aef3d662e40c67f2ea8aea8552a26d33a567d0315a19d707a82aa2afad9f48ecbb731aa5b77fbbfbd7a6a3a989fdb1424a1181350052ff2a9b5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c201f47c0bc388a05cdb35d6137150fa90193e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38c201f47c0bc388a05cdb35d6137150fa90193e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c201f47c0bc388a05cdb35d6137150fa90193e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4cd6075b12fb32b9a906deea3ed033e3f9560a"
      },
      {
        "sha": "cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cee28fbc3f0555ca41bdeff4ceec29fa62257ab8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c590f53e3c006afe0cc9befcd92fe0fb29ea1ee",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c201f47c0bc388a05cdb35d6137150fa90193e/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c201f47c0bc388a05cdb35d6137150fa90193e/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=38c201f47c0bc388a05cdb35d6137150fa90193e",
        "patch": "@@ -73,6 +73,8 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness version reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_PUBKEYTYPE:\n             return \"Public key is neither compressed or uncompressed\";\n+        case SCRIPT_ERR_CLEANSTACK:\n+            return \"Extra items left on stack after execution\";\n         case SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH:\n             return \"Witness program has incorrect length\";\n         case SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY:"
      }
    ]
  },
  {
    "sha": "763231051596b8e3455b839911ad6a3a1f1c3c74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjMyMzEwNTE1OTZiOGUzNDU1YjgzOTkxMWFkNmEzYTFmMWMzYzc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-30T08:10:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-30T08:10:46Z"
      },
      "message": "Merge #11391: Remove lxcbr0 lines from gitian-build.sh\n\n884913041 Remove lxcbr0 lines from gitian-build.sh (MeshCollider)\n\nPull request description:\n\n  The `gitian-build.sh` script crashes with an error when I tried to use it, @kallewoof also had this same issue:\n\n  \tlxcbr0: ERROR while getting interface flags: No such device\n  \tSIOCSIFADDR: No such device\n  \tlxcbr0: ERROR while getting interface flags: No such device\n\n  And then:\n\n  \tlxc-execute: failed to find gateway addresses\n  \tlxc-execute: failed to spawn 'gitian'\n  \t./bin/gbuild:21:in `system!': failed to run make-clean-vm --suite trusty --arch amd64 (RuntimeError)\n\n  I believe it's because of the two lines which this PR removes, I tested it and seems to work as expected now. These lines are unique to this script and aren't mentioned in `gitian-building.md` or `release-process.md`. We discussed it on IRC, @achow101 agrees removing these lines would probably fix it: https://botbot.me/freenode/bitcoin-core-dev/2017-09-19/?msg=91299782&page=2\n\n  Has anyone successfully used this script as-is? Or does everyone else manually run the builds/write their own script like I have up til this point?\n\nTree-SHA512: 0cffd3df307ad107fb1d4bae45094fc5002b56c2fe64f03642d968659fdc62f586ba249dbc540b69058b276f2456962e5bc4d665cab21ef1f561735eb78afcc2",
      "tree": {
        "sha": "f5059e0f03f6881ad669c54382b52a181841e796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5059e0f03f6881ad669c54382b52a181841e796"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/763231051596b8e3455b839911ad6a3a1f1c3c74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZz1GGAAoJENLqSFDnUoslrlUP/ibqWrDtJAQPQSm763PSCLZQ\nRPCuhXeWcn1AwHMnuVHtK756jiceD2SY5MWHomBZA+3H6Y+N3e+Vrz3kFz4tIRhy\nGV7ngbxyQd1wv2ZFqgaHPvGgyGiKDEb4Mlp9IOLBt72qhvGZzOgT51tXlDIfCBSN\nQ94j18Mox1RqSGhtVXuvvRASdS3ldn2nNb05odWvTLnwIgXtca/DWCKWoKAosYZv\n5UIgPg80JszEDaY8ZCalnkJnoRN+iqSFFv1f6qZxwOGndivxquIPnDQnFcgDTUaK\nQYLU9rpuJ/97NyxgJItHYHBONk0M/p1uk2Ccv0LZUV12KVTS0Z9+IY6wX6FGOe7C\nracK64DtKjwvHD9x82IpubH/Rk8w3Xt95J049yZuzO/c7jZiVNSh2KXW1WidiX3D\nFv2S7In064Xxc2FMmU3MRSIx4NN08cEucgLbmV5QzGaqv6DwEvApxVAt2qxxUPz7\nTDsK8yhsSbv8DCmTDn7VqnmtO1KX5g7RJ3hLk5A6NmMjg03OkcMkzSan/ILku3/f\n6+VNc5LaSi5R9kep1R12Y8ivLqj7PEtBChkMYQ86sASAm+S5V5yaMQRVwp7AoEBJ\nSesSaYtA7b/T96nBA+/FvHFPvdWSJ3CqmZLuy18QOamsk6tp8JqxC0cutbASi44F\nwYRaRzxf8r2wGOp081TH\n=pi3g\n-----END PGP SIGNATURE-----",
        "payload": "tree f5059e0f03f6881ad669c54382b52a181841e796\nparent 38c201f47c0bc388a05cdb35d6137150fa90193e\nparent 8849130415f69bb506950b0eb247e3e97c3cd1a3\nauthor MarcoFalke <falke.marco@gmail.com> 1506759040 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506759046 +0200\n\nMerge #11391: Remove lxcbr0 lines from gitian-build.sh\n\n884913041 Remove lxcbr0 lines from gitian-build.sh (MeshCollider)\n\nPull request description:\n\n  The `gitian-build.sh` script crashes with an error when I tried to use it, @kallewoof also had this same issue:\n\n  \tlxcbr0: ERROR while getting interface flags: No such device\n  \tSIOCSIFADDR: No such device\n  \tlxcbr0: ERROR while getting interface flags: No such device\n\n  And then:\n\n  \tlxc-execute: failed to find gateway addresses\n  \tlxc-execute: failed to spawn 'gitian'\n  \t./bin/gbuild:21:in `system!': failed to run make-clean-vm --suite trusty --arch amd64 (RuntimeError)\n\n  I believe it's because of the two lines which this PR removes, I tested it and seems to work as expected now. These lines are unique to this script and aren't mentioned in `gitian-building.md` or `release-process.md`. We discussed it on IRC, @achow101 agrees removing these lines would probably fix it: https://botbot.me/freenode/bitcoin-core-dev/2017-09-19/?msg=91299782&page=2\n\n  Has anyone successfully used this script as-is? Or does everyone else manually run the builds/write their own script like I have up til this point?\n\nTree-SHA512: 0cffd3df307ad107fb1d4bae45094fc5002b56c2fe64f03642d968659fdc62f586ba249dbc540b69058b276f2456962e5bc4d665cab21ef1f561735eb78afcc2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763231051596b8e3455b839911ad6a3a1f1c3c74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/763231051596b8e3455b839911ad6a3a1f1c3c74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763231051596b8e3455b839911ad6a3a1f1c3c74/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38c201f47c0bc388a05cdb35d6137150fa90193e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c201f47c0bc388a05cdb35d6137150fa90193e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38c201f47c0bc388a05cdb35d6137150fa90193e"
      },
      {
        "sha": "8849130415f69bb506950b0eb247e3e97c3cd1a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8849130415f69bb506950b0eb247e3e97c3cd1a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8849130415f69bb506950b0eb247e3e97c3cd1a3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8fdec21b0e88f19b380480e5341656828c1f998b",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/763231051596b8e3455b839911ad6a3a1f1c3c74/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/763231051596b8e3455b839911ad6a3a1f1c3c74/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=763231051596b8e3455b839911ad6a3a1f1c3c74",
        "patch": "@@ -179,8 +179,6 @@ done\n if [[ $lxc = true ]]\n then\n     export USE_LXC=1\n-    export LXC_BRIDGE=lxcbr0\n-    sudo ifconfig lxcbr0 up 10.0.2.2\n fi\n \n # Check for OSX SDK"
      }
    ]
  },
  {
    "sha": "e542728cde676f218c552d841d0af29b92f9800b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTQyNzI4Y2RlNjc2ZjIxOGM1NTJkODQxZDBhZjI5YjkyZjk4MDBi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-30T16:07:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-30T16:07:55Z"
      },
      "message": "Merge #11303: Fix estimatesmartfee rounding display issue\n\n1789e4675 Force explicit double -> int conversion for CFeeRate constructor (Matt Corallo)\n53a6590f4 Make float <-> int casts explicit outside of test, qt, CFeeRate (Matt Corallo)\n0b1b9148c Remove countMaskInv caching in bench framework (Matt Corallo)\n\nPull request description:\n\n  This fixes an issue where estimatesmartfee which matches at the min relay fee will return 999 sat/byte instead of 1000 sat/byte due to a float rounding issue. I went ahead and made all float <-> int conversion outside of test/qt explicit (test only had one or two more, Qt had quite a few, including many in the Qt headers themselves) and added overloads to CFeeRate to force callers to do an explicit round themselves. Easy to test with -Wfloat-conversion.\n\nTree-SHA512: 66087b08e5dfca67506da54ae057c2f9d86184415e8fa4fa0199e38839e06a3ce96c836fcb7593b7d960065f5240c594ff3a0cfa14333ac528421f5aeac835c9",
      "tree": {
        "sha": "992beca84e6a88affd99fa2caa9fed5747e5d40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/992beca84e6a88affd99fa2caa9fed5747e5d40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e542728cde676f218c552d841d0af29b92f9800b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZz8FbAAoJENLqSFDnUoslGF8P/jXKS3D2E0gbcZaVkRDJYqoy\nM2pNpjqA/VbJidhcgwOE7tYD/gIZNDBg0agIExiQxLVq1d5gf61LmRM/J5SMqRyS\nW9VnZ12n+IoFEoFZobLqGRTQFMMUQ++HbSRhHE71TP+Kja/yZ+P67lf1/pEC0s9j\nZoIVjpzg+DqE4zUMzph3/+BkVzAYwBh8sGud3rg4SmdKWINcRTdLXKSoDpFU3B7E\nIy/I8Vyc5/+ir+4BatK9XCqWXMFP3CnQRmhpaGHQaj9DEKJp/Vm50vJnl8TNI/gT\nH+zSck6iIjLDD7nHQOkLKsShuYmSoecO1uRJ6picPwerjeOZA0qC0nzYApGG4C/o\nioJTpxJWcAAuzgRbJcXT0I9VPRdiHC4SLycfhrPmk9uWD7tL76AmLUpkWzXsSCUe\nGIlEpGNQo+6bs3xQ+6LMIrNGCdj4oAWw7DAtId5KusEl6iJqlGT+kjuJIamHeLLY\nKBT7e22C4rsebD0jaWc/9/SdgOH3d4Txc1xyEycbUor0goZ0QQ6+/C3Bp7sPKF8H\nlq7l9XSvcAptmhYoa8awVZLTSEDn0sOPszCSnXDuOxKJVIey8uxOhqKN7cbuW5uJ\nzEr+cfA/pES+FR97wor1pbAvyKsPexuD1OLA+wKpFnuygsDBhw3P/qFXC9t3Dawk\nEymIp4xP0+BZehTPiRui\n=EbV2\n-----END PGP SIGNATURE-----",
        "payload": "tree 992beca84e6a88affd99fa2caa9fed5747e5d40c\nparent 763231051596b8e3455b839911ad6a3a1f1c3c74\nparent 1789e4675b17f274fcb0761321e6fd249a102f40\nauthor MarcoFalke <falke.marco@gmail.com> 1506787664 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506787675 +0200\n\nMerge #11303: Fix estimatesmartfee rounding display issue\n\n1789e4675 Force explicit double -> int conversion for CFeeRate constructor (Matt Corallo)\n53a6590f4 Make float <-> int casts explicit outside of test, qt, CFeeRate (Matt Corallo)\n0b1b9148c Remove countMaskInv caching in bench framework (Matt Corallo)\n\nPull request description:\n\n  This fixes an issue where estimatesmartfee which matches at the min relay fee will return 999 sat/byte instead of 1000 sat/byte due to a float rounding issue. I went ahead and made all float <-> int conversion outside of test/qt explicit (test only had one or two more, Qt had quite a few, including many in the Qt headers themselves) and added overloads to CFeeRate to force callers to do an explicit round themselves. Easy to test with -Wfloat-conversion.\n\nTree-SHA512: 66087b08e5dfca67506da54ae057c2f9d86184415e8fa4fa0199e38839e06a3ce96c836fcb7593b7d960065f5240c594ff3a0cfa14333ac528421f5aeac835c9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e542728cde676f218c552d841d0af29b92f9800b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e542728cde676f218c552d841d0af29b92f9800b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e542728cde676f218c552d841d0af29b92f9800b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763231051596b8e3455b839911ad6a3a1f1c3c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763231051596b8e3455b839911ad6a3a1f1c3c74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763231051596b8e3455b839911ad6a3a1f1c3c74"
      },
      {
        "sha": "1789e4675b17f274fcb0761321e6fd249a102f40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1789e4675b17f274fcb0761321e6fd249a102f40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1789e4675b17f274fcb0761321e6fd249a102f40"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 23,
      "deletions": 21
    },
    "files": [
      {
        "sha": "7b307d6f42381e7b27cbfb21c882b88688acf63d",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -55,21 +55,20 @@ bool benchmark::State::KeepRunning()\n     else {\n         now = gettimedouble();\n         double elapsed = now - lastTime;\n-        double elapsedOne = elapsed * countMaskInv;\n+        double elapsedOne = elapsed / (countMask + 1);\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n \n         // We only use relative values, so don't have to handle 64-bit wrap-around specially\n         nowCycles = perf_cpucycles();\n-        uint64_t elapsedOneCycles = (nowCycles - lastCycles) * countMaskInv;\n+        uint64_t elapsedOneCycles = (nowCycles - lastCycles) / (countMask + 1);\n         if (elapsedOneCycles < minCycles) minCycles = elapsedOneCycles;\n         if (elapsedOneCycles > maxCycles) maxCycles = elapsedOneCycles;\n \n         if (elapsed*128 < maxElapsed) {\n           // If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.\n           // The restart avoids including the overhead of this code in the measurement.\n           countMask = ((countMask<<3)|7) & ((1LL<<60)-1);\n-          countMaskInv = 1./(countMask+1);\n           count = 0;\n           minTime = std::numeric_limits<double>::max();\n           maxTime = std::numeric_limits<double>::min();\n@@ -81,7 +80,6 @@ bool benchmark::State::KeepRunning()\n           uint64_t newCountMask = ((countMask<<1)|1) & ((1LL<<60)-1);\n           if ((count & newCountMask)==0) {\n               countMask = newCountMask;\n-              countMaskInv = 1./(countMask+1);\n           }\n         }\n     }"
      },
      {
        "sha": "79109eaa5615123e7b196ff94bc1e96b4f00bfcb",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -41,7 +41,7 @@ namespace benchmark {\n         std::string name;\n         double maxElapsed;\n         double beginTime;\n-        double lastTime, minTime, maxTime, countMaskInv;\n+        double lastTime, minTime, maxTime;\n         uint64_t count;\n         uint64_t countMask;\n         uint64_t beginCycles;\n@@ -55,7 +55,6 @@ namespace benchmark {\n             minCycles = std::numeric_limits<uint64_t>::max();\n             maxCycles = std::numeric_limits<uint64_t>::min();\n             countMask = 1;\n-            countMaskInv = 1./(countMask + 1);\n         }\n         bool KeepRunning();\n     };"
      },
      {
        "sha": "3449cdd6990d5a3af10479ef8e7feea6fd53fc6e",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -20,10 +20,15 @@ class CFeeRate\n {\n private:\n     CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+\n public:\n     /** Fee rate of 0 satoshis per kB */\n     CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    template<typename I>\n+    CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\n+        // We've previously had bugs creep in from silent double->int conversion...\n+        static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n+    }\n     /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n     CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n     /**"
      },
      {
        "sha": "8056f385abf3091c66921ea943e1a978e1aef7c6",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -714,7 +714,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     if (median < 0)\n         return CFeeRate(0);\n \n-    return CFeeRate(median);\n+    return CFeeRate(llround(median));\n }\n \n unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n@@ -901,7 +901,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n \n     if (median < 0) return CFeeRate(0); // error condition\n \n-    return CFeeRate(median);\n+    return CFeeRate(llround(median));\n }\n \n \n@@ -1043,5 +1043,5 @@ CAmount FeeFilterRounder::round(CAmount currentMinFee)\n     if ((it != feeset.begin() && insecure_rand.rand32() % 3 != 0) || it == feeset.end()) {\n         it--;\n     }\n-    return *it;\n+    return static_cast<CAmount>(*it);\n }"
      },
      {
        "sha": "a3d3df26a3b4cdeef1e12db6c33c47f8c6dfcf36",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -146,7 +146,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n         if (stats.dPingTime > 0.0)\n             obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < std::numeric_limits<int64_t>::max()/1e6)\n+        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n             obj.push_back(Pair(\"minping\", stats.dMinPing));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));"
      },
      {
        "sha": "116210a297486adb03d9ea7f6069abcd8320a6bf",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -559,15 +559,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);"
      },
      {
        "sha": "776d3f36ca18a5209bb31401c46b9eea699dbecf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -981,7 +981,7 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     LOCK(cs);\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n-        return CFeeRate(rollingMinimumFeeRate);\n+        return CFeeRate(llround(rollingMinimumFeeRate));\n \n     int64_t time = GetTime();\n     if (time > lastRollingFeeUpdate + 10) {\n@@ -999,7 +999,7 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n             return CFeeRate(0);\n         }\n     }\n-    return std::max(CFeeRate(rollingMinimumFeeRate), incrementalRelayFee);\n+    return std::max(CFeeRate(llround(rollingMinimumFeeRate)), incrementalRelayFee);\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {"
      },
      {
        "sha": "929d2235883646fa901592000479ed55e11443d6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -507,7 +507,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }\n+    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      },
      {
        "sha": "f14278af3dcea12bc3ec1353068b9bdd23c81725",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e542728cde676f218c552d841d0af29b92f9800b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e542728cde676f218c552d841d0af29b92f9800b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e542728cde676f218c552d841d0af29b92f9800b",
        "patch": "@@ -409,11 +409,11 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n             {\n                 int64_t nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n-                pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime)));\n+                pMasterKey.second.nDeriveIterations = static_cast<unsigned int>(pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime))));\n \n                 nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n-                pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+                pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + static_cast<unsigned int>(pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime)))) / 2;\n \n                 if (pMasterKey.second.nDeriveIterations < 25000)\n                     pMasterKey.second.nDeriveIterations = 25000;\n@@ -615,11 +615,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     CCrypter crypter;\n     int64_t nStartTime = GetTimeMillis();\n     crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n-    kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n+    kMasterKey.nDeriveIterations = static_cast<unsigned int>(2500000 / ((double)(GetTimeMillis() - nStartTime)));\n \n     nStartTime = GetTimeMillis();\n     crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n-    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + static_cast<unsigned int>(kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime)))) / 2;\n \n     if (kMasterKey.nDeriveIterations < 25000)\n         kMasterKey.nDeriveIterations = 25000;"
      }
    ]
  },
  {
    "sha": "bb8376bbc3d96af727444f90e5f60d47105609dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjgzNzZiYmMzZDk2YWY3Mjc0NDRmOTBlNWY2MGQ0NzEwNTYwOWRj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-29T21:33:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-30T18:17:51Z"
      },
      "message": "Verify DBWrapper iterators are taking snapshots\n\nThe LevelDB docs seem to indicate that an iterator will not take\nsnapshots (even providing instructions on how to do so yourself).\nIn several of the places we use them, we assume snapshots to have\nbeen taken.\n\nIn order to make sure LevelDB doesn't change out from under us\n(and to prevent the next person who reads the docs from having the\nsame fright I did), verify that snapshots are taken in our tests.",
      "tree": {
        "sha": "c77c03c9559a52d645a1ff56e6cb291d368ccdcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c77c03c9559a52d645a1ff56e6cb291d368ccdcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8376bbc3d96af727444f90e5f60d47105609dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8376bbc3d96af727444f90e5f60d47105609dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8376bbc3d96af727444f90e5f60d47105609dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8376bbc3d96af727444f90e5f60d47105609dc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4cd6075b12fb32b9a906deea3ed033e3f9560a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "efddafe17eac293f1fec0f161c07b53f2bfcb248",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8376bbc3d96af727444f90e5f60d47105609dc/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8376bbc3d96af727444f90e5f60d47105609dc/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=bb8376bbc3d96af727444f90e5f60d47105609dc",
        "patch": "@@ -204,19 +204,31 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n-        BOOST_CHECK(dbw.Write(key, value));\n+        if (!(x & 1)) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n+    // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n+\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<256; ++x) {\n+        for (int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n             if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n                 break;\n             BOOST_CHECK(it->GetKey(key));\n+            if (x & 1) {\n+                BOOST_CHECK_EQUAL(key, x + 1);\n+                continue;\n+            }\n             BOOST_CHECK(it->GetValue(value));\n             BOOST_CHECK_EQUAL(key, x);\n             BOOST_CHECK_EQUAL(value, x*x);"
      }
    ]
  },
  {
    "sha": "92848e5058c7667c61c358ea2c46f07a6edc468b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Mjg0OGU1MDU4Yzc2NjdjNjFjMzU4ZWEyYzQ2ZjA3YTZlZGM0Njhi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-30T21:43:55Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-30T21:43:55Z"
      },
      "message": "Remove unused fTry from push_lock",
      "tree": {
        "sha": "3b9fc019e227a68b917b5c29a7348a182e01093b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b9fc019e227a68b917b5c29a7348a182e01093b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92848e5058c7667c61c358ea2c46f07a6edc468b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92848e5058c7667c61c358ea2c46f07a6edc468b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92848e5058c7667c61c358ea2c46f07a6edc468b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92848e5058c7667c61c358ea2c46f07a6edc468b/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a72003d794f39230db476d4f358eb244b7cb2d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a72003d794f39230db476d4f358eb244b7cb2d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a72003d794f39230db476d4f358eb244b7cb2d36"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "87024ccdf2810d726234e18c26f6cec259fab217",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92848e5058c7667c61c358ea2c46f07a6edc468b/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92848e5058c7667c61c358ea2c46f07a6edc468b/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=92848e5058c7667c61c358ea2c46f07a6edc468b",
        "patch": "@@ -98,7 +98,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n     assert(false);\n }\n \n-static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n+static void push_lock(void* c, const CLockLocation& locklocation)\n {\n     if (lockstack.get() == nullptr)\n         lockstack.reset(new LockStack);\n@@ -130,7 +130,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry));\n }\n \n void LeaveCritical()"
      }
    ]
  },
  {
    "sha": "fafff1220cf798e25f02cdd8affb70506dd366cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZmZjEyMjBjZjc5OGUyNWYwMmNkZDhhZmZiNzA1MDZkZDM2NmNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-01T09:19:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-01T09:22:07Z"
      },
      "message": "qa: Restore bitcoin-util-test py2 compatibility",
      "tree": {
        "sha": "0d9fa59ed73ae3a0df5f1705a8692b048499fcdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d9fa59ed73ae3a0df5f1705a8692b048499fcdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafff1220cf798e25f02cdd8affb70506dd366cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafff1220cf798e25f02cdd8affb70506dd366cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafff1220cf798e25f02cdd8affb70506dd366cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafff1220cf798e25f02cdd8affb70506dd366cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1544511e8c485bc5bc5d0c639d65ff7b80f61a0b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafff1220cf798e25f02cdd8affb70506dd366cc/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafff1220cf798e25f02cdd8affb70506dd366cc/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fafff1220cf798e25f02cdd8affb70506dd366cc",
        "patch": "@@ -148,7 +148,7 @@ bitcoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(top_builddir)/test/util/bitcoin-util-test.py\n+\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "ef34955d90904c2176b8eef443d54b1b0ae957a5",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafff1220cf798e25f02cdd8affb70506dd366cc/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafff1220cf798e25f02cdd8affb70506dd366cc/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=fafff1220cf798e25f02cdd8affb70506dd366cc",
        "patch": "@@ -9,9 +9,14 @@\n \n Can also be run manually.\"\"\"\n \n+from __future__ import division,print_function,unicode_literals\n+\n import argparse\n import binascii\n-import configparser\n+try:\n+    import configparser\n+except ImportError:\n+    import ConfigParser as configparser\n import difflib\n import json\n import logging\n@@ -22,7 +27,9 @@\n \n def main():\n     config = configparser.ConfigParser()\n-    config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n+    config.optionxform = str\n+    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\")))\n+    env_conf = dict(config.items('environment'))\n \n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n@@ -37,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(config[\"environment\"][\"SRCDIR\"] + \"/test/util/data\", \"bitcoin-util-test.json\", config[\"environment\"])\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "fae2673d5d8dbb356423aa584a96d3ac367b5716",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWUyNjczZDVkOGRiYjM1NjQyM2FhNTg0YTk2ZDNhYzM2N2I1NzE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-01T14:42:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-01T14:46:56Z"
      },
      "message": "qa: check-rpc-mapping must not run on empty lists",
      "tree": {
        "sha": "05e0c2944f7d6e9a8ad9c93b51c0e5816aafde8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e0c2944f7d6e9a8ad9c93b51c0e5816aafde8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae2673d5d8dbb356423aa584a96d3ac367b5716",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae2673d5d8dbb356423aa584a96d3ac367b5716",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae2673d5d8dbb356423aa584a96d3ac367b5716",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae2673d5d8dbb356423aa584a96d3ac367b5716/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e542728cde676f218c552d841d0af29b92f9800b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e542728cde676f218c552d841d0af29b92f9800b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e542728cde676f218c552d841d0af29b92f9800b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e96852c5c26c78040ec173c2a14f5869218e35c",
        "filename": "contrib/devtools/check-rpc-mappings.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae2673d5d8dbb356423aa584a96d3ac367b5716/contrib/devtools/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae2673d5d8dbb356423aa584a96d3ac367b5716/contrib/devtools/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-rpc-mappings.py?ref=fae2673d5d8dbb356423aa584a96d3ac367b5716",
        "patch": "@@ -63,7 +63,7 @@ def process_commands(fname):\n                     else:\n                         args = []\n                     cmds.append(RPCCommand(name, args))\n-    assert not in_rpcs, \"Something went wrong with parsing the C++ file: update the regexps\"\n+    assert not in_rpcs and cmds, \"Something went wrong with parsing the C++ file: update the regexps\"\n     return cmds\n \n def process_mapping(fname):\n@@ -86,7 +86,7 @@ def process_mapping(fname):\n                     idx = int(m.group(2))\n                     argname = parse_string(m.group(3))\n                     cmds.append((name, idx, argname))\n-    assert not in_rpcs\n+    assert not in_rpcs and cmds\n     return cmds\n \n def main():"
      }
    ]
  },
  {
    "sha": "4f890ba6bc8caba5394c7a5388d7f07959ced78b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Zjg5MGJhNmJjOGNhYmE1Mzk0YzdhNTM4OGQ3ZjA3OTU5Y2VkNzhi",
    "commit": {
      "author": {
        "name": "Donal OConnor",
        "email": "donaloconnor@gmail.com",
        "date": "2017-09-05T20:26:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-02T10:28:53Z"
      },
      "message": "Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system",
      "tree": {
        "sha": "7f40c64d4350ff09c6f52e979e7fa547c45d6fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f40c64d4350ff09c6f52e979e7fa547c45d6fdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f890ba6bc8caba5394c7a5388d7f07959ced78b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnSFOUACgkQLuufXMCV\nJsFyFxAAmeRfow/GzEMJVIHcGNuclOfnOzGDyla7bWy9FtQrbHUpxr5M2jUiouSe\nbIFJSQTKPaZYNtXFDexJRaea56pKOSZ44SaECcAu7+8IcxfbD8g1vIEA/wg/vnRF\ny6V/zrYFKQouK1j7m+02pkvuu6h7ph3hdnhWYDkhuSU+hGs23tjziO3s6UBwXcP9\nQXUSH6CkyPDbEvBCk27k8M8LZ/ny7WiUf2h+JuTURkWdGMqEmuJqjynoWYzV406G\nzZVfrPbn4u6gSSiQCCO8zjMS5cbdVv82dSg6xhG2qzdwlGJnCd5Mgqw+TiRRh2Fk\nCe3Dbzt+lKgVkPMZ0kTGNwe/wzx6CqgqPcRH2RJl+N6XX2deoYsw7q1MCkHxfMfl\nQz4cB7oLiuz0IJ6jOsFcBQlE5MBL7Xj6uc3e6+/Z4IC8yph2n9l7MyPhyp7RSSmb\nTIxxvvh21bouV4pxLImyaO/1m+LEopQl8docRlVhXgIa5CQ3tFb68LD9EtBdEZIN\n8Y+j2msojx4ZsKLazCMNYQYC7v/KbSJcrGOQUmPlGvYhYY9cMZYyEZhJGIDmMLkZ\nPiI1ogdJs1Dv+RnwPO7qEeI3cjRY1YO3ZnOU8buQhljb3HiUw0TzaOxDuy8v6iKz\nJIGfiMOkZfYYANrH8cyU+yIvFbH04Hs5mwOD/pE8YdRNS/JctkY=\n=o9FM\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f40c64d4350ff09c6f52e979e7fa547c45d6fdd\nparent e542728cde676f218c552d841d0af29b92f9800b\nauthor Donal OConnor <donaloconnor@gmail.com> 1504643180 +0100\ncommitter fanquake <fanquake@gmail.com> 1506940133 +0800\n\nAdd new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f890ba6bc8caba5394c7a5388d7f07959ced78b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f890ba6bc8caba5394c7a5388d7f07959ced78b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f890ba6bc8caba5394c7a5388d7f07959ced78b/comments",
    "author": {
      "login": "donaloconnor",
      "id": 6394033,
      "node_id": "MDQ6VXNlcjYzOTQwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donaloconnor",
      "html_url": "https://github.com/donaloconnor",
      "followers_url": "https://api.github.com/users/donaloconnor/followers",
      "following_url": "https://api.github.com/users/donaloconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/donaloconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
      "repos_url": "https://api.github.com/users/donaloconnor/repos",
      "events_url": "https://api.github.com/users/donaloconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e542728cde676f218c552d841d0af29b92f9800b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e542728cde676f218c552d841d0af29b92f9800b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e542728cde676f218c552d841d0af29b92f9800b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57e2d6834229a76c37406d34eb2fdd364ed63813",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f890ba6bc8caba5394c7a5388d7f07959ced78b/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f890ba6bc8caba5394c7a5388d7f07959ced78b/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=4f890ba6bc8caba5394c7a5388d7f07959ced78b",
        "patch": "@@ -72,6 +72,7 @@ To build executables for Windows 64-bit, install the following dependencies:\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=x86_64-w64-mingw32\n     cd ..\n@@ -87,6 +88,7 @@ To build executables for Windows 32-bit, install the following dependencies:\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=i686-w64-mingw32\n     cd .."
      }
    ]
  },
  {
    "sha": "fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU2MGUzMzg2MzliM2EwOWQyZjI2ZDhlYjVmZWIzYmI1NzZiMWZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T11:35:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T11:30:39Z"
      },
      "message": "qa: Fix lcov for out-of-tree builds",
      "tree": {
        "sha": "eef4e60cb5c234e77a8ea341b84a903f19065ee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eef4e60cb5c234e77a8ea341b84a903f19065ee3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae2673d5d8dbb356423aa584a96d3ac367b5716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae2673d5d8dbb356423aa584a96d3ac367b5716",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae2673d5d8dbb356423aa584a96d3ac367b5716"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "81c84a8af40cc4bc9b43b0001f37bd38f90cce30",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
        "patch": "@@ -1231,6 +1231,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n+AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n "
      }
    ]
  },
  {
    "sha": "c641ccac5bd89ce3b908f0939bcb6414d77a2141",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjQxY2NhYzViZDg5Y2UzYjkwOGYwOTM5YmNiNjQxNGQ3N2EyMTQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:39:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:40:48Z"
      },
      "message": "Merge #11422: qa: Verify DBWrapper iterators are taking snapshots\n\nbb8376b Verify DBWrapper iterators are taking snapshots (Matt Corallo)\n\nPull request description:\n\n  The LevelDB docs seem to indicate that an iterator will not take\n  snapshots (even providing instructions on how to do so yourself).\n  In several of the places we use them, we assume snapshots to have\n  been taken.\n\n  In order to make sure LevelDB doesn't change out from under us\n  (and to prevent the next person who reads the docs from having the\n  same fright I did), verify that snapshots are taken in our tests.\n\nTree-SHA512: 54f24dabc294962e9c20882f61809604421a661208d1568bb107102248603e8e7c12e929ccb0812a73d4e4f23fea61f1b48e7cc24da5a7260f1d14d89ba88cd6",
      "tree": {
        "sha": "d70a8f96c9c1d0b441dc3009d50542a38e4e3cfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d70a8f96c9c1d0b441dc3009d50542a38e4e3cfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c641ccac5bd89ce3b908f0939bcb6414d77a2141",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0jPQAAoJEB5K7WKYbNJdXaEIALI/mkj+3AOVA+mi6HVSDzRg\nMX33pLNfc/lag3vJq2IekV/JML8TagkOILkimvG9w9yjIxV/8KikFVHqkISxTHZE\nPcEgg6mwEWRcJurSFiv7ynl3btZq4cJ+s95hV1nWGT5Bew3YNjdmXKAa5GCfI90N\nkXgPRjvPDlB3THnvokREvZ65X/nE9zu91QUcN3lrXomZcXendBCDmFQ9neuEesgG\nLBHkXmC84mlIp+KFH5F0+hLuis0fTthQjy7hZqwH5EBJ4IpcVdh9A04astNUqtP8\ngasR/n+ZdISAam9dJkneypvKRsigY1Dw2s+NFpM108t34tBwEjPBQK5I4kq5nzs=\n=mgwh\n-----END PGP SIGNATURE-----",
        "payload": "tree d70a8f96c9c1d0b441dc3009d50542a38e4e3cfe\nparent e542728cde676f218c552d841d0af29b92f9800b\nparent bb8376bbc3d96af727444f90e5f60d47105609dc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506947999 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506948048 +0200\n\nMerge #11422: qa: Verify DBWrapper iterators are taking snapshots\n\nbb8376b Verify DBWrapper iterators are taking snapshots (Matt Corallo)\n\nPull request description:\n\n  The LevelDB docs seem to indicate that an iterator will not take\n  snapshots (even providing instructions on how to do so yourself).\n  In several of the places we use them, we assume snapshots to have\n  been taken.\n\n  In order to make sure LevelDB doesn't change out from under us\n  (and to prevent the next person who reads the docs from having the\n  same fright I did), verify that snapshots are taken in our tests.\n\nTree-SHA512: 54f24dabc294962e9c20882f61809604421a661208d1568bb107102248603e8e7c12e929ccb0812a73d4e4f23fea61f1b48e7cc24da5a7260f1d14d89ba88cd6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c641ccac5bd89ce3b908f0939bcb6414d77a2141",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c641ccac5bd89ce3b908f0939bcb6414d77a2141",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c641ccac5bd89ce3b908f0939bcb6414d77a2141/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e542728cde676f218c552d841d0af29b92f9800b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e542728cde676f218c552d841d0af29b92f9800b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e542728cde676f218c552d841d0af29b92f9800b"
      },
      {
        "sha": "bb8376bbc3d96af727444f90e5f60d47105609dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8376bbc3d96af727444f90e5f60d47105609dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8376bbc3d96af727444f90e5f60d47105609dc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "efddafe17eac293f1fec0f161c07b53f2bfcb248",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c641ccac5bd89ce3b908f0939bcb6414d77a2141/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c641ccac5bd89ce3b908f0939bcb6414d77a2141/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=c641ccac5bd89ce3b908f0939bcb6414d77a2141",
        "patch": "@@ -204,19 +204,31 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n-        BOOST_CHECK(dbw.Write(key, value));\n+        if (!(x & 1)) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n+    // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n+\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<256; ++x) {\n+        for (int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n             if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n                 break;\n             BOOST_CHECK(it->GetKey(key));\n+            if (x & 1) {\n+                BOOST_CHECK_EQUAL(key, x + 1);\n+                continue;\n+            }\n             BOOST_CHECK(it->GetValue(value));\n             BOOST_CHECK_EQUAL(key, x);\n             BOOST_CHECK_EQUAL(value, x*x);"
      }
    ]
  },
  {
    "sha": "10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGJlZTBkZDRmMzdlYjZjYjdhMGYxZDU2NWZhMGZlY2Y4MTA5YzM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:46:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:46:47Z"
      },
      "message": "Merge #11284: Fix invalid memory access in CScript::operator+= (guidovranken, ajtowns)\n\nd601f16 Fix invalid memory access in CScript::operator+= (Anthony Towns)\n\nPull request description:\n\n  This is a fix for #11114 -- invoking \"s += s\" gets turned into \"s.insert(s.end(), s.begin(), s.end())\" which can result in an invalid memory access is s.capacity() < 2*s.size() (because s gets resized and possibly moved, so s.begin() and s.end() become invalid references when reading the values to be appended).\n\n  The fix is straightforward: reserve enough space in advance, so that insert() doesn't need to resize and thus its arguments remain valid.\n\n  A simple test case is added as well; though you probably need to run it via valgrind to actually catch the problem when it's not fixed...\n\nTree-SHA512: 4720d0c17463fdc43b344c45fe603423d20b30d48da1b9d85eeedc505d7f34db1ed5495ef1556459ae962a94717e3c6e8fc441763771901efea210d01322b7ef",
      "tree": {
        "sha": "3bbece4ac1b0adf8ce150157902c258754922502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bbece4ac1b0adf8ce150157902c258754922502"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0jU3AAoJEB5K7WKYbNJdalUIAIJpz7qV1jFr+tpcp2zxs/Fd\nbwYqXfDAbmHXobv1hBPxT4xGZ8LKPOUUpK3/lc3a0dzUJI6PnOIxYBf9RTxs+YaF\nRk9wTXKpBFz4r+xhdgw3dIpECRk73KMQKe4ogT/H0OlPqsUrjsVwyQ9m7T0ArNQx\nsRJPUWkyF14puZ0quqQqGgQupBDqTmUk5GSRnOTS68B1q2L56pjE9PjqsaQUYbw2\nOEBrki4XBWr2+RP3/YTHplsgG8FWbYylpKthXVMdH9NKBmMoynzZ5kF5fMbzzbjB\nRSLVFGsO0zlHpzvWceDXpcS51vnLDHSf28t3uuh/gdvB67eKy93S4yh797sRtCs=\n=ZXnn\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bbece4ac1b0adf8ce150157902c258754922502\nparent c641ccac5bd89ce3b908f0939bcb6414d77a2141\nparent d601f16621e55c2f174afea2c5d7d1c9a0c0b969\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506948376 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506948407 +0200\n\nMerge #11284: Fix invalid memory access in CScript::operator+= (guidovranken, ajtowns)\n\nd601f16 Fix invalid memory access in CScript::operator+= (Anthony Towns)\n\nPull request description:\n\n  This is a fix for #11114 -- invoking \"s += s\" gets turned into \"s.insert(s.end(), s.begin(), s.end())\" which can result in an invalid memory access is s.capacity() < 2*s.size() (because s gets resized and possibly moved, so s.begin() and s.end() become invalid references when reading the values to be appended).\n\n  The fix is straightforward: reserve enough space in advance, so that insert() doesn't need to resize and thus its arguments remain valid.\n\n  A simple test case is added as well; though you probably need to run it via valgrind to actually catch the problem when it's not fixed...\n\nTree-SHA512: 4720d0c17463fdc43b344c45fe603423d20b30d48da1b9d85eeedc505d7f34db1ed5495ef1556459ae962a94717e3c6e8fc441763771901efea210d01322b7ef\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c641ccac5bd89ce3b908f0939bcb6414d77a2141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c641ccac5bd89ce3b908f0939bcb6414d77a2141",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c641ccac5bd89ce3b908f0939bcb6414d77a2141"
      },
      {
        "sha": "d601f16621e55c2f174afea2c5d7d1c9a0c0b969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d601f16621e55c2f174afea2c5d7d1c9a0c0b969",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d601f16621e55c2f174afea2c5d7d1c9a0c0b969"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a9206054339f2afb60363c271f37802688f55a1",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
        "patch": "@@ -420,6 +420,7 @@ class CScript : public CScriptBase\n \n     CScript& operator+=(const CScript& b)\n     {\n+        reserve(size() + b.size());\n         insert(end(), b.begin(), b.end());\n         return *this;\n     }"
      },
      {
        "sha": "011a5db795255dca0fd7430dc9e8a5379b33f824",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
        "patch": "@@ -1451,4 +1451,21 @@ BOOST_AUTO_TEST_CASE(script_HasValidOps)\n     BOOST_CHECK(!script.HasValidOps());\n }\n \n+BOOST_AUTO_TEST_CASE(script_can_append_self)\n+{\n+    CScript s, d;\n+\n+    s = ScriptFromHex(\"00\");\n+    s += s;\n+    d = ScriptFromHex(\"0000\");\n+    BOOST_CHECK(s == d);\n+\n+    // check doubling a script that's large enough to require reallocation\n+    static const char hex[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n+    s = CScript() << ParseHex(hex) << OP_CHECKSIG;\n+    d = CScript() << ParseHex(hex) << OP_CHECKSIG << ParseHex(hex) << OP_CHECKSIG;\n+    s += s;\n+    BOOST_CHECK(s == d);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTdhYmE2Y2U3ZGE4NjQyZWU2OTMxYWUzN2QzM2JmYTI1ZjNkZmQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:48:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:48:59Z"
      },
      "message": "Merge #11399: Fix bip68-sequence rpc test\n\n49f869f Fix bip68-sequence rpc test (Johnson Lau)\n\nPull request description:\n\n  The test mined 1 extra block for the ACTIVE state. Test added to catch the right moment of LOCKED_IN->ACTIVE transaction\n\nTree-SHA512: a42477cf0b137e7e3b7c6c7b2530101cfad4e4f59866170b8fc0d655c43b3144aad6bca4287a4a8df4c28d7cf08d3f8df166975ad2e8dcb7d2cc15de60cf11cd",
      "tree": {
        "sha": "c4ee4b82b3848162bfc38dd6096d4ffe41550e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4ee4b82b3848162bfc38dd6096d4ffe41550e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0jW7AAoJEB5K7WKYbNJdN7gH/i/xsctXHWo/BEJyD0npAkX7\nPJOJxMjGGDdu8xXk9Ls9WiyMjIGem7rpjAEG8sVSGbqobAJ4QimsDv/eJq4Pe4Yh\n08iPAIOzsZDV1b2+KzsghzjxpsAH0+wFuNHyCvQ0mAU9PO5PyD6T+oU122feAFZU\n8pjt+I3+tpoJpq+DbRHIBfZLZhFQDAqmA4vJdYZodoip8mTCryzcVzXDZo9RO4HA\nhPD4Oc5ylnMjT1+JlxPmKu2sDNC6QrQ1CeSyoYwAdZsa0S+Qn4LqMC4FajDrNeBC\nWH44YC4XUAjfhXRVH5T3wErLi1VQq/fO2fMrMGw78XgUNBXR4qNj60LF/BywD9A=\n=dVdi\n-----END PGP SIGNATURE-----",
        "payload": "tree c4ee4b82b3848162bfc38dd6096d4ffe41550e11\nparent 10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35\nparent 49f869fe91716785b3276925d64bf8955feff69f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506948517 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506948539 +0200\n\nMerge #11399: Fix bip68-sequence rpc test\n\n49f869f Fix bip68-sequence rpc test (Johnson Lau)\n\nPull request description:\n\n  The test mined 1 extra block for the ACTIVE state. Test added to catch the right moment of LOCKED_IN->ACTIVE transaction\n\nTree-SHA512: a42477cf0b137e7e3b7c6c7b2530101cfad4e4f59866170b8fc0d655c43b3144aad6bca4287a4a8df4c28d7cf08d3f8df166975ad2e8dcb7d2cc15de60cf11cd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35"
      },
      {
        "sha": "49f869fe91716785b3276925d64bf8955feff69f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49f869fe91716785b3276925d64bf8955feff69f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49f869fe91716785b3276925d64bf8955feff69f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "74f51d8cfb35851350e15c3d0c8f405283e47cce",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
        "patch": "@@ -369,11 +369,14 @@ def test_bip68_not_consensus(self):\n \n     def activateCSV(self):\n         # activation should happen at block height 432 (3 periods)\n+        # getblockchaininfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n-        assert(height < min_activation_height)\n-        self.nodes[0].generate(min_activation_height-height)\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        assert_greater_than(min_activation_height - height, 2)\n+        self.nodes[0].generate(min_activation_height - height - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      }
    ]
  },
  {
    "sha": "058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNThjMGY5OTZiNzJlN2Q0ZGM0ZWE4MDMwOWZkMWE0MzBjZGRhYmIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:54:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T12:54:49Z"
      },
      "message": "Merge #11432: Remove unused fTry from push_lock\n\n92848e5 Remove unused fTry from push_lock (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  After #9674 (618ee92) the `fTry` argument in `push_lock` is no longer needed.\n\nTree-SHA512: a461f2ca9e590a9dfcc7814d9852d85f03712cb4735176b8b2db0e8dc731597c2a515650998ca7d53cf5a0c48b408a974a0704897036c6ed74788fc24c5e73ae",
      "tree": {
        "sha": "37124bb6fe1a8254113c2d5d35f7123df03559f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37124bb6fe1a8254113c2d5d35f7123df03559f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0jcZAAoJEB5K7WKYbNJdhdgIAMuV7TyoCltBV1x6g2ZMIbiL\npd14ZiR9kNrIYXKE59pEsEK0/Oi29/ERCb3M88BOP9PT2HR0P9kxnWnrfzwyttyH\nPFHHonixW0Tg9ZFGXXBllbUSW7nK8BgYMG2on94PouDiePMbrzO2Xruu5uA2Om7r\nXdnZkkKPKM3I8z0zscq5LMl3u/s2U0qtPsSkgYGKx7tkxAiKfeijzfdwM1QAIiB5\n1AbNuUFlU6Pjjf5z5L9XOI8cblmD6hsIdlQlWlc6St4TmQJblIT6cdXdgV+oud6A\nosDjYKmySdLCTonHThtwf1GN43IkQpTwsJynxuBlwLL+u0pqCeJWQT7OvINwMpE=\n=vz68\n-----END PGP SIGNATURE-----",
        "payload": "tree 37124bb6fe1a8254113c2d5d35f7123df03559f2\nparent 557aba6ce7da8642ee6931ae37d33bfa25f3dfd0\nparent 92848e5058c7667c61c358ea2c46f07a6edc468b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506948882 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506948889 +0200\n\nMerge #11432: Remove unused fTry from push_lock\n\n92848e5 Remove unused fTry from push_lock (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  After #9674 (618ee92) the `fTry` argument in `push_lock` is no longer needed.\n\nTree-SHA512: a461f2ca9e590a9dfcc7814d9852d85f03712cb4735176b8b2db0e8dc731597c2a515650998ca7d53cf5a0c48b408a974a0704897036c6ed74788fc24c5e73ae\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058c0f996b72e7d4dc4ea80309fd1a430cddabb3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/557aba6ce7da8642ee6931ae37d33bfa25f3dfd0"
      },
      {
        "sha": "92848e5058c7667c61c358ea2c46f07a6edc468b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92848e5058c7667c61c358ea2c46f07a6edc468b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92848e5058c7667c61c358ea2c46f07a6edc468b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "87024ccdf2810d726234e18c26f6cec259fab217",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058c0f996b72e7d4dc4ea80309fd1a430cddabb3/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058c0f996b72e7d4dc4ea80309fd1a430cddabb3/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
        "patch": "@@ -98,7 +98,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n     assert(false);\n }\n \n-static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n+static void push_lock(void* c, const CLockLocation& locklocation)\n {\n     if (lockstack.get() == nullptr)\n         lockstack.reset(new LockStack);\n@@ -130,7 +130,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry));\n }\n \n void LeaveCritical()"
      }
    ]
  },
  {
    "sha": "c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWM3N2JkY2M2MzI5OTdkYmQxYjc2MzNjMmYzZjM1MDVjZDg2NGRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T13:04:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T13:04:43Z"
      },
      "message": "Merge #11193: [Qt] Terminate string *pszExePath after readlink and without using memset\n\n3a4401a [Qt] Terminate string *pszExePath after readlink and without using memset (practicalswift)\n\nPull request description:\n\n  Terminate string `*pszExePath` after `readlink` and before passing to operator `<<`.\n\n  * `ssize_t readlink(const char *pathname, char *buf, size_t bufsiz)` does not append a null byte to `buf`.\n  * Operator `<<` expects a null-terminated string.\n\nTree-SHA512: fc18844bb23059fead8db0cb9b4b4ba6188f58e3f19ab4719c2737cc5dd6df23ae7d4804ef2820d39b334204a48ee3de1d202c272bcd156e60761af2fcb9349d",
      "tree": {
        "sha": "5eec0cd8316324db7cc43c84460afa06cfece615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eec0cd8316324db7cc43c84460afa06cfece615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0jlrAAoJEB5K7WKYbNJdJusIAMRBaycK9ArHsqnxLsyOiUW2\nPAPyBkfEQclCIYo2DSz7A+A1pU0I+MtSgfz3wGIsmy6DafSigRMmcIDjhGxGr4kN\noZiJk0PFqV5/YYcsuj1ZHraBqudfvr0vMAxDXTgLGDWHTXDqvWkcwgXz/CWCG2aX\natS2mineUuAlh35E6wwjIP6bPk4M5Aq4t/GEacw67S6WcupZaCuAaFD5i9V1+gQw\nZx8I9VNKCft7q1Y+8a0ynDcarZv296P41bAkBpxcIAJKYKCA8CUmSaaTp3Ep+LXt\nQLwtuOsxq/1khSSlUr+UtwYmqVip2DeTUmXgCQtG1kVrU6smB0cYWBJX24lkTHk=\n=FM43\n-----END PGP SIGNATURE-----",
        "payload": "tree 5eec0cd8316324db7cc43c84460afa06cfece615\nparent 058c0f996b72e7d4dc4ea80309fd1a430cddabb3\nparent 3a4401a6b899694d25b5ac89c8068e45711bab36\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506949461 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506949483 +0200\n\nMerge #11193: [Qt] Terminate string *pszExePath after readlink and without using memset\n\n3a4401a [Qt] Terminate string *pszExePath after readlink and without using memset (practicalswift)\n\nPull request description:\n\n  Terminate string `*pszExePath` after `readlink` and before passing to operator `<<`.\n\n  * `ssize_t readlink(const char *pathname, char *buf, size_t bufsiz)` does not append a null byte to `buf`.\n  * Operator `<<` expects a null-terminated string.\n\nTree-SHA512: fc18844bb23059fead8db0cb9b4b4ba6188f58e3f19ab4719c2737cc5dd6df23ae7d4804ef2820d39b334204a48ee3de1d202c272bcd156e60761af2fcb9349d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5c77bdcc632997dbd1b7633c2f3f3505cd864df/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058c0f996b72e7d4dc4ea80309fd1a430cddabb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/058c0f996b72e7d4dc4ea80309fd1a430cddabb3"
      },
      {
        "sha": "3a4401a6b899694d25b5ac89c8068e45711bab36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4401a6b899694d25b5ac89c8068e45711bab36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4401a6b899694d25b5ac89c8068e45711bab36"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d520d7d4be0fc41402cb48d746d9d91791f9dae5",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5c77bdcc632997dbd1b7633c2f3f3505cd864df/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5c77bdcc632997dbd1b7633c2f3f3505cd864df/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
        "patch": "@@ -744,9 +744,10 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     else\n     {\n         char pszExePath[MAX_PATH+1];\n-        memset(pszExePath, 0, sizeof(pszExePath));\n-        if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n+        ssize_t r = readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath) - 1);\n+        if (r == -1)\n             return false;\n+        pszExePath[r] = '\\0';\n \n         fs::create_directories(GetAutostartDir());\n "
      }
    ]
  },
  {
    "sha": "339da9ca4143b5bb5cbe4d0713ae49661af956a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzlkYTljYTQxNDNiNWJiNWNiZTRkMDcxM2FlNDk2NjFhZjk1NmE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T13:10:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T13:10:40Z"
      },
      "message": "Merge #11411: script: Change SignatureHash input index check to an assert.\n\n5ddf560 script: Change SignatureHash input index check to an assert. (Jim Posen)\n\nPull request description:\n\n  In the SignatureHash function, the input index must refer to a valid index. This is not enforced equally in the segwit/non-segwit branches and should be an assertion rather than returning a error hash.\n\nTree-SHA512: a775fc9e9bd9835c0ab36368aa45ab3d53e38f31fd4d2b8684a77ee6028c854c363df038681a59358b30138957573ad63b71d4a722c16e0830fb4fa72669ef39",
      "tree": {
        "sha": "0ffb6e62b2a5523b061128eccb5328448797cbee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ffb6e62b2a5523b061128eccb5328448797cbee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/339da9ca4143b5bb5cbe4d0713ae49661af956a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0jrQAAoJEB5K7WKYbNJdQxIH/A6Y1WY7XjN1RDG3hITWt8RF\nflTDe7qJK8443dtAQCnhHaoxokqIvn5lUtLInk74d4uePA/n+7RDjYbmiwR+764T\n09jX2rOvmDvdmNioWBhj7POAccQawgQVb1hFQqzYIXzgwzdYQBQbEiM/bqTEzLWv\nutDnIhg455NNytGiiT4lm2U4qFXOv6EWmaUbLtQnuOy2669f7MYNIxPT2FcFMLkA\nqus/ApV9lUjuHLNSPVALCvoQwUzzRod75QGcJgz1pw1xqaeDz3oA2tvzftjumweP\nhlo+y/1sEo0w+FnmqCQ+4iAn8e9BGqL3ezic80wTAD9ZsprIL4tauBWWfLrlLRs=\n=5/I/\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ffb6e62b2a5523b061128eccb5328448797cbee\nparent c5c77bdcc632997dbd1b7633c2f3f3505cd864df\nparent 5ddf56045ad65162c7cd5c757c81d9446299a5aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506949821 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506949840 +0200\n\nMerge #11411: script: Change SignatureHash input index check to an assert.\n\n5ddf560 script: Change SignatureHash input index check to an assert. (Jim Posen)\n\nPull request description:\n\n  In the SignatureHash function, the input index must refer to a valid index. This is not enforced equally in the segwit/non-segwit branches and should be an assertion rather than returning a error hash.\n\nTree-SHA512: a775fc9e9bd9835c0ab36368aa45ab3d53e38f31fd4d2b8684a77ee6028c854c363df038681a59358b30138957573ad63b71d4a722c16e0830fb4fa72669ef39\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/339da9ca4143b5bb5cbe4d0713ae49661af956a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/339da9ca4143b5bb5cbe4d0713ae49661af956a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/339da9ca4143b5bb5cbe4d0713ae49661af956a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5c77bdcc632997dbd1b7633c2f3f3505cd864df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5c77bdcc632997dbd1b7633c2f3f3505cd864df"
      },
      {
        "sha": "5ddf56045ad65162c7cd5c757c81d9446299a5aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ddf56045ad65162c7cd5c757c81d9446299a5aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ddf56045ad65162c7cd5c757c81d9446299a5aa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "77314e8cb22cbf59bf89020b77a6053b4774abbd",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/339da9ca4143b5bb5cbe4d0713ae49661af956a6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/339da9ca4143b5bb5cbe4d0713ae49661af956a6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=339da9ca4143b5bb5cbe4d0713ae49661af956a6",
        "patch": "@@ -1175,6 +1175,8 @@ PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n \n uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {\n+    assert(nIn < txTo.vin.size());\n+\n     if (sigversion == SIGVERSION_WITNESS_V0) {\n         uint256 hashPrevouts;\n         uint256 hashSequence;\n@@ -1221,10 +1223,6 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     }\n \n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n-    if (nIn >= txTo.vin.size()) {\n-        //  nIn out of range\n-        return one;\n-    }\n \n     // Check for invalid use of SIGHASH_SINGLE\n     if ((nHashType & 0x1f) == SIGHASH_SINGLE) {"
      }
    ]
  },
  {
    "sha": "90926db2381d87c68858659873230a3811ebdce5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDkyNmRiMjM4MWQ4N2M2ODg1ODY1OTg3MzIzMGEzODExZWJkY2U1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T13:21:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-02T13:22:41Z"
      },
      "message": "Merge #11021: [rpc] fix getchaintxstats()\n\n07704c1 Add some tests for getchaintxstats (Akio Nakamura)\n3336676 Fix getchaintxstats() (Akio Nakamura)\n\nPull request description:\n\n  1. calculate nblocks more adaptive.\n    -> set default nblocks to min (blocks for 1 month, target block's height - 1)\n    -> before PR: if not specify nblocks-parameter, illegal parameter error will happen when target block height is below nblocks.\n  2. correct error message.\n    -> nblocks accepts [1 .. block's height -1] . so add a word \"-1\".\n  3. add check 0-divide.\n    -> if nTimeDiff = 0 then use UniValue(UniValue::VNULL) and returns {... \"txrate\": null} .\n    -> before PR: if nTimeDiff = 0 then returns {... \"txrate\":} and bitcoin-cli cannot handle the response.\n\nTree-SHA512: e1962ce7bb05a5bc7dec03eb04a8e7578f50fdb68927fcfc0a2232905ef4d679293eee148ebe0866682d209a8c458d21fbe71715e7311adb81f37089aae1ed93",
      "tree": {
        "sha": "41737ac11fc519327d7289d8a7e120025e8b12d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41737ac11fc519327d7289d8a7e120025e8b12d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90926db2381d87c68858659873230a3811ebdce5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ0j2hAAoJEB5K7WKYbNJdBqgH/3Sn9m0/1Zp+BXs+szy/C41/\nusxPNP+HCvVgreJIo2vvkzQIy8L2395fCaoUoLt6YfHgw0mIBAis9L88AYclXUsg\nD2GImwiXWlNwC1TtkWIjzdE1qXQneRi/OPjmnvMidmiLdHByRezv9JmN1zA4Gp74\nWvWau0x3w8mByRA6wkXRLUCdKmZrTmdx3lh0Fx8QzaWdZ25Fh9jThuiDi+ejQtXN\nXaUp9wh0VBif1mhBxh52Frt7Es72wK5TiRH7BIhWHeViAHN5sOQA6ps5/ts0HW1b\nGu2XWwHiVC/Kc6JbvgLFbiC54fCKxqjBVS1eXVorwiEma0oy6xxwSILUxmn+QKg=\n=X0n7\n-----END PGP SIGNATURE-----",
        "payload": "tree 41737ac11fc519327d7289d8a7e120025e8b12d4\nparent 339da9ca4143b5bb5cbe4d0713ae49661af956a6\nparent 07704c1b3768d6c290046c783063644fc7b7d1da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1506950486 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1506950561 +0200\n\nMerge #11021: [rpc] fix getchaintxstats()\n\n07704c1 Add some tests for getchaintxstats (Akio Nakamura)\n3336676 Fix getchaintxstats() (Akio Nakamura)\n\nPull request description:\n\n  1. calculate nblocks more adaptive.\n    -> set default nblocks to min (blocks for 1 month, target block's height - 1)\n    -> before PR: if not specify nblocks-parameter, illegal parameter error will happen when target block height is below nblocks.\n  2. correct error message.\n    -> nblocks accepts [1 .. block's height -1] . so add a word \"-1\".\n  3. add check 0-divide.\n    -> if nTimeDiff = 0 then use UniValue(UniValue::VNULL) and returns {... \"txrate\": null} .\n    -> before PR: if nTimeDiff = 0 then returns {... \"txrate\":} and bitcoin-cli cannot handle the response.\n\nTree-SHA512: e1962ce7bb05a5bc7dec03eb04a8e7578f50fdb68927fcfc0a2232905ef4d679293eee148ebe0866682d209a8c458d21fbe71715e7311adb81f37089aae1ed93\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90926db2381d87c68858659873230a3811ebdce5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90926db2381d87c68858659873230a3811ebdce5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90926db2381d87c68858659873230a3811ebdce5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "339da9ca4143b5bb5cbe4d0713ae49661af956a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/339da9ca4143b5bb5cbe4d0713ae49661af956a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/339da9ca4143b5bb5cbe4d0713ae49661af956a6"
      },
      {
        "sha": "07704c1b3768d6c290046c783063644fc7b7d1da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07704c1b3768d6c290046c783063644fc7b7d1da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07704c1b3768d6c290046c783063644fc7b7d1da"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 44,
      "deletions": 10
    },
    "files": [
      {
        "sha": "19074d3d9553dd583586fff3a7a3e8e5a06b00b5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90926db2381d87c68858659873230a3811ebdce5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90926db2381d87c68858659873230a3811ebdce5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=90926db2381d87c68858659873230a3811ebdce5",
        "patch": "@@ -1484,9 +1484,12 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,        (numeric) The timestamp for the statistics in UNIX format.\\n\"\n-            \"  \\\"txcount\\\": xxxxx,     (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"txrate\\\": x.xx,       (numeric) The average rate of transactions per second in the window.\\n\"\n+            \"  \\\"time\\\": xxxxx,                (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"txcount\\\": xxxxx,             (numeric) The total number of transactions in the chain up to that point.\\n\"\n+            \"  \\\"window_block_count\\\": xxxxx,  (numeric) Size of the window in number of blocks.\\n\"\n+            \"  \\\"window_tx_count\\\": xxxxx,     (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"window_interval\\\": xxxxx,     (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"txrate\\\": x.xx,               (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getchaintxstats\", \"\")\n@@ -1496,10 +1499,6 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n-    if (!request.params[0].isNull()) {\n-        blockcount = request.params[0].get_int();\n-    }\n-\n     bool havehash = !request.params[1].isNull();\n     uint256 hash;\n     if (havehash) {\n@@ -1524,8 +1523,14 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     \n     assert(pindex != nullptr);\n \n-    if (blockcount < 1 || blockcount >= pindex->nHeight) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid block count: should be between 1 and the block's height\");\n+    if (request.params[0].isNull()) {\n+        blockcount = std::max(0, std::min(blockcount, pindex->nHeight - 1));\n+    } else {\n+        blockcount = request.params[0].get_int();\n+\n+        if (blockcount < 0 || (blockcount > 0 && blockcount >= pindex->nHeight)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid block count: should be between 0 and the block's height - 1\");\n+        }\n     }\n \n     const CBlockIndex* pindexPast = pindex->GetAncestor(pindex->nHeight - blockcount);\n@@ -1535,7 +1540,14 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n     ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n-    ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+    ret.push_back(Pair(\"window_block_count\", blockcount));\n+    if (blockcount > 0) {\n+        ret.push_back(Pair(\"window_tx_count\", nTxDiff));\n+        ret.push_back(Pair(\"window_interval\", nTimeDiff));\n+        if (nTimeDiff > 0) {\n+            ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+        }\n+    }\n \n     return ret;\n }"
      },
      {
        "sha": "5bd3bc8f833a465b73306b53b38087de8378c9ff",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90926db2381d87c68858659873230a3811ebdce5/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90926db2381d87c68858659873230a3811ebdce5/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=90926db2381d87c68858659873230a3811ebdce5",
        "patch": "@@ -81,6 +81,28 @@ def _test_getchaintxstats(self):\n         # we have to round because of binary math\n         assert_equal(round(chaintxstats['txrate'] * 600, 10), Decimal(1))\n \n+        b1 = self.nodes[0].getblock(self.nodes[0].getblockhash(1))\n+        b200 = self.nodes[0].getblock(self.nodes[0].getblockhash(200))\n+        time_diff = b200['mediantime'] - b1['mediantime']\n+\n+        chaintxstats = self.nodes[0].getchaintxstats()\n+        assert_equal(chaintxstats['time'], b200['time'])\n+        assert_equal(chaintxstats['txcount'], 201)\n+        assert_equal(chaintxstats['window_block_count'], 199)\n+        assert_equal(chaintxstats['window_tx_count'], 199)\n+        assert_equal(chaintxstats['window_interval'], time_diff)\n+        assert_equal(round(chaintxstats['txrate'] * time_diff, 10), Decimal(199))\n+\n+        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1['hash'])\n+        assert_equal(chaintxstats['time'], b1['time'])\n+        assert_equal(chaintxstats['txcount'], 2)\n+        assert_equal(chaintxstats['window_block_count'], 0)\n+        assert('window_tx_count' not in chaintxstats)\n+        assert('window_interval' not in chaintxstats)\n+        assert('txrate' not in chaintxstats)\n+\n+        assert_raises_jsonrpc(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n+\n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()"
      }
    ]
  },
  {
    "sha": "55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTIyNGFmNmJkZWNmNzliYjBkMmM5NWIxNmYxZmY2MGIxNmM0NWY4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-21T19:43:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-02T13:47:43Z"
      },
      "message": "Remove redundant NULL checks after new",
      "tree": {
        "sha": "eec0627e8e6a8b4adef1d41b33160000b702d75c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eec0627e8e6a8b4adef1d41b33160000b702d75c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee50c9e48786dea0d9df2e45805c25565c100fe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee50c9e48786dea0d9df2e45805c25565c100fe3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee50c9e48786dea0d9df2e45805c25565c100fe3"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0da861eb22a2080207f6f9f7ed358964060663ae",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
        "patch": "@@ -2608,7 +2608,6 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(block);\n-    assert(pindexNew);\n     // We assign the sequence id to blocks only when the full data is available,\n     // to avoid miners withholding blocks but broadcasting headers, to get a\n     // competitive advantage.\n@@ -3434,8 +3433,6 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n \n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n-    if (!pindexNew)\n-        throw std::runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n "
      }
    ]
  },
  {
    "sha": "74669916709e5429990df120c6ba84ac60791b30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDY2OTkxNjcwOWU1NDI5OTkwZGYxMjBjNmJhODRhYzYwNzkxYjMw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-21T16:42:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-02T13:47:43Z"
      },
      "message": "Remove redundant check (!ecc is always true)",
      "tree": {
        "sha": "60016822e6564ac6be586035607329782f6b79f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60016822e6564ac6be586035607329782f6b79f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74669916709e5429990df120c6ba84ac60791b30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74669916709e5429990df120c6ba84ac60791b30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74669916709e5429990df120c6ba84ac60791b30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74669916709e5429990df120c6ba84ac60791b30/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55224af6bdecf79bb0d2c95b16f1ff60b16c45f8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5a0ae11f0b82d8f289c177587f51b236e1477feb",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74669916709e5429990df120c6ba84ac60791b30/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74669916709e5429990df120c6ba84ac60791b30/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=74669916709e5429990df120c6ba84ac60791b30",
        "patch": "@@ -682,18 +682,18 @@ static void MutateTx(CMutableTransaction& tx, const std::string& command,\n     else if (command == \"outaddr\")\n         MutateTxAddOutAddr(tx, commandVal);\n     else if (command == \"outpubkey\") {\n-        if (!ecc) { ecc.reset(new Secp256k1Init()); }\n+        ecc.reset(new Secp256k1Init());\n         MutateTxAddOutPubKey(tx, commandVal);\n     } else if (command == \"outmultisig\") {\n-        if (!ecc) { ecc.reset(new Secp256k1Init()); }\n+        ecc.reset(new Secp256k1Init());\n         MutateTxAddOutMultiSig(tx, commandVal);\n     } else if (command == \"outscript\")\n         MutateTxAddOutScript(tx, commandVal);\n     else if (command == \"outdata\")\n         MutateTxAddOutData(tx, commandVal);\n \n     else if (command == \"sign\") {\n-        if (!ecc) { ecc.reset(new Secp256k1Init()); }\n+        ecc.reset(new Secp256k1Init());\n         MutateTxSign(tx, commandVal);\n     }\n "
      }
    ]
  },
  {
    "sha": "b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWZiMzM5NDNmZDYyMjI1NzFkMTNmODI0N2ZjNjExZWJlMmJhOGM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-21T16:52:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-02T13:47:44Z"
      },
      "message": "Remove duplicate uriParts.size() > 0 check",
      "tree": {
        "sha": "ece437079f7af214663f2151e44de12d8cc624b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece437079f7af214663f2151e44de12d8cc624b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5fb33943fd6222571d13f8247fc611ebe2ba8c6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74669916709e5429990df120c6ba84ac60791b30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74669916709e5429990df120c6ba84ac60791b30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74669916709e5429990df120c6ba84ac60791b30"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4d2cdfdf08c5180bc771b354531884111cbfa19f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5fb33943fd6222571d13f8247fc611ebe2ba8c6/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5fb33943fd6222571d13f8247fc611ebe2ba8c6/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
        "patch": "@@ -409,10 +409,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     if (uriParts.size() > 0)\n     {\n-\n         //inputs is sent over URI scheme (/rest/getutxos/checkmempool/txid1-n/txid2-n/...)\n-        if (uriParts.size() > 0 && uriParts[0] == \"checkmempool\")\n-            fCheckMemPool = true;\n+        if (uriParts[0] == \"checkmempool\") fCheckMemPool = true;\n \n         for (size_t i = (fCheckMemPool) ? 1 : 0; i < uriParts.size(); i++)\n         {"
      }
    ]
  },
  {
    "sha": "4971a9a3c928235ef4af29a7f72379cbb567e446",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTcxYTlhM2M5MjgyMzVlZjRhZjI5YTdmNzIzNzljYmI1NjdlNDQ2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-24T07:59:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-02T13:47:44Z"
      },
      "message": "Use two boolean literals instead of re-using variable",
      "tree": {
        "sha": "91a8e563501fdf35a316e38b51200deb59337810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91a8e563501fdf35a316e38b51200deb59337810"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4971a9a3c928235ef4af29a7f72379cbb567e446",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4971a9a3c928235ef4af29a7f72379cbb567e446",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4971a9a3c928235ef4af29a7f72379cbb567e446",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4971a9a3c928235ef4af29a7f72379cbb567e446/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5fb33943fd6222571d13f8247fc611ebe2ba8c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5fb33943fd6222571d13f8247fc611ebe2ba8c6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "68f486d9029cb678ccb6e5c030d4d510e6731981",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4971a9a3c928235ef4af29a7f72379cbb567e446/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4971a9a3c928235ef4af29a7f72379cbb567e446/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4971a9a3c928235ef4af29a7f72379cbb567e446",
        "patch": "@@ -371,19 +371,17 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n             }\n         }\n         connman->ForNode(nodeid, [connman](CNode* pfrom){\n-            bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n-                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n-                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/false, nCMPCTBLOCKVersion));\n                     return true;\n                 });\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n-            fAnnounceUsingCMPCTBLOCK = true;\n-            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/true, nCMPCTBLOCKVersion));\n             lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n             return true;\n         });"
      }
    ]
  },
  {
    "sha": "76fed838f381a6efba175f3650ec7e9dc73016d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmZlZDgzOGYzODFhNmVmYmExNzVmMzY1MGVjN2U5ZGM3MzAxNmQz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-02T15:20:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-02T15:20:08Z"
      },
      "message": "Avoid NULL pointer dereference when _walletModel is NULL (which is valid)",
      "tree": {
        "sha": "c02c676b6224e226e47ab044f4f4c45cc2d7e812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c02c676b6224e226e47ab044f4f4c45cc2d7e812"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76fed838f381a6efba175f3650ec7e9dc73016d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76fed838f381a6efba175f3650ec7e9dc73016d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76fed838f381a6efba175f3650ec7e9dc73016d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76fed838f381a6efba175f3650ec7e9dc73016d3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4971a9a3c928235ef4af29a7f72379cbb567e446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4971a9a3c928235ef4af29a7f72379cbb567e446",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4971a9a3c928235ef4af29a7f72379cbb567e446"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a56a40037ff3fc5d4045ff7acf0b1251f176639d",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76fed838f381a6efba175f3650ec7e9dc73016d3/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76fed838f381a6efba175f3650ec7e9dc73016d3/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=76fed838f381a6efba175f3650ec7e9dc73016d3",
        "patch": "@@ -122,8 +122,8 @@ void WalletView::setWalletModel(WalletModel *_walletModel)\n     overviewPage->setWalletModel(_walletModel);\n     receiveCoinsPage->setModel(_walletModel);\n     sendCoinsPage->setModel(_walletModel);\n-    usedReceivingAddressesPage->setModel(_walletModel->getAddressTableModel());\n-    usedSendingAddressesPage->setModel(_walletModel->getAddressTableModel());\n+    usedReceivingAddressesPage->setModel(_walletModel ? _walletModel->getAddressTableModel() : nullptr);\n+    usedSendingAddressesPage->setModel(_walletModel ? _walletModel->getAddressTableModel() : nullptr);\n \n     if (_walletModel)\n     {"
      }
    ]
  },
  {
    "sha": "f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTk5YjhhMzNkOTQ0M2EyNThhMWY0OWExYTI5Njc0Y2Q5ZWU5YTIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T19:19:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T19:19:43Z"
      },
      "message": "Merge #11365: [Tests] Add Qt GUI tests to Overview and ReceiveCoin Page\n\n634e38ca7 [Tests] Add Qt GUI tests to Overview and ReceiveCoin Page (Anditto Heristyo)\n\nPull request description:\n\n  I've added some Qt wallet tests based on #9974, namely the input & buttons on ReceiveCoin.\n\nTree-SHA512: f4223827145e35c2abee83a6ca777498bebcff3825fece10fbb1dbfd1f6bb017d3f2c0521662854b4407cdeee9c6a527269ab9cc28e0dc85c11b668155fcd195",
      "tree": {
        "sha": "7fd2f9e997915b3c9c41194cc8aa58cd34e48ae8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fd2f9e997915b3c9c41194cc8aa58cd34e48ae8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ0pFPAAoJENLqSFDnUoslFmYP/3jUtY+aA24N/2EXcxjZO0F2\nRBXNQIab86RsePmkVXWiZnLv01lyXtCWHhXL4f9cDrHCnx/IkbOq3yxvvreowPLI\n+kUTBEAGt9f36v9d7D0ggdaOxHFLIqaB6fBWAQkqVsMoxwLNUTT1W7fyvy43O9OA\nbRsb5ecQAoo4uhla4tZFHExE0byfGfNwCadBPgINCBDqULVhzrNccfYKyNCBUqcj\nO4jCLdQPHIWyN7RTc0IvPBTl2peByNTWRUjcY8TZyB31NRZtz2ltrJ1oubWjwjKa\n9qVdYNYS8I8Ega/AZ4U0pNvhE3d+zZ4XGTX0KRP5NEEcaPmTGH3daGbE4ZEOWvhS\nR/shh+XjPW4rsiAnQMTvzlonL8az7FB70I2+mtdPNxgTvKQsnLjHFbkLVU4K0knl\n+ldTz/XeVuUJmKPjh/WT5V31FcCX/Mb686IjeNHugefOR0fjQCKXIeiPyJ0hFp3Q\njFYtqTivS5sUZ5jQQdzKcGqdrGpa+xix6HO7zZk6Ae3dED4KERIjuBK/5MFd4s7L\nv9HTL41ZD1f/SuwIoruVHgQYb/w4zbCh4vfUYzHkvrbpDzJjDdnmp+OX2qYxdjU5\nA2TtF5QMnd0liUzHLGw9RTeULYV+WxEzOLQ8zp5e2badOTkERO/Qs0k24LdsfLs+\nMqNIxFiO63VbE0h/xEzk\n=mWrG\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fd2f9e997915b3c9c41194cc8aa58cd34e48ae8\nparent 90926db2381d87c68858659873230a3811ebdce5\nparent 634e38ca711ae9c22149d4cad01d2e4b4d90fe8e\nauthor MarcoFalke <falke.marco@gmail.com> 1506971975 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506971983 +0200\n\nMerge #11365: [Tests] Add Qt GUI tests to Overview and ReceiveCoin Page\n\n634e38ca7 [Tests] Add Qt GUI tests to Overview and ReceiveCoin Page (Anditto Heristyo)\n\nPull request description:\n\n  I've added some Qt wallet tests based on #9974, namely the input & buttons on ReceiveCoin.\n\nTree-SHA512: f4223827145e35c2abee83a6ca777498bebcff3825fece10fbb1dbfd1f6bb017d3f2c0521662854b4407cdeee9c6a527269ab9cc28e0dc85c11b668155fcd195\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f199b8a33d9443a258a1f49a1a29674cd9ee9a20/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90926db2381d87c68858659873230a3811ebdce5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90926db2381d87c68858659873230a3811ebdce5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90926db2381d87c68858659873230a3811ebdce5"
      },
      {
        "sha": "634e38ca711ae9c22149d4cad01d2e4b4d90fe8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634e38ca711ae9c22149d4cad01d2e4b4d90fe8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/634e38ca711ae9c22149d4cad01d2e4b4d90fe8e"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 71,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eeae58bd05a9af7e06789a0955e9b2cd29990b88",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 2,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f199b8a33d9443a258a1f49a1a29674cd9ee9a20/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f199b8a33d9443a258a1f49a1a29674cd9ee9a20/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
        "patch": "@@ -13,6 +13,10 @@\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n #include \"wallet/wallet.h\"\n+#include \"qt/overviewpage.h\"\n+#include \"qt/receivecoinsdialog.h\"\n+#include \"qt/recentrequeststablemodel.h\"\n+#include \"qt/receiverequestdialog.h\"\n \n #include <QAbstractButton>\n #include <QAction>\n@@ -21,6 +25,9 @@\n #include <QPushButton>\n #include <QTimer>\n #include <QVBoxLayout>\n+#include <QTextEdit>\n+#include <QListView>\n+#include <QDialogButtonBox>\n \n namespace\n {\n@@ -140,7 +147,7 @@ void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, st\n //     src/qt/test/test_bitcoin-qt -platform xcb      # Linux\n //     src/qt/test/test_bitcoin-qt -platform windows  # Windows\n //     src/qt/test/test_bitcoin-qt -platform cocoa    # macOS\n-void TestSendCoins()\n+void TestGUI()\n {\n     // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\n     TestChain100Setup test;\n@@ -184,6 +191,68 @@ void TestSendCoins()\n     BumpFee(transactionView, txid2, false /* expect disabled */, {} /* expected error */, false /* cancel */);\n     BumpFee(transactionView, txid2, true /* expect disabled */, \"already bumped\" /* expected error */, false /* cancel */);\n \n+    // Check current balance on OverviewPage\n+    OverviewPage overviewPage(platformStyle.get());\n+    overviewPage.setWalletModel(&walletModel);\n+    QLabel* balanceLabel = overviewPage.findChild<QLabel*>(\"labelBalance\");\n+    QString balanceText = balanceLabel->text();\n+    int unit = walletModel.getOptionsModel()->getDisplayUnit();\n+    CAmount balance = walletModel.getBalance();\n+    QString balanceComparison = BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::separatorAlways);\n+    QCOMPARE(balanceText, balanceComparison);\n+\n+    // Check Request Payment button\n+    ReceiveCoinsDialog receiveCoinsDialog(platformStyle.get());\n+    receiveCoinsDialog.setModel(&walletModel);\n+    RecentRequestsTableModel* requestTableModel = walletModel.getRecentRequestsTableModel();\n+\n+    // Label input\n+    QLineEdit* labelInput = receiveCoinsDialog.findChild<QLineEdit*>(\"reqLabel\");\n+    labelInput->setText(\"TEST_LABEL_1\");\n+\n+    // Amount input\n+    BitcoinAmountField* amountInput = receiveCoinsDialog.findChild<BitcoinAmountField*>(\"reqAmount\");\n+    amountInput->setValue(1);\n+\n+    // Message input\n+    QLineEdit* messageInput = receiveCoinsDialog.findChild<QLineEdit*>(\"reqMessage\");\n+    messageInput->setText(\"TEST_MESSAGE_1\");\n+    int initialRowCount = requestTableModel->rowCount({});\n+    QPushButton* requestPaymentButton = receiveCoinsDialog.findChild<QPushButton*>(\"receiveButton\");\n+    requestPaymentButton->click();\n+    for (QWidget* widget : QApplication::topLevelWidgets()) {\n+        if (widget->inherits(\"ReceiveRequestDialog\")) {\n+            ReceiveRequestDialog* receiveRequestDialog = qobject_cast<ReceiveRequestDialog*>(widget);\n+            QTextEdit* rlist = receiveRequestDialog->QObject::findChild<QTextEdit*>(\"outUri\");\n+            QString paymentText = rlist->toPlainText();\n+            QStringList paymentTextList = paymentText.split('\\n');\n+            QCOMPARE(paymentTextList.at(0), QString(\"Payment information\"));\n+            QVERIFY(paymentTextList.at(1).indexOf(QString(\"URI: bitcoin:\")) != -1);\n+            QVERIFY(paymentTextList.at(2).indexOf(QString(\"Address:\")) != -1);\n+            QCOMPARE(paymentTextList.at(3), QString(\"Amount: 0.00000001 \") + QString::fromStdString(CURRENCY_UNIT));\n+            QCOMPARE(paymentTextList.at(4), QString(\"Label: TEST_LABEL_1\"));\n+            QCOMPARE(paymentTextList.at(5), QString(\"Message: TEST_MESSAGE_1\"));\n+        }\n+    }\n+\n+    // Clear button\n+    QPushButton* clearButton = receiveCoinsDialog.findChild<QPushButton*>(\"clearButton\");\n+    clearButton->click();\n+    QCOMPARE(labelInput->text(), QString(\"\"));\n+    QCOMPARE(amountInput->value(), CAmount(0));\n+    QCOMPARE(messageInput->text(), QString(\"\"));\n+\n+    // Check addition to history\n+    int currentRowCount = requestTableModel->rowCount({});\n+    QCOMPARE(currentRowCount, initialRowCount+1);\n+\n+    // Check Remove button\n+    QTableView* table = receiveCoinsDialog.findChild<QTableView*>(\"recentRequestsView\");\n+    table->selectRow(currentRowCount-1);\n+    QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n+    removeRequestButton->click();\n+    QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n+\n     bitdb.Flush(true);\n     bitdb.Reset();\n }\n@@ -192,5 +261,5 @@ void TestSendCoins()\n \n void WalletTests::walletTests()\n {\n-    TestSendCoins();\n+    TestGUI();\n }"
      }
    ]
  },
  {
    "sha": "8ddf60db7ad636b6a31b590251c671ded635fa1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGRmNjBkYjdhZDYzNmI2YTMxYjU5MDI1MWM2NzFkZWQ2MzVmYTFk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T19:28:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T19:28:22Z"
      },
      "message": "Merge #11407: [tests] add functional test for mempoolreplacement command line arg\n\n1088b5322 add functional test for mempoolreplacement command line arg (Gregory Sanders)\n\nPull request description:\n\n  Currently untested.\n\nTree-SHA512: 2dd9d55a3499844e48b3774df9155fd650220b0761da45d16869570356bb0ed17a88d4efa4302a517dd96e1e9cb34113661b3c9df688736f6849201a3d544deb",
      "tree": {
        "sha": "287d933eb8902a339a4727f506b860aa39707e98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287d933eb8902a339a4727f506b860aa39707e98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ddf60db7ad636b6a31b590251c671ded635fa1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ0pNWAAoJENLqSFDnUoslkkwQAIjwap7VZ1XObVNx5qHF47RM\nOcwLVvleQsntiQqZdTigmYPRC4Wrat4OcZC6d5UcK//v2oYTTCWOCMYA3f2Mkvnn\nL82RROCyDXA512vHUUqLjh1sc+jD9EBN5xX9aPtJ4KfDbF9NR38x77xBUI0EM8zu\n28jZCQBUoMot5P0D3wkvWrbDxFQUOwrjWwekJygM75IBwtweyVY8UgAZ35+lTbR2\nRpWZce6vGiP3+wZrVCF3y/SQXxMvL6Rl6YFTYtcos3Dw3K2Gy/VLSgaY8RTmOc7m\nlRDaKWOFPjNtCefdYYvKIaxpNgvcMSSsR7YTtUOsjUsVTmzpxpVGWd+cbOto7io5\nN3LwsAemHxG/IOnID9V0Ajm4Gry761dXjX2UekrPPB0ko6QNAZiOI6+TeWj0dOFb\nGSScMkt9AwQNEVgWkwVC2UlD2sjmdBpm9F2HH+KyJygIMr5RqKF9R/SiZHZkjstm\nsTUy3VR5MCuBKNVhmhU9QofYYPkfgmPiff48SSH9FxbuPyJXQfKCKQ5E7aSkIBjK\nYbriwQcdRyXV3oEhTfyJc93Lj5dsCJAyezBD+FL+O31MA7M1bXqWcihIsHyyktgf\n4IsgL8HMUxet5t9aR9AWaRXIc2uzhQwLfYHh2Pbw2SFHBcv17hJO9e0bBfbKfOqe\nVKIKtazCCC80hpYfubHT\n=84Ip\n-----END PGP SIGNATURE-----",
        "payload": "tree 287d933eb8902a339a4727f506b860aa39707e98\nparent f199b8a33d9443a258a1f49a1a29674cd9ee9a20\nparent 1088b5322d0e7a8366a285e2baa49c766a9ba5bd\nauthor MarcoFalke <falke.marco@gmail.com> 1506972495 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1506972502 +0200\n\nMerge #11407: [tests] add functional test for mempoolreplacement command line arg\n\n1088b5322 add functional test for mempoolreplacement command line arg (Gregory Sanders)\n\nPull request description:\n\n  Currently untested.\n\nTree-SHA512: 2dd9d55a3499844e48b3774df9155fd650220b0761da45d16869570356bb0ed17a88d4efa4302a517dd96e1e9cb34113661b3c9df688736f6849201a3d544deb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddf60db7ad636b6a31b590251c671ded635fa1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddf60db7ad636b6a31b590251c671ded635fa1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddf60db7ad636b6a31b590251c671ded635fa1d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f199b8a33d9443a258a1f49a1a29674cd9ee9a20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f199b8a33d9443a258a1f49a1a29674cd9ee9a20"
      },
      {
        "sha": "1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1088b5322d0e7a8366a285e2baa49c766a9ba5bd"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "75f3d77c138089febe524fab11228dad83ea7d7b",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ddf60db7ad636b6a31b590251c671ded635fa1d/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ddf60db7ad636b6a31b590251c671ded635fa1d/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "patch": "@@ -62,13 +62,14 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n class ReplaceByFeeTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\",\n                            \"-limitancestorsize=101\",\n                            \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"]]\n+                           \"-limitdescendantsize=101\"],\n+                           [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n@@ -115,6 +116,8 @@ def test_simple_doublespend(self):\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n+        self.sync_all([self.nodes])\n+\n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -123,12 +126,17 @@ def test_simple_doublespend(self):\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        # This will raise an exception due to transaction replacement being disabled\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n+        # Replacement still disabled even with \"enough fee\"\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -138,6 +146,11 @@ def test_simple_doublespend(self):\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n+        # Second node is running mempoolreplacement=0, will not replace originally-seen txn\n+        mempool = self.nodes[1].getrawmempool()\n+        assert tx1a_txid in mempool\n+        assert tx1b_txid not in mempool\n+\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n "
      }
    ]
  },
  {
    "sha": "96c2ce9d343147608c197bc2333138b82141340f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmMyY2U5ZDM0MzE0NzYwOGMxOTdiYzIzMzMxMzhiODIxNDEzNDBm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-02T22:24:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-02T22:24:59Z"
      },
      "message": "Fix validationinterface build on super old boost/clang\n\nThis should fix all the non-dependancy issues for termux builds.\nSee Github issue #11388.",
      "tree": {
        "sha": "c64c41b2c45752cf2ad03c0e04267c82815373f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c64c41b2c45752cf2ad03c0e04267c82815373f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96c2ce9d343147608c197bc2333138b82141340f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c2ce9d343147608c197bc2333138b82141340f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96c2ce9d343147608c197bc2333138b82141340f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c2ce9d343147608c197bc2333138b82141340f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddf60db7ad636b6a31b590251c671ded635fa1d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "281bc04b0af2580bd50fdc268f89809761d7597b",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c2ce9d343147608c197bc2333138b82141340f/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c2ce9d343147608c197bc2333138b82141340f/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=96c2ce9d343147608c197bc2333138b82141340f",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+\n #include \"init.h\"\n+#include \"primitives/block.h\"\n #include \"scheduler.h\"\n #include \"sync.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "696ce46306e40f48dc4b2d7010812d564a43289d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTZjZTQ2MzA2ZTQwZjQ4ZGM0YjJkNzAxMDgxMmQ1NjRhNDMyODlk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-02T11:16:04Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-02T23:49:25Z"
      },
      "message": "[Docs] Update Windows build instructions for using WSL and Ubuntu 17.04",
      "tree": {
        "sha": "9bd664e561f9966883e2f25c96a5cba5406f9213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bd664e561f9966883e2f25c96a5cba5406f9213"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/696ce46306e40f48dc4b2d7010812d564a43289d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnS0IUACgkQLuufXMCV\nJsFWCg/9FcB+GBg1P3DnFUGfaoYxN1m5duafZoyo+cWOsmvcybJSOv0/iVsCxsgV\nMFLb+N/XCgdxY11d1Z0OGq5kGPm2MzQzmzTljaFW7b0iXJluXPfI5Lh/TmX25KzJ\nVGAdKdHP2OawT1bPyvLOP3AyWy7pEZVasLwsztGjm8Q84++xW5HEJbTrGVOVQTgk\neHXOlG5rBH40dn06nH7IMZ/0iG7b+s8xvwQ6iaOY34O6koHGF2eih9n1o1BLHYZm\n6NVvU5/naYJw517FajxBnqv12RYPrFDnvi+N7FN6PMyu3v+6Z96EvS+u6oBXVDk9\nR3BTVxKsJCNOT2D7phKdt87HRC+vUYwVzJCQayWexcPNVThQHayGknm4vqYya3v0\nbXFJJiUw2/7jDC8wvulRMjRuBOUsuYQAAMp69xvzboe3BZtB89l7t9lPZkcfM+LY\nNiYg/wN1XrSBlBFYlx02LIPS+9QWfd89NoI+kHPSaMHVmxezqQAgwdoaeyfPdHzY\n8Vnnvfgc+zmN4r0kvHrI9MLEbT94+irNpoF77zCHmud1TyZxWfCiryjO5T1Bf4P/\nv3mc7i5NbAXu9cFe52ue+9V0xc609CHgm5DCNCpfoaRAH1Qm9ulb104E3PO1GkSZ\nuVVX3ssfGclq8Q0NZUmIE7j/fyB29zpvm7Nuddda6JOD7GbaJYs=\n=8Rs6\n-----END PGP SIGNATURE-----",
        "payload": "tree 9bd664e561f9966883e2f25c96a5cba5406f9213\nparent 4f890ba6bc8caba5394c7a5388d7f07959ced78b\nauthor fanquake <fanquake@gmail.com> 1506942964 +0800\ncommitter fanquake <fanquake@gmail.com> 1506988165 +0800\n\n[Docs] Update Windows build instructions for using WSL and Ubuntu 17.04\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/696ce46306e40f48dc4b2d7010812d564a43289d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/696ce46306e40f48dc4b2d7010812d564a43289d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/696ce46306e40f48dc4b2d7010812d564a43289d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f890ba6bc8caba5394c7a5388d7f07959ced78b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f890ba6bc8caba5394c7a5388d7f07959ced78b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f890ba6bc8caba5394c7a5388d7f07959ced78b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0d96af26a29c8121528edfdb03d8271f68288a50",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/696ce46306e40f48dc4b2d7010812d564a43289d/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/696ce46306e40f48dc4b2d7010812d564a43289d/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=696ce46306e40f48dc4b2d7010812d564a43289d",
        "patch": "@@ -4,10 +4,11 @@ WINDOWS BUILD NOTES\n Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n+Windows. Cross-compilation is also used to build the release binaries.\n \n-Currently only building on Ubuntu Trusty 14.04 is supported.\n-Other versions are unsupported or known to be broken (e.g. Ubuntu Xenial 16.04).\n+Currently only building on Ubuntu Trusty 14.04 or Ubuntu Zesty 17.04 or later is supported.\n+Building on Ubuntu Xenial 16.04 is known to be broken, see extensive discussion in issue [8732](https://github.com/bitcoin/bitcoin/issues/8732).\n+While it may be possible to do so with work arounds, it's potentially dangerous and not recommended.\n \n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n using the Windows Subsystem For Linux is the most straightforward. If you are building with\n@@ -64,6 +65,13 @@ build process.\n \n See also: [dependencies.md](dependencies.md).\n \n+If you're building on Ubuntu 17.04 or later, run these two commands, selecting the 'posix' variant for both,\n+to work around issues with mingw-w64. See issue [8732](https://github.com/bitcoin/bitcoin/issues/8732) for more information.\n+```\n+sudo update-alternatives --config x86_64-w64-mingw32-g++\n+sudo update-alternatives --config x86_64-w64-mingw32-gcc\n+```\n+\n ## Building for 64-bit Windows\n \n To build executables for Windows 64-bit, install the following dependencies:\n@@ -84,7 +92,7 @@ Then build using:\n \n To build executables for Windows 32-bit, install the following dependencies:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev \n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev\n \n Then build using:\n "
      }
    ]
  },
  {
    "sha": "dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmM0YWUwMzk2MzAxNGFiNGI3OTU3ZDYyYmE1OWRiZDhmOTM4YzMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T12:26:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T12:27:39Z"
      },
      "message": "Merge #11293: Deduplicate CMerkleBlock construction code, add test coverage\n\n46ce223d1 Add tests for CMerkleBlock usage with txids specified (James O'Beirne)\n5ab586f90 Consolidate CMerkleBlock constructor into a single method (James O'Beirne)\n\nPull request description:\n\n  What started as a simple task to add test coverage ended up giving way to a light refactoring. This consolidates the mostly-identical `CMerkleBlock` constructors into one (using C++11 constructor delegation) and adds coverage for the by-txids construction case.\n\n  ### Before\n\n  ![selection_006](https://user-images.githubusercontent.com/73197/30242104-0f381fe4-9545-11e7-9617-83b87fce0456.png)\n\n  ### After\n\n  ![selection_008](https://user-images.githubusercontent.com/73197/30242107-1425dfaa-9545-11e7-9e6b-2c3432517dd1.png)\n\nTree-SHA512: eed84ed3e8bfc43473077b575c8252759a857e37275e4b36ca7cc2c17a65895e5f494bfd9d4aeab09fc6e98fc6a9c641ac7ecc0ddbeefe01a9e4308e7909e529",
      "tree": {
        "sha": "7c4c47e709e79de764954456cbbdf1e7b6c2c8aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c4c47e709e79de764954456cbbdf1e7b6c2c8aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ04I7AAoJENLqSFDnUosl0rQP/j7y6piZgZ0vpLRNcpjZKnKt\nelYnL/3pbpSVwszb24lEOxnDIamsAN7b6JsAlybqKtPjYdaRmEOoElUQDZFy6Ksh\nOm+n8hlXX6QDVzx77Tz6mMZHW6mKfFGiZ6xn7PPncasW5yWYsoLO9h9ThxVMHtIU\ng7m2mt5cORQ4IkKnwuiIZNmGIkXjoXic/9qPHoUYhTnyVJcfc0WoTAU7d/GFRNKc\nI0ZVZMXJKxsiVH1Pwg9t3vZkkBUzysjz5c4UA4ptPSoHnYb0/N/15uoIXERTaRwm\nIRHm3yV3H6b3pECtfe1JqKgqzpxK3UHWJxuNgQO3PbkIB+L+l7oQ1hUXdQov2aa0\nZnu77w/1jgAGL+U3pOX9TvEm64A0cq1Kphcse5WeEyGvhyU+FnxXOnRhTlUyouPb\na48B1QV5qXVmcvOlZ9lzOWw+/qCdYdppT4OkOTd7K8SuVaYGo481LVWNn9MiycUD\naXdOpNMHKRgr/diqqhGtGHI9jevA19qOM0/krV/z0LdgmNcbn4VUe5RZSIVO1LNk\ng38ZQdDJVf4aciPKFMNTGuK+DEtpjsBK/vRtHyDC8RFCfNeWCids6ONoQyHLXE9c\ny7Ks7GY7lUAZCUjk3e2tuJ/eaa2Um3el4Xp8jQD2ZuYzSHR0GXEqbyd5QNZJAWxE\nhgToFnXY7Z4yTA1qy3RN\n=0RZ2\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c4c47e709e79de764954456cbbdf1e7b6c2c8aa\nparent 8ddf60db7ad636b6a31b590251c671ded635fa1d\nparent 46ce223d15d4111d096f6342eb6f526d2507d7d7\nauthor MarcoFalke <falke.marco@gmail.com> 1507033565 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1507033659 +0200\n\nMerge #11293: Deduplicate CMerkleBlock construction code, add test coverage\n\n46ce223d1 Add tests for CMerkleBlock usage with txids specified (James O'Beirne)\n5ab586f90 Consolidate CMerkleBlock constructor into a single method (James O'Beirne)\n\nPull request description:\n\n  What started as a simple task to add test coverage ended up giving way to a light refactoring. This consolidates the mostly-identical `CMerkleBlock` constructors into one (using C++11 constructor delegation) and adds coverage for the by-txids construction case.\n\n  ### Before\n\n  ![selection_006](https://user-images.githubusercontent.com/73197/30242104-0f381fe4-9545-11e7-9617-83b87fce0456.png)\n\n  ### After\n\n  ![selection_008](https://user-images.githubusercontent.com/73197/30242107-1425dfaa-9545-11e7-9e6b-2c3432517dd1.png)\n\nTree-SHA512: eed84ed3e8bfc43473077b575c8252759a857e37275e4b36ca7cc2c17a65895e5f494bfd9d4aeab09fc6e98fc6a9c641ac7ecc0ddbeefe01a9e4308e7909e529\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddf60db7ad636b6a31b590251c671ded635fa1d"
      },
      {
        "sha": "46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46ce223d15d4111d096f6342eb6f526d2507d7d7"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 119,
      "deletions": 41
    },
    "files": [
      {
        "sha": "73fb17c8dc2b174b99307619355725e06450b75d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -50,6 +50,7 @@ BITCOIN_TESTS =\\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/merkle_tests.cpp \\\n+  test/merkleblock_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/net_tests.cpp \\"
      },
      {
        "sha": "3f07b4dac43b3a9c642fc88659be01300d48dd1c",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 28,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -9,33 +9,8 @@\n #include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n-CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n-{\n-    header = block.GetBlockHeader();\n \n-    std::vector<bool> vMatch;\n-    std::vector<uint256> vHashes;\n-\n-    vMatch.reserve(block.vtx.size());\n-    vHashes.reserve(block.vtx.size());\n-\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-    {\n-        const uint256& hash = block.vtx[i]->GetHash();\n-        if (filter.IsRelevantAndUpdate(*block.vtx[i]))\n-        {\n-            vMatch.push_back(true);\n-            vMatchedTxn.push_back(std::make_pair(i, hash));\n-        }\n-        else\n-            vMatch.push_back(false);\n-        vHashes.push_back(hash);\n-    }\n-\n-    txn = CPartialMerkleTree(vHashes, vMatch);\n-}\n-\n-CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n+CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)\n {\n     header = block.GetBlockHeader();\n \n@@ -48,10 +23,14 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const uint256& hash = block.vtx[i]->GetHash();\n-        if (txids.count(hash))\n+        if (txids && txids->count(hash)) {\n             vMatch.push_back(true);\n-        else\n+        } else if (filter && filter->IsRelevantAndUpdate(*block.vtx[i])) {\n+            vMatch.push_back(true);\n+            vMatchedTxn.emplace_back(i, hash);\n+        } else {\n             vMatch.push_back(false);\n+        }\n         vHashes.push_back(hash);\n     }\n "
      },
      {
        "sha": "6c05f2c1f81fc8b878cf54971d8cb1d7db532c3e",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -131,19 +131,23 @@ class CMerkleBlock\n     CBlockHeader header;\n     CPartialMerkleTree txn;\n \n-public:\n-    /** Public only for unit testing and relay testing (not relayed) */\n+    /**\n+     * Public only for unit testing and relay testing (not relayed).\n+     *\n+     * Used only when a bloom filter is specified to allow\n+     * testing the transactions which matched the bloom filter.\n+     */\n     std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;\n \n     /**\n      * Create from a CBlock, filtering transactions according to filter\n      * Note that this will call IsRelevantAndUpdate on the filter for each transaction,\n      * thus the filter will likely be modified.\n      */\n-    CMerkleBlock(const CBlock& block, CBloomFilter& filter);\n+    CMerkleBlock(const CBlock& block, CBloomFilter& filter) : CMerkleBlock(block, &filter, nullptr) { }\n \n     // Create from a CBlock, matching the txids in the set\n-    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids);\n+    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids) : CMerkleBlock(block, nullptr, &txids) { }\n \n     CMerkleBlock() {}\n \n@@ -154,6 +158,10 @@ class CMerkleBlock\n         READWRITE(header);\n         READWRITE(txn);\n     }\n+\n+private:\n+    // Combined constructor to consolidate code\n+    CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids);\n };\n \n #endif // BITCOIN_MERKLEBLOCK_H"
      },
      {
        "sha": "eac2c102a684dbbd102d8d9cd30a7d4d6a7b9c99",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientversion.h\"\n #include \"key.h\"\n #include \"merkleblock.h\"\n+#include \"primitives/block.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -179,20 +180,15 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n \n BOOST_AUTO_TEST_CASE(merkle_block_1)\n {\n-    // Random real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n-    // With 9 txes\n-    CBlock block;\n-    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n-    stream >> block;\n-\n+    CBlock block = getBlock13b8a();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n-    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 1);\n     std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));"
      },
      {
        "sha": "3e66c6f2c66276c6fc2e1daee0604c42132d9560",
        "filename": "src/test/merkleblock_tests.cpp",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/merkleblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/merkleblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_tests.cpp?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2012-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"merkleblock.h\"\n+#include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(merkleblock_tests, BasicTestingSetup)\n+\n+/**\n+ * Create a CMerkleBlock using a list of txids which will be found in the\n+ * given block.\n+ */\n+BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)\n+{\n+    CBlock block = getBlock13b8a();\n+\n+    std::set<uint256> txids;\n+\n+    // Last txn in block.\n+    uint256 txhash1 = uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\");\n+\n+    // Second txn in block.\n+    uint256 txhash2 = uint256S(\"0xf9fc751cb7dc372406a9f8d738d5e6f8f63bab71986a39cf36ee70ee17036d07\");\n+\n+    txids.insert(txhash1);\n+    txids.insert(txhash2);\n+\n+    CMerkleBlock merkleBlock(block, txids);\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n+\n+    // vMatchedTxn is only used when bloom filter is specified.\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0);\n+\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());\n+    BOOST_CHECK_EQUAL(vMatched.size(), 2);\n+\n+    // Ordered by occurrence in depth-first tree traversal.\n+    BOOST_CHECK_EQUAL(vMatched[0].ToString(), txhash2.ToString());\n+    BOOST_CHECK_EQUAL(vIndex[0], 1);\n+\n+    BOOST_CHECK_EQUAL(vMatched[1].ToString(), txhash1.ToString());\n+    BOOST_CHECK_EQUAL(vIndex[1], 8);\n+}\n+\n+\n+/**\n+ * Create a CMerkleBlock using a list of txids which will not be found in the\n+ * given block.\n+ */\n+BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)\n+{\n+    CBlock block = getBlock13b8a();\n+\n+    std::set<uint256> txids2;\n+    txids2.insert(uint256S(\"0xc0ffee00003bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    CMerkleBlock merkleBlock(block, txids2);\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0);\n+\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());\n+    BOOST_CHECK_EQUAL(vMatched.size(), 0);\n+    BOOST_CHECK_EQUAL(vIndex.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "79bc48a118094c85f9f43576670e59e05a19b019",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -18,6 +18,7 @@\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"streams.h\"\n #include \"rpc/server.h\"\n #include \"rpc/register.h\"\n #include \"script/sigcache.h\"\n@@ -158,3 +159,15 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn) {\n     return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, nHeight,\n                            spendsCoinbase, sigOpCost, lp);\n }\n+\n+/**\n+ * @returns a real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n+ *      with 9 txs.\n+ */\n+CBlock getBlock13b8a()\n+{\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+    return block;\n+}"
      },
      {
        "sha": "2390aca34208266ea9f9c3a64d3a56abbf94ef0e",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "patch": "@@ -99,7 +99,7 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), nHeight(1),\n         spendsCoinbase(false), sigOpCost(4) { }\n-    \n+\n     CTxMemPoolEntry FromTx(const CMutableTransaction &tx);\n     CTxMemPoolEntry FromTx(const CTransaction &tx);\n \n@@ -110,4 +110,7 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n     TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }\n };\n+\n+CBlock getBlock13b8a();\n+\n #endif"
      }
    ]
  },
  {
    "sha": "a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmJlM2I2NmI1NmJjY2MwMWRmYTJmYjk5MjUxNWFlNTZiYmVkZDQ5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-22T21:09:04Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-10-03T17:28:00Z"
      },
      "message": "[net] Ignore getheaders requests for very old side blocks\n\nSending a getheaders message with an empty locator and a stop hash\nis a request for a single header by hash. The node will respond with\nheaders for blocks not in the main chain as well as those in the main\nchain. To avoid fingerprinting, the node should, however, ignore\nrequests for headers on side branches that are too old.",
      "tree": {
        "sha": "23d54afb4683e9d27f6106940fbdb949346be700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23d54afb4683e9d27f6106940fbdb949346be700"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2be3b66b56bccc01dfa2fb992515ae56bbedd49/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc4ae03963014ab4b7957d62ba59dbd8f938c33"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 28,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b5e37722df1e3443109cea8a991ed94a158c4a64",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2be3b66b56bccc01dfa2fb992515ae56bbedd49/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2be3b66b56bccc01dfa2fb992515ae56bbedd49/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
        "patch": "@@ -61,6 +61,14 @@ static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUAR\n \n static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n \n+/// Age after which a stale block will no longer be served if requested as\n+/// protection against fingerprinting. Set to one month, denominated in seconds.\n+static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n+\n+/// Age after which a block is considered historical for purposes of rate\n+/// limiting block relay. Set to one week, denominated in seconds.\n+static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -706,6 +714,17 @@ void Misbehaving(NodeId pnode, int howmuch)\n // blockchain -> download logic notification\n //\n \n+// To prevent fingerprinting attacks, only send blocks/headers outside of the\n+// active chain if they are no more than a month older (both in time, and in\n+// best equivalent proof of work) than the best header chain we know about.\n+static bool StaleBlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    AssertLockHeld(cs_main);\n+    return (pindexBestHeader != nullptr) &&\n+        (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n+        (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n+}\n+\n PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n@@ -983,22 +1002,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     if (chainActive.Contains(mi->second)) {\n                         send = true;\n                     } else {\n-                        static const int nOneMonth = 30 * 24 * 60 * 60;\n-                        // To prevent fingerprinting attacks, only send blocks outside of the active\n-                        // chain if they are valid, and no more than a month older (both in time, and in\n-                        // best equivalent proof of work) than the best header chain we know about.\n-                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != nullptr) &&\n-                            (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() < nOneMonth) &&\n-                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, consensusParams) < nOneMonth);\n+                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                            StaleBlockRequestAllowed(mi->second, consensusParams);\n                         if (!send) {\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n-                static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+                if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -1723,6 +1736,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (mi == mapBlockIndex.end())\n                 return true;\n             pindex = (*mi).second;\n+\n+            if (!chainActive.Contains(pindex) &&\n+                !StaleBlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n+                LogPrintf(\"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+                return true;\n+            }\n         }\n         else\n         {"
      }
    ]
  },
  {
    "sha": "eff4bd8ab257a553ca8898ccd803630b4d44a771",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmY0YmQ4YWIyNTdhNTUzY2E4ODk4Y2NkODAzNjMwYjRkNDRhNzcx",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-25T00:06:42Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-10-03T17:28:00Z"
      },
      "message": "[test] P2P functional test for certain fingerprinting protections",
      "tree": {
        "sha": "d55da0a01a7cde16c0ae189bbf690044b10eae27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d55da0a01a7cde16c0ae189bbf690044b10eae27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eff4bd8ab257a553ca8898ccd803630b4d44a771",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff4bd8ab257a553ca8898ccd803630b4d44a771",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eff4bd8ab257a553ca8898ccd803630b4d44a771",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff4bd8ab257a553ca8898ccd803630b4d44a771/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2be3b66b56bccc01dfa2fb992515ae56bbedd49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2be3b66b56bccc01dfa2fb992515ae56bbedd49"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 161,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fe60c6cd46dca11adc46778615a850b036f1fd60",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "added",
        "additions": 158,
        "deletions": 0,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff4bd8ab257a553ca8898ccd803630b4d44a771/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff4bd8ab257a553ca8898ccd803630b4d44a771/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=eff4bd8ab257a553ca8898ccd803630b4d44a771",
        "patch": "@@ -0,0 +1,158 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test various fingerprinting protections.\n+\n+If an stale block more than a month old or its header are requested by a peer,\n+the node should pretend that it does not have it to avoid fingerprinting.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_headers,\n+    msg_block,\n+    msg_getdata,\n+    msg_getheaders,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    p2p_port,\n+)\n+\n+class P2PFingerprintTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    # Build a chain of blocks on top of given one\n+    def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n+        blocks = []\n+        for _ in range(nblocks):\n+            coinbase = create_coinbase(prev_height + 1)\n+            block_time = prev_median_time + 1\n+            block = create_block(int(prev_hash, 16), coinbase, block_time)\n+            block.solve()\n+\n+            blocks.append(block)\n+            prev_hash = block.hash\n+            prev_height += 1\n+            prev_median_time = block_time\n+        return blocks\n+\n+    # Send a getdata request for a given block hash\n+    def send_block_request(self, block_hash, node):\n+        msg = msg_getdata()\n+        msg.inv.append(CInv(2, block_hash))  # 2 == \"Block\"\n+        node.send_message(msg)\n+\n+    # Send a getheaders request for a given single block hash\n+    def send_header_request(self, block_hash, node):\n+        msg = msg_getheaders()\n+        msg.hashstop = block_hash\n+        node.send_message(msg)\n+\n+    # Check whether last block received from node has a given hash\n+    def last_block_equals(self, expected_hash, node):\n+        block_msg = node.last_message.get(\"block\")\n+        return block_msg and block_msg.block.rehash() == expected_hash\n+\n+    # Check whether last block header received from node has a given hash\n+    def last_header_equals(self, expected_hash, node):\n+        headers_msg = node.last_message.get(\"headers\")\n+        return (headers_msg and\n+                headers_msg.headers and\n+                headers_msg.headers[0].rehash() == expected_hash)\n+\n+    # Checks that stale blocks timestamped more than a month ago are not served\n+    # by the node while recent stale blocks and old active chain blocks are.\n+    # This does not currently test that stale blocks timestamped within the\n+    # last month but that have over a month's worth of work are also withheld.\n+    def run_test(self):\n+        node0 = NodeConnCB()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        NetworkThread().start()\n+        node0.wait_for_verack()\n+\n+        # Set node time to 60 days ago\n+        self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)\n+\n+        # Generating a chain of 10 blocks\n+        block_hashes = self.nodes[0].generate(nblocks=10)\n+\n+        # Create longer chain starting 2 blocks before current tip\n+        height = len(block_hashes) - 2\n+        block_hash = block_hashes[height - 1]\n+        block_time = self.nodes[0].getblockheader(block_hash)[\"mediantime\"] + 1\n+        new_blocks = self.build_chain(5, block_hash, height, block_time)\n+\n+        # Force reorg to a longer chain\n+        node0.send_message(msg_headers(new_blocks))\n+        node0.wait_for_getdata()\n+        for block in new_blocks:\n+            node0.send_and_ping(msg_block(block))\n+\n+        # Check that reorg succeeded\n+        assert_equal(self.nodes[0].getblockcount(), 13)\n+\n+        stale_hash = int(block_hashes[-1], 16)\n+\n+        # Check that getdata request for stale block succeeds\n+        self.send_block_request(stale_hash, node0)\n+        test_function = lambda: self.last_block_equals(stale_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+        # Check that getheader request for stale block header succeeds\n+        self.send_header_request(stale_hash, node0)\n+        test_function = lambda: self.last_header_equals(stale_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+        # Longest chain is extended so stale is much older than chain tip\n+        self.nodes[0].setmocktime(0)\n+        tip = self.nodes[0].generate(nblocks=1)[0]\n+        assert_equal(self.nodes[0].getblockcount(), 14)\n+\n+        # Send getdata & getheaders to refresh last received getheader message\n+        block_hash = int(tip, 16)\n+        self.send_block_request(block_hash, node0)\n+        self.send_header_request(block_hash, node0)\n+        node0.sync_with_ping()\n+\n+        # Request for very old stale block should now fail\n+        self.send_block_request(stale_hash, node0)\n+        time.sleep(3)\n+        assert not self.last_block_equals(stale_hash, node0)\n+\n+        # Request for very old stale block header should now fail\n+        self.send_header_request(stale_hash, node0)\n+        time.sleep(3)\n+        assert not self.last_header_equals(stale_hash, node0)\n+\n+        # Verify we can fetch very old blocks and headers on the active chain\n+        block_hash = int(block_hashes[2], 16)\n+        self.send_block_request(block_hash, node0)\n+        self.send_header_request(block_hash, node0)\n+        node0.sync_with_ping()\n+\n+        self.send_block_request(block_hash, node0)\n+        test_function = lambda: self.last_block_equals(block_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+        self.send_header_request(block_hash, node0)\n+        test_function = lambda: self.last_header_equals(block_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+if __name__ == '__main__':\n+    P2PFingerprintTest().main()"
      },
      {
        "sha": "c6f596156a777259bcf3f2ccf48a553d44be985a",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff4bd8ab257a553ca8898ccd803630b4d44a771/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff4bd8ab257a553ca8898ccd803630b4d44a771/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=eff4bd8ab257a553ca8898ccd803630b4d44a771",
        "patch": "@@ -1310,8 +1310,8 @@ def __repr__(self):\n class msg_headers(object):\n     command = b\"headers\"\n \n-    def __init__(self):\n-        self.headers = []\n+    def __init__(self, headers=None):\n+        self.headers = headers if headers is not None else []\n \n     def deserialize(self, f):\n         # comment in bitcoind indicates these should be deserialized as blocks"
      },
      {
        "sha": "434ba23b3b3963a08bf22a532611fc62b9e27020",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff4bd8ab257a553ca8898ccd803630b4d44a771/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff4bd8ab257a553ca8898ccd803630b4d44a771/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=eff4bd8ab257a553ca8898ccd803630b4d44a771",
        "patch": "@@ -123,6 +123,7 @@\n     'uptime.py',\n     'resendwallettransactions.py',\n     'minchainwork.py',\n+    'p2p-fingerprint.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGFmYzcxOGFkMDcxOTkzZDEwYjNiOWExZTE4MjhiYmQxZjhjZTU0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-07T21:20:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-03T19:25:00Z"
      },
      "message": "Fix uninitialized URI in batch RPC requests\n\nThis fixes \"Wallet file not specified\" errors when making batch wallet RPC\ncalls with more than one wallet loaded. This issue was reported by\nNicolasDorier <nicolas.dorier@gmail.com>\nhttps://github.com/bitcoin/bitcoin/issues/11257\n\nRequest URI is not used for anything except multiwallet request dispatching, so\nthis change has no other effects.\n\nFixes #11257",
      "tree": {
        "sha": "9b6f737f70a6f2e4a090e1fb9626d2706bb24dee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b6f737f70a6f2e4a090e1fb9626d2706bb24dee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a509a3f817121c3df98ddfd96b2769e18a3e5a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "93f0a18668b43c5139c261f74c13a080c4d4c556",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
        "patch": "@@ -192,7 +192,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n         // array of requests\n         } else if (valRequest.isArray())\n-            strReply = JSONRPCExecBatch(valRequest.get_array());\n+            strReply = JSONRPCExecBatch(jreq, valRequest.get_array());\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n "
      },
      {
        "sha": "39bcfc6903f787fa52f2b742c59e289a698c4953",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
        "patch": "@@ -389,11 +389,10 @@ bool IsDeprecatedRPCEnabled(const std::string& method)\n     return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n }\n \n-static UniValue JSONRPCExecOne(const UniValue& req)\n+static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n-    JSONRPCRequest jreq;\n     try {\n         jreq.parse(req);\n \n@@ -413,11 +412,11 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n     return rpc_result;\n }\n \n-std::string JSONRPCExecBatch(const UniValue& vReq)\n+std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n {\n     UniValue ret(UniValue::VARR);\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n-        ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n+        ret.push_back(JSONRPCExecOne(jreq, vReq[reqIdx]));\n \n     return ret.write() + \"\\n\";\n }"
      },
      {
        "sha": "74c4a9e801917c18e9555c33bdb61e667555481b",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edafc718ad071993d10b3b9a1e1828bbd1f8ce54/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
        "patch": "@@ -191,7 +191,7 @@ extern std::string HelpExampleRpc(const std::string& methodname, const std::stri\n bool StartRPC();\n void InterruptRPC();\n void StopRPC();\n-std::string JSONRPCExecBatch(const UniValue& vReq);\n+std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n \n // Retrieves any serialization flags requested in command line argument\n int RPCSerializationFlags();"
      }
    ]
  },
  {
    "sha": "e02007aade3d449f030fe5c8b12beddd7df1b232",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDIwMDdhYWRlM2Q0NDlmMDMwZmU1YzhiMTJiZWRkZDdkZjFiMjMy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-07T21:29:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-03T19:25:00Z"
      },
      "message": "Limit AuthServiceProxyWrapper.__getattr__ wrapping\n\nChange AuthServiceProxyWrapper.__getattr__ to only wrap proxied attributes, not\nreal attributes. This way AuthServiceProxyWrapper can continue logging RPC\ncalls without complicating other object usages, and special case handling for\nthe .url property can be dropped.",
      "tree": {
        "sha": "5519647b70dcaa5a99f7a00b89e0987f645000dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5519647b70dcaa5a99f7a00b89e0987f645000dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e02007aade3d449f030fe5c8b12beddd7df1b232",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e02007aade3d449f030fe5c8b12beddd7df1b232",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e02007aade3d449f030fe5c8b12beddd7df1b232",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e02007aade3d449f030fe5c8b12beddd7df1b232/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edafc718ad071993d10b3b9a1e1828bbd1f8ce54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edafc718ad071993d10b3b9a1e1828bbd1f8ce54"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c0202e5609d798a29153c5d24bd75811c6740276",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e02007aade3d449f030fe5c8b12beddd7df1b232/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e02007aade3d449f030fe5c8b12beddd7df1b232/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=e02007aade3d449f030fe5c8b12beddd7df1b232",
        "patch": "@@ -31,10 +31,11 @@ def __init__(self, auth_service_proxy_instance, coverage_logfile=None):\n         self.auth_service_proxy_instance = auth_service_proxy_instance\n         self.coverage_logfile = coverage_logfile\n \n-    def __getattr__(self, *args, **kwargs):\n-        return_val = self.auth_service_proxy_instance.__getattr__(\n-            *args, **kwargs)\n-\n+    def __getattr__(self, name):\n+        return_val = getattr(self.auth_service_proxy_instance, name)\n+        if not isinstance(return_val, type(self.auth_service_proxy_instance)):\n+            # If proxy getattr returned an unwrapped value, do the same here.\n+            return return_val\n         return AuthServiceProxyWrapper(return_val, self.coverage_logfile)\n \n     def __call__(self, *args, **kwargs):\n@@ -52,10 +53,6 @@ def __call__(self, *args, **kwargs):\n \n         return return_val\n \n-    @property\n-    def url(self):\n-        return self.auth_service_proxy_instance.url\n-\n     def __truediv__(self, relative_uri):\n         return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri)\n "
      }
    ]
  },
  {
    "sha": "b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGE1MDlhM2Y4MTcxMjFjM2RmOThkZGZkOTZiMjc2OWUxOGEzZTVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T19:24:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T19:25:00Z"
      },
      "message": "Merge #11433: qa: Restore bitcoin-util-test py2 compatibility\n\nfafff1220 qa: Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n\nPull request description:\n\n  Currently `./configure && make check` will look for python3, then python2. As long as we support python2 (and use it as fallback), `make check` should run fine with both python2 and python3.\n\n  Fixes #11352 by @Zenitur\n\nTree-SHA512: a335ebdd224328d6f924fe52a9b97de196926476c9ee04ce3280743ea93bcae355eb2d5d4bed4050c01b2e904105595eac7db2eaa9307207581caa0a98ebcc0b",
      "tree": {
        "sha": "ea4ec13c97daf8adbcd846ff5b9efed17d8233e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea4ec13c97daf8adbcd846ff5b9efed17d8233e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ0+QMAAoJENLqSFDnUoslh28P/1xXN4zREfRqHcMNtGOhXoG7\nloRLbILq5dZPheB4/dc0/zePeyZBCN8BSG3ltQeHOmJ9uqfJtnaNYjzLYyBWJUN2\nGe5NdxXPGHfq6lp4dejJoElHGsq1DBNPO3uoTEoPI2zvrg5/vfjS91A89q7v1c2y\ng27qJmZi6IpUiG1HGCy5wfMYEySv1ue1uG5BqZHidZmNhlne4eiNLWBGJMBTgnRa\nX3SSPYOeelsinHGjN52J0/TqCM5GrTSvQsKWm2POXA6X5IMxTurGsSol8n1Fvn6P\nFD0ZF0bi61MdhggKlLQqGQ7lahnP/3Yd/wSFCnrjoySpW/5mf4UAP1Jeb2i9ymfM\nHGDOqxQXJ7zfFrSVQtUIJcrxp7I31y0p7n3LYn38d+y/SsGykgU5i03sZ+Jl2bpV\nJ3meSjm/9GnYpPc77nIjhTLfgEYxKcQeIA8v6OCtYBJcaoYHSx6ZT9fH1L4I2uMx\n8b6UO7910eCg2rWEw1Eoh50TJemZiLIkOmMWkfstH0+qeUsrZv5M4r+0FqjIX9fX\nYCSDLnqryfp+3lR8UdBySnYca0lldU/XptFe92uzqL+7aWsYd2QJZmTL055cgETV\ncQFCuslqbqGlf7v95r9s7BBYmND4wfUJT9gZHxMJ10f4EzX30fSp8h1RA8qzvoCN\nQEZ+FzeFDOeQdch/VjND\n=T3Xe\n-----END PGP SIGNATURE-----",
        "payload": "tree ea4ec13c97daf8adbcd846ff5b9efed17d8233e0\nparent dbc4ae03963014ab4b7957d62ba59dbd8f938c33\nparent fafff1220cf798e25f02cdd8affb70506dd366cc\nauthor MarcoFalke <falke.marco@gmail.com> 1507058693 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1507058700 +0200\n\nMerge #11433: qa: Restore bitcoin-util-test py2 compatibility\n\nfafff1220 qa: Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n\nPull request description:\n\n  Currently `./configure && make check` will look for python3, then python2. As long as we support python2 (and use it as fallback), `make check` should run fine with both python2 and python3.\n\n  Fixes #11352 by @Zenitur\n\nTree-SHA512: a335ebdd224328d6f924fe52a9b97de196926476c9ee04ce3280743ea93bcae355eb2d5d4bed4050c01b2e904105595eac7db2eaa9307207581caa0a98ebcc0b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a509a3f817121c3df98ddfd96b2769e18a3e5a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc4ae03963014ab4b7957d62ba59dbd8f938c33"
      },
      {
        "sha": "fafff1220cf798e25f02cdd8affb70506dd366cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafff1220cf798e25f02cdd8affb70506dd366cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafff1220cf798e25f02cdd8affb70506dd366cc"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d3e7b5da125979c1ff5a035e0419380a2a231c6a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4a509a3f817121c3df98ddfd96b2769e18a3e5a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4a509a3f817121c3df98ddfd96b2769e18a3e5a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
        "patch": "@@ -149,7 +149,7 @@ bitcoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(top_builddir)/test/util/bitcoin-util-test.py\n+\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "ef34955d90904c2176b8eef443d54b1b0ae957a5",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4a509a3f817121c3df98ddfd96b2769e18a3e5a/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4a509a3f817121c3df98ddfd96b2769e18a3e5a/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
        "patch": "@@ -9,9 +9,14 @@\n \n Can also be run manually.\"\"\"\n \n+from __future__ import division,print_function,unicode_literals\n+\n import argparse\n import binascii\n-import configparser\n+try:\n+    import configparser\n+except ImportError:\n+    import ConfigParser as configparser\n import difflib\n import json\n import logging\n@@ -22,7 +27,9 @@\n \n def main():\n     config = configparser.ConfigParser()\n-    config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n+    config.optionxform = str\n+    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\")))\n+    env_conf = dict(config.items('environment'))\n \n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n@@ -37,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(config[\"environment\"][\"SRCDIR\"] + \"/test/util/data\", \"bitcoin-util-test.json\", config[\"environment\"])\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "9f67646f173dd29464666b34de2ec9cfc480c11a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjY3NjQ2ZjE3M2RkMjk0NjQ2NjZiMzRkZTJlYzljZmM0ODBjMTFh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-07T21:38:11Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-03T19:25:00Z"
      },
      "message": "Make AuthServiceProxy._batch method usable\n\nSplit off AuthServiceProxy.get_request method to make it easier to batch RPC\nrequests without duplicating code and remove leading underscore from _batch\nmethod.\n\nThis does not change any existing behavior.",
      "tree": {
        "sha": "8dab43e5f38e5a59bdb176f8e39dbebb109e01e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dab43e5f38e5a59bdb176f8e39dbebb109e01e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f67646f173dd29464666b34de2ec9cfc480c11a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f67646f173dd29464666b34de2ec9cfc480c11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f67646f173dd29464666b34de2ec9cfc480c11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f67646f173dd29464666b34de2ec9cfc480c11a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e02007aade3d449f030fe5c8b12beddd7df1b232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e02007aade3d449f030fe5c8b12beddd7df1b232",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e02007aade3d449f030fe5c8b12beddd7df1b232"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "747bda309c5521be916d9b81d15484b66a7e4f5b",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f67646f173dd29464666b34de2ec9cfc480c11a/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f67646f173dd29464666b34de2ec9cfc480c11a/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=9f67646f173dd29464666b34de2ec9cfc480c11a",
        "patch": "@@ -138,17 +138,20 @@ def _request(self, method, path, postdata):\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n \n-    def __call__(self, *args, **argsn):\n+    def get_request(self, *args, **argsn):\n         AuthServiceProxy.__id_count += 1\n \n         log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n                                  json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         if args and argsn:\n             raise ValueError('Cannot handle both named and positional arguments')\n-        postdata = json.dumps({'version': '1.1',\n-                               'method': self._service_name,\n-                               'params': args or argsn,\n-                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n+        return {'version': '1.1',\n+                'method': self._service_name,\n+                'params': args or argsn,\n+                'id': AuthServiceProxy.__id_count}\n+\n+    def __call__(self, *args, **argsn):\n+        postdata = json.dumps(self.get_request(*args, **argsn), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:\n             raise JSONRPCException(response['error'])\n@@ -158,7 +161,7 @@ def __call__(self, *args, **argsn):\n         else:\n             return response['result']\n \n-    def _batch(self, rpc_call_list):\n+    def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         log.debug(\"--> \"+postdata)\n         return self._request('POST', self.__url.path, postdata.encode('utf-8'))"
      }
    ]
  },
  {
    "sha": "ce2418fa4cef5514305cca82e74891b9d643c4c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTI0MThmYTRjZWY1NTE0MzA1Y2NhODJlNzQ4OTFiOWQ2NDNjNGM3",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-10-03T21:53:27Z"
      },
      "committer": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-10-03T22:09:12Z"
      },
      "message": "[gui] reset addrProxy/addrSeparateProxyTor if colon char missing\n\nIf addrProxy or addrSeparateProxyTor do not have a colon in the string\nsomewhere in the QSettings storage, then attempting to open the options\ndialog will cause the entire program to crash.",
      "tree": {
        "sha": "1634c44586d8c81e48ea1f9de33d3869c03e0130",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1634c44586d8c81e48ea1f9de33d3869c03e0130"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce2418fa4cef5514305cca82e74891b9d643c4c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2418fa4cef5514305cca82e74891b9d643c4c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2418fa4cef5514305cca82e74891b9d643c4c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2418fa4cef5514305cca82e74891b9d643c4c7/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc4ae03963014ab4b7957d62ba59dbd8f938c33"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fb8c60d100168f8ec9719e5f5ce7a8fb2c4fff42",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce2418fa4cef5514305cca82e74891b9d643c4c7/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce2418fa4cef5514305cca82e74891b9d643c4c7/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ce2418fa4cef5514305cca82e74891b9d643c4c7",
        "patch": "@@ -124,7 +124,7 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\"))\n+    if (!settings.contains(\"addrProxy\") || !settings.value(\"addrProxy\").toString().contains(':'))\n         settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n@@ -134,7 +134,7 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseSeparateProxyTor\"))\n         settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\"))\n+    if (!settings.contains(\"addrSeparateProxyTor\") || !settings.value(\"addrSeparateProxyTor\").toString().contains(':'))\n         settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n     if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))"
      }
    ]
  },
  {
    "sha": "093074b84395a5b562bc378971d29c89da4202a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTMwNzRiODQzOTVhNWI1NjJiYzM3ODk3MWQyOWM4OWRhNDIwMmE0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-04T03:14:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-04T03:15:11Z"
      },
      "message": "Merge #11419: Utils: Fix launchctl not being able to stop bitcoind\n\nab5bba778 Fix launchctl not being able to stop bitcoind (Alejandro Avil\u00e9s)\n\nPull request description:\n\n  `bitcoind` should not be launched as daemon from the Launch Agent. Otherwise, the process cannot be stopped from `launchctl stop`/`launchctl unload`.\n\n  To reproduce the issue:\n\n  ```console\n  $ launchctl load ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist\n  $ pgrep -fla bitcoin\n  60225 /usr/local/opt/bitcoin/bin/bitcoind\n  $ launchctl unload ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist\n  ```\n\n  Wait a few seconds and then run `pgrep` again:\n\n  ```console\n  $ pgrep -fla bitcoin\n  60225 /usr/local/opt/bitcoin/bin/bitcoind\n  ```\n\n  The node is still running. This happens because Launch Agent is not supposed to run programs as daemons, since the agent makes sure they run in the background. Running them as daemons makes the Launch Agent lose control of the process and, so, it cannot be stopped.\n\nTree-SHA512: 5342e1a858e478a226a1db292f1b8f8666bb252ee951753b131902c325ea3d47592cf245298decb423ac658a3175761b54dc2e7df6feea5343d65ba255613f67",
      "tree": {
        "sha": "ba589edf075d55434d1171c70daf0abb2c2673c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba589edf075d55434d1171c70daf0abb2c2673c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/093074b84395a5b562bc378971d29c89da4202a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnUUj8ACgkQHrd2uwPH\nki0YQhAA1T/vdSuPpmlnq7HZeR3w8FpWPpLGtz9YSwKfHalq0lFwzKKmZnkUnKQe\nQz9mTfuN9S1yp1KgQ8IRJEJ7PfOK7KcPKL5cr4iwXsRfjnws4NqQ2PXE0UPZI5n4\n1tdRplTopFLOTWmCD2QO5B0weX7rL3Lmusx7obMi0x/nIxqy99W0iXAKJ8UaQMxS\nPMgyKK4yTqM5cKP4H6GbBKkyf/1aZ2o9FVQ668C1VeRvFZ4vrXM+IXwDnjUUaSDo\nhEe74qfxFhu8uPi+30efQcNk2oSFgVF204rJRPHstVUw9UhZe9L8NEIphMXYWkCD\nGjb9dPuZhyRP9/7soy2PQ45opYSiWVa8hcTivbR7bXXWMAbyBAdSGHFE2nFsWgLw\nOnnwgyVEEpwAGnSBPnmWdPZQLaqwU5+8Z1J6UaegQc6vHuS7ghhMvPLE0sljQae+\nMEDojbvbdHbAKAQ/38a+uZTLPru0bzQVUnNVBmCLVYr8LpOZxY3J87w0+03kdBOD\ngILQSsalAczcR8hVxKru9vnsgIQPS1ZRhq+6/IcOmp/gddBKdOPgYq4RJE/OVO7/\ncnjl17tIVgmKfu4y/6JwWjCJcmERxbdcKn7j9bjz2twn90cqEarhd69/TDZ4sFvX\n0AG1w6pECP17Lt05PEbASX5Nrtd4Fv+zaXxemBsacf+V3kGbj9U=\n=B4oU\n-----END PGP SIGNATURE-----",
        "payload": "tree ba589edf075d55434d1171c70daf0abb2c2673c4\nparent b4a509a3f817121c3df98ddfd96b2769e18a3e5a\nparent ab5bba7783d2927e513af91e6c89c41bdfa47964\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507086898 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507086911 -0700\n\nMerge #11419: Utils: Fix launchctl not being able to stop bitcoind\n\nab5bba778 Fix launchctl not being able to stop bitcoind (Alejandro Avil\u00e9s)\n\nPull request description:\n\n  `bitcoind` should not be launched as daemon from the Launch Agent. Otherwise, the process cannot be stopped from `launchctl stop`/`launchctl unload`.\n\n  To reproduce the issue:\n\n  ```console\n  $ launchctl load ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist\n  $ pgrep -fla bitcoin\n  60225 /usr/local/opt/bitcoin/bin/bitcoind\n  $ launchctl unload ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist\n  ```\n\n  Wait a few seconds and then run `pgrep` again:\n\n  ```console\n  $ pgrep -fla bitcoin\n  60225 /usr/local/opt/bitcoin/bin/bitcoind\n  ```\n\n  The node is still running. This happens because Launch Agent is not supposed to run programs as daemons, since the agent makes sure they run in the background. Running them as daemons makes the Launch Agent lose control of the process and, so, it cannot be stopped.\n\nTree-SHA512: 5342e1a858e478a226a1db292f1b8f8666bb252ee951753b131902c325ea3d47592cf245298decb423ac658a3175761b54dc2e7df6feea5343d65ba255613f67\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093074b84395a5b562bc378971d29c89da4202a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/093074b84395a5b562bc378971d29c89da4202a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093074b84395a5b562bc378971d29c89da4202a4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a509a3f817121c3df98ddfd96b2769e18a3e5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a509a3f817121c3df98ddfd96b2769e18a3e5a"
      },
      {
        "sha": "ab5bba7783d2927e513af91e6c89c41bdfa47964",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab5bba7783d2927e513af91e6c89c41bdfa47964",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab5bba7783d2927e513af91e6c89c41bdfa47964"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95b5342f1ef9dc9b9bb66538d0cc842d02951d62",
        "filename": "contrib/init/org.bitcoin.bitcoind.plist",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/093074b84395a5b562bc378971d29c89da4202a4/contrib/init/org.bitcoin.bitcoind.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/093074b84395a5b562bc378971d29c89da4202a4/contrib/init/org.bitcoin.bitcoind.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/org.bitcoin.bitcoind.plist?ref=093074b84395a5b562bc378971d29c89da4202a4",
        "patch": "@@ -7,7 +7,6 @@\n \t<key>ProgramArguments</key>\n \t<array>\n \t\t<string>/usr/local/bin/bitcoind</string>\n-\t\t<string>-daemon</string>\n \t</array>\n \t<key>RunAtLoad</key>\n \t<true/>"
      }
    ]
  },
  {
    "sha": "505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDU1MzBjNmNmZmVhYjhkYzFmNzVmNTRhZTBkZmRjZGI1NWQzNzBi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-04T07:03:07Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-04T07:03:07Z"
      },
      "message": "Add missing multiwallet rpc calls to python coverage logs\n\nThis fixes a bug in coverage logging that's been around since the logging was\nintroduced.",
      "tree": {
        "sha": "841e2f6792d1b3e61405ccef8efa7f26d8d9d52b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/841e2f6792d1b3e61405ccef8efa7f26d8d9d52b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f67646f173dd29464666b34de2ec9cfc480c11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f67646f173dd29464666b34de2ec9cfc480c11a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f67646f173dd29464666b34de2ec9cfc480c11a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8101775ce1b9cd859bde36043e74480b30e9b944",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
        "patch": "@@ -54,7 +54,8 @@ def __call__(self, *args, **kwargs):\n         return return_val\n \n     def __truediv__(self, relative_uri):\n-        return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri)\n+        return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri,\n+                                       self.coverage_logfile)\n \n def get_filename(dirname, n_node):\n     \"\"\""
      }
    ]
  },
  {
    "sha": "74182f235cd04dcac7a8b3e763bc9add549745e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDE4MmYyMzVjZDA0ZGNhYzdhOGIzZTc2M2JjOWFkZDU0OTc0NWUx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-04T07:07:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-04T07:07:01Z"
      },
      "message": "Add missing batch rpc calls to python coverage logs\n\nWithout this change, batch RPC calls are not included in coverage logs.",
      "tree": {
        "sha": "f5d8f16c03b4916fa2a2a52077d3d160adcfcd4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5d8f16c03b4916fa2a2a52077d3d160adcfcd4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74182f235cd04dcac7a8b3e763bc9add549745e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74182f235cd04dcac7a8b3e763bc9add549745e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74182f235cd04dcac7a8b3e763bc9add549745e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74182f235cd04dcac7a8b3e763bc9add549745e1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/505530c6cffeab8dc1f75f54ae0dfdcdb55d370b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "84049e76bc2121549577c556d635a53943191f33",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74182f235cd04dcac7a8b3e763bc9add549745e1/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74182f235cd04dcac7a8b3e763bc9add549745e1/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=74182f235cd04dcac7a8b3e763bc9add549745e1",
        "patch": "@@ -45,18 +45,24 @@ def __call__(self, *args, **kwargs):\n \n         \"\"\"\n         return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\n+        self._log_call()\n+        return return_val\n+\n+    def _log_call(self):\n         rpc_method = self.auth_service_proxy_instance._service_name\n \n         if self.coverage_logfile:\n             with open(self.coverage_logfile, 'a+', encoding='utf8') as f:\n                 f.write(\"%s\\n\" % rpc_method)\n \n-        return return_val\n-\n     def __truediv__(self, relative_uri):\n         return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri,\n                                        self.coverage_logfile)\n \n+    def get_request(self, *args, **kwargs):\n+        self._log_call()\n+        return self.auth_service_proxy_instance.get_request(*args, **kwargs)\n+\n def get_filename(dirname, n_node):\n     \"\"\"\n     Get a filename unique to the test process ID and node."
      }
    ]
  },
  {
    "sha": "4526d21e52aa94f12121fcf01047c04f82c4990a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTI2ZDIxZTUyYWE5NGYxMjEyMWZjZjAxMDQ3YzA0ZjgyYzQ5OTBh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-07T21:40:25Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-04T07:07:01Z"
      },
      "message": "Add test for multiwallet batch RPC calls\n\nTests bug reported in https://github.com/bitcoin/bitcoin/issues/11257",
      "tree": {
        "sha": "559f64ddd8a073a84fefab0055966dd46565eed1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/559f64ddd8a073a84fefab0055966dd46565eed1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4526d21e52aa94f12121fcf01047c04f82c4990a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4526d21e52aa94f12121fcf01047c04f82c4990a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4526d21e52aa94f12121fcf01047c04f82c4990a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4526d21e52aa94f12121fcf01047c04f82c4990a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74182f235cd04dcac7a8b3e763bc9add549745e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74182f235cd04dcac7a8b3e763bc9add549745e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74182f235cd04dcac7a8b3e763bc9add549745e1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ec808e95cd45481f230befcea0a77e52ceb8b042",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4526d21e52aa94f12121fcf01047c04f82c4990a/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4526d21e52aa94f12121fcf01047c04f82c4990a/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=4526d21e52aa94f12121fcf01047c04f82c4990a",
        "patch": "@@ -76,5 +76,9 @@ def run_test(self):\n         assert_equal(w2.getbalance(), 1)\n         assert_equal(w3.getbalance(), 2)\n \n+        batch = w1.batch([w1.getblockchaininfo.get_request(), w1.getwalletinfo.get_request()])\n+        assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")\n+        assert_equal(batch[1][\"result\"][\"walletname\"], \"w1\")\n+\n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  },
  {
    "sha": "9ccafb1d7bdd172a9b963444072a844da379c4f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2NhZmIxZDdiZGQxNzJhOWI5NjM0NDQwNzJhODQ0ZGEzNzljNGY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T10:33:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T10:35:15Z"
      },
      "message": "Merge #11421: Merge current secp256k1 subtree\n\nfd86f998f Squashed 'src/secp256k1/' changes from 84973d393..0b7024185 (MarcoFalke)\n\nPull request description:\n\n  The subtree should now match upstream again. Check with:\n\n  ```sh\n  ./contrib/devtools/git-subtree-check.sh src/secp256k1\n  ```\n\n  The changes are only documentation/refactoring related.\n\nTree-SHA512: 43e8a95bcbfefef9e19ec38a92d2d57fdd4a16ddf726e036d36a0d806eb6f35b45b40ee69f980430e107895ec8725b5de4e36456b026214675e0b19630bb6fe9",
      "tree": {
        "sha": "46d0c8eca07afdfc626e08b752e6b3c8e7d2dafe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46d0c8eca07afdfc626e08b752e6b3c8e7d2dafe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ccafb1d7bdd172a9b963444072a844da379c4f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ1LljAAoJENLqSFDnUosl/NQQAIUJlKMStZhJCDhqEZV8opmb\nqL+joCoVsqOLeT5s2WMiEBmcFZKGK+8+J8V3NlaNB8YRckKMIIEyBVHpzaeSaIiu\na6BmJ7ssyNsYZAS8sNf1Rv3OMJJy0ppUYa/MXmVU8IIEp8hg+MS1j+28byK8cCPv\n5If/BrRHe7NYB6U/VD0aFLRrM6xqqz2y/nMWTg/wCKcYueUyp7SNwSEc9Y/wzQ0s\nTVd6znUUD5PQ2ESn3LDQi1KUvyVhEpsqKtqdcNZHG3PjHoEy6kkByHDNbcqFr/rz\nJHsTPiwUHglPtmTt5ZnWI56ILWatK1YJco59y5wKEMAZMcd9DUKBref67mCOyUw6\nvXHfXL7KOO2lC8CTE8y7OkKeYuQGZxVCdklpKmInDNi4JT5NYV1YxXEDEKUh3xi5\n13DZqd3q2rXBRNNJSenF98jGFqsbWEIs+AVA55bRUmP/+ZSSKw5YtZIpElNmDclW\n2QJ4qLHZwLRxb69g9Es82UwhhhHXDxMb0B8RF+293omSmvnYCGJbFHK6A8tBcYG0\nh0OV6RhH23xaAHLWxdbXcxVslJEBTTf8r0NpsShwaCrDzunIT3w1u8167iL+YEeP\n3Xf3QzfsQkOf4jZ5N6cbLt+JLTqBQe1UeOcpKkOacLoG0wuZw9LQbo9PolTMc0wg\np9CtPWUs55v8xyQjmw0F\n=T9JI\n-----END PGP SIGNATURE-----",
        "payload": "tree 46d0c8eca07afdfc626e08b752e6b3c8e7d2dafe\nparent 093074b84395a5b562bc378971d29c89da4202a4\nparent 999968e41662c1a676936db423db82af4411d78d\nauthor MarcoFalke <falke.marco@gmail.com> 1507113220 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1507113315 +0200\n\nMerge #11421: Merge current secp256k1 subtree\n\nfd86f998f Squashed 'src/secp256k1/' changes from 84973d393..0b7024185 (MarcoFalke)\n\nPull request description:\n\n  The subtree should now match upstream again. Check with:\n\n  ```sh\n  ./contrib/devtools/git-subtree-check.sh src/secp256k1\n  ```\n\n  The changes are only documentation/refactoring related.\n\nTree-SHA512: 43e8a95bcbfefef9e19ec38a92d2d57fdd4a16ddf726e036d36a0d806eb6f35b45b40ee69f980430e107895ec8725b5de4e36456b026214675e0b19630bb6fe9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccafb1d7bdd172a9b963444072a844da379c4f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccafb1d7bdd172a9b963444072a844da379c4f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccafb1d7bdd172a9b963444072a844da379c4f7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "093074b84395a5b562bc378971d29c89da4202a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093074b84395a5b562bc378971d29c89da4202a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/093074b84395a5b562bc378971d29c89da4202a4"
      },
      {
        "sha": "999968e41662c1a676936db423db82af4411d78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999968e41662c1a676936db423db82af4411d78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999968e41662c1a676936db423db82af4411d78d"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 185,
      "deletions": 176
    },
    "files": [
      {
        "sha": "7eaf63bf6a0ee44ec22be25bf9bbb100c551be1f",
        "filename": "src/secp256k1/contrib/lax_der_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/contrib/lax_der_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/contrib/lax_der_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_parsing.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -48,14 +48,14 @@\n  *   8.3.1.\n  */\n \n-#ifndef _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n-#define _SECP256K1_CONTRIB_LAX_DER_PARSING_H_\n+#ifndef SECP256K1_CONTRIB_LAX_DER_PARSING_H\n+#define SECP256K1_CONTRIB_LAX_DER_PARSING_H\n \n #include <secp256k1.h>\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Parse a signature in \"lax DER\" format\n  *\n@@ -88,4 +88,4 @@ int ecdsa_signature_parse_der_lax(\n }\n #endif\n \n-#endif\n+#endif /* SECP256K1_CONTRIB_LAX_DER_PARSING_H */"
      },
      {
        "sha": "fece261fb9ed2b24df692cb059338f9f91aece6e",
        "filename": "src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_privatekey_parsing.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -25,14 +25,14 @@\n  * library are sufficient.\n  */\n \n-#ifndef _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n-#define _SECP256K1_CONTRIB_BER_PRIVATEKEY_H_\n+#ifndef SECP256K1_CONTRIB_BER_PRIVATEKEY_H\n+#define SECP256K1_CONTRIB_BER_PRIVATEKEY_H\n \n #include <secp256k1.h>\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Export a private key in DER format.\n  *\n@@ -87,4 +87,4 @@ SECP256K1_WARN_UNUSED_RESULT int ec_privkey_import_der(\n }\n #endif\n \n-#endif\n+#endif /* SECP256K1_CONTRIB_BER_PRIVATEKEY_H */"
      },
      {
        "sha": "3e9c098d19f6a043f5f2fc0f9f1e05245487e0cd",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -1,9 +1,9 @@\n-#ifndef _SECP256K1_\n-# define _SECP256K1_\n+#ifndef SECP256K1_H\n+#define SECP256K1_H\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n #include <stddef.h>\n \n@@ -61,7 +61,7 @@ typedef struct {\n  *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n  *  If you need to convert to a format suitable for storage, transmission, or\n  *  comparison, use the secp256k1_ecdsa_signature_serialize_* and\n- *  secp256k1_ecdsa_signature_serialize_* functions.\n+ *  secp256k1_ecdsa_signature_parse_* functions.\n  */\n typedef struct {\n     unsigned char data[64];\n@@ -159,6 +159,13 @@ typedef int (*secp256k1_nonce_function)(\n #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)\n #define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)\n \n+/** Prefix byte used to tag various encoded curvepoints for specific purposes */\n+#define SECP256K1_TAG_PUBKEY_EVEN 0x02\n+#define SECP256K1_TAG_PUBKEY_ODD 0x03\n+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED 0x04\n+#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN 0x06\n+#define SECP256K1_TAG_PUBKEY_HYBRID_ODD 0x07\n+\n /** Create a secp256k1 context object.\n  *\n  *  Returns: a newly created context object.\n@@ -607,8 +614,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_combine(\n     size_t n\n ) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_H */"
      },
      {
        "sha": "88492dc1a40bcf4f907a97c88d892d9e9122107d",
        "filename": "src/secp256k1/include/secp256k1_ecdh.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/include/secp256k1_ecdh.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/include/secp256k1_ecdh.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_ecdh.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -1,11 +1,11 @@\n-#ifndef _SECP256K1_ECDH_\n-# define _SECP256K1_ECDH_\n+#ifndef SECP256K1_ECDH_H\n+#define SECP256K1_ECDH_H\n \n-# include \"secp256k1.h\"\n+#include \"secp256k1.h\"\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Compute an EC Diffie-Hellman secret in constant time\n  *  Returns: 1: exponentiation was successful\n@@ -24,8 +24,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdh(\n   const unsigned char *privkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_ECDH_H */"
      },
      {
        "sha": "cf6c5ed7f5e3db97507ed3d68dee95081abe3ddb",
        "filename": "src/secp256k1/include/secp256k1_recovery.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/include/secp256k1_recovery.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/include/secp256k1_recovery.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_recovery.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -1,11 +1,11 @@\n-#ifndef _SECP256K1_RECOVERY_\n-# define _SECP256K1_RECOVERY_\n+#ifndef SECP256K1_RECOVERY_H\n+#define SECP256K1_RECOVERY_H\n \n-# include \"secp256k1.h\"\n+#include \"secp256k1.h\"\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n extern \"C\" {\n-# endif\n+#endif\n \n /** Opaque data structured that holds a parsed ECDSA signature,\n  *  supporting pubkey recovery.\n@@ -103,8 +103,8 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover(\n     const unsigned char *msg32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n-# ifdef __cplusplus\n+#ifdef __cplusplus\n }\n-# endif\n-\n #endif\n+\n+#endif /* SECP256K1_RECOVERY_H */"
      },
      {
        "sha": "8521f07999322d709c4232b3649d39b54be19307",
        "filename": "src/secp256k1/sage/group_prover.sage",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/group_prover.sage?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -17,7 +17,7 @@\n #   - A constraint describing the requirements of the law, called \"require\"\n # * Implementations are transliterated into functions that operate as well on\n #   algebraic input points, and are called once per combination of branches\n-#   exectured. Each execution returns:\n+#   executed. Each execution returns:\n #   - A constraint describing the assumptions this implementation requires\n #     (such as Z1=1), called \"assumeFormula\"\n #   - A constraint describing the assumptions this specific branch requires,"
      },
      {
        "sha": "5a9cc3ffcfdaf200779eea6082b5168e8311211c",
        "filename": "src/secp256k1/src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/asm/field_10x26_arm.s?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -23,7 +23,7 @@ Note:\n \t.eabi_attribute 10, 0 @ Tag_FP_arch = none\n \t.eabi_attribute 24, 1 @ Tag_ABI_align_needed = 8-byte\n \t.eabi_attribute 25, 1 @ Tag_ABI_align_preserved = 8-byte, except leaf SP\n-\t.eabi_attribute 30, 2 @ Tag_ABI_optimization_goals = Agressive Speed\n+\t.eabi_attribute 30, 2 @ Tag_ABI_optimization_goals = Aggressive Speed\n \t.eabi_attribute 34, 1 @ Tag_CPU_unaligned_access = v6\n \t.text\n "
      },
      {
        "sha": "fc588061ca40cdcc30151f5b7e17bc83b4a7125e",
        "filename": "src/secp256k1/src/basic-config.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/basic-config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/basic-config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/basic-config.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_BASIC_CONFIG_\n-#define _SECP256K1_BASIC_CONFIG_\n+#ifndef SECP256K1_BASIC_CONFIG_H\n+#define SECP256K1_BASIC_CONFIG_H\n \n #ifdef USE_BASIC_CONFIG\n \n@@ -28,5 +28,6 @@\n #define USE_FIELD_10X26 1\n #define USE_SCALAR_8X32 1\n \n-#endif // USE_BASIC_CONFIG\n-#endif // _SECP256K1_BASIC_CONFIG_\n+#endif /* USE_BASIC_CONFIG */\n+\n+#endif /* SECP256K1_BASIC_CONFIG_H */"
      },
      {
        "sha": "d5ebe01301b81457cc3db630687458046b70af22",
        "filename": "src/secp256k1/src/bench.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_BENCH_H_\n-#define _SECP256K1_BENCH_H_\n+#ifndef SECP256K1_BENCH_H\n+#define SECP256K1_BENCH_H\n \n #include <stdio.h>\n #include <math.h>\n@@ -63,4 +63,4 @@ void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), v\n     printf(\"us\\n\");\n }\n \n-#endif\n+#endif /* SECP256K1_BENCH_H */"
      },
      {
        "sha": "80590c7cc862db786aac61092753b78057d89ecb",
        "filename": "src/secp256k1/src/ecdsa.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecdsa.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecdsa.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECDSA_\n-#define _SECP256K1_ECDSA_\n+#ifndef SECP256K1_ECDSA_H\n+#define SECP256K1_ECDSA_H\n \n #include <stddef.h>\n \n@@ -18,4 +18,4 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const\n static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar* r, const secp256k1_scalar* s, const secp256k1_ge *pubkey, const secp256k1_scalar *message);\n static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid);\n \n-#endif\n+#endif /* SECP256K1_ECDSA_H */"
      },
      {
        "sha": "c3400042d83935b6c3900ada179ebaaeb4afefa9",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -5,8 +5,8 @@\n  **********************************************************************/\n \n \n-#ifndef _SECP256K1_ECDSA_IMPL_H_\n-#define _SECP256K1_ECDSA_IMPL_H_\n+#ifndef SECP256K1_ECDSA_IMPL_H\n+#define SECP256K1_ECDSA_IMPL_H\n \n #include \"scalar.h\"\n #include \"field.h\"\n@@ -81,8 +81,6 @@ static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned cha\n         return -1;\n     }\n     while (lenleft > 0) {\n-        if ((ret >> ((sizeof(size_t) - 1) * 8)) != 0) {\n-        }\n         ret = (ret << 8) | **sigp;\n         if (ret + lenleft > (size_t)(sigend - *sigp)) {\n             /* Result exceeds the length of the passed array. */\n@@ -312,4 +310,4 @@ static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, sec\n     return 1;\n }\n \n-#endif\n+#endif /* SECP256K1_ECDSA_IMPL_H */"
      },
      {
        "sha": "b621f1e6c39d93f0539d2090b326dcd4f26c61a3",
        "filename": "src/secp256k1/src/eckey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/eckey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/eckey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECKEY_\n-#define _SECP256K1_ECKEY_\n+#ifndef SECP256K1_ECKEY_H\n+#define SECP256K1_ECKEY_H\n \n #include <stddef.h>\n \n@@ -22,4 +22,4 @@ static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx,\n static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak);\n static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak);\n \n-#endif\n+#endif /* SECP256K1_ECKEY_H */"
      },
      {
        "sha": "1ab9a68ec048c55a72e79674073e805e92487d63",
        "filename": "src/secp256k1/src/eckey_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/eckey_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/eckey_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECKEY_IMPL_H_\n-#define _SECP256K1_ECKEY_IMPL_H_\n+#ifndef SECP256K1_ECKEY_IMPL_H\n+#define SECP256K1_ECKEY_IMPL_H\n \n #include \"eckey.h\"\n \n@@ -15,16 +15,17 @@\n #include \"ecmult_gen.h\"\n \n static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {\n-    if (size == 33 && (pub[0] == 0x02 || pub[0] == 0x03)) {\n+    if (size == 33 && (pub[0] == SECP256K1_TAG_PUBKEY_EVEN || pub[0] == SECP256K1_TAG_PUBKEY_ODD)) {\n         secp256k1_fe x;\n-        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == 0x03);\n+        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == SECP256K1_TAG_PUBKEY_ODD);\n     } else if (size == 65 && (pub[0] == 0x04 || pub[0] == 0x06 || pub[0] == 0x07)) {\n         secp256k1_fe x, y;\n         if (!secp256k1_fe_set_b32(&x, pub+1) || !secp256k1_fe_set_b32(&y, pub+33)) {\n             return 0;\n         }\n         secp256k1_ge_set_xy(elem, &x, &y);\n-        if ((pub[0] == 0x06 || pub[0] == 0x07) && secp256k1_fe_is_odd(&y) != (pub[0] == 0x07)) {\n+        if ((pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_EVEN || pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_ODD) &&\n+            secp256k1_fe_is_odd(&y) != (pub[0] == SECP256K1_TAG_PUBKEY_HYBRID_ODD)) {\n             return 0;\n         }\n         return secp256k1_ge_is_valid_var(elem);\n@@ -42,10 +43,10 @@ static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *p\n     secp256k1_fe_get_b32(&pub[1], &elem->x);\n     if (compressed) {\n         *size = 33;\n-        pub[0] = 0x02 | (secp256k1_fe_is_odd(&elem->y) ? 0x01 : 0x00);\n+        pub[0] = secp256k1_fe_is_odd(&elem->y) ? SECP256K1_TAG_PUBKEY_ODD : SECP256K1_TAG_PUBKEY_EVEN;\n     } else {\n         *size = 65;\n-        pub[0] = 0x04;\n+        pub[0] = SECP256K1_TAG_PUBKEY_UNCOMPRESSED;\n         secp256k1_fe_get_b32(&pub[33], &elem->y);\n     }\n     return 1;\n@@ -96,4 +97,4 @@ static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx,\n     return 1;\n }\n \n-#endif\n+#endif /* SECP256K1_ECKEY_IMPL_H */"
      },
      {
        "sha": "6d44aba60b53b3ba6c3ad9e5cc67edce1faf4661",
        "filename": "src/secp256k1/src/ecmult.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_\n-#define _SECP256K1_ECMULT_\n+#ifndef SECP256K1_ECMULT_H\n+#define SECP256K1_ECMULT_H\n \n #include \"num.h\"\n #include \"group.h\"\n@@ -28,4 +28,4 @@ static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx\n /** Double multiply: R = na*A + ng*G */\n static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_H */"
      },
      {
        "sha": "72bf7d7582f15f9eb176bf215ea7622701481e08",
        "filename": "src/secp256k1/src/ecmult_const.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_const.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_const.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,12 +4,12 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_CONST_\n-#define _SECP256K1_ECMULT_CONST_\n+#ifndef SECP256K1_ECMULT_CONST_H\n+#define SECP256K1_ECMULT_CONST_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n \n static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *q);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_CONST_H */"
      },
      {
        "sha": "7d7a172b7b385d5eea8fb81e3b9ee785a8bef971",
        "filename": "src/secp256k1/src/ecmult_const_impl.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_const_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_const_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_CONST_IMPL_\n-#define _SECP256K1_ECMULT_CONST_IMPL_\n+#ifndef SECP256K1_ECMULT_CONST_IMPL_H\n+#define SECP256K1_ECMULT_CONST_IMPL_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -42,11 +42,12 @@\n } while(0)\n \n \n-/** Convert a number to WNAF notation. The number becomes represented by sum(2^{wi} * wnaf[i], i=0..return_val)\n- *  with the following guarantees:\n+/** Convert a number to WNAF notation.\n+ *  The number becomes represented by sum(2^{wi} * wnaf[i], i=0..WNAF_SIZE(w)+1) - return_val.\n+ *  It has the following guarantees:\n  *  - each wnaf[i] an odd integer between -(1 << w) and (1 << w)\n  *  - each wnaf[i] is nonzero\n- *  - the number of words set is returned; this is always (WNAF_BITS + w - 1) / w\n+ *  - the number of words set is always WNAF_SIZE(w) + 1\n  *\n  *  Adapted from `The Width-w NAF Method Provides Small Memory and Fast Elliptic Scalar\n  *  Multiplications Secure against Side Channel Attacks`, Okeya and Tagaki. M. Joye (Ed.)\n@@ -236,4 +237,4 @@ static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, cons\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_CONST_IMPL_H */"
      },
      {
        "sha": "7564b7015f0b79aaa49ac6f81656cc22e5f3f08f",
        "filename": "src/secp256k1/src/ecmult_gen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_GEN_\n-#define _SECP256K1_ECMULT_GEN_\n+#ifndef SECP256K1_ECMULT_GEN_H\n+#define SECP256K1_ECMULT_GEN_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -40,4 +40,4 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context* ctx, secp25\n \n static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32);\n \n-#endif\n+#endif /* SECP256K1_ECMULT_GEN_H */"
      },
      {
        "sha": "9615b932dd5956562cdb521e62fd09ecdfec3fae",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_GEN_IMPL_H_\n-#define _SECP256K1_ECMULT_GEN_IMPL_H_\n+#ifndef SECP256K1_ECMULT_GEN_IMPL_H\n+#define SECP256K1_ECMULT_GEN_IMPL_H\n \n #include \"scalar.h\"\n #include \"group.h\"\n@@ -207,4 +207,4 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const\n     secp256k1_gej_clear(&gb);\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_GEN_IMPL_H */"
      },
      {
        "sha": "93d3794cb43488eac6b6ab231f067ff7f3db71c8",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_ECMULT_IMPL_H_\n-#define _SECP256K1_ECMULT_IMPL_H_\n+#ifndef SECP256K1_ECMULT_IMPL_H\n+#define SECP256K1_ECMULT_IMPL_H\n \n #include <string.h>\n \n@@ -403,4 +403,4 @@ static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_ECMULT_IMPL_H */"
      },
      {
        "sha": "bb6692ad57835498257a492028e1646d7cc584f5",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_\n-#define _SECP256K1_FIELD_\n+#ifndef SECP256K1_FIELD_H\n+#define SECP256K1_FIELD_H\n \n /** Field element module.\n  *\n@@ -129,4 +129,4 @@ static void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_f\n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n static void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag);\n \n-#endif\n+#endif /* SECP256K1_FIELD_H */"
      },
      {
        "sha": "727c5267fbb5fc46894d7d9ca2b7bab5ab7eb10d",
        "filename": "src/secp256k1/src/field_10x26.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_10x26.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_10x26.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n+#ifndef SECP256K1_FIELD_REPR_H\n+#define SECP256K1_FIELD_REPR_H\n \n #include <stdint.h>\n \n@@ -44,4 +44,5 @@ typedef struct {\n \n #define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }}\n #define SECP256K1_FE_STORAGE_CONST_GET(d) d.n[7], d.n[6], d.n[5], d.n[4],d.n[3], d.n[2], d.n[1], d.n[0]\n-#endif\n+\n+#endif /* SECP256K1_FIELD_REPR_H */"
      },
      {
        "sha": "94f8132fc8e62bd3276c14d4ab910378a430d388",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n+#ifndef SECP256K1_FIELD_REPR_IMPL_H\n+#define SECP256K1_FIELD_REPR_IMPL_H\n \n #include \"util.h\"\n #include \"num.h\"\n@@ -1158,4 +1158,4 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "bccd8feb4dde63dc0e9d2197fa5e9943882e2069",
        "filename": "src/secp256k1/src/field_5x52.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n+#ifndef SECP256K1_FIELD_REPR_H\n+#define SECP256K1_FIELD_REPR_H\n \n #include <stdint.h>\n \n@@ -44,4 +44,4 @@ typedef struct {\n     (d6) | (((uint64_t)(d7)) << 32) \\\n }}\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_H */"
      },
      {
        "sha": "1fc3171f6b0ed85323807c26dabbe883eb24355f",
        "filename": "src/secp256k1/src/field_5x52_asm_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52_asm_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52_asm_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_asm_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -11,8 +11,8 @@\n  * - December 2014, Pieter Wuille: converted from YASM to GCC inline assembly\n  */\n \n-#ifndef _SECP256K1_FIELD_INNER5X52_IMPL_H_\n-#define _SECP256K1_FIELD_INNER5X52_IMPL_H_\n+#ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n+#define SECP256K1_FIELD_INNER5X52_IMPL_H\n \n SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n /**\n@@ -499,4 +499,4 @@ __asm__ __volatile__(\n );\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_INNER5X52_IMPL_H */"
      },
      {
        "sha": "957c61b01451a0f09ee6499db45c0745180da3b4",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n+#ifndef SECP256K1_FIELD_REPR_IMPL_H\n+#define SECP256K1_FIELD_REPR_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -493,4 +493,4 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "95a0d1791c0557fe65995c96acb26a1a1bae36cf",
        "filename": "src/secp256k1/src/field_5x52_int128_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52_int128_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_5x52_int128_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_int128_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_INNER5X52_IMPL_H_\n-#define _SECP256K1_FIELD_INNER5X52_IMPL_H_\n+#ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n+#define SECP256K1_FIELD_INNER5X52_IMPL_H\n \n #include <stdint.h>\n \n@@ -274,4 +274,4 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t\n     /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_INNER5X52_IMPL_H */"
      },
      {
        "sha": "20428648af31299921fa0dc250e6951912178ec8",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_FIELD_IMPL_H_\n-#define _SECP256K1_FIELD_IMPL_H_\n+#ifndef SECP256K1_FIELD_IMPL_H\n+#define SECP256K1_FIELD_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -312,4 +312,4 @@ static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {\n #endif\n }\n \n-#endif\n+#endif /* SECP256K1_FIELD_IMPL_H */"
      },
      {
        "sha": "ea1302deb8296eef824abed82ccad35dcab749cd",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_GROUP_\n-#define _SECP256K1_GROUP_\n+#ifndef SECP256K1_GROUP_H\n+#define SECP256K1_GROUP_H\n \n #include \"num.h\"\n #include \"field.h\"\n@@ -141,4 +141,4 @@ static void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_g\n /** Rescale a jacobian point by b which must be non-zero. Constant-time. */\n static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *b);\n \n-#endif\n+#endif /* SECP256K1_GROUP_H */"
      },
      {
        "sha": "b31b6c12efe336d0b866b95e58e1ecb4adef61af",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_GROUP_IMPL_H_\n-#define _SECP256K1_GROUP_IMPL_H_\n+#ifndef SECP256K1_GROUP_IMPL_H\n+#define SECP256K1_GROUP_IMPL_H\n \n #include \"num.h\"\n #include \"field.h\"\n@@ -697,4 +697,4 @@ static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {\n     return secp256k1_fe_is_quad_var(&yz);\n }\n \n-#endif\n+#endif /* SECP256K1_GROUP_IMPL_H */"
      },
      {
        "sha": "e08d25d2255c097e6574d55145b173b3f0ed0fdb",
        "filename": "src/secp256k1/src/hash.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_HASH_\n-#define _SECP256K1_HASH_\n+#ifndef SECP256K1_HASH_H\n+#define SECP256K1_HASH_H\n \n #include <stdlib.h>\n #include <stdint.h>\n@@ -38,4 +38,4 @@ static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha2\n static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n \n-#endif\n+#endif /* SECP256K1_HASH_H */"
      },
      {
        "sha": "4c9964ee06284338cf33a5c2be4661f11ea40652",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_HASH_IMPL_H_\n-#define _SECP256K1_HASH_IMPL_H_\n+#ifndef SECP256K1_HASH_IMPL_H\n+#define SECP256K1_HASH_IMPL_H\n \n #include \"hash.h\"\n \n@@ -278,4 +278,4 @@ static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256\n #undef Maj\n #undef Ch\n \n-#endif\n+#endif /* SECP256K1_HASH_IMPL_H */"
      },
      {
        "sha": "01ecba4d537483998ded89af1ef307eb7da0c301",
        "filename": "src/secp256k1/src/modules/ecdh/main_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/ecdh/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/ecdh/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/main_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_ECDH_MAIN_\n-#define _SECP256K1_MODULE_ECDH_MAIN_\n+#ifndef SECP256K1_MODULE_ECDH_MAIN_H\n+#define SECP256K1_MODULE_ECDH_MAIN_H\n \n #include \"include/secp256k1_ecdh.h\"\n #include \"ecmult_const_impl.h\"\n@@ -51,4 +51,4 @@ int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const se\n     return ret;\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_ECDH_MAIN_H */"
      },
      {
        "sha": "cec30b67c67c2858eea9229863e8e74246523c2b",
        "filename": "src/secp256k1/src/modules/ecdh/tests_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/tests_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_ECDH_TESTS_\n-#define _SECP256K1_MODULE_ECDH_TESTS_\n+#ifndef SECP256K1_MODULE_ECDH_TESTS_H\n+#define SECP256K1_MODULE_ECDH_TESTS_H\n \n void test_ecdh_api(void) {\n     /* Setup context that just counts errors */\n@@ -102,4 +102,4 @@ void run_ecdh_tests(void) {\n     test_bad_scalar();\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_ECDH_TESTS_H */"
      },
      {
        "sha": "2f6691c5a1309d1b3a8b67014617f425202c88ca",
        "filename": "src/secp256k1/src/modules/recovery/main_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/recovery/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/recovery/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/main_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_RECOVERY_MAIN_\n-#define _SECP256K1_MODULE_RECOVERY_MAIN_\n+#ifndef SECP256K1_MODULE_RECOVERY_MAIN_H\n+#define SECP256K1_MODULE_RECOVERY_MAIN_H\n \n #include \"include/secp256k1_recovery.h\"\n \n@@ -190,4 +190,4 @@ int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubk\n     }\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_RECOVERY_MAIN_H */"
      },
      {
        "sha": "5c9bbe86101c9f59bf288019c2923fe6c5019b0e",
        "filename": "src/secp256k1/src/modules/recovery/tests_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/recovery/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/modules/recovery/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/tests_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_RECOVERY_TESTS_\n-#define _SECP256K1_MODULE_RECOVERY_TESTS_\n+#ifndef SECP256K1_MODULE_RECOVERY_TESTS_H\n+#define SECP256K1_MODULE_RECOVERY_TESTS_H\n \n static int recovery_test_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n     (void) msg32;\n@@ -390,4 +390,4 @@ void run_recovery_tests(void) {\n     test_ecdsa_recovery_edge_cases();\n }\n \n-#endif\n+#endif /* SECP256K1_MODULE_RECOVERY_TESTS_H */"
      },
      {
        "sha": "49f2dd791d5696bf89a11caf5461e3f5b33aaca0",
        "filename": "src/secp256k1/src/num.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_\n-#define _SECP256K1_NUM_\n+#ifndef SECP256K1_NUM_H\n+#define SECP256K1_NUM_H\n \n #ifndef USE_NUM_NONE\n \n@@ -71,4 +71,4 @@ static void secp256k1_num_negate(secp256k1_num *r);\n \n #endif\n \n-#endif\n+#endif /* SECP256K1_NUM_H */"
      },
      {
        "sha": "3619844bd5127eb4018efc05e16e78ae9143a93a",
        "filename": "src/secp256k1/src/num_gmp.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_REPR_\n-#define _SECP256K1_NUM_REPR_\n+#ifndef SECP256K1_NUM_REPR_H\n+#define SECP256K1_NUM_REPR_H\n \n #include <gmp.h>\n \n@@ -17,4 +17,4 @@ typedef struct {\n     int limbs;\n } secp256k1_num;\n \n-#endif\n+#endif /* SECP256K1_NUM_REPR_H */"
      },
      {
        "sha": "0ae2a8ba0ecb7b5b61aca0f94676dd7cbf86c437",
        "filename": "src/secp256k1/src/num_gmp_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_REPR_IMPL_H_\n-#define _SECP256K1_NUM_REPR_IMPL_H_\n+#ifndef SECP256K1_NUM_REPR_IMPL_H\n+#define SECP256K1_NUM_REPR_IMPL_H\n \n #include <string.h>\n #include <stdlib.h>\n@@ -285,4 +285,4 @@ static void secp256k1_num_negate(secp256k1_num *r) {\n     r->neg ^= 1;\n }\n \n-#endif\n+#endif /* SECP256K1_NUM_REPR_IMPL_H */"
      },
      {
        "sha": "c45193b033dab813c0ec30697f23fd60098b8e9a",
        "filename": "src/secp256k1/src/num_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/num_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_NUM_IMPL_H_\n-#define _SECP256K1_NUM_IMPL_H_\n+#ifndef SECP256K1_NUM_IMPL_H\n+#define SECP256K1_NUM_IMPL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -21,4 +21,4 @@\n #error \"Please select num implementation\"\n #endif\n \n-#endif\n+#endif /* SECP256K1_NUM_IMPL_H */"
      },
      {
        "sha": "59304cb66e90504bbc65ec13449160336c91d66a",
        "filename": "src/secp256k1/src/scalar.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_\n-#define _SECP256K1_SCALAR_\n+#ifndef SECP256K1_SCALAR_H\n+#define SECP256K1_SCALAR_H\n \n #include \"num.h\"\n \n@@ -103,4 +103,4 @@ static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar\n /** Multiply a and b (without taking the modulus!), divide by 2**shift, and round to the nearest integer. Shift must be at least 256. */\n static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift);\n \n-#endif\n+#endif /* SECP256K1_SCALAR_H */"
      },
      {
        "sha": "19c7495d1c8e38db57068425f9b6bcc89abe5747",
        "filename": "src/secp256k1/src/scalar_4x64.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_4x64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_4x64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n@@ -16,4 +16,4 @@ typedef struct {\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "db1ebf94bee0415abcc20a0aa6359997a4b53b25",
        "filename": "src/secp256k1/src/scalar_4x64_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_4x64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_4x64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)\n@@ -946,4 +946,4 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r,\n     secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1);\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "2c9a348e2476057521f6ce89c7847333d031daf3",
        "filename": "src/secp256k1/src/scalar_8x32.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_8x32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_8x32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n@@ -16,4 +16,4 @@ typedef struct {\n \n #define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{(d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7)}}\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "4f9ed61feaeccf4fca036df8d9f24df2ad7a14ed",
        "filename": "src/secp256k1/src/scalar_8x32_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_8x32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_8x32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint32_t)0xD0364141UL)\n@@ -718,4 +718,4 @@ SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r,\n     secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 5] >> ((shift - 1) & 0x1f)) & 1);\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "fa790570ff837e2d98a1b606ed598bc9ac70fd4b",
        "filename": "src/secp256k1/src/scalar_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_IMPL_H_\n-#define _SECP256K1_SCALAR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_IMPL_H\n+#define SECP256K1_SCALAR_IMPL_H\n \n #include \"group.h\"\n #include \"scalar.h\"\n@@ -330,4 +330,4 @@ static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar\n #endif\n #endif\n \n-#endif\n+#endif /* SECP256K1_SCALAR_IMPL_H */"
      },
      {
        "sha": "5836febc5b729d8113842212b31fee01b21410cb",
        "filename": "src/secp256k1/src/scalar_low.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_low.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_low.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_low.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,12 +4,12 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_\n-#define _SECP256K1_SCALAR_REPR_\n+#ifndef SECP256K1_SCALAR_REPR_H\n+#define SECP256K1_SCALAR_REPR_H\n \n #include <stdint.h>\n \n /** A scalar modulo the group order of the secp256k1 curve. */\n typedef uint32_t secp256k1_scalar;\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_H */"
      },
      {
        "sha": "c80e70c5a2ad2e310110ebd834edd2d1ad5a1a79",
        "filename": "src/secp256k1/src/scalar_low_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_low_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/scalar_low_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_low_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n-#define _SECP256K1_SCALAR_REPR_IMPL_H_\n+#ifndef SECP256K1_SCALAR_REPR_IMPL_H\n+#define SECP256K1_SCALAR_REPR_IMPL_H\n \n #include \"scalar.h\"\n \n@@ -111,4 +111,4 @@ SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const\n     return *a == *b;\n }\n \n-#endif\n+#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"
      },
      {
        "sha": "f1f9be077e378839e9c763a6d29e6a3682243e60",
        "filename": "src/secp256k1/src/testrand.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/testrand.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/testrand.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_TESTRAND_H_\n-#define _SECP256K1_TESTRAND_H_\n+#ifndef SECP256K1_TESTRAND_H\n+#define SECP256K1_TESTRAND_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -35,4 +35,4 @@ static void secp256k1_rand256_test(unsigned char *b32);\n /** Generate pseudorandom bytes with long sequences of zero and one bits. */\n static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len);\n \n-#endif\n+#endif /* SECP256K1_TESTRAND_H */"
      },
      {
        "sha": "1255574209440a1c77dcd9cf60502f2d15cffcc2",
        "filename": "src/secp256k1/src/testrand_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/testrand_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/testrand_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand_impl.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_TESTRAND_IMPL_H_\n-#define _SECP256K1_TESTRAND_IMPL_H_\n+#ifndef SECP256K1_TESTRAND_IMPL_H\n+#define SECP256K1_TESTRAND_IMPL_H\n \n #include <stdint.h>\n #include <string.h>\n@@ -107,4 +107,4 @@ static void secp256k1_rand256_test(unsigned char *b32) {\n     secp256k1_rand_bytes_test(b32, 32);\n }\n \n-#endif\n+#endif /* SECP256K1_TESTRAND_IMPL_H */"
      },
      {
        "sha": "b0441d8e305a4d6b557f46d6417d28dde9553f9c",
        "filename": "src/secp256k1/src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccafb1d7bdd172a9b963444072a844da379c4f7/src/secp256k1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/util.h?ref=9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "patch": "@@ -4,8 +4,8 @@\n  * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n  **********************************************************************/\n \n-#ifndef _SECP256K1_UTIL_H_\n-#define _SECP256K1_UTIL_H_\n+#ifndef SECP256K1_UTIL_H\n+#define SECP256K1_UTIL_H\n \n #if defined HAVE_CONFIG_H\n #include \"libsecp256k1-config.h\"\n@@ -110,4 +110,4 @@ static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_\n SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;\n #endif\n \n-#endif\n+#endif /* SECP256K1_UTIL_H */"
      }
    ]
  },
  {
    "sha": "a4c833fec104457c9ed31885821c2e5bbc7c65c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGM4MzNmZWMxMDQ0NTdjOWVkMzE4ODU4MjFjMmU1YmJjN2M2NWM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T12:23:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T12:26:03Z"
      },
      "message": "Merge #11443: [qa] Allow \"make cov\" out-of-tree; Fix rpc mapping check\n\nfae60e3 qa: Fix lcov for out-of-tree builds (MarcoFalke)\nfae2673 qa: check-rpc-mapping must not run on empty lists (MarcoFalke)\n\nPull request description:\n\n  Random qa fixups:\n\n  * `make cov` should work for out-of-tree builds\n  * `check-rpc-mappings.py` should assert that it is actually checking something and the lists are not empty.\n\nTree-SHA512: 2b66f69d6a1ae035c772f8ceb1d58dce904d98058330dad6ccb1421941e167aa748fe1c12126b87f43b0843f51fa85d89de079d586629fcaf8261c44a8dc6053",
      "tree": {
        "sha": "c6b03d617bf284747e95db23edba74469b58b0c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6b03d617bf284747e95db23edba74469b58b0c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4c833fec104457c9ed31885821c2e5bbc7c65c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1NNbAAoJEB5K7WKYbNJd8OEH/AgeQb2OdsWVxmR9ib5kWwfc\n8PUwJBoT2QdmsG4F1Bz/+QCbuAq4rTC5chWHm6tuEzXaPX7WTgDyqoel9DKySNmQ\nc2hhPx3XLv+LgVTLPauKh08jqUfX0lgIAPMQq4vDR0bb7YnB5FtFJIIzMI2mCJ59\nycH9zskwHPIx6VmYRsnNtwVWwhCn6QPOX5ws3c7fY5vUSpK2jWd3fGv8QJZuonJs\nG/Xc1dG2bRs1a0gKncFIiU/FmTQJyqn1ldVkAD2bgxASjPj9s55jwe7fb0PCrBdj\nTcCKuW8M6qcXTQHSMbIMuLPvmWVrWKNfetPyYbhUlSETNHIpqu5cl3lJsAZo8zE=\n=4B5X\n-----END PGP SIGNATURE-----",
        "payload": "tree c6b03d617bf284747e95db23edba74469b58b0c4\nparent 9ccafb1d7bdd172a9b963444072a844da379c4f7\nparent fae60e338639b3a09d2f26d8eb5feb3bb576b1fd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507119788 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507119963 +0200\n\nMerge #11443: [qa] Allow \"make cov\" out-of-tree; Fix rpc mapping check\n\nfae60e3 qa: Fix lcov for out-of-tree builds (MarcoFalke)\nfae2673 qa: check-rpc-mapping must not run on empty lists (MarcoFalke)\n\nPull request description:\n\n  Random qa fixups:\n\n  * `make cov` should work for out-of-tree builds\n  * `check-rpc-mappings.py` should assert that it is actually checking something and the lists are not empty.\n\nTree-SHA512: 2b66f69d6a1ae035c772f8ceb1d58dce904d98058330dad6ccb1421941e167aa748fe1c12126b87f43b0843f51fa85d89de079d586629fcaf8261c44a8dc6053\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4c833fec104457c9ed31885821c2e5bbc7c65c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4c833fec104457c9ed31885821c2e5bbc7c65c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4c833fec104457c9ed31885821c2e5bbc7c65c4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccafb1d7bdd172a9b963444072a844da379c4f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccafb1d7bdd172a9b963444072a844da379c4f7"
      },
      {
        "sha": "fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae60e338639b3a09d2f26d8eb5feb3bb576b1fd"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "81c84a8af40cc4bc9b43b0001f37bd38f90cce30",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4c833fec104457c9ed31885821c2e5bbc7c65c4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4c833fec104457c9ed31885821c2e5bbc7c65c4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a4c833fec104457c9ed31885821c2e5bbc7c65c4",
        "patch": "@@ -1231,6 +1231,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n+AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n "
      },
      {
        "sha": "7e96852c5c26c78040ec173c2a14f5869218e35c",
        "filename": "contrib/devtools/check-rpc-mappings.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4c833fec104457c9ed31885821c2e5bbc7c65c4/contrib/devtools/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4c833fec104457c9ed31885821c2e5bbc7c65c4/contrib/devtools/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-rpc-mappings.py?ref=a4c833fec104457c9ed31885821c2e5bbc7c65c4",
        "patch": "@@ -63,7 +63,7 @@ def process_commands(fname):\n                     else:\n                         args = []\n                     cmds.append(RPCCommand(name, args))\n-    assert not in_rpcs, \"Something went wrong with parsing the C++ file: update the regexps\"\n+    assert not in_rpcs and cmds, \"Something went wrong with parsing the C++ file: update the regexps\"\n     return cmds\n \n def process_mapping(fname):\n@@ -86,7 +86,7 @@ def process_mapping(fname):\n                     idx = int(m.group(2))\n                     argname = parse_string(m.group(3))\n                     cmds.append((name, idx, argname))\n-    assert not in_rpcs\n+    assert not in_rpcs and cmds\n     return cmds\n \n def main():"
      }
    ]
  },
  {
    "sha": "e12522dfdaaba989c839b429cf3b3b34fd93d171",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTI1MjJkZmRhYWJhOTg5YzgzOWI0MjljZjNiM2IzNGZkOTNkMTcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T12:35:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T12:35:43Z"
      },
      "message": "Merge #11406: Add state message print to AcceptBlock failure message.\n\n6643b80 Add state message print to AcceptBlock failure message. (Matt Corallo)\n\nPull request description:\n\n  This should make it easier to debug issues where the CheckBlock at\n  the top of ProcessNewBlock fails (which does not print, in contrast\n  to AcceptBlock, which always prints).\n\n  This was motivated by #11371 which appears to be exactly such a case, and is not debuggable from the information provided. Not sure how much this would have helped in that case, but it is kinda weird that we can reject a block without ever printing why.\n\nTree-SHA512: 7a1c2c76080b810212da885c38e091609e409c62918cc326bb36a1096e09b2ae7e26fd4bdaefd79863d2894e2823e463005700a524940f177a59ef09f589b2f1",
      "tree": {
        "sha": "45249e97b37ad46065d57a588dadf0579915f832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45249e97b37ad46065d57a588dadf0579915f832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e12522dfdaaba989c839b429cf3b3b34fd93d171",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1NWfAAoJEB5K7WKYbNJdrQsIAJAO6b6YaFHG6cFhvD0yV8u/\naiP9JYi5k2VPX3h+5pcF8gqvNGYKxkKzly3MQ+j1oAwo2SNYm6806ruvXeAI5gbD\n3Ey8eOI2e9M+RWdRKQpAzUQjsHc5RUuQMsYVZSx3GOfxOVxvVQUYmFNOASzQUf4r\nPxpOa6YqznpCZ+2aMGg3wIsnWNXCaKtlPBSkief+I2vstLYpCpzMlmTttf4tc8/2\nuLumguIgiEPrJEfPRX28c6CvrKhYpFwgxLL+kxo+EBEW4VbWC0l5HkhRhO8iFCi1\nz5yxEYgVvl5xgltHkUk87IljaTy0lshwmzi+Y9ABoiHITkWkwz1HvtOm4zjckHk=\n=7mef\n-----END PGP SIGNATURE-----",
        "payload": "tree 45249e97b37ad46065d57a588dadf0579915f832\nparent a4c833fec104457c9ed31885821c2e5bbc7c65c4\nparent 6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507120515 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507120543 +0200\n\nMerge #11406: Add state message print to AcceptBlock failure message.\n\n6643b80 Add state message print to AcceptBlock failure message. (Matt Corallo)\n\nPull request description:\n\n  This should make it easier to debug issues where the CheckBlock at\n  the top of ProcessNewBlock fails (which does not print, in contrast\n  to AcceptBlock, which always prints).\n\n  This was motivated by #11371 which appears to be exactly such a case, and is not debuggable from the information provided. Not sure how much this would have helped in that case, but it is kinda weird that we can reject a block without ever printing why.\n\nTree-SHA512: 7a1c2c76080b810212da885c38e091609e409c62918cc326bb36a1096e09b2ae7e26fd4bdaefd79863d2894e2823e463005700a524940f177a59ef09f589b2f1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12522dfdaaba989c839b429cf3b3b34fd93d171",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e12522dfdaaba989c839b429cf3b3b34fd93d171",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12522dfdaaba989c839b429cf3b3b34fd93d171/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4c833fec104457c9ed31885821c2e5bbc7c65c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4c833fec104457c9ed31885821c2e5bbc7c65c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4c833fec104457c9ed31885821c2e5bbc7c65c4"
      },
      {
        "sha": "6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6643b80d1c0134bc8ef5edd65fbe09c8b63b01d3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dafb02ee018a7d4c363cee0b445ef344583f0015",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e12522dfdaaba989c839b429cf3b3b34fd93d171/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e12522dfdaaba989c839b429cf3b3b34fd93d171/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e12522dfdaaba989c839b429cf3b3b34fd93d171",
        "patch": "@@ -3192,7 +3192,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.GetDebugMessage());\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "a1f7f1870931fe978069482ec0f7dc7d59456966",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWY3ZjE4NzA5MzFmZTk3ODA2OTQ4MmVjMGY3ZGM3ZDU5NDU2OTY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T12:53:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T12:54:09Z"
      },
      "message": "Merge #10939: [init] Check non-emptiness of -blocknotify command prior to executing\n\ncffe85f Skip sys::system(...) call in case of empty command (practicalswift)\n6fb8f5f Check that -blocknotify command is non-empty before executing (practicalswift)\n\nPull request description:\n\n  Check that `-blocknotify` command is non-empty before executing.\n\n  To make the `BlockNotifyCallback(...)` (`-blocknotify`) behaviour consistent with that of:\n  * `AlertNotify(...)` (`-alertnotify`)\n  * `AddToWallet(...)` (`-walletnotify`)\n\nTree-SHA512: 18272166793a5a8b9cc2a727bfbcea53d38c329a55bc975c02db601329d608a61c20e026ce4b616193ecd3810dca4d3e2cb3bf773898a51872008a8dba96763e",
      "tree": {
        "sha": "ae2bededf8fdacfa73b1cd64d87fc30d54e6c022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae2bededf8fdacfa73b1cd64d87fc30d54e6c022"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1f7f1870931fe978069482ec0f7dc7d59456966",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1NnxAAoJEB5K7WKYbNJd0JoIANKgPRHKN//9j5DZogDAWKMz\nUFvqf7NsKp+QzpKjt1iPIqY88YgvZqooYdmG04uTduh+56yzub2/USeF0ttGO5yB\nWcWAIM7+mO6uXFTJtc2jwpoRIIqR3PbvAWYqWs8vc7OKaSijXVyj4Zmr0mrM1gMQ\n99PEhhiLfxILH3VcwhuRCEDXEH6JZ/fby7DQ7Cd7ZMmFz+VGK2dp54l381gZh83o\necPtxQfyQkRn0sGefZKTHLvtRimyLBWhcZgNd0CTVnu65YIOvsaKdYyVdz3PThRA\nLz11OkYYqLTxlrnLn8LB0qX8TN4rTVphBqWuxOckE4CusP9TGALrWVHIEeQS0k8=\n=gYlg\n-----END PGP SIGNATURE-----",
        "payload": "tree ae2bededf8fdacfa73b1cd64d87fc30d54e6c022\nparent e12522dfdaaba989c839b429cf3b3b34fd93d171\nparent cffe85f975413441b8fbc5bda82fd2c9d75476f5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507121606 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507121649 +0200\n\nMerge #10939: [init] Check non-emptiness of -blocknotify command prior to executing\n\ncffe85f Skip sys::system(...) call in case of empty command (practicalswift)\n6fb8f5f Check that -blocknotify command is non-empty before executing (practicalswift)\n\nPull request description:\n\n  Check that `-blocknotify` command is non-empty before executing.\n\n  To make the `BlockNotifyCallback(...)` (`-blocknotify`) behaviour consistent with that of:\n  * `AlertNotify(...)` (`-alertnotify`)\n  * `AddToWallet(...)` (`-walletnotify`)\n\nTree-SHA512: 18272166793a5a8b9cc2a727bfbcea53d38c329a55bc975c02db601329d608a61c20e026ce4b616193ecd3810dca4d3e2cb3bf773898a51872008a8dba96763e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f7f1870931fe978069482ec0f7dc7d59456966",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f7f1870931fe978069482ec0f7dc7d59456966",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f7f1870931fe978069482ec0f7dc7d59456966/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e12522dfdaaba989c839b429cf3b3b34fd93d171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12522dfdaaba989c839b429cf3b3b34fd93d171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e12522dfdaaba989c839b429cf3b3b34fd93d171"
      },
      {
        "sha": "cffe85f975413441b8fbc5bda82fd2c9d75476f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffe85f975413441b8fbc5bda82fd2c9d75476f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cffe85f975413441b8fbc5bda82fd2c9d75476f5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b46b53ac134bce592b699ae82bce86bcc1e98905",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f7f1870931fe978069482ec0f7dc7d59456966/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f7f1870931fe978069482ec0f7dc7d59456966/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a1f7f1870931fe978069482ec0f7dc7d59456966",
        "patch": "@@ -537,9 +537,10 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n         return;\n \n     std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n-\n-    boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    if (!strCmd.empty()) {\n+        boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    }\n }\n \n static bool fHaveGenesis = false;"
      },
      {
        "sha": "51ccc94787f9aebcd32301edb6113f6786520957",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f7f1870931fe978069482ec0f7dc7d59456966/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f7f1870931fe978069482ec0f7dc7d59456966/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a1f7f1870931fe978069482ec0f7dc7d59456966",
        "patch": "@@ -810,6 +810,7 @@ fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n \n void runCommand(const std::string& strCommand)\n {\n+    if (strCommand.empty()) return;\n     int nErr = ::system(strCommand.c_str());\n     if (nErr)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);"
      },
      {
        "sha": "925b474d73c6b76a0b66d110498b8f24a6f6f02b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f7f1870931fe978069482ec0f7dc7d59456966/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f7f1870931fe978069482ec0f7dc7d59456966/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a1f7f1870931fe978069482ec0f7dc7d59456966",
        "patch": "@@ -962,7 +962,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     // notify an external script when a wallet transaction comes in or is updated\n     std::string strCmd = gArgs.GetArg(\"-walletnotify\", \"\");\n \n-    if ( !strCmd.empty())\n+    if (!strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n         boost::thread t(runCommand, strCmd); // thread runs free"
      }
    ]
  },
  {
    "sha": "f35d03336994688c7419f9d3547336e356bd2818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzVkMDMzMzY5OTQ2ODhjNzQxOWY5ZDM1NDczMzZlMzU2YmQyODE4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-01T21:07:23Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-04T12:54:41Z"
      },
      "message": "build: Make \"make clean\" remove all files created when running \"make check\"\n\nMore specifically: remove also obj/build.h and bench/data/block413567.raw.h.\n\nBefore this patch:\n\n```\n$ diff -rq bitcoin-before-make/ bitcoin-after-make-and-make-clean/ | grep -E \"^Only in bitcoin-after-make-and-make-clean/\" | grep -v dirstamp\nOnly in bitcoin-after-make-and-make-clean/src/bench/data: block413567.raw.h\nOnly in bitcoin-after-make-and-make-clean/src/obj: build.h\n$\n```\n\nAfter this patch:\n\n```\n$ diff -rq bitcoin-before-make/ bitcoin-after-make-and-make-clean/ | grep -E \"^Only in bitcoin-after-make-and-make-clean/\" | grep -v dirstamp\n$\n```",
      "tree": {
        "sha": "68b28f79e6ad7c9013b72045ac41161d25f3f70c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68b28f79e6ad7c9013b72045ac41161d25f3f70c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f35d03336994688c7419f9d3547336e356bd2818",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35d03336994688c7419f9d3547336e356bd2818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f35d03336994688c7419f9d3547336e356bd2818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35d03336994688c7419f9d3547336e356bd2818/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc4ae03963014ab4b7957d62ba59dbd8f938c33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc4ae03963014ab4b7957d62ba59dbd8f938c33"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "90deff48b00ca3b568394456d8afe78360051a03",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35d03336994688c7419f9d3547336e356bd2818/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35d03336994688c7419f9d3547336e356bd2818/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f35d03336994688c7419f9d3547336e356bd2818",
        "patch": "@@ -476,8 +476,7 @@ CLEANFILES += univalue/*.gcda univalue/*.gcno\n CLEANFILES += wallet/*.gcda wallet/*.gcno\n CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno\n CLEANFILES += zmq/*.gcda zmq/*.gcno\n-\n-DISTCLEANFILES = obj/build.h\n+CLEANFILES += obj/build.h\n \n EXTRA_DIST = $(CTAES_DIST)\n "
      },
      {
        "sha": "8e2e587d3207c99d801da6acda66f3a17e52d703",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35d03336994688c7419f9d3547336e356bd2818/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35d03336994688c7419f9d3547336e356bd2818/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=f35d03336994688c7419f9d3547336e356bd2818",
        "patch": "@@ -6,11 +6,12 @@ bin_PROGRAMS += bench/bench_bitcoin\n BENCH_SRCDIR = bench\n BENCH_BINARY = bench/bench_bitcoin$(EXEEXT)\n \n-RAW_TEST_FILES = \\\n+RAW_BENCH_FILES = \\\n   bench/data/block413567.raw\n-GENERATED_TEST_FILES = $(RAW_TEST_FILES:.raw=.raw.h)\n+GENERATED_BENCH_FILES = $(RAW_BENCH_FILES:.raw=.raw.h)\n \n bench_bench_bitcoin_SOURCES = \\\n+  $(RAW_BENCH_FILES) \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n@@ -28,7 +29,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/perf.h \\\n   bench/prevector_destructor.cpp\n \n-nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n+nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -56,7 +57,7 @@ endif\n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n-CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_TEST_FILES)\n+CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)\n \n CLEANFILES += $(CLEAN_BITCOIN_BENCH)\n "
      }
    ]
  },
  {
    "sha": "7f11ef26085549664a911fe00807a199bbd1f041",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjExZWYyNjA4NTU0OTY2NGE5MTFmZTAwODA3YTE5OWJiZDFmMDQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T13:00:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T13:01:24Z"
      },
      "message": "Merge #9937: rpc: Prevent `dumpwallet` from overwriting files\n\n0cd9273 rpc: Prevent `dumpwallet` from overwriting files (Wladimir J. van der Laan)\n\nPull request description:\n\n  Prevent arbitrary files from being overwritten by `dumpwallet`. There have been reports that users have overwritten wallet files this way. It may also avoid other security issues.\n\n  Fixes #9934. Adds mention to release notes and adds a test.\n\nTree-SHA512: 268c98636d40924d793b55a685a0b419bafd834ad369edaec08227ebe26ed4470ddea73008d1c4beb10ea445db1b0bb8e3546ba8fc2d1a411ebd4a0de8ce9120",
      "tree": {
        "sha": "5daa935eac148294295c23507e703b67818a8f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5daa935eac148294295c23507e703b67818a8f11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f11ef26085549664a911fe00807a199bbd1f041",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1NukAAoJEB5K7WKYbNJd6IEH/jRcrzRPsk0nTqIY/7Ac//7m\nhn7DC4aRh+PfjJKPdrYmjBcGkbP2uXRQc8TuIGDgWaUdPZWXwn8iavvw4n1Kemhp\n9B6JwwOygmHHHjzT/XLjdMhCoWkpaa5xe7PeIZQyTBpvB5vSr0jYHhyeHIo9ddFs\n1jAtDNsmYmgY79DK2k3xrd4EXTlysgxb8NDGWaLx6dKCC04ZTVpJcF5kvWOUz0vG\n1qFd+MgiZgJ+O8e1d5BCB89nog0Nsmv4mp9tvjUF0vhNyW3rnTZ1bdc023wLJn44\n5dxZ/lzvP6tnh4S/llqbAKVXKnMGYWndLfUudZBlxIMhQSuApmG5VwQI9v6ioqM=\n=xoRN\n-----END PGP SIGNATURE-----",
        "payload": "tree 5daa935eac148294295c23507e703b67818a8f11\nparent a1f7f1870931fe978069482ec0f7dc7d59456966\nparent 0cd9273fd959c6742574259d026039f7da0309a2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507122059 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507122084 +0200\n\nMerge #9937: rpc: Prevent `dumpwallet` from overwriting files\n\n0cd9273 rpc: Prevent `dumpwallet` from overwriting files (Wladimir J. van der Laan)\n\nPull request description:\n\n  Prevent arbitrary files from being overwritten by `dumpwallet`. There have been reports that users have overwritten wallet files this way. It may also avoid other security issues.\n\n  Fixes #9934. Adds mention to release notes and adds a test.\n\nTree-SHA512: 268c98636d40924d793b55a685a0b419bafd834ad369edaec08227ebe26ed4470ddea73008d1c4beb10ea445db1b0bb8e3546ba8fc2d1a411ebd4a0de8ce9120\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f11ef26085549664a911fe00807a199bbd1f041",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f11ef26085549664a911fe00807a199bbd1f041",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f11ef26085549664a911fe00807a199bbd1f041/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1f7f1870931fe978069482ec0f7dc7d59456966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f7f1870931fe978069482ec0f7dc7d59456966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f7f1870931fe978069482ec0f7dc7d59456966"
      },
      {
        "sha": "0cd9273fd959c6742574259d026039f7da0309a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd9273fd959c6742574259d026039f7da0309a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cd9273fd959c6742574259d026039f7da0309a2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4ecca7897cb7db793ee082b3d732e85ec9040649",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f11ef26085549664a911fe00807a199bbd1f041/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f11ef26085549664a911fe00807a199bbd1f041/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7f11ef26085549664a911fe00807a199bbd1f041",
        "patch": "@@ -83,6 +83,9 @@ Low-level RPC changes\n   * `getwalletinfo`\n   * `getmininginfo`\n \n+- `dumpwallet` no longer allows overwriting files. This is a security measure\n+  as well as prevents dangerous user mistakes.\n+\n Credits\n =======\n "
      },
      {
        "sha": "1123fd6dbb18084e11b490738fa1829076566257",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f11ef26085549664a911fe00807a199bbd1f041/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f11ef26085549664a911fe00807a199bbd1f041/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7f11ef26085549664a911fe00807a199bbd1f041",
        "patch": "@@ -600,7 +600,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n+            \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n             \"\\nResult:\\n\"\n@@ -616,9 +616,19 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    std::ofstream file;\n     boost::filesystem::path filepath = request.params[0].get_str();\n     filepath = boost::filesystem::absolute(filepath);\n+\n+    /* Prevent arbitrary files from being overwritten. There have been reports\n+     * that users have overwritten wallet files this way:\n+     * https://github.com/bitcoin/bitcoin/issues/9934\n+     * It may also avoid other security issues.\n+     */\n+    if (boost::filesystem::exists(filepath)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+    }\n+\n+    std::ofstream file;\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");"
      },
      {
        "sha": "12db95e5d999e3c14bc8a1ca4bd735fc0bbbd949",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f11ef26085549664a911fe00807a199bbd1f041/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f11ef26085549664a911fe00807a199bbd1f041/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=7f11ef26085549664a911fe00807a199bbd1f041",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -105,5 +105,8 @@ def run_test (self):\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n \n+        # Overwriting should fail\n+        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "74123eabdd917f84852eaafbfaed240f4daa8643",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDEyM2VhYmRkOTE3Zjg0ODUyZWFhZmJmYWVkMjQwZjRkYWE4NjQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T13:02:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T13:02:41Z"
      },
      "message": "Merge #11440: Fix validationinterface build on super old boost/clang\n\n96c2ce9 Fix validationinterface build on super old boost/clang (Matt Corallo)\n\nPull request description:\n\n  This should fix all the non-dependancy issues for termux builds.\n  See Github issue #11388.\n\nTree-SHA512: ff0918fa76a6d4639a6c5b5e045ef053ce1d93eb0b1fe94c5fdfcc4d5e54e1118eeb09676ffd8f6d1acd630a63656944c6274ee3dbd7c09b7129c30647dbf4f9",
      "tree": {
        "sha": "0ce706e5ed31608c215ee2cae7435454877e391a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ce706e5ed31608c215ee2cae7435454877e391a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74123eabdd917f84852eaafbfaed240f4daa8643",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1NvxAAoJEB5K7WKYbNJdjdcH/17ry+iKN221EewX32NeWufv\nNel3aSn6as4EV0KwXD52TDr9ASC/WvkQkfz4hSn4ZDJK1gClgXROv4rEicgvPWd+\nSNK8CZuYVL5LqFXUssOIc1d2QooFYPL9FcZZMuxTbKiWvh37NDTZWEmlznnFo7Ck\n5nIylhTNSWfsLZcfycb5oC8qGLOdJzFujNVfb5ukskteSw5CjyCmG1TLNw96NPrP\n2gCUDZ4t1WBk13HuWNttIRnWcwlPt+ZzZiH9QaFJ9WbECpPww6vg9pTgvMBO0CV7\nH/T36uviUITQ5KIVvQh1BiwShD4C4xSW/8EhLZ1n5uK8jssDRkAZPfpDD8ytUQY=\n=V0eB\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ce706e5ed31608c215ee2cae7435454877e391a\nparent 7f11ef26085549664a911fe00807a199bbd1f041\nparent 96c2ce9d343147608c197bc2333138b82141340f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507122151 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507122161 +0200\n\nMerge #11440: Fix validationinterface build on super old boost/clang\n\n96c2ce9 Fix validationinterface build on super old boost/clang (Matt Corallo)\n\nPull request description:\n\n  This should fix all the non-dependancy issues for termux builds.\n  See Github issue #11388.\n\nTree-SHA512: ff0918fa76a6d4639a6c5b5e045ef053ce1d93eb0b1fe94c5fdfcc4d5e54e1118eeb09676ffd8f6d1acd630a63656944c6274ee3dbd7c09b7129c30647dbf4f9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74123eabdd917f84852eaafbfaed240f4daa8643",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74123eabdd917f84852eaafbfaed240f4daa8643",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74123eabdd917f84852eaafbfaed240f4daa8643/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f11ef26085549664a911fe00807a199bbd1f041",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f11ef26085549664a911fe00807a199bbd1f041",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f11ef26085549664a911fe00807a199bbd1f041"
      },
      {
        "sha": "96c2ce9d343147608c197bc2333138b82141340f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c2ce9d343147608c197bc2333138b82141340f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96c2ce9d343147608c197bc2333138b82141340f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "281bc04b0af2580bd50fdc268f89809761d7597b",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74123eabdd917f84852eaafbfaed240f4daa8643/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74123eabdd917f84852eaafbfaed240f4daa8643/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=74123eabdd917f84852eaafbfaed240f4daa8643",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+\n #include \"init.h\"\n+#include \"primitives/block.h\"\n #include \"scheduler.h\"\n #include \"sync.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "167cef8082e25e3ebbcd602814f3012772d49d16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjdjZWY4MDgyZTI1ZTNlYmJjZDYwMjgxNGYzMDEyNzcyZDQ5ZDE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T13:07:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-04T13:35:41Z"
      },
      "message": "Merge #11435: build: Make \"make clean\" remove all files created when running \"make check\"\n\nf35d033 build: Make \"make clean\" remove all files created when running \"make check\" (practicalswift)\n\nPull request description:\n\n  Make `make clean` remove all files created when running `make check`. More specifically: remove also `obj/build.h` and `bench/data/block413567.raw.h` as part of `make clean`.\n\n  Before this patch:\n\n  ```bash\n  $ git clone https://github.com/bitcoin/bitcoin.git\n  $ cd bitcoin/\n  $ ./autogen.sh\n  $ ./configure\n  $ cp -r ../bitcoin ../bitcoin-before-make\n  $ make check\n  $ make clean\n  $ cp -r ../bitcoin ../bitcoin-after-make-and-make-clean\n  $ cd ..\n  $ diff -rq bitcoin-before-make/ bitcoin-after-make-and-make-clean/ | grep -E \"^Only in bitcoin-after-make-and-make-clean/\" | grep -v dirstamp\n  Only in bitcoin-after-make-and-make-clean/src/bench/data: block413567.raw.h\n  Only in bitcoin-after-make-and-make-clean/src/obj: build.h\n  $\n  ```\n\n  After this patch:\n\n  ```bash\n  $ git clone https://github.com/bitcoin/bitcoin.git\n  $ cd bitcoin/\n  $ ./autogen.sh\n  $ ./configure\n  $ cp -r ../bitcoin ../bitcoin-before-make\n  $ make check\n  $ make clean\n  $ cp -r ../bitcoin ../bitcoin-after-make-and-make-clean\n  $ cd ..\n  $ diff -rq bitcoin-before-make/ bitcoin-after-make-and-make-clean/ | grep -E \"^Only in bitcoin-after-make-and-make-clean/\" | grep -v dirstamp\n  $\n  ```\n\nTree-SHA512: 953e8423485ffd415f0ade6abe0b4c407454f67c332140ef019d89db425bb4a831327b3f634b8d69b17325dcfc6e3ac72dc2ba1ce5462158eecc3c05645e93ba",
      "tree": {
        "sha": "ba02ba2641471de99bf5e79fc27766ad525494f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba02ba2641471de99bf5e79fc27766ad525494f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/167cef8082e25e3ebbcd602814f3012772d49d16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1OOtAAoJEB5K7WKYbNJdwsYIAIZwx0PDlAPk3AhhONcL+0An\n83GP0TfFedChPk2q/SAwV2hR4VGi1+9e+yOMORsmbMa+DirLwJxsQHusmxSUfjiw\n6oxtKg+G+/nJpKDyvzS9T+KjBwIHrWpzdsxOggWPe47ar35d3WoMdY+4835J84kI\nw+3KoRho2RQa0hOVFSLwU7FQ01VdfIFHZLWEvQak32Je8iQCkje/k0HlSo94i0xs\nsb8Y2WjkFWQ+KffgnGmb4OZZmuKvdIoy/QHgvL1U0nu/ZUh1hWsYQq4mANlM//9Y\ng1F7PfZRTdD570zyn3jEAouimwYfGbvyuE8f5fg4vLRT5pQwJhEYqyr2qW9gBsE=\n=HVon\n-----END PGP SIGNATURE-----",
        "payload": "tree ba02ba2641471de99bf5e79fc27766ad525494f2\nparent 74123eabdd917f84852eaafbfaed240f4daa8643\nparent f35d03336994688c7419f9d3547336e356bd2818\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507122458 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507124141 +0200\n\nMerge #11435: build: Make \"make clean\" remove all files created when running \"make check\"\n\nf35d033 build: Make \"make clean\" remove all files created when running \"make check\" (practicalswift)\n\nPull request description:\n\n  Make `make clean` remove all files created when running `make check`. More specifically: remove also `obj/build.h` and `bench/data/block413567.raw.h` as part of `make clean`.\n\n  Before this patch:\n\n  ```bash\n  $ git clone https://github.com/bitcoin/bitcoin.git\n  $ cd bitcoin/\n  $ ./autogen.sh\n  $ ./configure\n  $ cp -r ../bitcoin ../bitcoin-before-make\n  $ make check\n  $ make clean\n  $ cp -r ../bitcoin ../bitcoin-after-make-and-make-clean\n  $ cd ..\n  $ diff -rq bitcoin-before-make/ bitcoin-after-make-and-make-clean/ | grep -E \"^Only in bitcoin-after-make-and-make-clean/\" | grep -v dirstamp\n  Only in bitcoin-after-make-and-make-clean/src/bench/data: block413567.raw.h\n  Only in bitcoin-after-make-and-make-clean/src/obj: build.h\n  $\n  ```\n\n  After this patch:\n\n  ```bash\n  $ git clone https://github.com/bitcoin/bitcoin.git\n  $ cd bitcoin/\n  $ ./autogen.sh\n  $ ./configure\n  $ cp -r ../bitcoin ../bitcoin-before-make\n  $ make check\n  $ make clean\n  $ cp -r ../bitcoin ../bitcoin-after-make-and-make-clean\n  $ cd ..\n  $ diff -rq bitcoin-before-make/ bitcoin-after-make-and-make-clean/ | grep -E \"^Only in bitcoin-after-make-and-make-clean/\" | grep -v dirstamp\n  $\n  ```\n\nTree-SHA512: 953e8423485ffd415f0ade6abe0b4c407454f67c332140ef019d89db425bb4a831327b3f634b8d69b17325dcfc6e3ac72dc2ba1ce5462158eecc3c05645e93ba\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/167cef8082e25e3ebbcd602814f3012772d49d16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/167cef8082e25e3ebbcd602814f3012772d49d16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/167cef8082e25e3ebbcd602814f3012772d49d16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74123eabdd917f84852eaafbfaed240f4daa8643",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74123eabdd917f84852eaafbfaed240f4daa8643",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74123eabdd917f84852eaafbfaed240f4daa8643"
      },
      {
        "sha": "f35d03336994688c7419f9d3547336e356bd2818",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35d03336994688c7419f9d3547336e356bd2818",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f35d03336994688c7419f9d3547336e356bd2818"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "90deff48b00ca3b568394456d8afe78360051a03",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/167cef8082e25e3ebbcd602814f3012772d49d16/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/167cef8082e25e3ebbcd602814f3012772d49d16/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=167cef8082e25e3ebbcd602814f3012772d49d16",
        "patch": "@@ -476,8 +476,7 @@ CLEANFILES += univalue/*.gcda univalue/*.gcno\n CLEANFILES += wallet/*.gcda wallet/*.gcno\n CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno\n CLEANFILES += zmq/*.gcda zmq/*.gcno\n-\n-DISTCLEANFILES = obj/build.h\n+CLEANFILES += obj/build.h\n \n EXTRA_DIST = $(CTAES_DIST)\n "
      },
      {
        "sha": "8e2e587d3207c99d801da6acda66f3a17e52d703",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/167cef8082e25e3ebbcd602814f3012772d49d16/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/167cef8082e25e3ebbcd602814f3012772d49d16/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=167cef8082e25e3ebbcd602814f3012772d49d16",
        "patch": "@@ -6,11 +6,12 @@ bin_PROGRAMS += bench/bench_bitcoin\n BENCH_SRCDIR = bench\n BENCH_BINARY = bench/bench_bitcoin$(EXEEXT)\n \n-RAW_TEST_FILES = \\\n+RAW_BENCH_FILES = \\\n   bench/data/block413567.raw\n-GENERATED_TEST_FILES = $(RAW_TEST_FILES:.raw=.raw.h)\n+GENERATED_BENCH_FILES = $(RAW_BENCH_FILES:.raw=.raw.h)\n \n bench_bench_bitcoin_SOURCES = \\\n+  $(RAW_BENCH_FILES) \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n@@ -28,7 +29,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/perf.h \\\n   bench/prevector_destructor.cpp\n \n-nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n+nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -56,7 +57,7 @@ endif\n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n-CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_TEST_FILES)\n+CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)\n \n CLEANFILES += $(CLEAN_BITCOIN_BENCH)\n "
      }
    ]
  },
  {
    "sha": "e93fff1463ae906fc986bf98c3b118c82f171546",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTNmZmYxNDYzYWU5MDZmYzk4NmJmOThjM2IxMThjODJmMTcxNTQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-05T13:03:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-05T13:03:36Z"
      },
      "message": "Merge #11107: Fix races in AppInitMain and others with lock and atomic bools\n\nc626dcb50 Make fUseCrypto atomic (MeshCollider)\n731065b11 Consistent parameter names in txdb.h (MeshCollider)\n35aeabec6 Make fReindex atomic to avoid race (MeshCollider)\n58d91af59 Fix race for mapBlockIndex in AppInitMain (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11106\n\n  Also makes fReindex atomic as suggested in @TheBlueMatt comment below, and makes fUseCrypto atomic as suggested in 10916\n\n  https://github.com/bitcoin/bitcoin/pull/11107/commits/d291e7635b0ef4156c2805c6c4ee1adad91f0307 just renames the parameters in the txdb header file to make them consistent with those used in the cpp file, noticed it when looking for uses of fReindex\n\nTree-SHA512: b378aa7289fd505b76565cd4d48dcdc04ac5540283ea1c80442170b0f13cb6df771b1a94dd54b7fec3478a7b4668c224ec9d795f16937782724c5d020edd3a42",
      "tree": {
        "sha": "fba3664124d66293914cb45ff680cbc72c33b327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba3664124d66293914cb45ff680cbc72c33b327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93fff1463ae906fc986bf98c3b118c82f171546",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ1i2oAAoJENLqSFDnUoslGn4QAIy/D2Vh3YGbN4AeW7IFgtIp\nGkab5KH2HMUacU7QbbKgRc58s/eyWkNiGJzHotF5OyaSO3ucm4qk8C5/T2pJqOSp\np+rViKn0hQP4qGJX64fEeShW+JcTBZZfyd4gAp1J/80Fcma5h1YKEwOl44iyalmq\nBlFJxcj8VXXCbxWYAp+VYgMv1GZJ0zOdVKj65Y0e40AOZFrso8sPiSDpKU3ipGdZ\nb4DmK3Ov4mBtPqIcFsHSXKF2YPMoysF4ibHMcNHVhMvFNHkH0TPnz5W9QAbcT3tM\nglxMIVvXQ77A3lNKGU2YaxcjxYpsNXK1VW/hnJx5DD0ZKl9U9/gop8Ppn3zPbM6p\nkHSQedsWP5xldI8nvD/lOOVuwlP9YLco9U+brCWJ1mkJez9t8dka5XTrCtfBF8tC\nB4gaCAmUU467u4lOYRQtgGTZw1n6zSBxPJrvz7DWnAKynlgtEH4XTx7Q6AeqQZQ9\nGRDvnbVsrvowcn78aBZYiCxGFBMMRKofauFc/HCRPEHJxrdaXlP/bOWZ9Pw3Uhr2\nNpHRB06rAIUaJEKHr5WLHKlqdfKebkDxtPVKhNQMFB2Ngtp+V8nyuGlbf+ZVMunw\nJXoP+5x6M2CQ/LwEI9jUVD4WSABToYkdDvdmjT+uHYoOd4THw/RMMoDSvTzaTNGy\nxmMy34szY4cMTPm0BRTZ\n=UX8r\n-----END PGP SIGNATURE-----",
        "payload": "tree fba3664124d66293914cb45ff680cbc72c33b327\nparent 167cef8082e25e3ebbcd602814f3012772d49d16\nparent c626dcb50eed496462fd4ac3e05bf79164749ebe\nauthor MarcoFalke <falke.marco@gmail.com> 1507208589 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1507208616 +0200\n\nMerge #11107: Fix races in AppInitMain and others with lock and atomic bools\n\nc626dcb50 Make fUseCrypto atomic (MeshCollider)\n731065b11 Consistent parameter names in txdb.h (MeshCollider)\n35aeabec6 Make fReindex atomic to avoid race (MeshCollider)\n58d91af59 Fix race for mapBlockIndex in AppInitMain (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11106\n\n  Also makes fReindex atomic as suggested in @TheBlueMatt comment below, and makes fUseCrypto atomic as suggested in 10916\n\n  https://github.com/bitcoin/bitcoin/pull/11107/commits/d291e7635b0ef4156c2805c6c4ee1adad91f0307 just renames the parameters in the txdb header file to make them consistent with those used in the cpp file, noticed it when looking for uses of fReindex\n\nTree-SHA512: b378aa7289fd505b76565cd4d48dcdc04ac5540283ea1c80442170b0f13cb6df771b1a94dd54b7fec3478a7b4668c224ec9d795f16937782724c5d020edd3a42\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93fff1463ae906fc986bf98c3b118c82f171546",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e93fff1463ae906fc986bf98c3b118c82f171546",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93fff1463ae906fc986bf98c3b118c82f171546/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "167cef8082e25e3ebbcd602814f3012772d49d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/167cef8082e25e3ebbcd602814f3012772d49d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/167cef8082e25e3ebbcd602814f3012772d49d16"
      },
      {
        "sha": "c626dcb50eed496462fd4ac3e05bf79164749ebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c626dcb50eed496462fd4ac3e05bf79164749ebe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c626dcb50eed496462fd4ac3e05bf79164749ebe"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 20,
      "deletions": 11
    },
    "files": [
      {
        "sha": "539adc23d5a88a0f165fb83db3595aa71d898b21",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93fff1463ae906fc986bf98c3b118c82f171546/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93fff1463ae906fc986bf98c3b118c82f171546/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e93fff1463ae906fc986bf98c3b118c82f171546",
        "patch": "@@ -1643,9 +1643,16 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 11: start node\n \n+    int chain_active_height;\n+\n     //// debug print\n-    LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n-    LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n+    {\n+        LOCK(cs_main);\n+        LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n+        chain_active_height = chainActive.Height();\n+    }\n+    LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n+\n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n@@ -1661,7 +1668,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;\n     connOptions.nMaxFeeler = 1;\n-    connOptions.nBestHeight = chainActive.Height();\n+    connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_msgproc = peerLogic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);"
      },
      {
        "sha": "ec9f571b1355a058fa29480d33a7140b25e361c2",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93fff1463ae906fc986bf98c3b118c82f171546/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93fff1463ae906fc986bf98c3b118c82f171546/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=e93fff1463ae906fc986bf98c3b118c82f171546",
        "patch": "@@ -115,12 +115,12 @@ class CBlockTreeDB : public CDBWrapper\n     CBlockTreeDB& operator=(const CBlockTreeDB&) = delete;\n \n     bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n-    bool ReadBlockFileInfo(int nFile, CBlockFileInfo &fileinfo);\n+    bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n     bool ReadLastBlockFile(int &nFile);\n-    bool WriteReindexing(bool fReindex);\n-    bool ReadReindexing(bool &fReindex);\n+    bool WriteReindexing(bool fReindexing);\n+    bool ReadReindexing(bool &fReindexing);\n     bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n-    bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &vect);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);"
      },
      {
        "sha": "7f27d8c0bfac0bb42ddbc28a20af2df06c7f2231",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93fff1463ae906fc986bf98c3b118c82f171546/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93fff1463ae906fc986bf98c3b118c82f171546/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e93fff1463ae906fc986bf98c3b118c82f171546",
        "patch": "@@ -69,7 +69,7 @@ CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);\n-bool fReindex = false;\n+std::atomic_bool fReindex(false);\n bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n@@ -3533,7 +3533,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check whether we need to continue reindexing\n     bool fReindexing = false;\n     pblocktree->ReadReindexing(fReindexing);\n-    fReindex |= fReindexing;\n+    if(fReindexing) fReindex = true;\n \n     // Check whether we have a transaction index\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);"
      },
      {
        "sha": "50974ac9892da2816c53370249f7105c69f45aa0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93fff1463ae906fc986bf98c3b118c82f171546/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93fff1463ae906fc986bf98c3b118c82f171546/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e93fff1463ae906fc986bf98c3b118c82f171546",
        "patch": "@@ -166,7 +166,7 @@ extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;\n extern std::atomic_bool fImporting;\n-extern bool fReindex;\n+extern std::atomic_bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;"
      },
      {
        "sha": "1416ae7d02aab0c335abb8bd9185ea0a852bed35",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93fff1463ae906fc986bf98c3b118c82f171546/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93fff1463ae906fc986bf98c3b118c82f171546/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=e93fff1463ae906fc986bf98c3b118c82f171546",
        "patch": "@@ -9,6 +9,8 @@\n #include \"serialize.h\"\n #include \"support/allocators/secure.h\"\n \n+#include <atomic>\n+\n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n const unsigned int WALLET_CRYPTO_IV_SIZE = 16;\n@@ -118,7 +120,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n \n     //! if fUseCrypto is true, mapKeys must be empty\n     //! if fUseCrypto is false, vMasterKey must be empty\n-    bool fUseCrypto;\n+    std::atomic<bool> fUseCrypto;\n \n     //! keeps track of whether Unlock has run a thorough check before\n     bool fDecryptionThoroughlyChecked;"
      }
    ]
  },
  {
    "sha": "5864e9c1611e6034a8d49b78231abe6bfade686d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODY0ZTljMTYxMWU2MDM0YThkNDliNzgyMzFhYmU2YmZhZGU2ODZk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:29:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-05T13:48:46Z"
      },
      "message": "[tests] remove direct testing on JSONRPCException from individual test cases",
      "tree": {
        "sha": "e8cec4a64d53873002d7ab327e2cd026802bc49e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8cec4a64d53873002d7ab327e2cd026802bc49e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5864e9c1611e6034a8d49b78231abe6bfade686d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5864e9c1611e6034a8d49b78231abe6bfade686d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5864e9c1611e6034a8d49b78231abe6bfade686d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5864e9c1611e6034a8d49b78231abe6bfade686d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93fff1463ae906fc986bf98c3b118c82f171546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93fff1463ae906fc986bf98c3b118c82f171546",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93fff1463ae906fc986bf98c3b118c82f171546"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "aece60bc3dbaeefc8e7810ca6e76a7bce55f4290",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -19,9 +19,8 @@\n happened previously.\n \"\"\"\n \n-from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_jsonrpc, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -35,21 +34,26 @@\n class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n+    def try_rpc(self, func, *args, **kwargs):\n+        if self.expect_disabled:\n+            assert_raises_jsonrpc(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+        else:\n+            return func(*args, **kwargs)\n+\n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n-            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n-                                 'code': -4} if self.expect_disabled else None)\n+\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -179,13 +183,5 @@ def run_test(self):\n             else:\n                 variant.check()\n \n-\n-def try_rpc(func, *args, **kwargs):\n-    try:\n-        return func(*args, **kwargs), None\n-    except JSONRPCException as e:\n-        return None, e.error\n-\n-\n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      },
      {
        "sha": "fcc38123a965e6660cebc79ac189e58930b7d74f",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -423,11 +423,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+        assert_raises_jsonrpc(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_jsonrpc(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "3fcbaa4fa6b87279765f6437cceebf373860e8b8",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -452,11 +452,7 @@ def run_test(self):\n         for i in importlist:\n             # import all generated addresses. The wallet already has the private keys for some of these, so catch JSON RPC\n             # exceptions and continue.\n-            try:\n-                self.nodes[0].importaddress(i,\"\",False,True)\n-            except JSONRPCException as exp:\n-                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n-                assert_equal(exp.error[\"code\"], -4)\n+            try_rpc(-4, \"The wallet already contains the private key for this address or script\", self.nodes[0].importaddress, i, \"\", False, True)\n \n         self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n         self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey"
      },
      {
        "sha": "00a58e108e76c1d67aa104c80fe0b866e894b4e4",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_jsonrpc(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "44d7e04a898096b9b1dff961f89e6cab85cce665",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -99,6 +99,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function.\n     \"\"\"\n+    assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\n+\n+def try_rpc(code, message, fun, *args, **kwds):\n+    \"\"\"Tries to run an rpc command.\n+\n+    Test against error code and message if the rpc fails.\n+    Returns whether a JSONRPCException was raised.\"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n@@ -107,10 +114,11 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+        return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n-        raise AssertionError(\"No exception raised\")\n+        return False\n \n def assert_is_hex_string(string):\n     try:"
      }
    ]
  },
  {
    "sha": "677d893ff758b61f66203730da224bd7ef8f0b43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzdkODkzZmY3NThiNjFmNjYyMDM3MzBkYTIyNGJkN2VmOGYwYjQz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:29:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-05T13:48:46Z"
      },
      "message": "[tests] do not allow assert_raises_message to be called with JSONRPCException",
      "tree": {
        "sha": "aacb8e0e82eed17e61860ba7a62dd3a36fdf83af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aacb8e0e82eed17e61860ba7a62dd3a36fdf83af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/677d893ff758b61f66203730da224bd7ef8f0b43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677d893ff758b61f66203730da224bd7ef8f0b43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/677d893ff758b61f66203730da224bd7ef8f0b43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677d893ff758b61f66203730da224bd7ef8f0b43/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5864e9c1611e6034a8d49b78231abe6bfade686d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5864e9c1611e6034a8d49b78231abe6bfade686d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5864e9c1611e6034a8d49b78231abe6bfade686d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed35bf576eb83b9a3c6587594beca73a1b00bfb5",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/677d893ff758b61f66203730da224bd7ef8f0b43/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/677d893ff758b61f66203730da224bd7ef8f0b43/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=677d893ff758b61f66203730da224bd7ef8f0b43",
        "patch": "@@ -51,6 +51,8 @@ def assert_raises(exc, fun, *args, **kwds):\n def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n+    except JSONRPCException:\n+        raise AssertionError(\"Use assert_raises_jsonrpc() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])"
      }
    ]
  },
  {
    "sha": "47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2JhOGNmNzFlOWEzYTZmNzQ1MjQ4OGZjOWFiM2IzNTBmMGZhZTM2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:33:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-05T13:57:19Z"
      },
      "message": "scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/assert_raises_jsonrpc/assert_raises_rpc_error/g' test/functional/*py test/functional/test_framework/*py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b21f00f81ce5e933436f9418ae73f8e37f81fcd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21f00f81ce5e933436f9418ae73f8e37f81fcd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "677d893ff758b61f66203730da224bd7ef8f0b43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677d893ff758b61f66203730da224bd7ef8f0b43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/677d893ff758b61f66203730da224bd7ef8f0b43"
      }
    ],
    "stats": {
      "total": 234,
      "additions": 117,
      "deletions": 117
    },
    "files": [
      {
        "sha": "5f8f21701f934fa558810b6a399ef8e022b92bde",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -83,7 +83,7 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n         tx2.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n@@ -180,7 +180,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n             else:\n                 # This raw transaction should be accepted\n                 self.nodes[0].sendrawtransaction(rawtx)\n@@ -227,7 +227,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n                 node.sendrawtransaction(ToHex(tx))\n@@ -280,7 +280,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n         raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n         # Test mempool-BIP68 consistency after reorg\n         #\n@@ -353,7 +353,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n         tx3.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n \n         # make a block that violates bip68; ensure that the tip updates\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      },
      {
        "sha": "d4851eea4940b365dbd45f401b39ace9ecfb8125",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -25,7 +25,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n )\n@@ -101,7 +101,7 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_jsonrpc(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n@@ -147,7 +147,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_jsonrpc(-5, \"Block not found\",\n+        assert_raises_rpc_error(-5, \"Block not found\",\n                               node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()"
      },
      {
        "sha": "008e83d5b2a7eda9f52f22d24f5a20db5723ac6a",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -133,7 +133,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n-    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -153,7 +153,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -164,7 +164,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -173,7 +173,7 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -205,15 +205,15 @@ def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -264,7 +264,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.walletlock()\n-    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n "
      },
      {
        "sha": "19fd24edb925d313bd3213dbd8ba4c3ca5aceb5a",
        "filename": "test/functional/deprecated_rpc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/deprecated_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/deprecated_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/deprecated_rpc.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_jsonrpc\n+from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n \n         self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n         self.nodes[1].estimatefee(1)"
      },
      {
        "sha": "c75ef9b9f12d562a3667ec246e601045ce9bba97",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n \n     def run_test (self):\n         # Make sure wallet is really disabled\n-        assert_raises_jsonrpc(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n@@ -28,7 +28,7 @@ def run_test (self):\n         # Checking mining to an address without a wallet. Generating to a valid address should succeed\n         # but generating to an invalid address will fail.\n         self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        assert_raises_jsonrpc(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n \n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "59655d37fbe21878e13b76f5952c533a1512197a",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     wait_until,\n )\n@@ -34,14 +34,14 @@ def run_test(self):\n \n         self.log.info(\"setban: fail to ban an already banned subnet\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_rpc_error(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n \n         self.log.info(\"setban: fail to ban an invalid subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_raises_rpc_error(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n \n         self.log.info(\"setban remove: fail to unban a non-banned subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_raises_rpc_error(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n         self.log.info(\"setban remove: successfully unban subnet\")\n@@ -81,10 +81,10 @@ def run_test(self):\n         self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         node1 = self.nodes[0].getpeerinfo()[0]['addr']\n-        assert_raises_jsonrpc(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n+        assert_raises_rpc_error(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n \n         self.log.info(\"disconnectnode: fail to disconnect when calling with junk address\")\n-        assert_raises_jsonrpc(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n+        assert_raises_rpc_error(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n \n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']"
      },
      {
        "sha": "d446f56d0e4b347d2d4aeeb98443c1a2752b9636",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -179,7 +179,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n+        assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -192,7 +192,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n+        assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -206,7 +206,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n+        assert_raises_rpc_error(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -314,7 +314,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -469,14 +469,14 @@ def run_test(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].keypoolrefill(8) #need to refill the keypool to get an internal change address\n         self.nodes[1].walletlock()\n \n-        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n+        assert_raises_rpc_error(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "6807fa66964dbfac610f74e683be4ef9b994c830",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -20,7 +20,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_raises_jsonrpc, connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_rpc_error, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -36,7 +36,7 @@ class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n \n     def try_rpc(self, func, *args, **kwargs):\n         if self.expect_disabled:\n-            assert_raises_jsonrpc(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+            assert_raises_rpc_error(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n         else:\n             return func(*args, **kwargs)\n "
      },
      {
        "sha": "c1a42870ece8434fab5e3ed5d1beef836b87daae",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -423,11 +423,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_jsonrpc(-3, 'Missing required timestamp field for key',\n+        assert_raises_rpc_error(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_jsonrpc(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_rpc_error(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "3236b35739f27d69e6df369dbdbb03b1cf6ebff6",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n+        assert_raises_rpc_error(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -97,7 +97,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n+        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "f2701c36bdcacbfd45ff30d27fd839131b1e228d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n@@ -47,7 +47,7 @@ def run_test(self):\n         nodes[0].getrawchangeaddress()\n         addr = set()\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n         addr.add(nodes[0].getnewaddress())\n@@ -58,7 +58,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         assert(len(addr) == 6)\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n         nodes[0].walletpassphrase('test', 1)\n@@ -72,7 +72,7 @@ def run_test(self):\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].generate, 1)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].generate, 1)\n \n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)"
      },
      {
        "sha": "b845c756818e4216b22f30bd4c378a29ca528169",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -167,7 +167,7 @@ def run_test(self):\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "92f66be2ff896fdf15abca822e166c3dd695feb1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         mempooldotnew1 = mempooldat1 + '.new'\n         with os.fdopen(os.open(mempooldotnew1, os.O_CREAT, 0o000), 'w'):\n             pass\n-        assert_raises_jsonrpc(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n+        assert_raises_rpc_error(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n         os.remove(mempooldotnew1)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "2803371f5b603892fc549e15284f01b98ec73883",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -50,14 +50,14 @@ def run_test(self):\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n         timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n-        assert_raises_jsonrpc(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n         # Time-locked transaction is still too immature to spend\n-        assert_raises_jsonrpc(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 49.98)"
      },
      {
        "sha": "6e8a635a765413fd3ab3ba0e38e739a6836039c9",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n \n         # coinbase at height 102 should be too immature to spend\n-        assert_raises_jsonrpc(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n+        assert_raises_rpc_error(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n \n         # mempool should have just spend_101:\n         assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])"
      },
      {
        "sha": "b3989a4c54885ab9d9763cded9c263ef4dd06f75",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -38,7 +38,7 @@ def run_test(self):\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n@@ -63,11 +63,11 @@ def run_test(self):\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n         # We can't find the block from a fully-spent tx\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_jsonrpc(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n@@ -76,7 +76,7 @@ def run_test(self):\n         # We can always get a proof if we have a -txindex\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n-        assert_raises_jsonrpc(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "9aee06864efce0bbe04f0baa45e3cfd5cc48769d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.blocktools import create_coinbase\n from test_framework.mininode import CBlock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -68,7 +68,7 @@ def run_test(self):\n         assert_template(node, block, None)\n \n         self.log.info(\"submitblock: Test block decode failure\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -77,10 +77,10 @@ def run_test(self):\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n         self.log.info(\"submitblock: Test invalid coinbase transaction\")\n-        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -107,7 +107,7 @@ def run_test(self):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n         bad_block_sn[TX_COUNT_OFFSET] += 1\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)"
      },
      {
        "sha": "6adcc1fd88289f6980c078507269f5a89e98c15e",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -9,7 +9,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -43,10 +43,10 @@ def run_test(self):\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n+        assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n-        assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n \n         # check w1 wallet balance\n         w1_info = w1.getwalletinfo()"
      },
      {
        "sha": "16e4f6adb41b48e2f2fd366c6ce61a1422a40221",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -12,7 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n )\n@@ -84,7 +84,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n         # check that a non-existent node returns an error\n-        assert_raises_jsonrpc(-24, \"Node has not been added\",\n+        assert_raises_rpc_error(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n     def _test_getpeerinfo(self):"
      },
      {
        "sha": "91c4550653826253b949775bdd04807cffa532a1",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -80,14 +80,14 @@ def run_test(self):\n         test4tx = self.create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")"
      },
      {
        "sha": "5b6429b410194d87a5c8ae76cf695d442cc3fad9",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -171,7 +171,7 @@ def run_test(self):\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n-        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip"
      },
      {
        "sha": "bb56db9b40f31758a96bc1605787cc019ec7aae2",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "0101f6118542f845fb8faa890cbbd3cef473668a",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -185,7 +185,7 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        assert_raises_rpc_error(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n         self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n@@ -232,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         self.start_node(node_number)\n         node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_rpc_error(-1, \"not in prune mode\", node.pruneblockchain, 500)\n \n         # now re-start in manual pruning mode\n         self.stop_node(node_number)\n@@ -265,14 +265,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_rpc_error(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)"
      },
      {
        "sha": "2777cb96937e77eef56c9cac229a648a731a1daf",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n         # This will raise an exception since there are missing inputs\n-        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n+        assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -188,13 +188,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n@@ -205,12 +205,12 @@ def run_test(self):\n         # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "269d57775c8af7526af0ca069067a35fa7ad4da9",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -125,17 +125,17 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n         # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -178,7 +178,7 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n@@ -239,7 +239,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n@@ -267,7 +267,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -291,7 +291,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -314,7 +314,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n@@ -331,7 +331,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n@@ -350,7 +350,7 @@ def test_new_unconfirmed_inputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n@@ -396,7 +396,7 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n@@ -423,7 +423,7 @@ def test_opt_in(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n@@ -441,7 +441,7 @@ def test_opt_in(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now create a new transaction that spends from tx1a and tx2a\n         # opt-in on one of the inputs\n@@ -493,7 +493,7 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n@@ -520,7 +520,7 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))"
      },
      {
        "sha": "d959bb4c3836466fa11e50fabc9da6f3d1cfc4d9",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test resendwallettransactions RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_jsonrpc(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)"
      },
      {
        "sha": "0e8c3fa209ee82d73336ce2abda17c59f71dd55d",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Check that with invalid rpcallowip, we are denied\n         self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n-        assert_raises_jsonrpc(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n+        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n \n if __name__ == '__main__':\n     RPCBindTest().main()"
      },
      {
        "sha": "c47212bddb14bbc33af32506358fb5bf72ecbe0c",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class NamedArgumentTest(BitcoinTestFramework):\n@@ -19,7 +19,7 @@ def run_test(self):\n         h = node.help(command='getblockchaininfo')\n         assert(h.startswith('getblockchaininfo\\n'))\n \n-        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n+        assert_raises_rpc_error(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "6ecade7cb6a4c3e3db47ead6b35f72c37b995a8a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -99,11 +99,11 @@ def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n-        assert_raises_jsonrpc(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        assert_raises_rpc_error(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n \n     def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n-        assert_raises_jsonrpc(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n+        assert_raises_rpc_error(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n         sync_blocks(self.nodes)\n \n     def run_test(self):\n@@ -465,7 +465,7 @@ def run_test(self):\n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that no witness address should be returned by unsolvable addresses\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address:\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # addwitnessaddress should return a witness addresses even if keys are not in the wallet\n         self.nodes[0].addwitnessaddress(multisig_without_privkey_address)\n@@ -548,7 +548,7 @@ def run_test(self):\n         # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress:\n             # This will raise an exception\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n         v = self.nodes[0].validateaddress(compressed_solvable_address[1])"
      },
      {
        "sha": "9a45d53cb85640e41c0542270148427294a03d4c",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises_jsonrpc(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "102c903018fedf239bae20be22451349539cf701",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -52,7 +52,7 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException:\n-        raise AssertionError(\"Use assert_raises_jsonrpc() to test RPC failures\")\n+        raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n@@ -85,7 +85,7 @@ def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException"
      },
      {
        "sha": "47de8777a655803bd89e4d316cb750ebe98aa839",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n+from test_framework.util import (assert_equal, assert_raises_rpc_error)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -106,7 +106,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) \n \n         # Overwriting should fail\n-        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      },
      {
        "sha": "db62e1e30f489b18f573b08a135ccc5d7d321f04",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -32,28 +32,28 @@ def run_test(self):\n         self.start_node(0)\n \n         # Test that the wallet is encrypted\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n \n         # Check that the timeout is right\n         time.sleep(2)\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test wrong passphrase\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n         self.nodes[0].walletlock()\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n "
      },
      {
        "sha": "9d8ae503549bb60aec7f9a2ab07fddc281fd02ba",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n         self.nodes[2].lockunspent(False, [unspent_0])\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -286,10 +286,10 @@ def run_test(self):\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         # This will raise an exception because the amount type is wrong\n-        assert_raises_jsonrpc(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n-        assert_raises_jsonrpc(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n+        assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n@@ -422,7 +422,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_jsonrpc(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))"
      },
      {
        "sha": "8cd622dc8ec3b7996140f2115f904a89e3a6639e",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     wait_until,\n )\n \n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "becbd71b0c1691774c5fb513ad691196e4a71a58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWNiZDcxYjBjMTY5MTc3NGM1ZmI1MTNhZDY5MTE5NmU0YTcxYTU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-05T16:05:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-05T16:06:10Z"
      },
      "message": "Merge #11437: [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04\n\n696ce46 [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n4f890ba Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system (Donal OConnor)\n\nPull request description:\n\n  This updates the Windows build documentation with the workaround required to build using Ubuntu 17.04 on WSL, and makes it's explicit that building on Ubuntu 16.04 is broken, and not recommended.\n\n  This includes a commit from @donaloconnor in #11244, and is mostly the investigative work of @laanwj throughout #8732, #8653 and quite a few other issues.\n\n  I tested building on 14.04, 16.04.3 and 17.04 [here](https://github.com/bitcoin/bitcoin/pull/11244#issuecomment-327990251) and got the results we expect.\n\n  ---\n\n  Built master at https://github.com/bitcoin/bitcoin/commit/c22a53cd6351b3f0e96de971b001ad712b83fc47 on a Windows 10 VM (Version 1607, OS Build 14393.1593) using WSL with Ubuntu 14.04.\n  ![windows](https://user-images.githubusercontent.com/863730/30195033-867f1f24-9489-11e7-932c-e87b8764a627.png)\n\n  Upgraded WSL to 16.04.3, and tried building https://github.com/bitcoin/bitcoin/commit/c22a53cd6351b3f0e96de971b001ad712b83fc47 using these instructions. The result is as expected.\n  ![ubuntu 16 04 3](https://user-images.githubusercontent.com/863730/30235670-b9bf36bc-953d-11e7-8c1d-4debf7113032.png)\n\n  Upgraded WSL to 17.04 and tried building https://github.com/bitcoin/bitcoin/commit/3255d6347b1f9eccbec3d6d93d4a424087a3b35b using these instructions.\n  ![ubuntu 17 04](https://user-images.githubusercontent.com/863730/30235669-b7473434-953d-11e7-8ea3-d05a319ae2d4.png)\n\n  If someone else could also verify that builds are working on both 14.04 and 17.04 with these instructions, that would be great.\n\nTree-SHA512: 866f1003eb45d208d8ae849504f54fc2f27c32240129d2124ce5a2ee7167bcbf062d29f23b1745123f532ffd0253a8611e719b2a316d1331d3c3924f91e7775d",
      "tree": {
        "sha": "fa5d938e7c75e30f5ed7e8aec2d3d4c6dde17fe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa5d938e7c75e30f5ed7e8aec2d3d4c6dde17fe7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/becbd71b0c1691774c5fb513ad691196e4a71a58",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1lhyAAoJEB5K7WKYbNJdlcgH/2JGrjSlqdzWmHKbZ5V+xSD9\nSf95DpBsfT15ma4Zl1J4/Dz+OXQCpYBNaPcbPXQWXhexseGWVWzF4MOIv4aRqg7I\nq/mTTbZ/t3TI3N+g8VHuMOtOdeuPtwEImiEDQspxEqO6dX6COkP0de/exsJbAScb\nNO18Iktmd5EaAygY749SfVSgiPCdJUAHhxEKCpSJG2W6Hq9Wpl1rgnfDxbAKofAZ\nJ+/Kh23J9m1NV5XQdcR7+kFQORmEPvJZylgH4TAHIwI7WuliiBE5/u9ppptn62w0\nrQCX6r96p7ycKN0xeilenBEYqLNLwvAmON4x5kdUGs1FjXZ6+2wDM0h2ZGlaJg4=\n=uIbg\n-----END PGP SIGNATURE-----",
        "payload": "tree fa5d938e7c75e30f5ed7e8aec2d3d4c6dde17fe7\nparent e93fff1463ae906fc986bf98c3b118c82f171546\nparent 696ce46306e40f48dc4b2d7010812d564a43289d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507219522 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507219570 +0200\n\nMerge #11437: [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04\n\n696ce46 [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n4f890ba Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system (Donal OConnor)\n\nPull request description:\n\n  This updates the Windows build documentation with the workaround required to build using Ubuntu 17.04 on WSL, and makes it's explicit that building on Ubuntu 16.04 is broken, and not recommended.\n\n  This includes a commit from @donaloconnor in #11244, and is mostly the investigative work of @laanwj throughout #8732, #8653 and quite a few other issues.\n\n  I tested building on 14.04, 16.04.3 and 17.04 [here](https://github.com/bitcoin/bitcoin/pull/11244#issuecomment-327990251) and got the results we expect.\n\n  ---\n\n  Built master at https://github.com/bitcoin/bitcoin/commit/c22a53cd6351b3f0e96de971b001ad712b83fc47 on a Windows 10 VM (Version 1607, OS Build 14393.1593) using WSL with Ubuntu 14.04.\n  ![windows](https://user-images.githubusercontent.com/863730/30195033-867f1f24-9489-11e7-932c-e87b8764a627.png)\n\n  Upgraded WSL to 16.04.3, and tried building https://github.com/bitcoin/bitcoin/commit/c22a53cd6351b3f0e96de971b001ad712b83fc47 using these instructions. The result is as expected.\n  ![ubuntu 16 04 3](https://user-images.githubusercontent.com/863730/30235670-b9bf36bc-953d-11e7-8c1d-4debf7113032.png)\n\n  Upgraded WSL to 17.04 and tried building https://github.com/bitcoin/bitcoin/commit/3255d6347b1f9eccbec3d6d93d4a424087a3b35b using these instructions.\n  ![ubuntu 17 04](https://user-images.githubusercontent.com/863730/30235669-b7473434-953d-11e7-8ea3-d05a319ae2d4.png)\n\n  If someone else could also verify that builds are working on both 14.04 and 17.04 with these instructions, that would be great.\n\nTree-SHA512: 866f1003eb45d208d8ae849504f54fc2f27c32240129d2124ce5a2ee7167bcbf062d29f23b1745123f532ffd0253a8611e719b2a316d1331d3c3924f91e7775d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/becbd71b0c1691774c5fb513ad691196e4a71a58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/becbd71b0c1691774c5fb513ad691196e4a71a58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/becbd71b0c1691774c5fb513ad691196e4a71a58/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93fff1463ae906fc986bf98c3b118c82f171546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93fff1463ae906fc986bf98c3b118c82f171546",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93fff1463ae906fc986bf98c3b118c82f171546"
      },
      {
        "sha": "696ce46306e40f48dc4b2d7010812d564a43289d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/696ce46306e40f48dc4b2d7010812d564a43289d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/696ce46306e40f48dc4b2d7010812d564a43289d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0d96af26a29c8121528edfdb03d8271f68288a50",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/becbd71b0c1691774c5fb513ad691196e4a71a58/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/becbd71b0c1691774c5fb513ad691196e4a71a58/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=becbd71b0c1691774c5fb513ad691196e4a71a58",
        "patch": "@@ -4,10 +4,11 @@ WINDOWS BUILD NOTES\n Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n+Windows. Cross-compilation is also used to build the release binaries.\n \n-Currently only building on Ubuntu Trusty 14.04 is supported.\n-Other versions are unsupported or known to be broken (e.g. Ubuntu Xenial 16.04).\n+Currently only building on Ubuntu Trusty 14.04 or Ubuntu Zesty 17.04 or later is supported.\n+Building on Ubuntu Xenial 16.04 is known to be broken, see extensive discussion in issue [8732](https://github.com/bitcoin/bitcoin/issues/8732).\n+While it may be possible to do so with work arounds, it's potentially dangerous and not recommended.\n \n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n using the Windows Subsystem For Linux is the most straightforward. If you are building with\n@@ -64,6 +65,13 @@ build process.\n \n See also: [dependencies.md](dependencies.md).\n \n+If you're building on Ubuntu 17.04 or later, run these two commands, selecting the 'posix' variant for both,\n+to work around issues with mingw-w64. See issue [8732](https://github.com/bitcoin/bitcoin/issues/8732) for more information.\n+```\n+sudo update-alternatives --config x86_64-w64-mingw32-g++\n+sudo update-alternatives --config x86_64-w64-mingw32-gcc\n+```\n+\n ## Building for 64-bit Windows\n \n To build executables for Windows 64-bit, install the following dependencies:\n@@ -72,6 +80,7 @@ To build executables for Windows 64-bit, install the following dependencies:\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=x86_64-w64-mingw32\n     cd ..\n@@ -83,10 +92,11 @@ Then build using:\n \n To build executables for Windows 32-bit, install the following dependencies:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev \n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=i686-w64-mingw32\n     cd .."
      }
    ]
  },
  {
    "sha": "9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZThlZjlkOTkxNzk2NDRlZjU1ZjI5NDBiZGE5NGI5ZDY1ZTFlYzUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-05T16:07:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-05T16:07:50Z"
      },
      "message": "Merge #10440: [tests] Add libFuzzer support\n\nf3ba869 [tests] Add libFuzzer support. (practicalswift)\n\nPull request description:\n\n  Add `libFuzzer` support.\n\n  As discussed in [issue #10364](https://github.com/bitcoin/bitcoin/issues/10364#issuecomment-300000902).\n\n  See http://llvm.org/docs/LibFuzzer.html#fuzzer-usage for usage instructions.\n\nTree-SHA512: 32562a3a43eb07e79989d55eeb0bfe94e2cff060da8ff0cb50c2f838ef19f2fd583a3dc89074a6442bd3e395185d309371325ed9a0ef50065431d5ea7f099772",
      "tree": {
        "sha": "9a4e6c955852868c42e56fe16e408a640b4412d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a4e6c955852868c42e56fe16e408a640b4412d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1ljWAAoJEB5K7WKYbNJdUDkH/jCK5ore1637BxXohZuhK6KE\n0gS+TyVm2AZ4kRkNMgiryVuTK8zTNh6J8SEFVtyhXcT/wcfFylvx16HfcZrOWaas\nc1C8UQ3UDjp94QODzJfDrUa2pM36UfIWPCea3+I/irviPJ3DV8GIb7QVDMdTl7YC\nqemQIGjuckFi8PrYf0U+UGAFfw98ZgnTbZ4p/Bh7ryaO+KwSF/+SOM3G34J73/rR\nJcFDcgCifoaZsjvWDk6Vvfpxxmo2FCC8a487VWKXf3/uzr+9HSfgPZ4fc2/lfTlK\npKUIcA9R8OBIL9hSI2raAdi+MLQLLPan8HOU6rBC5gsdE/PKOtMqXvy5oqXinCc=\n=d/iy\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a4e6c955852868c42e56fe16e408a640b4412d4\nparent becbd71b0c1691774c5fb513ad691196e4a71a58\nparent f3ba86973428d7442bf95713890be6185bc40dd0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507219654 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507219670 +0200\n\nMerge #10440: [tests] Add libFuzzer support\n\nf3ba869 [tests] Add libFuzzer support. (practicalswift)\n\nPull request description:\n\n  Add `libFuzzer` support.\n\n  As discussed in [issue #10364](https://github.com/bitcoin/bitcoin/issues/10364#issuecomment-300000902).\n\n  See http://llvm.org/docs/LibFuzzer.html#fuzzer-usage for usage instructions.\n\nTree-SHA512: 32562a3a43eb07e79989d55eeb0bfe94e2cff060da8ff0cb50c2f838ef19f2fd583a3dc89074a6442bd3e395185d309371325ed9a0ef50065431d5ea7f099772\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8ef9d99179644ef55f2940bda94b9d65e1ec51/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "becbd71b0c1691774c5fb513ad691196e4a71a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/becbd71b0c1691774c5fb513ad691196e4a71a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/becbd71b0c1691774c5fb513ad691196e4a71a58"
      },
      {
        "sha": "f3ba86973428d7442bf95713890be6185bc40dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ba86973428d7442bf95713890be6185bc40dd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ba86973428d7442bf95713890be6185bc40dd0"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 39,
      "deletions": 11
    },
    "files": [
      {
        "sha": "581ad2ffa00d79e95311016337743b37e14078b3",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 11,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e8ef9d99179644ef55f2940bda94b9d65e1ec51/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e8ef9d99179644ef55f2940bda94b9d65e1ec51/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
        "patch": "@@ -48,8 +48,8 @@ enum TEST_ID {\n     TEST_ID_END\n };\n \n-bool read_stdin(std::vector<char> &data) {\n-    char buffer[1024];\n+bool read_stdin(std::vector<uint8_t> &data) {\n+    uint8_t buffer[1024];\n     ssize_t length=0;\n     while((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n         data.insert(data.end(), buffer, buffer+length);\n@@ -59,11 +59,7 @@ bool read_stdin(std::vector<char> &data) {\n     return length==0;\n }\n \n-int do_fuzz()\n-{\n-    std::vector<char> buffer;\n-    if (!read_stdin(buffer)) return 0;\n-\n+int test_one_input(std::vector<uint8_t> buffer) {\n     if (buffer.size() < sizeof(uint32_t)) return 0;\n \n     uint32_t test_id = 0xffffffff;\n@@ -255,9 +251,32 @@ int do_fuzz()\n     return 0;\n }\n \n+static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n+void initialize() {\n+    globalVerifyHandle = std::unique_ptr<ECCVerifyHandle>(new ECCVerifyHandle());\n+}\n+\n+// This function is used by libFuzzer\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n+    test_one_input(std::vector<uint8_t>(data, data + size));\n+    return 0;\n+}\n+\n+// This function is used by libFuzzer\n+extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n+    initialize();\n+    return 0;\n+}\n+\n+// Disabled under WIN32 due to clash with Cygwin's WinMain.\n+#ifndef WIN32\n+// Declare main(...) \"weak\" to allow for libFuzzer linking. libFuzzer provides\n+// the main(...) function.\n+__attribute__((weak))\n+#endif\n int main(int argc, char **argv)\n {\n-    ECCVerifyHandle globalVerifyHandle;\n+    initialize();\n #ifdef __AFL_INIT\n     // Enable AFL deferred forkserver mode. Requires compilation using\n     // afl-clang-fast++. See fuzzing.md for details.\n@@ -267,11 +286,20 @@ int main(int argc, char **argv)\n #ifdef __AFL_LOOP\n     // Enable AFL persistent mode. Requires compilation using afl-clang-fast++.\n     // See fuzzing.md for details.\n+    int ret = 0;\n     while (__AFL_LOOP(1000)) {\n-        do_fuzz();\n+        std::vector<uint8_t> buffer;\n+        if (!read_stdin(buffer)) {\n+            continue;\n+        }\n+        ret = test_one_input(buffer);\n     }\n-    return 0;\n+    return ret;\n #else\n-    return do_fuzz();\n+    std::vector<uint8_t> buffer;\n+    if (!read_stdin(buffer)) {\n+        return 0;\n+    }\n+    return test_one_input(buffer);\n #endif\n }"
      }
    ]
  },
  {
    "sha": "17f2acedbe078f179556f4550eca547726f087e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2YyYWNlZGJlMDc4ZjE3OTU1NmY0NTUwZWNhNTQ3NzI2ZjA4N2Ux",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-05T17:39:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-05T17:49:42Z"
      },
      "message": "Merge #9572: Skip witness sighash cache for non-segwit transactions\n\n0da49b5 Skip precompute sighash for transactions without witness (Johnson Lau)\n\nPull request description:\n\n  This saves unnecessary hash caching for non-segwit transactions, but I am not sure if the difference is noticeable.\n\nTree-SHA512: 5cd733a729a52a45781510b3572b26e76837a94155caa14311c6d23a27a12e9613ff278dfc2592e21f640202782f22c5ad00fca85c4de5efacaa617c48ccb08d",
      "tree": {
        "sha": "7b098b3217620a3699353c4ea5e52de91f6f726d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b098b3217620a3699353c4ea5e52de91f6f726d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17f2acedbe078f179556f4550eca547726f087e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ1nC2AAoJEB5K7WKYbNJdT1wH+QHX/0CSTW6S3oXy1UMBj9Gm\nrffVRVBQkyS7F5RbWLHlNhBDUr+GEv1KlpWdaECZWogvCtp3rYSAA5raarGKVNWf\nr9rr+Bv0VfkHV53Q22RADgmVXrg916H0PDTLyFuSLacQr+1rAnsddVoITB/T2sj0\nQdlZqD8JSwbEGb0X0xObpD7771x7SbqKuIjKAAOIE7yk500UWpdSLDOoZhNaYpNE\nI2rWUIOFbU+7xFGiSxNYYTA6bs82TplH4v1T9m5JkHoNMhCU8PsVELEUsRHL/zyI\nGY6cEJpFs5CSraFobUq2wtUI2QU3zRfSoc92yx1wA05nNQ4AHnHsKL2g8cnm+gQ=\n=vHOP\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b098b3217620a3699353c4ea5e52de91f6f726d\nparent 9e8ef9d99179644ef55f2940bda94b9d65e1ec51\nparent 0da49b5926b678b2ec35fabe37034f3d2e8385f4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507225164 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507225782 +0200\n\nMerge #9572: Skip witness sighash cache for non-segwit transactions\n\n0da49b5 Skip precompute sighash for transactions without witness (Johnson Lau)\n\nPull request description:\n\n  This saves unnecessary hash caching for non-segwit transactions, but I am not sure if the difference is noticeable.\n\nTree-SHA512: 5cd733a729a52a45781510b3572b26e76837a94155caa14311c6d23a27a12e9613ff278dfc2592e21f640202782f22c5ad00fca85c4de5efacaa617c48ccb08d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f2acedbe078f179556f4550eca547726f087e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17f2acedbe078f179556f4550eca547726f087e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f2acedbe078f179556f4550eca547726f087e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8ef9d99179644ef55f2940bda94b9d65e1ec51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8ef9d99179644ef55f2940bda94b9d65e1ec51"
      },
      {
        "sha": "0da49b5926b678b2ec35fabe37034f3d2e8385f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0da49b5926b678b2ec35fabe37034f3d2e8385f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0da49b5926b678b2ec35fabe37034f3d2e8385f4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2f7b8e3a035ba881d45964fbcf383995995138ac",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f2acedbe078f179556f4550eca547726f087e1/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f2acedbe078f179556f4550eca547726f087e1/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=17f2acedbe078f179556f4550eca547726f087e1",
        "patch": "@@ -1168,9 +1168,13 @@ uint256 GetOutputsHash(const CTransaction& txTo) {\n \n PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n {\n-    hashPrevouts = GetPrevoutHash(txTo);\n-    hashSequence = GetSequenceHash(txTo);\n-    hashOutputs = GetOutputsHash(txTo);\n+    // Cache is calculated only for transactions with witness\n+    if (txTo.HasWitness()) {\n+        hashPrevouts = GetPrevoutHash(txTo);\n+        hashSequence = GetSequenceHash(txTo);\n+        hashOutputs = GetOutputsHash(txTo);\n+        ready = true;\n+    }\n }\n \n uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n@@ -1181,18 +1185,19 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n         uint256 hashPrevouts;\n         uint256 hashSequence;\n         uint256 hashOutputs;\n+        const bool cacheready = cache && cache->ready;\n \n         if (!(nHashType & SIGHASH_ANYONECANPAY)) {\n-            hashPrevouts = cache ? cache->hashPrevouts : GetPrevoutHash(txTo);\n+            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);\n         }\n \n         if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n-            hashSequence = cache ? cache->hashSequence : GetSequenceHash(txTo);\n+            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);\n         }\n \n \n         if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n-            hashOutputs = cache ? cache->hashOutputs : GetOutputsHash(txTo);\n+            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);\n         } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n             CHashWriter ss(SER_GETHASH, 0);\n             ss << txTo.vout[nIn];"
      },
      {
        "sha": "1cb9cc7899a587ddf0ffbad76ac1f5d177a38ef2",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f2acedbe078f179556f4550eca547726f087e1/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f2acedbe078f179556f4550eca547726f087e1/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=17f2acedbe078f179556f4550eca547726f087e1",
        "patch": "@@ -113,6 +113,7 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n struct PrecomputedTransactionData\n {\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n+    bool ready = false;\n \n     explicit PrecomputedTransactionData(const CTransaction& tx);\n };"
      }
    ]
  },
  {
    "sha": "46b752ab5783a4689ed64b38b3a79429ad77217b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmI3NTJhYjU3ODNhNDY4OWVkNjRiMzhiM2E3OTQyOWFkNzcyMTdi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-07T05:47:30Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-07T06:50:18Z"
      },
      "message": "[depends] native_mac_alias 2.0.6",
      "tree": {
        "sha": "11f44bdaed14b7787e603ac78bef47db0d262aff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11f44bdaed14b7787e603ac78bef47db0d262aff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46b752ab5783a4689ed64b38b3a79429ad77217b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnYeSwACgkQLuufXMCV\nJsHIIQ//Q3d9VkDTrNsgPalaBuHHln3iNYvMciOlSKznd8wDXwXnY07g7WHbJWG3\ntlggZ/Bz9pOrn/3Yp30OS/kBoNW4a0wDA9lRcxQNY0IuEqKyZqK2Wpl9ShXy29kX\nhY4WeGauxxyO6Ez89ZH96cVB0XpDJ5XDAi8JiLnBbmBh9KwNpuIOivRfeMhGfbZU\n3vg0UdgS4e67ZqTwfwYHdfhyMmXJVnCdLk6shZ2u7qvXebmdpZ8h0jmeJdxiUVmc\nsnFZoWOmGPst5zXQ5ztSUc/mMQDox5IHI8Nw85xVn3XAg7Oh8J08/5o2+4gfqymM\n3Xy4wXP3oSMRe1vLZu7k7eg+x7gq2cxvkmoJufirW5KgsFscg/CzsJ8bSPud67Di\nXAQuh1GFqvUfYBHApFx66MlKU2+gs8vv2wHblU8KW9vBLko9OX6+iw9KLW+m/2bV\nG6ZQ+oUWC6mn92s4HfXCzClApyueyJznlMsU97SjXe0s1fdDgjyTWC35ft1tfYzL\nxFpLCSSlvX8ek7TioncNHY6GrE3F1PNTAAg3DXURBnHOYmQX6F9BxU7By5wqKVj6\nsffwnozi3UveTo3hY/7WlZJhd5OP8VN5atRiG/uG5nrT5dq9mxoX/AoOp3JOS9Uo\ngnhTBRvtEXjQIj2iLwhp2JzUnAm4exSaRENssGh4ITUQFTeCc7A=\n=SN73\n-----END PGP SIGNATURE-----",
        "payload": "tree 11f44bdaed14b7787e603ac78bef47db0d262aff\nparent 17f2acedbe078f179556f4550eca547726f087e1\nauthor fanquake <fanquake@gmail.com> 1507355250 +0800\ncommitter fanquake <fanquake@gmail.com> 1507359018 +0800\n\n[depends] native_mac_alias 2.0.6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46b752ab5783a4689ed64b38b3a79429ad77217b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46b752ab5783a4689ed64b38b3a79429ad77217b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46b752ab5783a4689ed64b38b3a79429ad77217b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17f2acedbe078f179556f4550eca547726f087e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f2acedbe078f179556f4550eca547726f087e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17f2acedbe078f179556f4550eca547726f087e1"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 11,
      "deletions": 28
    },
    "files": [
      {
        "sha": "488ec8b59c977346818e8294dc9064fc49e15ec4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46b752ab5783a4689ed64b38b3a79429ad77217b/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46b752ab5783a4689ed64b38b3a79429ad77217b/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=46b752ab5783a4689ed64b38b3a79429ad77217b",
        "patch": "@@ -1,14 +1,13 @@\n package=native_mac_alias\n-$(package)_version=1.1.0\n-$(package)_download_path=https://bitbucket.org/al45tair/mac_alias/get\n-$(package)_download_file=v$($(package)_version).tar.bz2\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=87ad827e66790028361e43fc754f68ed041a9bdb214cca03c853f079b04fb120\n+$(package)_version=2.0.6\n+$(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n+$(package)_file_name=v$($(package)_version).tar.gz\n+$(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n $(package)_patches=python3.patch\n \n define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/python3.patch\n+    patch -p1 < $($(package)_patch_dir)/python3.patch\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "6f2f5534a275d57d3dcb8287823b85e663152904",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "modified",
        "additions": 6,
        "deletions": 22,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46b752ab5783a4689ed64b38b3a79429ad77217b/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46b752ab5783a4689ed64b38b3a79429ad77217b/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=46b752ab5783a4689ed64b38b3a79429ad77217b",
        "patch": "@@ -1,7 +1,7 @@\n diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n---- a/mac_alias/alias.py\t2015-10-19 12:12:48.000000000 +0200\n-+++ b/mac_alias/alias.py\t2016-04-03 12:13:12.037159417 +0200\n-@@ -243,10 +243,10 @@\n+--- a/mac_alias/alias.py\n++++ b/mac_alias/alias.py\n+@@ -258,10 +258,10 @@\n          alias = Alias()\n          alias.appinfo = appinfo\n              \n@@ -14,7 +14,7 @@ diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n                                     folder_cnid, cnid,\n                                     crdate, creator_code, type_code)\n          alias.target.levels_from = levels_from\n-@@ -261,9 +261,9 @@\n+@@ -276,9 +276,9 @@\n                  b.read(1)\n  \n              if tag == TAG_CARBON_FOLDER_NAME:\n@@ -26,7 +26,7 @@ diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n                                                             value)\n              elif tag == TAG_CARBON_PATH:\n                  alias.target.carbon_path = value\n-@@ -298,9 +298,9 @@\n+@@ -313,9 +313,9 @@\n                  alias.target.creation_date \\\n                      = mac_epoch + datetime.timedelta(seconds=seconds)\n              elif tag == TAG_POSIX_PATH:\n@@ -38,23 +38,7 @@ diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n              elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n                  alias.volume.disk_image_alias = Alias.from_bytes(value)\n              elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n-@@ -422,13 +422,13 @@\n-         #       (so doing so is ridiculous, and nothing could rely on it).\n-         b.write(struct.pack(b'>h28pI2shI64pII4s4shhI2s10s',\n-                             self.target.kind,\n--                            carbon_volname, voldate,\n-+                            carbon_volname, int(voldate),\n-                             self.volume.fs_type,\n-                             self.volume.disk_type,\n-                             self.target.folder_cnid,\n-                             carbon_filename,\n-                             self.target.cnid,\n--                            crdate,\n-+                            int(crdate),\n-                             self.target.creator_code,\n-                             self.target.type_code,\n-                             self.target.levels_from,\n-@@ -449,12 +449,12 @@\n+@@ -467,12 +467,12 @@\n  \n          b.write(struct.pack(b'>hhQhhQ',\n                  TAG_HIGH_RES_VOLUME_CREATION_DATE,"
      }
    ]
  },
  {
    "sha": "f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjE3ZDFiMDZjMTdjN2RkNjlkODRlZmRmZWU0MWQ0OTUxMWFiN2Fl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-07T05:54:45Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-07T06:50:25Z"
      },
      "message": "[depends] native_ds_store 1.1.2",
      "tree": {
        "sha": "6d89bb360b9f1a0b9761b25ab88ffd4d26723273",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d89bb360b9f1a0b9761b25ab88ffd4d26723273"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnYeTEACgkQLuufXMCV\nJsHDVg//W096Uejb7YtU4CMBDSajEGvsqeHZi6fHl7zLI9Bwxn52e1KBqZ9ZLvXz\nBvFaJJ8gI0lE6Mpyti8qNcQN3Bme1lywyJNXNfmBzQxwPqMNObuXd7kSLJl3W+Eu\no+vRVHFTrx9zWBE62d7qTxwJ1JoJq9/hjJDic8s3WI5IzZiht+YXIwH61RtL+AQ9\nvdjhuhevuTrdLRVY9VthM8+TuJ4DWXSJfqZbN6lCoRM7axnk/0CfAO3sa0+MaOZM\nZEyspFZ0Tu1vBDj1Bu+SqqvPbY2r6LpJGnta1EYmbHfVa9FfXg5twICr2l4v7aE7\nFEe6x2AKBaktOlKeK+8BHb5b3p69sCz3ogqzVwEi76ewuPaHC2DBEnusY+C2jUFZ\noGZw6U5rFZj/fxwaDql8303b4xF/It9H3Ig3eTHKl4pzoflPnzv/xXmr2UZ5BisF\nC2eVeXQhTAdxpu8mapCa4fZlZC3HCEsNyiWKTm/BEmNqQShw3FOqp+VlOTwtLFid\nYhFFGvVG7l6OnQW2soEcA9/OrWSwPXz+KVnUoI2p2FlXHPOu5x1nBNhv/AmPT999\n+Xy79590nRm6NywSCMF0NG3BIRhn3ZTqgofJ556VuiMYzLTJcqfsuX4OYqKCTKAE\nKrPk+zXL7xNNhO9gTaaMruaj3AXRQEqzAuQxq8Df8lYHHfB7IE0=\n=9Cvh\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d89bb360b9f1a0b9761b25ab88ffd4d26723273\nparent 46b752ab5783a4689ed64b38b3a79429ad77217b\nauthor fanquake <fanquake@gmail.com> 1507355685 +0800\ncommitter fanquake <fanquake@gmail.com> 1507359025 +0800\n\n[depends] native_ds_store 1.1.2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f617d1b06c17c7dd69d84efdfee41d49511ab7ae/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46b752ab5783a4689ed64b38b3a79429ad77217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46b752ab5783a4689ed64b38b3a79429ad77217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46b752ab5783a4689ed64b38b3a79429ad77217b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "116fa25d38197b8add2c601ab7cd7b91c384f268",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f617d1b06c17c7dd69d84efdfee41d49511ab7ae/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f617d1b06c17c7dd69d84efdfee41d49511ab7ae/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
        "patch": "@@ -1,9 +1,8 @@\n package=native_ds_store\n-$(package)_version=1.1.0\n-$(package)_download_path=https://bitbucket.org/al45tair/ds_store/get\n-$(package)_download_file=v$($(package)_version).tar.bz2\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=921596764d71d1bbd3297a90ef6d286f718794d667e4f81d91d14053525d64c1\n+$(package)_version=1.1.2\n+$(package)_download_path=https://github.com/al45tair/ds_store/archive/\n+$(package)_file_name=v$($(package)_version).tar.gz\n+$(package)_sha256_hash=3b3ecb7bf0a5157f5b6010bc3af7c141fb0ad3527084e63336220d22744bc20c\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n $(package)_dependencies=native_biplist\n "
      }
    ]
  },
  {
    "sha": "c6b07fddcfb664d7d1afbff460a68479fe1238d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmIwN2ZkZGNmYjY2NGQ3ZDFhZmJmZjQ2MGE2ODQ3OWZlMTIzOGQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T08:37:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T08:37:40Z"
      },
      "message": "Fix a vs. an typo",
      "tree": {
        "sha": "0db8ae44acee0deb5e6b02a05f1da730d0b1102a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0db8ae44acee0deb5e6b02a05f1da730d0b1102a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6b07fddcfb664d7d1afbff460a68479fe1238d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b07fddcfb664d7d1afbff460a68479fe1238d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b07fddcfb664d7d1afbff460a68479fe1238d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b07fddcfb664d7d1afbff460a68479fe1238d2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17f2acedbe078f179556f4550eca547726f087e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f2acedbe078f179556f4550eca547726f087e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17f2acedbe078f179556f4550eca547726f087e1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "82040605c550a02fada85e58e2f78f827ed2baf8",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6b07fddcfb664d7d1afbff460a68479fe1238d2/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6b07fddcfb664d7d1afbff460a68479fe1238d2/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c6b07fddcfb664d7d1afbff460a68479fe1238d2",
        "patch": "@@ -291,7 +291,7 @@ struct ProxyCredentials\n     std::string password;\n };\n \n-/** Convert SOCKS5 reply to a an error message */\n+/** Convert SOCKS5 reply to an error message */\n std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {"
      }
    ]
  },
  {
    "sha": "aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTU3NTkwZDdjNWVhYjFkZjU0NDNlOGFjOWVkNTNhZDBkYjQ2YzAy",
    "commit": {
      "author": {
        "name": "Dusty Williams",
        "email": "dusty.wil@gmail.com",
        "date": "2017-10-09T03:18:48Z"
      },
      "committer": {
        "name": "Dusty Williams",
        "email": "dusty.wil@gmail.com",
        "date": "2017-10-09T11:40:42Z"
      },
      "message": "Update importprivkey named args documentation\n\nFixes #11462. Updated documentation for importprivkey function to use the correct name for the first argument.\nAlso updates a call to importprivkey to use named args in functional test.",
      "tree": {
        "sha": "6e0781b17bdbe0aeebfbfc777fda2e042bac7a74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e0781b17bdbe0aeebfbfc777fda2e042bac7a74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02/comments",
    "author": {
      "login": "dusty-wil",
      "id": 16580885,
      "node_id": "MDQ6VXNlcjE2NTgwODg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16580885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dusty-wil",
      "html_url": "https://github.com/dusty-wil",
      "followers_url": "https://api.github.com/users/dusty-wil/followers",
      "following_url": "https://api.github.com/users/dusty-wil/following{/other_user}",
      "gists_url": "https://api.github.com/users/dusty-wil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dusty-wil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dusty-wil/subscriptions",
      "organizations_url": "https://api.github.com/users/dusty-wil/orgs",
      "repos_url": "https://api.github.com/users/dusty-wil/repos",
      "events_url": "https://api.github.com/users/dusty-wil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dusty-wil/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dusty-wil",
      "id": 16580885,
      "node_id": "MDQ6VXNlcjE2NTgwODg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16580885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dusty-wil",
      "html_url": "https://github.com/dusty-wil",
      "followers_url": "https://api.github.com/users/dusty-wil/followers",
      "following_url": "https://api.github.com/users/dusty-wil/following{/other_user}",
      "gists_url": "https://api.github.com/users/dusty-wil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dusty-wil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dusty-wil/subscriptions",
      "organizations_url": "https://api.github.com/users/dusty-wil/orgs",
      "repos_url": "https://api.github.com/users/dusty-wil/repos",
      "events_url": "https://api.github.com/users/dusty-wil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dusty-wil/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17f2acedbe078f179556f4550eca547726f087e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f2acedbe078f179556f4550eca547726f087e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17f2acedbe078f179556f4550eca547726f087e1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d6ea2a9db7561cd2497aba8b7024f7822da6b33f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
        "patch": "@@ -80,10 +80,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n+            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\""
      },
      {
        "sha": "9619d679528a5acc915eb0a96ad9d83a0e16c4d5",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n-        self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n+        self.nodes[1].importprivkey(privkey=address3_privkey, label=\"add3\", rescan=False)\n         self.nodes[1].importprunedfunds(rawtxn3, proof3)\n         balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))"
      }
    ]
  },
  {
    "sha": "68feb49105a9a473cf97dc2eb67e9370051d9ca6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGZlYjQ5MTA1YTlhNDczY2Y5N2RjMmViNjdlOTM3MDA1MWQ5Y2E2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T12:26:53Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T12:26:53Z"
      },
      "message": "Use nullptr instead of NULL",
      "tree": {
        "sha": "478bdd73b0fa2b45b109d1a0e68d31d1fbb873dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/478bdd73b0fa2b45b109d1a0e68d31d1fbb873dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68feb49105a9a473cf97dc2eb67e9370051d9ca6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68feb49105a9a473cf97dc2eb67e9370051d9ca6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68feb49105a9a473cf97dc2eb67e9370051d9ca6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68feb49105a9a473cf97dc2eb67e9370051d9ca6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6b07fddcfb664d7d1afbff460a68479fe1238d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b07fddcfb664d7d1afbff460a68479fe1238d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b07fddcfb664d7d1afbff460a68479fe1238d2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "872b2d1e0e00352c5a27afa9ddf8b359f83ed2cb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68feb49105a9a473cf97dc2eb67e9370051d9ca6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68feb49105a9a473cf97dc2eb67e9370051d9ca6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=68feb49105a9a473cf97dc2eb67e9370051d9ca6",
        "patch": "@@ -3870,7 +3870,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         // Top up the keypool\n         if (!walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n-            return NULL;\n+            return nullptr;\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());"
      }
    ]
  },
  {
    "sha": "d473e6ddc55c5def795348a83211e470d04a5489",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDczZTZkZGM1NWM1ZGVmNzk1MzQ4YTgzMjExZTQ3MGQwNGE1NDg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-09T14:10:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-09T14:10:32Z"
      },
      "message": "Merge #11448: [gui] reset addrProxy/addrSeparateProxyTor if colon char missing\n\nce2418f [gui] reset addrProxy/addrSeparateProxyTor if colon char missing (Cristian Mircea Messel)\n\nPull request description:\n\n  If addrProxy or addrSeparateProxyTor do not have a colon in the string\n  somewhere in the QSettings storage, then attempting to open the options\n  dialog will cause the entire program to crash.\n\n  Fixes #11209\n\nTree-SHA512: 2d9e6987cf05af3f41033290b61d00920f7fe4a65bea7efd96ed417a8ca7866d248f091e09947cc8aad3a6a4aa8b7777211cfff7f379a62188be50df2c46d4b2",
      "tree": {
        "sha": "cb2bf58a49f9b91d7aceca7caba76f3fa318561f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb2bf58a49f9b91d7aceca7caba76f3fa318561f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d473e6ddc55c5def795348a83211e470d04a5489",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ24NYAAoJEB5K7WKYbNJd4D8IAKgkBGLe//gpMuMWcE5ITjiP\nMYZJX3k6VxrWUEdO/NLIZ10JqrRK5WAa5qJRVhNF8LkCWcDi/7DjXt9zNYI3I7SZ\nCmtYNbTal9BrU9x21Ia5VxMwMQgbIl+Za2pW+JtWbU/3OfrNSqAG/sTYJhrNFyTt\nptVRoDEEh5/I+VeN4ZfybGs7Vpsc/DrhWK2343IoBF5r84v55rrXxenUm9MCrmUi\n6evWREfuR55sVqG5T0yI9IKS4IaG6mrY41exgZ8VtpBQkh/pl8gxXp+P2FumpC34\nTrlrc0YtxUgE7bLZAMUVHJh9sHivbB3BwmD1bUrItWKUZe0++kkviCEiQMxuwPk=\n=IANu\n-----END PGP SIGNATURE-----",
        "payload": "tree cb2bf58a49f9b91d7aceca7caba76f3fa318561f\nparent 17f2acedbe078f179556f4550eca547726f087e1\nparent ce2418fa4cef5514305cca82e74891b9d643c4c7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507558229 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507558232 +0200\n\nMerge #11448: [gui] reset addrProxy/addrSeparateProxyTor if colon char missing\n\nce2418f [gui] reset addrProxy/addrSeparateProxyTor if colon char missing (Cristian Mircea Messel)\n\nPull request description:\n\n  If addrProxy or addrSeparateProxyTor do not have a colon in the string\n  somewhere in the QSettings storage, then attempting to open the options\n  dialog will cause the entire program to crash.\n\n  Fixes #11209\n\nTree-SHA512: 2d9e6987cf05af3f41033290b61d00920f7fe4a65bea7efd96ed417a8ca7866d248f091e09947cc8aad3a6a4aa8b7777211cfff7f379a62188be50df2c46d4b2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d473e6ddc55c5def795348a83211e470d04a5489",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d473e6ddc55c5def795348a83211e470d04a5489",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d473e6ddc55c5def795348a83211e470d04a5489/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17f2acedbe078f179556f4550eca547726f087e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f2acedbe078f179556f4550eca547726f087e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17f2acedbe078f179556f4550eca547726f087e1"
      },
      {
        "sha": "ce2418fa4cef5514305cca82e74891b9d643c4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2418fa4cef5514305cca82e74891b9d643c4c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2418fa4cef5514305cca82e74891b9d643c4c7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fb8c60d100168f8ec9719e5f5ce7a8fb2c4fff42",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d473e6ddc55c5def795348a83211e470d04a5489/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d473e6ddc55c5def795348a83211e470d04a5489/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=d473e6ddc55c5def795348a83211e470d04a5489",
        "patch": "@@ -124,7 +124,7 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\"))\n+    if (!settings.contains(\"addrProxy\") || !settings.value(\"addrProxy\").toString().contains(':'))\n         settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n@@ -134,7 +134,7 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseSeparateProxyTor\"))\n         settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\"))\n+    if (!settings.contains(\"addrSeparateProxyTor\") || !settings.value(\"addrSeparateProxyTor\").toString().contains(':'))\n         settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n     if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))"
      }
    ]
  },
  {
    "sha": "0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWFjZmE0M2MxNmFmMzA3YWQxNTRkOWZiYzVkYWRlODBmNmY4OGQ1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T12:36:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T14:23:08Z"
      },
      "message": "Remove accidental stray semicolon",
      "tree": {
        "sha": "e71d8f61f0c1d643d8735b418451a96eee4ded88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e71d8f61f0c1d643d8735b418451a96eee4ded88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aacfa43c16af307ad154d9fbc5dade80f6f88d5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68feb49105a9a473cf97dc2eb67e9370051d9ca6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68feb49105a9a473cf97dc2eb67e9370051d9ca6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68feb49105a9a473cf97dc2eb67e9370051d9ca6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7194b040eb61014fe7f3805c32f4091908481360",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aacfa43c16af307ad154d9fbc5dade80f6f88d5/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aacfa43c16af307ad154d9fbc5dade80f6f88d5/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
        "patch": "@@ -39,7 +39,7 @@ PREV_COMMIT=\"\"\n while true; do\n \tif [ \"$CURRENT_COMMIT\" = $VERIFIED_ROOT ]; then\n \t\techo \"There is a valid path from \"$CURRENT_COMMIT\" to $VERIFIED_ROOT where all commits are signed!\"\n-\t\texit 0;\n+\t\texit 0\n \tfi\n \n \tif [ \"$CURRENT_COMMIT\" = $VERIFIED_SHA512_ROOT ]; then"
      }
    ]
  },
  {
    "sha": "da0478e6e5d93d13178d098209f4397730b94065",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTA0NzhlNmU1ZDkzZDEzMTc4ZDA5ODIwOWY0Mzk3NzMwYjk0MDY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-09T14:40:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-09T14:41:06Z"
      },
      "message": "Merge #10961: Improve readability of DecodeBase58Check(...)\n\nc6a995e Improve readability of DecodeBase58Check(...) (practicalswift)\n\nPull request description:\n\n  Use the more readable form ...\n\n  ```c++\n  &vchRet[vchRet.size() - 4]\n  ```\n\n  ... instead of ...\n\n  ```c++\n  &v.end()[-n]\n  ```\n\n  Has the added benefit of eliminating a spurious static analyzer warning about improper use of negative values.\n\nTree-SHA512: 5895310c189e9322082c28f34342ff9a6c238e2cae3f204521111c8a7981bc555af60b42de082c91608c1125dfc244a65c4faf929249a067a51435e2be74cb39",
      "tree": {
        "sha": "023ff3382c2cb40df86fe1d133fad6b9d1d4a3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/023ff3382c2cb40df86fe1d133fad6b9d1d4a3c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da0478e6e5d93d13178d098209f4397730b94065",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ24qCAAoJEB5K7WKYbNJdu9wH/2xsdKvjuoxSnhRnOS4r9CYO\nnZ1WfUcktttrRsk1okmzXyRRJsJWwpQEyC+7r42K4kRJYNmT+dGEify0eOPE2oyj\nzUyoBQGyPzRbMh/M8T7ZWRWjGsZsDGurn/acp4BUQgqUIxLY0W0oT+KSgvkfmJsj\naFQe5NHSaB7S0bR4f8cZjvJyxpYx44eT/Q+Mi69PDQN1HJ/Qni7Rth+WrQTrjchp\nIWd8AnsuroU7zuX6mHBsI32HztTTlIC/yK1GJt8rOMeJHDcJVVLeqzDUu9yvN2sP\n8JxNmwa/AYITLyGDVESDNFafGGjF4GzUW+0qmfZ+ImtMr90rCmaTBd1bUl8SO/8=\n=eduU\n-----END PGP SIGNATURE-----",
        "payload": "tree 023ff3382c2cb40df86fe1d133fad6b9d1d4a3c3\nparent d473e6ddc55c5def795348a83211e470d04a5489\nparent c6a995e7e5e6ae37dc1684f6060038e96864e947\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507560036 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507560066 +0200\n\nMerge #10961: Improve readability of DecodeBase58Check(...)\n\nc6a995e Improve readability of DecodeBase58Check(...) (practicalswift)\n\nPull request description:\n\n  Use the more readable form ...\n\n  ```c++\n  &vchRet[vchRet.size() - 4]\n  ```\n\n  ... instead of ...\n\n  ```c++\n  &v.end()[-n]\n  ```\n\n  Has the added benefit of eliminating a spurious static analyzer warning about improper use of negative values.\n\nTree-SHA512: 5895310c189e9322082c28f34342ff9a6c238e2cae3f204521111c8a7981bc555af60b42de082c91608c1125dfc244a65c4faf929249a067a51435e2be74cb39\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0478e6e5d93d13178d098209f4397730b94065",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da0478e6e5d93d13178d098209f4397730b94065",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0478e6e5d93d13178d098209f4397730b94065/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d473e6ddc55c5def795348a83211e470d04a5489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d473e6ddc55c5def795348a83211e470d04a5489",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d473e6ddc55c5def795348a83211e470d04a5489"
      },
      {
        "sha": "c6a995e7e5e6ae37dc1684f6060038e96864e947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6a995e7e5e6ae37dc1684f6060038e96864e947",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6a995e7e5e6ae37dc1684f6060038e96864e947"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9d5a2f49645018ac2d38e73b66aa30868e76fc4d",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da0478e6e5d93d13178d098209f4397730b94065/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da0478e6e5d93d13178d098209f4397730b94065/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=da0478e6e5d93d13178d098209f4397730b94065",
        "patch": "@@ -139,7 +139,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n     }\n     // re-calculate the checksum, ensure it matches the included 4-byte checksum\n     uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n-    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0) {\n+    if (memcmp(&hash, &vchRet[vchRet.size() - 4], 4) != 0) {\n         vchRet.clear();\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "3a93270c55876cc88e1a3e2921e582acc6db318e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTkzMjcwYzU1ODc2Y2M4OGUxYTNlMjkyMWU1ODJhY2M2ZGIzMThl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-09T14:53:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-09T15:04:18Z"
      },
      "message": "Merge #11367: [rpc] getblockchaininfo: add size_on_disk, prune_target_size\n\nb7dfc6c [rpc] getblockchaininfo: add size_on_disk, prune_target_size, automatic_pruning (Daniel Edgecumbe)\n\nPull request description:\n\nTree-SHA512: c255c27d6c922434d203ffdefda0dd3dddbd765b6a9cce5f80f5af5cb0b1c11c8aff6f4d00e96a326701d0bc81aace2f216fd1985675aa979f76c16f564a6cf6",
      "tree": {
        "sha": "456af0e53fe56f234c3f447c9fc6764582985df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/456af0e53fe56f234c3f447c9fc6764582985df2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a93270c55876cc88e1a3e2921e582acc6db318e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ24/yAAoJEB5K7WKYbNJd2GkIAJUXh9H7z6kXCTjTVItgIbqY\np/U9Cx+beNIQJzovme/mMD2KJqbu+L8r7c0BFRRV8a/sVlHiC+WPNZ3wUOoTLHmN\nwQZ+MM7qF2yHHXaos8VDLisl+NrQG3zeuhuyD3MGRukRe5R8bdcrJ+gHvVCQoCtO\nfJkNpCTC2JcpJJjneY3xpEoto9aHCD+OK/+pa6ubGAcAKhyt3PTkL25ZglMIkeFM\noaswPKNAjonge6Hwtxsc/kBaeUMqupyAC19UqUpmdsF7DueA0GSoTkcSyCusWnv6\nldfBRkV1Uc14pZzQ1QSvGEniEWL3uMGgP9oIe3wIk5Zy6c8B1bJ2YqBxmUlQCoU=\n=L2NX\n-----END PGP SIGNATURE-----",
        "payload": "tree 456af0e53fe56f234c3f447c9fc6764582985df2\nparent da0478e6e5d93d13178d098209f4397730b94065\nparent b7dfc6c4b89b62f9bb79ea009ee103a6299ac005\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507560792 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507561458 +0200\n\nMerge #11367: [rpc] getblockchaininfo: add size_on_disk, prune_target_size\n\nb7dfc6c [rpc] getblockchaininfo: add size_on_disk, prune_target_size, automatic_pruning (Daniel Edgecumbe)\n\nPull request description:\n\nTree-SHA512: c255c27d6c922434d203ffdefda0dd3dddbd765b6a9cce5f80f5af5cb0b1c11c8aff6f4d00e96a326701d0bc81aace2f216fd1985675aa979f76c16f564a6cf6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a93270c55876cc88e1a3e2921e582acc6db318e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a93270c55876cc88e1a3e2921e582acc6db318e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a93270c55876cc88e1a3e2921e582acc6db318e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da0478e6e5d93d13178d098209f4397730b94065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0478e6e5d93d13178d098209f4397730b94065",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da0478e6e5d93d13178d098209f4397730b94065"
      },
      {
        "sha": "b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 58,
      "deletions": 13
    },
    "files": [
      {
        "sha": "68af376f355b104e147ce29389be02fa5e82874d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a93270c55876cc88e1a3e2921e582acc6db318e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a93270c55876cc88e1a3e2921e582acc6db318e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3a93270c55876cc88e1a3e2921e582acc6db318e",
        "patch": "@@ -1136,8 +1136,11 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"size_on_disk\\\": xxxxxx,   (numeric) the estimated size of the block and undo files on disk\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n+            \"  \\\"automatic_pruning\\\": xx,  (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n+            \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n@@ -1181,7 +1184,24 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n     obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n+    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    if (fPruneMode) {\n+        CBlockIndex* block = chainActive.Tip();\n+        assert(block);\n+        while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+            block = block->pprev;\n+        }\n+\n+        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+\n+        // if 0, execution bypasses the whole if block.\n+        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        if (automatic_pruning) {\n+            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+        }\n+    }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n@@ -1195,14 +1215,6 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n-    if (fPruneMode)\n-    {\n-        CBlockIndex *block = chainActive.Tip();\n-        while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA))\n-            block = block->pprev;\n-\n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n-    }\n     obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "e098de5d3daef8e680519b878ec35910ac7d1622",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a93270c55876cc88e1a3e2921e582acc6db318e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a93270c55876cc88e1a3e2921e582acc6db318e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a93270c55876cc88e1a3e2921e582acc6db318e",
        "patch": "@@ -3233,8 +3233,10 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n  */\n \n /* Calculate the amount of disk space the block & undo files currently use */\n-static uint64_t CalculateCurrentUsage()\n+uint64_t CalculateCurrentUsage()\n {\n+    LOCK(cs_LastBlockFile);\n+\n     uint64_t retval = 0;\n     for (const CBlockFileInfo &file : vinfoBlockFile) {\n         retval += file.nSize + file.nUndoSize;\n@@ -3245,6 +3247,8 @@ static uint64_t CalculateCurrentUsage()\n /* Prune a block file (modify associated database entries)*/\n void PruneOneBlockFile(const int fileNumber)\n {\n+    LOCK(cs_LastBlockFile);\n+\n     for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindex = it->second;\n         if (pindex->nFile == fileNumber) {\n@@ -4247,6 +4251,8 @@ std::string CBlockFileInfo::ToString() const\n \n CBlockFileInfo* GetBlockFileInfo(size_t n)\n {\n+    LOCK(cs_LastBlockFile);\n+\n     return &vinfoBlockFile.at(n);\n }\n "
      },
      {
        "sha": "6bc52753c5d1e878e3a74b18501b11a3ce09f306",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a93270c55876cc88e1a3e2921e582acc6db318e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a93270c55876cc88e1a3e2921e582acc6db318e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3a93270c55876cc88e1a3e2921e582acc6db318e",
        "patch": "@@ -280,6 +280,9 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n \n+/** Calculate the amount of disk space the block & undo files currently use */\n+uint64_t CalculateCurrentUsage();\n+\n /**\n  *  Mark one block file as pruned.\n  */"
      },
      {
        "sha": "de222584b8083488a1fb6b39b1c5b98953c03ca7",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a93270c55876cc88e1a3e2921e582acc6db318e/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a93270c55876cc88e1a3e2921e582acc6db318e/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=3a93270c55876cc88e1a3e2921e582acc6db318e",
        "patch": "@@ -24,6 +24,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n     assert_raises,\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n@@ -58,21 +60,43 @@ def _test_getblockchaininfo(self):\n             'headers',\n             'mediantime',\n             'pruned',\n+            'size_on_disk',\n             'softforks',\n             'verificationprogress',\n             'warnings',\n         ]\n         res = self.nodes[0].getblockchaininfo()\n-        # result should have pruneheight and default keys if pruning is enabled\n-        assert_equal(sorted(res.keys()), sorted(['pruneheight'] + keys))\n+\n+        # result should have these additional pruning keys if manual pruning is enabled\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning'] + keys))\n+\n+        # size_on_disk should be > 0\n+        assert_greater_than(res['size_on_disk'], 0)\n+\n         # pruneheight should be greater or equal to 0\n-        assert res['pruneheight'] >= 0\n+        assert_greater_than_or_equal(res['pruneheight'], 0)\n+\n+        # check other pruning fields given that prune=1\n+        assert res['pruned']\n+        assert not res['automatic_pruning']\n \n         self.restart_node(0, ['-stopatheight=207'])\n         res = self.nodes[0].getblockchaininfo()\n         # should have exact keys\n         assert_equal(sorted(res.keys()), keys)\n \n+        self.restart_node(0, ['-stopatheight=207', '-prune=550'])\n+        res = self.nodes[0].getblockchaininfo()\n+        # result should have these additional pruning keys if prune=550\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning', 'prune_target_size'] + keys))\n+\n+        # check related fields\n+        assert res['pruned']\n+        assert_equal(res['pruneheight'], 0)\n+        assert res['automatic_pruning']\n+        assert_equal(res['prune_target_size'], 576716800)\n+        assert_greater_than(res['size_on_disk'], 0)\n+\n     def _test_getchaintxstats(self):\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx"
      }
    ]
  },
  {
    "sha": "92eadc395071876d77f3babddc056b4325bdbabc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmVhZGMzOTUwNzE4NzZkNzdmM2JhYmRkYzA1NmI0MzI1YmRiYWJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T17:09:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T17:09:45Z"
      },
      "message": "Merge #11465: rpc: Update named args documentation for importprivkey\n\naa57590d7 Update importprivkey named args documentation (Dusty Williams)\n\nPull request description:\n\n  Addresses issue #11462 by updating the documentation for the importprivkey arguments to the correct names, and updates the functional test importprunedfunds.py to use named arguments when calling importprivkey.\n\nTree-SHA512: 64e14bf89c8c6eec9c37f6ec0c9fc0012fdb035d9ec32cd652110c75abaa922ec5c7523d6ec5098c8a7b42124159b5e330e070974eb79b8b92816f8d61074523",
      "tree": {
        "sha": "3bdf8aee29960b7e0c3a5fdc01c1163eb8b29fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bdf8aee29960b7e0c3a5fdc01c1163eb8b29fd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92eadc395071876d77f3babddc056b4325bdbabc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ261ZAAoJENLqSFDnUoslAAoP/2BAZaCLpMleVVAqE+ZgPRRj\nIqJbHCzocNNF6ACZ6gRJOEgGdFj1jsIZiQOk8kz/qWWSJzEn8kY9ZBH2p5vF0nkN\nQiltJ5JXwHnCOyHbpeI3QIUxu3gOdZJQbV0ab7GOMASYy0+BnpXZB/JN0Mg6gAtn\nsOI9SFsPDPeNVyzj6WvCMmogRMt7M2Qlm5/9Vs669rxqWq/2h3wWgaXR/L1rUpkH\nkMWTsrGbkxH4wBj5J+VMfG8F/Lx+DUSqY43qfLBzghiSJyLo+5Upwvj4rfSZu6GN\nL/L/JyhLYGWhWGCtRj4V27G9JN8GnJMgcBwCVAv5c+/6E3titvxIOmlSjfWnqazl\n+O1xlRZNkc3Ci8hnRkEXglosONj2HcCcVi6YQJu5+HvM0hKjz/vnksreO2lV+I9J\nFQTaa7Hq5+npqB3MgOarK4Oxl9Hr/Jf4210PJL00GAWBWp2s+JMP0CMM180kPbqi\ntL1OSc2TOl766tKQrFp88g1OITZiad14RxmDiUlHI4zXx6KuStYIIv3jUXnX8HSs\nMljwPKbg3SVfz/3t+az+ctKyMG1zSSe8sVqsbDJvReOMwbTVkuU71pGzGA72AaJv\nZCuu+xHYoODD2/3kSZOLAghO2CCt+0qkROXwpQD+6+uvNoOXbhmNpv59Kkez0m1w\nJlcimeDzXGNrF9uRFe6I\n=QTOn\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bdf8aee29960b7e0c3a5fdc01c1163eb8b29fd5\nparent 3a93270c55876cc88e1a3e2921e582acc6db318e\nparent aa57590d7c5eab1df5443e8ac9ed53ad0db46c02\nauthor MarcoFalke <falke.marco@gmail.com> 1507568978 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1507568985 +0200\n\nMerge #11465: rpc: Update named args documentation for importprivkey\n\naa57590d7 Update importprivkey named args documentation (Dusty Williams)\n\nPull request description:\n\n  Addresses issue #11462 by updating the documentation for the importprivkey arguments to the correct names, and updates the functional test importprunedfunds.py to use named arguments when calling importprivkey.\n\nTree-SHA512: 64e14bf89c8c6eec9c37f6ec0c9fc0012fdb035d9ec32cd652110c75abaa922ec5c7523d6ec5098c8a7b42124159b5e330e070974eb79b8b92816f8d61074523\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92eadc395071876d77f3babddc056b4325bdbabc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92eadc395071876d77f3babddc056b4325bdbabc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92eadc395071876d77f3babddc056b4325bdbabc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a93270c55876cc88e1a3e2921e582acc6db318e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a93270c55876cc88e1a3e2921e582acc6db318e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a93270c55876cc88e1a3e2921e582acc6db318e"
      },
      {
        "sha": "aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa57590d7c5eab1df5443e8ac9ed53ad0db46c02"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d6ea2a9db7561cd2497aba8b7024f7822da6b33f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92eadc395071876d77f3babddc056b4325bdbabc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92eadc395071876d77f3babddc056b4325bdbabc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=92eadc395071876d77f3babddc056b4325bdbabc",
        "patch": "@@ -80,10 +80,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n+            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\""
      },
      {
        "sha": "9619d679528a5acc915eb0a96ad9d83a0e16c4d5",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92eadc395071876d77f3babddc056b4325bdbabc/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92eadc395071876d77f3babddc056b4325bdbabc/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=92eadc395071876d77f3babddc056b4325bdbabc",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n-        self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n+        self.nodes[1].importprivkey(privkey=address3_privkey, label=\"add3\", rescan=False)\n         self.nodes[1].importprunedfunds(rawtxn3, proof3)\n         balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))"
      }
    ]
  },
  {
    "sha": "f902e40c76d25eb9d32994f4844db6059f0f55ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTAyZTQwYzc2ZDI1ZWI5ZDMyOTk0ZjQ4NDRkYjYwNTlmMGY1NWFi",
    "commit": {
      "author": {
        "name": "Johannes Kanig",
        "email": "kanigsson@users.noreply.github.com",
        "date": "2017-10-09T17:14:47Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-10-09T17:14:47Z"
      },
      "message": "fix typo in comment of chain.cpp",
      "tree": {
        "sha": "f2697e3d00b16c81bddebe79d71b8abbd2429b8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2697e3d00b16c81bddebe79d71b8abbd2429b8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f902e40c76d25eb9d32994f4844db6059f0f55ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f902e40c76d25eb9d32994f4844db6059f0f55ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f902e40c76d25eb9d32994f4844db6059f0f55ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f902e40c76d25eb9d32994f4844db6059f0f55ab/comments",
    "author": {
      "login": "kanigsson",
      "id": 169032,
      "node_id": "MDQ6VXNlcjE2OTAzMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/169032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kanigsson",
      "html_url": "https://github.com/kanigsson",
      "followers_url": "https://api.github.com/users/kanigsson/followers",
      "following_url": "https://api.github.com/users/kanigsson/following{/other_user}",
      "gists_url": "https://api.github.com/users/kanigsson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kanigsson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kanigsson/subscriptions",
      "organizations_url": "https://api.github.com/users/kanigsson/orgs",
      "repos_url": "https://api.github.com/users/kanigsson/repos",
      "events_url": "https://api.github.com/users/kanigsson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kanigsson/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a93270c55876cc88e1a3e2921e582acc6db318e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a93270c55876cc88e1a3e2921e582acc6db318e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a93270c55876cc88e1a3e2921e582acc6db318e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5e3dd9b31b831b08108a8d9b601622e3859c6cf1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f902e40c76d25eb9d32994f4844db6059f0f55ab/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f902e40c76d25eb9d32994f4844db6059f0f55ab/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=f902e40c76d25eb9d32994f4844db6059f0f55ab",
        "patch": "@@ -128,7 +128,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n     // as it's too large for an arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n-    // or ~bnTarget / (nTarget+1) + 1.\n+    // or ~bnTarget / (bnTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n "
      }
    ]
  },
  {
    "sha": "c63364610f4a041df1c1bd81d01b1f6856160749",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjMzNjQ2MTBmNGEwNDFkZjFjMWJkODFkMDFiMWY2ODU2MTYwNzQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T18:59:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T19:00:04Z"
      },
      "message": "Merge #10853: [tests] Fix RPC failure testing (again)\n\n47ba8cf71 scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error (John Newbery)\n677d893ff [tests] do not allow assert_raises_message to be called with JSONRPCException (John Newbery)\n5864e9c16 [tests] remove direct testing on JSONRPCException from individual test cases (John Newbery)\n\nPull request description:\n\n  I did this a few months ago (here: #9707), but a few new examples have crept back in.\n\n  When testing RPC failures, the test case should always assert the error value and message, to ensure that the failure was for the correct reason. Not doing that can hide bugs in the test code and mean that the test is not testing the correct behaviour.\n\n  RPC failure testing should use the utility function `assert_raises_jsonrpc()` (renamed in the final commit of this PR to `assert_raises_rpc_error()`.\n\n  This PR does the following:\n  - changes all remaining instances of tests directly testing on `JSONRPCException` to calls to `assert_raises_jsonrpc()`\n  - prevents `assert_raises_message()` from being called with `JSONRPCException`\n  - scripted-diff changes `assert_raises_jsonrpc()` to `assert_raises_rpc_error()`\n\nTree-SHA512: 2cc5e320704ec623a6e5a27d3c2c81cea86b502e29896f03bb5bf92cc36725132c1144410aecdf49e90d4577d512ee467d50d8184e9d5c5d0870bfc931316a5a",
      "tree": {
        "sha": "1e094883830bb7d986d9929f449a7801bdfc5753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e094883830bb7d986d9929f449a7801bdfc5753"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c63364610f4a041df1c1bd81d01b1f6856160749",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ28c0AAoJENLqSFDnUoslT4YP/RTwxxG2cPCOfu3tw6EOCl3J\nnyS2/6n9KbFQzm09JqFxwJEFQWmViqj6DeFMZeVnzeGB/ixU9skecOAVeKZxVRqC\nsRfwMPwWchU7LAQ2AZiHxgybeADKUc4LsZQI2t1+szYx2g/BikQGm/E4QxoQ8WzM\nyd5N7d39ljyJj9tcAlHc0qZjIDogt3e8f4Zf5WMuXJ3+4M2qTulu9p8nDLe8DoVg\nGKwPM/FvkoRMvH3cc0ikHTsanyRYl/VnHhH8IV4eokBBGMpX4wlMlBUmoTBS4Zyo\n/lWwMLDRCYC5X8Qry4W5lexPgTn4XCVKSRU+E4LYYPsM6Wu0UlPjdeM6zHR580B5\nygFlluvymTyfXsGa3UX6RqgABTat2SQnO6VzhX1sfiibQB07UIXz/Pqa8wl0jMzy\nH9J/d0WuoZnXdhtlz6X5HLydoltmq9QR3a9rOSHcdBdoH08gOL49m3HBnmNK8P/8\nONMGQa7orZWsaatm1hTAMP4WYsvKXI8IFZ1v9IaSpllf00Fmlf7+QYVAkAwqFly5\ntsHMIMbCzfVNTJpv4xnv3JHEoIkOiM2Uy9wauzVB2W//02udVsBdUKtnH7bkhM2j\nfzX9a4VD1mr+CHxIS4jnzpI+6NRnDoxAYd+pSrqsdyg+rjTV41Z+ymGAcO/sJmEa\n5qnXFlQvaJIoyHO5IWaV\n=WA1M\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e094883830bb7d986d9929f449a7801bdfc5753\nparent 92eadc395071876d77f3babddc056b4325bdbabc\nparent 47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36\nauthor MarcoFalke <falke.marco@gmail.com> 1507575599 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1507575604 +0200\n\nMerge #10853: [tests] Fix RPC failure testing (again)\n\n47ba8cf71 scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error (John Newbery)\n677d893ff [tests] do not allow assert_raises_message to be called with JSONRPCException (John Newbery)\n5864e9c16 [tests] remove direct testing on JSONRPCException from individual test cases (John Newbery)\n\nPull request description:\n\n  I did this a few months ago (here: #9707), but a few new examples have crept back in.\n\n  When testing RPC failures, the test case should always assert the error value and message, to ensure that the failure was for the correct reason. Not doing that can hide bugs in the test code and mean that the test is not testing the correct behaviour.\n\n  RPC failure testing should use the utility function `assert_raises_jsonrpc()` (renamed in the final commit of this PR to `assert_raises_rpc_error()`.\n\n  This PR does the following:\n  - changes all remaining instances of tests directly testing on `JSONRPCException` to calls to `assert_raises_jsonrpc()`\n  - prevents `assert_raises_message()` from being called with `JSONRPCException`\n  - scripted-diff changes `assert_raises_jsonrpc()` to `assert_raises_rpc_error()`\n\nTree-SHA512: 2cc5e320704ec623a6e5a27d3c2c81cea86b502e29896f03bb5bf92cc36725132c1144410aecdf49e90d4577d512ee467d50d8184e9d5c5d0870bfc931316a5a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c63364610f4a041df1c1bd81d01b1f6856160749",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c63364610f4a041df1c1bd81d01b1f6856160749",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c63364610f4a041df1c1bd81d01b1f6856160749/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92eadc395071876d77f3babddc056b4325bdbabc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92eadc395071876d77f3babddc056b4325bdbabc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92eadc395071876d77f3babddc056b4325bdbabc"
      },
      {
        "sha": "47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 139,
      "deletions": 137
    },
    "files": [
      {
        "sha": "5f8f21701f934fa558810b6a399ef8e022b92bde",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -83,7 +83,7 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n         tx2.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n@@ -180,7 +180,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n             else:\n                 # This raw transaction should be accepted\n                 self.nodes[0].sendrawtransaction(rawtx)\n@@ -227,7 +227,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n                 node.sendrawtransaction(ToHex(tx))\n@@ -280,7 +280,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n         raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n         # Test mempool-BIP68 consistency after reorg\n         #\n@@ -353,7 +353,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n         tx3.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n \n         # make a block that violates bip68; ensure that the tip updates\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      },
      {
        "sha": "4576cb036a7e2e42a4c8018c968be8b1cc8c1d9b",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -27,7 +27,7 @@\n     assert_greater_than,\n     assert_greater_than_or_equal,\n     assert_raises,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n )\n@@ -125,7 +125,7 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_jsonrpc(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n@@ -171,7 +171,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_jsonrpc(-5, \"Block not found\",\n+        assert_raises_rpc_error(-5, \"Block not found\",\n                               node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()"
      },
      {
        "sha": "008e83d5b2a7eda9f52f22d24f5a20db5723ac6a",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -133,7 +133,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n-    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -153,7 +153,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -164,7 +164,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -173,7 +173,7 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -205,15 +205,15 @@ def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -264,7 +264,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.walletlock()\n-    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n "
      },
      {
        "sha": "19fd24edb925d313bd3213dbd8ba4c3ca5aceb5a",
        "filename": "test/functional/deprecated_rpc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/deprecated_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/deprecated_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/deprecated_rpc.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_jsonrpc\n+from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n \n         self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n         self.nodes[1].estimatefee(1)"
      },
      {
        "sha": "c75ef9b9f12d562a3667ec246e601045ce9bba97",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n \n     def run_test (self):\n         # Make sure wallet is really disabled\n-        assert_raises_jsonrpc(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n@@ -28,7 +28,7 @@ def run_test (self):\n         # Checking mining to an address without a wallet. Generating to a valid address should succeed\n         # but generating to an invalid address will fail.\n         self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        assert_raises_jsonrpc(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n \n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "59655d37fbe21878e13b76f5952c533a1512197a",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     wait_until,\n )\n@@ -34,14 +34,14 @@ def run_test(self):\n \n         self.log.info(\"setban: fail to ban an already banned subnet\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_rpc_error(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n \n         self.log.info(\"setban: fail to ban an invalid subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_raises_rpc_error(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n \n         self.log.info(\"setban remove: fail to unban a non-banned subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_raises_rpc_error(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n         self.log.info(\"setban remove: successfully unban subnet\")\n@@ -81,10 +81,10 @@ def run_test(self):\n         self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         node1 = self.nodes[0].getpeerinfo()[0]['addr']\n-        assert_raises_jsonrpc(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n+        assert_raises_rpc_error(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n \n         self.log.info(\"disconnectnode: fail to disconnect when calling with junk address\")\n-        assert_raises_jsonrpc(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n+        assert_raises_rpc_error(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n \n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']"
      },
      {
        "sha": "d446f56d0e4b347d2d4aeeb98443c1a2752b9636",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -179,7 +179,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n+        assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -192,7 +192,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n+        assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -206,7 +206,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n+        assert_raises_rpc_error(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -314,7 +314,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -469,14 +469,14 @@ def run_test(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].keypoolrefill(8) #need to refill the keypool to get an internal change address\n         self.nodes[1].walletlock()\n \n-        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n+        assert_raises_rpc_error(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "6807fa66964dbfac610f74e683be4ef9b994c830",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -19,9 +19,8 @@\n happened previously.\n \"\"\"\n \n-from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_rpc_error, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -35,21 +34,26 @@\n class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n+    def try_rpc(self, func, *args, **kwargs):\n+        if self.expect_disabled:\n+            assert_raises_rpc_error(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+        else:\n+            return func(*args, **kwargs)\n+\n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n-            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n-                                 'code': -4} if self.expect_disabled else None)\n+\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -179,13 +183,5 @@ def run_test(self):\n             else:\n                 variant.check()\n \n-\n-def try_rpc(func, *args, **kwargs):\n-    try:\n-        return func(*args, **kwargs), None\n-    except JSONRPCException as e:\n-        return None, e.error\n-\n-\n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      },
      {
        "sha": "c1a42870ece8434fab5e3ed5d1beef836b87daae",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -423,11 +423,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+        assert_raises_rpc_error(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_rpc_error(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "068052409af99a363488897d6ca7c8843d8a02e6",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n+        assert_raises_rpc_error(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -97,7 +97,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n+        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "f2701c36bdcacbfd45ff30d27fd839131b1e228d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n@@ -47,7 +47,7 @@ def run_test(self):\n         nodes[0].getrawchangeaddress()\n         addr = set()\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n         addr.add(nodes[0].getnewaddress())\n@@ -58,7 +58,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         assert(len(addr) == 6)\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n         nodes[0].walletpassphrase('test', 1)\n@@ -72,7 +72,7 @@ def run_test(self):\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].generate, 1)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].generate, 1)\n \n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)"
      },
      {
        "sha": "b845c756818e4216b22f30bd4c378a29ca528169",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -167,7 +167,7 @@ def run_test(self):\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "92f66be2ff896fdf15abca822e166c3dd695feb1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         mempooldotnew1 = mempooldat1 + '.new'\n         with os.fdopen(os.open(mempooldotnew1, os.O_CREAT, 0o000), 'w'):\n             pass\n-        assert_raises_jsonrpc(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n+        assert_raises_rpc_error(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n         os.remove(mempooldotnew1)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "2803371f5b603892fc549e15284f01b98ec73883",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -50,14 +50,14 @@ def run_test(self):\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n         timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n-        assert_raises_jsonrpc(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n         # Time-locked transaction is still too immature to spend\n-        assert_raises_jsonrpc(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 49.98)"
      },
      {
        "sha": "6e8a635a765413fd3ab3ba0e38e739a6836039c9",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n \n         # coinbase at height 102 should be too immature to spend\n-        assert_raises_jsonrpc(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n+        assert_raises_rpc_error(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n \n         # mempool should have just spend_101:\n         assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])"
      },
      {
        "sha": "b3989a4c54885ab9d9763cded9c263ef4dd06f75",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -38,7 +38,7 @@ def run_test(self):\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n@@ -63,11 +63,11 @@ def run_test(self):\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n         # We can't find the block from a fully-spent tx\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_jsonrpc(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n@@ -76,7 +76,7 @@ def run_test(self):\n         # We can always get a proof if we have a -txindex\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n-        assert_raises_jsonrpc(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "9aee06864efce0bbe04f0baa45e3cfd5cc48769d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.blocktools import create_coinbase\n from test_framework.mininode import CBlock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -68,7 +68,7 @@ def run_test(self):\n         assert_template(node, block, None)\n \n         self.log.info(\"submitblock: Test block decode failure\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -77,10 +77,10 @@ def run_test(self):\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n         self.log.info(\"submitblock: Test invalid coinbase transaction\")\n-        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -107,7 +107,7 @@ def run_test(self):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n         bad_block_sn[TX_COUNT_OFFSET] += 1\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)"
      },
      {
        "sha": "6adcc1fd88289f6980c078507269f5a89e98c15e",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -9,7 +9,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -43,10 +43,10 @@ def run_test(self):\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n+        assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n-        assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n \n         # check w1 wallet balance\n         w1_info = w1.getwalletinfo()"
      },
      {
        "sha": "16e4f6adb41b48e2f2fd366c6ce61a1422a40221",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -12,7 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n )\n@@ -84,7 +84,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n         # check that a non-existent node returns an error\n-        assert_raises_jsonrpc(-24, \"Node has not been added\",\n+        assert_raises_rpc_error(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n     def _test_getpeerinfo(self):"
      },
      {
        "sha": "91c4550653826253b949775bdd04807cffa532a1",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -80,14 +80,14 @@ def run_test(self):\n         test4tx = self.create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")"
      },
      {
        "sha": "5b6429b410194d87a5c8ae76cf695d442cc3fad9",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -171,7 +171,7 @@ def run_test(self):\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n-        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip"
      },
      {
        "sha": "bb56db9b40f31758a96bc1605787cc019ec7aae2",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "0101f6118542f845fb8faa890cbbd3cef473668a",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -185,7 +185,7 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        assert_raises_rpc_error(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n         self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n@@ -232,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         self.start_node(node_number)\n         node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_rpc_error(-1, \"not in prune mode\", node.pruneblockchain, 500)\n \n         # now re-start in manual pruning mode\n         self.stop_node(node_number)\n@@ -265,14 +265,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_rpc_error(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)"
      },
      {
        "sha": "2777cb96937e77eef56c9cac229a648a731a1daf",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n         # This will raise an exception since there are missing inputs\n-        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n+        assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -188,13 +188,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n@@ -205,12 +205,12 @@ def run_test(self):\n         # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "269d57775c8af7526af0ca069067a35fa7ad4da9",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -125,17 +125,17 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n         # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -178,7 +178,7 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n@@ -239,7 +239,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n@@ -267,7 +267,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -291,7 +291,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -314,7 +314,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n@@ -331,7 +331,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n@@ -350,7 +350,7 @@ def test_new_unconfirmed_inputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n@@ -396,7 +396,7 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n@@ -423,7 +423,7 @@ def test_opt_in(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n@@ -441,7 +441,7 @@ def test_opt_in(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now create a new transaction that spends from tx1a and tx2a\n         # opt-in on one of the inputs\n@@ -493,7 +493,7 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n@@ -520,7 +520,7 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))"
      },
      {
        "sha": "d959bb4c3836466fa11e50fabc9da6f3d1cfc4d9",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test resendwallettransactions RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_jsonrpc(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)"
      },
      {
        "sha": "0e8c3fa209ee82d73336ce2abda17c59f71dd55d",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Check that with invalid rpcallowip, we are denied\n         self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n-        assert_raises_jsonrpc(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n+        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n \n if __name__ == '__main__':\n     RPCBindTest().main()"
      },
      {
        "sha": "c47212bddb14bbc33af32506358fb5bf72ecbe0c",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class NamedArgumentTest(BitcoinTestFramework):\n@@ -19,7 +19,7 @@ def run_test(self):\n         h = node.help(command='getblockchaininfo')\n         assert(h.startswith('getblockchaininfo\\n'))\n \n-        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n+        assert_raises_rpc_error(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "6ecade7cb6a4c3e3db47ead6b35f72c37b995a8a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -99,11 +99,11 @@ def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n-        assert_raises_jsonrpc(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        assert_raises_rpc_error(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n \n     def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n-        assert_raises_jsonrpc(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n+        assert_raises_rpc_error(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n         sync_blocks(self.nodes)\n \n     def run_test(self):\n@@ -452,11 +452,7 @@ def run_test(self):\n         for i in importlist:\n             # import all generated addresses. The wallet already has the private keys for some of these, so catch JSON RPC\n             # exceptions and continue.\n-            try:\n-                self.nodes[0].importaddress(i,\"\",False,True)\n-            except JSONRPCException as exp:\n-                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n-                assert_equal(exp.error[\"code\"], -4)\n+            try_rpc(-4, \"The wallet already contains the private key for this address or script\", self.nodes[0].importaddress, i, \"\", False, True)\n \n         self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n         self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey\n@@ -469,7 +465,7 @@ def run_test(self):\n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that no witness address should be returned by unsolvable addresses\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address:\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # addwitnessaddress should return a witness addresses even if keys are not in the wallet\n         self.nodes[0].addwitnessaddress(multisig_without_privkey_address)\n@@ -552,7 +548,7 @@ def run_test(self):\n         # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress:\n             # This will raise an exception\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n         v = self.nodes[0].validateaddress(compressed_solvable_address[1])"
      },
      {
        "sha": "9a45d53cb85640e41c0542270148427294a03d4c",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "102c903018fedf239bae20be22451349539cf701",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -51,6 +51,8 @@ def assert_raises(exc, fun, *args, **kwds):\n def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n+    except JSONRPCException:\n+        raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n@@ -83,7 +85,7 @@ def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n@@ -99,6 +101,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function.\n     \"\"\"\n+    assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\n+\n+def try_rpc(code, message, fun, *args, **kwds):\n+    \"\"\"Tries to run an rpc command.\n+\n+    Test against error code and message if the rpc fails.\n+    Returns whether a JSONRPCException was raised.\"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n@@ -107,10 +116,11 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+        return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n-        raise AssertionError(\"No exception raised\")\n+        return False\n \n def assert_is_hex_string(string):\n     try:"
      },
      {
        "sha": "47de8777a655803bd89e4d316cb750ebe98aa839",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n+from test_framework.util import (assert_equal, assert_raises_rpc_error)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -106,7 +106,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) \n \n         # Overwriting should fail\n-        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      },
      {
        "sha": "db62e1e30f489b18f573b08a135ccc5d7d321f04",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -32,28 +32,28 @@ def run_test(self):\n         self.start_node(0)\n \n         # Test that the wallet is encrypted\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n \n         # Check that the timeout is right\n         time.sleep(2)\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test wrong passphrase\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n         self.nodes[0].walletlock()\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n "
      },
      {
        "sha": "9d8ae503549bb60aec7f9a2ab07fddc281fd02ba",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n         self.nodes[2].lockunspent(False, [unspent_0])\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -286,10 +286,10 @@ def run_test(self):\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         # This will raise an exception because the amount type is wrong\n-        assert_raises_jsonrpc(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n-        assert_raises_jsonrpc(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n+        assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n@@ -422,7 +422,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_jsonrpc(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))"
      },
      {
        "sha": "8cd622dc8ec3b7996140f2115f904a89e3a6639e",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63364610f4a041df1c1bd81d01b1f6856160749/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=c63364610f4a041df1c1bd81d01b1f6856160749",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     wait_until,\n )\n \n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "e022463a4b238750476430d08b45bc9171791e6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDIyNDYzYTRiMjM4NzUwNDc2NDMwZDA4YjQ1YmM5MTcxNzkxZTZm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-09T19:47:15Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-09T19:47:23Z"
      },
      "message": "Merge #11460: [depends] mac_alias 2.0.6, ds_store 1.1.2\n\nf617d1b06 [depends] native_ds_store 1.1.2 (fanquake)\n46b752ab5 [depends] native_mac_alias 2.0.6 (fanquake)\n\nPull request description:\n\n  mac_alias and ds_store have moved from Bitbucket to GitHub.\n  See https://github.com/al45tair/mac_alias and https://github.com/al45tair/ds_store.\n\n  mac_alias has been updated to be compatible with Python 3? ~~~so we should be able to drop our patch.~~~ I've dropped some of the patch for now.\n\n  Quickly tested on macOS, because depends building is broken with latest the Xcode see #11461.\n  Related #8134.\n\nTree-SHA512: d0017883f86b29bc4ab03bade5aaad9959e4343cd66596805fae48a1804e4bd150c77652f08e3e6cfafb3193f7c0183686f1f60c83f3a4204d40f76041c13ed2",
      "tree": {
        "sha": "e66fbf87f45854ef611f4113de73f677b5a26db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e66fbf87f45854ef611f4113de73f677b5a26db0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e022463a4b238750476430d08b45bc9171791e6f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnb0ksACgkQHrd2uwPH\nki0GGxAAijZVD2hXMWdlkrXgbHkNyC1fr+lXcbR4VqKQGH+vzYKeoo47v1QdaZBI\nMFVxL6FRE0yYJK5MDsRpqUouAKqbC7wct0OOi+aSQYlQNG83yC4PLoITK0hvoMXL\nvf6qMszHrISyt/+RV3PqGi8kP9ozo8To4IPbFXqJvRbJCWN5ecEQ/FarONndnjgM\nW6jXa42TwpbgWks7KqxgN4dFH2nt5rXr6sgworlD9c4IdBjW5dL52C14hSczSKtj\nktb83cj0L9U+TZoh+EOu9RJQPvdUfTqTy2nahrt0hH2jOU+6gcZuAVgrb7sAOgss\nJe/NDMQ7iqrDm3pC/0/F4uQ9/wFdffM5O9LxuTtDOkf0ZcBBdtXVrtTa79ptrLZ8\nuZzYISKKA1ztJaBM5bQZrSE0R1WV75Q0PzUVJp4NocfxDqscL8rHpCq1irA90Fol\nWf5QpBxLKRKPS8yDVP525DTDzdyZqdTggAollzEWwi9kHtkbWyy3pdAFi1nMbKhD\n9tYfl2XAdpIRjllWpko+AGRPg6UKtFFix8Tzuq5DABWROyXBroWeWOWVYmWyhKfu\n2O6yvJYvRhFc02LzUJfQR6aHbaLlSWtNYTDE4FMHGkE0hMbjp7aW8mdymEiPcTYZ\n8Pao7jgnLE/iD9bxReBEffVkJtmxQCpRkcL2QPHx8XPGUdyYE7Q=\n=Jn5c\n-----END PGP SIGNATURE-----",
        "payload": "tree e66fbf87f45854ef611f4113de73f677b5a26db0\nparent c63364610f4a041df1c1bd81d01b1f6856160749\nparent f617d1b06c17c7dd69d84efdfee41d49511ab7ae\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507578435 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507578443 -0700\n\nMerge #11460: [depends] mac_alias 2.0.6, ds_store 1.1.2\n\nf617d1b06 [depends] native_ds_store 1.1.2 (fanquake)\n46b752ab5 [depends] native_mac_alias 2.0.6 (fanquake)\n\nPull request description:\n\n  mac_alias and ds_store have moved from Bitbucket to GitHub.\n  See https://github.com/al45tair/mac_alias and https://github.com/al45tair/ds_store.\n\n  mac_alias has been updated to be compatible with Python 3? ~~~so we should be able to drop our patch.~~~ I've dropped some of the patch for now.\n\n  Quickly tested on macOS, because depends building is broken with latest the Xcode see #11461.\n  Related #8134.\n\nTree-SHA512: d0017883f86b29bc4ab03bade5aaad9959e4343cd66596805fae48a1804e4bd150c77652f08e3e6cfafb3193f7c0183686f1f60c83f3a4204d40f76041c13ed2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e022463a4b238750476430d08b45bc9171791e6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e022463a4b238750476430d08b45bc9171791e6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e022463a4b238750476430d08b45bc9171791e6f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c63364610f4a041df1c1bd81d01b1f6856160749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c63364610f4a041df1c1bd81d01b1f6856160749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c63364610f4a041df1c1bd81d01b1f6856160749"
      },
      {
        "sha": "f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f617d1b06c17c7dd69d84efdfee41d49511ab7ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f617d1b06c17c7dd69d84efdfee41d49511ab7ae"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 15,
      "deletions": 33
    },
    "files": [
      {
        "sha": "116fa25d38197b8add2c601ab7cd7b91c384f268",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e022463a4b238750476430d08b45bc9171791e6f/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e022463a4b238750476430d08b45bc9171791e6f/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=e022463a4b238750476430d08b45bc9171791e6f",
        "patch": "@@ -1,9 +1,8 @@\n package=native_ds_store\n-$(package)_version=1.1.0\n-$(package)_download_path=https://bitbucket.org/al45tair/ds_store/get\n-$(package)_download_file=v$($(package)_version).tar.bz2\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=921596764d71d1bbd3297a90ef6d286f718794d667e4f81d91d14053525d64c1\n+$(package)_version=1.1.2\n+$(package)_download_path=https://github.com/al45tair/ds_store/archive/\n+$(package)_file_name=v$($(package)_version).tar.gz\n+$(package)_sha256_hash=3b3ecb7bf0a5157f5b6010bc3af7c141fb0ad3527084e63336220d22744bc20c\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n $(package)_dependencies=native_biplist\n "
      },
      {
        "sha": "488ec8b59c977346818e8294dc9064fc49e15ec4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e022463a4b238750476430d08b45bc9171791e6f/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e022463a4b238750476430d08b45bc9171791e6f/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=e022463a4b238750476430d08b45bc9171791e6f",
        "patch": "@@ -1,14 +1,13 @@\n package=native_mac_alias\n-$(package)_version=1.1.0\n-$(package)_download_path=https://bitbucket.org/al45tair/mac_alias/get\n-$(package)_download_file=v$($(package)_version).tar.bz2\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=87ad827e66790028361e43fc754f68ed041a9bdb214cca03c853f079b04fb120\n+$(package)_version=2.0.6\n+$(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n+$(package)_file_name=v$($(package)_version).tar.gz\n+$(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n $(package)_patches=python3.patch\n \n define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/python3.patch\n+    patch -p1 < $($(package)_patch_dir)/python3.patch\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "6f2f5534a275d57d3dcb8287823b85e663152904",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "modified",
        "additions": 6,
        "deletions": 22,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e022463a4b238750476430d08b45bc9171791e6f/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e022463a4b238750476430d08b45bc9171791e6f/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=e022463a4b238750476430d08b45bc9171791e6f",
        "patch": "@@ -1,7 +1,7 @@\n diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n---- a/mac_alias/alias.py\t2015-10-19 12:12:48.000000000 +0200\n-+++ b/mac_alias/alias.py\t2016-04-03 12:13:12.037159417 +0200\n-@@ -243,10 +243,10 @@\n+--- a/mac_alias/alias.py\n++++ b/mac_alias/alias.py\n+@@ -258,10 +258,10 @@\n          alias = Alias()\n          alias.appinfo = appinfo\n              \n@@ -14,7 +14,7 @@ diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n                                     folder_cnid, cnid,\n                                     crdate, creator_code, type_code)\n          alias.target.levels_from = levels_from\n-@@ -261,9 +261,9 @@\n+@@ -276,9 +276,9 @@\n                  b.read(1)\n  \n              if tag == TAG_CARBON_FOLDER_NAME:\n@@ -26,7 +26,7 @@ diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n                                                             value)\n              elif tag == TAG_CARBON_PATH:\n                  alias.target.carbon_path = value\n-@@ -298,9 +298,9 @@\n+@@ -313,9 +313,9 @@\n                  alias.target.creation_date \\\n                      = mac_epoch + datetime.timedelta(seconds=seconds)\n              elif tag == TAG_POSIX_PATH:\n@@ -38,23 +38,7 @@ diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n              elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n                  alias.volume.disk_image_alias = Alias.from_bytes(value)\n              elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n-@@ -422,13 +422,13 @@\n-         #       (so doing so is ridiculous, and nothing could rely on it).\n-         b.write(struct.pack(b'>h28pI2shI64pII4s4shhI2s10s',\n-                             self.target.kind,\n--                            carbon_volname, voldate,\n-+                            carbon_volname, int(voldate),\n-                             self.volume.fs_type,\n-                             self.volume.disk_type,\n-                             self.target.folder_cnid,\n-                             carbon_filename,\n-                             self.target.cnid,\n--                            crdate,\n-+                            int(crdate),\n-                             self.target.creator_code,\n-                             self.target.type_code,\n-                             self.target.levels_from,\n-@@ -449,12 +449,12 @@\n+@@ -467,12 +467,12 @@\n  \n          b.write(struct.pack(b'>hhQhhQ',\n                  TAG_HIGH_RES_VOLUME_CREATION_DATE,"
      }
    ]
  },
  {
    "sha": "5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTlkYTM3ZmIzZjRiNTNmNTU2ZTFkNDY1MDliOTRkYzNjNjYxZDc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-10T06:56:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-10T07:00:34Z"
      },
      "message": "Merge #11469: fix typo in comment of chain.cpp\n\nf902e40 fix typo in comment of chain.cpp (Johannes Kanig)\n\nPull request description:\n\nTree-SHA512: 1af049bd75f244febc2c249f7b743b481ed6ce935f1f5265881f57064d69e0f055b9334dae765132348125a5e688f99b07a255de7deacf37ac57d1e6966b5e4b",
      "tree": {
        "sha": "8cdf8055ad878c416f5730066a505f5176ccb335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cdf8055ad878c416f5730066a505f5176ccb335"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3HASAAoJEB5K7WKYbNJdBDAH/00R1f6Pzgqs9Zc4ZBLGzgcO\nrGqtI/IG0IZk09Lru/JWwJmK439LWBjqF6/t57RJfLZFjbGIqUjkCd/eydvhER4V\nIrWv4l5fd+Bcj36AApCdr+fKM9KKkLikRMvUN5Yz1RQpC49EktMox8Z4z7bhvXik\ntH9R3M20/5Q1gqEslVK7pEgh2y6rLoems5oSPB/dAGPu2nn8SDAy+NSFzJf4/fsJ\nUJc6mc3ORCCDwz0f4sosUZtKu+saRLO0AGivPWTKLa+zQbzJ5Vep2+aKOqGO9mbq\nn3rMzorfxwFU2vHbFhV8WswprwQl3MZEQ7ZV5VsUAmTcgIZAGVVX2qUGlslM01A=\n=k09R\n-----END PGP SIGNATURE-----",
        "payload": "tree 8cdf8055ad878c416f5730066a505f5176ccb335\nparent e022463a4b238750476430d08b45bc9171791e6f\nparent f902e40c76d25eb9d32994f4844db6059f0f55ab\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507618568 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507618834 +0200\n\nMerge #11469: fix typo in comment of chain.cpp\n\nf902e40 fix typo in comment of chain.cpp (Johannes Kanig)\n\nPull request description:\n\nTree-SHA512: 1af049bd75f244febc2c249f7b743b481ed6ce935f1f5265881f57064d69e0f055b9334dae765132348125a5e688f99b07a255de7deacf37ac57d1e6966b5e4b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e022463a4b238750476430d08b45bc9171791e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e022463a4b238750476430d08b45bc9171791e6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e022463a4b238750476430d08b45bc9171791e6f"
      },
      {
        "sha": "f902e40c76d25eb9d32994f4844db6059f0f55ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f902e40c76d25eb9d32994f4844db6059f0f55ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f902e40c76d25eb9d32994f4844db6059f0f55ab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5e3dd9b31b831b08108a8d9b601622e3859c6cf1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a9da37fb3f4b53f556e1d46509b94dc3c661d75/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a9da37fb3f4b53f556e1d46509b94dc3c661d75/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "patch": "@@ -128,7 +128,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n     // as it's too large for an arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n-    // or ~bnTarget / (nTarget+1) + 1.\n+    // or ~bnTarget / (bnTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n "
      }
    ]
  },
  {
    "sha": "5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDQ2NWUzOTYyNDlhMGUyY2M2MGIxNjk4NGEyYmRiZTRjODk5M2Mz",
    "commit": {
      "author": {
        "name": "Tomas van der Wansem",
        "email": "tomas@tomasvdw.nl",
        "date": "2017-09-20T22:10:46Z"
      },
      "committer": {
        "name": "Tomas van der Wansem",
        "email": "tomas@tomasvdw.nl",
        "date": "2017-10-10T12:49:47Z"
      },
      "message": "Ensure backupwallet fails when attempting to backup to source file\n\nPrevious behaviour was to destroy the wallet (to zero-length)",
      "tree": {
        "sha": "a30633f6035bf19b5d1ceca21f014a2868c45188",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a30633f6035bf19b5d1ceca21f014a2868c45188"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d465e396249a0e2cc60b16984a2bdbe4c8993c3/comments",
    "author": {
      "login": "tomasvdw",
      "id": 534388,
      "node_id": "MDQ6VXNlcjUzNDM4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/534388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomasvdw",
      "html_url": "https://github.com/tomasvdw",
      "followers_url": "https://api.github.com/users/tomasvdw/followers",
      "following_url": "https://api.github.com/users/tomasvdw/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomasvdw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomasvdw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomasvdw/subscriptions",
      "organizations_url": "https://api.github.com/users/tomasvdw/orgs",
      "repos_url": "https://api.github.com/users/tomasvdw/repos",
      "events_url": "https://api.github.com/users/tomasvdw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomasvdw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tomasvdw",
      "id": 534388,
      "node_id": "MDQ6VXNlcjUzNDM4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/534388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomasvdw",
      "html_url": "https://github.com/tomasvdw",
      "followers_url": "https://api.github.com/users/tomasvdw/followers",
      "following_url": "https://api.github.com/users/tomasvdw/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomasvdw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomasvdw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomasvdw/subscriptions",
      "organizations_url": "https://api.github.com/users/tomasvdw/orgs",
      "repos_url": "https://api.github.com/users/tomasvdw/repos",
      "events_url": "https://api.github.com/users/tomasvdw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomasvdw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a9da37fb3f4b53f556e1d46509b94dc3c661d75"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d49cd82340342b7414789d6aa1466fbc47b4311c",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d465e396249a0e2cc60b16984a2bdbe4c8993c3/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d465e396249a0e2cc60b16984a2bdbe4c8993c3/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
        "patch": "@@ -672,6 +672,11 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                     pathDest /= strFile;\n \n                 try {\n+                    if (fs::equivalent(pathSrc, pathDest)) {\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        return false;\n+                    }\n+\n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n                     return true;"
      },
      {
        "sha": "85a149793e730fcaa072b80ee756d2b964ddf7b2",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d465e396249a0e2cc60b16984a2bdbe4c8993c3/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d465e396249a0e2cc60b16984a2bdbe4c8993c3/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
        "patch": "@@ -190,6 +190,16 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), balance1)\n         assert_equal(self.nodes[2].getbalance(), balance2)\n \n+        # Backup to source wallet file must fail\n+        sourcePaths = [\n+            tmpdir + \"/node0/regtest/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallet.dat\",\n+            tmpdir + \"/node0/regtest/\",\n+            tmpdir + \"/node0/regtest\"]\n+\n+        for sourcePath in sourcePaths:\n+            assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)\n+\n \n if __name__ == '__main__':\n     WalletBackupTest().main()"
      }
    ]
  },
  {
    "sha": "9c72a464f87ad80d16ea6720dfc6a53578b94c92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzcyYTQ2NGY4N2FkODBkMTZlYTY3MjBkZmM2YTUzNTc4Yjk0Yzky",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-04T14:37:33Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-10T22:44:59Z"
      },
      "message": "[tests] Tidy up forknotify.py",
      "tree": {
        "sha": "7c6db1dd4986b249b8a9052bbda05d8a2fe89019",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c6db1dd4986b249b8a9052bbda05d8a2fe89019"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c72a464f87ad80d16ea6720dfc6a53578b94c92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c72a464f87ad80d16ea6720dfc6a53578b94c92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c72a464f87ad80d16ea6720dfc6a53578b94c92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c72a464f87ad80d16ea6720dfc6a53578b94c92/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e022463a4b238750476430d08b45bc9171791e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e022463a4b238750476430d08b45bc9171791e6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e022463a4b238750476430d08b45bc9171791e6f"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 7,
      "deletions": 23
    },
    "files": [
      {
        "sha": "d74b3181dad028ddb76b52317e64dbe38ca441dd",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 7,
        "deletions": 23,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c72a464f87ad80d16ea6720dfc6a53578b94c92/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c72a464f87ad80d16ea6720dfc6a53578b94c92/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=9c72a464f87ad80d16ea6720dfc6a53578b94c92",
        "patch": "@@ -4,56 +4,40 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the -alertnotify option.\"\"\"\n import os\n-import time\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, wait_until\n \n class ForkNotifyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass  # Just open then close to create zero-length file\n-        self.extra_args = [[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"],\n+        self.extra_args = [[\"-alertnotify=echo %%s >> %s\" % self.alert_filename],\n                            [\"-blockversion=211\"]]\n         super().setup_network()\n \n     def run_test(self):\n-        # Mine 51 up-version blocks\n+        # Mine 51 up-version blocks. -alertnotify should trigger on the 51st.\n         self.nodes[1].generate(51)\n         self.sync_all()\n-        # -alertnotify should trigger on the 51'st,\n-        # but mine and sync another to give\n-        # -alertnotify time to write\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n \n         # Give bitcoind 10 seconds to write the alert notification\n-        timeout = 10.0\n-        while timeout > 0:\n-            if os.path.exists(self.alert_filename) and os.path.getsize(self.alert_filename):\n-                break\n-            time.sleep(0.1)\n-            timeout -= 0.1\n-        else:\n-            assert False, \"-alertnotify did not warn of up-version blocks\"\n+        wait_until(lambda: os.path.isfile(self.alert_filename) and os.path.getsize(self.alert_filename), timeout=10)\n \n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n \n         # Mine more up-version blocks, should not get more alerts:\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(2)\n         self.sync_all()\n \n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text2 = f.read()\n \n-        if alert_text != alert_text2:\n-            raise AssertionError(\"-alertnotify excessive warning of up-version blocks\")\n+        self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n+        assert_equal(alert_text, alert_text2)\n \n if __name__ == '__main__':\n     ForkNotifyTest().main()"
      }
    ]
  },
  {
    "sha": "df18d29a02ae2804ae8490ea816fe0e88a971e8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjE4ZDI5YTAyYWUyODA0YWU4NDkwZWE4MTZmZTBlODhhOTcxZThl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-07-31T21:13:27Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-10T22:46:04Z"
      },
      "message": "[tests] Add -blocknotify functional test",
      "tree": {
        "sha": "a0132a35c16e65a03d99d2d71b4ae182ceb5c624",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0132a35c16e65a03d99d2d71b4ae182ceb5c624"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df18d29a02ae2804ae8490ea816fe0e88a971e8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df18d29a02ae2804ae8490ea816fe0e88a971e8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df18d29a02ae2804ae8490ea816fe0e88a971e8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df18d29a02ae2804ae8490ea816fe0e88a971e8e/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c72a464f87ad80d16ea6720dfc6a53578b94c92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c72a464f87ad80d16ea6720dfc6a53578b94c92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c72a464f87ad80d16ea6720dfc6a53578b94c92"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 22,
      "deletions": 7
    },
    "files": [
      {
        "sha": "80a74c00202c9983564df0cf29f2f658e532ddc3",
        "filename": "test/functional/notifications.py",
        "status": "renamed",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df18d29a02ae2804ae8490ea816fe0e88a971e8e/test/functional/notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df18d29a02ae2804ae8490ea816fe0e88a971e8e/test/functional/notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/notifications.py?ref=df18d29a02ae2804ae8490ea816fe0e88a971e8e",
        "patch": "@@ -2,25 +2,40 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test the -alertnotify option.\"\"\"\n+\"\"\"Test the -alertnotify and -blocknotify options.\"\"\"\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until\n \n-class ForkNotifyTest(BitcoinTestFramework):\n+class NotificationsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        self.extra_args = [[\"-alertnotify=echo %%s >> %s\" % self.alert_filename],\n+        self.block_filename = os.path.join(self.options.tmpdir, 'blocks.txt')\n+        self.extra_args = [[\"-blockversion=2\",\n+                            \"-alertnotify=echo %%s >> %s\" % self.alert_filename,\n+                            \"-blocknotify=echo %%s >> %s\" % self.block_filename],\n                            [\"-blockversion=211\"]]\n         super().setup_network()\n \n     def run_test(self):\n-        # Mine 51 up-version blocks. -alertnotify should trigger on the 51st.\n-        self.nodes[1].generate(51)\n+        self.log.info(\"test -blocknotify\")\n+        block_count = 10\n+        blocks = self.nodes[1].generate(block_count)\n+\n+        # wait at most 10 seconds for expected file size before reading the content\n+        wait_until(lambda: os.path.isfile(self.block_filename) and os.stat(self.block_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file content should equal the generated blocks hashes\n+        with open(self.block_filename, 'r') as f:\n+            assert_equal(sorted(blocks), sorted(f.read().splitlines()))\n+\n+        # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n+        self.log.info(\"test -alertnotify\")\n+        self.nodes[1].generate(41)\n         self.sync_all()\n \n         # Give bitcoind 10 seconds to write the alert notification\n@@ -40,4 +55,4 @@ def run_test(self):\n         assert_equal(alert_text, alert_text2)\n \n if __name__ == '__main__':\n-    ForkNotifyTest().main()\n+    NotificationsTest().main()",
        "previous_filename": "test/functional/forknotify.py"
      },
      {
        "sha": "43c3d0aa85778f00e409298ac60933ef64b5c890",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df18d29a02ae2804ae8490ea816fe0e88a971e8e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df18d29a02ae2804ae8490ea816fe0e88a971e8e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=df18d29a02ae2804ae8490ea816fe0e88a971e8e",
        "patch": "@@ -148,7 +148,7 @@\n     'example_test.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n-    'forknotify.py',\n+    'notifications.py',\n     'invalidateblock.py',\n     'p2p-acceptblock.py',\n     'replace-by-fee.py',"
      }
    ]
  },
  {
    "sha": "857b32b4b280f13997cf2fa471802ad6a27075fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTdiMzJiNGIyODBmMTM5OTdjZjJmYTQ3MTgwMmFkNmEyNzA3NWZi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-07-31T21:36:27Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-10T22:46:13Z"
      },
      "message": "[tests] Add -walletnotify functional test",
      "tree": {
        "sha": "a96fa620b8dece1098fb812339a79d81e6549f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a96fa620b8dece1098fb812339a79d81e6549f56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/857b32b4b280f13997cf2fa471802ad6a27075fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/857b32b4b280f13997cf2fa471802ad6a27075fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/857b32b4b280f13997cf2fa471802ad6a27075fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/857b32b4b280f13997cf2fa471802ad6a27075fb/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df18d29a02ae2804ae8490ea816fe0e88a971e8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df18d29a02ae2804ae8490ea816fe0e88a971e8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df18d29a02ae2804ae8490ea816fe0e88a971e8e"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c88972ab91bd975a3c2b2c46f404c7889c6a26bf",
        "filename": "test/functional/notifications.py",
        "status": "modified",
        "additions": 32,
        "deletions": 4,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/857b32b4b280f13997cf2fa471802ad6a27075fb/test/functional/notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/857b32b4b280f13997cf2fa471802ad6a27075fb/test/functional/notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/notifications.py?ref=857b32b4b280f13997cf2fa471802ad6a27075fb",
        "patch": "@@ -2,23 +2,29 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test the -alertnotify and -blocknotify options.\"\"\"\n+\"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\"\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, wait_until\n+from test_framework.util import assert_equal, wait_until, connect_nodes_bi\n \n class NotificationsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.setup_clean_chain = True\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        self.block_filename = os.path.join(self.options.tmpdir, 'blocks.txt')\n+        self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")\n+        self.tx_filename = os.path.join(self.options.tmpdir, \"transactions.txt\")\n+\n+        # -alertnotify and -blocknotify on node0, walletnotify on node1\n         self.extra_args = [[\"-blockversion=2\",\n                             \"-alertnotify=echo %%s >> %s\" % self.alert_filename,\n                             \"-blocknotify=echo %%s >> %s\" % self.block_filename],\n-                           [\"-blockversion=211\"]]\n+                           [\"-blockversion=211\",\n+                            \"-rescan\",\n+                            \"-walletnotify=echo %%s >> %s\" % self.tx_filename]]\n         super().setup_network()\n \n     def run_test(self):\n@@ -33,6 +39,28 @@ def run_test(self):\n         with open(self.block_filename, 'r') as f:\n             assert_equal(sorted(blocks), sorted(f.read().splitlines()))\n \n+        self.log.info(\"test -walletnotify\")\n+        # wait at most 10 seconds for expected file size before reading the content\n+        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file content should equal the generated transaction hashes\n+        txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n+        with open(self.tx_filename, 'r') as f:\n+            assert_equal(sorted(txids_rpc), sorted(f.read().splitlines()))\n+        os.remove(self.tx_filename)\n+\n+        self.log.info(\"test -walletnotify after rescan\")\n+        # restart node to rescan to force wallet notifications\n+        self.restart_node(1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file content should equal the generated transaction hashes\n+        txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n+        with open(self.tx_filename, 'r') as f:\n+            assert_equal(sorted(txids_rpc), sorted(f.read().splitlines()))\n+\n         # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n         self.log.info(\"test -alertnotify\")\n         self.nodes[1].generate(41)"
      }
    ]
  },
  {
    "sha": "cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzllZTgwOWFkMTlhNjNjYTI4NGQyZmJjMzI3YWMxY2JjZWUzMWU0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-04T22:29:34Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-10T22:49:16Z"
      },
      "message": "Improve ZMQ functional test",
      "tree": {
        "sha": "d306c28cb84e76334c05a74672d1d09406e1b005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d306c28cb84e76334c05a74672d1d09406e1b005"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e022463a4b238750476430d08b45bc9171791e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e022463a4b238750476430d08b45bc9171791e6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e022463a4b238750476430d08b45bc9171791e6f"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 70,
      "deletions": 102
    },
    "files": [
      {
        "sha": "165f9192ddd74040c85db1258c5973f36f56ca15",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 70,
        "deletions": 102,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test the ZMQ API.\"\"\"\n+\"\"\"Test the ZMQ notification interface.\"\"\"\n import configparser\n import os\n import struct\n@@ -13,6 +13,25 @@\n                                  hash256,\n                                 )\n \n+class ZMQSubscriber:\n+    def __init__(self, socket, topic):\n+        self.sequence = 0\n+        self.socket = socket\n+        self.topic = topic\n+\n+        import zmq\n+        self.socket.setsockopt(zmq.SUBSCRIBE, self.topic)\n+\n+    def receive(self):\n+        topic, body, seq = self.socket.recv_multipart()\n+        # Topic should match the subscriber topic.\n+        assert_equal(topic, self.topic)\n+        # Sequence should be incremental.\n+        assert_equal(struct.unpack('<I', seq)[-1], self.sequence)\n+        self.sequence += 1\n+        return body\n+\n+\n class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -24,130 +43,79 @@ def setup_nodes(self):\n         except ImportError:\n             raise SkipTest(\"python3-zmq module not available.\")\n \n-        # Check that bitcoin has been built with ZMQ enabled\n+        # Check that bitcoin has been built with ZMQ enabled.\n         config = configparser.ConfigParser()\n         if not self.options.configfile:\n-            self.options.configfile = os.path.dirname(__file__) + \"/../config.ini\"\n+            self.options.configfile = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../config.ini\"))\n         config.read_file(open(self.options.configfile))\n \n         if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n             raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n \n-        self.zmqContext = zmq.Context()\n-        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n-        ip_address = \"tcp://127.0.0.1:28332\"\n-        self.zmqSubSocket.connect(ip_address)\n-        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n-                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n+        # Initialize ZMQ context and socket.\n+        # All messages are received in the same socket which means\n+        # that this test fails if the publishing order changes.\n+        # Note that the publishing order is not defined in the documentation and\n+        # is subject to change.\n+        address = \"tcp://127.0.0.1:28332\"\n+        self.zmq_context = zmq.Context()\n+        socket = self.zmq_context.socket(zmq.SUB)\n+        socket.set(zmq.RCVTIMEO, 60000)\n+        socket.connect(address)\n+\n+        # Subscribe to all available topics.\n+        self.hashblock = ZMQSubscriber(socket, b\"hashblock\")\n+        self.hashtx = ZMQSubscriber(socket, b\"hashtx\")\n+        self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n+        self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n+\n+        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n     def run_test(self):\n         try:\n             self._zmq_test()\n         finally:\n-            # Destroy the zmq context\n-            self.log.debug(\"Destroying zmq context\")\n-            self.zmqContext.destroy(linger=None)\n+            # Destroy the ZMQ context.\n+            self.log.debug(\"Destroying ZMQ context\")\n+            self.zmq_context.destroy(linger=None)\n \n     def _zmq_test(self):\n-        genhashes = self.nodes[0].generate(1)\n+        num_blocks = 5\n+        self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n+        genhashes = self.nodes[0].generate(num_blocks)\n         self.sync_all()\n \n-        self.log.info(\"Wait for tx\")\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"hashtx\")\n-        txhash = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n-\n-        # rawtx\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"rawtx\")\n-        body = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n-\n-        # Check that the rawtx hashes to the hashtx\n-        assert_equal(hash256(body), txhash)\n-\n-        self.log.info(\"Wait for block\")\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"hashblock\")\n-        body = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n-        blkhash = bytes_to_hex_str(body)\n-        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n-\n-        # rawblock\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"rawblock\")\n-        body = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n-\n-        # Check the hash of the rawblock's header matches generate\n-        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n-\n-        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n-        n = 10\n-        genhashes = self.nodes[1].generate(n)\n-        self.sync_all()\n+        for x in range(num_blocks):\n+            # Should receive the coinbase txid.\n+            txid = self.hashtx.receive()\n+\n+            # Should receive the coinbase raw transaction.\n+            hex = self.rawtx.receive()\n+            assert_equal(hash256(hex), txid)\n \n-        zmqHashes = []\n-        zmqRawHashed = []\n-        blockcount = 0\n-        for x in range(n * 4):\n-            msg = self.zmqSubSocket.recv_multipart()\n-            topic = msg[0]\n-            body = msg[1]\n-            if topic == b\"hashblock\":\n-                zmqHashes.append(bytes_to_hex_str(body))\n-                msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount + 1)\n-                blockcount += 1\n-            if topic == b\"rawblock\":\n-                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n-                msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount)\n-\n-        for x in range(n):\n-            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n-            assert_equal(genhashes[x], zmqRawHashed[x])\n+            # Should receive the generated block hash.\n+            hash = bytes_to_hex_str(self.hashblock.receive())\n+            assert_equal(genhashes[x], hash)\n+            # The block should only have the coinbase txid.\n+            assert_equal([bytes_to_hex_str(txid)], self.nodes[1].getblock(hash)[\"tx\"])\n+\n+            # Should receive the generated raw block.\n+            block = self.rawblock.receive()\n+            assert_equal(genhashes[x], bytes_to_hex_str(hash256(block[:80])))\n \n         self.log.info(\"Wait for tx from second node\")\n-        # test tx from a second node\n-        hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n+        payment_txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n-        # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n-        hashZMQ = bytes_to_hex_str(body)\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, blockcount + 1)\n-\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"rawtx\")\n-        body = msg[1]\n-        hashedZMQ = bytes_to_hex_str(hash256(body))\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, blockcount+1)\n-        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n-        assert_equal(hashRPC, hashedZMQ)\n+        # Should receive the broadcasted txid.\n+        txid = self.hashtx.receive()\n+        assert_equal(payment_txid, bytes_to_hex_str(txid))\n+\n+        # Should receive the broadcasted raw transaction.\n+        hex = self.rawtx.receive()\n+        assert_equal(payment_txid, bytes_to_hex_str(hash256(hex)))\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  },
  {
    "sha": "0e3a411351578d8cb372407205b320dcb72279c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTNhNDExMzUxNTc4ZDhjYjM3MjQwNzIwNWIzMjBkY2I3MjI3OWM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T08:42:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T08:45:22Z"
      },
      "message": "Merge #8498: Near-Bugfix: Optimization: Minimize the number of times it is checked that no money...\n\n4e955c5 Near-Bugfix: Reestablish consensus check removed in 8d7849b (Jorge Tim\u00f3n)\n3e8c916 Introduce CheckInputsAndUpdateCoins static wrapper in txmempool.cpp (Jorge Tim\u00f3n)\n832e074 Optimization: Minimize the number of times it is checked that no money is created (Jorge Tim\u00f3n)\n3f0ee3e Proper indentation for CheckTxInputs and other minor fixes (Jorge Tim\u00f3n)\n\nPull request description:\n\n  ...is created by individual transactions to 2 places (but call only once in each):\n\n  - ConnectBlock ( before calculated fees per txs twice )\n  - AcceptToMemoryPoolWorker ( before called CheckTxInputs 4 times and calculated\n     fees per tx one extra time )\n\n  Also call tx.GetValueOut() only once per call of CheckTxInputs (instead of 2)\n\n  For more motivation:\n\n  ~~https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L1493~~\n  https://github.com/jtimon/bitcoin/compare/0.13-consensus-inputs...jtimon:0.13-consensus-inputs-comments\n\n  EDIT: partially replaces #6445\n\n  Near-Bugfix as pointed out in https://github.com/bitcoin/bitcoin/pull/8498#discussion_r124346132\n\nTree-SHA512: c71188e7c7c2425c9170ed7b803896755a92fd22f43b136eedaa6e554106696f0b10271d0ef0d0127c1eaafbc31d12eb19143df4f1b6882feecedf6ef05ea346",
      "tree": {
        "sha": "3f1a95b201d6d6bcdc57a4c0f12d521d5aab5adc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f1a95b201d6d6bcdc57a4c0f12d521d5aab5adc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e3a411351578d8cb372407205b320dcb72279c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3doiAAoJEB5K7WKYbNJdv7EH/ii7IRX1ro3nYi2TsigFEwnn\n53r6Qm8UPOXZ7l4VBtTVuLAFQwSDyHJ5p8Sx5uuQxIkf2LIzC1sKrVqnHRN+fcjT\nlfVHvyX+E/ggj/ujfF74KuNkdbiXXmrOzKwCF4vhV3hTtg4hbI4EZF9gW1Uy/GfK\n1SqtDOudxJKzeDnUWflbBMKlepxgilgoNQVBDbNrcrgmkWq2FrhsU3Xudw542AnN\n55lOWnUjX3S72/pQizRjt5aZopWr81RNKAz2mL25D22J+6uNsAL/+34oZ+kXbBL2\njWpPYNvDVoHT6UP6z4iPZK3auNetB3UXnED1m3fHsFqys5ZT3lWYUXCg53EQP9I=\n=+4yY\n-----END PGP SIGNATURE-----",
        "payload": "tree 3f1a95b201d6d6bcdc57a4c0f12d521d5aab5adc\nparent 5a9da37fb3f4b53f556e1d46509b94dc3c661d75\nparent 4e955c58e13cfe089208f6b23b195d395ad99baa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507711375 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507711522 +0200\n\nMerge #8498: Near-Bugfix: Optimization: Minimize the number of times it is checked that no money...\n\n4e955c5 Near-Bugfix: Reestablish consensus check removed in 8d7849b (Jorge Tim\u00f3n)\n3e8c916 Introduce CheckInputsAndUpdateCoins static wrapper in txmempool.cpp (Jorge Tim\u00f3n)\n832e074 Optimization: Minimize the number of times it is checked that no money is created (Jorge Tim\u00f3n)\n3f0ee3e Proper indentation for CheckTxInputs and other minor fixes (Jorge Tim\u00f3n)\n\nPull request description:\n\n  ...is created by individual transactions to 2 places (but call only once in each):\n\n  - ConnectBlock ( before calculated fees per txs twice )\n  - AcceptToMemoryPoolWorker ( before called CheckTxInputs 4 times and calculated\n     fees per tx one extra time )\n\n  Also call tx.GetValueOut() only once per call of CheckTxInputs (instead of 2)\n\n  For more motivation:\n\n  ~~https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L1493~~\n  https://github.com/jtimon/bitcoin/compare/0.13-consensus-inputs...jtimon:0.13-consensus-inputs-comments\n\n  EDIT: partially replaces #6445\n\n  Near-Bugfix as pointed out in https://github.com/bitcoin/bitcoin/pull/8498#discussion_r124346132\n\nTree-SHA512: c71188e7c7c2425c9170ed7b803896755a92fd22f43b136eedaa6e554106696f0b10271d0ef0d0127c1eaafbc31d12eb19143df4f1b6882feecedf6ef05ea346\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3a411351578d8cb372407205b320dcb72279c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e3a411351578d8cb372407205b320dcb72279c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3a411351578d8cb372407205b320dcb72279c4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a9da37fb3f4b53f556e1d46509b94dc3c661d75"
      },
      {
        "sha": "4e955c58e13cfe089208f6b23b195d395ad99baa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e955c58e13cfe089208f6b23b195d395ad99baa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e955c58e13cfe089208f6b23b195d395ad99baa"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 69,
      "deletions": 62
    },
    "files": [
      {
        "sha": "70aa9d7006c4c42f5fdf3a558a1daf98c1e0e3a3",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e3a411351578d8cb372407205b320dcb72279c4/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e3a411351578d8cb372407205b320dcb72279c4/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=0e3a411351578d8cb372407205b320dcb72279c4",
        "patch": "@@ -13,7 +13,7 @@\n #include \"chain.h\"\n #include \"coins.h\"\n #include \"utilmoneystr.h\"\n- \n+\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     if (tx.nLockTime == 0)\n@@ -205,46 +205,46 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     return true;\n }\n \n-bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)\n {\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const Coin& coin = inputs.AccessCoin(prevout);\n-            assert(!coin.IsSpent());\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coin.IsCoinBase()) {\n-                if (nSpendHeight - coin.nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(false,\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n-                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coin.nHeight));\n-            }\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coin.out.nValue;\n-            if (!MoneyRange(coin.out.nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+    // are the actual inputs available?\n+    if (!inputs.HaveInputs(tx)) {\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\", false,\n+                         strprintf(\"%s: inputs missing/spent\", __func__));\n+    }\n+\n+    CAmount nValueIn = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n+        const COutPoint &prevout = tx.vin[i].prevout;\n+        const Coin& coin = inputs.AccessCoin(prevout);\n+        assert(!coin.IsSpent());\n+\n+        // If prev is coinbase, check that it's matured\n+        if (coin.IsCoinBase() && nSpendHeight - coin.nHeight < COINBASE_MATURITY) {\n+            return state.Invalid(false,\n+                REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coin.nHeight));\n+        }\n \n+        // Check for negative or overflow input values\n+        nValueIn += coin.out.nValue;\n+        if (!MoneyRange(coin.out.nValue) || !MoneyRange(nValueIn)) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n+    }\n+\n+    const CAmount value_out = tx.GetValueOut();\n+    if (nValueIn < value_out) {\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+            strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(value_out)));\n+    }\n+\n+    // Tally transaction fees\n+    const CAmount txfee_aux = nValueIn - value_out;\n+    if (!MoneyRange(txfee_aux)) {\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    }\n \n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n-                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    txfee = txfee_aux;\n     return true;\n }"
      },
      {
        "sha": "288892462d006aa9a4c42db387f0a4ec4a8c191c",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e3a411351578d8cb372407205b320dcb72279c4/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e3a411351578d8cb372407205b320dcb72279c4/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=0e3a411351578d8cb372407205b320dcb72279c4",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_CONSENSUS_TX_VERIFY_H\n #define BITCOIN_CONSENSUS_TX_VERIFY_H\n \n+#include \"amount.h\"\n+\n #include <stdint.h>\n #include <vector>\n \n@@ -22,9 +24,10 @@ namespace Consensus {\n /**\n  * Check whether all inputs of this transaction are valid (no double spends and amounts)\n  * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * @param[out] txfee Set to the transaction fee if successful.\n  * Preconditions: tx.IsCoinBase() is false.\n  */\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee);\n } // namespace Consensus\n \n /** Auxiliary functions for transaction validation (ideally should not be exposed) */"
      },
      {
        "sha": "b0306811cb0aa99a62f2eac1c3fa57a433a1849f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e3a411351578d8cb372407205b320dcb72279c4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e3a411351578d8cb372407205b320dcb72279c4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0e3a411351578d8cb372407205b320dcb72279c4",
        "patch": "@@ -607,6 +607,15 @@ void CTxMemPool::clear()\n     _clear();\n }\n \n+static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& mempoolDuplicate, const int64_t spendheight)\n+{\n+    CValidationState state;\n+    CAmount txfee = 0;\n+    bool fCheckResult = tx.IsCoinBase() || Consensus::CheckTxInputs(tx, state, mempoolDuplicate, spendheight, txfee);\n+    assert(fCheckResult);\n+    UpdateCoins(tx, mempoolDuplicate, 1000000);\n+}\n+\n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n     if (nCheckFrequency == 0)\n@@ -621,7 +630,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n-    const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n+    const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n@@ -700,11 +709,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         if (fDependsWait)\n             waitingOnDependants.push_back(&(*it));\n         else {\n-            CValidationState state;\n-            bool fCheckResult = tx.IsCoinBase() ||\n-                Consensus::CheckTxInputs(tx, state, mempoolDuplicate, nSpendHeight);\n-            assert(fCheckResult);\n-            UpdateCoins(tx, mempoolDuplicate, 1000000);\n+            CheckInputsAndUpdateCoins(tx, mempoolDuplicate, spendheight);\n         }\n     }\n     unsigned int stepsSinceLastRemove = 0;\n@@ -717,10 +722,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            bool fCheckResult = entry->GetTx().IsCoinBase() ||\n-                Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, nSpendHeight);\n-            assert(fCheckResult);\n-            UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n+            CheckInputsAndUpdateCoins(entry->GetTx(), mempoolDuplicate, spendheight);\n             stepsSinceLastRemove = 0;\n         }\n     }"
      },
      {
        "sha": "a073e3d1c0c869584ef35ade86cf91fa0fdc87b7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e3a411351578d8cb372407205b320dcb72279c4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e3a411351578d8cb372407205b320dcb72279c4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0e3a411351578d8cb372407205b320dcb72279c4",
        "patch": "@@ -534,7 +534,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n \n-        CAmount nValueIn = 0;\n         LockPoints lp;\n         {\n         LOCK(pool.cs);\n@@ -565,8 +564,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n \n@@ -577,6 +574,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // CoinsViewCache instead of create its own\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+\n+        } // end LOCK(pool.cs)\n+\n+        CAmount nFees = 0;\n+        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n+            return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n@@ -589,8 +592,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n         // nModifiedFees includes any fee deltas from PrioritiseTransaction\n         CAmount nModifiedFees = nFees;\n         pool.ApplyDelta(hash, nModifiedFees);\n@@ -1247,9 +1248,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n {\n     if (!tx.IsCoinBase())\n     {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n-            return false;\n-\n         if (pvChecks)\n             pvChecks->reserve(tx.vin.size());\n \n@@ -1762,9 +1760,15 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \n         if (!tx.IsCoinBase())\n         {\n-            if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n-                                 REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+            CAmount txfee = 0;\n+            if (!Consensus::CheckTxInputs(tx, state, view, pindex->nHeight, txfee)) {\n+                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+            }\n+            nFees += txfee;\n+            if (!MoneyRange(nFees)) {\n+                return state.DoS(100, error(\"%s: accumulated fee in the block out of range.\", __func__),\n+                                 REJECT_INVALID, \"bad-txns-accumulated-fee-outofrange\");\n+            }\n \n             // Check that transaction is BIP68 final\n             // BIP68 lock checks (as opposed to nLockTime checks) must\n@@ -1792,8 +1796,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         txdata.emplace_back(tx);\n         if (!tx.IsCoinBase())\n         {\n-            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n-\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr))"
      }
    ]
  },
  {
    "sha": "fef65c4f5e5994722265be327433218bece900c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWY2NWM0ZjVlNTk5NDcyMjI2NWJlMzI3NDMzMjE4YmVjZTkwMGM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T08:49:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T08:54:05Z"
      },
      "message": "Merge #11113: [net] Ignore getheaders requests for very old side blocks\n\neff4bd8 [test] P2P functional test for certain fingerprinting protections (Jim Posen)\na2be3b6 [net] Ignore getheaders requests for very old side blocks (Jim Posen)\n\nPull request description:\n\n  Sending a getheaders message with an empty locator and a stop hash is a request for a single header by hash. The node will respond with headers for blocks not in the main chain as well as those in the main chain. To avoid fingerprinting, the node should, however, ignore requests for headers on side branches that are too old. This replicates the logic that currently exists for `getdata` requests for blocks.\n\nTree-SHA512: e04ef61e2b73945be6ec5977b3c5680b6dc3667246f8bfb67afae1ecaba900c0b49b18bbbb74869f7a37ef70b6ed99e78ebe0ea0a1569369fad9e447d720ffc4",
      "tree": {
        "sha": "336cb60d790a9b86c5d23764d8bbf18c498501ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/336cb60d790a9b86c5d23764d8bbf18c498501ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fef65c4f5e5994722265be327433218bece900c5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3dwtAAoJEB5K7WKYbNJdFgAIAMYJwKOX88rOwz+9Nc5Cf66m\nHCJZ/BYigce3lTpMyeoD+kmW7gZgxvP5fHKb5ALZ2+aZJQvU6/06Uo5/o2wbK66G\nTQ1AUGhCynsiFR0BHSY61DlapFU2EaHCyUNRcr5gl/0f7FuSDOHa0uyciXqkufCQ\n30W1XY9JSKMlHB6ZHOLva1Jbe5YE47r65jZjdsBbTa5fj3dRZ2hDob/tAC1w5FsO\nmgB2YMn0RZ8rt24+AyrrNsdiG8EeTjaYNnnYAOrUkH5hs8piVOEED2T3WJ5IRY5c\nxgDLeKrAwMDCaGwEvkSUhKjs2en6RNQgJWIWtSU2/ZeMuWWdZx8TAJl3zJZ8xYQ=\n=4Tpq\n-----END PGP SIGNATURE-----",
        "payload": "tree 336cb60d790a9b86c5d23764d8bbf18c498501ca\nparent 0e3a411351578d8cb372407205b320dcb72279c4\nparent eff4bd8ab257a553ca8898ccd803630b4d44a771\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507711783 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507712045 +0200\n\nMerge #11113: [net] Ignore getheaders requests for very old side blocks\n\neff4bd8 [test] P2P functional test for certain fingerprinting protections (Jim Posen)\na2be3b6 [net] Ignore getheaders requests for very old side blocks (Jim Posen)\n\nPull request description:\n\n  Sending a getheaders message with an empty locator and a stop hash is a request for a single header by hash. The node will respond with headers for blocks not in the main chain as well as those in the main chain. To avoid fingerprinting, the node should, however, ignore requests for headers on side branches that are too old. This replicates the logic that currently exists for `getdata` requests for blocks.\n\nTree-SHA512: e04ef61e2b73945be6ec5977b3c5680b6dc3667246f8bfb67afae1ecaba900c0b49b18bbbb74869f7a37ef70b6ed99e78ebe0ea0a1569369fad9e447d720ffc4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef65c4f5e5994722265be327433218bece900c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fef65c4f5e5994722265be327433218bece900c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef65c4f5e5994722265be327433218bece900c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e3a411351578d8cb372407205b320dcb72279c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3a411351578d8cb372407205b320dcb72279c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e3a411351578d8cb372407205b320dcb72279c4"
      },
      {
        "sha": "eff4bd8ab257a553ca8898ccd803630b4d44a771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff4bd8ab257a553ca8898ccd803630b4d44a771",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eff4bd8ab257a553ca8898ccd803630b4d44a771"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 189,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b5e37722df1e3443109cea8a991ed94a158c4a64",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef65c4f5e5994722265be327433218bece900c5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef65c4f5e5994722265be327433218bece900c5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fef65c4f5e5994722265be327433218bece900c5",
        "patch": "@@ -61,6 +61,14 @@ static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUAR\n \n static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n \n+/// Age after which a stale block will no longer be served if requested as\n+/// protection against fingerprinting. Set to one month, denominated in seconds.\n+static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n+\n+/// Age after which a block is considered historical for purposes of rate\n+/// limiting block relay. Set to one week, denominated in seconds.\n+static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -706,6 +714,17 @@ void Misbehaving(NodeId pnode, int howmuch)\n // blockchain -> download logic notification\n //\n \n+// To prevent fingerprinting attacks, only send blocks/headers outside of the\n+// active chain if they are no more than a month older (both in time, and in\n+// best equivalent proof of work) than the best header chain we know about.\n+static bool StaleBlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    AssertLockHeld(cs_main);\n+    return (pindexBestHeader != nullptr) &&\n+        (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n+        (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n+}\n+\n PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n@@ -983,22 +1002,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     if (chainActive.Contains(mi->second)) {\n                         send = true;\n                     } else {\n-                        static const int nOneMonth = 30 * 24 * 60 * 60;\n-                        // To prevent fingerprinting attacks, only send blocks outside of the active\n-                        // chain if they are valid, and no more than a month older (both in time, and in\n-                        // best equivalent proof of work) than the best header chain we know about.\n-                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != nullptr) &&\n-                            (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() < nOneMonth) &&\n-                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, consensusParams) < nOneMonth);\n+                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                            StaleBlockRequestAllowed(mi->second, consensusParams);\n                         if (!send) {\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n-                static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+                if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -1723,6 +1736,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (mi == mapBlockIndex.end())\n                 return true;\n             pindex = (*mi).second;\n+\n+            if (!chainActive.Contains(pindex) &&\n+                !StaleBlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n+                LogPrintf(\"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+                return true;\n+            }\n         }\n         else\n         {"
      },
      {
        "sha": "fe60c6cd46dca11adc46778615a850b036f1fd60",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "added",
        "additions": 158,
        "deletions": 0,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef65c4f5e5994722265be327433218bece900c5/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef65c4f5e5994722265be327433218bece900c5/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=fef65c4f5e5994722265be327433218bece900c5",
        "patch": "@@ -0,0 +1,158 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test various fingerprinting protections.\n+\n+If an stale block more than a month old or its header are requested by a peer,\n+the node should pretend that it does not have it to avoid fingerprinting.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_headers,\n+    msg_block,\n+    msg_getdata,\n+    msg_getheaders,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    p2p_port,\n+)\n+\n+class P2PFingerprintTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    # Build a chain of blocks on top of given one\n+    def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n+        blocks = []\n+        for _ in range(nblocks):\n+            coinbase = create_coinbase(prev_height + 1)\n+            block_time = prev_median_time + 1\n+            block = create_block(int(prev_hash, 16), coinbase, block_time)\n+            block.solve()\n+\n+            blocks.append(block)\n+            prev_hash = block.hash\n+            prev_height += 1\n+            prev_median_time = block_time\n+        return blocks\n+\n+    # Send a getdata request for a given block hash\n+    def send_block_request(self, block_hash, node):\n+        msg = msg_getdata()\n+        msg.inv.append(CInv(2, block_hash))  # 2 == \"Block\"\n+        node.send_message(msg)\n+\n+    # Send a getheaders request for a given single block hash\n+    def send_header_request(self, block_hash, node):\n+        msg = msg_getheaders()\n+        msg.hashstop = block_hash\n+        node.send_message(msg)\n+\n+    # Check whether last block received from node has a given hash\n+    def last_block_equals(self, expected_hash, node):\n+        block_msg = node.last_message.get(\"block\")\n+        return block_msg and block_msg.block.rehash() == expected_hash\n+\n+    # Check whether last block header received from node has a given hash\n+    def last_header_equals(self, expected_hash, node):\n+        headers_msg = node.last_message.get(\"headers\")\n+        return (headers_msg and\n+                headers_msg.headers and\n+                headers_msg.headers[0].rehash() == expected_hash)\n+\n+    # Checks that stale blocks timestamped more than a month ago are not served\n+    # by the node while recent stale blocks and old active chain blocks are.\n+    # This does not currently test that stale blocks timestamped within the\n+    # last month but that have over a month's worth of work are also withheld.\n+    def run_test(self):\n+        node0 = NodeConnCB()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        NetworkThread().start()\n+        node0.wait_for_verack()\n+\n+        # Set node time to 60 days ago\n+        self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)\n+\n+        # Generating a chain of 10 blocks\n+        block_hashes = self.nodes[0].generate(nblocks=10)\n+\n+        # Create longer chain starting 2 blocks before current tip\n+        height = len(block_hashes) - 2\n+        block_hash = block_hashes[height - 1]\n+        block_time = self.nodes[0].getblockheader(block_hash)[\"mediantime\"] + 1\n+        new_blocks = self.build_chain(5, block_hash, height, block_time)\n+\n+        # Force reorg to a longer chain\n+        node0.send_message(msg_headers(new_blocks))\n+        node0.wait_for_getdata()\n+        for block in new_blocks:\n+            node0.send_and_ping(msg_block(block))\n+\n+        # Check that reorg succeeded\n+        assert_equal(self.nodes[0].getblockcount(), 13)\n+\n+        stale_hash = int(block_hashes[-1], 16)\n+\n+        # Check that getdata request for stale block succeeds\n+        self.send_block_request(stale_hash, node0)\n+        test_function = lambda: self.last_block_equals(stale_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+        # Check that getheader request for stale block header succeeds\n+        self.send_header_request(stale_hash, node0)\n+        test_function = lambda: self.last_header_equals(stale_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+        # Longest chain is extended so stale is much older than chain tip\n+        self.nodes[0].setmocktime(0)\n+        tip = self.nodes[0].generate(nblocks=1)[0]\n+        assert_equal(self.nodes[0].getblockcount(), 14)\n+\n+        # Send getdata & getheaders to refresh last received getheader message\n+        block_hash = int(tip, 16)\n+        self.send_block_request(block_hash, node0)\n+        self.send_header_request(block_hash, node0)\n+        node0.sync_with_ping()\n+\n+        # Request for very old stale block should now fail\n+        self.send_block_request(stale_hash, node0)\n+        time.sleep(3)\n+        assert not self.last_block_equals(stale_hash, node0)\n+\n+        # Request for very old stale block header should now fail\n+        self.send_header_request(stale_hash, node0)\n+        time.sleep(3)\n+        assert not self.last_header_equals(stale_hash, node0)\n+\n+        # Verify we can fetch very old blocks and headers on the active chain\n+        block_hash = int(block_hashes[2], 16)\n+        self.send_block_request(block_hash, node0)\n+        self.send_header_request(block_hash, node0)\n+        node0.sync_with_ping()\n+\n+        self.send_block_request(block_hash, node0)\n+        test_function = lambda: self.last_block_equals(block_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+        self.send_header_request(block_hash, node0)\n+        test_function = lambda: self.last_header_equals(block_hash, node0)\n+        wait_until(test_function, timeout=3)\n+\n+if __name__ == '__main__':\n+    P2PFingerprintTest().main()"
      },
      {
        "sha": "c6f596156a777259bcf3f2ccf48a553d44be985a",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef65c4f5e5994722265be327433218bece900c5/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef65c4f5e5994722265be327433218bece900c5/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fef65c4f5e5994722265be327433218bece900c5",
        "patch": "@@ -1310,8 +1310,8 @@ def __repr__(self):\n class msg_headers(object):\n     command = b\"headers\"\n \n-    def __init__(self):\n-        self.headers = []\n+    def __init__(self, headers=None):\n+        self.headers = headers if headers is not None else []\n \n     def deserialize(self, f):\n         # comment in bitcoind indicates these should be deserialized as blocks"
      },
      {
        "sha": "434ba23b3b3963a08bf22a532611fc62b9e27020",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef65c4f5e5994722265be327433218bece900c5/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef65c4f5e5994722265be327433218bece900c5/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fef65c4f5e5994722265be327433218bece900c5",
        "patch": "@@ -123,6 +123,7 @@\n     'uptime.py',\n     'resendwallettransactions.py',\n     'minchainwork.py',\n+    'p2p-fingerprint.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjRkYTJjNTI5NDJlYmZlOTJkMWQxNDk1YTMwOWE4YTlkZDE4ZWYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T09:25:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T09:26:10Z"
      },
      "message": "Merge #10941: Add blocknotify and walletnotify functional tests\n\n857b32b [tests] Add -walletnotify functional test (Jo\u00e3o Barbosa)\ndf18d29 [tests] Add -blocknotify functional test (Jo\u00e3o Barbosa)\n9c72a46 [tests] Tidy up forknotify.py (John Newbery)\n\nPull request description:\n\n  This patch adds the missing functional tests for `-blocknotify` and `-walletnotify` notifications. The `-alertnotify` test file `forknotify.py` is renamed to `notifications.py` to accommodate the new tests. Credits to @jnewbery for this cleanup and unification.\n\nTree-SHA512: ee7b28b9f1bd225587efaefa6427c6d080ccb50ead390b23d94717c137a317183b37be00da0b2bffedd4192a363c971dea510d78d29278eb9fa76374f7855c09",
      "tree": {
        "sha": "aa31f58d5667a678020aad4c5d1ed64d2a34a1c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa31f58d5667a678020aad4c5d1ed64d2a34a1c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3eOyAAoJEB5K7WKYbNJdQF4H/RjMXGCDHBqZ8s9JJjN22/bE\nz3XCWgWcNQk1wE6Qmrr/qsF/gtjjTxZ4I2HO/tPiR+MyUVmiBJAjsXM4PKnBVbEB\nrtkuyRdCEZa4ZFyrZW6F3kXH6U8hq2eTOofyBlp3Ks5HxJtkFNrKH1ENytDY1Q0g\nwvbe1wlfhpXCQzzXtKm3RN/QDru+Zdgw5CSfdyw501pHr8Xm+Zr+z3Xisg8cp3as\nfW0UGBI+lBsfOpDpfq3Pa6BhHJ2zcpagMEyYCgUyB7v+sbzOr+6z1PXyMo6pka7G\n/dZxN33Vq86rxBi944H1f2nBiIKXGQl1Bl5PCrxC/7/HAKu5AvRc6xV3I4T+Oms=\n=ZQbF\n-----END PGP SIGNATURE-----",
        "payload": "tree aa31f58d5667a678020aad4c5d1ed64d2a34a1c3\nparent fef65c4f5e5994722265be327433218bece900c5\nparent 857b32b4b280f13997cf2fa471802ad6a27075fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507713941 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507713970 +0200\n\nMerge #10941: Add blocknotify and walletnotify functional tests\n\n857b32b [tests] Add -walletnotify functional test (Jo\u00e3o Barbosa)\ndf18d29 [tests] Add -blocknotify functional test (Jo\u00e3o Barbosa)\n9c72a46 [tests] Tidy up forknotify.py (John Newbery)\n\nPull request description:\n\n  This patch adds the missing functional tests for `-blocknotify` and `-walletnotify` notifications. The `-alertnotify` test file `forknotify.py` is renamed to `notifications.py` to accommodate the new tests. Credits to @jnewbery for this cleanup and unification.\n\nTree-SHA512: ee7b28b9f1bd225587efaefa6427c6d080ccb50ead390b23d94717c137a317183b37be00da0b2bffedd4192a363c971dea510d78d29278eb9fa76374f7855c09\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fef65c4f5e5994722265be327433218bece900c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef65c4f5e5994722265be327433218bece900c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fef65c4f5e5994722265be327433218bece900c5"
      },
      {
        "sha": "857b32b4b280f13997cf2fa471802ad6a27075fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/857b32b4b280f13997cf2fa471802ad6a27075fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/857b32b4b280f13997cf2fa471802ad6a27075fb"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 87,
      "deletions": 60
    },
    "files": [
      {
        "sha": "afcad1f9cc3fa055cfafc2505b10d28cdacb932f",
        "filename": "test/functional/forknotify.py",
        "status": "removed",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef65c4f5e5994722265be327433218bece900c5/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef65c4f5e5994722265be327433218bece900c5/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=fef65c4f5e5994722265be327433218bece900c5",
        "patch": "@@ -1,59 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test the -alertnotify option.\"\"\"\n-import os\n-import time\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-\n-class ForkNotifyTest(BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.num_nodes = 2\n-\n-    def setup_network(self):\n-        self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass  # Just open then close to create zero-length file\n-        self.extra_args = [[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"],\n-                           [\"-blockversion=211\"]]\n-        super().setup_network()\n-\n-    def run_test(self):\n-        # Mine 51 up-version blocks\n-        self.nodes[1].generate(51)\n-        self.sync_all()\n-        # -alertnotify should trigger on the 51'st,\n-        # but mine and sync another to give\n-        # -alertnotify time to write\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-\n-        # Give bitcoind 10 seconds to write the alert notification\n-        timeout = 10.0\n-        while timeout > 0:\n-            if os.path.exists(self.alert_filename) and os.path.getsize(self.alert_filename):\n-                break\n-            time.sleep(0.1)\n-            timeout -= 0.1\n-        else:\n-            assert False, \"-alertnotify did not warn of up-version blocks\"\n-\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-\n-        # Mine more up-version blocks, should not get more alerts:\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text2 = f.read()\n-\n-        if alert_text != alert_text2:\n-            raise AssertionError(\"-alertnotify excessive warning of up-version blocks\")\n-\n-if __name__ == '__main__':\n-    ForkNotifyTest().main()"
      },
      {
        "sha": "c88972ab91bd975a3c2b2c46f404c7889c6a26bf",
        "filename": "test/functional/notifications.py",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/test/functional/notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/test/functional/notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/notifications.py?ref=364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "patch": "@@ -0,0 +1,86 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, wait_until, connect_nodes_bi\n+\n+class NotificationsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self):\n+        self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n+        self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")\n+        self.tx_filename = os.path.join(self.options.tmpdir, \"transactions.txt\")\n+\n+        # -alertnotify and -blocknotify on node0, walletnotify on node1\n+        self.extra_args = [[\"-blockversion=2\",\n+                            \"-alertnotify=echo %%s >> %s\" % self.alert_filename,\n+                            \"-blocknotify=echo %%s >> %s\" % self.block_filename],\n+                           [\"-blockversion=211\",\n+                            \"-rescan\",\n+                            \"-walletnotify=echo %%s >> %s\" % self.tx_filename]]\n+        super().setup_network()\n+\n+    def run_test(self):\n+        self.log.info(\"test -blocknotify\")\n+        block_count = 10\n+        blocks = self.nodes[1].generate(block_count)\n+\n+        # wait at most 10 seconds for expected file size before reading the content\n+        wait_until(lambda: os.path.isfile(self.block_filename) and os.stat(self.block_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file content should equal the generated blocks hashes\n+        with open(self.block_filename, 'r') as f:\n+            assert_equal(sorted(blocks), sorted(f.read().splitlines()))\n+\n+        self.log.info(\"test -walletnotify\")\n+        # wait at most 10 seconds for expected file size before reading the content\n+        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file content should equal the generated transaction hashes\n+        txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n+        with open(self.tx_filename, 'r') as f:\n+            assert_equal(sorted(txids_rpc), sorted(f.read().splitlines()))\n+        os.remove(self.tx_filename)\n+\n+        self.log.info(\"test -walletnotify after rescan\")\n+        # restart node to rescan to force wallet notifications\n+        self.restart_node(1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file content should equal the generated transaction hashes\n+        txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n+        with open(self.tx_filename, 'r') as f:\n+            assert_equal(sorted(txids_rpc), sorted(f.read().splitlines()))\n+\n+        # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n+        self.log.info(\"test -alertnotify\")\n+        self.nodes[1].generate(41)\n+        self.sync_all()\n+\n+        # Give bitcoind 10 seconds to write the alert notification\n+        wait_until(lambda: os.path.isfile(self.alert_filename) and os.path.getsize(self.alert_filename), timeout=10)\n+\n+        with open(self.alert_filename, 'r', encoding='utf8') as f:\n+            alert_text = f.read()\n+\n+        # Mine more up-version blocks, should not get more alerts:\n+        self.nodes[1].generate(2)\n+        self.sync_all()\n+\n+        with open(self.alert_filename, 'r', encoding='utf8') as f:\n+            alert_text2 = f.read()\n+\n+        self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n+        assert_equal(alert_text, alert_text2)\n+\n+if __name__ == '__main__':\n+    NotificationsTest().main()"
      },
      {
        "sha": "8c4651f6e02e22c121f8284e48a4e1dd418c891a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "patch": "@@ -149,7 +149,7 @@\n     'example_test.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n-    'forknotify.py',\n+    'notifications.py',\n     'invalidateblock.py',\n     'p2p-acceptblock.py',\n     'replace-by-fee.py',"
      }
    ]
  },
  {
    "sha": "a44a215177ab55b4a3b36a7980c313e908e2dd18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDRhMjE1MTc3YWI1NWI0YTNiMzZhNzk4MGMzMTNlOTA4ZTJkZDE4",
    "commit": {
      "author": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2017-10-11T10:12:59Z"
      },
      "committer": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2017-10-11T16:20:42Z"
      },
      "message": "Fix importmulti bug when importing an already imported key",
      "tree": {
        "sha": "a40bc2574db7c70cb36e6cc9d9cb1dfd66bfb686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a40bc2574db7c70cb36e6cc9d9cb1dfd66bfb686"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a44a215177ab55b4a3b36a7980c313e908e2dd18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a44a215177ab55b4a3b36a7980c313e908e2dd18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a44a215177ab55b4a3b36a7980c313e908e2dd18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a44a215177ab55b4a3b36a7980c313e908e2dd18/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/364da2c52942ebfe92d1d1495a309a8a9dd18ef3"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3ec4a5efb479c41902367afcd887a107051851ea",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44a215177ab55b4a3b36a7980c313e908e2dd18/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44a215177ab55b4a3b36a7980c313e908e2dd18/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a44a215177ab55b4a3b36a7980c313e908e2dd18",
        "patch": "@@ -961,7 +961,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 pwallet->SetAddressBook(vchAddress, label, \"receive\");\n \n                 if (pwallet->HaveKey(vchAddress)) {\n-                    return false;\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n                 pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;"
      },
      {
        "sha": "a691595f15116f94c635dbc1b519b7f60a4b9433",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a44a215177ab55b4a3b36a7980c313e908e2dd18/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a44a215177ab55b4a3b36a7980c313e908e2dd18/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=a44a215177ab55b4a3b36a7980c313e908e2dd18",
        "patch": "@@ -160,6 +160,18 @@ def run_test (self):\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n+        self.log.info(\"Should not import an address with private key if is already imported\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'The wallet already contains the private key for this address or script')\n+\n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())"
      }
    ]
  },
  {
    "sha": "892809309c1bc370677241a715e57a2744f94323",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTI4MDkzMDljMWJjMzcwNjc3MjQxYTcxNWU1N2EyNzQ0Zjk0MzIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T16:12:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T16:23:20Z"
      },
      "message": "Merge #11420: Bump univalue subtree and fix json formatting in tests\n\n619bb05 Squashed 'src/univalue/' changes from 16a1f7f6e..fe805ea74 (MarcoFalke)\n\nPull request description:\n\n  The subtree-merge commit also fixes the whitespace for failing tests, such that bisect doesn't break.\n\n  Finally, the bump also includes the changes that accidentally modified our subtree, such that the subtree check should work fine now:\n\n  ```sh\n  ./contrib/devtools/git-subtree-check.sh src/univalue\n\nTree-SHA512: 3009d1e52b6f41ef89ecc8a000649f08e44395538703f294995a6e913e3fbfb7813d6bd31fdb4acb6127fd4af99c095bf980a12f1f026bb27cacc66e1487cd1e",
      "tree": {
        "sha": "bd70d6f0bd904735772547475bda2284201f1537",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd70d6f0bd904735772547475bda2284201f1537"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/892809309c1bc370677241a715e57a2744f94323",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3kV4AAoJEB5K7WKYbNJdIuYH/jDWj0GcQfbT4/JQqHxux2SG\nCK0yBNVCf8Vmi4xXMqV4fdbNbHKm8oo8tokuB9QdnXoSYb8pVT2Vwmww3xCfBBSu\nkT2E3gnjyNhLi5vnuxfLfWuT55NkczUinbRrXCIxs5BcjY5q3aOt7MF1wDcIfd9z\nqs7DkuAOhkOUIt4ZQ21yq4SPmAMC/ydYEazRoMGmNlr3naPfUv3vLqZ/J8OUYJCm\nIqcry+9VzNfr5WfVbYweoVlzxRrlws16mcQxu73PnJjshA60Afkwi9nljgBIECUf\necYnoSjdF1p5L5BOIgtsJYOriVwZM7Dtd9nC+eR94XAYm1z+Oo4CeVXe1uSTtQI=\n=vcad\n-----END PGP SIGNATURE-----",
        "payload": "tree bd70d6f0bd904735772547475bda2284201f1537\nparent 364da2c52942ebfe92d1d1495a309a8a9dd18ef3\nparent faaeeb0d3e777d991c7cfee983bea369c109f5cc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507738338 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507739000 +0200\n\nMerge #11420: Bump univalue subtree and fix json formatting in tests\n\n619bb05 Squashed 'src/univalue/' changes from 16a1f7f6e..fe805ea74 (MarcoFalke)\n\nPull request description:\n\n  The subtree-merge commit also fixes the whitespace for failing tests, such that bisect doesn't break.\n\n  Finally, the bump also includes the changes that accidentally modified our subtree, such that the subtree check should work fine now:\n\n  ```sh\n  ./contrib/devtools/git-subtree-check.sh src/univalue\n\nTree-SHA512: 3009d1e52b6f41ef89ecc8a000649f08e44395538703f294995a6e913e3fbfb7813d6bd31fdb4acb6127fd4af99c095bf980a12f1f026bb27cacc66e1487cd1e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892809309c1bc370677241a715e57a2744f94323",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/892809309c1bc370677241a715e57a2744f94323",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892809309c1bc370677241a715e57a2744f94323/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/364da2c52942ebfe92d1d1495a309a8a9dd18ef3"
      },
      {
        "sha": "faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaeeb0d3e777d991c7cfee983bea369c109f5cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faaeeb0d3e777d991c7cfee983bea369c109f5cc"
      }
    ],
    "stats": {
      "total": 1148,
      "additions": 851,
      "deletions": 297
    },
    "files": [
      {
        "sha": "e283fc890e232dc5ce447678a294912ee222a93b",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -12,6 +12,7 @@ pkgconfig_DATA = pc/libunivalue.pc\n \n libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n+\tlib/univalue_get.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n@@ -20,7 +21,7 @@ libunivalue_la_LDFLAGS = \\\n \t-no-undefined\n libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n-TESTS = test/unitester\n+TESTS = test/object test/unitester test/no_nul\n \n GENBIN = gen/gen$(BUILD_EXEEXT)\n GEN_SRCS = gen/gen.cpp\n@@ -33,7 +34,7 @@ gen: lib/univalue_escapes.h $(GENBIN)\n \t@echo Updating $<\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n-noinst_PROGRAMS = $(TESTS)\n+noinst_PROGRAMS = $(TESTS) test/test_json\n \n TEST_DATA_DIR=test\n \n@@ -42,6 +43,21 @@ test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n+test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_LDADD = libunivalue.la\n+test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n+test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_LDADD = libunivalue.la\n+test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n+test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+test_object_SOURCES = test/object.cpp\n+test_object_LDADD = libunivalue.la\n+test_object_CXXFLAGS = -I$(top_srcdir)/include\n+test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail10.json \\\n \t$(TEST_DATA_DIR)/fail11.json \\\n@@ -77,6 +93,8 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail39.json \\\n \t$(TEST_DATA_DIR)/fail40.json \\\n \t$(TEST_DATA_DIR)/fail41.json \\\n+\t$(TEST_DATA_DIR)/fail42.json \\\n+\t$(TEST_DATA_DIR)/fail44.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -88,6 +106,11 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n \t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json\n+\t$(TEST_DATA_DIR)/round2.json \\\n+\t$(TEST_DATA_DIR)/round3.json \\\n+\t$(TEST_DATA_DIR)/round4.json \\\n+\t$(TEST_DATA_DIR)/round5.json \\\n+\t$(TEST_DATA_DIR)/round6.json \\\n+\t$(TEST_DATA_DIR)/round7.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "src/univalue/README",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/src/univalue/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364da2c52942ebfe92d1d1495a309a8a9dd18ef3/src/univalue/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README?ref=364da2c52942ebfe92d1d1495a309a8a9dd18ef3",
        "patch": "@@ -1,7 +0,0 @@\n-\n-\t\tUniValue\n-\n-A universal value object, with JSON encoding (output) and decoding (input).\n-\n-Built as a single dynamic RAII C++ object class, and no templates.\n-"
      },
      {
        "sha": "36aa786a4c5de14bb0295d0dc3d82a5f09679db7",
        "filename": "src/univalue/README.md",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README.md?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1,32 @@\n+\n+# UniValue\n+\n+## Summary\n+\n+A universal value class, with JSON encoding and decoding.\n+\n+UniValue is an abstract data type that may be a null, boolean, string,\n+number, array container, or a key/value dictionary container, nested to\n+an arbitrary depth.\n+\n+This class is aligned with the JSON standard, [RFC\n+7159](https://tools.ietf.org/html/rfc7159.html).\n+\n+## Installation\n+\n+This project is a standard GNU\n+[autotools](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)\n+project.  Build and install instructions are available in the `INSTALL`\n+file provided with GNU autotools.\n+\n+```\n+$ ./autogen.sh\n+$ ./configure\n+$ make\n+```\n+\n+## Design\n+\n+UniValue provides a single dynamic RAII C++ object class,\n+and minimizes template use (contra json_spirit).\n+"
      },
      {
        "sha": "8298332ac132cba1fdc61a1a48f2d666cfb5dbba",
        "filename": "src/univalue/configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [2])\n-m4_define([libunivalue_interface_age], [2])\n+m4_define([libunivalue_micro_version], [3])\n+m4_define([libunivalue_interface_age], [3])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.2],\n+AC_INIT([univalue], [1.0.3],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "4fd2223b302e7a2b1979654b5e900f3a4123ec3c",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -7,6 +7,7 @@\n #define __UNIVALUE_H__\n \n #include <stdint.h>\n+#include <string.h>\n \n #include <string>\n #include <vector>\n@@ -69,10 +70,11 @@ class UniValue {\n     size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    void getObjMap(std::map<std::string,UniValue>& kv) const;\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes) const;\n     const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+    const UniValue& operator[](size_t index) const;\n+    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }\n \n     bool isNull() const { return (typ == VNULL); }\n     bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n@@ -92,8 +94,25 @@ class UniValue {\n         std::string s(val_);\n         return push_back(s);\n     }\n+    bool push_back(uint64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int64_t val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(int val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(double val_) {\n+        UniValue tmpVal(val_);\n+        return push_back(tmpVal);\n+    }\n     bool push_backV(const std::vector<UniValue>& vec);\n \n+    void __pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const UniValue& val);\n     bool pushKV(const std::string& key, const std::string& val_) {\n         UniValue tmpVal(VSTR, val_);\n@@ -124,9 +143,10 @@ class UniValue {\n     std::string write(unsigned int prettyIndent = 0,\n                       unsigned int indentLevel = 0) const;\n \n-    bool read(const char *raw);\n+    bool read(const char *raw, size_t len);\n+    bool read(const char *raw) { return read(raw, strlen(raw)); }\n     bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n+        return read(rawStr.data(), rawStr.size());\n     }\n \n private:\n@@ -135,7 +155,7 @@ class UniValue {\n     std::vector<std::string> keys;\n     std::vector<UniValue> values;\n \n-    int findKey(const std::string& key) const;\n+    bool findKey(const std::string& key, size_t& retIdx) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n \n@@ -240,7 +260,7 @@ enum jtokentype {\n };\n \n extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n+                                    unsigned int& consumed, const char *raw, const char *end);\n extern const char *uvTypeName(UniValue::VType t);\n \n static inline bool jsonTokenIsValue(enum jtokentype jtt)"
      },
      {
        "sha": "d8ad7c4b90c6b1564d378c1e93b30f58ef37c889",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 153,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -4,75 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n-#include <errno.h>\n #include <iomanip>\n-#include <limits>\n #include <sstream>\n-#include <stdexcept>\n #include <stdlib.h>\n-#include <string.h>\n \n #include \"univalue.h\"\n \n-namespace \n-{\n-static bool ParsePrechecks(const std::string& str)\n-{\n-    if (str.empty()) // No empty string allowed\n-        return false;\n-    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n-        return false;\n-    return true;\n-}\n-\n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n-bool ParseInt64(const std::string& str, int64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = NULL;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n-}\n-\n-bool ParseDouble(const std::string& str, double *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n-}\n-}\n-\n using namespace std;\n \n const UniValue NullUniValue;\n@@ -104,7 +41,7 @@ static bool validNumStr(const string& s)\n {\n     string tokenVal;\n     unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n@@ -189,13 +126,22 @@ bool UniValue::push_backV(const std::vector<UniValue>& vec)\n     return true;\n }\n \n+void UniValue::__pushKV(const std::string& key, const UniValue& val_)\n+{\n+    keys.push_back(key);\n+    values.push_back(val_);\n+}\n+\n bool UniValue::pushKV(const std::string& key, const UniValue& val_)\n {\n     if (typ != VOBJ)\n         return false;\n \n-    keys.push_back(key);\n-    values.push_back(val_);\n+    size_t idx;\n+    if (findKey(key, idx))\n+        values[idx] = val_;\n+    else\n+        __pushKV(key, val_);\n     return true;\n }\n \n@@ -204,30 +150,43 @@ bool UniValue::pushKVs(const UniValue& obj)\n     if (typ != VOBJ || obj.typ != VOBJ)\n         return false;\n \n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values.at(i));\n-    }\n+    for (size_t i = 0; i < obj.keys.size(); i++)\n+        __pushKV(obj.keys[i], obj.values.at(i));\n \n     return true;\n }\n \n-int UniValue::findKey(const std::string& key) const\n+void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const\n+{\n+    if (typ != VOBJ)\n+        return;\n+\n+    kv.clear();\n+    for (size_t i = 0; i < keys.size(); i++)\n+        kv[keys[i]] = values[i];\n+}\n+\n+bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n {\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n+    for (size_t i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key) {\n+            retIdx = i;\n+            return true;\n+        }\n     }\n \n-    return -1;\n+    return false;\n }\n \n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n+    if (typ != VOBJ)\n+        return false;\n+\n     for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n          it != t.end(); ++it) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n+        size_t idx = 0;\n+        if (!findKey(it->first, idx))\n             return false;\n \n         if (values.at(idx).getType() != it->second)\n@@ -242,14 +201,14 @@ const UniValue& UniValue::operator[](const std::string& key) const\n     if (typ != VOBJ)\n         return NullUniValue;\n \n-    int index = findKey(key);\n-    if (index < 0)\n+    size_t index = 0;\n+    if (!findKey(key, index))\n         return NullUniValue;\n \n     return values.at(index);\n }\n \n-const UniValue& UniValue::operator[](unsigned int index) const\n+const UniValue& UniValue::operator[](size_t index) const\n {\n     if (typ != VOBJ && typ != VARR)\n         return NullUniValue;\n@@ -283,75 +242,3 @@ const UniValue& find_value(const UniValue& obj, const std::string& name)\n     return NullUniValue;\n }\n \n-const std::vector<std::string>& UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-const std::vector<UniValue>& UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-const std::string& UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "eabcf2dad1acc67451fb9fec9d01ef55ef6fe255",
        "filename": "src/univalue/lib/univalue_get.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_get.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <errno.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdexcept>\n+#include <vector>\n+#include <limits>\n+#include <string>\n+\n+#include \"univalue.h\"\n+\n+namespace\n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (json_isspace(str[0]) || json_isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+const std::vector<std::string>& UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+const std::vector<UniValue>& UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+const std::string& UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "ae75cb462a0188c48181af5e225bca883a1a241d",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 31,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -43,21 +43,21 @@ static const char *hatoui(const char *first, const char *last,\n }\n \n enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n+                            const char *raw, const char *end)\n {\n     tokenVal.clear();\n     consumed = 0;\n \n     const char *rawStart = raw;\n \n-    while ((*raw) && (json_isspace(*raw)))             // skip whitespace\n+    while (raw < end && (json_isspace(*raw)))          // skip whitespace\n         raw++;\n \n-    switch (*raw) {\n-\n-    case 0:\n+    if (raw >= end)\n         return JTOK_NONE;\n \n+    switch (*raw) {\n+\n     case '{':\n         raw++;\n         consumed = (raw - rawStart);\n@@ -127,40 +127,40 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         numStr += *raw;                       // copy first char\n         raw++;\n \n-        if ((*first == '-') && (!json_isdigit(*raw)))\n+        if ((*first == '-') && (raw < end) && (!json_isdigit(*raw)))\n             return JTOK_ERR;\n \n-        while ((*raw) && json_isdigit(*raw)) {     // copy digits\n+        while (raw < end && json_isdigit(*raw)) {  // copy digits\n             numStr += *raw;\n             raw++;\n         }\n \n         // part 2: frac\n-        if (*raw == '.') {\n+        if (raw < end && *raw == '.') {\n             numStr += *raw;                   // copy .\n             raw++;\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n         }\n \n         // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n+        if (raw < end && (*raw == 'e' || *raw == 'E')) {\n             numStr += *raw;                   // copy E\n             raw++;\n \n-            if (*raw == '-' || *raw == '+') { // copy +/-\n+            if (raw < end && (*raw == '-' || *raw == '+')) { // copy +/-\n                 numStr += *raw;\n                 raw++;\n             }\n \n-            if (!json_isdigit(*raw))\n+            if (raw >= end || !json_isdigit(*raw))\n                 return JTOK_ERR;\n-            while ((*raw) && json_isdigit(*raw)) { // copy digits\n+            while (raw < end && json_isdigit(*raw)) { // copy digits\n                 numStr += *raw;\n                 raw++;\n             }\n@@ -177,13 +177,16 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n-        while (*raw) {\n-            if ((unsigned char)*raw < 0x20)\n+        while (true) {\n+            if (raw >= end || (unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n+                if (raw >= end)\n+                    return JTOK_ERR;\n+\n                 switch (*raw) {\n                 case '\"':  writer.push_back('\\\"'); break;\n                 case '\\\\': writer.push_back('\\\\'); break;\n@@ -196,7 +199,8 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n \n                 case 'u': {\n                     unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                    if (raw + 1 + 4 >= end ||\n+                        hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n                     writer.push_back_u(codepoint);\n@@ -246,7 +250,7 @@ enum expect_bits {\n #define setExpect(bit) (expectMask |= EXP_##bit)\n #define clearExpect(bit) (expectMask &= ~EXP_##bit)\n \n-bool UniValue::read(const char *raw)\n+bool UniValue::read(const char *raw, size_t size)\n {\n     clear();\n \n@@ -257,10 +261,11 @@ bool UniValue::read(const char *raw)\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n+    const char* end = raw + size;\n     do {\n         last_tok = tok;\n \n-        tok = getJsonToken(tokenVal, consumed, raw);\n+        tok = getJsonToken(tokenVal, consumed, raw, end);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n             return false;\n         raw += consumed;\n@@ -371,9 +376,6 @@ bool UniValue::read(const char *raw)\n         case JTOK_KW_NULL:\n         case JTOK_KW_TRUE:\n         case JTOK_KW_FALSE: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal;\n             switch (tok) {\n             case JTOK_KW_NULL:\n@@ -388,6 +390,11 @@ bool UniValue::read(const char *raw)\n             default: /* impossible */ break;\n             }\n \n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -396,10 +403,12 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_NUMBER: {\n-            if (!stack.size())\n-                return false;\n-\n             UniValue tmpVal(VNUM, tokenVal);\n+            if (!stack.size()) {\n+                *this = tmpVal;\n+                break;\n+            }\n+\n             UniValue *top = stack.back();\n             top->values.push_back(tmpVal);\n \n@@ -408,17 +417,18 @@ bool UniValue::read(const char *raw)\n             }\n \n         case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n             if (expect(OBJ_NAME)) {\n+                UniValue *top = stack.back();\n                 top->keys.push_back(tokenVal);\n                 clearExpect(OBJ_NAME);\n                 setExpect(COLON);\n             } else {\n                 UniValue tmpVal(VSTR, tokenVal);\n+                if (!stack.size()) {\n+                    *this = tmpVal;\n+                    break;\n+                }\n+                UniValue *top = stack.back();\n                 top->values.push_back(tmpVal);\n             }\n \n@@ -432,7 +442,7 @@ bool UniValue::read(const char *raw)\n     } while (!stack.empty ());\n \n     /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n+    tok = getJsonToken(tokenVal, consumed, raw, end);\n     if (tok != JTOK_NONE)\n         return false;\n "
      },
      {
        "sha": "20d40430095841a460adef8d3c60a56746785b24",
        "filename": "src/univalue/lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_utffilter.h?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -46,27 +46,27 @@ class JSONUTF8StringFilter\n         }\n     }\n     // Write codepoint directly, possibly collating surrogate pairs\n-    void push_back_u(unsigned int codepoint)\n+    void push_back_u(unsigned int codepoint_)\n     {\n         if (state) // Only accept full codepoints in open state\n             is_valid = false;\n-        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+        if (codepoint_ >= 0xD800 && codepoint_ < 0xDC00) { // First half of surrogate pair\n             if (surpair) // Two subsequent surrogate pair openers - fail\n                 is_valid = false;\n             else\n-                surpair = codepoint;\n-        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+                surpair = codepoint_;\n+        } else if (codepoint_ >= 0xDC00 && codepoint_ < 0xE000) { // Second half of surrogate pair\n             if (surpair) { // Open surrogate pair, expect second half\n                 // Compute code point from UTF-16 surrogate pair\n-                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint_ - 0xDC00));\n                 surpair = 0;\n             } else // Second half doesn't follow a first half - fail\n                 is_valid = false;\n         } else {\n             if (surpair) // First half of surrogate pair not followed by second - fail\n                 is_valid = false;\n             else\n-                append_codepoint(codepoint);\n+                append_codepoint(codepoint_);\n         }\n     }\n     // Check that we're in a state where the string can be ended\n@@ -96,22 +96,22 @@ class JSONUTF8StringFilter\n     //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n     unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n \n-    void append_codepoint(unsigned int codepoint)\n+    void append_codepoint(unsigned int codepoint_)\n     {\n-        if (codepoint <= 0x7f)\n-            str.push_back((char)codepoint);\n-        else if (codepoint <= 0x7FF) {\n-            str.push_back((char)(0xC0 | (codepoint >> 6)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0xFFFF) {\n-            str.push_back((char)(0xE0 | (codepoint >> 12)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n-        } else if (codepoint <= 0x1FFFFF) {\n-            str.push_back((char)(0xF0 | (codepoint >> 18)));\n-            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n-            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        if (codepoint_ <= 0x7f)\n+            str.push_back((char)codepoint_);\n+        else if (codepoint_ <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint_ >> 6)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint_ >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n+        } else if (codepoint_ <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint_ >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint_ >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint_ & 0x3F)));\n         }\n     }\n };"
      },
      {
        "sha": "cf27835991162b2a1e7c0053223f36ea26eaa589",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -79,8 +79,6 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n         s += values[i].write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1)) {\n             s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n         }\n         if (prettyIndent)\n             s += \"\\n\";"
      },
      {
        "sha": "7b27cf0da2901bf1438b00efc277d19d7bd6643f",
        "filename": "src/univalue/test/.gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -1,4 +1,8 @@\n+\n+object\n unitester\n+test_json\n+no_nul\n \n *.trs\n *.log"
      },
      {
        "sha": "8feb01a6d0db2a3db29889a623b00ba51d51490b",
        "filename": "src/univalue/test/fail1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail1.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -1 +1 @@\n-\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file\n+\"This is a string that never ends, yes it goes on and on, my friends."
      },
      {
        "sha": "9c7565adbddf645df5edfbdcd630c7a0f94aa2eb",
        "filename": "src/univalue/test/fail42.json",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/fail42.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/fail42.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail42.json?ref=892809309c1bc370677241a715e57a2744f94323"
      },
      {
        "sha": "80edceddf1ef6c90cee1e9f979a0d31b1630bca4",
        "filename": "src/univalue/test/fail44.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/fail44.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/fail44.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail44.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1 @@\n+\"This file ends without a newline or close-quote.\n\\ No newline at end of file"
      },
      {
        "sha": "83d292200bf875126f7a25f1c5b032beec9ed6dd",
        "filename": "src/univalue/test/no_nul.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/no_nul.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/no_nul.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/no_nul.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1,8 @@\n+#include \"univalue.h\"\n+\n+int main (int argc, char *argv[])\n+{\n+    char buf[] = \"___[1,2,3]___\";\n+    UniValue val;\n+    return val.read(buf + 3, 7) ? 0 : 1;\n+}"
      },
      {
        "sha": "02446292a1aa4a3a76a2f7a1ed7f1a22cc138a56",
        "filename": "src/univalue/test/object.cpp",
        "status": "added",
        "additions": 395,
        "deletions": 0,
        "changes": 395,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1,395 @@\n+// Copyright (c) 2014 BitPay Inc.\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include <cassert>\n+#include <stdexcept>\n+#include <univalue.h>\n+\n+#define BOOST_FIXTURE_TEST_SUITE(a, b)\n+#define BOOST_AUTO_TEST_CASE(funcName) void funcName()\n+#define BOOST_AUTO_TEST_SUITE_END()\n+#define BOOST_CHECK(expr) assert(expr)\n+#define BOOST_CHECK_EQUAL(v1, v2) assert((v1) == (v2))\n+#define BOOST_CHECK_THROW(stmt, excMatch) { \\\n+        try { \\\n+            (stmt); \\\n+        } catch (excMatch & e) { \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+#define BOOST_CHECK_NO_THROW(stmt) { \\\n+        try { \\\n+            (stmt); \\\n+\t} catch (...) { \\\n+\t    assert(0); \\\n+\t} \\\n+    }\n+\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    std::string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_typecheck)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.setNumStr(\"1\"));\n+    BOOST_CHECK(v1.isNum());\n+    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n+\n+    UniValue v2;\n+    BOOST_CHECK(v2.setBool(true));\n+    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n+    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n+\n+    UniValue v3;\n+    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n+    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n+    BOOST_CHECK(v3.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n+\n+    UniValue v4;\n+    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n+    BOOST_CHECK(v4.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n+    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n+    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n+\n+    UniValue v5;\n+    BOOST_CHECK(v5.read(\"[true, 10]\"));\n+    BOOST_CHECK_NO_THROW(v5.get_array());\n+    std::vector<UniValue> vals = v5.getValues();\n+    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n+\n+    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK(v.isNull());\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_array)\n+{\n+    UniValue arr(UniValue::VARR);\n+\n+    UniValue v((int64_t)1023LL);\n+    BOOST_CHECK(arr.push_back(v));\n+\n+    std::string vStr(\"zippy\");\n+    BOOST_CHECK(arr.push_back(vStr));\n+\n+    const char *s = \"pippy\";\n+    BOOST_CHECK(arr.push_back(s));\n+\n+    std::vector<UniValue> vec;\n+    v.setStr(\"boing\");\n+    vec.push_back(v);\n+\n+    v.setStr(\"going\");\n+    vec.push_back(v);\n+\n+    BOOST_CHECK(arr.push_backV(vec));\n+\n+    BOOST_CHECK(arr.push_back((uint64_t) 400ULL));\n+    BOOST_CHECK(arr.push_back((int64_t) -400LL));\n+    BOOST_CHECK(arr.push_back((int) -401));\n+    BOOST_CHECK(arr.push_back(-40.1));\n+\n+    BOOST_CHECK_EQUAL(arr.empty(), false);\n+    BOOST_CHECK_EQUAL(arr.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n+    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n+    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n+    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n+    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n+    BOOST_CHECK_EQUAL(arr[5].getValStr(), \"400\");\n+    BOOST_CHECK_EQUAL(arr[6].getValStr(), \"-400\");\n+    BOOST_CHECK_EQUAL(arr[7].getValStr(), \"-401\");\n+    BOOST_CHECK_EQUAL(arr[8].getValStr(), \"-40.1\");\n+\n+    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n+\n+    arr.clear();\n+    BOOST_CHECK(arr.empty());\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_object)\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    std::string strKey, strVal;\n+    UniValue v;\n+\n+    strKey = \"age\";\n+    v.setInt(100);\n+    BOOST_CHECK(obj.pushKV(strKey, v));\n+\n+    strKey = \"first\";\n+    strVal = \"John\";\n+    BOOST_CHECK(obj.pushKV(strKey, strVal));\n+\n+    strKey = \"last\";\n+    const char *cVal = \"Smith\";\n+    BOOST_CHECK(obj.pushKV(strKey, cVal));\n+\n+    strKey = \"distance\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n+\n+    strKey = \"time\";\n+    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n+\n+    strKey = \"calories\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n+\n+    strKey = \"temperature\";\n+    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n+\n+    UniValue obj2(UniValue::VOBJ);\n+    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n+    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n+\n+    BOOST_CHECK(obj.pushKVs(obj2));\n+\n+    BOOST_CHECK_EQUAL(obj.empty(), false);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n+\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n+    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n+    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n+    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n+    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n+    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n+    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n+    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n+\n+    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n+\n+    BOOST_CHECK(obj.exists(\"age\"));\n+    BOOST_CHECK(obj.exists(\"first\"));\n+    BOOST_CHECK(obj.exists(\"last\"));\n+    BOOST_CHECK(obj.exists(\"distance\"));\n+    BOOST_CHECK(obj.exists(\"time\"));\n+    BOOST_CHECK(obj.exists(\"calories\"));\n+    BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"cat1\"));\n+    BOOST_CHECK(obj.exists(\"cat2\"));\n+\n+    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n+\n+    std::map<std::string, UniValue::VType> objTypes;\n+    objTypes[\"age\"] = UniValue::VNUM;\n+    objTypes[\"first\"] = UniValue::VSTR;\n+    objTypes[\"last\"] = UniValue::VSTR;\n+    objTypes[\"distance\"] = UniValue::VNUM;\n+    objTypes[\"time\"] = UniValue::VNUM;\n+    objTypes[\"calories\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"cat1\"] = UniValue::VNUM;\n+    objTypes[\"cat2\"] = UniValue::VNUM;\n+    BOOST_CHECK(obj.checkObject(objTypes));\n+\n+    objTypes[\"cat2\"] = UniValue::VSTR;\n+    BOOST_CHECK(!obj.checkObject(objTypes));\n+\n+    obj.clear();\n+    BOOST_CHECK(obj.empty());\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n+    BOOST_CHECK_EQUAL(obj.getType(), UniValue::VNULL);\n+\n+    BOOST_CHECK_EQUAL(obj.setObject(), true);\n+    UniValue uv;\n+    uv.setInt(42);\n+    obj.__pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"42\");\n+\n+    uv.setInt(43);\n+    obj.pushKV(\"age\", uv);\n+    BOOST_CHECK_EQUAL(obj.size(), 1);\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"43\");\n+\n+    obj.pushKV(\"name\", \"foo bar\");\n+\n+    std::map<std::string,UniValue> kv;\n+    obj.getObjMap(kv);\n+    BOOST_CHECK_EQUAL(kv[\"age\"].getValStr(), \"43\");\n+    BOOST_CHECK_EQUAL(kv[\"name\"].getValStr(), \"foo bar\");\n+\n+}\n+\n+static const char *json1 =\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n+\n+BOOST_AUTO_TEST_CASE(univalue_readwrite)\n+{\n+    UniValue v;\n+    BOOST_CHECK(v.read(json1));\n+\n+    std::string strJson1(json1);\n+    BOOST_CHECK(v.read(strJson1));\n+\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n+\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n+\n+    UniValue obj = v[1];\n+    BOOST_CHECK(obj.isObject());\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n+\n+    BOOST_CHECK(obj[\"key1\"].isStr());\n+    std::string correctValue(\"str\");\n+    correctValue.push_back('\\0');\n+    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), correctValue);\n+    BOOST_CHECK(obj[\"key2\"].isNum());\n+    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n+    BOOST_CHECK(obj[\"key3\"].isObject());\n+\n+    BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+int main (int argc, char *argv[])\n+{\n+    univalue_constructor();\n+    univalue_typecheck();\n+    univalue_set();\n+    univalue_array();\n+    univalue_object();\n+    univalue_readwrite();\n+    return 0;\n+}\n+"
      },
      {
        "sha": "7182dc2f9b8e47dbcbbaa2e18a47a44f424d491f",
        "filename": "src/univalue/test/round3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round3.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1 @@\n+\"abcdefghijklmnopqrstuvwxyz\""
      },
      {
        "sha": "7f8f011eb73d6043d2e6db9d2c101195ae2801f2",
        "filename": "src/univalue/test/round4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round4.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1 @@\n+7"
      },
      {
        "sha": "27ba77ddaf61532f217964734769a42cdabc17dc",
        "filename": "src/univalue/test/round5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round5.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1 @@\n+true"
      },
      {
        "sha": "c508d5366f70bba37fcc09d128b6537c4adb2c79",
        "filename": "src/univalue/test/round6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round6.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1 @@\n+false"
      },
      {
        "sha": "19765bd501b636fce433540d9e6735f51d66151d",
        "filename": "src/univalue/test/round7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/round7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round7.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1 @@\n+null"
      },
      {
        "sha": "2943bae2b15e928e345af49b5802e7241058a1b5",
        "filename": "src/univalue/test/test_json.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/test_json.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/test_json.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/test_json.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -0,0 +1,24 @@\n+// Test program that can be called by the JSON test suite at\n+// https://github.com/nst/JSONTestSuite.\n+//\n+// It reads JSON input from stdin and exits with code 0 if it can be parsed\n+// successfully. It also pretty prints the parsed JSON value to stdout.\n+\n+#include <iostream>\n+#include <string>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+int main (int argc, char *argv[])\n+{\n+    UniValue val;\n+    if (val.read(string(istreambuf_iterator<char>(cin),\n+                        istreambuf_iterator<char>()))) {\n+        cout << val.write(1 /* prettyIndent */, 4 /* indentLevel */) << endl;\n+        return 0;\n+    } else {\n+        cerr << \"JSON Parse Error.\" << endl;\n+        return 1;\n+    }\n+}"
      },
      {
        "sha": "2c37794a4bdb8fb77fa02d5cbb90291033ef2af4",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -113,6 +113,8 @@ static const char *filenames[] = {\n         \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n         \"fail40.json\",               // invalid unicode: broken UTF-8\n         \"fail41.json\",               // invalid unicode: unfinished UTF-8\n+        \"fail42.json\",               // valid json with garbage following a nul byte\n+        \"fail44.json\",               // unterminated string\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -125,6 +127,11 @@ static const char *filenames[] = {\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n         \"round2.json\",              // unicode\n+        \"round3.json\",              // bare string\n+        \"round4.json\",              // bare number\n+        \"round5.json\",              // bare true\n+        \"round6.json\",              // bare false\n+        \"round7.json\",              // bare null\n };\n \n // Test \\u handling"
      },
      {
        "sha": "de647f98b6cf0727111c11609d2dce25a40905ef",
        "filename": "test/util/data/tt-delin1-out.json",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/tt-delin1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/tt-delin1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-delin1-out.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,\n@@ -200,7 +200,7 @@\n                     \"1E7SGgAZFCHDnVZLuRViX3gUmxpMfdvd2o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.01000001,\n             \"n\": 1,"
      },
      {
        "sha": "067ffe74e791d2d58fd43eeed88cb94cefb4b1d3",
        "filename": "test/util/data/tt-delout1-out.json",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/tt-delout1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/tt-delout1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-delout1-out.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a72ec96bd0d022d1b0c2f9078cdd46b3725b8eecdd001e17b21e3ababad14ecb\",\n             \"vout\": 0,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"493046022100a9b617843b68c284715d3e02fd120479cd0d96a6c43bf01e697fb0a460a21a3a022100ba0a12fbe8b993d4e7911fa3467615765dbe421ddf5c51b57a9c1ee19dcc00ba012103e633b4fa4ceb705c2da712390767199be8ef2448b3095dc01652e11b2b751505\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -185,7 +185,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,"
      },
      {
        "sha": "af7903d1dd915fb05b5a17aeac25a98ffc708d7a",
        "filename": "test/util/data/tt-locktime317000-out.json",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/tt-locktime317000-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/tt-locktime317000-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/tt-locktime317000-out.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"493046022100b4251ecd63778a3dde0155abe4cd162947620ae9ee45a874353551092325b116022100db307baf4ff3781ec520bd18f387948cedd15dc27bafe17c894b0fe6ffffcafa012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a72ec96bd0d022d1b0c2f9078cdd46b3725b8eecdd001e17b21e3ababad14ecb\",\n             \"vout\": 0,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"493046022100a9b617843b68c284715d3e02fd120479cd0d96a6c43bf01e697fb0a460a21a3a022100ba0a12fbe8b993d4e7911fa3467615765dbe421ddf5c51b57a9c1ee19dcc00ba012103e633b4fa4ceb705c2da712390767199be8ef2448b3095dc01652e11b2b751505\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"752f7f69b915637dc1c2f7aed1466ad676f6f3e24cf922809705f664e97ab3c1\",\n             \"vout\": 1,\n@@ -32,7 +32,7 @@\n                 \"hex\": \"473044022079bd62ee09621a3be96b760c39e8ef78170101d46313923c6b07ae60a95c90670220238e51ea29fc70b04b65508450523caedbb11cb4dd5aa608c81487de798925ba0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b0ac9cca2e69cd02410e31b1f4402a25758e71abd1ab06c265ef9077dc05d0ed\",\n             \"vout\": 209,\n@@ -41,7 +41,7 @@\n                 \"hex\": \"48304502207722d6f9038673c86a1019b1c4de2d687ae246477cd4ca7002762be0299de385022100e594a11e3a313942595f7666dcf7078bcb14f1330f4206b95c917e7ec0e82fac012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a135eafb595eaf4c1ea59ccb111cdc0eae1b2c979b226a1e5aa8b76fe2d628df\",\n             \"vout\": 0,\n@@ -50,7 +50,7 @@\n                 \"hex\": \"483045022100a63a4788027b79b65c6f9d9e054f68cf3b4eed19efd82a2d53f70dcbe64683390220526f243671425b2bd05745fcf2729361f985cfe84ea80c7cfc817b93d8134374012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"a5d6bf53ba21140b8a4d554feb00fe8bb9a62430ff9e4624aa2f58a120232aae\",\n             \"vout\": 1,\n@@ -59,7 +59,7 @@\n                 \"hex\": \"493046022100b200ac6db16842f76dab9abe807ce423c992805879bc50abd46ed8275a59d9cf022100c0d518e85dd345b3c29dd4dc47b9a420d3ce817b18720e94966d2fe23413a408012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"1b299cf14f1a22e81ea56d71b7affbd7cf386807bf2b4d4b79a18a54125accb3\",\n             \"vout\": 0,\n@@ -68,7 +68,7 @@\n                 \"hex\": \"483045022100ededc441c3103a6f2bd6cab7639421af0f6ec5e60503bce1e603cf34f00aee1c02205cb75f3f519a13fb348783b21db3085cb5ec7552c59e394fdbc3e1feea43f967012103a621f08be22d1bbdcbe4e527ee4927006aa555fc65e2aafa767d4ea2fe9dfa52\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"071df1cdcb3f0070f9d6af7b0274f02d0be2324a274727cfd288383167531485\",\n             \"vout\": 21,\n@@ -77,7 +77,7 @@\n                 \"hex\": \"483045022100d9eed5413d2a4b4b98625aa6e3169edc4fb4663e7862316d69224454e70cd8ca022061e506521d5ced51dd0ea36496e75904d756a4c4f9fb111568555075d5f68d9a012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b012e500eb7adf7a13ed332dd6ece849f94f7a62bb3eac5babab356d1fc19282\",\n             \"vout\": 9,\n@@ -86,7 +86,7 @@\n                 \"hex\": \"48304502207e84b27139c4c19c828cb1e30c349bba88e4d9b59be97286960793b5ddc0a2af0221008cdc7a951e7f31c20953ed5635fbabf228e80b7047f32faaa0313e7693005177012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"58840fee9c833f2f2d40575842f30f4b8d2553094d06ad88b03d06869acf3d88\",\n             \"vout\": 30,\n@@ -95,7 +95,7 @@\n                 \"hex\": \"4730440220426540dfed9c4ab5812e5f06df705b8bcf307dd7d20f7fa6512298b2a6314f420220064055096e3ca62f6c7352c66a5447767c53f946acdf35025ab3807ddb2fa404012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"e69f9cd16946e570a665245354428a3f507ea69f4568b581e4af98edb3db9766\",\n             \"vout\": 114,\n@@ -104,7 +104,7 @@\n                 \"hex\": \"47304402200a5e673996f2fc88e21cc8613611f08a650bc0370338803591d85d0ec5663764022040b6664a0d1ec83a7f01975b8fde5232992b8ca58bf48af6725d2f92a936ab2e012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"595d1257f654ed2cbe5a65421e8aefd2b4d70b5b6c89a03f1d7e518221fc3f02\",\n             \"vout\": 103,\n@@ -113,7 +113,7 @@\n                 \"hex\": \"493046022100d93b30219c5735f673be5c3b4688366d96f545561c74cb62c6958c00f6960806022100ec8200adcb028f2184fa2a4f6faac7f8bb57cb4503bb7584ac11051fece31b3d012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"06fc818f9555a261248ecd7aad0993eafb5a82ceb2b5c87c3ddfb06671c7f816\",\n             \"vout\": 1,\n@@ -122,7 +122,7 @@\n                 \"hex\": \"483045022100a13934e68d3f5b22b130c4cb33f4da468cffc52323a47fbfbe06b64858162246022047081e0a70ff770e64a2e2d31e5d520d9102268b57a47009a72fe73ec766901801210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"fb416c8155d6bb1d43f9395466ca90a638a7c2dd3ff617aadf3a7ac8f3967b19\",\n             \"vout\": 0,\n@@ -131,7 +131,7 @@\n                 \"hex\": \"49304602210097f1f35d5bdc1a3a60390a1b015b8e7c4f916aa3847aafd969e04975e15bbe70022100a9052eb25517d481f1fda1b129eb1b534da50ea1a51f3ee012dca3601c11b86a0121027a759be8df971a6a04fafcb4f6babf75dc811c5cdaa0734cddbe9b942ce75b34\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3940b9683bd6104ad24c978e640ba4095993cafdb27d2ed91baa27ee61a2d920\",\n             \"vout\": 221,\n@@ -140,7 +140,7 @@\n                 \"hex\": \"483045022012b3138c591bf7154b6fef457f2c4a3c7162225003788ac0024a99355865ff13022100b71b125ae1ffb2e1d1571f580cd3ebc8cd049a2d7a8a41f138ba94aeb982106f012103091137f3ef23f4acfc19a5953a68b2074fae942ad3563ef28c33b0cac9a93adc\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"711b5714d3b5136147c02194cd95bde94a4648c4263ca6f972d86cd1d579f150\",\n             \"vout\": 1,\n@@ -149,7 +149,7 @@\n                 \"hex\": \"483045022100f834ccc8b22ee72712a3e5e6ef4acb8b2fb791b5385b70e2cd4332674d6667f4022024fbda0a997e0c253503f217501f508a4d56edce2c813ecdd9ad796dbeba907401210234b9d9413f247bb78cd3293b7b65a2c38018ba5621ea9ee737f3a6a3523fb4cd\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"6364b5c5efe018430789e7fb4e338209546cae5d9c5f5e300aac68155d861b55\",\n             \"vout\": 27,\n@@ -158,7 +158,7 @@\n                 \"hex\": \"48304502203b2fd1e39ae0e469d7a15768f262661b0de41470daf0fe8c4fd0c26542a0870002210081c57e331f9a2d214457d953e3542904727ee412c63028113635d7224da3dccc012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"0bb57f6e38012c86d4c5a28c904f2675082859147921a707d48961015a3e5057\",\n             \"vout\": 1095,\n@@ -167,7 +167,7 @@\n                 \"hex\": \"48304502206947a9c54f0664ece4430fd4ae999891dc50bb6126bc36b6a15a3189f29d25e9022100a86cfc4e2fdd9e39a20e305cfd1b76509c67b3e313e0f118229105caa0e823c9012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"9b34274814a2540bb062107117f8f3e75ef85d953e9372d8261a3e9dfbc1163f\",\n             \"vout\": 37,\n@@ -176,7 +176,7 @@\n                 \"hex\": \"483045022100c7128fe10b2d38744ae8177776054c29fc8ec13f07207723e70766ab7164847402201d2cf09009b9596de74c0183d1ab832e5edddb7a9965880bb400097e850850f8012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"b86b5cc0d8a7374d94e277850b0a249cb26a7b42ddf014f28a49b8859da64241\",\n             \"vout\": 20,\n@@ -185,7 +185,7 @@\n                 \"hex\": \"48304502203b89a71628a28cc3703d170ca3be77786cff6b867e38a18b719705f8a326578f022100b2a9879e1acf621faa6466c207746a7f3eb4c8514c1482969aba3f2a957f1321012103f1575d6124ac78be398c25b31146d08313c6072d23a4d7df5ac6a9f87346c64c\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"3d0a2353eeec44d3c10aed259038db321912122cd4150048f7bfa4c0ecfee236\",\n             \"vout\": 242,\n@@ -209,7 +209,7 @@\n                     \"1E7SGgAZFCHDnVZLuRViX3gUmxpMfdvd2o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.01000001,\n             \"n\": 1,"
      },
      {
        "sha": "83a86649e0dd43814b46bf03cf86ed1ddc50732f",
        "filename": "test/util/data/txcreate1.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreate1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreate1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreate1.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"bf829c6bcf84579331337659d31f89dfd138f7f7785802d5501c92333145ca7c\",\n             \"vout\": 18,\n@@ -23,7 +23,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967295\n-        }, \n+        },\n         {\n             \"txid\": \"22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc\",\n             \"vout\": 1,\n@@ -47,7 +47,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 4.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "15a4246ae5717e117c12c8c3c220ab842a517562",
        "filename": "test/util/data/txcreatedata1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatedata1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatedata1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata1.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -29,7 +29,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 4.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "cb93c27971fd74cb06dc2d220b34835fdf9c31cf",
        "filename": "test/util/data/txcreatedata2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatedata2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatedata2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata2.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -29,7 +29,7 @@\n                     \"13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"\n                 ]\n             }\n-        }, \n+        },\n         {\n             \"value\": 0.00000000,\n             \"n\": 1,"
      },
      {
        "sha": "dea48ba3731df983da0690cf8b5e5d0d893fae0b",
        "filename": "test/util/data/txcreatedata_seq1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatedata_seq1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatedata_seq1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatedata_seq1.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -14,7 +14,7 @@\n                 \"hex\": \"\"\n             },\n             \"sequence\": 4294967293\n-        }, \n+        },\n         {\n             \"txid\": \"5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f\",\n             \"vout\": 0,"
      },
      {
        "sha": "72e20c869123be493927817e27d492c8f75cf5b5",
        "filename": "test/util/data/txcreatemultisig1.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatemultisig1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892809309c1bc370677241a715e57a2744f94323/test/util/data/txcreatemultisig1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig1.json?ref=892809309c1bc370677241a715e57a2744f94323",
        "patch": "@@ -17,8 +17,8 @@\n                 \"reqSigs\": 2,\n                 \"type\": \"multisig\",\n                 \"addresses\": [\n-                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\", \n-                    \"1FXtz9KU8JNmQDyHdiEm5HDiALuP3zdHvV\", \n+                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\",\n+                    \"1FXtz9KU8JNmQDyHdiEm5HDiALuP3zdHvV\",\n                     \"14LuavcBbXZYJ6Tsz3cAUQj9SuQoL2xCQX\"\n                 ]\n             }"
      }
    ]
  },
  {
    "sha": "c5dfa90aab53832c9ad339360d11d6635a26ba6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWRmYTkwYWFiNTM4MzJjOWFkMzM5MzYwZDExZDY2MzVhMjZiYTZi",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-10-11T19:56:31Z"
      },
      "committer": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-10-11T20:19:16Z"
      },
      "message": "[tests] Add uacomment tests\n\nChecks for setting the value, max length and reserved characters",
      "tree": {
        "sha": "0a037a0d8ff328cf81b04190cedcd29ceb296da3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a037a0d8ff328cf81b04190cedcd29ceb296da3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5dfa90aab53832c9ad339360d11d6635a26ba6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5dfa90aab53832c9ad339360d11d6635a26ba6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5dfa90aab53832c9ad339360d11d6635a26ba6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5dfa90aab53832c9ad339360d11d6635a26ba6b/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "892809309c1bc370677241a715e57a2744f94323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892809309c1bc370677241a715e57a2744f94323",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/892809309c1bc370677241a715e57a2744f94323"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd82f9513af6a21445a4073c06b288e94d24b889",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5dfa90aab53832c9ad339360d11d6635a26ba6b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5dfa90aab53832c9ad339360d11d6635a26ba6b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c5dfa90aab53832c9ad339360d11d6635a26ba6b",
        "patch": "@@ -124,6 +124,7 @@\n     'resendwallettransactions.py',\n     'minchainwork.py',\n     'p2p-fingerprint.py',\n+    'uacomment.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      },
      {
        "sha": "0b2c64ab697de9f644656b76fb5154e6e525b094",
        "filename": "test/functional/uacomment.py",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5dfa90aab53832c9ad339360d11d6635a26ba6b/test/functional/uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5dfa90aab53832c9ad339360d11d6635a26ba6b/test/functional/uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uacomment.py?ref=c5dfa90aab53832c9ad339360d11d6635a26ba6b",
        "patch": "@@ -0,0 +1,35 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -uacomment option.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class UacommentTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"test multiple -uacomment\")\n+        test_uacomment = self.nodes[0].getnetworkinfo()[\"subversion\"][-12:-1]\n+        assert_equal(test_uacomment, \"(testnode0)\")\n+\n+        self.restart_node(0, [\"-uacomment=foo\"])\n+        foo_uacomment = self.nodes[0].getnetworkinfo()[\"subversion\"][-17:-1]\n+        assert_equal(foo_uacomment, \"(testnode0; foo)\")\n+\n+        self.log.info(\"test -uacomment max length\")\n+        self.stop_node(0)\n+        expected = \"Total length of network version string (286) exceeds maximum length (256). Reduce the number or size of uacomments.\"\n+        self.assert_start_raises_init_error(0, [\"-uacomment=\" + 'a' * 256], expected)\n+\n+        self.log.info(\"test -uacomment unsafe characters\")\n+        for unsafe_char in ['/', ':', '(', ')']:\n+            expected = \"User Agent comment (\" + unsafe_char + \") contains unsafe characters\"\n+            self.assert_start_raises_init_error(0, [\"-uacomment=\" + unsafe_char], expected)\n+\n+if __name__ == '__main__':\n+    UacommentTest().main()"
      }
    ]
  },
  {
    "sha": "a865b38bf33202b66ee2e72912fe164aa2a504c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODY1YjM4YmYzMzIwMmI2NmVlMmU3MjkxMmZlMTY0YWEyYTUwNGM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T11:39:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T11:40:16Z"
      },
      "message": "Merge #11133: Document assumptions that are being made to avoid division by zero\n\n55509f1 Document assumptions that are being made to avoid division by zero (practicalswift)\n\nPull request description:\n\n  Document assumptions (via `assert(\u2026)`:s) that are being made to avoid division by zero.\n\n  Rationale:\n  * Make it clear to human reviewers and non-human static analyzers that what might look like potential division by zero cases are written the way they are intentionally (these cases are currently flagged by various static analyzers).\n\nTree-SHA512: bbb67b1370afd8f39bda35f9e3a20f4325f017d94cc1bfac3b0d36c9f34c2d95a9efe11efe44db29fb4aadd25d8276d8f0e03c8806ac64f0d21d821912e13b8e",
      "tree": {
        "sha": "13920b9ff109eb67c22ee9dac3472d903ae0e549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13920b9ff109eb67c22ee9dac3472d903ae0e549"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a865b38bf33202b66ee2e72912fe164aa2a504c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ31SgAAoJEB5K7WKYbNJdISQH/1u41C+0mXIHYsMeHQRuVnaS\nZnQjxgRe+UfSvfSPa/OAjh61q+z+uJJzpUMp6aa++heIYyjT/q8+Pz7idvLhcqnK\n8Fi6VzAobUDfPfVnC6viWTEiuJ7QoJLw1U+/59fcuWmkoCJ+R59104k5mtFRq84h\n2etdVa+PaKEWxggh7aIwcga7/XCSFtsgoIT9ya+vIihkedlp53NS4mObvxAV2D/A\ncEOxMQMBs53J0uQSBu3hqryQp8V6Lt13nTr89a936nJs/sni6fEMa4SfZKC+CVQ+\njXcKptaUUVaXKVCJPal5/z1F0czD6FvagzVqR711m2fy974QsZSQX15CrQ/v3MI=\n=0yq0\n-----END PGP SIGNATURE-----",
        "payload": "tree 13920b9ff109eb67c22ee9dac3472d903ae0e549\nparent 892809309c1bc370677241a715e57a2744f94323\nparent 55509f1a11003837714071d05ea878b340757a76\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507808396 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507808416 +0200\n\nMerge #11133: Document assumptions that are being made to avoid division by zero\n\n55509f1 Document assumptions that are being made to avoid division by zero (practicalswift)\n\nPull request description:\n\n  Document assumptions (via `assert(\u2026)`:s) that are being made to avoid division by zero.\n\n  Rationale:\n  * Make it clear to human reviewers and non-human static analyzers that what might look like potential division by zero cases are written the way they are intentionally (these cases are currently flagged by various static analyzers).\n\nTree-SHA512: bbb67b1370afd8f39bda35f9e3a20f4325f017d94cc1bfac3b0d36c9f34c2d95a9efe11efe44db29fb4aadd25d8276d8f0e03c8806ac64f0d21d821912e13b8e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a865b38bf33202b66ee2e72912fe164aa2a504c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a865b38bf33202b66ee2e72912fe164aa2a504c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a865b38bf33202b66ee2e72912fe164aa2a504c7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "892809309c1bc370677241a715e57a2744f94323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892809309c1bc370677241a715e57a2744f94323",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/892809309c1bc370677241a715e57a2744f94323"
      },
      {
        "sha": "55509f1a11003837714071d05ea878b340757a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55509f1a11003837714071d05ea878b340757a76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55509f1a11003837714071d05ea878b340757a76"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dcf49de5f1c9774425185efa47b9c2924eef9f48",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a865b38bf33202b66ee2e72912fe164aa2a504c7/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a865b38bf33202b66ee2e72912fe164aa2a504c7/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a865b38bf33202b66ee2e72912fe164aa2a504c7",
        "patch": "@@ -503,6 +503,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n         }\n     }\n     if (!inBlock && (unsigned int)blocksAgo >= scale) { // Only counts as a failure if not confirmed for entire period\n+        assert(scale != 0);\n         unsigned int periodsAgo = blocksAgo / scale;\n         for (size_t i = 0; i < periodsAgo && i < failAvg.size(); i++) {\n             failAvg[i][bucketindex]++;"
      },
      {
        "sha": "6952eb5064d64c2f9585f9a64d3df97cd1f93d0f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a865b38bf33202b66ee2e72912fe164aa2a504c7/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a865b38bf33202b66ee2e72912fe164aa2a504c7/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a865b38bf33202b66ee2e72912fe164aa2a504c7",
        "patch": "@@ -582,6 +582,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     QString toolTipDust = tr(\"This label turns red if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n+    assert(nBytes != 0);\n     double dFeeVary = (double)nPayFee / nBytes;\n \n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);"
      },
      {
        "sha": "50c1375f447a83dc6c58ad15e7a659f58e543ad9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a865b38bf33202b66ee2e72912fe164aa2a504c7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a865b38bf33202b66ee2e72912fe164aa2a504c7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a865b38bf33202b66ee2e72912fe164aa2a504c7",
        "patch": "@@ -2704,6 +2704,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                     if (recipient.fSubtractFeeFromAmount)\n                     {\n+                        assert(nSubtractFeeFromAmount != 0);\n                         txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n \n                         if (fFirst) // first receiver pays the remainder not divisible by output count"
      }
    ]
  },
  {
    "sha": "3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmI3N2ViZWU2ZTNjOWZmNGIxZDQwODEyMjY2MTY2Yzk4N2Q1ZjU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T11:41:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T11:41:12Z"
      },
      "message": "Merge #11073: Remove dead store in ecdsa_signature_parse_der_lax.\n\nbfebc0b Remove dead store in ecdsa_signature_parse_der_lax. (Eelis)\n\nPull request description:\n\n  This was one of the issues found by Clang's static analyzer (#9573).\n\nTree-SHA512: 3674c56ccdc750bfe42e41d56b1f2058b6921c5354f7e757f6af10a759c5be75e23d6c7932a4524b9a24da308f426803b11deffbfcf09a5898a4204ee61d16d2",
      "tree": {
        "sha": "f7d1e2308249233b0ddab2c6394d9aa5ef55500d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7d1e2308249233b0ddab2c6394d9aa5ef55500d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ31TYAAoJEB5K7WKYbNJdvlQH/1l+CdrPJ67cOuQvCG5iqrTc\nXu8JiWAhFRmCmzYe+SWqFeXSK8PLCY+I/bq5pJNT45iA0XhBq1rFzGSL6zljOMgo\naLvNJDZValu3QtrARFcTRrPjEIJ9ToJXdxQMrpnYWIh8YqrD3h5XDrmMacDWduCD\nqPMLZ0YyD9cUlR36HPjTPIpBJBh8VPKtqtlEUFeRTMHtidk3FAmI8Crr35FNHhf2\nXT+ST4wm/4h7U4W0PyQ+LDFSnZAHQzhNXmzzy7aOGeAvkHIdHxur4QWWHsOJJ6j2\ngPqYz6VVchymmqHsje2UW8Slmh9TqoOFdCQq3MWkdrN4y07EMSdqhRekX1SLHeQ=\n=vZZE\n-----END PGP SIGNATURE-----",
        "payload": "tree f7d1e2308249233b0ddab2c6394d9aa5ef55500d\nparent a865b38bf33202b66ee2e72912fe164aa2a504c7\nparent bfebc0b8071beb82e20afa2b5d751a5c6e725329\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507808465 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507808472 +0200\n\nMerge #11073: Remove dead store in ecdsa_signature_parse_der_lax.\n\nbfebc0b Remove dead store in ecdsa_signature_parse_der_lax. (Eelis)\n\nPull request description:\n\n  This was one of the issues found by Clang's static analyzer (#9573).\n\nTree-SHA512: 3674c56ccdc750bfe42e41d56b1f2058b6921c5354f7e757f6af10a759c5be75e23d6c7932a4524b9a24da308f426803b11deffbfcf09a5898a4204ee61d16d2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb77ebee6e3c9ff4b1d40812266166c987d5f57/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a865b38bf33202b66ee2e72912fe164aa2a504c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a865b38bf33202b66ee2e72912fe164aa2a504c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a865b38bf33202b66ee2e72912fe164aa2a504c7"
      },
      {
        "sha": "bfebc0b8071beb82e20afa2b5d751a5c6e725329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfebc0b8071beb82e20afa2b5d751a5c6e725329",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfebc0b8071beb82e20afa2b5d751a5c6e725329"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2dd0a87fc9a1747434bc84643d0fde091f70b040",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bb77ebee6e3c9ff4b1d40812266166c987d5f57/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bb77ebee6e3c9ff4b1d40812266166c987d5f57/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
        "patch": "@@ -126,7 +126,6 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n         return 0;\n     }\n     spos = pos;\n-    pos += slen;\n \n     /* Ignore leading zeroes in R */\n     while (rlen > 0 && input[rpos] == 0) {"
      }
    ]
  },
  {
    "sha": "f74459dba6de4d4462860318f6ee5bda8522e07b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzQ0NTlkYmE2ZGU0ZDQ0NjI4NjAzMThmNmVlNWJkYTg1MjJlMDdi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T12:53:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T12:54:26Z"
      },
      "message": "Merge #11277: Fix uninitialized URI in batch RPC requests\n\n4526d21 Add test for multiwallet batch RPC calls (Russell Yanofsky)\n74182f2 Add missing batch rpc calls to python coverage logs (Russell Yanofsky)\n505530c Add missing multiwallet rpc calls to python coverage logs (Russell Yanofsky)\n9f67646 Make AuthServiceProxy._batch method usable (Russell Yanofsky)\ne02007a Limit AuthServiceProxyWrapper.__getattr__ wrapping (Russell Yanofsky)\nedafc71 Fix uninitialized URI in batch RPC requests (Russell Yanofsky)\n\nPull request description:\n\n  This fixes \"Wallet file not specified\" errors when making batch wallet RPC calls with more than one wallet loaded. This issue was reported by @NicolasDorier in https://github.com/bitcoin/bitcoin/issues/11257\n\n  Request URI is not used for anything except multiwallet request dispatching, so this change has no other effect.\n\nTree-SHA512: b3907af48a6323f864bb045ee2fa56b604188b835025ef82ba3d81673244c04228d796323cec208a676e7cd578a95ec7c7ba1e84d0158b93844d5dda8f6589b9",
      "tree": {
        "sha": "4a44b7ac13a6010c04c02aac4fd159488afcbbc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a44b7ac13a6010c04c02aac4fd159488afcbbc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f74459dba6de4d4462860318f6ee5bda8522e07b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ32YCAAoJEB5K7WKYbNJdxEIH/1TTnr+46pO+jvngCq5cz3xA\nPvYycrniY1IxmtmQOje9W3XbXL4Q23gTu02GTVpezyt28svDCTgVVXFo0ZyPYYgV\ne82R+HDHo1hlErqVNKdze8XxTOqUU9Db2O/3Eh+kOH4RX/CaTWAUh6mDU+xPw25T\n3lYoOnW4u5TBvf4wpTi+Hqm195HT5L1eJ1hmr7hVz10pVZdlY1wcUaCp1/Ir2haM\nm3A0WnxsxxF0Pk7yaer2f8aZLUT0zNlhL4wRbN7MMVLUJSKf88IPLeOxBgHdFQH+\nMlT5joLuuz9SUngFs8S5G4AScSv7B2Zaooyw+2askLH3NL048WhPuBTisTKg3fI=\n=Hmx1\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a44b7ac13a6010c04c02aac4fd159488afcbbc8\nparent 3bb77ebee6e3c9ff4b1d40812266166c987d5f57\nparent 4526d21e52aa94f12121fcf01047c04f82c4990a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507812813 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507812866 +0200\n\nMerge #11277: Fix uninitialized URI in batch RPC requests\n\n4526d21 Add test for multiwallet batch RPC calls (Russell Yanofsky)\n74182f2 Add missing batch rpc calls to python coverage logs (Russell Yanofsky)\n505530c Add missing multiwallet rpc calls to python coverage logs (Russell Yanofsky)\n9f67646 Make AuthServiceProxy._batch method usable (Russell Yanofsky)\ne02007a Limit AuthServiceProxyWrapper.__getattr__ wrapping (Russell Yanofsky)\nedafc71 Fix uninitialized URI in batch RPC requests (Russell Yanofsky)\n\nPull request description:\n\n  This fixes \"Wallet file not specified\" errors when making batch wallet RPC calls with more than one wallet loaded. This issue was reported by @NicolasDorier in https://github.com/bitcoin/bitcoin/issues/11257\n\n  Request URI is not used for anything except multiwallet request dispatching, so this change has no other effect.\n\nTree-SHA512: b3907af48a6323f864bb045ee2fa56b604188b835025ef82ba3d81673244c04228d796323cec208a676e7cd578a95ec7c7ba1e84d0158b93844d5dda8f6589b9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74459dba6de4d4462860318f6ee5bda8522e07b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f74459dba6de4d4462860318f6ee5bda8522e07b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74459dba6de4d4462860318f6ee5bda8522e07b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb77ebee6e3c9ff4b1d40812266166c987d5f57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb77ebee6e3c9ff4b1d40812266166c987d5f57"
      },
      {
        "sha": "4526d21e52aa94f12121fcf01047c04f82c4990a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4526d21e52aa94f12121fcf01047c04f82c4990a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4526d21e52aa94f12121fcf01047c04f82c4990a"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 33,
      "deletions": 23
    },
    "files": [
      {
        "sha": "93f0a18668b43c5139c261f74c13a080c4d4c556",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74459dba6de4d4462860318f6ee5bda8522e07b/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74459dba6de4d4462860318f6ee5bda8522e07b/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=f74459dba6de4d4462860318f6ee5bda8522e07b",
        "patch": "@@ -192,7 +192,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n         // array of requests\n         } else if (valRequest.isArray())\n-            strReply = JSONRPCExecBatch(valRequest.get_array());\n+            strReply = JSONRPCExecBatch(jreq, valRequest.get_array());\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n "
      },
      {
        "sha": "39bcfc6903f787fa52f2b742c59e289a698c4953",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74459dba6de4d4462860318f6ee5bda8522e07b/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74459dba6de4d4462860318f6ee5bda8522e07b/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=f74459dba6de4d4462860318f6ee5bda8522e07b",
        "patch": "@@ -389,11 +389,10 @@ bool IsDeprecatedRPCEnabled(const std::string& method)\n     return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n }\n \n-static UniValue JSONRPCExecOne(const UniValue& req)\n+static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n-    JSONRPCRequest jreq;\n     try {\n         jreq.parse(req);\n \n@@ -413,11 +412,11 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n     return rpc_result;\n }\n \n-std::string JSONRPCExecBatch(const UniValue& vReq)\n+std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n {\n     UniValue ret(UniValue::VARR);\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n-        ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n+        ret.push_back(JSONRPCExecOne(jreq, vReq[reqIdx]));\n \n     return ret.write() + \"\\n\";\n }"
      },
      {
        "sha": "74c4a9e801917c18e9555c33bdb61e667555481b",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74459dba6de4d4462860318f6ee5bda8522e07b/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74459dba6de4d4462860318f6ee5bda8522e07b/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=f74459dba6de4d4462860318f6ee5bda8522e07b",
        "patch": "@@ -191,7 +191,7 @@ extern std::string HelpExampleRpc(const std::string& methodname, const std::stri\n bool StartRPC();\n void InterruptRPC();\n void StopRPC();\n-std::string JSONRPCExecBatch(const UniValue& vReq);\n+std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n \n // Retrieves any serialization flags requested in command line argument\n int RPCSerializationFlags();"
      },
      {
        "sha": "f55da7681913548517db62cefd8674195f7d8072",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74459dba6de4d4462860318f6ee5bda8522e07b/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74459dba6de4d4462860318f6ee5bda8522e07b/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=f74459dba6de4d4462860318f6ee5bda8522e07b",
        "patch": "@@ -76,5 +76,9 @@ def run_test(self):\n         assert_equal(w2.getbalance(), 1)\n         assert_equal(w3.getbalance(), 2)\n \n+        batch = w1.batch([w1.getblockchaininfo.get_request(), w1.getwalletinfo.get_request()])\n+        assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")\n+        assert_equal(batch[1][\"result\"][\"walletname\"], \"w1\")\n+\n if __name__ == '__main__':\n     MultiWalletTest().main()"
      },
      {
        "sha": "747bda309c5521be916d9b81d15484b66a7e4f5b",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74459dba6de4d4462860318f6ee5bda8522e07b/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74459dba6de4d4462860318f6ee5bda8522e07b/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=f74459dba6de4d4462860318f6ee5bda8522e07b",
        "patch": "@@ -138,17 +138,20 @@ def _request(self, method, path, postdata):\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n \n-    def __call__(self, *args, **argsn):\n+    def get_request(self, *args, **argsn):\n         AuthServiceProxy.__id_count += 1\n \n         log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n                                  json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         if args and argsn:\n             raise ValueError('Cannot handle both named and positional arguments')\n-        postdata = json.dumps({'version': '1.1',\n-                               'method': self._service_name,\n-                               'params': args or argsn,\n-                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n+        return {'version': '1.1',\n+                'method': self._service_name,\n+                'params': args or argsn,\n+                'id': AuthServiceProxy.__id_count}\n+\n+    def __call__(self, *args, **argsn):\n+        postdata = json.dumps(self.get_request(*args, **argsn), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:\n             raise JSONRPCException(response['error'])\n@@ -158,7 +161,7 @@ def __call__(self, *args, **argsn):\n         else:\n             return response['result']\n \n-    def _batch(self, rpc_call_list):\n+    def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         log.debug(\"--> \"+postdata)\n         return self._request('POST', self.__url.path, postdata.encode('utf-8'))"
      },
      {
        "sha": "84049e76bc2121549577c556d635a53943191f33",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74459dba6de4d4462860318f6ee5bda8522e07b/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74459dba6de4d4462860318f6ee5bda8522e07b/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=f74459dba6de4d4462860318f6ee5bda8522e07b",
        "patch": "@@ -31,10 +31,11 @@ def __init__(self, auth_service_proxy_instance, coverage_logfile=None):\n         self.auth_service_proxy_instance = auth_service_proxy_instance\n         self.coverage_logfile = coverage_logfile\n \n-    def __getattr__(self, *args, **kwargs):\n-        return_val = self.auth_service_proxy_instance.__getattr__(\n-            *args, **kwargs)\n-\n+    def __getattr__(self, name):\n+        return_val = getattr(self.auth_service_proxy_instance, name)\n+        if not isinstance(return_val, type(self.auth_service_proxy_instance)):\n+            # If proxy getattr returned an unwrapped value, do the same here.\n+            return return_val\n         return AuthServiceProxyWrapper(return_val, self.coverage_logfile)\n \n     def __call__(self, *args, **kwargs):\n@@ -44,20 +45,23 @@ def __call__(self, *args, **kwargs):\n \n         \"\"\"\n         return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\n+        self._log_call()\n+        return return_val\n+\n+    def _log_call(self):\n         rpc_method = self.auth_service_proxy_instance._service_name\n \n         if self.coverage_logfile:\n             with open(self.coverage_logfile, 'a+', encoding='utf8') as f:\n                 f.write(\"%s\\n\" % rpc_method)\n \n-        return return_val\n-\n-    @property\n-    def url(self):\n-        return self.auth_service_proxy_instance.url\n-\n     def __truediv__(self, relative_uri):\n-        return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri)\n+        return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri,\n+                                       self.coverage_logfile)\n+\n+    def get_request(self, *args, **kwargs):\n+        self._log_call()\n+        return self.auth_service_proxy_instance.get_request(*args, **kwargs)\n \n def get_filename(dirname, n_node):\n     \"\"\""
      }
    ]
  },
  {
    "sha": "c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzcxNzBmYmRiZGZjZDJiYTgzMGExNzU1NDUwYTJlNTQ2OWY0ZTM1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-19T15:05:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-12T18:59:21Z"
      },
      "message": "[Wallet] add rescanblockchain <start_height> <stop_height> RPC command",
      "tree": {
        "sha": "fca101eb24308c9f68f7cf629e3263dff6015fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fca101eb24308c9f68f7cf629e3263dff6015fae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnfu4oACgkQHrd2uwPH\nki1o9g/+Kob6Si/uvcexRSfLGRyoOtSwjq6uWt2HUBIbZ9TwdHbmaTuMgbt1aKXy\nSaRJeNhMSgYEdA6O8XTrNXV9Ru4ihMGm/aT3tPH03LB08U/ObHTQMTI9uJzlhDNW\nCIg0JFBYoXzz8rZP8C6Vgg5CZN6Z30eHkG5q5ANQ+YNG6LscU4BokpXkjT9G0Mle\nrsLjtj/bWxrnyRAf0fKU61zVCLODESQ4kVFWFAz01KeGYacO5bHJId1kBQKXePDi\nZ2vs0BPYNaoOtfz3phN9rXqaSRhPDbup3LOBcM8Fn9aT0hK4qRS/dU5wZX6J5vHm\n9wL8rF8AYYG3BQm0Je7S7wL/FJHiSTFHeenIOmgetJABqmx+nkxOKCTepta6UvUf\nI4Olqw8tMF3DPUCVbbShkYrzkr+2/sv3lO08ltLoDcKJn0Ae0wgsPvXm4pMXqTHa\nJUcf/y64v5id3VI4bnv9tKnS1h/hJ5/3vOL/96NEjygu8/L5CHff1X3lzKQ0o0O7\nYCDt8KoKgCdK9Z0t5LDrvIPIaIJLJdnbIinMPaBBYg3CV2LGwsnMY1PUkly/Poua\n0aFjpgMPxLgA6Ip9lAUXeP4d47IdhO29mt2uG4heMf7zI0zawIVhCrUIPLqVmdGi\nnPNsOjouBYcIivM08KVpS/xYHWxKBUJ6ko1K2q/CO5pNcajhNY8=\n=4cdt\n-----END PGP SIGNATURE-----",
        "payload": "tree fca101eb24308c9f68f7cf629e3263dff6015fae\nparent 777519bd96f68c18150a0f5942f8f97a91937f5e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447945537 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507834761 -0700\n\n[Wallet] add rescanblockchain <start_height> <stop_height> RPC command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "777519bd96f68c18150a0f5942f8f97a91937f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/777519bd96f68c18150a0f5942f8f97a91937f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/777519bd96f68c18150a0f5942f8f97a91937f5e"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 97,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ebd9102f84b5a57e40b88ffbd525f6b0e275099d",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -157,7 +157,7 @@ void TestSendCoins()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), true);\n+    wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "d471cef0799aa9c46642418247f8150def56c3c2",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -140,6 +140,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"echojson\", 7, \"arg7\" },\n     { \"echojson\", 8, \"arg8\" },\n     { \"echojson\", 9, \"arg9\" },\n+    { \"rescanblockchain\", 0, \"start_height\"},\n+    { \"rescanblockchain\", 1, \"stop_height\"},\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "09075c6e9429362cb14d90de27364a4b951cfa2f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -3169,6 +3169,81 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue rescanblockchain(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"rescanblockchain (\\\"start_height\\\") (\\\"stop_height\\\")\\n\"\n+            \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start_height\\\"    (numeric, optional) block height where the rescan should start\\n\"\n+            \"2. \\\"stop_height\\\"     (numeric, optional) the last block height that should be scanned\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"start_height\\\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.\\n\"\n+            \"  \\\"stop_height\\\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n+            + HelpExampleRpc(\"rescanblockchain\", \"100000 120000\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBlockIndex *pindexStart = chainActive.Genesis();\n+    CBlockIndex *pindexStop = nullptr;\n+    if (!request.params[0].isNull()) {\n+        pindexStart = chainActive[request.params[0].get_int()];\n+        if (!pindexStart) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n+        }\n+    }\n+\n+    if (!request.params[1].isNull()) {\n+        pindexStop = chainActive[request.params[1].get_int()];\n+        if (!pindexStop) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+        }\n+        else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater then start_height\");\n+        }\n+    }\n+\n+    // We can't rescan beyond non-pruned blocks, stop and throw an error\n+    if (fPruneMode) {\n+        CBlockIndex *block = pindexStop ? pindexStop : chainActive.Tip();\n+        while (block && block->nHeight >= pindexStart->nHeight) {\n+            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+            }\n+            block = block->pprev;\n+        }\n+    }\n+\n+    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, true);\n+    if (!stopBlock) {\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n+        }\n+        // if we got a nullptr returned, ScanForWalletTransactions did rescan up to the requested stopindex\n+        stopBlock = pindexStop ? pindexStop : chainActive.Tip();\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n+    }\n+\n+    UniValue response(UniValue::VOBJ);\n+    response.pushKV(\"start_height\", pindexStart->nHeight);\n+    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    return response;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3179,6 +3254,7 @@ extern UniValue importwallet(const JSONRPCRequest& request);\n extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n extern UniValue importmulti(const JSONRPCRequest& request);\n+extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           argNames\n@@ -3233,6 +3309,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n \n     { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n };"
      },
      {
        "sha": "2b12168c65c02976b0d2bf19419987580c0b3550",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -386,7 +386,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -399,7 +399,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -604,7 +604,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n-        wallet->ScanForWalletTransactions(chainActive.Genesis());\n+        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "efa93e6384551c615f78fda0a650460f3640ece8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -1539,7 +1539,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, update);\n         if (failedBlock) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n@@ -1555,12 +1555,19 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n+ *\n+ * If pindexStop is not a nullptr, the scan will stop at the block-index\n+ * defined by pindexStop\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n+    if (pindexStop) {\n+        assert(pindexStop->nHeight >= pindexStart->nHeight);\n+    }\n+\n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = nullptr;\n     {\n@@ -1588,6 +1595,9 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             } else {\n                 ret = pindex;\n             }\n+            if (pindex == pindexStop) {\n+                break;\n+            }\n             pindex = chainActive.Next(pindex);\n         }\n         if (pindex && fAbortRescan) {\n@@ -3903,7 +3913,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n \n         nStart = GetTimeMillis();\n-        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n+        walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n         walletInstance->dbw->IncrementUpdateCounter();"
      },
      {
        "sha": "3995f55635b6a1868717a67491d22efb94818947",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -919,7 +919,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!"
      }
    ]
  },
  {
    "sha": "7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTkxY2ViNWUwYzlkMjlkZGRmN2I2YWU0Y2JiYTgwMmI3OTA5MjRj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-06T00:37:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-12T18:59:39Z"
      },
      "message": "[QA] Add RPC based rescan test",
      "tree": {
        "sha": "0e45d21b0dcc0a84cf1241e4a75ac80045e3b1af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e45d21b0dcc0a84cf1241e4a75ac80045e3b1af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnfu5sACgkQHrd2uwPH\nki1gCBAAofJa8XSD2YfSZK03Qdc54AVKxoe5iK3IQgNCYtc44OZZGAIug4HHicSD\npHBc4IXcCZkDNI18vC9UscTEqu+0kie5fmuLcFzQRBptw/n6G7gquFau8lNiEPc+\nuGLzp5dn9iJ1pw+gHT2wSzXE9Zxa7y3j7LVaqtGG5KEWY2oWke2PDExclJCjq1Co\n+1NV6fgWwafbehm3SijlQBAjQR8uNCxFsE6lwaq0BGxfsPDG7kZ/XgJjECOGdi9g\nxcnok7RySmHSI/4eVOZDrrStzU053Vuj0Ez847W9txLcC/zwyNYzV/7wOdrAP571\n6Uo+QOCna5pRARsbiPz9VDyhJsiRxKZkDKXJjmfvOopZQK9cH1c2lthgzvlW8t5p\nU5fUmpPAZxxPpX+2VQ4K37F3Mvv+wxB0qMpkv15nuTa8an7FAcEv+UdJlSed6MUQ\ndgqixNDM8hZIbfayc+gtZP9U2VStL0fpEqsuGYjUlvRCYUI9hDB8lgH5GSnuu5Pe\nqEqce3D35rKvMQhN20/OmfHC0DNj0OQAP9QJUM2Hv2HNCMCzJu/nyL7RC87SeZLG\nNZe/GaR8CkTUXDnuy50O+CxzlxFvuuHO+Jb999IpoqKDiggg4MAW6xot3xz6qeu7\n7SViOgL5s7qtojuzPFHoqkxcm/RU0XRH9L9/HoHY+pbDt7hpy60=\n=K5oQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e45d21b0dcc0a84cf1241e4a75ac80045e3b1af\nparent c77170fbdbdfcd2ba830a1755450a2e5469f4e35\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1504658256 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507834779 -0700\n\n[QA] Add RPC based rescan test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c77170fbdbdfcd2ba830a1755450a2e5469f4e35"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 20,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fc5eb190a71a1c4a639973a0df190a0bf684e657",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
        "patch": "@@ -10,6 +10,7 @@\n     connect_nodes_bi,\n )\n import shutil\n+import os\n \n class WalletHDTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -70,9 +71,9 @@ def run_test (self):\n         self.stop_node(1)\n         # we need to delete the complete regtest directory\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n-        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n-        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n-        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -91,6 +92,22 @@ def run_test (self):\n         self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n+        # Try a RPC based rescan\n+        self.stop_node(1)\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        self.start_node(1, extra_args=self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+        out = self.nodes[1].rescanblockchain(0, 1)\n+        assert_equal(out['start_height'], 0)\n+        assert_equal(out['stop_height'], 1)\n+        out = self.nodes[1].rescanblockchain()\n+        assert_equal(out['start_height'], 0)\n+        assert_equal(out['stop_height'], self.nodes[1].getblockcount())\n+        assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n+\n         # send a tx and make sure its using the internal chain for the changeoutput\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         outs = self.nodes[1].decoderawtransaction(self.nodes[1].gettransaction(txid)['hex'])['vout']"
      }
    ]
  },
  {
    "sha": "470c730e3fa9d1120dda1de2d433304023c8aa78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzBjNzMwZTNmYTlkMTEyMGRkYTFkZTJkNDMzMzA0MDIzYzhhYTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T21:49:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-12T21:55:50Z"
      },
      "message": "Merge #10898: Fix invalid checks (NULL checks after dereference, redundant checks, etc.)\n\n76fed83 Avoid NULL pointer dereference when _walletModel is NULL (which is valid) (practicalswift)\n4971a9a Use two boolean literals instead of re-using variable (practicalswift)\nb5fb339 Remove duplicate uriParts.size() > 0 check (practicalswift)\n7466991 Remove redundant check (!ecc is always true) (practicalswift)\n55224af Remove redundant NULL checks after new (practicalswift)\n\nPull request description:\n\n  Contains:\n  * Remove redundant `NULL` checks after throwing `new`\n  * Remove redundant check (`!ecc` is always true)\n  * Remove duplicate `uriParts.size() > 0` check\n  * Use two boolean literals instead of re-using variable\n\nTree-SHA512: 30e9af8a9d5c8184836f8267b492aeb4e26eca171a3be08f634b3f39b3055b9fa9f06623f6c69b294ca13bf99743f7645cfac2b25e014ff74687bd085a997895",
      "tree": {
        "sha": "157f390d230eb95f1a85c02d2154afa5de02d277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/157f390d230eb95f1a85c02d2154afa5de02d277"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/470c730e3fa9d1120dda1de2d433304023c8aa78",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3+TmAAoJEB5K7WKYbNJdmRkH/RYprlQwWejOgk5bOXPxPx5X\nkEQmIydA/jlrDI7Z/SOl0a7UJcbhljsVM+Tn/gF8TDLLclCI7TJby/g8RYwb87Ce\nz9jZxA9tFTM2zqdw4KPX5vIGQSUt2pPaTIXgvhzskQ/kvVsgj9I97gZQhHOe9r9t\nj0gIooeppTUuPsJIrJlSNacQGiGMTgJICq/jCVITHpiJ0cueBsJNToiEEE718fob\nwizEwPxz/YJLwJLv6QYIn0Ynz32jtqIJetlZtTPZihX9G4bKXnynrc6gHpj89GlS\nazbX1kh8ZOtFOm7nX4scdAPyBMyxSfJb5e6mIJNtPDotPuBnJ5trIS/XWOdoMMs=\n=kHlL\n-----END PGP SIGNATURE-----",
        "payload": "tree 157f390d230eb95f1a85c02d2154afa5de02d277\nparent f74459dba6de4d4462860318f6ee5bda8522e07b\nparent 76fed838f381a6efba175f3650ec7e9dc73016d3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507844984 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507845350 +0200\n\nMerge #10898: Fix invalid checks (NULL checks after dereference, redundant checks, etc.)\n\n76fed83 Avoid NULL pointer dereference when _walletModel is NULL (which is valid) (practicalswift)\n4971a9a Use two boolean literals instead of re-using variable (practicalswift)\nb5fb339 Remove duplicate uriParts.size() > 0 check (practicalswift)\n7466991 Remove redundant check (!ecc is always true) (practicalswift)\n55224af Remove redundant NULL checks after new (practicalswift)\n\nPull request description:\n\n  Contains:\n  * Remove redundant `NULL` checks after throwing `new`\n  * Remove redundant check (`!ecc` is always true)\n  * Remove duplicate `uriParts.size() > 0` check\n  * Use two boolean literals instead of re-using variable\n\nTree-SHA512: 30e9af8a9d5c8184836f8267b492aeb4e26eca171a3be08f634b3f39b3055b9fa9f06623f6c69b294ca13bf99743f7645cfac2b25e014ff74687bd085a997895\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470c730e3fa9d1120dda1de2d433304023c8aa78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/470c730e3fa9d1120dda1de2d433304023c8aa78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470c730e3fa9d1120dda1de2d433304023c8aa78/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f74459dba6de4d4462860318f6ee5bda8522e07b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74459dba6de4d4462860318f6ee5bda8522e07b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f74459dba6de4d4462860318f6ee5bda8522e07b"
      },
      {
        "sha": "76fed838f381a6efba175f3650ec7e9dc73016d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76fed838f381a6efba175f3650ec7e9dc73016d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76fed838f381a6efba175f3650ec7e9dc73016d3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 9,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a20222d05cfa27ca53d78ccde99fa26953909828",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470c730e3fa9d1120dda1de2d433304023c8aa78/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470c730e3fa9d1120dda1de2d433304023c8aa78/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=470c730e3fa9d1120dda1de2d433304023c8aa78",
        "patch": "@@ -690,18 +690,18 @@ static void MutateTx(CMutableTransaction& tx, const std::string& command,\n     else if (command == \"outaddr\")\n         MutateTxAddOutAddr(tx, commandVal);\n     else if (command == \"outpubkey\") {\n-        if (!ecc) { ecc.reset(new Secp256k1Init()); }\n+        ecc.reset(new Secp256k1Init());\n         MutateTxAddOutPubKey(tx, commandVal);\n     } else if (command == \"outmultisig\") {\n-        if (!ecc) { ecc.reset(new Secp256k1Init()); }\n+        ecc.reset(new Secp256k1Init());\n         MutateTxAddOutMultiSig(tx, commandVal);\n     } else if (command == \"outscript\")\n         MutateTxAddOutScript(tx, commandVal);\n     else if (command == \"outdata\")\n         MutateTxAddOutData(tx, commandVal);\n \n     else if (command == \"sign\") {\n-        if (!ecc) { ecc.reset(new Secp256k1Init()); }\n+        ecc.reset(new Secp256k1Init());\n         MutateTxSign(tx, commandVal);\n     }\n "
      },
      {
        "sha": "f88982a2a01c98aed8896b7a39364311d2bc434a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470c730e3fa9d1120dda1de2d433304023c8aa78/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470c730e3fa9d1120dda1de2d433304023c8aa78/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=470c730e3fa9d1120dda1de2d433304023c8aa78",
        "patch": "@@ -379,19 +379,17 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n             }\n         }\n         connman->ForNode(nodeid, [connman](CNode* pfrom){\n-            bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n-                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n-                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/false, nCMPCTBLOCKVersion));\n                     return true;\n                 });\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n-            fAnnounceUsingCMPCTBLOCK = true;\n-            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/true, nCMPCTBLOCKVersion));\n             lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n             return true;\n         });"
      },
      {
        "sha": "a56a40037ff3fc5d4045ff7acf0b1251f176639d",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470c730e3fa9d1120dda1de2d433304023c8aa78/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470c730e3fa9d1120dda1de2d433304023c8aa78/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=470c730e3fa9d1120dda1de2d433304023c8aa78",
        "patch": "@@ -122,8 +122,8 @@ void WalletView::setWalletModel(WalletModel *_walletModel)\n     overviewPage->setWalletModel(_walletModel);\n     receiveCoinsPage->setModel(_walletModel);\n     sendCoinsPage->setModel(_walletModel);\n-    usedReceivingAddressesPage->setModel(_walletModel->getAddressTableModel());\n-    usedSendingAddressesPage->setModel(_walletModel->getAddressTableModel());\n+    usedReceivingAddressesPage->setModel(_walletModel ? _walletModel->getAddressTableModel() : nullptr);\n+    usedSendingAddressesPage->setModel(_walletModel ? _walletModel->getAddressTableModel() : nullptr);\n \n     if (_walletModel)\n     {"
      },
      {
        "sha": "4d2cdfdf08c5180bc771b354531884111cbfa19f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470c730e3fa9d1120dda1de2d433304023c8aa78/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470c730e3fa9d1120dda1de2d433304023c8aa78/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=470c730e3fa9d1120dda1de2d433304023c8aa78",
        "patch": "@@ -409,10 +409,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     if (uriParts.size() > 0)\n     {\n-\n         //inputs is sent over URI scheme (/rest/getutxos/checkmempool/txid1-n/txid2-n/...)\n-        if (uriParts.size() > 0 && uriParts[0] == \"checkmempool\")\n-            fCheckMemPool = true;\n+        if (uriParts[0] == \"checkmempool\") fCheckMemPool = true;\n \n         for (size_t i = (fCheckMemPool) ? 1 : 0; i < uriParts.size(); i++)\n         {"
      },
      {
        "sha": "7f6697c780080670e7898f67ccc02d31bb85d561",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470c730e3fa9d1120dda1de2d433304023c8aa78/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470c730e3fa9d1120dda1de2d433304023c8aa78/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=470c730e3fa9d1120dda1de2d433304023c8aa78",
        "patch": "@@ -2613,7 +2613,6 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(block);\n-    assert(pindexNew);\n     // We assign the sequence id to blocks only when the full data is available,\n     // to avoid miners withholding blocks but broadcasting headers, to get a\n     // competitive advantage.\n@@ -3443,8 +3442,6 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n \n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n-    if (!pindexNew)\n-        throw std::runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n "
      }
    ]
  },
  {
    "sha": "424be03305143cbe5da5d5adb54d73d3dc3747b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjRiZTAzMzA1MTQzY2JlNWRhNWQ1YWRiNTRkNzNkM2RjMzc0N2I2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-12T22:28:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-12T22:32:50Z"
      },
      "message": "Merge #10099: Slightly Improve Unit Tests for Checkqueue\n\n8c2f4b888 Expose more parallelism with relaxed atomics (suggested in #9938). Fix a test to check the exclusive or of two properties rather than just or. (Jeremy Rubin)\n\nPull request description:\n\n  This PR is in response to #10026 and some feedback on #9938.\n\n  ~Locally, all the checkqueue tests ran 3.2X faster on my machine. The worst offender, `test_CheckQueue_Correct_Random` ran 3.4X faster.~\n\n  1. ~Removes `GetRand()` and replaces it with a single deterministic FastRandomContext instance.~ #10321 replicated this\n\n  1. Exposes more parallelism with relaxed atomics, increasing chance of catching a bug. This does not change performance on my machine.\n\n  1. Makes one test case more restrictive (xor instead of or, see #9938).\n\nTree-SHA512: a59dfbee0273c713525a130dfedc1c7ff26f50c2aaca1e94ef5d759b1d6ea6338ffbd97f863b9f6209750d8a788a15fa8ae1bf26774ed2473c520811337e6b00",
      "tree": {
        "sha": "991f4532d2afd8091c1821e0afd8fec2fb83c5c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/991f4532d2afd8091c1821e0afd8fec2fb83c5c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/424be03305143cbe5da5d5adb54d73d3dc3747b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ3+2TAAoJEKY26XYx92fg3BUP/iMnH2rb+j/3viVbHQKFIY/3\nl5qhIBEqtjsEOtXH7b/AyrcpCV6TMAytZHdbg1b+OQS9mdPfExlKzPlmMwcJ5vNv\ntQ/iGVoAq7RegdtlTRlRDHJNr0Ce5CLMzpPdV9ED4j9fRLmx6qY/gi74WaQou+Jq\n5jn35KBJNLaocB8bUx4JBoPgos+BqlgO0MhQ/M8Fs/n6U+45j8ed0+p+B0GEpnpW\nmMK/EuT8u/s1wJyhhupxwIy2ew1d3i1wxaiPkRYlLLb6kYeMRq3xnvYlhT350Plk\nJdgLTpZHnaeB31NDBdoWgrLJJrYcZOfAJP6S/3fpqZWkFTNAlso4qL81jloICKHd\n71+t8vWAL4lW7u1YqbnoA/gKl4C3soF61UO6yU4xZVgYbLDys/JcKuHg1cmSu0OI\n2taWg4FNONpySbZn30nunSHQkEYBn41OzCMPUN0gfGTv3cxm/kagOoacfqjkmbbu\nGlZewiQnDX70fywv9+YlM4skncwmCdkFhYVRQr4jhkgBQ+irjOaQfGCvPxdc1y0B\ndDz260XZbD7b+vE5/uyKZCzArxQOylZydku4lCAj6Npp8epUtgC3RLgVu7ZFjbfP\n+mhRYYomfmoM37JHzem2QqcaxZe1Pe585k7aDY/KDuZeOhf0WeNjxoLcl+S8D+wi\nLWSY7SJzJOMXB0QsL6sw\n=NEyV\n-----END PGP SIGNATURE-----",
        "payload": "tree 991f4532d2afd8091c1821e0afd8fec2fb83c5c7\nparent 470c730e3fa9d1120dda1de2d433304023c8aa78\nparent 8c2f4b88828b3e40f6cc690261657e66b2653432\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1507847302 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1507847570 -0700\n\nMerge #10099: Slightly Improve Unit Tests for Checkqueue\n\n8c2f4b888 Expose more parallelism with relaxed atomics (suggested in #9938). Fix a test to check the exclusive or of two properties rather than just or. (Jeremy Rubin)\n\nPull request description:\n\n  This PR is in response to #10026 and some feedback on #9938.\n\n  ~Locally, all the checkqueue tests ran 3.2X faster on my machine. The worst offender, `test_CheckQueue_Correct_Random` ran 3.4X faster.~\n\n  1. ~Removes `GetRand()` and replaces it with a single deterministic FastRandomContext instance.~ #10321 replicated this\n\n  1. Exposes more parallelism with relaxed atomics, increasing chance of catching a bug. This does not change performance on my machine.\n\n  1. Makes one test case more restrictive (xor instead of or, see #9938).\n\nTree-SHA512: a59dfbee0273c713525a130dfedc1c7ff26f50c2aaca1e94ef5d759b1d6ea6338ffbd97f863b9f6209750d8a788a15fa8ae1bf26774ed2473c520811337e6b00\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/424be03305143cbe5da5d5adb54d73d3dc3747b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/424be03305143cbe5da5d5adb54d73d3dc3747b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/424be03305143cbe5da5d5adb54d73d3dc3747b6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "470c730e3fa9d1120dda1de2d433304023c8aa78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470c730e3fa9d1120dda1de2d433304023c8aa78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/470c730e3fa9d1120dda1de2d433304023c8aa78"
      },
      {
        "sha": "8c2f4b88828b3e40f6cc690261657e66b2653432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2f4b88828b3e40f6cc690261657e66b2653432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2f4b88828b3e40f6cc690261657e66b2653432"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c4564b45b00fc0f9c4aeb09faf81537e109d284c",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/424be03305143cbe5da5d5adb54d73d3dc3747b6/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/424be03305143cbe5da5d5adb54d73d3dc3747b6/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "patch": "@@ -38,7 +38,7 @@ struct FakeCheckCheckCompletion {\n     static std::atomic<size_t> n_calls;\n     bool operator()()\n     {\n-        ++n_calls;\n+        n_calls.fetch_add(1, std::memory_order_relaxed);\n         return true;\n     }\n     void swap(FakeCheckCheckCompletion& x){};\n@@ -88,15 +88,15 @@ struct MemoryCheck {\n         //\n         // Really, copy constructor should be deletable, but CCheckQueue breaks\n         // if it is deleted because of internal push_back.\n-        fake_allocated_memory += b;\n+        fake_allocated_memory.fetch_add(b, std::memory_order_relaxed);\n     };\n     MemoryCheck(bool b_) : b(b_)\n     {\n-        fake_allocated_memory += b;\n+        fake_allocated_memory.fetch_add(b, std::memory_order_relaxed);\n     };\n-    ~MemoryCheck(){\n-        fake_allocated_memory -= b;\n-    \n+    ~MemoryCheck()\n+    {\n+        fake_allocated_memory.fetch_sub(b, std::memory_order_relaxed);\n     };\n     void swap(MemoryCheck& x) { std::swap(b, x.b); };\n };\n@@ -117,9 +117,9 @@ struct FrozenCleanupCheck {\n     {\n         if (should_freeze) {\n             std::unique_lock<std::mutex> l(m);\n-            nFrozen = 1;\n+            nFrozen.store(1, std::memory_order_relaxed);\n             cv.notify_one();\n-            cv.wait(l, []{ return nFrozen == 0;});\n+            cv.wait(l, []{ return nFrozen.load(std::memory_order_relaxed) == 0;});\n         }\n     }\n     void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n                 control.Add(vChecks);\n             }\n             bool r =control.Wait();\n-            BOOST_REQUIRE(r || end_fails);\n+            BOOST_REQUIRE(r != end_fails);\n         }\n     }\n     tg.interrupt_all();\n@@ -337,7 +337,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n     tg.join_all();\n }\n \n-// Test that a new verification cannot occur until all checks \n+// Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n@@ -361,11 +361,14 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n         std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);\n         // Wait until the queue has finished all jobs and frozen\n         FrozenCleanupCheck::cv.wait(l, [](){return FrozenCleanupCheck::nFrozen == 1;});\n-        // Try to get control of the queue a bunch of times\n-        for (auto x = 0; x < 100 && !fails; ++x) {\n-            fails = queue->ControlMutex.try_lock();\n-        }\n-        // Unfreeze\n+    }\n+    // Try to get control of the queue a bunch of times\n+    for (auto x = 0; x < 100 && !fails; ++x) {\n+        fails = queue->ControlMutex.try_lock();\n+    }\n+    {\n+        // Unfreeze (we need lock n case of spurious wakeup)\n+        std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);\n         FrozenCleanupCheck::nFrozen = 0;\n     }\n     // Awaken frozen destructor"
      }
    ]
  },
  {
    "sha": "fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTg2MmM1YWQ0YmRjZTZiY2MzYmY4NzEyZDk0NzI1NjFiMjcwYzAy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-26T14:00:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-13T06:41:45Z"
      },
      "message": "Avoid division by zero in the case of a corrupt estimates file",
      "tree": {
        "sha": "574c5a4e1f4c2c4651b4ad5d89cc59257eedea71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/574c5a4e1f4c2c4651b4ad5d89cc59257eedea71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe862c5ad4bdce6bcc3bf8712d9472561b270c02/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/424be03305143cbe5da5d5adb54d73d3dc3747b6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7e57671c0e88b2e904a55ed446feb1c82b175d7",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe862c5ad4bdce6bcc3bf8712d9472561b270c02/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe862c5ad4bdce6bcc3bf8712d9472561b270c02/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
        "patch": "@@ -180,6 +180,7 @@ TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n     : buckets(defaultBuckets), bucketMap(defaultBucketMap)\n {\n     decay = _decay;\n+    assert(_scale != 0 && \"_scale must be non-zero\");\n     scale = _scale;\n     confAvg.resize(maxPeriods);\n     for (unsigned int i = 0; i < maxPeriods; i++) {\n@@ -418,6 +419,9 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n             throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n         }\n         filein >> scale;\n+        if (scale == 0) {\n+            throw std::runtime_error(\"Corrupt estimates file. Scale must be non-zero\");\n+        }\n     }\n \n     filein >> avg;"
      }
    ]
  },
  {
    "sha": "fa9de370b17297d6dd542da627c8dd2b31aec340",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTlkZTM3MGIxNzI5N2Q2ZGQ1NDJkYTYyN2M4ZGQyYjMxYWVjMzQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T22:04:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-13T13:28:56Z"
      },
      "message": "qa: Make tmpdir option an absolute path\n\nThis should fix issues with the multiwallet test and symlinks\nwhen the tmpdir is a relative path.\n\nRather than fixing os.symlink to work with paths relative to a\ndirectory descriptor, which does not work on Windows, normalize\nthe path instead.",
      "tree": {
        "sha": "30f1801e9f639622fdc6d7ab62d669880c87e30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30f1801e9f639622fdc6d7ab62d669880c87e30a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9de370b17297d6dd542da627c8dd2b31aec340",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9de370b17297d6dd542da627c8dd2b31aec340",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9de370b17297d6dd542da627c8dd2b31aec340",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9de370b17297d6dd542da627c8dd2b31aec340/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a93270c55876cc88e1a3e2921e582acc6db318e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a93270c55876cc88e1a3e2921e582acc6db318e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a93270c55876cc88e1a3e2921e582acc6db318e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0e843ee674227b19ff30509dd2b5dc43f57972d9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9de370b17297d6dd542da627c8dd2b31aec340/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9de370b17297d6dd542da627c8dd2b31aec340/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa9de370b17297d6dd542da627c8dd2b31aec340",
        "patch": "@@ -102,8 +102,11 @@ def main(self):\n \n         check_json_precision()\n \n+        self.options.cachedir = os.path.abspath(self.options.cachedir)\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n+            self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n             os.makedirs(self.options.tmpdir, exist_ok=False)\n         else:\n             self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")"
      }
    ]
  },
  {
    "sha": "fafa0039708e15d1067be091b2bfc10195afa480",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZhMDAzOTcwOGUxNWQxMDY3YmUwOTFiMmJmYzEwMTk1YWZhNDgw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-11T20:14:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-13T13:29:18Z"
      },
      "message": "qa: Remove never used return value of sync_with_ping",
      "tree": {
        "sha": "9076398b43cf72c1e8469dff84757bb1beb5b37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9076398b43cf72c1e8469dff84757bb1beb5b37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafa0039708e15d1067be091b2bfc10195afa480",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafa0039708e15d1067be091b2bfc10195afa480",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafa0039708e15d1067be091b2bfc10195afa480",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafa0039708e15d1067be091b2bfc10195afa480/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9de370b17297d6dd542da627c8dd2b31aec340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9de370b17297d6dd542da627c8dd2b31aec340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9de370b17297d6dd542da627c8dd2b31aec340"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9f61ce27da4a44f09e9355fb5587bbdd599a3e3f",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=fafa0039708e15d1067be091b2bfc10195afa480",
        "patch": "@@ -103,7 +103,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         self.log.info(\"First height 2 block accepted by both nodes\")\n@@ -116,7 +117,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -135,7 +137,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():"
      },
      {
        "sha": "453694c435e80d088cc68ad524856c07cf0e7fd7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fafa0039708e15d1067be091b2bfc10195afa480",
        "patch": "@@ -1615,7 +1615,6 @@ def sync_with_ping(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n-        return True\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      }
    ]
  },
  {
    "sha": "44407100ff9b478d6131a1c38ee993b50b1830df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQwNzEwMGZmOWI0NzhkNjEzMWExYzM4ZWU5OTNiNTBiMTgzMGRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-04T21:59:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:25:57Z"
      },
      "message": "Replace relevant services logic with a function suite.\n\nAdds HasAllRelevantServices and GetRelevantServices, which check\nfor NETWORK|WITNESS.\n\nThis changes the following:\n * Removes nRelevantServices from CConnman, disconnecting it a bit\n   more from protocol-level logic.\n * Replaces our sometimes-connect-to-!WITNESS-nodes logic with\n   simply always requiring WITNESS|NETWORK for outbound non-feeler\n   connections (feelers still only require NETWORK).\n * This has the added benefit of removing nServicesExpected from\n   CNode - instead letting net_processing's VERSION message\n   handling simply check HasAllRelevantServices.\n * This implies we believe WITNESS nodes to continue to be a\n   significant majority of nodes on the network, but also because\n   we cannot sync properly from !WITNESS nodes, it is strange to\n   continue using our valuable outbound slots on them.\n * In order to prevent this change from preventing connection to\n   -connect= nodes which have !WITNESS, -connect nodes are now\n   given the \"addnode\" flag. This also allows outbound connections\n   to !NODE_NETWORK nodes for -connect nodes (which was already true\n   of addnodes).\n * Has the (somewhat unintended) consequence of changing one of the\n   eviction metrics from the same\n   sometimes-connect-to-!WITNESS-nodes metric to requiring\n   HasRelevantServices.\n\nThis should make NODE_NETWORK_LIMITED much simpler to implement.",
      "tree": {
        "sha": "aa6c24a3945d43aa86504922051a6a499aa866f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa6c24a3945d43aa86504922051a6a499aa866f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44407100ff9b478d6131a1c38ee993b50b1830df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44407100ff9b478d6131a1c38ee993b50b1830df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44407100ff9b478d6131a1c38ee993b50b1830df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44407100ff9b478d6131a1c38ee993b50b1830df/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "167cef8082e25e3ebbcd602814f3012772d49d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/167cef8082e25e3ebbcd602814f3012772d49d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/167cef8082e25e3ebbcd602814f3012772d49d16"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 55,
      "deletions": 48
    },
    "files": [
      {
        "sha": "951800f6c28a829224747cae186f7a61954b142b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -815,7 +815,6 @@ void InitLogging()\n \n namespace { // Variables internal to initialization process only\n \n-ServiceFlags nRelevantServices = NODE_NETWORK;\n int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n@@ -1604,9 +1603,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-        // Only care about others providing witness capabilities if there is a softfork\n-        // defined.\n-        nRelevantServices = ServiceFlags(nRelevantServices | NODE_WITNESS);\n     }\n \n     // ********************************************************* Step 10: import blocks\n@@ -1656,7 +1652,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;\n-    connOptions.nRelevantServices = nRelevantServices;\n     connOptions.nMaxConnections = nMaxConnections;\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;"
      },
      {
        "sha": "581151b4bd0133c86f70baa4ff1ae06ace6a2ea8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 30,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -444,7 +444,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CAddress addr_bind = GetBindAddress(hSocket);\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n-        pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->AddRef();\n \n         return pnode;\n@@ -985,7 +984,7 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n-                                               (node->nServices & nRelevantServices) == nRelevantServices,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n                                                node->fRelayTxes, node->pfilter != nullptr, node->addr, node->nKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n@@ -1602,7 +1601,7 @@ void CConnman::ThreadDNSAddressSeed()\n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n         for (auto pnode : vNodes) {\n-            nRelevant += pnode->fSuccessfullyConnected && ((pnode->nServices & nRelevantServices) == nRelevantServices);\n+            nRelevant += pnode->fSuccessfullyConnected && HasAllDesirableServiceFlags(pnode->nServices);\n         }\n         if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n@@ -1624,7 +1623,7 @@ void CConnman::ThreadDNSAddressSeed()\n         } else {\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n-            ServiceFlags requiredServiceBits = nRelevantServices;\n+            ServiceFlags requiredServiceBits = GetDesirableServiceFlags(NODE_NONE);\n             std::string host = GetDNSHost(seed, &requiredServiceBits);\n             CNetAddr resolveSource;\n             if (!resolveSource.SetInternal(host)) {\n@@ -1705,7 +1704,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str());\n+                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, false, true);\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n@@ -1753,17 +1752,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n-        int nOutboundRelevant = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound && !pnode->fAddnode) {\n-\n-                    // Count the peers that have all relevant services\n-                    if (pnode->fSuccessfullyConnected && !pnode->fFeeler && ((pnode->nServices & nRelevantServices) == nRelevantServices)) {\n-                        nOutboundRelevant++;\n-                    }\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1818,21 +1811,16 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             if (IsLimited(addr))\n                 continue;\n \n-            // only connect to full nodes\n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n-                continue;\n-\n             // only consider very recently tried nodes after 30 failed attempts\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider nodes missing relevant services after 40 failed attempts and only if less than half the outbound are up.\n-            ServiceFlags nRequiredServices = nRelevantServices;\n-            if (nTries >= 40 && nOutbound < (nMaxOutbound >> 1)) {\n-                nRequiredServices = REQUIRED_SERVICES;\n-            }\n-\n-            if ((addr.nServices & nRequiredServices) != nRequiredServices) {\n+            // for non-feelers, require all the services we'll want,\n+            // for feelers, only require they be a full node (only because most\n+            // SPV clients don't have a good address DB available)\n+            if (!fFeeler && !HasAllDesirableServiceFlags(addr.nServices)) {\n+                continue;\n+            } else if (fFeeler && !MayHaveUsefulAddressDB(addr.nServices)) {\n                 continue;\n             }\n \n@@ -1841,13 +1829,6 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 continue;\n \n             addrConnect = addr;\n-\n-            // regardless of the services assumed to be available, only require the minimum if half or more outbound have relevant services\n-            if (nOutboundRelevant >= (nMaxOutbound >> 1)) {\n-                addrConnect.nServices = REQUIRED_SERVICES;\n-            } else {\n-                addrConnect.nServices = nRequiredServices;\n-            }\n             break;\n         }\n \n@@ -2712,7 +2693,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nSendVersion(0)\n {\n     nServices = NODE_NONE;\n-    nServicesExpected = NODE_NONE;\n     hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;"
      },
      {
        "sha": "b4873b1e4d4ff65275fff3f8d07257e002638dcc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -84,8 +84,6 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n-static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;\n-\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n@@ -130,7 +128,6 @@ class CConnman\n     struct Options\n     {\n         ServiceFlags nLocalServices = NODE_NONE;\n-        ServiceFlags nRelevantServices = NODE_NONE;\n         int nMaxConnections = 0;\n         int nMaxOutbound = 0;\n         int nMaxAddnode = 0;\n@@ -152,7 +149,6 @@ class CConnman\n \n     void Init(const Options& connOptions) {\n         nLocalServices = connOptions.nLocalServices;\n-        nRelevantServices = connOptions.nRelevantServices;\n         nMaxConnections = connOptions.nMaxConnections;\n         nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n         nMaxAddnode = connOptions.nMaxAddnode;\n@@ -390,9 +386,6 @@ class CConnman\n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n \n-    /** Services this instance cares about */\n-    ServiceFlags nRelevantServices;\n-\n     CSemaphore *semOutbound;\n     CSemaphore *semAddnode;\n     int nMaxConnections;\n@@ -585,7 +578,6 @@ class CNode\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n-    ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent"
      },
      {
        "sha": "39cf989eea6d92a9009c76a618f0b7e2c682af9d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -1232,11 +1232,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             connman->SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~nServices)\n+        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->fAddnode && !HasAllDesirableServiceFlags(nServices))\n         {\n-            LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, pfrom->nServicesExpected);\n+            LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n-                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n+                               strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -1455,7 +1455,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (interruptMsgProc)\n                 return true;\n \n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n+            // We only bother storing full nodes, though this may include\n+            // things which we would not make an outbound connection to, in\n+            // part because we may make feeler connections to them.\n+            if (!MayHaveUsefulAddressDB(addr.nServices))\n                 continue;\n \n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)"
      },
      {
        "sha": "56b59aed3f4bad9ce4cc97ffd182df20f8e6ff5c",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -277,6 +277,43 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+/**\n+ * Gets the set of service flags which are \"desirable\" for a given peer.\n+ *\n+ * These are the flags which are required for a peer to support for them\n+ * to be \"interesting\" to us, ie for us to wish to use one of our few\n+ * outbound connection slots for or for us to wish to prioritize keeping\n+ * their connection around.\n+ *\n+ * Relevant service flags may be peer- and state-specific in that the\n+ * version of the peer may determine which flags are required (eg in the\n+ * case of NODE_NETWORK_LIMITED where we seek out NODE_NETWORK peers\n+ * unless they set NODE_NETWORK_LIMITED and we are out of IBD, in which\n+ * case NODE_NETWORK_LIMITED suffices).\n+ *\n+ * Thus, generally, avoid calling with peerServices == NODE_NONE.\n+ */\n+static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n+}\n+\n+/**\n+ * A shortcut for (services & GetDesirableServiceFlags(services))\n+ * == GetDesirableServiceFlags(services), ie determines whether the given\n+ * set of service flags are sufficient for a peer to be \"relevant\".\n+ */\n+static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n+    return !(GetDesirableServiceFlags(services) & (~services));\n+}\n+\n+/**\n+ * Checks if a peer with the given service flags may be capable of having a\n+ * robust address-storage DB. Currently an alias for checking NODE_NETWORK.\n+ */\n+static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n+    return services & NODE_NETWORK;\n+}\n+\n /** A CService with information about it as peer */\n class CAddress : public CService\n {"
      },
      {
        "sha": "fa0d15e0cdeac9bd6665cda7fdda405a33a34617",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -217,7 +217,7 @@ UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str());\n+        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n         return NullUniValue;\n     }\n "
      }
    ]
  },
  {
    "sha": "57edc0b0c86549020a39cd65f96496e9771c4769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2VkYzBiMGM4NjU0OTAyMGEzOWNkNjVmOTY0OTZlOTc3MWM0NzY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-05T15:49:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:25:58Z"
      },
      "message": "Rename fAddnode to a more-descriptive \"manual_connection\"",
      "tree": {
        "sha": "d5e72c1964cc4605d8bcf7aef1e397ecc4166bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5e72c1964cc4605d8bcf7aef1e397ecc4166bb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57edc0b0c86549020a39cd65f96496e9771c4769",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57edc0b0c86549020a39cd65f96496e9771c4769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57edc0b0c86549020a39cd65f96496e9771c4769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57edc0b0c86549020a39cd65f96496e9771c4769/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44407100ff9b478d6131a1c38ee993b50b1830df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44407100ff9b478d6131a1c38ee993b50b1830df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44407100ff9b478d6131a1c38ee993b50b1830df"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3e82969a15dff9b9fb9a60e0ae3906ac92fcd854",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -684,7 +684,7 @@ void CNode::copyStats(CNodeStats &stats)\n         X(cleanSubVer);\n     }\n     X(fInbound);\n-    X(fAddnode);\n+    X(m_manual_connection);\n     X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n@@ -1756,7 +1756,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->fAddnode) {\n+                if (!pnode->fInbound && !pnode->m_manual_connection) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1927,7 +1927,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n@@ -1956,8 +1956,8 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->fOneShot = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n+    if (manual_connection)\n+        pnode->m_manual_connection = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n@@ -2705,7 +2705,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n-    fAddnode = false;\n+    m_manual_connection = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "f373ab0cf1f72fcac32461cdd131176b284614b0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -171,7 +171,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -506,7 +506,7 @@ class CNodeStats\n     int nVersion;\n     std::string cleanSubVer;\n     bool fInbound;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     int nStartingHeight;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n@@ -615,7 +615,7 @@ class CNode\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     bool fClient;\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;"
      },
      {
        "sha": "3b73533c0e48fd1bc5cc8f2dade0e45aa6c5fb91",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -1232,7 +1232,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             connman->SetServices(pfrom->addr, nServices);\n         }\n-        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->fAddnode && !HasAllDesirableServiceFlags(nServices))\n+        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n@@ -2628,8 +2628,8 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n         state.fShouldBan = false;\n         if (pnode->fWhitelisted)\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->fAddnode)\n-            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->m_manual_connection)\n+            LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n         else {\n             pnode->fDisconnect = true;\n             if (pnode->addr.IsLocal())"
      },
      {
        "sha": "076fe260bcc4af2c7ea68c5f11d774acf71ab1f5",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -92,7 +92,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n-            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot\\n\"\n+            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n             \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n             \"    \\\"synced_headers\\\": n,       (numeric) The last header we have in common with this peer\\n\"\n@@ -156,7 +156,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n+        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));"
      }
    ]
  },
  {
    "sha": "5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWU4OGI0YmRlZmVjYmYwM2I2ODgzYjJhNmI1NmE0NGVjNzUxNjdk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-06T21:27:04Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:29:25Z"
      },
      "message": "Clarify docs for requirements/handling of addnode/connect nodes",
      "tree": {
        "sha": "093fe0d84f75f41f72fd37352de7cb4903255405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/093fe0d84f75f41f72fd37352de7cb4903255405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57edc0b0c86549020a39cd65f96496e9771c4769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57edc0b0c86549020a39cd65f96496e9771c4769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57edc0b0c86549020a39cd65f96496e9771c4769"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8755ad420b5af7749c6fe782af79eda5f76239c9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "patch": "@@ -369,11 +369,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n     strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n     strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n     strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));"
      },
      {
        "sha": "8fb8328c5e8f84c799e6566636684c82992c888f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "patch": "@@ -201,6 +201,8 @@ UniValue addnode(const JSONRPCRequest& request)\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n             \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n+            \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n+            \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n             \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\""
      }
    ]
  },
  {
    "sha": "15f5d3b17298be96c6c684c195c02ac249ffd392",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWY1ZDNiMTcyOThiZTk2YzZjNjg0YzE5NWMwMmFjMjQ5ZmZkMzky",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-06T21:27:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:29:25Z"
      },
      "message": "Switch DNSSeed-needed metric to any-automatic-nodes, not services",
      "tree": {
        "sha": "7b4cc495640f42050777c3b175ff9cb85752e40f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b4cc495640f42050777c3b175ff9cb85752e40f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f5d3b17298be96c6c684c195c02ac249ffd392",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f5d3b17298be96c6c684c195c02ac249ffd392",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15f5d3b17298be96c6c684c195c02ac249ffd392",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f5d3b17298be96c6c684c195c02ac249ffd392/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "258599747a6a0ed184287c54bf7fb0c1e2b0f147",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f5d3b17298be96c6c684c195c02ac249ffd392/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f5d3b17298be96c6c684c195c02ac249ffd392/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=15f5d3b17298be96c6c684c195c02ac249ffd392",
        "patch": "@@ -1601,7 +1601,7 @@ void CConnman::ThreadDNSAddressSeed()\n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n         for (auto pnode : vNodes) {\n-            nRelevant += pnode->fSuccessfullyConnected && HasAllDesirableServiceFlags(pnode->nServices);\n+            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n         }\n         if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");"
      }
    ]
  },
  {
    "sha": "f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGM0ZTM4ODg0M2E5Y2Y1ZmQ0YTI4OWIxZDZiY2U4ZWFiNmIyY2U2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-13T21:23:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-13T21:23:52Z"
      },
      "message": "[trivial] Make namespace explicit for is_regular_file\n\nis_regular_file resolves using argument dependent lookup. Make the\nnamespace explicit so it's obvious where the function is defined.",
      "tree": {
        "sha": "d39792c8c22085709841a96e7d171e3abfc56d9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d39792c8c22085709841a96e7d171e3abfc56d9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/424be03305143cbe5da5d5adb54d73d3dc3747b6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9aac64ec0936640830edc3ad32798b10ccdc2ce4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
        "patch": "@@ -588,7 +588,7 @@ void CleanupBlockRevFiles()\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n     fs::path blocksdir = GetDataDir() / \"blocks\";\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n-        if (is_regular_file(*it) &&\n+        if (fs::is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n         {"
      }
    ]
  },
  {
    "sha": "8c2de827e988173cd37f48d78fdd9b600eeeadfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzJkZTgyN2U5ODgxNzNjZDM3ZjQ4ZDc4ZmRkOWI2MDBlZWVhZGZi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-13T22:23:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-13T22:23:22Z"
      },
      "message": "Merge #7061: [Wallet] Add RPC call \"rescanblockchain <startheight> <stopheight>\"\n\n7a91ceb5e [QA] Add RPC based rescan test (Jonas Schnelli)\nc77170fbd [Wallet] add rescanblockchain <start_height> <stop_height> RPC command (Jonas Schnelli)\n\nPull request description:\n\n  A RPC rescan command is much more flexible for the following reasons:\n  * You can define the start and end-height\n  * It can be called during runtime\n  * It can work in multiwallet environment\n\nTree-SHA512: df67177bad6ad1d08e5a621f095564524fa3eb87204c2048ef7265e77013e4b1b29f991708f807002329a507a254f35e79a4ed28a2d18d4b3da7a75d57ce0ea5",
      "tree": {
        "sha": "9c76345715dc54c7b8844f06f03b75381e28474b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c76345715dc54c7b8844f06f03b75381e28474b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c2de827e988173cd37f48d78fdd9b600eeeadfb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnhPNoACgkQHrd2uwPH\nki1vxBAAs2PW08kpeihSsFq2jhohgSaIbQWq+sT3wcUqUhk50PL1jydRJ3JOL8o0\nTeaVTTFdCsVO9NdZyxXIlG22YyaIPl1ceh5YezX5Iw04QVFCwdxgQICFo5mfHcXT\nhUGzvbTEZYOnXEOWEb/YlfkS5K0yXw6FHrTFw1Mk2XND/WwcEjjanKgSB/yaCuT9\nTFHOpv1yGBP0kvmVlI0lqG9bQJTzI8FA/YDDQpmCMce9luRtxbSb/Ls71s02pX2e\nNKdDXCbMtSRP7nvLIXSDdn+lfQRd7RO4A0JJq/ozauKQGvbmSGlv3L5CPkZFEtNo\nosYq3hT9SnY49v73NZEVq7cCw+TcFARrljS5HfIPJw11R9w5WzSVV2pXIOU6BRAL\n5DK36bD1FL0LS70zu8zfFirSshorJ4A2vzwb0uM5DoeMzcy697HUMOZxwMGB9Y81\nIJ9eBv8zz5NthE+gg6dJ83TRWxdP6RRwZ195eS41JXQVVzzcJTWEMRdRu29SuvNJ\nCp+L/wMql73kzEawXvwnrQqILJl+CqKq/97bF5oRazgAQO//4lGMP3tjfXR7mwAb\n8c2hIN4RAc7yZPGn4jJnMgrkPTiGv7rn9RYn+lsV4DL95Rnt33GP2Q2aSfZynaDb\nyKKtBzH4x/Lno+srAWBbz9R366zA7OWw/lIX6OjOaVaNffNcR14=\n=wEv5\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c76345715dc54c7b8844f06f03b75381e28474b\nparent 424be03305143cbe5da5d5adb54d73d3dc3747b6\nparent 7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507933384 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507933402 -0700\n\nMerge #7061: [Wallet] Add RPC call \"rescanblockchain <startheight> <stopheight>\"\n\n7a91ceb5e [QA] Add RPC based rescan test (Jonas Schnelli)\nc77170fbd [Wallet] add rescanblockchain <start_height> <stop_height> RPC command (Jonas Schnelli)\n\nPull request description:\n\n  A RPC rescan command is much more flexible for the following reasons:\n  * You can define the start and end-height\n  * It can be called during runtime\n  * It can work in multiwallet environment\n\nTree-SHA512: df67177bad6ad1d08e5a621f095564524fa3eb87204c2048ef7265e77013e4b1b29f991708f807002329a507a254f35e79a4ed28a2d18d4b3da7a75d57ce0ea5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2de827e988173cd37f48d78fdd9b600eeeadfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2de827e988173cd37f48d78fdd9b600eeeadfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2de827e988173cd37f48d78fdd9b600eeeadfb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/424be03305143cbe5da5d5adb54d73d3dc3747b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/424be03305143cbe5da5d5adb54d73d3dc3747b6"
      },
      {
        "sha": "7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 117,
      "deletions": 11
    },
    "files": [
      {
        "sha": "12755d43e45c2620a2cb20f8b5508dc9abcbffc5",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -164,7 +164,7 @@ void TestGUI()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), true);\n+    wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "721f363aeff73c9950aa43a112538de3e5c7da03",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -141,6 +141,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"echojson\", 7, \"arg7\" },\n     { \"echojson\", 8, \"arg8\" },\n     { \"echojson\", 9, \"arg9\" },\n+    { \"rescanblockchain\", 0, \"start_height\"},\n+    { \"rescanblockchain\", 1, \"stop_height\"},\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "e23ef57db09dc22eb116e2d68e64fa3361cba134",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -3212,6 +3212,81 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue rescanblockchain(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"rescanblockchain (\\\"start_height\\\") (\\\"stop_height\\\")\\n\"\n+            \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start_height\\\"    (numeric, optional) block height where the rescan should start\\n\"\n+            \"2. \\\"stop_height\\\"     (numeric, optional) the last block height that should be scanned\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"start_height\\\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.\\n\"\n+            \"  \\\"stop_height\\\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n+            + HelpExampleRpc(\"rescanblockchain\", \"100000 120000\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBlockIndex *pindexStart = chainActive.Genesis();\n+    CBlockIndex *pindexStop = nullptr;\n+    if (!request.params[0].isNull()) {\n+        pindexStart = chainActive[request.params[0].get_int()];\n+        if (!pindexStart) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n+        }\n+    }\n+\n+    if (!request.params[1].isNull()) {\n+        pindexStop = chainActive[request.params[1].get_int()];\n+        if (!pindexStop) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+        }\n+        else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater then start_height\");\n+        }\n+    }\n+\n+    // We can't rescan beyond non-pruned blocks, stop and throw an error\n+    if (fPruneMode) {\n+        CBlockIndex *block = pindexStop ? pindexStop : chainActive.Tip();\n+        while (block && block->nHeight >= pindexStart->nHeight) {\n+            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+            }\n+            block = block->pprev;\n+        }\n+    }\n+\n+    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, true);\n+    if (!stopBlock) {\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n+        }\n+        // if we got a nullptr returned, ScanForWalletTransactions did rescan up to the requested stopindex\n+        stopBlock = pindexStop ? pindexStop : chainActive.Tip();\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n+    }\n+\n+    UniValue response(UniValue::VOBJ);\n+    response.pushKV(\"start_height\", pindexStart->nHeight);\n+    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    return response;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3222,6 +3297,7 @@ extern UniValue importwallet(const JSONRPCRequest& request);\n extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n extern UniValue importmulti(const JSONRPCRequest& request);\n+extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           argNames\n@@ -3276,6 +3352,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n \n     { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n };"
      },
      {
        "sha": "2b12168c65c02976b0d2bf19419987580c0b3550",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -386,7 +386,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -399,7 +399,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -604,7 +604,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n-        wallet->ScanForWalletTransactions(chainActive.Genesis());\n+        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "3672ecea5b217854aa8f984bacb3994f6723b7d9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -1568,7 +1568,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, update);\n         if (failedBlock) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n@@ -1584,12 +1584,19 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n+ *\n+ * If pindexStop is not a nullptr, the scan will stop at the block-index\n+ * defined by pindexStop\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n+    if (pindexStop) {\n+        assert(pindexStop->nHeight >= pindexStart->nHeight);\n+    }\n+\n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = nullptr;\n     {\n@@ -1617,6 +1624,9 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             } else {\n                 ret = pindex;\n             }\n+            if (pindex == pindexStop) {\n+                break;\n+            }\n             pindex = chainActive.Next(pindex);\n         }\n         if (pindex && fAbortRescan) {\n@@ -3930,7 +3940,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n \n         nStart = GetTimeMillis();\n-        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n+        walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n         walletInstance->dbw->IncrementUpdateCounter();"
      },
      {
        "sha": "8315bbf3daefafd3893d2b0fd85cb5b86f3266b5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -919,7 +919,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!"
      },
      {
        "sha": "9b6ce68609db5986ee619b398786d478ed7d9671",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2de827e988173cd37f48d78fdd9b600eeeadfb/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2de827e988173cd37f48d78fdd9b600eeeadfb/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "patch": "@@ -10,6 +10,7 @@\n     connect_nodes_bi,\n )\n import shutil\n+import os\n \n class WalletHDTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -70,9 +71,9 @@ def run_test (self):\n         self.stop_node(1)\n         # we need to delete the complete regtest directory\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n-        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n-        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n-        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -91,6 +92,22 @@ def run_test (self):\n         self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n+        # Try a RPC based rescan\n+        self.stop_node(1)\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        self.start_node(1, extra_args=self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+        out = self.nodes[1].rescanblockchain(0, 1)\n+        assert_equal(out['start_height'], 0)\n+        assert_equal(out['stop_height'], 1)\n+        out = self.nodes[1].rescanblockchain()\n+        assert_equal(out['start_height'], 0)\n+        assert_equal(out['stop_height'], self.nodes[1].getblockcount())\n+        assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n+\n         # send a tx and make sure its using the internal chain for the changeoutput\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         outs = self.nodes[1].decoderawtransaction(self.nodes[1].gettransaction(txid)['hex'])['vout']"
      }
    ]
  },
  {
    "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjZhNTY1MmUwZDI1ZmRiNjBjMzM3ZWY0ZjFjOThhNjNlMDc0OGYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-13T22:25:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-13T22:31:19Z"
      },
      "message": "Merge #11456: Replace relevant services logic with a function suite.\n\n15f5d3b17 Switch DNSSeed-needed metric to any-automatic-nodes, not services (Matt Corallo)\n5ee88b4bd Clarify docs for requirements/handling of addnode/connect nodes (Matt Corallo)\n57edc0b0c Rename fAddnode to a more-descriptive \"manual_connection\" (Matt Corallo)\n44407100f Replace relevant services logic with a function suite. (Matt Corallo)\n\nPull request description:\n\n  This was mostly written as a way to clean things up so that the NETWORK_LIMITED PR (#10387) can be simplified a ton, but its also a nice standalone cleanup that will also require a bit of review because it tweaks a lot of stuff across net. The new functions are fine in protocol.h right now since they're straight-forward, but after NETWORK_LIMITED will really want to move elsewhere after @theuni moves the nServices-based selection to addrman from connman.\n\n  Adds HasAllRelevantServices and GetRelevantServices, which check\n  for NETWORK|WITNESS.\n\n  This changes the following:\n   * Removes nRelevantServices from CConnman, disconnecting it a bit\n     more from protocol-level logic.\n   * Replaces our sometimes-connect-to-!WITNESS-nodes logic with\n     simply always requiring WITNESS|NETWORK for outbound non-feeler\n     connections (feelers still only require NETWORK).\n   * This has the added benefit of removing nServicesExpected from\n     CNode - instead letting net_processing's VERSION message\n     handling simply check HasAllRelevantServices.\n   * This implies we believe WITNESS nodes to continue to be a\n     significant majority of nodes on the network, but also because\n     we cannot sync properly from !WITNESS nodes, it is strange to\n     continue using our valuable outbound slots on them.\n   * In order to prevent this change from preventing connection to\n     -connect= nodes which have !WITNESS, -connect nodes are now\n     given the \"addnode\" flag. This also allows outbound connections\n     to !NODE_NETWORK nodes for -connect nodes (which was already true\n     of addnodes).\n   * Has the (somewhat unintended) consequence of changing one of the\n     eviction metrics from the same\n     sometimes-connect-to-!WITNESS-nodes metric to requiring\n     HasRelevantServices.\n\n  This should make NODE_NETWORK_LIMITED much simpler to implement.\n\nTree-SHA512: 90606896c86cc5da14c77843b16674a6a012065e7b583d76d1c47a18215358abefcbab44ff4fab3fadcd39aa9a42d4740c6dc8874a58033bdfc8ad3fb5c649fc",
      "tree": {
        "sha": "51051a3e9a665c88e8e81a6096a1643dafcde277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51051a3e9a665c88e8e81a6096a1643dafcde277"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ4T63AAoJEKY26XYx92fgapkP/2CL5yVfOuObe9VAd/wx0rmJ\n9x0UYCksbth6k67zXMYt5a3V6xTV0C1Xi25FPd70qh9fzdQU2KbogKuUoDOgKBP2\nfaT/u46ipXLy2gU3dKv7A0qex8ewBH/E1ADZOIgMRXISp5UFn6uyV4ZGGGU0GleM\n3/RTLAA/rZmvf2QsxkHvpO/VPNuAxe+0piZ0klCBEab1yaatQ8YNg1dkdvT2EXpq\n3DbMFfQc8oNBg4rRGHcF1JHh2sCx/uWHTHg0hG4dnSGeuhr9uvwJ4nEbL5fUnj+0\n7gVDB8Xqh9f5+aEC0+VbDWgKkY/ktKGGPGOarbw+8nPXFpEr3N4JbN18VWe+u0OG\n8q7UZ1YHhRnSI3+DuJCrGQdS26w7/6S5wVBISC1vxXsNei2JIT1kIrc8YFDJtUKT\n9HcJ3znImqyH5qxq5rPGwSSs2xTdjxEPCyBMbw1mmcOyLrR5j/nqR+qYQFLkbLu7\ntrE4d7Da44yp0RPDEdd/1xesiMMYWrvjZAKHd03o/kGqkPkgiazekLCxc78ZuD07\nMrJkAy5ubQj/aTBMNKQm86s9w26/JjWFsQ47r4JvpnL0eUrNxMhGsxd5dCq9vC5g\nzRm5aaF+2yPDX4Hv6Kby4+oH01VfDz6CIR2eVXFpENRh3kY38UpeIyGNDv1oe+o5\nl+B+eHn+MuIzl27rPxof\n=IApa\n-----END PGP SIGNATURE-----",
        "payload": "tree 51051a3e9a665c88e8e81a6096a1643dafcde277\nparent 8c2de827e988173cd37f48d78fdd9b600eeeadfb\nparent 15f5d3b17298be96c6c684c195c02ac249ffd392\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1507933516 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1507933879 -0700\n\nMerge #11456: Replace relevant services logic with a function suite.\n\n15f5d3b17 Switch DNSSeed-needed metric to any-automatic-nodes, not services (Matt Corallo)\n5ee88b4bd Clarify docs for requirements/handling of addnode/connect nodes (Matt Corallo)\n57edc0b0c Rename fAddnode to a more-descriptive \"manual_connection\" (Matt Corallo)\n44407100f Replace relevant services logic with a function suite. (Matt Corallo)\n\nPull request description:\n\n  This was mostly written as a way to clean things up so that the NETWORK_LIMITED PR (#10387) can be simplified a ton, but its also a nice standalone cleanup that will also require a bit of review because it tweaks a lot of stuff across net. The new functions are fine in protocol.h right now since they're straight-forward, but after NETWORK_LIMITED will really want to move elsewhere after @theuni moves the nServices-based selection to addrman from connman.\n\n  Adds HasAllRelevantServices and GetRelevantServices, which check\n  for NETWORK|WITNESS.\n\n  This changes the following:\n   * Removes nRelevantServices from CConnman, disconnecting it a bit\n     more from protocol-level logic.\n   * Replaces our sometimes-connect-to-!WITNESS-nodes logic with\n     simply always requiring WITNESS|NETWORK for outbound non-feeler\n     connections (feelers still only require NETWORK).\n   * This has the added benefit of removing nServicesExpected from\n     CNode - instead letting net_processing's VERSION message\n     handling simply check HasAllRelevantServices.\n   * This implies we believe WITNESS nodes to continue to be a\n     significant majority of nodes on the network, but also because\n     we cannot sync properly from !WITNESS nodes, it is strange to\n     continue using our valuable outbound slots on them.\n   * In order to prevent this change from preventing connection to\n     -connect= nodes which have !WITNESS, -connect nodes are now\n     given the \"addnode\" flag. This also allows outbound connections\n     to !NODE_NETWORK nodes for -connect nodes (which was already true\n     of addnodes).\n   * Has the (somewhat unintended) consequence of changing one of the\n     eviction metrics from the same\n     sometimes-connect-to-!WITNESS-nodes metric to requiring\n     HasRelevantServices.\n\n  This should make NODE_NETWORK_LIMITED much simpler to implement.\n\nTree-SHA512: 90606896c86cc5da14c77843b16674a6a012065e7b583d76d1c47a18215358abefcbab44ff4fab3fadcd39aa9a42d4740c6dc8874a58033bdfc8ad3fb5c649fc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2de827e988173cd37f48d78fdd9b600eeeadfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2de827e988173cd37f48d78fdd9b600eeeadfb"
      },
      {
        "sha": "15f5d3b17298be96c6c684c195c02ac249ffd392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f5d3b17298be96c6c684c195c02ac249ffd392",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15f5d3b17298be96c6c684c195c02ac249ffd392"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 72,
      "deletions": 63
    },
    "files": [
      {
        "sha": "f63ad7f5d38e9da401a9167592b308f4681e49e3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "patch": "@@ -369,11 +369,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n     strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n     strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n     strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));\n@@ -815,7 +815,6 @@ void InitLogging()\n \n namespace { // Variables internal to initialization process only\n \n-ServiceFlags nRelevantServices = NODE_NETWORK;\n int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n@@ -1604,9 +1603,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-        // Only care about others providing witness capabilities if there is a softfork\n-        // defined.\n-        nRelevantServices = ServiceFlags(nRelevantServices | NODE_WITNESS);\n     }\n \n     // ********************************************************* Step 10: import blocks\n@@ -1663,7 +1659,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;\n-    connOptions.nRelevantServices = nRelevantServices;\n     connOptions.nMaxConnections = nMaxConnections;\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;"
      },
      {
        "sha": "258599747a6a0ed184287c54bf7fb0c1e2b0f147",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 36,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "patch": "@@ -444,7 +444,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CAddress addr_bind = GetBindAddress(hSocket);\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n-        pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->AddRef();\n \n         return pnode;\n@@ -685,7 +684,7 @@ void CNode::copyStats(CNodeStats &stats)\n         X(cleanSubVer);\n     }\n     X(fInbound);\n-    X(fAddnode);\n+    X(m_manual_connection);\n     X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n@@ -985,7 +984,7 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n-                                               (node->nServices & nRelevantServices) == nRelevantServices,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n                                                node->fRelayTxes, node->pfilter != nullptr, node->addr, node->nKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n@@ -1602,7 +1601,7 @@ void CConnman::ThreadDNSAddressSeed()\n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n         for (auto pnode : vNodes) {\n-            nRelevant += pnode->fSuccessfullyConnected && ((pnode->nServices & nRelevantServices) == nRelevantServices);\n+            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n         }\n         if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n@@ -1624,7 +1623,7 @@ void CConnman::ThreadDNSAddressSeed()\n         } else {\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n-            ServiceFlags requiredServiceBits = nRelevantServices;\n+            ServiceFlags requiredServiceBits = GetDesirableServiceFlags(NODE_NONE);\n             std::string host = GetDNSHost(seed, &requiredServiceBits);\n             CNetAddr resolveSource;\n             if (!resolveSource.SetInternal(host)) {\n@@ -1705,7 +1704,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str());\n+                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, false, true);\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n@@ -1753,17 +1752,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n-        int nOutboundRelevant = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->fAddnode) {\n-\n-                    // Count the peers that have all relevant services\n-                    if (pnode->fSuccessfullyConnected && !pnode->fFeeler && ((pnode->nServices & nRelevantServices) == nRelevantServices)) {\n-                        nOutboundRelevant++;\n-                    }\n+                if (!pnode->fInbound && !pnode->m_manual_connection) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1818,21 +1811,16 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             if (IsLimited(addr))\n                 continue;\n \n-            // only connect to full nodes\n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n-                continue;\n-\n             // only consider very recently tried nodes after 30 failed attempts\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider nodes missing relevant services after 40 failed attempts and only if less than half the outbound are up.\n-            ServiceFlags nRequiredServices = nRelevantServices;\n-            if (nTries >= 40 && nOutbound < (nMaxOutbound >> 1)) {\n-                nRequiredServices = REQUIRED_SERVICES;\n-            }\n-\n-            if ((addr.nServices & nRequiredServices) != nRequiredServices) {\n+            // for non-feelers, require all the services we'll want,\n+            // for feelers, only require they be a full node (only because most\n+            // SPV clients don't have a good address DB available)\n+            if (!fFeeler && !HasAllDesirableServiceFlags(addr.nServices)) {\n+                continue;\n+            } else if (fFeeler && !MayHaveUsefulAddressDB(addr.nServices)) {\n                 continue;\n             }\n \n@@ -1841,13 +1829,6 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 continue;\n \n             addrConnect = addr;\n-\n-            // regardless of the services assumed to be available, only require the minimum if half or more outbound have relevant services\n-            if (nOutboundRelevant >= (nMaxOutbound >> 1)) {\n-                addrConnect.nServices = REQUIRED_SERVICES;\n-            } else {\n-                addrConnect.nServices = nRequiredServices;\n-            }\n             break;\n         }\n \n@@ -1946,7 +1927,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n@@ -1975,8 +1956,8 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->fOneShot = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n+    if (manual_connection)\n+        pnode->m_manual_connection = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n@@ -2712,7 +2693,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nSendVersion(0)\n {\n     nServices = NODE_NONE;\n-    nServicesExpected = NODE_NONE;\n     hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;\n@@ -2725,7 +2705,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n-    fAddnode = false;\n+    m_manual_connection = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "f373ab0cf1f72fcac32461cdd131176b284614b0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "patch": "@@ -84,8 +84,6 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n-static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;\n-\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n@@ -130,7 +128,6 @@ class CConnman\n     struct Options\n     {\n         ServiceFlags nLocalServices = NODE_NONE;\n-        ServiceFlags nRelevantServices = NODE_NONE;\n         int nMaxConnections = 0;\n         int nMaxOutbound = 0;\n         int nMaxAddnode = 0;\n@@ -152,7 +149,6 @@ class CConnman\n \n     void Init(const Options& connOptions) {\n         nLocalServices = connOptions.nLocalServices;\n-        nRelevantServices = connOptions.nRelevantServices;\n         nMaxConnections = connOptions.nMaxConnections;\n         nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n         nMaxAddnode = connOptions.nMaxAddnode;\n@@ -175,7 +171,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -390,9 +386,6 @@ class CConnman\n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n \n-    /** Services this instance cares about */\n-    ServiceFlags nRelevantServices;\n-\n     CSemaphore *semOutbound;\n     CSemaphore *semAddnode;\n     int nMaxConnections;\n@@ -513,7 +506,7 @@ class CNodeStats\n     int nVersion;\n     std::string cleanSubVer;\n     bool fInbound;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     int nStartingHeight;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n@@ -585,7 +578,6 @@ class CNode\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n-    ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n@@ -623,7 +615,7 @@ class CNode\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     bool fClient;\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;"
      },
      {
        "sha": "6c26cd4cee38bca09ceceead6a50b6bffd1829fd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "patch": "@@ -1243,11 +1243,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             connman->SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~nServices)\n+        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n         {\n-            LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, pfrom->nServicesExpected);\n+            LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n-                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n+                               strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -1466,7 +1466,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (interruptMsgProc)\n                 return true;\n \n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n+            // We only bother storing full nodes, though this may include\n+            // things which we would not make an outbound connection to, in\n+            // part because we may make feeler connections to them.\n+            if (!MayHaveUsefulAddressDB(addr.nServices))\n                 continue;\n \n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n@@ -2642,8 +2645,8 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n         state.fShouldBan = false;\n         if (pnode->fWhitelisted)\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->fAddnode)\n-            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->m_manual_connection)\n+            LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n         else {\n             pnode->fDisconnect = true;\n             if (pnode->addr.IsLocal())"
      },
      {
        "sha": "56b59aed3f4bad9ce4cc97ffd182df20f8e6ff5c",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "patch": "@@ -277,6 +277,43 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+/**\n+ * Gets the set of service flags which are \"desirable\" for a given peer.\n+ *\n+ * These are the flags which are required for a peer to support for them\n+ * to be \"interesting\" to us, ie for us to wish to use one of our few\n+ * outbound connection slots for or for us to wish to prioritize keeping\n+ * their connection around.\n+ *\n+ * Relevant service flags may be peer- and state-specific in that the\n+ * version of the peer may determine which flags are required (eg in the\n+ * case of NODE_NETWORK_LIMITED where we seek out NODE_NETWORK peers\n+ * unless they set NODE_NETWORK_LIMITED and we are out of IBD, in which\n+ * case NODE_NETWORK_LIMITED suffices).\n+ *\n+ * Thus, generally, avoid calling with peerServices == NODE_NONE.\n+ */\n+static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n+}\n+\n+/**\n+ * A shortcut for (services & GetDesirableServiceFlags(services))\n+ * == GetDesirableServiceFlags(services), ie determines whether the given\n+ * set of service flags are sufficient for a peer to be \"relevant\".\n+ */\n+static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n+    return !(GetDesirableServiceFlags(services) & (~services));\n+}\n+\n+/**\n+ * Checks if a peer with the given service flags may be capable of having a\n+ * robust address-storage DB. Currently an alias for checking NODE_NETWORK.\n+ */\n+static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n+    return services & NODE_NETWORK;\n+}\n+\n /** A CService with information about it as peer */\n class CAddress : public CService\n {"
      },
      {
        "sha": "8fb8328c5e8f84c799e6566636684c82992c888f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/326a5652e0d25fdb60c337ef4f1c98a63e0748f0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "patch": "@@ -92,7 +92,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n-            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot\\n\"\n+            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n             \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n             \"    \\\"synced_headers\\\": n,       (numeric) The last header we have in common with this peer\\n\"\n@@ -156,7 +156,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n+        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n@@ -201,6 +201,8 @@ UniValue addnode(const JSONRPCRequest& request)\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n             \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n+            \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n+            \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n             \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n@@ -217,7 +219,7 @@ UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str());\n+        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n         return NullUniValue;\n     }\n "
      }
    ]
  },
  {
    "sha": "43f76f6acdef3504c072ef7ff8cb92221a92b158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2Y3NmY2YWNkZWYzNTA0YzA3MmVmN2ZmOGNiOTIyMjFhOTJiMTU4",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-13T23:34:04Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-13T23:34:04Z"
      },
      "message": "Add missing comma from rescanblockchain",
      "tree": {
        "sha": "a95ae9216f279ac533a9d114bef06209f18871bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a95ae9216f279ac533a9d114bef06209f18871bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43f76f6acdef3504c072ef7ff8cb92221a92b158",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43f76f6acdef3504c072ef7ff8cb92221a92b158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43f76f6acdef3504c072ef7ff8cb92221a92b158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43f76f6acdef3504c072ef7ff8cb92221a92b158/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6989add89469b8b6990a816ddb3ee30359e6936",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43f76f6acdef3504c072ef7ff8cb92221a92b158/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43f76f6acdef3504c072ef7ff8cb92221a92b158/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=43f76f6acdef3504c072ef7ff8cb92221a92b158",
        "patch": "@@ -3233,7 +3233,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n-            + HelpExampleRpc(\"rescanblockchain\", \"100000 120000\")\n+            + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n             );\n     }\n "
      }
    ]
  },
  {
    "sha": "7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTA0ZGU4YjFmM2EzMWQzYTYwMDA5YjVkYzM3NmFkYmVkYWM2YTlj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-12T22:14:46Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-14T22:59:46Z"
      },
      "message": "[wallet] Fix leak in CDB constructor\n\nNow using a std::unique_ptr, the Db instance is correctly released\nwhen CDB initialization fails.\nThe internal CDB state and mapFileUseCount are only mutated when\nthe CDB initialization succeeds.",
      "tree": {
        "sha": "827a41ec17d3d3e887f236848f122fcf3cdb7832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827a41ec17d3d3e887f236848f122fcf3cdb7832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5e881d9acc08cfced2ef00c666d4e9b22d95c371",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7104de8b1f3a31d3a60009b5dc376adbedac6a9c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7104de8b1f3a31d3a60009b5dc376adbedac6a9c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
        "patch": "@@ -379,45 +379,43 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         if (!env->Open(GetDataDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n-        strFile = strFilename;\n-        ++env->mapFileUseCount[strFile];\n-        pdb = env->mapDb[strFile];\n+        pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            pdb = new Db(env->dbenv, 0);\n+            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n-                DbMpoolFile* mpf = pdb->get_mpf();\n+                DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n-                if (ret != 0)\n-                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n+                if (ret != 0) {\n+                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFilename));\n+                }\n             }\n \n-            ret = pdb->open(nullptr,                               // Txn pointer\n-                            fMockDb ? nullptr : strFile.c_str(),   // Filename\n-                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE,                           // Database type\n-                            nFlags,                             // Flags\n+            ret = pdb_temp->open(nullptr,                             // Txn pointer\n+                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n+                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            DB_BTREE,                                 // Database type\n+                            nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                delete pdb;\n-                pdb = nullptr;\n-                --env->mapFileUseCount[strFile];\n-                strFile = \"\";\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n \n+            pdb = pdb_temp.release();\n+            env->mapDb[strFilename] = pdb;\n+\n             if (fCreate && !Exists(std::string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n                 fReadOnly = fTmp;\n             }\n-\n-            env->mapDb[strFile] = pdb;\n         }\n+        ++env->mapFileUseCount[strFilename];\n+        strFile = strFilename;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "6ab0e4cf49549640b903bf5fce0e6035b8116397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWIwZTRjZjQ5NTQ5NjQwYjkwM2JmNWZjZTBlNjAzNWI4MTE2Mzk3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-14T23:55:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-14T23:58:13Z"
      },
      "message": "Merge #10672: Avoid division by zero in the case of a corrupt estimates file\n\nfe862c5ad Avoid division by zero in the case of a corrupt estimates file (practicalswift)\n\nPull request description:\n\n  Avoid division by zero in the case of a corrupt estimates file.\n\nTree-SHA512: 285cb0d566f239d260880026a930a7412d86e31ea3819d5371a36364a241dc76164e68c1da6da8369345fa6037ca0abc5ab82d245058c085d5f1fd50111fba48",
      "tree": {
        "sha": "4e01698848693b6c91804674d5b50843758ddf9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e01698848693b6c91804674d5b50843758ddf9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ab0e4cf49549640b903bf5fce0e6035b8116397",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ4qSWAAoJEKY26XYx92fg3s8P/29kQRnoqohi1nVXwJQEPKYD\nZj7z1P8amY4aQ+g1RMb7IBR7QY0PDdsc2/lOl0SWgBYumLRk3cWKQw5ChpY2MkTm\nOHCZz63o0FSWCc39ZPzRDDwVwGBGjTJBZtzM7ITMZLHV2xzxlCje9x/5GMh6jxXt\nhkfOqSq9eUC8UVyGlnseux9M+XsCIEOVzwrWg/iQepnwOHuFU8nMY5hZ0VqnOzoi\nhMXvU2ha0SK2D1p0sp3O3cLdNRv6Gh49L7lYhiTJ0N0xMYWpOGrmPMdCnSnni21w\nZwa+VfCOa3N/1uJZ+nLXMfnoBnScTegS/kIzxRdaNiPovhQV7oj1m29dka/JXIk7\nAqe0tZbtO3xomNkzgJTsJNSTz2UX35fmK0eUgVu6FMVT5/udEdK5msZ4N9KMpsHX\nMzO4swvSzVuuC8Yoy0k4/ty/FWbN/GGLelTzbGjpASFvb4kOISVmvnpRSd5hi6lH\ns4/GUBY4Id6IUxVGAKw1hlELrFWtpES+e6mdvC1jUqxAHRT0T4tjWoO2UmF2QzZJ\nmG0aIYhsUNyaBROrKGQqkVQQdx1ObIxXCp/db6R2JtVjQPCeN2/zsEVUYdvMVJWX\nl2pbpM4jjx/7GEHKNXTz4TDXvHWlSeukljdxDsn9QMMDyOQK9dMCMrYNDy32GXcT\n4NXks3B+1rin72VdSH/u\n=OTNG\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e01698848693b6c91804674d5b50843758ddf9f\nparent 326a5652e0d25fdb60c337ef4f1c98a63e0748f0\nparent fe862c5ad4bdce6bcc3bf8712d9472561b270c02\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1508025354 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1508025493 -0700\n\nMerge #10672: Avoid division by zero in the case of a corrupt estimates file\n\nfe862c5ad Avoid division by zero in the case of a corrupt estimates file (practicalswift)\n\nPull request description:\n\n  Avoid division by zero in the case of a corrupt estimates file.\n\nTree-SHA512: 285cb0d566f239d260880026a930a7412d86e31ea3819d5371a36364a241dc76164e68c1da6da8369345fa6037ca0abc5ab82d245058c085d5f1fd50111fba48\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ab0e4cf49549640b903bf5fce0e6035b8116397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ab0e4cf49549640b903bf5fce0e6035b8116397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ab0e4cf49549640b903bf5fce0e6035b8116397/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0"
      },
      {
        "sha": "fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe862c5ad4bdce6bcc3bf8712d9472561b270c02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe862c5ad4bdce6bcc3bf8712d9472561b270c02"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7e57671c0e88b2e904a55ed446feb1c82b175d7",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ab0e4cf49549640b903bf5fce0e6035b8116397/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ab0e4cf49549640b903bf5fce0e6035b8116397/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=6ab0e4cf49549640b903bf5fce0e6035b8116397",
        "patch": "@@ -180,6 +180,7 @@ TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n     : buckets(defaultBuckets), bucketMap(defaultBucketMap)\n {\n     decay = _decay;\n+    assert(_scale != 0 && \"_scale must be non-zero\");\n     scale = _scale;\n     confAvg.resize(maxPeriods);\n     for (unsigned int i = 0; i < maxPeriods; i++) {\n@@ -418,6 +419,9 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n             throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n         }\n         filein >> scale;\n+        if (scale == 0) {\n+            throw std::runtime_error(\"Corrupt estimates file. Scale must be non-zero\");\n+        }\n     }\n \n     filein >> avg;"
      }
    ]
  },
  {
    "sha": "2c66cea2d18682de1eef544fc3b74a1487a1741c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzY2Y2VhMmQxODY4MmRlMWVlZjU0NGZjM2I3NGExNDg3YTE3NDFj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-16T04:56:08Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-16T04:56:17Z"
      },
      "message": "Merge #11496: [Trivial] Add missing comma from rescanblockchain example\n\n43f76f6ac Add missing comma from rescanblockchain (MeshCollider)\n\nPull request description:\n\n  #7061 forgot a comma in the HelpExampleRpc() for the rescanblockchain RPC, giving an incorrect example command output:\n  > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n  Was just missed during nit-fixing. This is a trivial fix to add that comma in.\n\nTree-SHA512: b808f32674af585a1ddb78b25621dff0387dbad79c97d65ff61d8a9a12a94e4b8ecf03eda3f281fe439bddb6c0703c39104dbb279f1718949abd930faaa9042f",
      "tree": {
        "sha": "91566fcfcf33d9bd5c8c1fc9040a42437956359e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91566fcfcf33d9bd5c8c1fc9040a42437956359e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnkO/EACgkQHrd2uwPH\nki0FqRAAuqLsDook0JQq2qXj6gwJq+e4k6/XZl2FkJWPuFKb7yF5AKxu8q0POHkX\nJGoC1GZEAD5lOOdVyS7tVYk1cF9Oq+vu2EttY0eYrQiReRg5v6vdRj9h2BXqCgKu\nnlVZY6B5iLtc3BJ2/8661rl6tmlBxLmQlDEirYiQ/BEOYQs0pKb2cUc4/vKcTnj9\n/vohOWcdfadgm5noj5xKgqmLEl7aeHmH5wA10TamRN759u0cQMU+5Uio+3U1/a07\n0Xc/LOSXUI+9+pLRmMJkZiBEXvKGGJaMl1B5PiLWsTgVNLaEik52vWuxzvshhsC5\nrp/9CdFWc445EuVu+lhF8/po95Bwr8a9eFBAPCMFCBsFXRQ4XhVZWmVGX0tbk9BM\n5OPGuTTr2B6t4NM5cEMqvJaKnsX25ozZhQfQ+ZaFC2t61dbEyyldL4HsnaGQTJwk\n/+AMu/o/uoHsB2v53Mo5sWA7zwXQUNpA5HVvPnq0YMUJ/kwLg5dO67WyrhcJY1TL\nuPRnGFhtahUXLDuUIODZILawSIREIhorHAojuan/o+VkejZG72RTbWvlzSTlv1bg\nMO/llNGXB2pNhvwVm5masJv535bzWvfYX1UhUAogz7iB2HNDLkj8p143+J/yAfVL\nWmfCDfnzFWyPhd2Y99NTq4WHZNwJJvg/m8EhRansmOnWobQWo1Y=\n=oKz2\n-----END PGP SIGNATURE-----",
        "payload": "tree 91566fcfcf33d9bd5c8c1fc9040a42437956359e\nparent 6ab0e4cf49549640b903bf5fce0e6035b8116397\nparent 43f76f6acdef3504c072ef7ff8cb92221a92b158\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1508129768 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1508129777 -0700\n\nMerge #11496: [Trivial] Add missing comma from rescanblockchain example\n\n43f76f6ac Add missing comma from rescanblockchain (MeshCollider)\n\nPull request description:\n\n  #7061 forgot a comma in the HelpExampleRpc() for the rescanblockchain RPC, giving an incorrect example command output:\n  > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n  Was just missed during nit-fixing. This is a trivial fix to add that comma in.\n\nTree-SHA512: b808f32674af585a1ddb78b25621dff0387dbad79c97d65ff61d8a9a12a94e4b8ecf03eda3f281fe439bddb6c0703c39104dbb279f1718949abd930faaa9042f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c66cea2d18682de1eef544fc3b74a1487a1741c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ab0e4cf49549640b903bf5fce0e6035b8116397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ab0e4cf49549640b903bf5fce0e6035b8116397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ab0e4cf49549640b903bf5fce0e6035b8116397"
      },
      {
        "sha": "43f76f6acdef3504c072ef7ff8cb92221a92b158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43f76f6acdef3504c072ef7ff8cb92221a92b158",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43f76f6acdef3504c072ef7ff8cb92221a92b158"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6989add89469b8b6990a816ddb3ee30359e6936",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c66cea2d18682de1eef544fc3b74a1487a1741c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c66cea2d18682de1eef544fc3b74a1487a1741c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "patch": "@@ -3233,7 +3233,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n-            + HelpExampleRpc(\"rescanblockchain\", \"100000 120000\")\n+            + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n             );\n     }\n "
      }
    ]
  },
  {
    "sha": "207408b0889caf3f5986bde4b122dbece1ed0dac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDc0MDhiMDg4OWNhZjNmNTk4NmJkZTRiMTIyZGJlY2UxZWQwZGFj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-16T05:42:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-16T05:44:01Z"
      },
      "message": "Fix crash via division by zero assertion",
      "tree": {
        "sha": "790657cc6b502699d0d1c407d6fe2c4fc86f020f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/790657cc6b502699d0d1c407d6fe2c4fc86f020f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/207408b0889caf3f5986bde4b122dbece1ed0dac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnkRyEACgkQHrd2uwPH\nki328Q/+JLspmB3J/KXY1kPaSggfuo5+ASA89VYIS2iOF4RtCgDVW0Wz+fS4274K\nfhrvNOdgdJan8gt6zD+hSHpK7TEkr9CEpkCJinpQmItciw8IeE+5g5SEl6v+Fbse\ntWR0jyzsWe6nPuGjTonx1uYPvkS8wUnvq4f8ichOGr/GrwA55YEZetOabpyUW2zl\nRMtnKxbSUX3Ho3H7VOEzF2KYTL8Zhp2RfdQmBzHGZZkXVgq6FoHPiqILdBUNwWTw\nbA8zmqJrlPBEtxmwZR6ocBSvnkvjhKPzprbkOfWppZnUk9WXsMBmQCLH5fxU89kq\n/TrmyvLlG12xbqQmhT1wUOtDwBGtZYCzfffwwRE+jlFIRH5zsLsyZfy47SosXQoK\n4aMxgsVSFpdFBwYSrHo6r6xyhBHsDcsFwyv6TjBXk3jhTI6Q8A7ibA5UtOKsBgiM\nuKWq0ybOotb6ipMBG7JPlCMnHuKY620ITgXDfQRREjrGQH6jmmMGIO8i7K2h9gx7\n7KeCLQW3enRPpls/0VCqImTs0mjmoE4LlOc2GTMApOmk/rb7uMmsREw3NgN2DJ9q\nUT4oHNayCtyUw8w30qqu/ojjali545BAxzKIy+lak1HY+56q3CJEPvDD90RhYjof\nP4NkGZghE0+ymbtReaAFSenvOxwTh8pE2B0XK8/D5gFTAn+3GMQ=\n=ReS6\n-----END PGP SIGNATURE-----",
        "payload": "tree 790657cc6b502699d0d1c407d6fe2c4fc86f020f\nparent 2c66cea2d18682de1eef544fc3b74a1487a1741c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1508132521 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1508132641 -0700\n\nFix crash via division by zero assertion\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/207408b0889caf3f5986bde4b122dbece1ed0dac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/207408b0889caf3f5986bde4b122dbece1ed0dac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/207408b0889caf3f5986bde4b122dbece1ed0dac/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c66cea2d18682de1eef544fc3b74a1487a1741c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "207e441b6b071bd0cd6051dfe98b0efcdfd9875c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/207408b0889caf3f5986bde4b122dbece1ed0dac/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/207408b0889caf3f5986bde4b122dbece1ed0dac/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=207408b0889caf3f5986bde4b122dbece1ed0dac",
        "patch": "@@ -582,8 +582,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     QString toolTipDust = tr(\"This label turns red if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n-    assert(nBytes != 0);\n-    double dFeeVary = (double)nPayFee / nBytes;\n+    double dFeeVary = (nBytes != 0) ? (double)nPayFee / nBytes : 0;\n \n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      }
    ]
  },
  {
    "sha": "b296bf1496b213eaea53cac0a734679fed7a42f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjk2YmYxNDk2YjIxM2VhZWE1M2NhYzBhNzM0Njc5ZmVkN2E0MmY1",
    "commit": {
      "author": {
        "name": "donaloconnor",
        "email": "donaloconnor@gmail.com",
        "date": "2017-10-16T20:20:28Z"
      },
      "committer": {
        "name": "donaloconnor",
        "email": "donaloconnor@gmail.com",
        "date": "2017-10-16T21:16:36Z"
      },
      "message": "Init: Remove redundant exit(EXIT_FAILURE) instances and replace with return false",
      "tree": {
        "sha": "7bd3fa0ffbcbf15e8bb3754f73d918f76971e051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bd3fa0ffbcbf15e8bb3754f73d918f76971e051"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b296bf1496b213eaea53cac0a734679fed7a42f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b296bf1496b213eaea53cac0a734679fed7a42f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b296bf1496b213eaea53cac0a734679fed7a42f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b296bf1496b213eaea53cac0a734679fed7a42f5/comments",
    "author": {
      "login": "donaloconnor",
      "id": 6394033,
      "node_id": "MDQ6VXNlcjYzOTQwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donaloconnor",
      "html_url": "https://github.com/donaloconnor",
      "followers_url": "https://api.github.com/users/donaloconnor/followers",
      "following_url": "https://api.github.com/users/donaloconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/donaloconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
      "repos_url": "https://api.github.com/users/donaloconnor/repos",
      "events_url": "https://api.github.com/users/donaloconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "donaloconnor",
      "id": 6394033,
      "node_id": "MDQ6VXNlcjYzOTQwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donaloconnor",
      "html_url": "https://github.com/donaloconnor",
      "followers_url": "https://api.github.com/users/donaloconnor/followers",
      "following_url": "https://api.github.com/users/donaloconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/donaloconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
      "repos_url": "https://api.github.com/users/donaloconnor/repos",
      "events_url": "https://api.github.com/users/donaloconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c66cea2d18682de1eef544fc3b74a1487a1741c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5f88c35dbdaa6d7aa2ce1b009e0f0a9449170650",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b296bf1496b213eaea53cac0a734679fed7a42f5/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b296bf1496b213eaea53cac0a734679fed7a42f5/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=b296bf1496b213eaea53cac0a734679fed7a42f5",
        "patch": "@@ -120,7 +120,7 @@ bool AppInit(int argc, char* argv[])\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n                 fprintf(stderr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n-                exit(EXIT_FAILURE);\n+                return false;\n             }\n         }\n \n@@ -132,17 +132,17 @@ bool AppInit(int argc, char* argv[])\n         if (!AppInitBasicSetup())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         if (!AppInitParameterInteraction())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         if (!AppInitSanityChecks())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         if (gArgs.GetBoolArg(\"-daemon\", false))\n         {\n@@ -163,7 +163,7 @@ bool AppInit(int argc, char* argv[])\n         if (!AppInitLockDataDirectory())\n         {\n             // If locking the data directory failed, exit immediately\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         fRet = AppInitMain(threadGroup, scheduler);\n     }"
      }
    ]
  },
  {
    "sha": "fc0176d01e57c0f512d6a8adf4d50df356121b02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzAxNzZkMDFlNTdjMGY1MTJkNmE4YWRmNGQ1MGRmMzU2MTIxYjAy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-17T17:09:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:45:49Z"
      },
      "message": "[tests] use python3 for authproxy.py",
      "tree": {
        "sha": "a0525363e4c228546d9e00993516226bbbf6df91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0525363e4c228546d9e00993516226bbbf6df91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0176d01e57c0f512d6a8adf4d50df356121b02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c66cea2d18682de1eef544fc3b74a1487a1741c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8b2f31624a5051f918d8eef06adf6c5efd41ab20",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0176d01e57c0f512d6a8adf4d50df356121b02/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0176d01e57c0f512d6a8adf4d50df356121b02/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=fc0176d01e57c0f512d6a8adf4d50df356121b02",
        "patch": "@@ -33,20 +33,14 @@\n - uses standard Python json lib\n \"\"\"\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n import base64\n import decimal\n+import http.client\n import json\n import logging\n import socket\n import time\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import urllib.parse\n \n USER_AGENT = \"AuthServiceProxy/0.1\"\n \n@@ -60,7 +54,7 @@ def __init__(self, rpc_error):\n             errmsg = '%(message)s (%(code)i)' % rpc_error\n         except (KeyError, TypeError):\n             errmsg = ''\n-        Exception.__init__(self, errmsg)\n+        super().__init__(errmsg)\n         self.error = rpc_error\n \n \n@@ -77,7 +71,7 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n         self.__service_url = service_url\n         self._service_name = service_name\n         self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n-        self.__url = urlparse.urlparse(service_url)\n+        self.__url = urllib.parse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n         else:\n@@ -98,10 +92,10 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n             # Callables re-use the connection of the original proxy\n             self.__conn = connection\n         elif self.__url.scheme == 'https':\n-            self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,\n+            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port,\n                                                   timeout=timeout)\n         else:\n-            self.__conn = httplib.HTTPConnection(self.__url.hostname, port,\n+            self.__conn = http.client.HTTPConnection(self.__url.hostname, port,\n                                                  timeout=timeout)\n \n     def __getattr__(self, name):\n@@ -124,7 +118,7 @@ def _request(self, method, path, postdata):\n         try:\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n-        except httplib.BadStatusLine as e:\n+        except http.client.BadStatusLine as e:\n             if e.line == \"''\": # if connection was closed, try again\n                 self.__conn.close()\n                 self.__conn.request(method, path, postdata, headers)"
      }
    ]
  },
  {
    "sha": "323d8f61e99cd867fee653694b42e10776324a5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjNkOGY2MWU5OWNkODY3ZmVlNjUzNjk0YjQyZTEwNzc2MzI0YTVi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-17T17:16:57Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:45:49Z"
      },
      "message": "[tests] fix flake8 warnings in authproxy.py",
      "tree": {
        "sha": "33ecd38e384c54a0b8ddcbdfff5f3607766e20de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33ecd38e384c54a0b8ddcbdfff5f3607766e20de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/323d8f61e99cd867fee653694b42e10776324a5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323d8f61e99cd867fee653694b42e10776324a5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/323d8f61e99cd867fee653694b42e10776324a5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323d8f61e99cd867fee653694b42e10776324a5b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc0176d01e57c0f512d6a8adf4d50df356121b02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0176d01e57c0f512d6a8adf4d50df356121b02"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 11,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e3ae0f7930f4335cfcdf421de5850c1be844115c",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/323d8f61e99cd867fee653694b42e10776324a5b/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/323d8f61e99cd867fee653694b42e10776324a5b/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=323d8f61e99cd867fee653694b42e10776324a5b",
        "patch": "@@ -42,9 +42,8 @@\n import time\n import urllib.parse\n \n-USER_AGENT = \"AuthServiceProxy/0.1\"\n-\n HTTP_TIMEOUT = 30\n+USER_AGENT = \"AuthServiceProxy/0.1\"\n \n log = logging.getLogger(\"BitcoinRPC\")\n \n@@ -70,7 +69,7 @@ class AuthServiceProxy(object):\n     def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None, ensure_ascii=True):\n         self.__service_url = service_url\n         self._service_name = service_name\n-        self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n+        self.ensure_ascii = ensure_ascii  # can be toggled on the fly by tests\n         self.__url = urllib.parse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n@@ -92,11 +91,9 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n             # Callables re-use the connection of the original proxy\n             self.__conn = connection\n         elif self.__url.scheme == 'https':\n-            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port,\n-                                                  timeout=timeout)\n+            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port, timeout=timeout)\n         else:\n-            self.__conn = http.client.HTTPConnection(self.__url.hostname, port,\n-                                                 timeout=timeout)\n+            self.__conn = http.client.HTTPConnection(self.__url.hostname, port, timeout=timeout)\n \n     def __getattr__(self, name):\n         if name.startswith('__') and name.endswith('__'):\n@@ -119,13 +116,13 @@ def _request(self, method, path, postdata):\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n         except http.client.BadStatusLine as e:\n-            if e.line == \"''\": # if connection was closed, try again\n+            if e.line == \"''\":  # if connection was closed, try again\n                 self.__conn.close()\n                 self.__conn.request(method, path, postdata, headers)\n                 return self._get_response()\n             else:\n                 raise\n-        except (BrokenPipeError,ConnectionResetError):\n+        except (BrokenPipeError, ConnectionResetError):\n             # Python 3.5+ raises BrokenPipeError instead of BadStatusLine when the connection was reset\n             # ConnectionResetError happens on FreeBSD with Python 3.4\n             self.__conn.close()\n@@ -135,8 +132,8 @@ def _request(self, method, path, postdata):\n     def get_request(self, *args, **argsn):\n         AuthServiceProxy.__id_count += 1\n \n-        log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n-                                 json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+        log.debug(\"-%s-> %s %s\" % (AuthServiceProxy.__id_count, self._service_name,\n+                                   json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         if args and argsn:\n             raise ValueError('Cannot handle both named and positional arguments')\n         return {'version': '1.1',\n@@ -157,7 +154,7 @@ def __call__(self, *args, **argsn):\n \n     def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n-        log.debug(\"--> \"+postdata)\n+        log.debug(\"--> \" + postdata)\n         return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n \n     def _get_response(self):\n@@ -184,9 +181,9 @@ def _get_response(self):\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n         elapsed = time.time() - req_start_time\n         if \"error\" in response and response[\"error\"] is None:\n-            log.debug(\"<-%s- [%.6f] %s\"%(response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+            log.debug(\"<-%s- [%.6f] %s\" % (response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n-            log.debug(\"<-- [%.6f] %s\"%(elapsed,responsedata))\n+            log.debug(\"<-- [%.6f] %s\" % (elapsed, responsedata))\n         return response\n \n     def __truediv__(self, relative_uri):"
      }
    ]
  },
  {
    "sha": "8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjllMzYyN2VmMDU0Yzk3MzJmNGU1MjljNmVkNDI5ZWQ4ZGM3MTgz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-10T14:49:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:45:49Z"
      },
      "message": "[tests] authproxy.py: tidy up __init__()",
      "tree": {
        "sha": "f2f6988f653bb61031842d6f0177439481580fca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2f6988f653bb61031842d6f0177439481580fca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "323d8f61e99cd867fee653694b42e10776324a5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323d8f61e99cd867fee653694b42e10776324a5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/323d8f61e99cd867fee653694b42e10776324a5b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 3,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1a3acf48a34a2fe377b71948e2fb4ec2b37332af",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f9e3627ef054c9732f4e529c6ed429ed8dc7183/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f9e3627ef054c9732f4e529c6ed429ed8dc7183/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
        "patch": "@@ -71,19 +71,9 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n         self._service_name = service_name\n         self.ensure_ascii = ensure_ascii  # can be toggled on the fly by tests\n         self.__url = urllib.parse.urlparse(service_url)\n-        if self.__url.port is None:\n-            port = 80\n-        else:\n-            port = self.__url.port\n-        (user, passwd) = (self.__url.username, self.__url.password)\n-        try:\n-            user = user.encode('utf8')\n-        except AttributeError:\n-            pass\n-        try:\n-            passwd = passwd.encode('utf8')\n-        except AttributeError:\n-            pass\n+        port = 80 if self.__url.port is None else self.__url.port\n+        user = None if self.__url.username is None else self.__url.username.encode('utf8')\n+        passwd = None if self.__url.password is None else self.__url.password.encode('utf8')\n         authpair = user + b':' + passwd\n         self.__auth_header = b'Basic ' + base64.b64encode(authpair)\n "
      }
    ]
  },
  {
    "sha": "f893085325b57dd07bde78a01e5dcb7d303154de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODkzMDg1MzI1YjU3ZGQwN2JkZTc4YTAxZTVkY2I3ZDMwMzE1NGRl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:46:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:46:23Z"
      },
      "message": "[tests] Don't subclass from object for Python 3",
      "tree": {
        "sha": "dd0fcd3155fde2b3a50f6cfee75f482d857c185b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd0fcd3155fde2b3a50f6cfee75f482d857c185b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f893085325b57dd07bde78a01e5dcb7d303154de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f893085325b57dd07bde78a01e5dcb7d303154de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f893085325b57dd07bde78a01e5dcb7d303154de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f893085325b57dd07bde78a01e5dcb7d303154de/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9e3627ef054c9732f4e529c6ed429ed8dc7183"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "f19b845a329c0e135ef299bec2d2d2e0f20a6ae5",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -20,7 +20,7 @@\n from test_framework.script import *\n import struct\n \n-class PreviousSpendableOutput(object):\n+class PreviousSpendableOutput():\n     def __init__(self, tx = CTransaction(), n = -1):\n         self.tx = tx\n         self.n = n  # the output we're spending"
      },
      {
        "sha": "f803367668b4e9bd88c9b5b18be7cc0fb83e0a9d",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -89,7 +89,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n         assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n \n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n-class UTXO(object):\n+class UTXO():\n     def __init__(self, sha256, n, nValue):\n         self.sha256 = sha256\n         self.n = n"
      },
      {
        "sha": "bd3a3b3fabebe0f2d306733d83f827a1810b9b91",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -62,7 +62,7 @@ def EncodeDecimal(o):\n         return str(o)\n     raise TypeError(repr(o) + \" is not JSON serializable\")\n \n-class AuthServiceProxy(object):\n+class AuthServiceProxy():\n     __id_count = 0\n \n     # ensure_ascii: escape unicode as \\uXXXX, passed to json.dumps"
      },
      {
        "sha": "ad047224882db70b1cfbeef1c4686d8772aea05b",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -10,7 +10,7 @@\n \n logger = logging.getLogger(\"TestFramework.blockstore\")\n \n-class BlockStore(object):\n+class BlockStore():\n     \"\"\"BlockStore helper class.\n \n     BlockStore keeps a map of blocks and implements helper functions for\n@@ -127,7 +127,7 @@ def get_locator(self, current_tip=None):\n         locator.vHave = r\n         return locator\n \n-class TxStore(object):\n+class TxStore():\n     def __init__(self, datadir):\n         self.txDB = dbmd.open(datadir + \"/transactions\", 'c')\n "
      },
      {
        "sha": "b0417e02d815845b8a8afd017a50964513de037f",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -27,7 +27,7 @@\n \n global mininode_lock\n \n-class RejectResult(object):\n+class RejectResult():\n     \"\"\"Outcome that expects rejection of a transaction or block.\"\"\"\n     def __init__(self, code, reason=b''):\n         self.code = code\n@@ -156,13 +156,13 @@ def send_mempool(self):\n #    across all connections.  (If outcome of final tx is specified as true\n #    or false, then only the last tx is tested against outcome.)\n \n-class TestInstance(object):\n+class TestInstance():\n     def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n         self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n \n-class TestManager(object):\n+class TestManager():\n \n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen"
      },
      {
        "sha": "ddc3c515b2c699cfcf304573e1c9cb39a2c2d2ab",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -14,7 +14,7 @@\n REFERENCE_FILENAME = 'rpc_interface.txt'\n \n \n-class AuthServiceProxyWrapper(object):\n+class AuthServiceProxyWrapper():\n     \"\"\"\n     An object that wraps AuthServiceProxy to record specific RPC calls.\n "
      },
      {
        "sha": "aa91fb5b0d83272ab24255f85a73c59bcee1e8c4",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -84,7 +84,7 @@ def _check_result(val, func, args):\n ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n \n-class CECKey(object):\n+class CECKey():\n     \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n \n     POINT_CONVERSION_COMPRESSED = 2"
      },
      {
        "sha": "339efb72c22130b4a3f7712e69c539bbee3b8ed7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -219,7 +219,7 @@ def ToHex(obj):\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n-class CAddress(object):\n+class CAddress():\n     def __init__(self):\n         self.nServices = 1\n         self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n@@ -246,7 +246,7 @@ def __repr__(self):\n \n MSG_WITNESS_FLAG = 1<<30\n \n-class CInv(object):\n+class CInv():\n     typemap = {\n         0: \"Error\",\n         1: \"TX\",\n@@ -275,7 +275,7 @@ def __repr__(self):\n             % (self.typemap[self.type], self.hash)\n \n \n-class CBlockLocator(object):\n+class CBlockLocator():\n     def __init__(self):\n         self.nVersion = MY_VERSION\n         self.vHave = []\n@@ -295,7 +295,7 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vHave))\n \n \n-class COutPoint(object):\n+class COutPoint():\n     def __init__(self, hash=0, n=0):\n         self.hash = hash\n         self.n = n\n@@ -314,7 +314,7 @@ def __repr__(self):\n         return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n \n \n-class CTxIn(object):\n+class CTxIn():\n     def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n         if outpoint is None:\n             self.prevout = COutPoint()\n@@ -342,7 +342,7 @@ def __repr__(self):\n                self.nSequence)\n \n \n-class CTxOut(object):\n+class CTxOut():\n     def __init__(self, nValue=0, scriptPubKey=b\"\"):\n         self.nValue = nValue\n         self.scriptPubKey = scriptPubKey\n@@ -363,7 +363,7 @@ def __repr__(self):\n                bytes_to_hex_str(self.scriptPubKey))\n \n \n-class CScriptWitness(object):\n+class CScriptWitness():\n     def __init__(self):\n         # stack is a vector of strings\n         self.stack = []\n@@ -378,7 +378,7 @@ def is_null(self):\n         return True\n \n \n-class CTxInWitness(object):\n+class CTxInWitness():\n     def __init__(self):\n         self.scriptWitness = CScriptWitness()\n \n@@ -395,7 +395,7 @@ def is_null(self):\n         return self.scriptWitness.is_null()\n \n \n-class CTxWitness(object):\n+class CTxWitness():\n     def __init__(self):\n         self.vtxinwit = []\n \n@@ -423,7 +423,7 @@ def is_null(self):\n         return True\n \n \n-class CTransaction(object):\n+class CTransaction():\n     def __init__(self, tx=None):\n         if tx is None:\n             self.nVersion = 1\n@@ -526,7 +526,7 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n \n \n-class CBlockHeader(object):\n+class CBlockHeader():\n     def __init__(self, header=None):\n         if header is None:\n             self.set_null()\n@@ -666,7 +666,7 @@ def __repr__(self):\n                time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n \n \n-class CUnsignedAlert(object):\n+class CUnsignedAlert():\n     def __init__(self):\n         self.nVersion = 1\n         self.nRelayUntil = 0\n@@ -721,7 +721,7 @@ def __repr__(self):\n                self.strComment, self.strStatusBar, self.strReserved)\n \n \n-class CAlert(object):\n+class CAlert():\n     def __init__(self):\n         self.vchMsg = b\"\"\n         self.vchSig = b\"\"\n@@ -741,7 +741,7 @@ def __repr__(self):\n             % (len(self.vchMsg), len(self.vchSig))\n \n \n-class PrefilledTransaction(object):\n+class PrefilledTransaction():\n     def __init__(self, index=0, tx = None):\n         self.index = index\n         self.tx = tx\n@@ -767,7 +767,7 @@ def __repr__(self):\n         return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n \n # This is what we send on the wire, in a cmpctblock message.\n-class P2PHeaderAndShortIDs(object):\n+class P2PHeaderAndShortIDs():\n     def __init__(self):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -819,7 +819,7 @@ def calculate_shortid(k0, k1, tx_hash):\n \n # This version gets rid of the array lengths, and reinterprets the differential\n # encoding into indices that can be used for lookup.\n-class HeaderAndShortIDs(object):\n+class HeaderAndShortIDs():\n     def __init__(self, p2pheaders_and_shortids = None):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -880,7 +880,7 @@ def __repr__(self):\n         return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n \n \n-class BlockTransactionsRequest(object):\n+class BlockTransactionsRequest():\n \n     def __init__(self, blockhash=0, indexes = None):\n         self.blockhash = blockhash\n@@ -920,7 +920,7 @@ def __repr__(self):\n         return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n \n \n-class BlockTransactions(object):\n+class BlockTransactions():\n \n     def __init__(self, blockhash=0, transactions = None):\n         self.blockhash = blockhash\n@@ -944,7 +944,7 @@ def __repr__(self):\n \n \n # Objects that correspond to messages on the wire\n-class msg_version(object):\n+class msg_version():\n     command = b\"version\"\n \n     def __init__(self):\n@@ -1012,7 +1012,7 @@ def __repr__(self):\n                self.strSubVer, self.nStartingHeight, self.nRelay)\n \n \n-class msg_verack(object):\n+class msg_verack():\n     command = b\"verack\"\n \n     def __init__(self):\n@@ -1028,7 +1028,7 @@ def __repr__(self):\n         return \"msg_verack()\"\n \n \n-class msg_addr(object):\n+class msg_addr():\n     command = b\"addr\"\n \n     def __init__(self):\n@@ -1044,7 +1044,7 @@ def __repr__(self):\n         return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n \n \n-class msg_alert(object):\n+class msg_alert():\n     command = b\"alert\"\n \n     def __init__(self):\n@@ -1063,7 +1063,7 @@ def __repr__(self):\n         return \"msg_alert(alert=%s)\" % (repr(self.alert), )\n \n \n-class msg_inv(object):\n+class msg_inv():\n     command = b\"inv\"\n \n     def __init__(self, inv=None):\n@@ -1082,7 +1082,7 @@ def __repr__(self):\n         return \"msg_inv(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getdata(object):\n+class msg_getdata():\n     command = b\"getdata\"\n \n     def __init__(self, inv=None):\n@@ -1098,7 +1098,7 @@ def __repr__(self):\n         return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getblocks(object):\n+class msg_getblocks():\n     command = b\"getblocks\"\n \n     def __init__(self):\n@@ -1121,7 +1121,7 @@ def __repr__(self):\n             % (repr(self.locator), self.hashstop)\n \n \n-class msg_tx(object):\n+class msg_tx():\n     command = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n@@ -1142,7 +1142,7 @@ def serialize(self):\n         return self.tx.serialize_with_witness()\n \n \n-class msg_block(object):\n+class msg_block():\n     command = b\"block\"\n \n     def __init__(self, block=None):\n@@ -1162,7 +1162,7 @@ def __repr__(self):\n \n # for cases where a user needs tighter control over what is sent over the wire\n # note that the user must supply the name of the command, and the data\n-class msg_generic(object):\n+class msg_generic():\n     def __init__(self, command, data=None):\n         self.command = command\n         self.data = data\n@@ -1179,7 +1179,7 @@ def serialize(self):\n         r = self.block.serialize(with_witness=True)\n         return r\n \n-class msg_getaddr(object):\n+class msg_getaddr():\n     command = b\"getaddr\"\n \n     def __init__(self):\n@@ -1195,7 +1195,7 @@ def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n-class msg_ping_prebip31(object):\n+class msg_ping_prebip31():\n     command = b\"ping\"\n \n     def __init__(self):\n@@ -1211,7 +1211,7 @@ def __repr__(self):\n         return \"msg_ping() (pre-bip31)\"\n \n \n-class msg_ping(object):\n+class msg_ping():\n     command = b\"ping\"\n \n     def __init__(self, nonce=0):\n@@ -1229,7 +1229,7 @@ def __repr__(self):\n         return \"msg_ping(nonce=%08x)\" % self.nonce\n \n \n-class msg_pong(object):\n+class msg_pong():\n     command = b\"pong\"\n \n     def __init__(self, nonce=0):\n@@ -1247,7 +1247,7 @@ def __repr__(self):\n         return \"msg_pong(nonce=%08x)\" % self.nonce\n \n \n-class msg_mempool(object):\n+class msg_mempool():\n     command = b\"mempool\"\n \n     def __init__(self):\n@@ -1262,7 +1262,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n-class msg_sendheaders(object):\n+class msg_sendheaders():\n     command = b\"sendheaders\"\n \n     def __init__(self):\n@@ -1282,7 +1282,7 @@ def __repr__(self):\n # number of entries\n # vector of hashes\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n-class msg_getheaders(object):\n+class msg_getheaders():\n     command = b\"getheaders\"\n \n     def __init__(self):\n@@ -1307,7 +1307,7 @@ def __repr__(self):\n \n # headers message has\n # <count> <vector of block headers>\n-class msg_headers(object):\n+class msg_headers():\n     command = b\"headers\"\n \n     def __init__(self, headers=None):\n@@ -1327,7 +1327,7 @@ def __repr__(self):\n         return \"msg_headers(headers=%s)\" % repr(self.headers)\n \n \n-class msg_reject(object):\n+class msg_reject():\n     command = b\"reject\"\n     REJECT_MALFORMED = 1\n \n@@ -1358,7 +1358,7 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-class msg_feefilter(object):\n+class msg_feefilter():\n     command = b\"feefilter\"\n \n     def __init__(self, feerate=0):\n@@ -1375,7 +1375,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_feefilter(feerate=%08x)\" % self.feerate\n \n-class msg_sendcmpct(object):\n+class msg_sendcmpct():\n     command = b\"sendcmpct\"\n \n     def __init__(self):\n@@ -1395,7 +1395,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n \n-class msg_cmpctblock(object):\n+class msg_cmpctblock():\n     command = b\"cmpctblock\"\n \n     def __init__(self, header_and_shortids = None):\n@@ -1413,7 +1413,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n \n-class msg_getblocktxn(object):\n+class msg_getblocktxn():\n     command = b\"getblocktxn\"\n \n     def __init__(self):\n@@ -1431,7 +1431,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n \n-class msg_blocktxn(object):\n+class msg_blocktxn():\n     command = b\"blocktxn\"\n \n     def __init__(self):\n@@ -1454,7 +1454,7 @@ def serialize(self):\n         r += self.block_transactions.serialize(with_witness=True)\n         return r\n \n-class NodeConnCB(object):\n+class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n \n     Individual testcases should subclass this and override the on_* methods"
      },
      {
        "sha": "a4c046bd3d925994b631cd662d200342c6bed12c",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -370,7 +370,7 @@ def __init__(self, msg, data):\n         super(CScriptTruncatedPushDataError, self).__init__(msg)\n \n # This is used, eg, for blockchain heights in coinbase scripts (bip34)\n-class CScriptNum(object):\n+class CScriptNum():\n     def __init__(self, d=0):\n         self.value = d\n "
      },
      {
        "sha": "7b40c47fbf401f8a9af93a1ddcbc36c32506ef75",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -31,15 +31,15 @@ def recvall(s, n):\n     return rv\n \n ### Implementation classes\n-class Socks5Configuration(object):\n+class Socks5Configuration():\n     \"\"\"Proxy configuration.\"\"\"\n     def __init__(self):\n         self.addr = None # Bind address (must be set)\n         self.af = socket.AF_INET # Bind address family\n         self.unauth = False  # Support unauthenticated\n         self.auth = False  # Support authentication\n \n-class Socks5Command(object):\n+class Socks5Command():\n     \"\"\"Information about an incoming socks5 command.\"\"\"\n     def __init__(self, cmd, atyp, addr, port, username, password):\n         self.cmd = cmd # Command (one of Command.*)\n@@ -51,7 +51,7 @@ def __init__(self, cmd, atyp, addr, port, username, password):\n     def __repr__(self):\n         return 'Socks5Command(%s,%s,%s,%s,%s,%s)' % (self.cmd, self.atyp, self.addr, self.port, self.username, self.password)\n \n-class Socks5Connection(object):\n+class Socks5Connection():\n     def __init__(self, serv, conn, peer):\n         self.serv = serv\n         self.conn = conn\n@@ -122,7 +122,7 @@ def handle(self):\n         finally:\n             self.conn.close()\n \n-class Socks5Server(object):\n+class Socks5Server():\n     def __init__(self, conf):\n         self.conf = conf\n         self.s = socket.socket(conf.af)"
      },
      {
        "sha": "d31e9a28538136be597bc742b816af461bd70156",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -43,7 +43,7 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-class BitcoinTestFramework(object):\n+class BitcoinTestFramework():\n     \"\"\"Base class for a bitcoin test script.\n \n     Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods."
      },
      {
        "sha": "5411dab3faaedb416ecbeb78181c424e48d6667b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -459,7 +459,7 @@ def check_script_list(src_dir):\n             # On travis this warning is an error to prevent merging incomplete commits into master\n             sys.exit(1)\n \n-class RPCCoverage(object):\n+class RPCCoverage():\n     \"\"\"\n     Coverage reporting utilities for test_runner.\n "
      }
    ]
  },
  {
    "sha": "8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTRhYTM1ZmZiY2FhMGUwYTNlY2VhYTUwMDE5M2IwZjk3ZDk1N2Fi",
    "commit": {
      "author": {
        "name": "Aaron Golliver",
        "email": "aaron.golliver@gmail.com",
        "date": "2017-10-14T23:06:21Z"
      },
      "committer": {
        "name": "Aaron Golliver",
        "email": "aaron.golliver@gmail.com",
        "date": "2017-10-17T03:58:23Z"
      },
      "message": "move human-readable byte formatting to guiutil",
      "tree": {
        "sha": "b2c98603e3a20d4dedf0c611d3a8589bc182f152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2c98603e3a20d4dedf0c611d3a8589bc182f152"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/comments",
    "author": {
      "login": "aria-golliver",
      "id": 889444,
      "node_id": "MDQ6VXNlcjg4OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/889444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aria-golliver",
      "html_url": "https://github.com/aria-golliver",
      "followers_url": "https://api.github.com/users/aria-golliver/followers",
      "following_url": "https://api.github.com/users/aria-golliver/following{/other_user}",
      "gists_url": "https://api.github.com/users/aria-golliver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aria-golliver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aria-golliver/subscriptions",
      "organizations_url": "https://api.github.com/users/aria-golliver/orgs",
      "repos_url": "https://api.github.com/users/aria-golliver/repos",
      "events_url": "https://api.github.com/users/aria-golliver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aria-golliver/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "aria-golliver",
      "id": 889444,
      "node_id": "MDQ6VXNlcjg4OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/889444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aria-golliver",
      "html_url": "https://github.com/aria-golliver",
      "followers_url": "https://api.github.com/users/aria-golliver/followers",
      "following_url": "https://api.github.com/users/aria-golliver/following{/other_user}",
      "gists_url": "https://api.github.com/users/aria-golliver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aria-golliver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aria-golliver/subscriptions",
      "organizations_url": "https://api.github.com/users/aria-golliver/orgs",
      "repos_url": "https://api.github.com/users/aria-golliver/repos",
      "events_url": "https://api.github.com/users/aria-golliver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aria-golliver/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "470c730e3fa9d1120dda1de2d433304023c8aa78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470c730e3fa9d1120dda1de2d433304023c8aa78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/470c730e3fa9d1120dda1de2d433304023c8aa78"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4bd63f46492982bc2cf1cf492558e71d01a310fb",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
        "patch": "@@ -984,6 +984,18 @@ QString formatNiceTimeOffset(qint64 secs)\n     return timeBehindText;\n }\n \n+QString formatBytes(uint64_t bytes)\n+{\n+    if(bytes < 1024)\n+        return QString(QObject::tr(\"%1 B\")).arg(bytes);\n+    if(bytes < 1024 * 1024)\n+        return QString(QObject::tr(\"%1 KB\")).arg(bytes / 1024);\n+    if(bytes < 1024 * 1024 * 1024)\n+        return QString(QObject::tr(\"%1 MB\")).arg(bytes / 1024 / 1024);\n+\n+    return QString(QObject::tr(\"%1 GB\")).arg(bytes / 1024 / 1024 / 1024);\n+}\n+\n void ClickableLabel::mouseReleaseEvent(QMouseEvent *event)\n {\n     Q_EMIT clicked(event->pos());"
      },
      {
        "sha": "7622816f7fcc8ffcfdfefd9eab004a98b69d36cc",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
        "patch": "@@ -199,6 +199,8 @@ namespace GUIUtil\n \n     QString formatNiceTimeOffset(qint64 secs);\n \n+    QString formatBytes(uint64_t bytes);\n+\n     class ClickableLabel : public QLabel\n     {\n         Q_OBJECT"
      },
      {
        "sha": "068c40e1e6fd1a44f3e1a2217e1251a4eaf85a12",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
        "patch": "@@ -935,18 +935,6 @@ void RPCConsole::on_sldGraphRange_valueChanged(int value)\n     setTrafficGraphRange(mins);\n }\n \n-QString RPCConsole::FormatBytes(quint64 bytes)\n-{\n-    if(bytes < 1024)\n-        return QString(tr(\"%1 B\")).arg(bytes);\n-    if(bytes < 1024 * 1024)\n-        return QString(tr(\"%1 KB\")).arg(bytes / 1024);\n-    if(bytes < 1024 * 1024 * 1024)\n-        return QString(tr(\"%1 MB\")).arg(bytes / 1024 / 1024);\n-\n-    return QString(tr(\"%1 GB\")).arg(bytes / 1024 / 1024 / 1024);\n-}\n-\n void RPCConsole::setTrafficGraphRange(int mins)\n {\n     ui->trafficGraph->setGraphRangeMins(mins);\n@@ -955,8 +943,8 @@ void RPCConsole::setTrafficGraphRange(int mins)\n \n void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)\n {\n-    ui->lblBytesIn->setText(FormatBytes(totalBytesIn));\n-    ui->lblBytesOut->setText(FormatBytes(totalBytesOut));\n+    ui->lblBytesIn->setText(GUIUtil::formatBytes(totalBytesIn));\n+    ui->lblBytesOut->setText(GUIUtil::formatBytes(totalBytesOut));\n }\n \n void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelection &deselected)\n@@ -1050,8 +1038,8 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n     ui->peerServices->setText(GUIUtil::formatServicesStr(stats->nodeStats.nServices));\n     ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastSend) : tr(\"never\"));\n     ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n-    ui->peerBytesSent->setText(FormatBytes(stats->nodeStats.nSendBytes));\n-    ui->peerBytesRecv->setText(FormatBytes(stats->nodeStats.nRecvBytes));\n+    ui->peerBytesSent->setText(GUIUtil::formatBytes(stats->nodeStats.nSendBytes));\n+    ui->peerBytesRecv->setText(GUIUtil::formatBytes(stats->nodeStats.nRecvBytes));\n     ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));"
      },
      {
        "sha": "ad6e84a44ac58c2344746ef62ca578316fd6afdf",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
        "patch": "@@ -123,7 +123,6 @@ public Q_SLOTS:\n     void cmdRequest(const QString &command);\n \n private:\n-    static QString FormatBytes(quint64 bytes);\n     void startExecutor();\n     void setTrafficGraphRange(int mins);\n     /** show detailed information on ui about selected node */"
      }
    ]
  },
  {
    "sha": "6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjE4OTFlMmMwNDQxMGViYWExZDYzOTlhYWI1NmI2Yzc0OTVkMGZm",
    "commit": {
      "author": {
        "name": "Aaron Golliver",
        "email": "aaron.golliver@gmail.com",
        "date": "2017-10-14T23:06:54Z"
      },
      "committer": {
        "name": "Aaron Golliver",
        "email": "aaron.golliver@gmail.com",
        "date": "2017-10-17T03:58:23Z"
      },
      "message": "Add Sent and Received information to the debug menu peer list",
      "tree": {
        "sha": "e187b71f2eefe37b2125fec2eab604b3106fd43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e187b71f2eefe37b2125fec2eab604b3106fd43b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff/comments",
    "author": {
      "login": "aria-golliver",
      "id": 889444,
      "node_id": "MDQ6VXNlcjg4OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/889444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aria-golliver",
      "html_url": "https://github.com/aria-golliver",
      "followers_url": "https://api.github.com/users/aria-golliver/followers",
      "following_url": "https://api.github.com/users/aria-golliver/following{/other_user}",
      "gists_url": "https://api.github.com/users/aria-golliver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aria-golliver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aria-golliver/subscriptions",
      "organizations_url": "https://api.github.com/users/aria-golliver/orgs",
      "repos_url": "https://api.github.com/users/aria-golliver/repos",
      "events_url": "https://api.github.com/users/aria-golliver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aria-golliver/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "aria-golliver",
      "id": 889444,
      "node_id": "MDQ6VXNlcjg4OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/889444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aria-golliver",
      "html_url": "https://github.com/aria-golliver",
      "followers_url": "https://api.github.com/users/aria-golliver/followers",
      "following_url": "https://api.github.com/users/aria-golliver/following{/other_user}",
      "gists_url": "https://api.github.com/users/aria-golliver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aria-golliver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aria-golliver/subscriptions",
      "organizations_url": "https://api.github.com/users/aria-golliver/orgs",
      "repos_url": "https://api.github.com/users/aria-golliver/repos",
      "events_url": "https://api.github.com/users/aria-golliver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aria-golliver/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4aa35ffbcaa0e0a3eceaa500193b0f97d957ab"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 21,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8b2a7e7047c26cb30429a53af762e754922d0078",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
        "patch": "@@ -33,6 +33,10 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n         return pLeft->cleanSubVer.compare(pRight->cleanSubVer) < 0;\n     case PeerTableModel::Ping:\n         return pLeft->dMinPing < pRight->dMinPing;\n+    case PeerTableModel::Sent:\n+        return pLeft->nSendBytes < pRight->nSendBytes;\n+    case PeerTableModel::Received:\n+        return pLeft->nRecvBytes < pRight->nRecvBytes;\n     }\n \n     return false;\n@@ -114,7 +118,7 @@ PeerTableModel::PeerTableModel(ClientModel *parent) :\n     clientModel(parent),\n     timer(0)\n {\n-    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping\");\n+    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"Ping\") << tr(\"Sent\") << tr(\"Received\") << tr(\"User Agent\");\n     priv.reset(new PeerTablePriv());\n     // default to unsorted\n     priv->sortColumn = -1;\n@@ -173,10 +177,20 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n             return QString::fromStdString(rec->nodeStats.cleanSubVer);\n         case Ping:\n             return GUIUtil::formatPingTime(rec->nodeStats.dMinPing);\n+        case Sent:\n+            return GUIUtil::formatBytes(rec->nodeStats.nSendBytes);\n+        case Received:\n+            return GUIUtil::formatBytes(rec->nodeStats.nRecvBytes);\n         }\n     } else if (role == Qt::TextAlignmentRole) {\n-        if (index.column() == Ping)\n-            return (QVariant)(Qt::AlignRight | Qt::AlignVCenter);\n+        switch (index.column()) {\n+            case Ping:\n+            case Sent:\n+            case Received:\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            default:\n+                return QVariant();\n+        }\n     }\n \n     return QVariant();"
      },
      {
        "sha": "ec91d07127a07c0729108a7171432dc3faa84504",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
        "patch": "@@ -55,8 +55,10 @@ class PeerTableModel : public QAbstractTableModel\n     enum ColumnIndex {\n         NetNodeId = 0,\n         Address = 1,\n-        Subversion = 2,\n-        Ping = 3\n+        Ping = 2,\n+        Sent = 3,\n+        Received = 4,\n+        Subversion = 5\n     };\n \n     /** @name Methods overridden from QAbstractTableModel"
      }
    ]
  },
  {
    "sha": "14b860bf64020451ced823b859da8cb912278ab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGI4NjBiZjY0MDIwNDUxY2VkODIzYjg1OWRhOGNiOTEyMjc4YWI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-17T19:03:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-17T19:03:40Z"
      },
      "message": "Merge #11513: [trivial] [tests] A few Python3 tidy ups\n\nf89308532 [tests] Don't subclass from object for Python 3 (John Newbery)\n8f9e3627e [tests] authproxy.py: tidy up __init__() (John Newbery)\n323d8f61e [tests] fix flake8 warnings in authproxy.py (John Newbery)\nfc0176d01 [tests] use python3 for authproxy.py (John Newbery)\n\nPull request description:\n\n  A few trivial tidyups in the test_framework:\n\n  - the test_framework can only be run in Python3, so remove the py2/3 compatibility workarounds in authproxy.py\n  - while there, do some general tidying up of the module - fix flake8 warnings, make initialization code more compact\n  - All classes in Python3 are new-style. No need to explicitly inherit from `object`.\n\nTree-SHA512: d15c93aa4b47c1ad7d05baa7a564053cf0294932e178c95ef335380113f42e1af314978d07d3b107292a8e3496fd840535b5571a9164182feaa062a1e9ff8b73",
      "tree": {
        "sha": "dd0fcd3155fde2b3a50f6cfee75f482d857c185b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd0fcd3155fde2b3a50f6cfee75f482d857c185b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14b860bf64020451ced823b859da8cb912278ab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ5lQMAAoJENLqSFDnUoslrG0QAKnaWLL17cGANq/aGITIKo29\nICiwTqmBS2jtnQnG0I/oJ4TUqBmraetfYw6FxxfEr1mud8TfkKr/tAjFoPZxrHrs\nbZ4ax0BNoSgj6aKyPZvegKwGbDAEc5SVEtxGKLa+U0xOM7OSsDJR8KF9B89qrfQ9\nbLSKnTrEj+8Onup3PZQcUmB+veWLDZld5sHx4ii5euehBaGsBMVt9W+mjJT6uK+V\nGGPw0DDr3mg5iv+yEgGVHTS5j6bgzzovENtvDqJtUWQLz9VfbY7FeiNZIftQFd25\ncyfxSFOcCp9pfStPpsbNa2TbHpzo2BM6Ha7bS8yYnoqFt4YUKrG05YcBRvbj3f54\n9ny+h44Y1ZeoWEtkNN5vfe/1OqKtcLMFteoM0vNR18/GlChcJQ3WUDBLjhoI4HMh\nDUbkExufC/MsDDbdLmYZn9kt9e7a+0yAE+kTQvUS/ATcctyLG/o406jGejkxPSZK\n3rhZxHhdxboaQJWMjGhtP4uYb5FAGunCW6nbQ0uKb8ZdBEtgSC/Km5YILrJtdiyO\n5J6Om+J8ro2zpOeRDVkqUt/5jnsKo+OYkmPF1h19uGcDfdZFLgHurxtbsmK2IZa5\n8ksQ5xedqxvJn76vvhLLwbSLIF7lvOETegkIPmXtzwiKsaBWVYPKfXfFyoDiRk1K\nE0CVE46DHdmeEbFkyE+2\n=P4SQ\n-----END PGP SIGNATURE-----",
        "payload": "tree dd0fcd3155fde2b3a50f6cfee75f482d857c185b\nparent 2c66cea2d18682de1eef544fc3b74a1487a1741c\nparent f893085325b57dd07bde78a01e5dcb7d303154de\nauthor MarcoFalke <falke.marco@gmail.com> 1508266989 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1508267020 +0200\n\nMerge #11513: [trivial] [tests] A few Python3 tidy ups\n\nf89308532 [tests] Don't subclass from object for Python 3 (John Newbery)\n8f9e3627e [tests] authproxy.py: tidy up __init__() (John Newbery)\n323d8f61e [tests] fix flake8 warnings in authproxy.py (John Newbery)\nfc0176d01 [tests] use python3 for authproxy.py (John Newbery)\n\nPull request description:\n\n  A few trivial tidyups in the test_framework:\n\n  - the test_framework can only be run in Python3, so remove the py2/3 compatibility workarounds in authproxy.py\n  - while there, do some general tidying up of the module - fix flake8 warnings, make initialization code more compact\n  - All classes in Python3 are new-style. No need to explicitly inherit from `object`.\n\nTree-SHA512: d15c93aa4b47c1ad7d05baa7a564053cf0294932e178c95ef335380113f42e1af314978d07d3b107292a8e3496fd840535b5571a9164182feaa062a1e9ff8b73\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14b860bf64020451ced823b859da8cb912278ab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14b860bf64020451ced823b859da8cb912278ab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14b860bf64020451ced823b859da8cb912278ab9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c66cea2d18682de1eef544fc3b74a1487a1741c"
      },
      {
        "sha": "f893085325b57dd07bde78a01e5dcb7d303154de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f893085325b57dd07bde78a01e5dcb7d303154de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f893085325b57dd07bde78a01e5dcb7d303154de"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 79,
      "deletions": 98
    },
    "files": [
      {
        "sha": "f19b845a329c0e135ef299bec2d2d2e0f20a6ae5",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -20,7 +20,7 @@\n from test_framework.script import *\n import struct\n \n-class PreviousSpendableOutput(object):\n+class PreviousSpendableOutput():\n     def __init__(self, tx = CTransaction(), n = -1):\n         self.tx = tx\n         self.n = n  # the output we're spending"
      },
      {
        "sha": "f803367668b4e9bd88c9b5b18be7cc0fb83e0a9d",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -89,7 +89,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n         assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n \n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n-class UTXO(object):\n+class UTXO():\n     def __init__(self, sha256, n, nValue):\n         self.sha256 = sha256\n         self.n = n"
      },
      {
        "sha": "bd3a3b3fabebe0f2d306733d83f827a1810b9b91",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 20,
        "deletions": 39,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -33,24 +33,17 @@\n - uses standard Python json lib\n \"\"\"\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n import base64\n import decimal\n+import http.client\n import json\n import logging\n import socket\n import time\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n-\n-USER_AGENT = \"AuthServiceProxy/0.1\"\n+import urllib.parse\n \n HTTP_TIMEOUT = 30\n+USER_AGENT = \"AuthServiceProxy/0.1\"\n \n log = logging.getLogger(\"BitcoinRPC\")\n \n@@ -60,7 +53,7 @@ def __init__(self, rpc_error):\n             errmsg = '%(message)s (%(code)i)' % rpc_error\n         except (KeyError, TypeError):\n             errmsg = ''\n-        Exception.__init__(self, errmsg)\n+        super().__init__(errmsg)\n         self.error = rpc_error\n \n \n@@ -69,40 +62,28 @@ def EncodeDecimal(o):\n         return str(o)\n     raise TypeError(repr(o) + \" is not JSON serializable\")\n \n-class AuthServiceProxy(object):\n+class AuthServiceProxy():\n     __id_count = 0\n \n     # ensure_ascii: escape unicode as \\uXXXX, passed to json.dumps\n     def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None, ensure_ascii=True):\n         self.__service_url = service_url\n         self._service_name = service_name\n-        self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n-        self.__url = urlparse.urlparse(service_url)\n-        if self.__url.port is None:\n-            port = 80\n-        else:\n-            port = self.__url.port\n-        (user, passwd) = (self.__url.username, self.__url.password)\n-        try:\n-            user = user.encode('utf8')\n-        except AttributeError:\n-            pass\n-        try:\n-            passwd = passwd.encode('utf8')\n-        except AttributeError:\n-            pass\n+        self.ensure_ascii = ensure_ascii  # can be toggled on the fly by tests\n+        self.__url = urllib.parse.urlparse(service_url)\n+        port = 80 if self.__url.port is None else self.__url.port\n+        user = None if self.__url.username is None else self.__url.username.encode('utf8')\n+        passwd = None if self.__url.password is None else self.__url.password.encode('utf8')\n         authpair = user + b':' + passwd\n         self.__auth_header = b'Basic ' + base64.b64encode(authpair)\n \n         if connection:\n             # Callables re-use the connection of the original proxy\n             self.__conn = connection\n         elif self.__url.scheme == 'https':\n-            self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,\n-                                                  timeout=timeout)\n+            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port, timeout=timeout)\n         else:\n-            self.__conn = httplib.HTTPConnection(self.__url.hostname, port,\n-                                                 timeout=timeout)\n+            self.__conn = http.client.HTTPConnection(self.__url.hostname, port, timeout=timeout)\n \n     def __getattr__(self, name):\n         if name.startswith('__') and name.endswith('__'):\n@@ -124,14 +105,14 @@ def _request(self, method, path, postdata):\n         try:\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n-        except httplib.BadStatusLine as e:\n-            if e.line == \"''\": # if connection was closed, try again\n+        except http.client.BadStatusLine as e:\n+            if e.line == \"''\":  # if connection was closed, try again\n                 self.__conn.close()\n                 self.__conn.request(method, path, postdata, headers)\n                 return self._get_response()\n             else:\n                 raise\n-        except (BrokenPipeError,ConnectionResetError):\n+        except (BrokenPipeError, ConnectionResetError):\n             # Python 3.5+ raises BrokenPipeError instead of BadStatusLine when the connection was reset\n             # ConnectionResetError happens on FreeBSD with Python 3.4\n             self.__conn.close()\n@@ -141,8 +122,8 @@ def _request(self, method, path, postdata):\n     def get_request(self, *args, **argsn):\n         AuthServiceProxy.__id_count += 1\n \n-        log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n-                                 json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+        log.debug(\"-%s-> %s %s\" % (AuthServiceProxy.__id_count, self._service_name,\n+                                   json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         if args and argsn:\n             raise ValueError('Cannot handle both named and positional arguments')\n         return {'version': '1.1',\n@@ -163,7 +144,7 @@ def __call__(self, *args, **argsn):\n \n     def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n-        log.debug(\"--> \"+postdata)\n+        log.debug(\"--> \" + postdata)\n         return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n \n     def _get_response(self):\n@@ -190,9 +171,9 @@ def _get_response(self):\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n         elapsed = time.time() - req_start_time\n         if \"error\" in response and response[\"error\"] is None:\n-            log.debug(\"<-%s- [%.6f] %s\"%(response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+            log.debug(\"<-%s- [%.6f] %s\" % (response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n-            log.debug(\"<-- [%.6f] %s\"%(elapsed,responsedata))\n+            log.debug(\"<-- [%.6f] %s\" % (elapsed, responsedata))\n         return response\n \n     def __truediv__(self, relative_uri):"
      },
      {
        "sha": "ad047224882db70b1cfbeef1c4686d8772aea05b",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -10,7 +10,7 @@\n \n logger = logging.getLogger(\"TestFramework.blockstore\")\n \n-class BlockStore(object):\n+class BlockStore():\n     \"\"\"BlockStore helper class.\n \n     BlockStore keeps a map of blocks and implements helper functions for\n@@ -127,7 +127,7 @@ def get_locator(self, current_tip=None):\n         locator.vHave = r\n         return locator\n \n-class TxStore(object):\n+class TxStore():\n     def __init__(self, datadir):\n         self.txDB = dbmd.open(datadir + \"/transactions\", 'c')\n "
      },
      {
        "sha": "b0417e02d815845b8a8afd017a50964513de037f",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -27,7 +27,7 @@\n \n global mininode_lock\n \n-class RejectResult(object):\n+class RejectResult():\n     \"\"\"Outcome that expects rejection of a transaction or block.\"\"\"\n     def __init__(self, code, reason=b''):\n         self.code = code\n@@ -156,13 +156,13 @@ def send_mempool(self):\n #    across all connections.  (If outcome of final tx is specified as true\n #    or false, then only the last tx is tested against outcome.)\n \n-class TestInstance(object):\n+class TestInstance():\n     def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n         self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n \n-class TestManager(object):\n+class TestManager():\n \n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen"
      },
      {
        "sha": "ddc3c515b2c699cfcf304573e1c9cb39a2c2d2ab",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -14,7 +14,7 @@\n REFERENCE_FILENAME = 'rpc_interface.txt'\n \n \n-class AuthServiceProxyWrapper(object):\n+class AuthServiceProxyWrapper():\n     \"\"\"\n     An object that wraps AuthServiceProxy to record specific RPC calls.\n "
      },
      {
        "sha": "aa91fb5b0d83272ab24255f85a73c59bcee1e8c4",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -84,7 +84,7 @@ def _check_result(val, func, args):\n ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n \n-class CECKey(object):\n+class CECKey():\n     \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n \n     POINT_CONVERSION_COMPRESSED = 2"
      },
      {
        "sha": "339efb72c22130b4a3f7712e69c539bbee3b8ed7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -219,7 +219,7 @@ def ToHex(obj):\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n-class CAddress(object):\n+class CAddress():\n     def __init__(self):\n         self.nServices = 1\n         self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n@@ -246,7 +246,7 @@ def __repr__(self):\n \n MSG_WITNESS_FLAG = 1<<30\n \n-class CInv(object):\n+class CInv():\n     typemap = {\n         0: \"Error\",\n         1: \"TX\",\n@@ -275,7 +275,7 @@ def __repr__(self):\n             % (self.typemap[self.type], self.hash)\n \n \n-class CBlockLocator(object):\n+class CBlockLocator():\n     def __init__(self):\n         self.nVersion = MY_VERSION\n         self.vHave = []\n@@ -295,7 +295,7 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vHave))\n \n \n-class COutPoint(object):\n+class COutPoint():\n     def __init__(self, hash=0, n=0):\n         self.hash = hash\n         self.n = n\n@@ -314,7 +314,7 @@ def __repr__(self):\n         return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n \n \n-class CTxIn(object):\n+class CTxIn():\n     def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n         if outpoint is None:\n             self.prevout = COutPoint()\n@@ -342,7 +342,7 @@ def __repr__(self):\n                self.nSequence)\n \n \n-class CTxOut(object):\n+class CTxOut():\n     def __init__(self, nValue=0, scriptPubKey=b\"\"):\n         self.nValue = nValue\n         self.scriptPubKey = scriptPubKey\n@@ -363,7 +363,7 @@ def __repr__(self):\n                bytes_to_hex_str(self.scriptPubKey))\n \n \n-class CScriptWitness(object):\n+class CScriptWitness():\n     def __init__(self):\n         # stack is a vector of strings\n         self.stack = []\n@@ -378,7 +378,7 @@ def is_null(self):\n         return True\n \n \n-class CTxInWitness(object):\n+class CTxInWitness():\n     def __init__(self):\n         self.scriptWitness = CScriptWitness()\n \n@@ -395,7 +395,7 @@ def is_null(self):\n         return self.scriptWitness.is_null()\n \n \n-class CTxWitness(object):\n+class CTxWitness():\n     def __init__(self):\n         self.vtxinwit = []\n \n@@ -423,7 +423,7 @@ def is_null(self):\n         return True\n \n \n-class CTransaction(object):\n+class CTransaction():\n     def __init__(self, tx=None):\n         if tx is None:\n             self.nVersion = 1\n@@ -526,7 +526,7 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n \n \n-class CBlockHeader(object):\n+class CBlockHeader():\n     def __init__(self, header=None):\n         if header is None:\n             self.set_null()\n@@ -666,7 +666,7 @@ def __repr__(self):\n                time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n \n \n-class CUnsignedAlert(object):\n+class CUnsignedAlert():\n     def __init__(self):\n         self.nVersion = 1\n         self.nRelayUntil = 0\n@@ -721,7 +721,7 @@ def __repr__(self):\n                self.strComment, self.strStatusBar, self.strReserved)\n \n \n-class CAlert(object):\n+class CAlert():\n     def __init__(self):\n         self.vchMsg = b\"\"\n         self.vchSig = b\"\"\n@@ -741,7 +741,7 @@ def __repr__(self):\n             % (len(self.vchMsg), len(self.vchSig))\n \n \n-class PrefilledTransaction(object):\n+class PrefilledTransaction():\n     def __init__(self, index=0, tx = None):\n         self.index = index\n         self.tx = tx\n@@ -767,7 +767,7 @@ def __repr__(self):\n         return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n \n # This is what we send on the wire, in a cmpctblock message.\n-class P2PHeaderAndShortIDs(object):\n+class P2PHeaderAndShortIDs():\n     def __init__(self):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -819,7 +819,7 @@ def calculate_shortid(k0, k1, tx_hash):\n \n # This version gets rid of the array lengths, and reinterprets the differential\n # encoding into indices that can be used for lookup.\n-class HeaderAndShortIDs(object):\n+class HeaderAndShortIDs():\n     def __init__(self, p2pheaders_and_shortids = None):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -880,7 +880,7 @@ def __repr__(self):\n         return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n \n \n-class BlockTransactionsRequest(object):\n+class BlockTransactionsRequest():\n \n     def __init__(self, blockhash=0, indexes = None):\n         self.blockhash = blockhash\n@@ -920,7 +920,7 @@ def __repr__(self):\n         return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n \n \n-class BlockTransactions(object):\n+class BlockTransactions():\n \n     def __init__(self, blockhash=0, transactions = None):\n         self.blockhash = blockhash\n@@ -944,7 +944,7 @@ def __repr__(self):\n \n \n # Objects that correspond to messages on the wire\n-class msg_version(object):\n+class msg_version():\n     command = b\"version\"\n \n     def __init__(self):\n@@ -1012,7 +1012,7 @@ def __repr__(self):\n                self.strSubVer, self.nStartingHeight, self.nRelay)\n \n \n-class msg_verack(object):\n+class msg_verack():\n     command = b\"verack\"\n \n     def __init__(self):\n@@ -1028,7 +1028,7 @@ def __repr__(self):\n         return \"msg_verack()\"\n \n \n-class msg_addr(object):\n+class msg_addr():\n     command = b\"addr\"\n \n     def __init__(self):\n@@ -1044,7 +1044,7 @@ def __repr__(self):\n         return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n \n \n-class msg_alert(object):\n+class msg_alert():\n     command = b\"alert\"\n \n     def __init__(self):\n@@ -1063,7 +1063,7 @@ def __repr__(self):\n         return \"msg_alert(alert=%s)\" % (repr(self.alert), )\n \n \n-class msg_inv(object):\n+class msg_inv():\n     command = b\"inv\"\n \n     def __init__(self, inv=None):\n@@ -1082,7 +1082,7 @@ def __repr__(self):\n         return \"msg_inv(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getdata(object):\n+class msg_getdata():\n     command = b\"getdata\"\n \n     def __init__(self, inv=None):\n@@ -1098,7 +1098,7 @@ def __repr__(self):\n         return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getblocks(object):\n+class msg_getblocks():\n     command = b\"getblocks\"\n \n     def __init__(self):\n@@ -1121,7 +1121,7 @@ def __repr__(self):\n             % (repr(self.locator), self.hashstop)\n \n \n-class msg_tx(object):\n+class msg_tx():\n     command = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n@@ -1142,7 +1142,7 @@ def serialize(self):\n         return self.tx.serialize_with_witness()\n \n \n-class msg_block(object):\n+class msg_block():\n     command = b\"block\"\n \n     def __init__(self, block=None):\n@@ -1162,7 +1162,7 @@ def __repr__(self):\n \n # for cases where a user needs tighter control over what is sent over the wire\n # note that the user must supply the name of the command, and the data\n-class msg_generic(object):\n+class msg_generic():\n     def __init__(self, command, data=None):\n         self.command = command\n         self.data = data\n@@ -1179,7 +1179,7 @@ def serialize(self):\n         r = self.block.serialize(with_witness=True)\n         return r\n \n-class msg_getaddr(object):\n+class msg_getaddr():\n     command = b\"getaddr\"\n \n     def __init__(self):\n@@ -1195,7 +1195,7 @@ def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n-class msg_ping_prebip31(object):\n+class msg_ping_prebip31():\n     command = b\"ping\"\n \n     def __init__(self):\n@@ -1211,7 +1211,7 @@ def __repr__(self):\n         return \"msg_ping() (pre-bip31)\"\n \n \n-class msg_ping(object):\n+class msg_ping():\n     command = b\"ping\"\n \n     def __init__(self, nonce=0):\n@@ -1229,7 +1229,7 @@ def __repr__(self):\n         return \"msg_ping(nonce=%08x)\" % self.nonce\n \n \n-class msg_pong(object):\n+class msg_pong():\n     command = b\"pong\"\n \n     def __init__(self, nonce=0):\n@@ -1247,7 +1247,7 @@ def __repr__(self):\n         return \"msg_pong(nonce=%08x)\" % self.nonce\n \n \n-class msg_mempool(object):\n+class msg_mempool():\n     command = b\"mempool\"\n \n     def __init__(self):\n@@ -1262,7 +1262,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n-class msg_sendheaders(object):\n+class msg_sendheaders():\n     command = b\"sendheaders\"\n \n     def __init__(self):\n@@ -1282,7 +1282,7 @@ def __repr__(self):\n # number of entries\n # vector of hashes\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n-class msg_getheaders(object):\n+class msg_getheaders():\n     command = b\"getheaders\"\n \n     def __init__(self):\n@@ -1307,7 +1307,7 @@ def __repr__(self):\n \n # headers message has\n # <count> <vector of block headers>\n-class msg_headers(object):\n+class msg_headers():\n     command = b\"headers\"\n \n     def __init__(self, headers=None):\n@@ -1327,7 +1327,7 @@ def __repr__(self):\n         return \"msg_headers(headers=%s)\" % repr(self.headers)\n \n \n-class msg_reject(object):\n+class msg_reject():\n     command = b\"reject\"\n     REJECT_MALFORMED = 1\n \n@@ -1358,7 +1358,7 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-class msg_feefilter(object):\n+class msg_feefilter():\n     command = b\"feefilter\"\n \n     def __init__(self, feerate=0):\n@@ -1375,7 +1375,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_feefilter(feerate=%08x)\" % self.feerate\n \n-class msg_sendcmpct(object):\n+class msg_sendcmpct():\n     command = b\"sendcmpct\"\n \n     def __init__(self):\n@@ -1395,7 +1395,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n \n-class msg_cmpctblock(object):\n+class msg_cmpctblock():\n     command = b\"cmpctblock\"\n \n     def __init__(self, header_and_shortids = None):\n@@ -1413,7 +1413,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n \n-class msg_getblocktxn(object):\n+class msg_getblocktxn():\n     command = b\"getblocktxn\"\n \n     def __init__(self):\n@@ -1431,7 +1431,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n \n-class msg_blocktxn(object):\n+class msg_blocktxn():\n     command = b\"blocktxn\"\n \n     def __init__(self):\n@@ -1454,7 +1454,7 @@ def serialize(self):\n         r += self.block_transactions.serialize(with_witness=True)\n         return r\n \n-class NodeConnCB(object):\n+class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n \n     Individual testcases should subclass this and override the on_* methods"
      },
      {
        "sha": "a4c046bd3d925994b631cd662d200342c6bed12c",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -370,7 +370,7 @@ def __init__(self, msg, data):\n         super(CScriptTruncatedPushDataError, self).__init__(msg)\n \n # This is used, eg, for blockchain heights in coinbase scripts (bip34)\n-class CScriptNum(object):\n+class CScriptNum():\n     def __init__(self, d=0):\n         self.value = d\n "
      },
      {
        "sha": "7b40c47fbf401f8a9af93a1ddcbc36c32506ef75",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -31,15 +31,15 @@ def recvall(s, n):\n     return rv\n \n ### Implementation classes\n-class Socks5Configuration(object):\n+class Socks5Configuration():\n     \"\"\"Proxy configuration.\"\"\"\n     def __init__(self):\n         self.addr = None # Bind address (must be set)\n         self.af = socket.AF_INET # Bind address family\n         self.unauth = False  # Support unauthenticated\n         self.auth = False  # Support authentication\n \n-class Socks5Command(object):\n+class Socks5Command():\n     \"\"\"Information about an incoming socks5 command.\"\"\"\n     def __init__(self, cmd, atyp, addr, port, username, password):\n         self.cmd = cmd # Command (one of Command.*)\n@@ -51,7 +51,7 @@ def __init__(self, cmd, atyp, addr, port, username, password):\n     def __repr__(self):\n         return 'Socks5Command(%s,%s,%s,%s,%s,%s)' % (self.cmd, self.atyp, self.addr, self.port, self.username, self.password)\n \n-class Socks5Connection(object):\n+class Socks5Connection():\n     def __init__(self, serv, conn, peer):\n         self.serv = serv\n         self.conn = conn\n@@ -122,7 +122,7 @@ def handle(self):\n         finally:\n             self.conn.close()\n \n-class Socks5Server(object):\n+class Socks5Server():\n     def __init__(self, conf):\n         self.conf = conf\n         self.s = socket.socket(conf.af)"
      },
      {
        "sha": "d31e9a28538136be597bc742b816af461bd70156",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -43,7 +43,7 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-class BitcoinTestFramework(object):\n+class BitcoinTestFramework():\n     \"\"\"Base class for a bitcoin test script.\n \n     Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods."
      },
      {
        "sha": "5411dab3faaedb416ecbeb78181c424e48d6667b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b860bf64020451ced823b859da8cb912278ab9/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=14b860bf64020451ced823b859da8cb912278ab9",
        "patch": "@@ -459,7 +459,7 @@ def check_script_list(src_dir):\n             # On travis this warning is an error to prevent merging incomplete commits into master\n             sys.exit(1)\n \n-class RPCCoverage(object):\n+class RPCCoverage():\n     \"\"\"\n     Coverage reporting utilities for test_runner.\n "
      }
    ]
  },
  {
    "sha": "808c84f89d0edcef9ddaab0b849a382719f6ec9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDhjODRmODlkMGVkY2VmOWRkYWFiMGI4NDlhMzgyNzE5ZjZlYzll",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-17T19:40:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-17T19:40:54Z"
      },
      "message": "Merge #11483: Fix importmulti bug when importing an already imported key\n\na44a21517 Fix importmulti bug when importing an already imported key (Pedro Branco)\n\nPull request description:\n\n  This PR fixes a bug in `importmulti` RPC call where it returns an invalid response when importing an already imported key.\n\n  Before:\n  ```sh\n  \u276f bitcoin-cli -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655239 }]'\n  [{ \"success\": true }]\n\n  \u276f bitcoin-cli -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655239 }]' '{ \"rescan\": false }'\n  [ false ]\n\n  \u276f bitcoin-cli -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655239 }]' '{ \"rescan\": true }'\n  error code: -1\n  error message:\n  JSON value is not a boolean as expected\n  ```\n\n  After this fix:\n  ```sh\n  \u276f bitcoin-cli -rpcuser=u -rpcpassword=p -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655139 }]'\n  [{ \"success\": true }]\n\n  \u276f bitcoin-cli -rpcuser=u -rpcpassword=p -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655139 }]'\n  [{ \"success\": false, \"error\": { \"code\": -4, \"message\": \"The wallet already contains the private key for this address or script\" } }]\n  ```\n\nTree-SHA512: 4acebdfb7d0ebd7cd48e943b93ed1cec072db1ace5c42b3f5cc225603764b6e804e4b823b0710965826aafc2f0c615c53d5aefcfdb9bc9c379f5221b798a318c",
      "tree": {
        "sha": "13633793555041b63b5e133182177367068f79a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13633793555041b63b5e133182177367068f79a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/808c84f89d0edcef9ddaab0b849a382719f6ec9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ5lzGAAoJENLqSFDnUosltj4QAJO20VZeaCEKCpjssww8dj1j\nfCDWO1D1ShOU7WVcv2pJWQg9yhDH6D4FIEJt5B6n2yBHG3qBVJYqp6viFeP/T+I5\n2VtPOksqL8WlnX2fjWqObNjzIMoRP+NDyH6ZPOXARPcSrurHRnDpemNslPdakybr\nRzii/OzKorAOhwrdbBBNQnvd6hIeyD6hKcU/GoRDSlQfujG7UFdQMgwUfLpfusWj\nrsWxsqxsuzA0FieMMQb+zHGuE3WGQV+mjxnBQi9yWm+iJ1DY/83kiFthrAZX0a2K\ngUUUf+McooMoYtHbnBIHcg2+E41iV2mUurUCiwvxxaOKSJWmGMl3H0z/pFbjAmF8\n+4ASeBCiMCR65Y2ORSjaEfHrdxCizwHD7fADMlG/2WXwH0iv8mWLRShROmUMYW5j\ngqrFScLLgiGkcJurtkPfHrwTBaVJsYNpsmq5NGoMUQc4kkijVrxxbRrW6NI8NKc2\npImg6wgqhHjC3tMwfyoEuSbitsO8iFg3HKq4+yZA8B61LX+bM/FUsnVzMcCZG681\n1ZfKDSy2ZfMdgVqPk4bE5w5blVeLRpOyC280wA9Um/saP3xHgeJe2AZxXiXR5Cj0\nUh0UOQ499YxLz8myMEK/XiOfkGM3QYeyus9MXoKmKxs9T0dao95vULeu5EVLWK9r\n/SzdNS35KhA26JjD1w3+\n=rXPl\n-----END PGP SIGNATURE-----",
        "payload": "tree 13633793555041b63b5e133182177367068f79a7\nparent 14b860bf64020451ced823b859da8cb912278ab9\nparent a44a215177ab55b4a3b36a7980c313e908e2dd18\nauthor MarcoFalke <falke.marco@gmail.com> 1508269248 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1508269254 +0200\n\nMerge #11483: Fix importmulti bug when importing an already imported key\n\na44a21517 Fix importmulti bug when importing an already imported key (Pedro Branco)\n\nPull request description:\n\n  This PR fixes a bug in `importmulti` RPC call where it returns an invalid response when importing an already imported key.\n\n  Before:\n  ```sh\n  \u276f bitcoin-cli -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655239 }]'\n  [{ \"success\": true }]\n\n  \u276f bitcoin-cli -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655239 }]' '{ \"rescan\": false }'\n  [ false ]\n\n  \u276f bitcoin-cli -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655239 }]' '{ \"rescan\": true }'\n  error code: -1\n  error message:\n  JSON value is not a boolean as expected\n  ```\n\n  After this fix:\n  ```sh\n  \u276f bitcoin-cli -rpcuser=u -rpcpassword=p -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655139 }]'\n  [{ \"success\": true }]\n\n  \u276f bitcoin-cli -rpcuser=u -rpcpassword=p -regtest importmulti '[{ \"keys\": [\"cNcMUunXhVK1dXJ5riixtpYSxPXZnUAMGS4vpzwChdKmYY3Rz99v\"], \"scriptPubKey\": { \"address\": \"n4YZAf4WE2XF3t4BfeYS2nHAhb8CVx91BR\" }, \"timestamp\": 1507655139 }]'\n  [{ \"success\": false, \"error\": { \"code\": -4, \"message\": \"The wallet already contains the private key for this address or script\" } }]\n  ```\n\nTree-SHA512: 4acebdfb7d0ebd7cd48e943b93ed1cec072db1ace5c42b3f5cc225603764b6e804e4b823b0710965826aafc2f0c615c53d5aefcfdb9bc9c379f5221b798a318c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/808c84f89d0edcef9ddaab0b849a382719f6ec9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/808c84f89d0edcef9ddaab0b849a382719f6ec9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/808c84f89d0edcef9ddaab0b849a382719f6ec9e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14b860bf64020451ced823b859da8cb912278ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14b860bf64020451ced823b859da8cb912278ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14b860bf64020451ced823b859da8cb912278ab9"
      },
      {
        "sha": "a44a215177ab55b4a3b36a7980c313e908e2dd18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a44a215177ab55b4a3b36a7980c313e908e2dd18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a44a215177ab55b4a3b36a7980c313e908e2dd18"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3ec4a5efb479c41902367afcd887a107051851ea",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/808c84f89d0edcef9ddaab0b849a382719f6ec9e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/808c84f89d0edcef9ddaab0b849a382719f6ec9e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=808c84f89d0edcef9ddaab0b849a382719f6ec9e",
        "patch": "@@ -961,7 +961,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 pwallet->SetAddressBook(vchAddress, label, \"receive\");\n \n                 if (pwallet->HaveKey(vchAddress)) {\n-                    return false;\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n                 pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;"
      },
      {
        "sha": "a691595f15116f94c635dbc1b519b7f60a4b9433",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/808c84f89d0edcef9ddaab0b849a382719f6ec9e/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/808c84f89d0edcef9ddaab0b849a382719f6ec9e/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=808c84f89d0edcef9ddaab0b849a382719f6ec9e",
        "patch": "@@ -160,6 +160,18 @@ def run_test (self):\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n+        self.log.info(\"Should not import an address with private key if is already imported\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'The wallet already contains the private key for this address or script')\n+\n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())"
      }
    ]
  },
  {
    "sha": "26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmZlZTRmNmJkOWFlYzYyYzZjYWE2MDY4M2FkNjY1NzRjZjE2YWE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-18T09:32:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-18T09:37:46Z"
      },
      "message": "Merge #11062: [mempool] Mark mempool import fails that were found in mempool as 'already there'\n\n258d33b41 [mempool] Mark unaccepted txs present in mempool as 'already there'. (Karl-Johan Alm)\n\nPull request description:\n\n  I was investigating the reasons for failed imports in mempool and noticed that `LoadMempool()` and `pwallet->postInitProcess()` (for all wallets) are executed concurrently. The wallet will end up importing transactions that `LoadMempool()` later tries to import; the latter will fail due to the tx already being in the mempool.\n\n  This PR changes the log message, adding an additional \"already there\" entry. For transactions not accepted into mempool, a check if they are in the mempool is done first, and if found, they are counted as 'already there', otherwise counted as 'failed'.\n\n  Also slight rewording for consistency (successes, failed, expired, ... -> succeeded, failed, expired).\n\nTree-SHA512: 1a6134a25260917f2768365e0dfd8b278fe3f8287cab38bb028b7de3d517718a2d37696186dc7a23ceab338cc755fbbe7d45358ee94e573610fddd2a0620d6e5",
      "tree": {
        "sha": "563ff2a3e4ffdd18d0b953c6ffdc8e4042e54102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/563ff2a3e4ffdd18d0b953c6ffdc8e4042e54102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ5yDrAAoJEKY26XYx92fgsuUQAKlN5UNmEbCz9pRqsbjFZ/Xr\nCp9T/KrisajjfyBAZZJGmPRNByiBB5fKByUFOhjiT1VFP0vMuyp0ubicK8p/rJth\nP6XaCv5LjH42Ei7ePlkvnUX0eMjtasnnRdZMvkcg2LvtJMy26MP77WJJ00MVPbNF\nFvnn5Ux+oL5QZf2cWrysZXHGISAuJgrD847YM/DPYvL3HTA8EZq2/AzdNlxg+xLG\n69uwE6qk+kWD4L4Oue2OCObA75x/rQLNz+eETPyGl5FWMXykhE7PYlE0s2zL9yza\nZCphWhhFtnc4TRpBaY9CUQipEh39xvZogx1ymEBUJoSpxjwmsGAHdyTTAm8MjuXz\nCTg3pUfEdzHBPz0wrty5vh5fRvZaWTPfclROE9cutvs1K3zbj63r9QBy4jfWIK8K\nIQckzFc8N79MRnrbJOZMvJvByZYWZ8TQy5IXBNYQX2nlRX+S9KKL1jOylz5sX13Z\nx6DOR6vtkFRd2teK3D0OI7NHAyhdvjFWVnlTr0OQB0zm1IPAcXVscavc1Vyoebs6\neNm5FmLOHssyOhU4u6hdLPa0xHRblZvmTGb2BGMBO+ITRUtvSGEtqU67LY1PGSYq\nCjzDeqlh+10JNjIVaRrIrB8btuCla+RxlzqbfA/Ac+o23O/i8yA6PIeHkOeZVdjC\nYrC/OmmxKnBoVCOzrpKl\n=+yFQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 563ff2a3e4ffdd18d0b953c6ffdc8e4042e54102\nparent 808c84f89d0edcef9ddaab0b849a382719f6ec9e\nparent 258d33b41a27917f59e3aee856d032a23cbb5b05\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1508319136 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1508319466 -0700\n\nMerge #11062: [mempool] Mark mempool import fails that were found in mempool as 'already there'\n\n258d33b41 [mempool] Mark unaccepted txs present in mempool as 'already there'. (Karl-Johan Alm)\n\nPull request description:\n\n  I was investigating the reasons for failed imports in mempool and noticed that `LoadMempool()` and `pwallet->postInitProcess()` (for all wallets) are executed concurrently. The wallet will end up importing transactions that `LoadMempool()` later tries to import; the latter will fail due to the tx already being in the mempool.\n\n  This PR changes the log message, adding an additional \"already there\" entry. For transactions not accepted into mempool, a check if they are in the mempool is done first, and if found, they are counted as 'already there', otherwise counted as 'failed'.\n\n  Also slight rewording for consistency (successes, failed, expired, ... -> succeeded, failed, expired).\n\nTree-SHA512: 1a6134a25260917f2768365e0dfd8b278fe3f8287cab38bb028b7de3d517718a2d37696186dc7a23ceab338cc755fbbe7d45358ee94e573610fddd2a0620d6e5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fee4f6bd9aec62c6caa60683ad66574cf16aa6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "808c84f89d0edcef9ddaab0b849a382719f6ec9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/808c84f89d0edcef9ddaab0b849a382719f6ec9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/808c84f89d0edcef9ddaab0b849a382719f6ec9e"
      },
      {
        "sha": "258d33b41a27917f59e3aee856d032a23cbb5b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258d33b41a27917f59e3aee856d032a23cbb5b05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/258d33b41a27917f59e3aee856d032a23cbb5b05"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1a1c1941ef8c47b10537cd5e0912a89e7f50728d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26fee4f6bd9aec62c6caa60683ad66574cf16aa6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26fee4f6bd9aec62c6caa60683ad66574cf16aa6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
        "patch": "@@ -4287,8 +4287,9 @@ bool LoadMempool(void)\n     }\n \n     int64_t count = 0;\n-    int64_t skipped = 0;\n+    int64_t expired = 0;\n     int64_t failed = 0;\n+    int64_t already_there = 0;\n     int64_t nNow = GetTime();\n \n     try {\n@@ -4319,10 +4320,18 @@ bool LoadMempool(void)\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {\n-                    ++failed;\n+                    // mempool may contain the transaction already, e.g. from\n+                    // wallet(s) having loaded it while we were processing\n+                    // mempool transactions; consider these as valid, instead of\n+                    // failed, but mark them as 'already there'\n+                    if (mempool.exists(tx->GetHash())) {\n+                        ++already_there;\n+                    } else {\n+                        ++failed;\n+                    }\n                 }\n             } else {\n-                ++skipped;\n+                ++expired;\n             }\n             if (ShutdownRequested())\n                 return false;\n@@ -4338,7 +4347,7 @@ bool LoadMempool(void)\n         return false;\n     }\n \n-    LogPrintf(\"Imported mempool transactions from disk: %i successes, %i failed, %i expired\\n\", count, failed, skipped);\n+    LogPrintf(\"Imported mempool transactions from disk: %i succeeded, %i failed, %i expired, %i already there\\n\", count, failed, expired, already_there);\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "ffa5159cefb8a03ca75d3637adefecf12162dfd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmE1MTU5Y2VmYjhhMDNjYTc1ZDM2MzdhZGVmZWNmMTIxNjJkZmQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T13:22:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T13:22:54Z"
      },
      "message": "Merge #11508: Fix crash via division by zero assertion\n\n207408b Fix crash via division by zero assertion (Jonas Schnelli)\n\nPull request description:\n\n  Replaces the newly added `assert` for a devision by zero protection by a control structure. Floating point division by zero is defined by the floating point standard and results in +inf or -inf.\n\n  Introduced in #11133\n  Reported by @mzhou, fixes #11501\n\nTree-SHA512: ac9b4efa3ba52a2aa246fb11170128c4aaf829fd491b649524c85069c6ed33ae612e761809aea9d9a44bdea29a417b3f3a558226495094b5070a42a56b2ac77e",
      "tree": {
        "sha": "e164ccffb7facfff51fcc47dbd233e667234daec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e164ccffb7facfff51fcc47dbd233e667234daec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffa5159cefb8a03ca75d3637adefecf12162dfd8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ51WuAAoJEB5K7WKYbNJdx+8H/R1nMCQCcl8S20RzlBP6+9Mj\nvv7Hq6F7sMBvOYpV++h6Esx5nbZP90hrBNF2u3zfxRJWJIbv7VifthBd62EisQ0T\nmXw1vBAihrfeYPiy3uv1Y70ji/0wtq2cPKX07dtXMtTRlnchT6f+huMaOcZR1RkP\n8ZbDDpGhyeAPY7kQ3RA5UGTJOdLWJL/OGYzJVBZeJ/nfj/zLDR9WsFjtmwOReqil\nsRlUwZSyNlSLCdwJ99qYJI3srWDOeGnWdL4XWy08Wx/8ru0Qa9Uwb+tQmKe5uY4Z\n3CCv03bei9RPvTS4Ys0MYhLdvOw/VNuAwtOdKtCQIPwqJtwUM2VMSsr8zIlRhyM=\n=AoDe\n-----END PGP SIGNATURE-----",
        "payload": "tree e164ccffb7facfff51fcc47dbd233e667234daec\nparent 26fee4f6bd9aec62c6caa60683ad66574cf16aa6\nparent 207408b0889caf3f5986bde4b122dbece1ed0dac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508332950 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508332974 +0200\n\nMerge #11508: Fix crash via division by zero assertion\n\n207408b Fix crash via division by zero assertion (Jonas Schnelli)\n\nPull request description:\n\n  Replaces the newly added `assert` for a devision by zero protection by a control structure. Floating point division by zero is defined by the floating point standard and results in +inf or -inf.\n\n  Introduced in #11133\n  Reported by @mzhou, fixes #11501\n\nTree-SHA512: ac9b4efa3ba52a2aa246fb11170128c4aaf829fd491b649524c85069c6ed33ae612e761809aea9d9a44bdea29a417b3f3a558226495094b5070a42a56b2ac77e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffa5159cefb8a03ca75d3637adefecf12162dfd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffa5159cefb8a03ca75d3637adefecf12162dfd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffa5159cefb8a03ca75d3637adefecf12162dfd8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fee4f6bd9aec62c6caa60683ad66574cf16aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26fee4f6bd9aec62c6caa60683ad66574cf16aa6"
      },
      {
        "sha": "207408b0889caf3f5986bde4b122dbece1ed0dac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/207408b0889caf3f5986bde4b122dbece1ed0dac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/207408b0889caf3f5986bde4b122dbece1ed0dac"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "207e441b6b071bd0cd6051dfe98b0efcdfd9875c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffa5159cefb8a03ca75d3637adefecf12162dfd8/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffa5159cefb8a03ca75d3637adefecf12162dfd8/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ffa5159cefb8a03ca75d3637adefecf12162dfd8",
        "patch": "@@ -582,8 +582,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     QString toolTipDust = tr(\"This label turns red if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n-    assert(nBytes != 0);\n-    double dFeeVary = (double)nPayFee / nBytes;\n+    double dFeeVary = (nBytes != 0) ? (double)nPayFee / nBytes : 0;\n \n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      }
    ]
  },
  {
    "sha": "b645f368f299d2542a8eacda8fbd308e08139175",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ1ZjM2OGYyOTlkMjU0MmE4ZWFjZGE4ZmJkMzA4ZTA4MTM5MTc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T13:38:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T13:39:43Z"
      },
      "message": "Merge #11492: [wallet] Fix leak in CDB constructor\n\n7104de8 [wallet] Fix leak in CDB constructor (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  First commit fixes a minor leak.\n  Second commit improves the constructor in the failure cases.\n\nTree-SHA512: 5165413d60ed9fc28203c9fe128adbba03a9ea9e9aa3734d9ea2522dafd815ba0fb8b90fd0809dbc06eb3ad360e7764de01dadf653ade3350fe86f6b8f04bc90",
      "tree": {
        "sha": "51711195f1229d1815b82974de375653f439e878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51711195f1229d1815b82974de375653f439e878"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b645f368f299d2542a8eacda8fbd308e08139175",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ51mfAAoJEB5K7WKYbNJdZeoH/A5SvQKz3lS9WgOwkEQFtATW\nX3w3cCDHm1hPaweE5bJxy5Q0GgFUiyE0p+6nCDR9of0qx0Ibk3hf4V4TB5cFOIpf\nOD8CqTxnlgDVilkyEGHBTRH9r2DlN7ba08Cg9tg2ZtLgTyN1Kz5XbASri36eVw75\n9ok5VjFNsgTjnUG7o2I8Xq4CNZjaQCpYW9KSu0wLF7SJnLuTYy25Br4Ja6LJHYmh\nT3dwQfeKjrUXnGQ9BZfuLOwR95Jf1CQZgvsjuw98frWWt7IpBprd9Mw1Su+QLCNJ\nU+WATLoThRFpK0ppXx5MdRhbb9jtCtXlhEpz1PcxzZ292n1dKigIxBgsPcDmt0w=\n=TOD5\n-----END PGP SIGNATURE-----",
        "payload": "tree 51711195f1229d1815b82974de375653f439e878\nparent ffa5159cefb8a03ca75d3637adefecf12162dfd8\nparent 7104de8b1f3a31d3a60009b5dc376adbedac6a9c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508333887 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508333983 +0200\n\nMerge #11492: [wallet] Fix leak in CDB constructor\n\n7104de8 [wallet] Fix leak in CDB constructor (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  First commit fixes a minor leak.\n  Second commit improves the constructor in the failure cases.\n\nTree-SHA512: 5165413d60ed9fc28203c9fe128adbba03a9ea9e9aa3734d9ea2522dafd815ba0fb8b90fd0809dbc06eb3ad360e7764de01dadf653ade3350fe86f6b8f04bc90\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b645f368f299d2542a8eacda8fbd308e08139175",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b645f368f299d2542a8eacda8fbd308e08139175",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b645f368f299d2542a8eacda8fbd308e08139175/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffa5159cefb8a03ca75d3637adefecf12162dfd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffa5159cefb8a03ca75d3637adefecf12162dfd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffa5159cefb8a03ca75d3637adefecf12162dfd8"
      },
      {
        "sha": "7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7104de8b1f3a31d3a60009b5dc376adbedac6a9c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5e881d9acc08cfced2ef00c666d4e9b22d95c371",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645f368f299d2542a8eacda8fbd308e08139175/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645f368f299d2542a8eacda8fbd308e08139175/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b645f368f299d2542a8eacda8fbd308e08139175",
        "patch": "@@ -379,45 +379,43 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         if (!env->Open(GetDataDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n-        strFile = strFilename;\n-        ++env->mapFileUseCount[strFile];\n-        pdb = env->mapDb[strFile];\n+        pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            pdb = new Db(env->dbenv, 0);\n+            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n-                DbMpoolFile* mpf = pdb->get_mpf();\n+                DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n-                if (ret != 0)\n-                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n+                if (ret != 0) {\n+                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFilename));\n+                }\n             }\n \n-            ret = pdb->open(nullptr,                               // Txn pointer\n-                            fMockDb ? nullptr : strFile.c_str(),   // Filename\n-                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE,                           // Database type\n-                            nFlags,                             // Flags\n+            ret = pdb_temp->open(nullptr,                             // Txn pointer\n+                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n+                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            DB_BTREE,                                 // Database type\n+                            nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                delete pdb;\n-                pdb = nullptr;\n-                --env->mapFileUseCount[strFile];\n-                strFile = \"\";\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n \n+            pdb = pdb_temp.release();\n+            env->mapDb[strFilename] = pdb;\n+\n             if (fCreate && !Exists(std::string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n                 fReadOnly = fTmp;\n             }\n-\n-            env->mapDb[strFile] = pdb;\n         }\n+        ++env->mapFileUseCount[strFilename];\n+        strFile = strFilename;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "2ca518deff25b2e2438c40a92e0ea3494054c6bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2E1MThkZWZmMjViMmUyNDM4YzQwYTkyZTBlYTM0OTQwNTRjNmJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T13:48:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T13:49:37Z"
      },
      "message": "Merge #11486: [tests] Add uacomment tests\n\nc5dfa90 [tests] Add uacomment tests (Cristian Mircea Messel)\n\nPull request description:\n\n  Checks for setting the value, max length and reserved characters\n\nTree-SHA512: a62e2cf8e455a3cd3987c0855f7bfc49de47504c01263e3573366e3cbff400c5678224773d4f1e4ac684fff34d987994e490a0978c4da05ff2a4bfa972c84723",
      "tree": {
        "sha": "95d874671866c03b7ef8e6133a83d4189198539a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95d874671866c03b7ef8e6133a83d4189198539a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ca518deff25b2e2438c40a92e0ea3494054c6bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ51vxAAoJEB5K7WKYbNJdMPoIAMkYM8EVvyNHu9spur92TgO9\n+NOZqwWaI8O9SiyqUBgqOVnt+vgc6EXTESxsMzjC38RHMUSWApJn7zj1w/7Qkanw\nn9p2tCJN19v76OtfV47agzAYWwzGBTBIXRObCKWMW1+Z0Av1gqdyGEWSoMkplXAS\nkV7XE5MWgslfC7L9MTBmzMWyrzi6xPTVCnsbeq6UC/s28DXUQfvaiKAXuAKBk9ON\nbUnBiNU9ZsS4+ayU0T9HLrJ4rCqWXTaktKXgqnRFRcEUVkANh3HxRfD6nlXaRQnx\n/yo0LESZBtruW/Xkg3FFDtGd9ld0Aju23nlzeGFZcAxcwKh/R3vafxSyiTOzMYM=\n=pn9W\n-----END PGP SIGNATURE-----",
        "payload": "tree 95d874671866c03b7ef8e6133a83d4189198539a\nparent b645f368f299d2542a8eacda8fbd308e08139175\nparent c5dfa90aab53832c9ad339360d11d6635a26ba6b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508334507 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508334577 +0200\n\nMerge #11486: [tests] Add uacomment tests\n\nc5dfa90 [tests] Add uacomment tests (Cristian Mircea Messel)\n\nPull request description:\n\n  Checks for setting the value, max length and reserved characters\n\nTree-SHA512: a62e2cf8e455a3cd3987c0855f7bfc49de47504c01263e3573366e3cbff400c5678224773d4f1e4ac684fff34d987994e490a0978c4da05ff2a4bfa972c84723\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca518deff25b2e2438c40a92e0ea3494054c6bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca518deff25b2e2438c40a92e0ea3494054c6bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca518deff25b2e2438c40a92e0ea3494054c6bf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b645f368f299d2542a8eacda8fbd308e08139175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b645f368f299d2542a8eacda8fbd308e08139175",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b645f368f299d2542a8eacda8fbd308e08139175"
      },
      {
        "sha": "c5dfa90aab53832c9ad339360d11d6635a26ba6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5dfa90aab53832c9ad339360d11d6635a26ba6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5dfa90aab53832c9ad339360d11d6635a26ba6b"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "80a5ffefb4f31e37d1759e2dc7d4d5bfe9a729f5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca518deff25b2e2438c40a92e0ea3494054c6bf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca518deff25b2e2438c40a92e0ea3494054c6bf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2ca518deff25b2e2438c40a92e0ea3494054c6bf",
        "patch": "@@ -124,6 +124,7 @@\n     'resendwallettransactions.py',\n     'minchainwork.py',\n     'p2p-fingerprint.py',\n+    'uacomment.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      },
      {
        "sha": "0b2c64ab697de9f644656b76fb5154e6e525b094",
        "filename": "test/functional/uacomment.py",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca518deff25b2e2438c40a92e0ea3494054c6bf/test/functional/uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca518deff25b2e2438c40a92e0ea3494054c6bf/test/functional/uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uacomment.py?ref=2ca518deff25b2e2438c40a92e0ea3494054c6bf",
        "patch": "@@ -0,0 +1,35 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -uacomment option.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class UacommentTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"test multiple -uacomment\")\n+        test_uacomment = self.nodes[0].getnetworkinfo()[\"subversion\"][-12:-1]\n+        assert_equal(test_uacomment, \"(testnode0)\")\n+\n+        self.restart_node(0, [\"-uacomment=foo\"])\n+        foo_uacomment = self.nodes[0].getnetworkinfo()[\"subversion\"][-17:-1]\n+        assert_equal(foo_uacomment, \"(testnode0; foo)\")\n+\n+        self.log.info(\"test -uacomment max length\")\n+        self.stop_node(0)\n+        expected = \"Total length of network version string (286) exceeds maximum length (256). Reduce the number or size of uacomments.\"\n+        self.assert_start_raises_init_error(0, [\"-uacomment=\" + 'a' * 256], expected)\n+\n+        self.log.info(\"test -uacomment unsafe characters\")\n+        for unsafe_char in ['/', ':', '(', ')']:\n+            expected = \"User Agent comment (\" + unsafe_char + \") contains unsafe characters\"\n+            self.assert_start_raises_init_error(0, [\"-uacomment=\" + unsafe_char], expected)\n+\n+if __name__ == '__main__':\n+    UacommentTest().main()"
      }
    ]
  },
  {
    "sha": "a1d78b59fc03aa4376519b6f2d886c5c729b5618",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQ3OGI1OWZjMDNhYTQzNzY1MTliNmYyZDg4NmM1YzcyOWI1NjE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T14:06:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T14:06:27Z"
      },
      "message": "Merge #11006: Improve shutdown process\n\n793667a Improve shutdown process (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Improve the shutdown time by not having to wait up to 2 seconds.\n\n  Here is a comparison running `wallet.py` function tests before this PR:\n  ```\n  2017-08-08 03:25:20.881000 TestFramework (INFO): Initializing test directory /var/folders/1v/8_69hby54nj2k3n6fywt44x80000gn/T/testq_ramjjr\n  2017-08-08 03:25:23.853000 TestFramework (INFO): Mining blocks...\n  2017-08-08 03:25:24.132000 TestFramework (INFO): test getmemoryinfo\n  2017-08-08 03:25:24.559000 TestFramework (INFO): test gettxout\n  2017-08-08 03:25:59.858000 TestFramework (INFO): check -rescan\n  2017-08-08 03:26:07.735000 TestFramework (INFO): check -reindex\n  2017-08-08 03:26:15.751000 TestFramework (INFO): check -zapwallettxes=1\n  2017-08-08 03:26:24.105000 TestFramework (INFO): check -zapwallettxes=2\n  2017-08-08 03:26:36.694000 TestFramework (INFO): Stopping nodes\n  2017-08-08 03:26:43.599000 TestFramework (INFO): Cleaning up\n  2017-08-08 03:26:43.612000 TestFramework (INFO): Tests successful\n  ```\n  After:\n  ```\n  2017-08-08 03:24:04.319000 TestFramework (INFO): Initializing test directory /var/folders/1v/8_69hby54nj2k3n6fywt44x80000gn/T/testoqeyi50_\n  2017-08-08 03:24:07.035000 TestFramework (INFO): Mining blocks...\n  2017-08-08 03:24:07.317000 TestFramework (INFO): test getmemoryinfo\n  2017-08-08 03:24:07.763000 TestFramework (INFO): test gettxout\n  2017-08-08 03:24:25.715000 TestFramework (INFO): check -rescan\n  2017-08-08 03:24:27.792000 TestFramework (INFO): check -reindex\n  2017-08-08 03:24:29.797000 TestFramework (INFO): check -zapwallettxes=1\n  2017-08-08 03:24:32.207000 TestFramework (INFO): check -zapwallettxes=2\n  2017-08-08 03:24:36.812000 TestFramework (INFO): Stopping nodes\n  2017-08-08 03:24:37.915000 TestFramework (INFO): Cleaning up\n  2017-08-08 03:24:37.927000 TestFramework (INFO): Tests successful\n  ```\n  This largely improves the time spent in Travis (under evaluation).\n\nTree-SHA512: 023012fb3f8a380addf5995a4bf865862fed712cdd1a648d82a710e6566bc3bd34b6c49f9f06d6cc6bd81ca859da50d30d7f786c816e702549ab642e3476426f",
      "tree": {
        "sha": "951461547b020914929be8b9ffbb4e8a507cc3ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/951461547b020914929be8b9ffbb4e8a507cc3ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d78b59fc03aa4376519b6f2d886c5c729b5618",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ51/jAAoJEB5K7WKYbNJdSZoIAIuFJrkuwAmQtm9cs3Ki+vgZ\ncRtcP6LmOmhmYSVt3k1IZUmCkTtTCkqx9dSl+tdNpQw+XWxprc83r18uoZcmWtpZ\nXsNVwvi8e512gvBdL9EmmYwdbZpwbtSccrRLQf6myjj+XvGBl6bOoUmM5cBuXIFU\nfF4j/BCf0xB+9ZzGsDDwfbq7snaodFy+Fp/em4t2b2fvW60MmmErumkrxHqYqF9Z\n8b4dN6GP/j2mPRcKKvOrAGPAvKW3y5trvvCniZCdAGubg5WVU1WSSXH7Nk/7i4ss\nVNn9F404r18KvbT8PtGnaQ9ftD3JTO0VL4AgcIn28i640uZ7xg6TVbbvQE62668=\n=Enfj\n-----END PGP SIGNATURE-----",
        "payload": "tree 951461547b020914929be8b9ffbb4e8a507cc3ab\nparent 2ca518deff25b2e2438c40a92e0ea3494054c6bf\nparent 793667af1c31835e0eefcdd283930bb89cfeda8f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508335567 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508335587 +0200\n\nMerge #11006: Improve shutdown process\n\n793667a Improve shutdown process (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Improve the shutdown time by not having to wait up to 2 seconds.\n\n  Here is a comparison running `wallet.py` function tests before this PR:\n  ```\n  2017-08-08 03:25:20.881000 TestFramework (INFO): Initializing test directory /var/folders/1v/8_69hby54nj2k3n6fywt44x80000gn/T/testq_ramjjr\n  2017-08-08 03:25:23.853000 TestFramework (INFO): Mining blocks...\n  2017-08-08 03:25:24.132000 TestFramework (INFO): test getmemoryinfo\n  2017-08-08 03:25:24.559000 TestFramework (INFO): test gettxout\n  2017-08-08 03:25:59.858000 TestFramework (INFO): check -rescan\n  2017-08-08 03:26:07.735000 TestFramework (INFO): check -reindex\n  2017-08-08 03:26:15.751000 TestFramework (INFO): check -zapwallettxes=1\n  2017-08-08 03:26:24.105000 TestFramework (INFO): check -zapwallettxes=2\n  2017-08-08 03:26:36.694000 TestFramework (INFO): Stopping nodes\n  2017-08-08 03:26:43.599000 TestFramework (INFO): Cleaning up\n  2017-08-08 03:26:43.612000 TestFramework (INFO): Tests successful\n  ```\n  After:\n  ```\n  2017-08-08 03:24:04.319000 TestFramework (INFO): Initializing test directory /var/folders/1v/8_69hby54nj2k3n6fywt44x80000gn/T/testoqeyi50_\n  2017-08-08 03:24:07.035000 TestFramework (INFO): Mining blocks...\n  2017-08-08 03:24:07.317000 TestFramework (INFO): test getmemoryinfo\n  2017-08-08 03:24:07.763000 TestFramework (INFO): test gettxout\n  2017-08-08 03:24:25.715000 TestFramework (INFO): check -rescan\n  2017-08-08 03:24:27.792000 TestFramework (INFO): check -reindex\n  2017-08-08 03:24:29.797000 TestFramework (INFO): check -zapwallettxes=1\n  2017-08-08 03:24:32.207000 TestFramework (INFO): check -zapwallettxes=2\n  2017-08-08 03:24:36.812000 TestFramework (INFO): Stopping nodes\n  2017-08-08 03:24:37.915000 TestFramework (INFO): Cleaning up\n  2017-08-08 03:24:37.927000 TestFramework (INFO): Tests successful\n  ```\n  This largely improves the time spent in Travis (under evaluation).\n\nTree-SHA512: 023012fb3f8a380addf5995a4bf865862fed712cdd1a648d82a710e6566bc3bd34b6c49f9f06d6cc6bd81ca859da50d30d7f786c816e702549ab642e3476426f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d78b59fc03aa4376519b6f2d886c5c729b5618",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d78b59fc03aa4376519b6f2d886c5c729b5618",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d78b59fc03aa4376519b6f2d886c5c729b5618/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ca518deff25b2e2438c40a92e0ea3494054c6bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca518deff25b2e2438c40a92e0ea3494054c6bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca518deff25b2e2438c40a92e0ea3494054c6bf"
      },
      {
        "sha": "793667af1c31835e0eefcdd283930bb89cfeda8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793667af1c31835e0eefcdd283930bb89cfeda8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/793667af1c31835e0eefcdd283930bb89cfeda8f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31b6a3705bebc55740c4961012791059e25424c3",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d78b59fc03aa4376519b6f2d886c5c729b5618/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d78b59fc03aa4376519b6f2d886c5c729b5618/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=a1d78b59fc03aa4376519b6f2d886c5c729b5618",
        "patch": "@@ -481,6 +481,8 @@ void StopHTTPServer()\n     }\n     if (eventBase) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n+        // Exit the event loop as soon as there are no active events.\n+        event_base_loopexit(eventBase, nullptr);\n         // Give event loop a few seconds to exit (to send back last RPC responses), then break it\n         // Before this was solved with event_base_loopexit, but that didn't work as expected in\n         // at least libevent 2.0.21 and always introduced a delay. In libevent"
      }
    ]
  },
  {
    "sha": "50d72b357081ba377dac4c0d841ad55be3ae9fad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGQ3MmIzNTcwODFiYTM3N2RhYzRjMGQ4NDFhZDU1YmUzYWU5ZmFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T14:34:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T14:35:19Z"
      },
      "message": "Merge #11495: [trivial] Make namespace explicit for is_regular_file\n\nf4c4e38 [trivial] Make namespace explicit for is_regular_file (John Newbery)\n\nPull request description:\n\n  is_regular_file resolves using argument dependent lookup. Make the\n  namespace explicit so it's obvious where the function is defined.\n\n  For those not familiar with argument dependent lookups:\n\n  - http://en.cppreference.com/w/cpp/language/adl\n  - https://en.wikipedia.org/wiki/Argument-dependent_name_lookup\n\n  Thanks to C++ guru @ryanofsky for pointing this out to me.\n\nTree-SHA512: 919f1818081a8f90c5751181f87e13b06d90f8aec0ab873100434e55c85cca6e0e288ecc7f135e19e9b5dba7952e96b6393864b7840e20b69dd40e92a157928b",
      "tree": {
        "sha": "7becb8931a76969bc966d4435b43c9e42c4a2018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7becb8931a76969bc966d4435b43c9e42c4a2018"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50d72b357081ba377dac4c0d841ad55be3ae9fad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ52anAAoJEB5K7WKYbNJd59UH/j59LSQBYw6fDM4g7Eo8/4Th\nkO7/rnLN42oonRQ+rmHrIHIYxTAB0gWA9Fih1FmJYS1cy6zzbguajVTMKsM61OUa\nDZUwCGax6l4tMs8nu+n4YsJVqTbMsT2iaURbjg3dxti4M+E1bl4RuLUe2ZLjlLjo\nL+WC8T5kGBO+fAgpGdXVjnTz0x3rqoYAc7HlTg1VIRjyj67I7sM1unzUpNoGYDL4\nEpHi/6LpaCsgKgMKNaXxmoVd9HxSQoBCNrkOPXI98k9NvJtnPVWXxk+VVlxHZrVb\na1phTWrBrmk26sx7T75sxh8BaL7r+bTurbDpBoyh5UKdGsKIwM7FhHZ8hhHXvaI=\n=Ahqu\n-----END PGP SIGNATURE-----",
        "payload": "tree 7becb8931a76969bc966d4435b43c9e42c4a2018\nparent a1d78b59fc03aa4376519b6f2d886c5c729b5618\nparent f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508337294 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508337319 +0200\n\nMerge #11495: [trivial] Make namespace explicit for is_regular_file\n\nf4c4e38 [trivial] Make namespace explicit for is_regular_file (John Newbery)\n\nPull request description:\n\n  is_regular_file resolves using argument dependent lookup. Make the\n  namespace explicit so it's obvious where the function is defined.\n\n  For those not familiar with argument dependent lookups:\n\n  - http://en.cppreference.com/w/cpp/language/adl\n  - https://en.wikipedia.org/wiki/Argument-dependent_name_lookup\n\n  Thanks to C++ guru @ryanofsky for pointing this out to me.\n\nTree-SHA512: 919f1818081a8f90c5751181f87e13b06d90f8aec0ab873100434e55c85cca6e0e288ecc7f135e19e9b5dba7952e96b6393864b7840e20b69dd40e92a157928b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50d72b357081ba377dac4c0d841ad55be3ae9fad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50d72b357081ba377dac4c0d841ad55be3ae9fad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50d72b357081ba377dac4c0d841ad55be3ae9fad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d78b59fc03aa4376519b6f2d886c5c729b5618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d78b59fc03aa4376519b6f2d886c5c729b5618",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d78b59fc03aa4376519b6f2d886c5c729b5618"
      },
      {
        "sha": "f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4c4e388843a9cf5fd4a289b1d6bce8eab6b2ce6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6557434880d39d21e26783da739cf56ed482b478",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50d72b357081ba377dac4c0d841ad55be3ae9fad/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50d72b357081ba377dac4c0d841ad55be3ae9fad/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=50d72b357081ba377dac4c0d841ad55be3ae9fad",
        "patch": "@@ -588,7 +588,7 @@ void CleanupBlockRevFiles()\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n     fs::path blocksdir = GetDataDir() / \"blocks\";\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n-        if (is_regular_file(*it) &&\n+        if (fs::is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n         {"
      }
    ]
  },
  {
    "sha": "6759a24eaaf72019255854cf9e7ff2b462e4f978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzU5YTI0ZWFhZjcyMDE5MjU1ODU0Y2Y5ZTdmZjJiNDYyZTRmOTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T14:52:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T14:52:48Z"
      },
      "message": "Merge #11472: qa: Make tmpdir option an absolute path, misc cleanup\n\nfafa003 qa: Remove never used return value of sync_with_ping (MarcoFalke)\nfa9de37 qa: Make tmpdir option an absolute path (MarcoFalke)\n\nPull request description:\n\n  This should fix issues with the multiwallet test and its symlinks\n  when the tmpdir is a relative path.\n\n  Rather than fixing os.symlink to work with paths relative to a\n  directory descriptor, which does not work on Windows, normalize\n  the path instead.\n\nTree-SHA512: 189690f3d065ea2f0f48e06775c86d513d0916c7c86312432e8e16df160e65539e288c2bd53d49a4180735fa940f6fcd52b506ccd7d9815651a9b1a69850dda6",
      "tree": {
        "sha": "7c65ec4bfdf923c3b810ee89c9a5c53ee88b117d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c65ec4bfdf923c3b810ee89c9a5c53ee88b117d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6759a24eaaf72019255854cf9e7ff2b462e4f978",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ52rAAAoJEB5K7WKYbNJdEzYH/RcBIcXduV8vBhrdmUXiS7ID\nMYA1spR/21eV/IQmv8P75Jq0zf6gDnhYjQzFSaYCRp3jRgJVqP5HMHLX1eSWYat4\nuESSYOFpr6BQIsszmwo292iGS8HDk+/nsZaZ1AjbPqV7+4qZD9mFr6ZY5oYc2q8Q\npiR+X0K0mCdgAlTCEN2HY9jOajUjFpQ8KhHjZQkj60vzjQ/OLFhvUrEES535asaL\nDqh/+6fVmTFpz59jf6ITC2CpKMg92CC6pq7Sjt/BILrzp36jV6a1+jmIf6url4Gz\nOaWLwaF9NRYq+iMPEcU07zLy0E6APYeBeDPNWLC0ukGpx3WePIHL6jYLVoWCnWE=\n=vt2B\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c65ec4bfdf923c3b810ee89c9a5c53ee88b117d\nparent 50d72b357081ba377dac4c0d841ad55be3ae9fad\nparent fafa0039708e15d1067be091b2bfc10195afa480\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508338364 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508338368 +0200\n\nMerge #11472: qa: Make tmpdir option an absolute path, misc cleanup\n\nfafa003 qa: Remove never used return value of sync_with_ping (MarcoFalke)\nfa9de37 qa: Make tmpdir option an absolute path (MarcoFalke)\n\nPull request description:\n\n  This should fix issues with the multiwallet test and its symlinks\n  when the tmpdir is a relative path.\n\n  Rather than fixing os.symlink to work with paths relative to a\n  directory descriptor, which does not work on Windows, normalize\n  the path instead.\n\nTree-SHA512: 189690f3d065ea2f0f48e06775c86d513d0916c7c86312432e8e16df160e65539e288c2bd53d49a4180735fa940f6fcd52b506ccd7d9815651a9b1a69850dda6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6759a24eaaf72019255854cf9e7ff2b462e4f978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6759a24eaaf72019255854cf9e7ff2b462e4f978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6759a24eaaf72019255854cf9e7ff2b462e4f978/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50d72b357081ba377dac4c0d841ad55be3ae9fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50d72b357081ba377dac4c0d841ad55be3ae9fad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50d72b357081ba377dac4c0d841ad55be3ae9fad"
      },
      {
        "sha": "fafa0039708e15d1067be091b2bfc10195afa480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafa0039708e15d1067be091b2bfc10195afa480",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafa0039708e15d1067be091b2bfc10195afa480"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6c7e6a22ec9cc540dc68f5bbee4e1beee18c6e6b",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6759a24eaaf72019255854cf9e7ff2b462e4f978/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6759a24eaaf72019255854cf9e7ff2b462e4f978/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=6759a24eaaf72019255854cf9e7ff2b462e4f978",
        "patch": "@@ -103,7 +103,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         self.log.info(\"First height 2 block accepted by both nodes\")\n@@ -116,7 +117,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -135,7 +137,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():"
      },
      {
        "sha": "345ecfe76dcfeb4498291b6dced69dfce2092adc",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6759a24eaaf72019255854cf9e7ff2b462e4f978/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6759a24eaaf72019255854cf9e7ff2b462e4f978/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=6759a24eaaf72019255854cf9e7ff2b462e4f978",
        "patch": "@@ -1615,7 +1615,6 @@ def sync_with_ping(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n-        return True\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      },
      {
        "sha": "8df50474f3371b886d7579869afe6740faddeacc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6759a24eaaf72019255854cf9e7ff2b462e4f978/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6759a24eaaf72019255854cf9e7ff2b462e4f978/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=6759a24eaaf72019255854cf9e7ff2b462e4f978",
        "patch": "@@ -102,8 +102,11 @@ def main(self):\n \n         check_json_precision()\n \n+        self.options.cachedir = os.path.abspath(self.options.cachedir)\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n+            self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n             os.makedirs(self.options.tmpdir, exist_ok=False)\n         else:\n             self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")"
      }
    ]
  },
  {
    "sha": "937613d215def8ea2fc1cd00b2d573579d767d25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Mzc2MTNkMjE1ZGVmOGVhMmZjMWNkMDBiMmQ1NzM1NzlkNzY3ZDI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T15:01:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T15:01:43Z"
      },
      "message": "Merge #11467: Fix typos. Use nullptr instead of NULL.\n\n0aacfa4 Remove accidental stray semicolon (practicalswift)\n68feb49 Use nullptr instead of NULL (practicalswift)\nc6b07fd Fix a vs. an typo (practicalswift)\n\nPull request description:\n\n  Minor cleanups:\n  * Typo: Fix a vs. an typo\n  * Typo: Remove accidental stray semicolon (only remaining instance in repo)\n  * Correctness/consistency: Use `nullptr` instead of `NULL` (only remaining instance in repo)\n\nTree-SHA512: 47142e557da9d3fa0b532c46edeb7f356a1f6dc5973e60b0e496badff3581ff696eade542d49da777ac7f2e895129cc8487ccdb1984ff828434fa86f9a56dad0",
      "tree": {
        "sha": "2408ad33431b37b25871289c6fbe7650c38abff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2408ad33431b37b25871289c6fbe7650c38abff3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/937613d215def8ea2fc1cd00b2d573579d767d25",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ52zXAAoJEB5K7WKYbNJd8kMIAIU05O4Td4UCkp9lZpyAAcUI\njyd7AGVS4UrSB2t7TuiKtrTjELAD/Q02mDsQNMyxDNJs3XbbmCgNiZy3wuBvHpaD\n/HHYgXPUfEoEKt5TcPvMzJEQIEjW0EBk6fYXrlJNpr7Of6jvkz1VyyrLhAP7DRuK\nYM2k9AHIh+2yBMhZcHPREgSrEGKdc254RFVc25kDg92nmcXh6unfQbDfzGsy2IaD\nnqyZNsG8Gy5rJeFWvQ3UN3bBbblJCWjjbSq0BVxAqDoNt32Lw7IEg8AQeIuqQshn\nKp6BjmnmT0sR3SOPePs0lgyLKbk3ImOFSjRVw3jV1qmioaclDHbQwxRK3tKtVsw=\n=tiPB\n-----END PGP SIGNATURE-----",
        "payload": "tree 2408ad33431b37b25871289c6fbe7650c38abff3\nparent 6759a24eaaf72019255854cf9e7ff2b462e4f978\nparent 0aacfa43c16af307ad154d9fbc5dade80f6f88d5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508338877 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508338903 +0200\n\nMerge #11467: Fix typos. Use nullptr instead of NULL.\n\n0aacfa4 Remove accidental stray semicolon (practicalswift)\n68feb49 Use nullptr instead of NULL (practicalswift)\nc6b07fd Fix a vs. an typo (practicalswift)\n\nPull request description:\n\n  Minor cleanups:\n  * Typo: Fix a vs. an typo\n  * Typo: Remove accidental stray semicolon (only remaining instance in repo)\n  * Correctness/consistency: Use `nullptr` instead of `NULL` (only remaining instance in repo)\n\nTree-SHA512: 47142e557da9d3fa0b532c46edeb7f356a1f6dc5973e60b0e496badff3581ff696eade542d49da777ac7f2e895129cc8487ccdb1984ff828434fa86f9a56dad0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/937613d215def8ea2fc1cd00b2d573579d767d25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/937613d215def8ea2fc1cd00b2d573579d767d25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/937613d215def8ea2fc1cd00b2d573579d767d25/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6759a24eaaf72019255854cf9e7ff2b462e4f978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6759a24eaaf72019255854cf9e7ff2b462e4f978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6759a24eaaf72019255854cf9e7ff2b462e4f978"
      },
      {
        "sha": "0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aacfa43c16af307ad154d9fbc5dade80f6f88d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0aacfa43c16af307ad154d9fbc5dade80f6f88d5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7194b040eb61014fe7f3805c32f4091908481360",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/937613d215def8ea2fc1cd00b2d573579d767d25/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/937613d215def8ea2fc1cd00b2d573579d767d25/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=937613d215def8ea2fc1cd00b2d573579d767d25",
        "patch": "@@ -39,7 +39,7 @@ PREV_COMMIT=\"\"\n while true; do\n \tif [ \"$CURRENT_COMMIT\" = $VERIFIED_ROOT ]; then\n \t\techo \"There is a valid path from \"$CURRENT_COMMIT\" to $VERIFIED_ROOT where all commits are signed!\"\n-\t\texit 0;\n+\t\texit 0\n \tfi\n \n \tif [ \"$CURRENT_COMMIT\" = $VERIFIED_SHA512_ROOT ]; then"
      },
      {
        "sha": "82040605c550a02fada85e58e2f78f827ed2baf8",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/937613d215def8ea2fc1cd00b2d573579d767d25/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/937613d215def8ea2fc1cd00b2d573579d767d25/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=937613d215def8ea2fc1cd00b2d573579d767d25",
        "patch": "@@ -291,7 +291,7 @@ struct ProxyCredentials\n     std::string password;\n };\n \n-/** Convert SOCKS5 reply to a an error message */\n+/** Convert SOCKS5 reply to an error message */\n std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {"
      },
      {
        "sha": "543bef32ad9a635d0eef17a6880d37029450dca2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/937613d215def8ea2fc1cd00b2d573579d767d25/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/937613d215def8ea2fc1cd00b2d573579d767d25/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=937613d215def8ea2fc1cd00b2d573579d767d25",
        "patch": "@@ -3881,7 +3881,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         // Top up the keypool\n         if (!walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n-            return NULL;\n+            return nullptr;\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());"
      }
    ]
  },
  {
    "sha": "02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmFjOGM4OTJiMWZhOThkOWM0NDIyZjFiZGE4OWVhNDIxZWQxN2Jk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T16:49:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T17:00:05Z"
      },
      "message": "Merge #11452: Improve ZMQ functional test\n\ncc9ee80 Improve ZMQ functional test (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  After #11439, this PR only improves:\n   - test comments;\n   - simplicity by removing *duplicate* tests;\n   - also removes duplicate code.\n\nTree-SHA512: 3636fa9694c827128128742ad31e635d19670c3645aef8e7b1cb46069c21631e8b0db059486a6f6e7eee237a23d93bce6df95190394b5a8dcfce31a49a72d17f",
      "tree": {
        "sha": "4872cb82349763f035edd80f9948daa8b486c4cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4872cb82349763f035edd80f9948daa8b486c4cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ54iVAAoJEB5K7WKYbNJdMEgIAK3eWefBEIIV4OVUfupHLYTq\nQem1VG38YvwuTs+JhratYL4PbWApArG5lCmJ0gpyAIhCFOrMS5hkLKRJhyqihS0q\nrp5nct9xlAYcofTS8OUsuTTTaM9xBR8mqVwSXErRvY/+WZiK+44EJEDNB+h4eowT\nDrqujuHNf0IyXSJ+mIePBbTodb7ASNkxBIAuJWuP9PQ4JN/iK7nbcny+5nSClIfG\nSv16kE0B5XHXnrIeT18U6bIkcNtUNhCRpqAWSOBAmDQUmVnI/5TKHkxd/Rf15qCI\nRY5gTfHwQLCHc/AeTzBJn4OtfH7RGkLtSwn0loqm6rUL1/b8zTmXd8PTC+8irDs=\n=YWRv\n-----END PGP SIGNATURE-----",
        "payload": "tree 4872cb82349763f035edd80f9948daa8b486c4cd\nparent 937613d215def8ea2fc1cd00b2d573579d767d25\nparent cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508345382 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508346005 +0200\n\nMerge #11452: Improve ZMQ functional test\n\ncc9ee80 Improve ZMQ functional test (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  After #11439, this PR only improves:\n   - test comments;\n   - simplicity by removing *duplicate* tests;\n   - also removes duplicate code.\n\nTree-SHA512: 3636fa9694c827128128742ad31e635d19670c3645aef8e7b1cb46069c21631e8b0db059486a6f6e7eee237a23d93bce6df95190394b5a8dcfce31a49a72d17f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "937613d215def8ea2fc1cd00b2d573579d767d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/937613d215def8ea2fc1cd00b2d573579d767d25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/937613d215def8ea2fc1cd00b2d573579d767d25"
      },
      {
        "sha": "cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc9ee809ad19a63ca284d2fbc327ac1cbcee31e4"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 70,
      "deletions": 102
    },
    "files": [
      {
        "sha": "165f9192ddd74040c85db1258c5973f36f56ca15",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 70,
        "deletions": 102,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test the ZMQ API.\"\"\"\n+\"\"\"Test the ZMQ notification interface.\"\"\"\n import configparser\n import os\n import struct\n@@ -13,6 +13,25 @@\n                                  hash256,\n                                 )\n \n+class ZMQSubscriber:\n+    def __init__(self, socket, topic):\n+        self.sequence = 0\n+        self.socket = socket\n+        self.topic = topic\n+\n+        import zmq\n+        self.socket.setsockopt(zmq.SUBSCRIBE, self.topic)\n+\n+    def receive(self):\n+        topic, body, seq = self.socket.recv_multipart()\n+        # Topic should match the subscriber topic.\n+        assert_equal(topic, self.topic)\n+        # Sequence should be incremental.\n+        assert_equal(struct.unpack('<I', seq)[-1], self.sequence)\n+        self.sequence += 1\n+        return body\n+\n+\n class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -24,130 +43,79 @@ def setup_nodes(self):\n         except ImportError:\n             raise SkipTest(\"python3-zmq module not available.\")\n \n-        # Check that bitcoin has been built with ZMQ enabled\n+        # Check that bitcoin has been built with ZMQ enabled.\n         config = configparser.ConfigParser()\n         if not self.options.configfile:\n-            self.options.configfile = os.path.dirname(__file__) + \"/../config.ini\"\n+            self.options.configfile = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../config.ini\"))\n         config.read_file(open(self.options.configfile))\n \n         if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n             raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n \n-        self.zmqContext = zmq.Context()\n-        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n-        ip_address = \"tcp://127.0.0.1:28332\"\n-        self.zmqSubSocket.connect(ip_address)\n-        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n-                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n+        # Initialize ZMQ context and socket.\n+        # All messages are received in the same socket which means\n+        # that this test fails if the publishing order changes.\n+        # Note that the publishing order is not defined in the documentation and\n+        # is subject to change.\n+        address = \"tcp://127.0.0.1:28332\"\n+        self.zmq_context = zmq.Context()\n+        socket = self.zmq_context.socket(zmq.SUB)\n+        socket.set(zmq.RCVTIMEO, 60000)\n+        socket.connect(address)\n+\n+        # Subscribe to all available topics.\n+        self.hashblock = ZMQSubscriber(socket, b\"hashblock\")\n+        self.hashtx = ZMQSubscriber(socket, b\"hashtx\")\n+        self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n+        self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n+\n+        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n     def run_test(self):\n         try:\n             self._zmq_test()\n         finally:\n-            # Destroy the zmq context\n-            self.log.debug(\"Destroying zmq context\")\n-            self.zmqContext.destroy(linger=None)\n+            # Destroy the ZMQ context.\n+            self.log.debug(\"Destroying ZMQ context\")\n+            self.zmq_context.destroy(linger=None)\n \n     def _zmq_test(self):\n-        genhashes = self.nodes[0].generate(1)\n+        num_blocks = 5\n+        self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n+        genhashes = self.nodes[0].generate(num_blocks)\n         self.sync_all()\n \n-        self.log.info(\"Wait for tx\")\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"hashtx\")\n-        txhash = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n-\n-        # rawtx\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"rawtx\")\n-        body = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n-\n-        # Check that the rawtx hashes to the hashtx\n-        assert_equal(hash256(body), txhash)\n-\n-        self.log.info(\"Wait for block\")\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"hashblock\")\n-        body = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n-        blkhash = bytes_to_hex_str(body)\n-        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n-\n-        # rawblock\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"rawblock\")\n-        body = msg[1]\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n-\n-        # Check the hash of the rawblock's header matches generate\n-        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n-\n-        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n-        n = 10\n-        genhashes = self.nodes[1].generate(n)\n-        self.sync_all()\n+        for x in range(num_blocks):\n+            # Should receive the coinbase txid.\n+            txid = self.hashtx.receive()\n+\n+            # Should receive the coinbase raw transaction.\n+            hex = self.rawtx.receive()\n+            assert_equal(hash256(hex), txid)\n \n-        zmqHashes = []\n-        zmqRawHashed = []\n-        blockcount = 0\n-        for x in range(n * 4):\n-            msg = self.zmqSubSocket.recv_multipart()\n-            topic = msg[0]\n-            body = msg[1]\n-            if topic == b\"hashblock\":\n-                zmqHashes.append(bytes_to_hex_str(body))\n-                msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount + 1)\n-                blockcount += 1\n-            if topic == b\"rawblock\":\n-                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n-                msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount)\n-\n-        for x in range(n):\n-            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n-            assert_equal(genhashes[x], zmqRawHashed[x])\n+            # Should receive the generated block hash.\n+            hash = bytes_to_hex_str(self.hashblock.receive())\n+            assert_equal(genhashes[x], hash)\n+            # The block should only have the coinbase txid.\n+            assert_equal([bytes_to_hex_str(txid)], self.nodes[1].getblock(hash)[\"tx\"])\n+\n+            # Should receive the generated raw block.\n+            block = self.rawblock.receive()\n+            assert_equal(genhashes[x], bytes_to_hex_str(hash256(block[:80])))\n \n         self.log.info(\"Wait for tx from second node\")\n-        # test tx from a second node\n-        hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n+        payment_txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n-        # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n-        hashZMQ = bytes_to_hex_str(body)\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, blockcount + 1)\n-\n-        msg = self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        assert_equal(topic, b\"rawtx\")\n-        body = msg[1]\n-        hashedZMQ = bytes_to_hex_str(hash256(body))\n-        msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, blockcount+1)\n-        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n-        assert_equal(hashRPC, hashedZMQ)\n+        # Should receive the broadcasted txid.\n+        txid = self.hashtx.receive()\n+        assert_equal(payment_txid, bytes_to_hex_str(txid))\n+\n+        # Should receive the broadcasted raw transaction.\n+        hex = self.rawtx.receive()\n+        assert_equal(payment_txid, bytes_to_hex_str(hash256(hex)))\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  },
  {
    "sha": "a86e81b78fc2a2ecc827a7890cba21ed229957f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODZlODFiNzhmYzJhMmVjYzgyN2E3ODkwY2JhMjFlZDIyOTk1N2Yy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-18T18:24:21Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-18T18:26:22Z"
      },
      "message": "travis: move back to the minimal image\n\nThe most recent update replaced the minimal image with a large one for the\n'generic' image. Switching back to 'minimal' should reduce dependencies and\nmaybe speed us up some.\n\nIt should also eliminiate the need for aa2e0f09e.",
      "tree": {
        "sha": "ff07bce9fbb6549fdd585ac3ddf996b011b84b25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff07bce9fbb6549fdd585ac3ddf996b011b84b25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a86e81b78fc2a2ecc827a7890cba21ed229957f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86e81b78fc2a2ecc827a7890cba21ed229957f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a86e81b78fc2a2ecc827a7890cba21ed229957f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86e81b78fc2a2ecc827a7890cba21ed229957f2/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8e0499db055bbb57f85d18d592d92d9ebdf52db0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a86e81b78fc2a2ecc827a7890cba21ed229957f2/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a86e81b78fc2a2ecc827a7890cba21ed229957f2/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a86e81b78fc2a2ecc827a7890cba21ed229957f2",
        "patch": "@@ -1,7 +1,7 @@\n sudo: required\n dist: trusty\n os: linux\n-language: generic\n+language: minimal\n cache:\n   directories:\n   - depends/built"
      }
    ]
  },
  {
    "sha": "3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDFjMzExMjZiOGFjOWZlMThkMTUxZGM0ZTljZjg1OThkZDc3MzYy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-18T18:42:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-18T18:42:08Z"
      },
      "message": "Revert \"travis: filter out pyenv\"\n\nThis reverts commit aa2e0f09ec94dd0908f792ebc2249859ad174586.",
      "tree": {
        "sha": "9147cae6c6411e923524a5e9b641861d90227299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9147cae6c6411e923524a5e9b641861d90227299"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a86e81b78fc2a2ecc827a7890cba21ed229957f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86e81b78fc2a2ecc827a7890cba21ed229957f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a86e81b78fc2a2ecc827a7890cba21ed229957f2"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4bb0b1f9fbf7012edcef330b57afc0774b49f5f0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
        "patch": "@@ -40,7 +40,6 @@ env:\n \n before_install:\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n-    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/pyenv/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "132d3225f325b84afc282638c9e99623d249a52c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzJkMzIyNWYzMjViODRhZmMyODI2MzhjOWU5OTYyM2QyNDlhNTJj",
    "commit": {
      "author": {
        "name": "Andreas Schildbach",
        "email": "andreas@schildbach.de",
        "date": "2017-10-19T10:45:11Z"
      },
      "committer": {
        "name": "Andreas Schildbach",
        "email": "andreas@schildbach.de",
        "date": "2017-10-19T10:47:19Z"
      },
      "message": "Remove my testnet DNS seed as I currently don't have the capacity to keep it up to date.",
      "tree": {
        "sha": "b03d79466177fe454cb839cd4e6f124806ad867c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b03d79466177fe454cb839cd4e6f124806ad867c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/132d3225f325b84afc282638c9e99623d249a52c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132d3225f325b84afc282638c9e99623d249a52c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/132d3225f325b84afc282638c9e99623d249a52c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132d3225f325b84afc282638c9e99623d249a52c/comments",
    "author": {
      "login": "schildbach",
      "id": 743306,
      "node_id": "MDQ6VXNlcjc0MzMwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/743306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schildbach",
      "html_url": "https://github.com/schildbach",
      "followers_url": "https://api.github.com/users/schildbach/followers",
      "following_url": "https://api.github.com/users/schildbach/following{/other_user}",
      "gists_url": "https://api.github.com/users/schildbach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schildbach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schildbach/subscriptions",
      "organizations_url": "https://api.github.com/users/schildbach/orgs",
      "repos_url": "https://api.github.com/users/schildbach/repos",
      "events_url": "https://api.github.com/users/schildbach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schildbach/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schildbach",
      "id": 743306,
      "node_id": "MDQ6VXNlcjc0MzMwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/743306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schildbach",
      "html_url": "https://github.com/schildbach",
      "followers_url": "https://api.github.com/users/schildbach/followers",
      "following_url": "https://api.github.com/users/schildbach/following{/other_user}",
      "gists_url": "https://api.github.com/users/schildbach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schildbach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schildbach/subscriptions",
      "organizations_url": "https://api.github.com/users/schildbach/orgs",
      "repos_url": "https://api.github.com/users/schildbach/repos",
      "events_url": "https://api.github.com/users/schildbach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schildbach/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "afdac16da476bee4020c636ae2fc9c406cbec8ab",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/132d3225f325b84afc282638c9e99623d249a52c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/132d3225f325b84afc282638c9e99623d249a52c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=132d3225f325b84afc282638c9e99623d249a52c",
        "patch": "@@ -230,7 +230,6 @@ class CTestNetParams : public CChainParams {\n         vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n         vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n         vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      }
    ]
  },
  {
    "sha": "b9e1299f048dab511aac8b933665f71da8ddb7c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWUxMjk5ZjA0OGRhYjUxMWFhYzhiOTMzNjY1ZjcxZGE4ZGRiN2M0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T12:51:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T12:54:35Z"
      },
      "message": "Merge #11521: travis: move back to the minimal image\n\n3d1c311 Revert \"travis: filter out pyenv\" (Cory Fields)\na86e81b travis: move back to the minimal image (Cory Fields)\n\nPull request description:\n\n  The most recent update replaced the minimal image with a large one for the\n  'generic' image. Switching back to 'minimal' should reduce dependencies and\n  maybe speed us up some.\n\n  It should also eliminiate the need for aa2e0f09e.\n\nTree-SHA512: 0e5f3e97e8d97add07ea228bc5ce1e51e8e069950dbb2871a7eece297995f20b671afdf1c68211ce404cba3ba393d61dfef30ed54d46d6805fde9388f6b4455e",
      "tree": {
        "sha": "9147cae6c6411e923524a5e9b641861d90227299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9147cae6c6411e923524a5e9b641861d90227299"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9e1299f048dab511aac8b933665f71da8ddb7c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6KCLAAoJEB5K7WKYbNJdfFgH/1ihvlzIYmGFxm2ZKztjOTf4\nIoFz8hOPSEoXZpcIVamNWcbBoYbXPiKo8ZM/fUk5Wkd49IM9Ml/ZwLilhgVKRXfk\n0y+sa8njbIMC1SjvAj0Ex9ZmOOdA5BhZsRy78fPxdMD8e3l4aA4hv4/RCsst6Mnt\n3Kyp3YWD7rg55hpuhO9MPdvKZzwwsbJMngjv7d51v+dCaZNLeIi0TjxN2UovUOGU\nRl8EgYGWco2wE41MF1aKBjjcOWoWZ+QaIgvKQLFqbS6OQ27LeTFTqL80syru2Xsm\nmWN4CRp5+FP6qiKEtbBswjkEwd8lE84yCr/Q2M6P9w8jyyH7O2nQvKLypamGDUc=\n=5G97\n-----END PGP SIGNATURE-----",
        "payload": "tree 9147cae6c6411e923524a5e9b641861d90227299\nparent 02ac8c892b1fa98d9c4422f1bda89ea421ed17bd\nparent 3d1c31126b8ac9fe18d151dc4e9cf8598dd77362\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508417502 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508417675 +0200\n\nMerge #11521: travis: move back to the minimal image\n\n3d1c311 Revert \"travis: filter out pyenv\" (Cory Fields)\na86e81b travis: move back to the minimal image (Cory Fields)\n\nPull request description:\n\n  The most recent update replaced the minimal image with a large one for the\n  'generic' image. Switching back to 'minimal' should reduce dependencies and\n  maybe speed us up some.\n\n  It should also eliminiate the need for aa2e0f09e.\n\nTree-SHA512: 0e5f3e97e8d97add07ea228bc5ce1e51e8e069950dbb2871a7eece297995f20b671afdf1c68211ce404cba3ba393d61dfef30ed54d46d6805fde9388f6b4455e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e1299f048dab511aac8b933665f71da8ddb7c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e1299f048dab511aac8b933665f71da8ddb7c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e1299f048dab511aac8b933665f71da8ddb7c4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02ac8c892b1fa98d9c4422f1bda89ea421ed17bd"
      },
      {
        "sha": "3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d1c31126b8ac9fe18d151dc4e9cf8598dd77362"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4bb0b1f9fbf7012edcef330b57afc0774b49f5f0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9e1299f048dab511aac8b933665f71da8ddb7c4/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9e1299f048dab511aac8b933665f71da8ddb7c4/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=b9e1299f048dab511aac8b933665f71da8ddb7c4",
        "patch": "@@ -1,7 +1,7 @@\n sudo: required\n dist: trusty\n os: linux\n-language: generic\n+language: minimal\n cache:\n   directories:\n   - depends/built\n@@ -40,7 +40,6 @@ env:\n \n before_install:\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n-    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/pyenv/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "478a89c1ef79a75275d1b508122c06eee9386b2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzhhODljMWVmNzlhNzUyNzVkMWI1MDgxMjJjMDZlZWU5Mzg2YjJk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-10T19:27:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-19T13:01:43Z"
      },
      "message": "Avoid opening copied wallet databases simultaneously\n\nMake sure wallet databases have unique fileids. If they don't, throw an error.\nBDB caches do not work properly when more than one open database has the same\nfileid, because values written to one database may show up in reads to other\ndatabases.\n\nBitcoin will never create different databases with the same fileid, but users\ncan create them by manually copying database files.\n\nBDB caching bug was reported by Chris Moore <dooglus@gmail.com>\nhttps://github.com/bitcoin/bitcoin/issues/11429\n\nFixes #11429",
      "tree": {
        "sha": "9537bcd85ca45299d363560f1a6dbb6847907919",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9537bcd85ca45299d363560f1a6dbb6847907919"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/478a89c1ef79a75275d1b508122c06eee9386b2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478a89c1ef79a75275d1b508122c06eee9386b2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/478a89c1ef79a75275d1b508122c06eee9386b2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478a89c1ef79a75275d1b508122c06eee9386b2d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "459d289a4278f136c9455be111879981abdeb8ed",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478a89c1ef79a75275d1b508122c06eee9386b2d/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478a89c1ef79a75275d1b508122c06eee9386b2d/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=478a89c1ef79a75275d1b508122c06eee9386b2d",
        "patch": "@@ -20,6 +20,40 @@\n \n #include <boost/thread.hpp>\n \n+namespace {\n+//! Make sure database has a unique fileid within the environment. If it\n+//! doesn't, throw an error. BDB caches do not work properly when more than one\n+//! open database has the same fileid (values written to one database may show\n+//! up in reads to other databases).\n+//!\n+//! BerkeleyDB generates unique fileids by default\n+//! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n+//! so bitcoin should never create different databases with the same fileid, but\n+//! this error can be triggered if users manually copy database files.\n+void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n+{\n+    if (env.IsMock()) return;\n+\n+    u_int8_t fileid[DB_FILE_ID_LEN];\n+    int ret = db.get_mpf()->get_fileid(fileid);\n+    if (ret != 0) {\n+        throw std::runtime_error(strprintf(\"CDB: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n+    }\n+\n+    for (const auto& item : env.mapDb) {\n+        u_int8_t item_fileid[DB_FILE_ID_LEN];\n+        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n+            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n+            const char* item_filename = nullptr;\n+            item.second->get_dbname(&item_filename, nullptr);\n+            throw std::runtime_error(strprintf(\"CDB: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n+                item_filename ? item_filename : \"(unknown database)\"));\n+        }\n+    }\n+}\n+} // namespace\n+\n //\n // CDB\n //\n@@ -403,6 +437,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n+            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;"
      },
      {
        "sha": "7a0fbce477aaed214d492498e75ada114956ea8a",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478a89c1ef79a75275d1b508122c06eee9386b2d/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478a89c1ef79a75275d1b508122c06eee9386b2d/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=478a89c1ef79a75275d1b508122c06eee9386b2d",
        "patch": "@@ -7,6 +7,7 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -29,6 +30,11 @@ def run_test(self):\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n+        # should not initialize if one wallet is a copy of another\n+        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n+                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+\n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')"
      }
    ]
  },
  {
    "sha": "13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2Y1M2I3NTBkYzA5Y2I1OTE5MmIyYWE0YWM4ZTQ5OWVlMzZlMWNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T13:01:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T13:01:43Z"
      },
      "message": "Merge #11527: Remove my testnet DNS seed as I currently don't have the capacity to \u2026\n\n132d322 Remove my testnet DNS seed as I currently don't have the capacity to keep it up to date. (Andreas Schildbach)\n\nPull request description:\n\n  \u2026keep it up to date.\n\n  I suggest to consider this for backporting.\n\nTree-SHA512: 2aadb60e9ecab1756f835e62ab784124c61a1fa59380d299ce482f826169da9ed8b7f8615ea9d8d3484eac0b32a9e974685ddc51723c7782a472bc0386243898",
      "tree": {
        "sha": "b3bd143cc971cbb07f09c77957c083f9d0a179ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3bd143cc971cbb07f09c77957c083f9d0a179ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6KI3AAoJEB5K7WKYbNJdVekIAJA7Jt/PqQ/kQxiZvH0IjDGb\nJw+Adr/yzgLnNNfctWWnfEixaFwNQuyJcvrEZSvWL40bENgAFxx5MPRiIecvnuC1\nhiDAlOHbEEMsgPENOlQ9sCRRN2Ps/39Hc6p/RfP+PkB7UehZ+OlC3lTLMlrYNVP1\nvLKXonOvnoXd5zVX9dWSm5K3a3NF7MTOJwuVSntOCqP1mJt9VwpKbTdAIr5SjRQv\nTygFKIKgMuqqv+rg6mGZ/iOiY8W1s3b3RDL+TbGVSAG+Z0QL0RjofusoOwq99McN\nLfuKdjeHRtaCE6Ygmd3OGFsuTntKU1hc+XMOao099TPSK76AKC8226ayHcreUMg=\n=8Gef\n-----END PGP SIGNATURE-----",
        "payload": "tree b3bd143cc971cbb07f09c77957c083f9d0a179ee\nparent b9e1299f048dab511aac8b933665f71da8ddb7c4\nparent 132d3225f325b84afc282638c9e99623d249a52c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508418090 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508418103 +0200\n\nMerge #11527: Remove my testnet DNS seed as I currently don't have the capacity to \u2026\n\n132d322 Remove my testnet DNS seed as I currently don't have the capacity to keep it up to date. (Andreas Schildbach)\n\nPull request description:\n\n  \u2026keep it up to date.\n\n  I suggest to consider this for backporting.\n\nTree-SHA512: 2aadb60e9ecab1756f835e62ab784124c61a1fa59380d299ce482f826169da9ed8b7f8615ea9d8d3484eac0b32a9e974685ddc51723c7782a472bc0386243898\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9e1299f048dab511aac8b933665f71da8ddb7c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e1299f048dab511aac8b933665f71da8ddb7c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e1299f048dab511aac8b933665f71da8ddb7c4"
      },
      {
        "sha": "132d3225f325b84afc282638c9e99623d249a52c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132d3225f325b84afc282638c9e99623d249a52c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/132d3225f325b84afc282638c9e99623d249a52c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "afdac16da476bee4020c636ae2fc9c406cbec8ab",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "patch": "@@ -230,7 +230,6 @@ class CTestNetParams : public CChainParams {\n         vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n         vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n         vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      }
    ]
  },
  {
    "sha": "7a5f9303a9ed8e9efa25f8264ed491644e451645",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTVmOTMwM2E5ZWQ4ZTllZmEyNWY4MjY0ZWQ0OTE2NDRlNDUxNjQ1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-19T14:49:45Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-19T15:01:45Z"
      },
      "message": "Avoid slow transaction search with txindex enabled",
      "tree": {
        "sha": "57c9ef85d3de2d44742cc43ca501fe281dfe4e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57c9ef85d3de2d44742cc43ca501fe281dfe4e74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a5f9303a9ed8e9efa25f8264ed491644e451645",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5f9303a9ed8e9efa25f8264ed491644e451645",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5f9303a9ed8e9efa25f8264ed491644e451645",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5f9303a9ed8e9efa25f8264ed491644e451645/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d19521bd3c196f7edd5ce3c1a8ca2c5733d21ad4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a5f9303a9ed8e9efa25f8264ed491644e451645/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a5f9303a9ed8e9efa25f8264ed491644e451645/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7a5f9303a9ed8e9efa25f8264ed491644e451645",
        "patch": "@@ -939,6 +939,9 @@ bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus\n                 return error(\"%s: txid mismatch\", __func__);\n             return true;\n         }\n+\n+        // transaction not found in index, nothing more can be done\n+        return false;\n     }\n \n     if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it"
      }
    ]
  },
  {
    "sha": "99e93de6f8ab4fcaa244686bb047d184e74c3e27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWU5M2RlNmY4YWI0ZmNhYTI0NDY4NmJiMDQ3ZDE4NGU3NGMzZTI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T16:12:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T16:16:46Z"
      },
      "message": "Merge #11476: Avoid opening copied wallet databases simultaneously\n\n478a89c Avoid opening copied wallet databases simultaneously (Russell Yanofsky)\n\nPull request description:\n\n  Make sure wallet databases have unique fileids. If they don't, throw an error. BDB caches do not work properly when more than one open database has the same fileid, because values written to one database may show up in reads to other databases.\n\n  Bitcoin will never create different databases with the same fileid, but users can create them by manually copying database files.\n\n  BDB caching bug was reported by @dooglus in https://github.com/bitcoin/bitcoin/issues/11429\n\nTree-SHA512: e7635dc81a181801f42324b72fe9e0a2a7dd00b1dcf5abcbf27fa50938eb9a1fc3065c2321326c3456c48c29ae6504353b02f3d46e6eb2f7b09e46d8fe24388d",
      "tree": {
        "sha": "9537bcd85ca45299d363560f1a6dbb6847907919",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9537bcd85ca45299d363560f1a6dbb6847907919"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99e93de6f8ab4fcaa244686bb047d184e74c3e27",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6M/uAAoJEB5K7WKYbNJd/bIIAJUgg5GAiC8qGKRaWh/UWnB1\neIakzIW9ubPaznyHjNQMrfoEUJp7ptXNmsDvo/gdvlvSRwXaDZwkwRGFi5ysSRKM\npQkOpRuuqEBOe6mcGjCB4sIRyKWjbPc5dii25R3p3Vi+IegBxnp//gQS76k3zy6Y\ny68f1xIbxgDbJIsSLFFhmVLQY1X1YT1+JcZqkEDmBAv5Zfx2rv/zsf45GyVd0k0V\nTDEUwsHwbwfpIZGDBGRIE2w0PPbP4BPrP18D0sh1UC5E/K7X6rAlSi4pNvU/T+IP\ndSoagsF2daYugdo5LjYzXaVNqinGEKz5GmeveS1XXC6oGqg81kfg6XeC6Gq2FkU=\n=JHr+\n-----END PGP SIGNATURE-----",
        "payload": "tree 9537bcd85ca45299d363560f1a6dbb6847907919\nparent 13f53b750dc09cb59192b2aa4ac8e499ee36e1ca\nparent 478a89c1ef79a75275d1b508122c06eee9386b2d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508429579 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508429806 +0200\n\nMerge #11476: Avoid opening copied wallet databases simultaneously\n\n478a89c Avoid opening copied wallet databases simultaneously (Russell Yanofsky)\n\nPull request description:\n\n  Make sure wallet databases have unique fileids. If they don't, throw an error. BDB caches do not work properly when more than one open database has the same fileid, because values written to one database may show up in reads to other databases.\n\n  Bitcoin will never create different databases with the same fileid, but users can create them by manually copying database files.\n\n  BDB caching bug was reported by @dooglus in https://github.com/bitcoin/bitcoin/issues/11429\n\nTree-SHA512: e7635dc81a181801f42324b72fe9e0a2a7dd00b1dcf5abcbf27fa50938eb9a1fc3065c2321326c3456c48c29ae6504353b02f3d46e6eb2f7b09e46d8fe24388d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e93de6f8ab4fcaa244686bb047d184e74c3e27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99e93de6f8ab4fcaa244686bb047d184e74c3e27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e93de6f8ab4fcaa244686bb047d184e74c3e27/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca"
      },
      {
        "sha": "478a89c1ef79a75275d1b508122c06eee9386b2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478a89c1ef79a75275d1b508122c06eee9386b2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/478a89c1ef79a75275d1b508122c06eee9386b2d"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "459d289a4278f136c9455be111879981abdeb8ed",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e93de6f8ab4fcaa244686bb047d184e74c3e27/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e93de6f8ab4fcaa244686bb047d184e74c3e27/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=99e93de6f8ab4fcaa244686bb047d184e74c3e27",
        "patch": "@@ -20,6 +20,40 @@\n \n #include <boost/thread.hpp>\n \n+namespace {\n+//! Make sure database has a unique fileid within the environment. If it\n+//! doesn't, throw an error. BDB caches do not work properly when more than one\n+//! open database has the same fileid (values written to one database may show\n+//! up in reads to other databases).\n+//!\n+//! BerkeleyDB generates unique fileids by default\n+//! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n+//! so bitcoin should never create different databases with the same fileid, but\n+//! this error can be triggered if users manually copy database files.\n+void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n+{\n+    if (env.IsMock()) return;\n+\n+    u_int8_t fileid[DB_FILE_ID_LEN];\n+    int ret = db.get_mpf()->get_fileid(fileid);\n+    if (ret != 0) {\n+        throw std::runtime_error(strprintf(\"CDB: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n+    }\n+\n+    for (const auto& item : env.mapDb) {\n+        u_int8_t item_fileid[DB_FILE_ID_LEN];\n+        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n+            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n+            const char* item_filename = nullptr;\n+            item.second->get_dbname(&item_filename, nullptr);\n+            throw std::runtime_error(strprintf(\"CDB: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n+                item_filename ? item_filename : \"(unknown database)\"));\n+        }\n+    }\n+}\n+} // namespace\n+\n //\n // CDB\n //\n@@ -403,6 +437,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n+            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;"
      },
      {
        "sha": "7a0fbce477aaed214d492498e75ada114956ea8a",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e93de6f8ab4fcaa244686bb047d184e74c3e27/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e93de6f8ab4fcaa244686bb047d184e74c3e27/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=99e93de6f8ab4fcaa244686bb047d184e74c3e27",
        "patch": "@@ -7,6 +7,7 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -29,6 +30,11 @@ def run_test(self):\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n+        # should not initialize if one wallet is a copy of another\n+        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n+                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+\n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')"
      }
    ]
  },
  {
    "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjkyZmJmMjQ3MzlhMDIyZWI2NzdkYWFiMDNjODdjNWU2OTcxMDk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T18:04:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T18:04:57Z"
      },
      "message": "Merge #11529: Avoid slow transaction search with txindex enabled\n\n7a5f930 Avoid slow transaction search with txindex enabled (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This is an alternative to #11507 where a slow search is not attempted (in any case) if `txindex` is enabled.\n\nTree-SHA512: e680621781a9241c0513ddd79d23b0b42f3ccec8a63ed1c926b35c43321c81c39a1028770397dd5070501dcf644d897026a2bd68a161a4b435f19227c1bbca48",
      "tree": {
        "sha": "9328adac4daf0724a8b47ca7a104d55c0773bcdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9328adac4daf0724a8b47ca7a104d55c0773bcdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6OlJAAoJEB5K7WKYbNJdatgIAMx+i42O9mMttAyjTLQ5h2FM\nTirWTVRpRGhUWIolL3IQqBjjOy7FBKYzNPomuQbUsx1fizSV+RtPFHZo9WGDm8k2\nnRodQULtwx9SJuapFmS4Mo3uz38bE0mTDTM7N80Ucm7nz9l52GZQybjZAfI6Ef4z\nICB4rN0rDghT93wAiPLGi4glpj4W0mmT/umlxBXHSNsUpIhOoZXKCaSAX0JWZCAM\nNueUjfBgkOYf3aWWw5XInBxRuaZLcmi05F0z7OIdxll9zcBjOZlxWeuTmP/P9en8\nQVALkgUN+cf90GV2kS7+vKUWvAauQ/yEYy5FcPEaSwNCPlkYaX55gxRwHTiTim4=\n=kqEe\n-----END PGP SIGNATURE-----",
        "payload": "tree 9328adac4daf0724a8b47ca7a104d55c0773bcdb\nparent 99e93de6f8ab4fcaa244686bb047d184e74c3e27\nparent 7a5f9303a9ed8e9efa25f8264ed491644e451645\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508436284 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508436297 +0200\n\nMerge #11529: Avoid slow transaction search with txindex enabled\n\n7a5f930 Avoid slow transaction search with txindex enabled (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This is an alternative to #11507 where a slow search is not attempted (in any case) if `txindex` is enabled.\n\nTree-SHA512: e680621781a9241c0513ddd79d23b0b42f3ccec8a63ed1c926b35c43321c81c39a1028770397dd5070501dcf644d897026a2bd68a161a4b435f19227c1bbca48\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99e93de6f8ab4fcaa244686bb047d184e74c3e27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e93de6f8ab4fcaa244686bb047d184e74c3e27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99e93de6f8ab4fcaa244686bb047d184e74c3e27"
      },
      {
        "sha": "7a5f9303a9ed8e9efa25f8264ed491644e451645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5f9303a9ed8e9efa25f8264ed491644e451645",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5f9303a9ed8e9efa25f8264ed491644e451645"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d19521bd3c196f7edd5ce3c1a8ca2c5733d21ad4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff92fbf24739a022eb677daab03c87c5e6971094/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff92fbf24739a022eb677daab03c87c5e6971094/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ff92fbf24739a022eb677daab03c87c5e6971094",
        "patch": "@@ -939,6 +939,9 @@ bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus\n                 return error(\"%s: txid mismatch\", __func__);\n             return true;\n         }\n+\n+        // transaction not found in index, nothing more can be done\n+        return false;\n     }\n \n     if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it"
      }
    ]
  },
  {
    "sha": "fa81534d068cb5479684ed9fb073dc51532b91ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgxNTM0ZDA2OGNiNTQ3OTY4NGVkOWZiMDczZGM1MTUzMmI5MWNh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-19T20:19:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-19T20:13:49Z"
      },
      "message": "Add share/rpcuser to dist. source code archive",
      "tree": {
        "sha": "41c6dbc75865a66745e8290468a66f58a683a08e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41c6dbc75865a66745e8290468a66f58a683a08e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa81534d068cb5479684ed9fb073dc51532b91ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa81534d068cb5479684ed9fb073dc51532b91ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa81534d068cb5479684ed9fb073dc51532b91ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa81534d068cb5479684ed9fb073dc51532b91ca/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bbfaf9d34106d947e4233c8752b502b0ee67a50d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa81534d068cb5479684ed9fb073dc51532b91ca/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa81534d068cb5479684ed9fb073dc51532b91ca/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=fa81534d068cb5479684ed9fb073dc51532b91ca",
        "patch": "@@ -44,6 +44,9 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n \t       $(top_srcdir)/contrib/init \\\n \t       $(top_srcdir)/contrib/rpm\n+DIST_SHARE = \\\n+  $(top_srcdir)/share/genbuild.sh \\\n+  $(top_srcdir)/share/rpcuser\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py\n@@ -213,7 +216,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\"
      }
    ]
  },
  {
    "sha": "ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZThjZDdhN2RhOTE3NGFiMTUxMTcyZmMwY2U5N2I1MTY0NjM3Y2Yz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-06T18:11:43Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:33:45Z"
      },
      "message": "Don't process unrequested, low-work blocks\n\nA peer could try to waste our resources by sending us unrequested blocks with\nlow work, eg to fill up our disk.  Since\ne2652002b6011f793185d473f87f1730c625593b we no longer request blocks until we\nknow we're on a chain with more than nMinimumChainWork (our anti-DoS\nthreshold), but we would still process unrequested blocks that had more work\nthan our tip.  This commit fixes that behavior.",
      "tree": {
        "sha": "61191a31eb8fb0c9ede4b1825c9161f97816e47c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61191a31eb8fb0c9ede4b1825c9161f97816e47c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "866e0c9fba3293367ed2cf3fa6bfb16a71e79f34",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8cd7a7da9174ab151172fc0ce97b5164637cf3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8cd7a7da9174ab151172fc0ce97b5164637cf3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
        "patch": "@@ -3135,6 +3135,12 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n         if (fTooFarAhead) return true;      // Block height is too high\n+\n+        // Protect against DoS attacks from low-work chains.\n+        // If our tip is behind, a peer could try to send us\n+        // low-work blocks on a fake chain that we would never\n+        // request; don't process these.\n+        if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n     if (fNewBlock) *fNewBlock = true;\n "
      }
    ]
  },
  {
    "sha": "08fd822771bf8dae1c21698811f57aa691b2f25d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGZkODIyNzcxYmY4ZGFlMWMyMTY5ODgxMWY1N2FhNjkxYjJmMjVk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-06T18:32:07Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:38:22Z"
      },
      "message": "qa: add test for minchainwork use in acceptblock",
      "tree": {
        "sha": "91cbff957d0df76b7f8c6909bb2289f4e13c23c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91cbff957d0df76b7f8c6909bb2289f4e13c23c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08fd822771bf8dae1c21698811f57aa691b2f25d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fd822771bf8dae1c21698811f57aa691b2f25d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08fd822771bf8dae1c21698811f57aa691b2f25d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fd822771bf8dae1c21698811f57aa691b2f25d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8cd7a7da9174ab151172fc0ce97b5164637cf3"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 33,
      "deletions": 11
    },
    "files": [
      {
        "sha": "27ae0c27e19656733ebfee3edc3a0ad9399f3a0b",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 33,
        "deletions": 11,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fd822771bf8dae1c21698811f57aa691b2f25d/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fd822771bf8dae1c21698811f57aa691b2f25d/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=08fd822771bf8dae1c21698811f57aa691b2f25d",
        "patch": "@@ -8,17 +8,22 @@\n versus non-whitelisted peers, this tests the behavior of both (effectively two\n separate tests running in parallel).\n \n-Setup: two nodes, node0 and node1, not connected to each other.  Node0 does not\n+Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.\n+this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n+low-work unrequested blocks.\n \n-We have one NodeConn connection to each, test_node and white_node respectively.\n+We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n+respectively.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance.\n+   The tip should advance for node0 and node1, but node2 should skip processing\n+   due to nMinimumChainWork.\n+\n+Node2 is unused in tests 3-7:\n \n 3. Mine a block that forks the previous block, and deliver to each node from\n    corresponding peer.\n@@ -46,6 +51,10 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n+\n+8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n+work on its chain).\n+\n \"\"\"\n \n from test_framework.mininode import *\n@@ -62,52 +71,60 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n+        # Node2 will be used for non-whitelisted peers to test the interaction\n+        # with nMinimumChainWork.\n         self.setup_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n         white_node = NodeConnCB()  # connects to node1 (whitelisted)\n+        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n         test_node.add_connection(connections[0])\n         white_node.add_connection(connections[1])\n+        min_work_node.add_connection(connections[2])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n         white_node.wait_for_verack()\n+        min_work_node.wait_for_verack()\n \n-        # 1. Have both nodes mine a block (leave IBD)\n+        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted.\n+        # This should be accepted by nodes 1/2\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(2):\n+        for i in range(3):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n+        min_work_node.send_message(msg_block(blocks_h2[2]))\n \n-        for x in [test_node, white_node]:\n+        for x in [test_node, white_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        self.log.info(\"First height 2 block accepted by both nodes\")\n+        assert_equal(self.nodes[2].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n@@ -220,6 +237,11 @@ def run_test(self):\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n+        # 8. Connect node2 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 2)\n+        sync_blocks([self.nodes[0], self.nodes[2]])\n+        self.log.info(\"Successfully synced nodes 2 and 0\")\n+\n         [ c.disconnect_node() for c in connections ]\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "01b52cedd42f50a93b40981c91af7c12de6e45ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWI1MmNlZGQ0MmY1MGE5M2I0MDk4MWM5MWFmN2MxMmRlNmU0NWNl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:52:30Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:52:30Z"
      },
      "message": "Add comment explaining forced processing of compact blocks",
      "tree": {
        "sha": "e3b85bf9b84a2f3584a34bfe0c420983255535d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3b85bf9b84a2f3584a34bfe0c420983255535d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01b52cedd42f50a93b40981c91af7c12de6e45ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08fd822771bf8dae1c21698811f57aa691b2f25d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fd822771bf8dae1c21698811f57aa691b2f25d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08fd822771bf8dae1c21698811f57aa691b2f25d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "61f98ca747cba49fca796a80bb47f62bf6b4aec0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01b52cedd42f50a93b40981c91af7c12de6e45ce/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01b52cedd42f50a93b40981c91af7c12de6e45ce/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=01b52cedd42f50a93b40981c91af7c12de6e45ce",
        "patch": "@@ -2146,7 +2146,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // Setting fForceProcessing to true means that we bypass some of\n+            // our anti-DoS protections in AcceptBlock, which filters\n+            // unrequested blocks that might be trying to waste our resources\n+            // (eg disk space). Because we only try to reconstruct blocks when\n+            // we're close to caught up (via the CanDirectFetch() requirement\n+            // above, combined with the behavior of not requesting blocks until\n+            // we have a chain with at least nMinimumChainWork), and we ignore\n+            // compact blocks with less work than our tip, it is safe to treat\n+            // reconstructed compact blocks as having been requested.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2226,7 +2235,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n+            // disk-space attacks), but this should be safe due to the\n+            // protections in the compact block handler -- see related comment\n+            // in compact block optimistic reconstruction handling.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {"
      }
    ]
  },
  {
    "sha": "c96b2e4f096780c75e3fa8acba496d71322583a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTZiMmU0ZjA5Njc4MGM3NWUzZmE4YWNiYTQ5NmQ3MTMyMjU4M2Ex",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T20:10:08Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T20:10:12Z"
      },
      "message": "qa: Fix replace-by-fee race condition failures",
      "tree": {
        "sha": "344ef5b972f5caba3a5568668ed88d9d6e1c0715",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/344ef5b972f5caba3a5568668ed88d9d6e1c0715"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c96b2e4f096780c75e3fa8acba496d71322583a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c96b2e4f096780c75e3fa8acba496d71322583a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c96b2e4f096780c75e3fa8acba496d71322583a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c96b2e4f096780c75e3fa8acba496d71322583a1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "17667b0bcc2918d8ec7a289a9be1d302d9bec8d3",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c96b2e4f096780c75e3fa8acba496d71322583a1/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c96b2e4f096780c75e3fa8acba496d71322583a1/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=c96b2e4f096780c75e3fa8acba496d71322583a1",
        "patch": "@@ -72,6 +72,10 @@ def set_test_params(self):\n                            [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n+        # Leave IBD and ensure nodes are synced\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n         make_utxo(self.nodes[0], 1*COIN)\n \n         self.log.info(\"Running test simple doublespend...\")\n@@ -110,13 +114,18 @@ def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n+        # make_utxo may have generated a bunch of blocks, so we need to sync\n+        # before we can spend the coins generated, or else the resulting\n+        # transactions might not be accepted by our peers.\n+        self.sync_all()\n+\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n-        self.sync_all([self.nodes])\n+        self.sync_all()\n \n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()"
      }
    ]
  },
  {
    "sha": "d23be309c2c45f655d5f5405e031833fb4b6bbb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjNiZTMwOWMyYzQ1ZjY1NWQ1ZjU0MDVlMDMxODMzZmI0YjZiYmI0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-20T20:35:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-20T20:35:16Z"
      },
      "message": "[verify-commits] Allow revoked keys to expire",
      "tree": {
        "sha": "80f7e239f354fd8f7d66095a8b87b52e7cc94f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80f7e239f354fd8f7d66095a8b87b52e7cc94f41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d23be309c2c45f655d5f5405e031833fb4b6bbb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23be309c2c45f655d5f5405e031833fb4b6bbb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d23be309c2c45f655d5f5405e031833fb4b6bbb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23be309c2c45f655d5f5405e031833fb4b6bbb4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "abd8f5fd9fe371f9df0a1399e0d7ec20fdac4681",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23be309c2c45f655d5f5405e031833fb4b6bbb4/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23be309c2c45f655d5f5405e031833fb4b6bbb4/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=d23be309c2c45f655d5f5405e031833fb4b6bbb4",
        "patch": "@@ -46,6 +46,11 @@ for LINE in $(echo \"$GPG_RES\"); do\n \t\tREVSIG=true\n \t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n \t\t;;\n+\t\"[GNUPG:] EXPKEYSIG \"*)\n+\t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n+\t\tREVSIG=true\n+\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n+\t\t;;\n \tesac\n done\n if ! $VALID; then"
      }
    ]
  },
  {
    "sha": "f8c66972ddc2a70f5015497436870e2af6833ecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGM2Njk3MmRkYzJhNzBmNTAxNTQ5NzQzNjg3MGUyYWY2ODMzZWNj",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-08-09T01:56:18Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-21T04:05:36Z"
      },
      "message": "Fix automake warnings when running autogen.sh",
      "tree": {
        "sha": "152c13788d238e6710081c75d758d1f0860d34d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/152c13788d238e6710081c75d758d1f0860d34d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c66972ddc2a70f5015497436870e2af6833ecc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnqx5kACgkQLuufXMCV\nJsEncBAAmv4LxP7DYyJkpPxWXT4g/JmFRxjyP/FlhK88gC2vOvWNhcVrEXX9IPh7\nL1KhsReP0kYRdlLPnWs9bqQVkFEXRMAZ151xyQVGTFZY1mq7KWDYRmpc4Nmt2zO1\nn/l5vrbrK7tvNPRx1hWLHmpggsS+EFutw8LKguuU3/RmiVg/WhK3XKhz04Gs/SHj\nZ9xhe6g8xep81Qdj88MkYARV9JJQUxMcjBNq9XwQlVY4NH7usvy8vNrGJgzabXk1\nKv2iUCYU9bOduFjWKyv1IBCis2p2ezykpuEA649sBkAOzlRNzFEHE84P1cJDhzNp\nZZO+ND0aesUFF4jcuZtG7KR9THUEKPLlQKz1Bs8K8aJOtfjh5RrAb0jsHJy6WO6r\nH3wd8yHqpH7S2YP65psYCQIxw7HfLecN7JYv8fykTL5Lu0orY6VYF41I0rfA7mPS\nB1YHDHb0IxVQrNuLUja/khR0GdQ+FjBR+5LYQIm6iK6xld4F4sL0vyhrra3LyqTU\nGXHX4R9quU2NRlEnIJENNGGVZBbY1OfWlbSattzOKNZ6kr+LpTrm9rgkweKayQ/9\nYmnk/ZjDJMF4p9OB7AP9ofJW+AayUUy60BqoP5XON7nrGneXRCYh2WwJsM/lZ+kj\neh4fYaATa8S4bKM8VU875RNm2RGa7UX1EU8mpJhHOrS4KbpsLVs=\n=s7FP\n-----END PGP SIGNATURE-----",
        "payload": "tree 152c13788d238e6710081c75d758d1f0860d34d8\nparent ff92fbf24739a022eb677daab03c87c5e6971094\nauthor Evan Klitzke <evan@eklitzke.org> 1502243778 -0700\ncommitter fanquake <fanquake@gmail.com> 1508558736 +0800\n\nFix automake warnings when running autogen.sh\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c66972ddc2a70f5015497436870e2af6833ecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c66972ddc2a70f5015497436870e2af6833ecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c66972ddc2a70f5015497436870e2af6833ecc/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8b3973d0ead62af73a786a83bdacaf4c0c8bec91",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c66972ddc2a70f5015497436870e2af6833ecc/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c66972ddc2a70f5015497436870e2af6833ecc/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=f8c66972ddc2a70f5015497436870e2af6833ecc",
        "patch": "@@ -9,7 +9,6 @@ SUBDIRS += doc/man\n endif\n .PHONY: deploy FORCE\n \n-GZIP_ENV=\"-9n\"\n export PYTHONPATH\n \n if BUILD_BITCOIN_LIBS"
      },
      {
        "sha": "3e43076878a98d54132e2b68f8f586b8c0f09349",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c66972ddc2a70f5015497436870e2af6833ecc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c66972ddc2a70f5015497436870e2af6833ecc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f8c66972ddc2a70f5015497436870e2af6833ecc",
        "patch": "@@ -500,10 +500,6 @@ clean-local:\n \t## FIXME: How to get the appropriate modulename_CPPFLAGS in here?\n \t$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@\n \n-.mm.o:\n-\t$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n-\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) -c -o $@ $<\n-\n check-symbols: $(bin_PROGRAMS)\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\""
      }
    ]
  },
  {
    "sha": "cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzVjMzlkZGNhNGNmNWUwMWM0NWZkZjY5NDYyZjUwYWM5ODRlMjY0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-21T04:13:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-21T04:13:25Z"
      },
      "message": "[Build] Add AM_OBJCXXFLAGS and QT_PIE_FLAGS to OBJCXXFLAGS to future-proof darwin targets",
      "tree": {
        "sha": "39e4f2630586f86e67adfc00c1c911b345c8686b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39e4f2630586f86e67adfc00c1c911b345c8686b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnqyWUACgkQLuufXMCV\nJsFnUQ/+KEvCfmFSyEn6iuz/l+uzpeAUfq89CosoZZrtzdbuGBIjpBJ3KETtGZwq\nNanRmgVQ4M1Ooto/UvP9UTFBhYvOHKz9CHHw3NU0ote4sKFTC7LftQ6nPim2L1U6\nyBZvffzXIpjEMSkl5/XkA55sYIAT++AkI1VB25yu6bJZFXT7EaS2NYUHal5pkI07\n+k+fPfjiLiOtWIWzCQfdUX2F9wq3mCuwCNX+CLKh4l0fkdsfM8eULVxO/SdYT185\noMczeNoq+zbS2gFr7rmtDfU0HbscTrObxHgAKQx6WXP3q9u9Md+TmNDEMfLP3f56\n6WmvYrJf/gusTwRzFflQ+14jbH7aBpaQluRw0ShHbcqZEuxRtmm1EC1WiSoq+LdM\nQCP/r/FfyMdfE3LxtMCXWHvLVO3n0OM+U18DpbSNHcv6j5MsmD3fU177qpZG/OpC\nbQaplp0TWdhSvLTF/Ev2BQVYKNA5R8J041GG8yPRlSDFGSArFdkuNBzxBJTp7cTS\nuMPD4og7mq2EO1DfUgtFkvcexsr8xvJtFwZQp+/ZIRvJcypHUfYVaeMemJZJakVo\nwe8c2FgbXjWyWY/JyqVDR0rZw2jwFjGRA1G1RmOAweqJFy62zHVkuekpBNIg/wcs\npPyiF+sMjxBOjZubY5Ts1pAs7lLzRZySKrIOfemB5rfwkHoSdt4=\n=S20A\n-----END PGP SIGNATURE-----",
        "payload": "tree 39e4f2630586f86e67adfc00c1c911b345c8686b\nparent f8c66972ddc2a70f5015497436870e2af6833ecc\nauthor fanquake <fanquake@gmail.com> 1508559205 +0800\ncommitter fanquake <fanquake@gmail.com> 1508559205 +0800\n\n[Build] Add AM_OBJCXXFLAGS and QT_PIE_FLAGS to OBJCXXFLAGS to future-proof darwin targets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc5c39ddca4cf5e01c45fdf69462f50ac984e264/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8c66972ddc2a70f5015497436870e2af6833ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c66972ddc2a70f5015497436870e2af6833ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c66972ddc2a70f5015497436870e2af6833ecc"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0767ee1302be19baabef2009c57955926323282b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc5c39ddca4cf5e01c45fdf69462f50ac984e264/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc5c39ddca4cf5e01c45fdf69462f50ac984e264/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
        "patch": "@@ -368,6 +368,7 @@ BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n+qt_libbitcoinqt_a_OBJCXXFLAGS = $(AM_OBJCXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)"
      }
    ]
  },
  {
    "sha": "e668a6e61d4fc4e4453f80f11eacdf808e786b59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjY4YTZlNjFkNGZjNGU0NDUzZjgwZjExZWFjZGY4MDhlNzg2YjU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-21T07:07:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-21T07:09:41Z"
      },
      "message": "Merge #11539: [verify-commits] Allow revoked keys to expire\n\nd23be30 [verify-commits] Allow revoked keys to expire (Matt Corallo)\n\nPull request description:\n\n  This should fix verify-commits on master.\n\nTree-SHA512: 9bfca41fdfcdb11f6d07fcbc80a7b2de37706051e963292e0fbb4c608f146c87b65ab1e8395792197b4a7099e89fa045f278a60276672f6540b68d5e15b5a4a7",
      "tree": {
        "sha": "80f7e239f354fd8f7d66095a8b87b52e7cc94f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80f7e239f354fd8f7d66095a8b87b52e7cc94f41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e668a6e61d4fc4e4453f80f11eacdf808e786b59",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6vK1AAoJEB5K7WKYbNJd1WUIAJh1P9AA97PkfVOtKLeblRlj\niswAM44Ur2LAco13+ZZJTDy6FlrHoDtPnug1IiIrw1WV8M8qwq0VJeV1tkUpYxr2\nlas7FILji8TvmcdnGH199+8p4zCl2K7loH3/cP6+J9EpYDHRo8DQ0Gf7nMHcu3Df\ncPaFh2VhyFRicefCa4XUNTFAGQZGR+o1qx0/hO4yCJmKj0iR/VqG7eBaJUzbe8uB\nyEEag7AIKwqeyd6rUOuLxib4vBWtJBgZgR8F1/Z1+8RWin/Bxg9jSv4tDGQaQfSC\nx9q3zgJjeH/NljnSjSktcifHd3df9G9YJ+L/ybYjWXSD9h6My7B2IxURPX7D+wA=\n=Fqwc\n-----END PGP SIGNATURE-----",
        "payload": "tree 80f7e239f354fd8f7d66095a8b87b52e7cc94f41\nparent ff92fbf24739a022eb677daab03c87c5e6971094\nparent d23be309c2c45f655d5f5405e031833fb4b6bbb4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508569664 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508569781 +0200\n\nMerge #11539: [verify-commits] Allow revoked keys to expire\n\nd23be30 [verify-commits] Allow revoked keys to expire (Matt Corallo)\n\nPull request description:\n\n  This should fix verify-commits on master.\n\nTree-SHA512: 9bfca41fdfcdb11f6d07fcbc80a7b2de37706051e963292e0fbb4c608f146c87b65ab1e8395792197b4a7099e89fa045f278a60276672f6540b68d5e15b5a4a7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e668a6e61d4fc4e4453f80f11eacdf808e786b59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e668a6e61d4fc4e4453f80f11eacdf808e786b59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e668a6e61d4fc4e4453f80f11eacdf808e786b59/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      },
      {
        "sha": "d23be309c2c45f655d5f5405e031833fb4b6bbb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23be309c2c45f655d5f5405e031833fb4b6bbb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d23be309c2c45f655d5f5405e031833fb4b6bbb4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "abd8f5fd9fe371f9df0a1399e0d7ec20fdac4681",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e668a6e61d4fc4e4453f80f11eacdf808e786b59/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e668a6e61d4fc4e4453f80f11eacdf808e786b59/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=e668a6e61d4fc4e4453f80f11eacdf808e786b59",
        "patch": "@@ -46,6 +46,11 @@ for LINE in $(echo \"$GPG_RES\"); do\n \t\tREVSIG=true\n \t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n \t\t;;\n+\t\"[GNUPG:] EXPKEYSIG \"*)\n+\t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n+\t\tREVSIG=true\n+\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n+\t\t;;\n \tesac\n done\n if ! $VALID; then"
      }
    ]
  },
  {
    "sha": "c0e51394139822137ca090f23e60cfe0cad4d123",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGU1MTM5NDEzOTgyMjEzN2NhMDkwZjIzZTYwY2ZlMGNhZDRkMTIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-21T09:13:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-21T09:14:31Z"
      },
      "message": "Merge #11458: Don't process unrequested, low-work blocks\n\n01b52ce Add comment explaining forced processing of compact blocks (Suhas Daftuar)\n08fd822 qa: add test for minchainwork use in acceptblock (Suhas Daftuar)\nce8cd7a Don't process unrequested, low-work blocks (Suhas Daftuar)\n\nPull request description:\n\n  A peer could try to waste our resources by sending us unrequested blocks with\n  low work (eg to fill up our disk).  Since e265200 we no longer request blocks until we\n  know we're on a chain with more than nMinimumChainWork (our anti-DoS\n  threshold), but we would still process unrequested blocks that had more work\n  than our tip (which generally has low-work during IBD), even though we may not\n  yet have found a headers chain with sufficient work.\n\n  Fix this and add a test.\n\nTree-SHA512: 1a4fb0bbd78054b84683f995c8c3194dd44fa914dc351ae4379c7c1a6f83224f609f8b9c2d9dde28741426c6af008ffffea836d21aa31a5ebaa00f8e0f81229e",
      "tree": {
        "sha": "7554494f0f074eefb4dcd92aeefb6d3c6e5010a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7554494f0f074eefb4dcd92aeefb6d3c6e5010a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0e51394139822137ca090f23e60cfe0cad4d123",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6w/3AAoJEB5K7WKYbNJdHgkH/2BUuIGPmKVdH/4ZYt5bWFy0\n3qvFdfp/304FgHkVKB6VQHFA2Hu0mOM+zjvHg5CmA8OhaeUy/BoSADV0D3UOaKER\nizSzBEmXi69EFI1MGU8Ztk3kV8jxu6OOlr+F/YZRd/MXkJtueP6YK4ZxWD16rAPJ\nEYIUOVMkVEepsynhvuT7zRWSO+I/oEjck1dmlJUFpn7ERLPzHrJtZ2wX9joRxFCr\nJpDyqDmJ5p6XK65fJ215emtRFEAOuHmy3ywJ8XVfUxEMwFd2ZD2bSt4n8DtcLRzU\nytYXuyTxYrSr4MQXcR8NmOcdOjFbYrgEE+OrZ1nCfdMfR7sAchdDSf8ldiKBFb4=\n=43n+\n-----END PGP SIGNATURE-----",
        "payload": "tree 7554494f0f074eefb4dcd92aeefb6d3c6e5010a8\nparent e668a6e61d4fc4e4453f80f11eacdf808e786b59\nparent 01b52cedd42f50a93b40981c91af7c12de6e45ce\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508577226 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508577271 +0200\n\nMerge #11458: Don't process unrequested, low-work blocks\n\n01b52ce Add comment explaining forced processing of compact blocks (Suhas Daftuar)\n08fd822 qa: add test for minchainwork use in acceptblock (Suhas Daftuar)\nce8cd7a Don't process unrequested, low-work blocks (Suhas Daftuar)\n\nPull request description:\n\n  A peer could try to waste our resources by sending us unrequested blocks with\n  low work (eg to fill up our disk).  Since e265200 we no longer request blocks until we\n  know we're on a chain with more than nMinimumChainWork (our anti-DoS\n  threshold), but we would still process unrequested blocks that had more work\n  than our tip (which generally has low-work during IBD), even though we may not\n  yet have found a headers chain with sufficient work.\n\n  Fix this and add a test.\n\nTree-SHA512: 1a4fb0bbd78054b84683f995c8c3194dd44fa914dc351ae4379c7c1a6f83224f609f8b9c2d9dde28741426c6af008ffffea836d21aa31a5ebaa00f8e0f81229e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e51394139822137ca090f23e60cfe0cad4d123",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e51394139822137ca090f23e60cfe0cad4d123",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e51394139822137ca090f23e60cfe0cad4d123/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e668a6e61d4fc4e4453f80f11eacdf808e786b59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e668a6e61d4fc4e4453f80f11eacdf808e786b59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e668a6e61d4fc4e4453f80f11eacdf808e786b59"
      },
      {
        "sha": "01b52cedd42f50a93b40981c91af7c12de6e45ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01b52cedd42f50a93b40981c91af7c12de6e45ce"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 54,
      "deletions": 13
    },
    "files": [
      {
        "sha": "61f98ca747cba49fca796a80bb47f62bf6b4aec0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e51394139822137ca090f23e60cfe0cad4d123/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e51394139822137ca090f23e60cfe0cad4d123/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c0e51394139822137ca090f23e60cfe0cad4d123",
        "patch": "@@ -2146,7 +2146,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // Setting fForceProcessing to true means that we bypass some of\n+            // our anti-DoS protections in AcceptBlock, which filters\n+            // unrequested blocks that might be trying to waste our resources\n+            // (eg disk space). Because we only try to reconstruct blocks when\n+            // we're close to caught up (via the CanDirectFetch() requirement\n+            // above, combined with the behavior of not requesting blocks until\n+            // we have a chain with at least nMinimumChainWork), and we ignore\n+            // compact blocks with less work than our tip, it is safe to treat\n+            // reconstructed compact blocks as having been requested.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2226,7 +2235,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n+            // disk-space attacks), but this should be safe due to the\n+            // protections in the compact block handler -- see related comment\n+            // in compact block optimistic reconstruction handling.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {"
      },
      {
        "sha": "866e0c9fba3293367ed2cf3fa6bfb16a71e79f34",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e51394139822137ca090f23e60cfe0cad4d123/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e51394139822137ca090f23e60cfe0cad4d123/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c0e51394139822137ca090f23e60cfe0cad4d123",
        "patch": "@@ -3135,6 +3135,12 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n         if (fTooFarAhead) return true;      // Block height is too high\n+\n+        // Protect against DoS attacks from low-work chains.\n+        // If our tip is behind, a peer could try to send us\n+        // low-work blocks on a fake chain that we would never\n+        // request; don't process these.\n+        if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n     if (fNewBlock) *fNewBlock = true;\n "
      },
      {
        "sha": "27ae0c27e19656733ebfee3edc3a0ad9399f3a0b",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 33,
        "deletions": 11,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e51394139822137ca090f23e60cfe0cad4d123/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e51394139822137ca090f23e60cfe0cad4d123/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=c0e51394139822137ca090f23e60cfe0cad4d123",
        "patch": "@@ -8,17 +8,22 @@\n versus non-whitelisted peers, this tests the behavior of both (effectively two\n separate tests running in parallel).\n \n-Setup: two nodes, node0 and node1, not connected to each other.  Node0 does not\n+Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.\n+this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n+low-work unrequested blocks.\n \n-We have one NodeConn connection to each, test_node and white_node respectively.\n+We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n+respectively.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance.\n+   The tip should advance for node0 and node1, but node2 should skip processing\n+   due to nMinimumChainWork.\n+\n+Node2 is unused in tests 3-7:\n \n 3. Mine a block that forks the previous block, and deliver to each node from\n    corresponding peer.\n@@ -46,6 +51,10 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n+\n+8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n+work on its chain).\n+\n \"\"\"\n \n from test_framework.mininode import *\n@@ -62,52 +71,60 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n+        # Node2 will be used for non-whitelisted peers to test the interaction\n+        # with nMinimumChainWork.\n         self.setup_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n         white_node = NodeConnCB()  # connects to node1 (whitelisted)\n+        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n         test_node.add_connection(connections[0])\n         white_node.add_connection(connections[1])\n+        min_work_node.add_connection(connections[2])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n         white_node.wait_for_verack()\n+        min_work_node.wait_for_verack()\n \n-        # 1. Have both nodes mine a block (leave IBD)\n+        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted.\n+        # This should be accepted by nodes 1/2\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(2):\n+        for i in range(3):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n+        min_work_node.send_message(msg_block(blocks_h2[2]))\n \n-        for x in [test_node, white_node]:\n+        for x in [test_node, white_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        self.log.info(\"First height 2 block accepted by both nodes\")\n+        assert_equal(self.nodes[2].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n@@ -220,6 +237,11 @@ def run_test(self):\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n+        # 8. Connect node2 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 2)\n+        sync_blocks([self.nodes[0], self.nodes[2]])\n+        self.log.info(\"Successfully synced nodes 2 and 0\")\n+\n         [ c.disconnect_node() for c in connections ]\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "6157e8ce3937af3f46d3e7dd922d19d6dc272145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTU3ZThjZTM5MzdhZjNmNDZkM2U3ZGQ5MjJkMTlkNmRjMjcyMTQ1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-23T01:33:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-23T01:33:11Z"
      },
      "message": "Merge #11499: [Qt] Add upload and download info to the peerlist (debug menu)\n\n6b1891e2c Add Sent and Received information to the debug menu peer list (Aaron Golliver)\n8e4aa35ff move human-readable byte formatting to guiutil (Aaron Golliver)\n\nPull request description:\n\n  Makes the peer list display how much you've uploaded/downloaded from each peer.\n\n  Here's a screenshot ~~[outdated](https://i.imgur.com/MhPbItp.png)~~, [current](https://i.imgur.com/K1htrVv.png) of how it looks. You can now sort to see who are the peers you've uploaded the most too.\n\n  I also moved `RPCConsole::FormatBytes` to `guiutil::formatBytes` so I could use it in the peerlist\n\nTree-SHA512: 8845ef406e4cbe7f981879a78c063542ce90f50f45c8fa3514ba3e6e1164b4c70bb2093c4e1cac268aef0328b7b63545bc1dfa435c227f28fdb4cb0a596800f5",
      "tree": {
        "sha": "64584e0dd45f286a8ee0a7c68801f47c9d304304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64584e0dd45f286a8ee0a7c68801f47c9d304304"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6157e8ce3937af3f46d3e7dd922d19d6dc272145",
      "comment_count": 2,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlntRtcACgkQHrd2uwPH\nki2hVxAAmES5FSd2mstQxYQy7oo14CKOEAPSv4XQHCoXQyGxhIaX4fd6+ApxLCij\nrPjDqZbzsKvd28Qfz0q0SgIwUmgBwv9+juctyhxL1tT/F4snn4yhtl9IL5Sf0Lqm\niIFYR/oSAH7Ehk5l4pIfo9BqyST05AVW+7LUtHbW3AmObvBsPlsnJK9PRmcZ9dLO\nNcqi/aExwEM8cp3PrTgZqDGt6t95PmxSqCGYWpfyYAn6Q7sbdW2N93J9n1tE+a1d\n8dvNQgEGbQwyrWHi4LXdCjqpOV4kiUhAPYe5dBibvQnWlkZqGlivqAz/vW5PCYLI\nOxy/h55ZRFQHv6wo0PXhgEJKKZ+veJs98PpnQ8jvaNeaEvs2mK6H5FCqo0yVdkMI\ns4XW4vIs7QEUhI6Z6gRV4a029t7VojacrI1TaptjNlS1zW2dBbtPRBK3KpKrrKuj\n8/6zlatnvyCjLh6ETm9rb/5Pte/IU93oIVKVGRQ3ai9iUq+hUKCDE6bS6qE/CdDC\nbTYASCHQvQh11IGfLDdlA0IQymPj1poY5xkVtK7QY+hU+C6UHR8xDa8AB6+JPGyB\njsahYy8mZA086O6pApbhxm0ENWOePNkpCN4AqBYRgi+8PdCA4j0nX65Kxa5IxbFU\nk79MzSoGDTma1FkciTHKEUwhVE2moF7yAg6x0W64CajjOawItZE=\n=E1vY\n-----END PGP SIGNATURE-----",
        "payload": "tree 64584e0dd45f286a8ee0a7c68801f47c9d304304\nparent c0e51394139822137ca090f23e60cfe0cad4d123\nparent 6b1891e2c04410ebaa1d6399aab56b6c7495d0ff\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1508722381 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1508722391 -1000\n\nMerge #11499: [Qt] Add upload and download info to the peerlist (debug menu)\n\n6b1891e2c Add Sent and Received information to the debug menu peer list (Aaron Golliver)\n8e4aa35ff move human-readable byte formatting to guiutil (Aaron Golliver)\n\nPull request description:\n\n  Makes the peer list display how much you've uploaded/downloaded from each peer.\n\n  Here's a screenshot ~~[outdated](https://i.imgur.com/MhPbItp.png)~~, [current](https://i.imgur.com/K1htrVv.png) of how it looks. You can now sort to see who are the peers you've uploaded the most too.\n\n  I also moved `RPCConsole::FormatBytes` to `guiutil::formatBytes` so I could use it in the peerlist\n\nTree-SHA512: 8845ef406e4cbe7f981879a78c063542ce90f50f45c8fa3514ba3e6e1164b4c70bb2093c4e1cac268aef0328b7b63545bc1dfa435c227f28fdb4cb0a596800f5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6157e8ce3937af3f46d3e7dd922d19d6dc272145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6157e8ce3937af3f46d3e7dd922d19d6dc272145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6157e8ce3937af3f46d3e7dd922d19d6dc272145/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0e51394139822137ca090f23e60cfe0cad4d123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e51394139822137ca090f23e60cfe0cad4d123",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e51394139822137ca090f23e60cfe0cad4d123"
      },
      {
        "sha": "6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b1891e2c04410ebaa1d6399aab56b6c7495d0ff"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 39,
      "deletions": 22
    },
    "files": [
      {
        "sha": "4bd63f46492982bc2cf1cf492558e71d01a310fb",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "patch": "@@ -984,6 +984,18 @@ QString formatNiceTimeOffset(qint64 secs)\n     return timeBehindText;\n }\n \n+QString formatBytes(uint64_t bytes)\n+{\n+    if(bytes < 1024)\n+        return QString(QObject::tr(\"%1 B\")).arg(bytes);\n+    if(bytes < 1024 * 1024)\n+        return QString(QObject::tr(\"%1 KB\")).arg(bytes / 1024);\n+    if(bytes < 1024 * 1024 * 1024)\n+        return QString(QObject::tr(\"%1 MB\")).arg(bytes / 1024 / 1024);\n+\n+    return QString(QObject::tr(\"%1 GB\")).arg(bytes / 1024 / 1024 / 1024);\n+}\n+\n void ClickableLabel::mouseReleaseEvent(QMouseEvent *event)\n {\n     Q_EMIT clicked(event->pos());"
      },
      {
        "sha": "7622816f7fcc8ffcfdfefd9eab004a98b69d36cc",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "patch": "@@ -199,6 +199,8 @@ namespace GUIUtil\n \n     QString formatNiceTimeOffset(qint64 secs);\n \n+    QString formatBytes(uint64_t bytes);\n+\n     class ClickableLabel : public QLabel\n     {\n         Q_OBJECT"
      },
      {
        "sha": "8b2a7e7047c26cb30429a53af762e754922d0078",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "patch": "@@ -33,6 +33,10 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n         return pLeft->cleanSubVer.compare(pRight->cleanSubVer) < 0;\n     case PeerTableModel::Ping:\n         return pLeft->dMinPing < pRight->dMinPing;\n+    case PeerTableModel::Sent:\n+        return pLeft->nSendBytes < pRight->nSendBytes;\n+    case PeerTableModel::Received:\n+        return pLeft->nRecvBytes < pRight->nRecvBytes;\n     }\n \n     return false;\n@@ -114,7 +118,7 @@ PeerTableModel::PeerTableModel(ClientModel *parent) :\n     clientModel(parent),\n     timer(0)\n {\n-    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping\");\n+    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"Ping\") << tr(\"Sent\") << tr(\"Received\") << tr(\"User Agent\");\n     priv.reset(new PeerTablePriv());\n     // default to unsorted\n     priv->sortColumn = -1;\n@@ -173,10 +177,20 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n             return QString::fromStdString(rec->nodeStats.cleanSubVer);\n         case Ping:\n             return GUIUtil::formatPingTime(rec->nodeStats.dMinPing);\n+        case Sent:\n+            return GUIUtil::formatBytes(rec->nodeStats.nSendBytes);\n+        case Received:\n+            return GUIUtil::formatBytes(rec->nodeStats.nRecvBytes);\n         }\n     } else if (role == Qt::TextAlignmentRole) {\n-        if (index.column() == Ping)\n-            return (QVariant)(Qt::AlignRight | Qt::AlignVCenter);\n+        switch (index.column()) {\n+            case Ping:\n+            case Sent:\n+            case Received:\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            default:\n+                return QVariant();\n+        }\n     }\n \n     return QVariant();"
      },
      {
        "sha": "ec91d07127a07c0729108a7171432dc3faa84504",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "patch": "@@ -55,8 +55,10 @@ class PeerTableModel : public QAbstractTableModel\n     enum ColumnIndex {\n         NetNodeId = 0,\n         Address = 1,\n-        Subversion = 2,\n-        Ping = 3\n+        Ping = 2,\n+        Sent = 3,\n+        Received = 4,\n+        Subversion = 5\n     };\n \n     /** @name Methods overridden from QAbstractTableModel"
      },
      {
        "sha": "068c40e1e6fd1a44f3e1a2217e1251a4eaf85a12",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "patch": "@@ -935,18 +935,6 @@ void RPCConsole::on_sldGraphRange_valueChanged(int value)\n     setTrafficGraphRange(mins);\n }\n \n-QString RPCConsole::FormatBytes(quint64 bytes)\n-{\n-    if(bytes < 1024)\n-        return QString(tr(\"%1 B\")).arg(bytes);\n-    if(bytes < 1024 * 1024)\n-        return QString(tr(\"%1 KB\")).arg(bytes / 1024);\n-    if(bytes < 1024 * 1024 * 1024)\n-        return QString(tr(\"%1 MB\")).arg(bytes / 1024 / 1024);\n-\n-    return QString(tr(\"%1 GB\")).arg(bytes / 1024 / 1024 / 1024);\n-}\n-\n void RPCConsole::setTrafficGraphRange(int mins)\n {\n     ui->trafficGraph->setGraphRangeMins(mins);\n@@ -955,8 +943,8 @@ void RPCConsole::setTrafficGraphRange(int mins)\n \n void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)\n {\n-    ui->lblBytesIn->setText(FormatBytes(totalBytesIn));\n-    ui->lblBytesOut->setText(FormatBytes(totalBytesOut));\n+    ui->lblBytesIn->setText(GUIUtil::formatBytes(totalBytesIn));\n+    ui->lblBytesOut->setText(GUIUtil::formatBytes(totalBytesOut));\n }\n \n void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelection &deselected)\n@@ -1050,8 +1038,8 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n     ui->peerServices->setText(GUIUtil::formatServicesStr(stats->nodeStats.nServices));\n     ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastSend) : tr(\"never\"));\n     ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n-    ui->peerBytesSent->setText(FormatBytes(stats->nodeStats.nSendBytes));\n-    ui->peerBytesRecv->setText(FormatBytes(stats->nodeStats.nRecvBytes));\n+    ui->peerBytesSent->setText(GUIUtil::formatBytes(stats->nodeStats.nSendBytes));\n+    ui->peerBytesRecv->setText(GUIUtil::formatBytes(stats->nodeStats.nRecvBytes));\n     ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));"
      },
      {
        "sha": "ad6e84a44ac58c2344746ef62ca578316fd6afdf",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6157e8ce3937af3f46d3e7dd922d19d6dc272145/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "patch": "@@ -123,7 +123,6 @@ public Q_SLOTS:\n     void cmdRequest(const QString &command);\n \n private:\n-    static QString FormatBytes(quint64 bytes);\n     void startExecutor();\n     void setTrafficGraphRange(int mins);\n     /** show detailed information on ui about selected node */"
      }
    ]
  },
  {
    "sha": "6d51eaefe924bfaf2b0f4928dd6020023733480f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDUxZWFlZmU5MjRiZmFmMmIwZjQ5MjhkZDYwMjAwMjM3MzM0ODBm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T20:24:10Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-23T12:55:21Z"
      },
      "message": "qa: Fix race condition in sendheaders.py",
      "tree": {
        "sha": "15ac76839a57e2f0c101206686cfae24055c9526",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ac76839a57e2f0c101206686cfae24055c9526"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d51eaefe924bfaf2b0f4928dd6020023733480f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d51eaefe924bfaf2b0f4928dd6020023733480f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d51eaefe924bfaf2b0f4928dd6020023733480f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d51eaefe924bfaf2b0f4928dd6020023733480f/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c96b2e4f096780c75e3fa8acba496d71322583a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c96b2e4f096780c75e3fa8acba496d71322583a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c96b2e4f096780c75e3fa8acba496d71322583a1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "815e9648481868da67d518bdcdba0b3e1d9a86cc",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d51eaefe924bfaf2b0f4928dd6020023733480f/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d51eaefe924bfaf2b0f4928dd6020023733480f/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=6d51eaefe924bfaf2b0f4928dd6020023733480f",
        "patch": "@@ -72,12 +72,14 @@ def set_test_params(self):\n                            [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n-        # Leave IBD and ensure nodes are synced\n+        # Leave IBD\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         make_utxo(self.nodes[0], 1*COIN)\n \n+        # Ensure nodes are synced\n+        self.sync_all()\n+\n         self.log.info(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n "
      },
      {
        "sha": "60d107b248b847cc6543f49de16a36e682a9a66c",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d51eaefe924bfaf2b0f4928dd6020023733480f/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d51eaefe924bfaf2b0f4928dd6020023733480f/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=6d51eaefe924bfaf2b0f4928dd6020023733480f",
        "patch": "@@ -225,6 +225,10 @@ def run_test(self):\n         inv_node.wait_for_verack()\n         test_node.wait_for_verack()\n \n+        # Ensure verack's have been processed by our peer\n+        inv_node.sync_with_ping()\n+        test_node.sync_with_ping()\n+\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # PART 1"
      }
    ]
  },
  {
    "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2VlNzM5OTBmMWNlMjk5MTZhZGZkOTlmOTNlYWUxY2NlYTFhNDNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-23T15:19:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-23T15:19:26Z"
      },
      "message": "Merge #11538: qa: Fix race condition failures in replace-by-fee.py, sendheaders.py\n\n6d51eaefe qa: Fix race condition in sendheaders.py (Suhas Daftuar)\nc96b2e4f0 qa: Fix replace-by-fee race condition failures (Suhas Daftuar)\n\nPull request description:\n\n  I think #11407 broke replace-by-fee by introducing a race condition.  I was observing frequent failures of replace-by-fee locally, always with a mempool sync failure (the sync call was added in #11407).\n\n  It appeared to me like there were two causes: sometimes the node would be in IBD and not request the transaction that was relayed; other times the blocks generated in make_utxo wouldn't have relayed quickly enough for the spend of the transaction to be accepted.  I believe I've fixed both potential errors.\n\n  ping @instagibbs\n\n  Edit: I found a race condition in the sendheaders.py test, where if the verack from the python node wasn't processed before the first block in the test was generated, then no block announcement would go out to that peer, breaking the test.  Fixed by adding a sync_with_ping after waiting for verack.\n\nTree-SHA512: 6ad160966e432c151c1ce6e88ae67e60e47123523bda3755cf7697a00e1a5ba38de8561751826e3d7cf0e492f8c2aec298e1b4de8424ebbaf497f099a1ef1d07",
      "tree": {
        "sha": "c1a796e914022c0e04f8b0341ff68a2ed630aea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1a796e914022c0e04f8b0341ff68a2ed630aea3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ7gh+AAoJENLqSFDnUosl6OYP/RxqtEHesll61vVAyT1yuZVt\nMiP0dz1cjAZc1gATNGxUEPTCP/3Lk29+UgtT42DVQXwpAdK6MV2iVwSqPbLcYYWr\ndnt5md9SZk6PVduAfmZ0T58lyrOnpaD0xoBEYvOr96lxaGuccmQIMbHWh4GqVeVj\nsfIqASX4zzMYaRe85kaiXLlFtz8G2EEfD7okfFa8SyeaZbCIkJd48Oho6SWwzbnl\njDys9LvL/4jM7roEZmmSlf0ZAaEbnlnx7Sw9MICqONo+sSisDIEMjpATUpvHZ/dN\nI2QLv1PgMY9OPdBr4z4v4FfmwX3HBtrHnoGkDAflSidLnjdZWmZZ3o52WTeOffRJ\nLlB/lCaF78CmAPuuy4lpO8BLadKAEMR9Erae7pBV0A8bEEBwf44ThIru2USDKdR4\ngWeoGLWn20vXNhO3nJcf0REkWQ0VQ3kQ7Vv+rtKhzuXYJBHECCW3xbe1fRd1Z/54\nwCEOZTDq3GyEYu0Mnsko/sKropZNjP+KjzrwTy5Vk4gwtW1zqgpli8oXQO7iSVrr\n/S4Hy5B8NcwNEVis5mYJyoSCYz4fTt7nVFVBgADCfVND7hbCICZUAow74KguQ7hB\n4CvtOzklXafWxY1F2QwWQ0JYPfCnRMkl153YePJMR3OzaWWnt2u9ssWPGXX7rEvg\nMkyoy+lmeYkugbDjByaa\n=yQCc\n-----END PGP SIGNATURE-----",
        "payload": "tree c1a796e914022c0e04f8b0341ff68a2ed630aea3\nparent 6157e8ce3937af3f46d3e7dd922d19d6dc272145\nparent 6d51eaefe924bfaf2b0f4928dd6020023733480f\nauthor MarcoFalke <falke.marco@gmail.com> 1508771942 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1508771966 +0200\n\nMerge #11538: qa: Fix race condition failures in replace-by-fee.py, sendheaders.py\n\n6d51eaefe qa: Fix race condition in sendheaders.py (Suhas Daftuar)\nc96b2e4f0 qa: Fix replace-by-fee race condition failures (Suhas Daftuar)\n\nPull request description:\n\n  I think #11407 broke replace-by-fee by introducing a race condition.  I was observing frequent failures of replace-by-fee locally, always with a mempool sync failure (the sync call was added in #11407).\n\n  It appeared to me like there were two causes: sometimes the node would be in IBD and not request the transaction that was relayed; other times the blocks generated in make_utxo wouldn't have relayed quickly enough for the spend of the transaction to be accepted.  I believe I've fixed both potential errors.\n\n  ping @instagibbs\n\n  Edit: I found a race condition in the sendheaders.py test, where if the verack from the python node wasn't processed before the first block in the test was generated, then no block announcement would go out to that peer, breaking the test.  Fixed by adding a sync_with_ping after waiting for verack.\n\nTree-SHA512: 6ad160966e432c151c1ce6e88ae67e60e47123523bda3755cf7697a00e1a5ba38de8561751826e3d7cf0e492f8c2aec298e1b4de8424ebbaf497f099a1ef1d07\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6157e8ce3937af3f46d3e7dd922d19d6dc272145"
      },
      {
        "sha": "6d51eaefe924bfaf2b0f4928dd6020023733480f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d51eaefe924bfaf2b0f4928dd6020023733480f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d51eaefe924bfaf2b0f4928dd6020023733480f"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "815e9648481868da67d518bdcdba0b3e1d9a86cc",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57ee73990f1ce29916adfd99f93eae1ccea1a43b/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57ee73990f1ce29916adfd99f93eae1ccea1a43b/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "patch": "@@ -72,8 +72,14 @@ def set_test_params(self):\n                            [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n+        # Leave IBD\n+        self.nodes[0].generate(1)\n+\n         make_utxo(self.nodes[0], 1*COIN)\n \n+        # Ensure nodes are synced\n+        self.sync_all()\n+\n         self.log.info(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n \n@@ -110,13 +116,18 @@ def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n+        # make_utxo may have generated a bunch of blocks, so we need to sync\n+        # before we can spend the coins generated, or else the resulting\n+        # transactions might not be accepted by our peers.\n+        self.sync_all()\n+\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n-        self.sync_all([self.nodes])\n+        self.sync_all()\n \n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()"
      },
      {
        "sha": "60d107b248b847cc6543f49de16a36e682a9a66c",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57ee73990f1ce29916adfd99f93eae1ccea1a43b/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57ee73990f1ce29916adfd99f93eae1ccea1a43b/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "patch": "@@ -225,6 +225,10 @@ def run_test(self):\n         inv_node.wait_for_verack()\n         test_node.wait_for_verack()\n \n+        # Ensure verack's have been processed by our peer\n+        inv_node.sync_with_ping()\n+        test_node.sync_with_ping()\n+\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # PART 1"
      }
    ]
  },
  {
    "sha": "9d30f54ef1c9412f2c71b89664952dd95b6ef959",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDMwZjU0ZWYxYzk0MTJmMmM3MWI4OTY2NDk1MmRkOTViNmVmOTU5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-03T02:15:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-25T02:57:56Z"
      },
      "message": "[Docs] Update OpenBSD Build Instructions for OpenBSD 6.2",
      "tree": {
        "sha": "3aaac9802085206bc6b59d7e004e7b4ed07420f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aaac9802085206bc6b59d7e004e7b4ed07420f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d30f54ef1c9412f2c71b89664952dd95b6ef959",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlnv/boACgkQLuufXMCV\nJsH5kg//eHHqh+1zd0hlRd46f8gVG+5YuyPFDflaCouFQidBK+fs1TXQuAhULiTk\nUneOUwfvaEf8zTxqd8lImuFfWbIQdzmAvFuonLwZkzo31VhOqMn9Wocmm1uGz9q4\ncWCfHaAcwIOjmTvdWGzl9QEaFc9jiWGeOvOIb4dLRjqHHWajTgiQZJGSkaoNEj81\nnVkRSVdoS31SQ9guZtk0p7TCtkRI1aF3cNTNZ9cAWneDIuhNltOiSs/wBlSEowgo\nduscQEyAHmU/WKTO5LDlqt1jc8FU/uz3qcVAZVQk0XupGjDiT1O7JtMhfquUR71y\nXC0QnzTSJs/yQAUQ2yuo5F7993OWFu7oVWwKmGHU4dtIProypuMuEUxd7HgXMUy6\nUd+lFAkVMq6d8WLe+ouBOc08uhSo5RskvFj8kMcncVTe6IqugHrUZa2VEmFjCUt+\nym0pD5pYofd10hcRiHA5G23FRnghnHRj/13WVxHgiUn9puSZSSNGgxK5O/HI7dks\nCyaJYvp2bkeeEMaZ1iYJUr9MVh1Kwo6FYnR00NUrPOgm6BbIXuIusmXmSYz91C0B\nQ/8xrYepvwJf5GiH4P+2CvlJ2RuZF/wScBX7iIQBTi/XBvkM1E3ttFQtIqvBGdjw\nyGykaCOqQTGtlU2EO11ZXqVf0w2Q44P2XJNAv2VNY4vWb3xw8T4=\n=CuRc\n-----END PGP SIGNATURE-----",
        "payload": "tree 3aaac9802085206bc6b59d7e004e7b4ed07420f3\nparent 892809309c1bc370677241a715e57a2744f94323\nauthor fanquake <fanquake@gmail.com> 1506996955 +0800\ncommitter fanquake <fanquake@gmail.com> 1508900276 +0800\n\n[Docs] Update OpenBSD Build Instructions for OpenBSD 6.2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d30f54ef1c9412f2c71b89664952dd95b6ef959",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d30f54ef1c9412f2c71b89664952dd95b6ef959",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d30f54ef1c9412f2c71b89664952dd95b6ef959/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "892809309c1bc370677241a715e57a2744f94323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892809309c1bc370677241a715e57a2744f94323",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/892809309c1bc370677241a715e57a2744f94323"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 22,
      "deletions": 81
    },
    "files": [
      {
        "sha": "760bb69b158a366bd0d0240271a6eda8446f02cd",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 22,
        "deletions": 81,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d30f54ef1c9412f2c71b89664952dd95b6ef959/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d30f54ef1c9412f2c71b89664952dd95b6ef959/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=9d30f54ef1c9412f2c71b89664952dd95b6ef959",
        "patch": "@@ -1,76 +1,44 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.1)\n+(updated for OpenBSD 6.2)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n-As OpenBSD is most common as a server OS, we will not bother with the GUI.\n+OpenBSD is most commonly used as a server OS, so this guide does not contain instructions for building the GUI.\n \n Preparation\n -------------\n \n Run the following as root to install the base dependencies for building:\n \n ```bash\n-pkg_add gmake libtool libevent\n+pkg_add git gmake libevent libtool\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.15)\n-pkg_add python # (select highest version, e.g. 3.5)\n+pkg_add python # (select highest version, e.g. 3.6)\n+pkg_add boost\n+\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n GCC\n -------\n \n-The default C++ compiler that comes with OpenBSD 5.9 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core, primarily as it has no C++11 support, but even before there were issues. So here we will be installing a newer compiler:\n+The default C++ compiler that comes with OpenBSD 6.2 is g++ 4.2.1. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core because it has no C++11 support. We'll install a newer version of GCC:\n \n ```bash\n-pkg_add g++ # (select newest 4.x version, e.g. 4.9.3)\n-```\n-\n-This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n-\n-### Building boost\n-\n-Do not use `pkg_add boost`! The boost version installed thus is compiled using the `g++` compiler not `eg++`, which will result in a conflict between `/usr/local/lib/libestdc++.so.XX.0` and `/usr/lib/libstdc++.so.XX.0`, resulting in a test crash:\n-\n-    test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n-    ...\n-    Segmentation fault (core dumped)\n+ pkg_add g++\n+ ```\n \n-This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n-\n-```\n-# Pick some path to install boost to, here we create a directory within the bitcoin directory\n-BITCOIN_ROOT=$(pwd)\n-BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n-mkdir -p $BOOST_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-curl -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2\n-echo '7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_64_0.tar.bz2: OK\n-tar -xjf boost_1_64_0.tar.bz2\n-\n-# Boost 1.64 needs one small patch for OpenBSD\n-cd boost_1_64_0\n-# Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n-\n-# Build w/ minimum configuration necessary for bitcoin\n-echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n-config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1\"\n-./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test\n-./b2 -d2 -j2 -d1 ${config_opts} --prefix=${BOOST_PREFIX} stage\n-./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n-```\n+ This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n \n ### Building BerkeleyDB\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n \n-See \"Berkeley DB\" in [build_unix.md](build_unix.md) for instructions on how to build BerkeleyDB 4.8.\n+See \"Berkeley DB\" in [build-unix.md](build-unix.md#berkeley-db) for instructions on how to build BerkeleyDB 4.8.\n You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n \n ```bash\n@@ -98,8 +66,8 @@ The standard ulimit restrictions in OpenBSD are very strict:\n \n     data(kbytes)         1572864\n \n-This is, unfortunately, no longer enough to compile some `.cpp` files in the project,\n-at least with gcc 4.9.3 (see issue https://github.com/bitcoin/bitcoin/issues/6658).\n+This, unfortunately, may no longer be enough to compile some `.cpp` files in the project,\n+at least with GCC 4.9.4 (see issue [#6658](https://github.com/bitcoin/bitcoin/issues/6658)).\n If your user is in the `staff` group the limit can be raised with:\n \n     ulimit -d 3000000\n@@ -118,59 +86,32 @@ export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you i\n export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n ./autogen.sh\n ```\n-Make sure `BDB_PREFIX` and `BOOST_PREFIX` are set to the appropriate paths from the above steps.\n+Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n To configure with wallet:\n ```bash\n-./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp \\\n+./configure --with-gui=no CC=egcc CXX=eg++ CPP=ecpp \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp\n+./configure --disable-wallet --with-gui=no CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n Build and run the tests:\n ```bash\n-gmake # can use -jX here for parallelism\n+gmake # use -jX here for parallelism\n gmake check\n ```\n \n-Clang (not currently working)\n+Clang\n ------------------------------\n \n-WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n-\n-Using a newer g++ results in linking the new code to a new libstdc++.\n-Libraries built with the old g++, will still import the old library.\n-This gives conflicts, necessitating rebuild of all C++ dependencies of the application.\n-\n-With clang this can - at least theoretically - be avoided because it uses the\n-base system's libstdc++.\n-\n ```bash\n-pkg_add llvm boost\n-```\n+pkg_add llvm\n \n-```bash\n ./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n-gmake\n+gmake # use -jX here for parallelism\n+gmake check\n ```\n-\n-However, this does not appear to work. Compilation succeeds, but link fails\n-with many 'local symbol discarded' errors:\n-\n-    local symbol 150: discarded in section `.text._ZN10tinyformat6detail14FormatIterator6finishEv' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-    local symbol 151: discarded in section `.text._ZN10tinyformat6detail14FormatIterator21streamStateFromFormatERSoRjPKcii' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-    local symbol 152: discarded in section `.text._ZN10tinyformat6detail12convertToIntIA13_cLb0EE6invokeERA13_Kc' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-\n-According to similar reported errors this is a binutils (ld) issue in 2.15, the\n-version installed by OpenBSD 5.7:\n-\n-- http://openbsd-archive.7691.n7.nabble.com/UPDATE-cppcheck-1-65-td248900.html\n-- https://llvm.org/bugs/show_bug.cgi?id=9758\n-\n-There is no known workaround for this."
      }
    ]
  },
  {
    "sha": "fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDNhMmYzMTMwZWJkMWQxMDAxYzVkZmY4MGMxZmYwMjY2NTRiMDBk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-25T20:08:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-25T20:08:10Z"
      },
      "message": "[tests] Add fuzz testing for BlockTransactions and BlockTransactionsRequest",
      "tree": {
        "sha": "2999ce4252f93c42770f281d05b659e4d86d7d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2999ce4252f93c42770f281d05b659e4d86d7d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6694c5caa85c928d2a9e2c4b29de59397d973fa5",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
        "patch": "@@ -19,6 +19,7 @@\n #include \"undo.h\"\n #include \"version.h\"\n #include \"pubkey.h\"\n+#include \"blockencodings.h\"\n \n #include <stdint.h>\n #include <unistd.h>\n@@ -45,6 +46,8 @@ enum TEST_ID {\n     CBLOOMFILTER_DESERIALIZE,\n     CDISKBLOCKINDEX_DESERIALIZE,\n     CTXOUTCOMPRESSOR_DESERIALIZE,\n+    BLOCKTRANSACTIONS_DESERIALIZE,\n+    BLOCKTRANSACTIONSREQUEST_DESERIALIZE,\n     TEST_ID_END\n };\n \n@@ -245,6 +248,26 @@ int test_one_input(std::vector<uint8_t> buffer) {\n \n             break;\n         }\n+        case BLOCKTRANSACTIONS_DESERIALIZE:\n+        {\n+            try\n+            {\n+                BlockTransactions bt;\n+                ds >> bt;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+\n+            break;\n+        }\n+        case BLOCKTRANSACTIONSREQUEST_DESERIALIZE:\n+        {\n+            try\n+            {\n+                BlockTransactionsRequest btr;\n+                ds >> btr;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+\n+            break;\n+        }\n         default:\n             return 0;\n     }"
      }
    ]
  },
  {
    "sha": "659b2061c4329472a45e913c5d45e6ab180600a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTliMjA2MWM0MzI5NDcyYTQ1ZTkxM2M1ZDQ1ZTZhYjE4MDYwMGEz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-26T11:10:59Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-26T11:10:59Z"
      },
      "message": "Make listsinceblock refuse unknown block hash\n\nChange suggested by Cory Fields <cory-nospam-@coryfields.com> who noticed\nlistsinceblock would ignore invalid block hashes causing it to return a\ncompletely unfiltered list of transactions.",
      "tree": {
        "sha": "0a9b28f79e2278a063794a128795e9340ff8af25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a9b28f79e2278a063794a128795e9340ff8af25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/659b2061c4329472a45e913c5d45e6ab180600a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/659b2061c4329472a45e913c5d45e6ab180600a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/659b2061c4329472a45e913c5d45e6ab180600a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/659b2061c4329472a45e913c5d45e6ab180600a3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 47,
      "deletions": 10
    },
    "files": [
      {
        "sha": "23414666ce3e369cff809618384726421f04dffd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/659b2061c4329472a45e913c5d45e6ab180600a3/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/659b2061c4329472a45e913c5d45e6ab180600a3/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=659b2061c4329472a45e913c5d45e6ab180600a3",
        "patch": "@@ -76,6 +76,9 @@ will only create hierarchical deterministic (HD) wallets.\n \n Low-level RPC changes\n ----------------------\n+- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n+  value is passed, instead of returning a list of all wallet transactions since\n+  the genesis block.\n - The \"currentblocksize\" value in getmininginfo has been removed.\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n   * `getblockchaininfo`"
      },
      {
        "sha": "97d6dc700c53e49e578b83a1eb7e45b13873c884",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/659b2061c4329472a45e913c5d45e6ab180600a3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/659b2061c4329472a45e913c5d45e6ab180600a3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=659b2061c4329472a45e913c5d45e6ab180600a3",
        "patch": "@@ -1893,19 +1893,20 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (!request.params[0].isNull()) {\n+    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         uint256 blockId;\n \n         blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n-        if (it != mapBlockIndex.end()) {\n-            paltindex = pindex = it->second;\n-            if (chainActive[pindex->nHeight] != pindex) {\n-                // the block being asked for is a part of a deactivated chain;\n-                // we don't want to depend on its perceived height in the block\n-                // chain, we want to instead use the last common ancestor\n-                pindex = chainActive.FindFork(pindex);\n-            }\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        paltindex = pindex = it->second;\n+        if (chainActive[pindex->nHeight] != pindex) {\n+            // the block being asked for is a part of a deactivated chain;\n+            // we don't want to depend on its perceived height in the block\n+            // chain, we want to instead use the last common ancestor\n+            pindex = chainActive.FindFork(pindex);\n         }\n     }\n "
      },
      {
        "sha": "67e7744bf8433c79134469111a4b0aacca22b60d",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/659b2061c4329472a45e913c5d45e6ab180600a3/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/659b2061c4329472a45e913c5d45e6ab180600a3/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=659b2061c4329472a45e913c5d45e6ab180600a3",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error\n \n class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -16,10 +16,43 @@ def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()\n \n+        self.test_no_blockhash()\n+        self.test_invalid_blockhash()\n         self.test_reorg()\n         self.test_double_spend()\n         self.test_double_send()\n \n+    def test_no_blockhash(self):\n+        txid = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        blockhash, = self.nodes[2].generate(1)\n+        self.sync_all()\n+\n+        txs = self.nodes[0].listtransactions()\n+        assert_array_result(txs, {\"txid\": txid}, {\n+            \"category\": \"receive\",\n+            \"amount\": 1,\n+            \"blockhash\": blockhash,\n+            \"confirmations\": 1,\n+        })\n+        assert_equal(\n+            self.nodes[0].listsinceblock(),\n+            {\"lastblock\": blockhash,\n+             \"removed\": [],\n+             \"transactions\": txs})\n+        assert_equal(\n+            self.nodes[0].listsinceblock(\"\"),\n+            {\"lastblock\": blockhash,\n+             \"removed\": [],\n+             \"transactions\": txs})\n+\n+    def test_invalid_blockhash(self):\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"42759cde25462784395a337460bde75f58e73d3f08bd31fdc3507cbac856a2c4\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"invalid-hex\")\n+\n     def test_reorg(self):\n         '''\n         `listsinceblock` did not behave correctly when handed a block that was"
      }
    ]
  },
  {
    "sha": "cf8c4a7633b1a9d146f8f0e8828408a42517a910",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjhjNGE3NjMzYjFhOWQxNDZmOGYwZTg4Mjg0MDhhNDI1MTdhOTEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-26T15:27:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-26T15:27:39Z"
      },
      "message": "Merge #11530: Add share/rpcuser to dist. source code archive\n\nfa81534 Add share/rpcuser to dist. source code archive (MarcoFalke)\n\nPull request description:\n\n  As the legacy rpcuser and rpcpassword are deprected since 0.12.0, we should actually include the script to generate the new auth pair in the distributed source code archive.\n\n  Ref: #6753\n\n  (Tagging for backport, since it is a trivial bugfix)\n\nTree-SHA512: f2737957a92396444573f41071a785be5fb318df9efeb3ade7e56b3b56d512e5f9ca36723365fe5be8aaee69c5e8d8ed1178510bf02186c848b3910ee001ecb9",
      "tree": {
        "sha": "c16a54300346079a641f7790c3309ed3682d10dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c16a54300346079a641f7790c3309ed3682d10dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf8c4a7633b1a9d146f8f0e8828408a42517a910",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ8f7rAAoJEB5K7WKYbNJdJw4H/iBmUpZNOMxnAwLobmpnYebf\nv08y3BLkehIkwIAkNMkk2vqJBmMYjmDLMF4ahkIY0vQt3n2iOdCb7D04aCRrF/q4\nypYzmMHGbjv6Oj6yJV73vj9APSa/rXN41DL2gBUuQHtWd+eL5C51SrTDQXlhTxqW\nIFGIK87x0OdZ3UEUIQPVGBDDuSdW3PTj3xY4vlOL2t6OYxy34QtNlpRcPnXyklKB\n8xZ/mcKS1pHwmnLujLkhzCMZM0aE1ynyxlBpDc8mPpGBLQVcp6tujEqQQTnWnZcl\nZ4rOo0C9VP7eIEcaLgl5ufPT6gZxlCKI/1WhGQEXPs6bdtzaFpkLlgOcwReHeDk=\n=iknU\n-----END PGP SIGNATURE-----",
        "payload": "tree c16a54300346079a641f7790c3309ed3682d10dc\nparent 57ee73990f1ce29916adfd99f93eae1ccea1a43b\nparent fa81534d068cb5479684ed9fb073dc51532b91ca\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509031646 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509031659 +0200\n\nMerge #11530: Add share/rpcuser to dist. source code archive\n\nfa81534 Add share/rpcuser to dist. source code archive (MarcoFalke)\n\nPull request description:\n\n  As the legacy rpcuser and rpcpassword are deprected since 0.12.0, we should actually include the script to generate the new auth pair in the distributed source code archive.\n\n  Ref: #6753\n\n  (Tagging for backport, since it is a trivial bugfix)\n\nTree-SHA512: f2737957a92396444573f41071a785be5fb318df9efeb3ade7e56b3b56d512e5f9ca36723365fe5be8aaee69c5e8d8ed1178510bf02186c848b3910ee001ecb9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf8c4a7633b1a9d146f8f0e8828408a42517a910",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf8c4a7633b1a9d146f8f0e8828408a42517a910",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf8c4a7633b1a9d146f8f0e8828408a42517a910/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b"
      },
      {
        "sha": "fa81534d068cb5479684ed9fb073dc51532b91ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa81534d068cb5479684ed9fb073dc51532b91ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa81534d068cb5479684ed9fb073dc51532b91ca"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ad522f5a56dbd03145dc512e932f55f2ec8bcf1c",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf8c4a7633b1a9d146f8f0e8828408a42517a910/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf8c4a7633b1a9d146f8f0e8828408a42517a910/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=cf8c4a7633b1a9d146f8f0e8828408a42517a910",
        "patch": "@@ -44,6 +44,9 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n \t       $(top_srcdir)/contrib/init \\\n \t       $(top_srcdir)/contrib/rpm\n+DIST_SHARE = \\\n+  $(top_srcdir)/share/genbuild.sh \\\n+  $(top_srcdir)/share/rpcuser\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py\n@@ -213,7 +216,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\"
      }
    ]
  },
  {
    "sha": "c60fd71a65e841efe187992f46c583a704cc37f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjBmZDcxYTY1ZTg0MWVmZTE4Nzk5MmY0NmM1ODNhNzA0Y2MzN2Y1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-11T12:55:14Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T17:43:53Z"
      },
      "message": "Disconnecting from bad outbound peers in IBD\n\nWhen in IBD, we'd like to use all our outbound peers to help us\nsync the chain.  Disconnect any outbound peers whose headers have\ninsufficient work.",
      "tree": {
        "sha": "7129e0925746456f86cb4242acfbbc1d1f549abc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7129e0925746456f86cb4242acfbbc1d1f549abc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c60fd71a65e841efe187992f46c583a704cc37f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c60fd71a65e841efe187992f46c583a704cc37f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c60fd71a65e841efe187992f46c583a704cc37f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c60fd71a65e841efe187992f46c583a704cc37f5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8551e845582b799ab18a097b8b3b357fd481c31a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c60fd71a65e841efe187992f46c583a704cc37f5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c60fd71a65e841efe187992f46c583a704cc37f5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c60fd71a65e841efe187992f46c583a704cc37f5",
        "patch": "@@ -2383,6 +2383,24 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n         }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                if (!(pfrom->fInbound || pfrom->fWhitelisted || pfrom->m_manual_connection)) {\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n         }\n     }\n "
      },
      {
        "sha": "35cd7ad1418079f70692a6a7c4c759f92b7808f5",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c60fd71a65e841efe187992f46c583a704cc37f5/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c60fd71a65e841efe187992f46c583a704cc37f5/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=c60fd71a65e841efe187992f46c583a704cc37f5",
        "patch": "@@ -27,6 +27,7 @@ class MinimumChainWorkTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n@@ -74,6 +75,13 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         self.log.info(\"Verifying nodes are all synced\")\n+\n+        # Because nodes in regtest are all manual connections (eg using\n+        # addnode), node1 should not have disconnected node0. If not for that,\n+        # we'd expect node1 to have disconnected node0 for serving an\n+        # insufficient work chain, in which case we'd need to reconnect them to\n+        # continue the test.\n+\n         self.sync_all()\n         self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n "
      }
    ]
  },
  {
    "sha": "5a6d00c6defc587e22c93e63029fdd538ce8858d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTZkMDBjNmRlZmM1ODdlMjJjOTNlNjMwMjlmZGQ1MzhjZTg4NThk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-12T17:55:43Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T17:43:53Z"
      },
      "message": "Permit disconnection of outbound peers on bad/slow chains\n\nCurrently we have no rotation of outbound peers.  If an outbound peer\nstops serving us blocks, or is on a consensus-incompatible chain with\nless work than our tip (but otherwise valid headers), then we will never\ndisconnect that peer, even though that peer is using one of our 8\noutbound connection slots.  Because we rely on our outbound peers to\nfind an honest node in order to reach consensus, allowing an\nincompatible peer to occupy one of those slots is undesirable,\nparticularly if it is possible for all such slots to be occupied by such\npeers.\n\nProtect against this by always checking to see if a peer's best known\nblock has less work than our tip, and if so, set a 20 minute timeout --\nif the peer is still not known to have caught up to a chain with as much\nwork as ours after 20 minutes, then send a single getheaders message,\nwait 2 more minutes, and if a better header hasn't been received by then,\ndisconnect that peer.\n\nNote:\n\n- we do not require that our peer sync to the same tip as ours, just an\nequal or greater work tip.  (Doing otherwise would risk partitioning the\nnetwork in the event of a chain split, and is also unnecessary.)\n\n- we pick 4 of our outbound peers and do not subject them to this logic,\nto be more conservative. We don't wish to permit temporary network\nissues (or an attacker) to excessively disrupt network topology.",
      "tree": {
        "sha": "d265b9667143005dda2f82a0415bdc4585c7cff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d265b9667143005dda2f82a0415bdc4585c7cff6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a6d00c6defc587e22c93e63029fdd538ce8858d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6d00c6defc587e22c93e63029fdd538ce8858d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6d00c6defc587e22c93e63029fdd538ce8858d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6d00c6defc587e22c93e63029fdd538ce8858d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c60fd71a65e841efe187992f46c583a704cc37f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c60fd71a65e841efe187992f46c583a704cc37f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c60fd71a65e841efe187992f46c583a704cc37f5"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 120,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f83a20102e5a0af51efd3b23d3ffc514f806c2f9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 1,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6d00c6defc587e22c93e63029fdd538ce8858d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6d00c6defc587e22c93e63029fdd538ce8858d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5a6d00c6defc587e22c93e63029fdd538ce8858d",
        "patch": "@@ -124,6 +124,9 @@ namespace {\n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads = 0;\n \n+    /** Number of outbound peers with m_chain_sync.m_protect. */\n+    int g_outbound_peers_with_protect_from_disconnect = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n@@ -201,6 +204,33 @@ struct CNodeState {\n      */\n     bool fSupportsDesiredCmpctVersion;\n \n+    /** State used to enforce CHAIN_SYNC_TIMEOUT\n+      * Only in effect for outbound, non-manual connections, with\n+      * m_protect == false\n+      * Algorithm: if a peer's best known block has less work than our tip,\n+      * set a timeout CHAIN_SYNC_TIMEOUT seconds in the future:\n+      *   - If at timeout their best known block now has more work than our tip\n+      *     when the timeout was set, then either reset the timeout or clear it\n+      *     (after comparing against our current tip's work)\n+      *   - If at timeout their best known block still has less work than our\n+      *     tip did when the timeout was set, then send a getheaders message,\n+      *     and set a shorter timeout, HEADERS_RESPONSE_TIME seconds in future.\n+      *     If their best known block is still behind when that new timeout is\n+      *     reached, disconnect.\n+      */\n+    struct ChainSyncTimeoutState {\n+        //! A timeout used for checking whether our peer has sufficiently synced\n+        int64_t m_timeout;\n+        //! A header with the work we require on our peer's chain\n+        const CBlockIndex * m_work_header;\n+        //! After timeout is reached, set to true after sending getheaders\n+        bool m_sent_getheaders;\n+        //! Whether this peer is protected from disconnection due to a bad/slow chain\n+        bool m_protect;\n+    };\n+\n+    ChainSyncTimeoutState m_chain_sync;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -223,6 +253,7 @@ struct CNodeState {\n         fHaveWitness = false;\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n+        m_chain_sync = { 0, nullptr, false, false };\n     }\n };\n \n@@ -502,6 +533,13 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// Returns true for outbound peers, excluding manual connections, feelers, and\n+// one-shots\n+bool IsOutboundDisconnectionCandidate(const CNode *node)\n+{\n+    return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n+}\n+\n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n@@ -534,6 +572,8 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     nPreferredDownload -= state->fPreferredDownload;\n     nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n     assert(nPeersWithValidatedDownloads >= 0);\n+    g_outbound_peers_with_protect_from_disconnect -= state->m_chain_sync.m_protect;\n+    assert(g_outbound_peers_with_protect_from_disconnect >= 0);\n \n     mapNodeState.erase(nodeid);\n \n@@ -542,6 +582,7 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n         assert(mapBlocksInFlight.empty());\n         assert(nPreferredDownload == 0);\n         assert(nPeersWithValidatedDownloads == 0);\n+        assert(g_outbound_peers_with_protect_from_disconnect == 0);\n     }\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n@@ -2324,6 +2365,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindexLast);\n         UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n \n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n@@ -2396,11 +2441,22 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // chainActive.Tip()) because we won't start block download\n                 // until we have a headers chain that has at least\n                 // nMinimumChainWork, even if a peer has a chain past our tip,\n-                if (!(pfrom->fInbound || pfrom->fWhitelisted || pfrom->m_manual_connection)) {\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n                     pfrom->fDisconnect = true;\n                 }\n             }\n         }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n         }\n     }\n \n@@ -2799,6 +2855,58 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState &state = *State(pto->GetId());\n+    const CNetMsgMaker msgMaker(pto->GetSendVersion());\n+\n+    if (!state.m_chain_sync.m_protect && IsOutboundDisconnectionCandidate(pto) && state.fSyncStarted) {\n+        // This is an outbound peer subject to disconnection if they don't\n+        // announce a block with as much work as the current tip within\n+        // CHAIN_SYNC_TIMEOUT + HEADERS_RESPONSE_TIME seconds (note: if\n+        // their chain has more work than ours, we should sync to it,\n+        // unless it's invalid, in which case we should find that out and\n+        // disconnect from them elsewhere).\n+        if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork) {\n+            if (state.m_chain_sync.m_timeout != 0) {\n+                state.m_chain_sync.m_timeout = 0;\n+                state.m_chain_sync.m_work_header = nullptr;\n+                state.m_chain_sync.m_sent_getheaders = false;\n+            }\n+        } else if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n+            // Our best block known by this peer is behind our tip, and we're either noticing\n+            // that for the first time, OR this peer was able to catch up to some earlier point\n+            // where we checked against our tip.\n+            // Either way, set a new timeout based on current tip.\n+            state.m_chain_sync.m_timeout = time_in_seconds + CHAIN_SYNC_TIMEOUT;\n+            state.m_chain_sync.m_work_header = chainActive.Tip();\n+            state.m_chain_sync.m_sent_getheaders = false;\n+        } else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout) {\n+            // No evidence yet that our peer has synced to a chain with work equal to that\n+            // of our tip, when we first detected it was behind. Send a single getheaders\n+            // message to give the peer a chance to update us.\n+            if (state.m_chain_sync.m_sent_getheaders) {\n+                // They've run out of time to catch up!\n+                LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n+                pto->fDisconnect = true;\n+            } else {\n+                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n+                state.m_chain_sync.m_sent_getheaders = true;\n+                constexpr int64_t HEADERS_RESPONSE_TIME = 120; // 2 minutes\n+                // Bump the timeout to allow a response, which could clear the timeout\n+                // (if the response shows the peer has synced), reset the timeout (if\n+                // the peer syncs to the required work but not to our tip), or result\n+                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                // has not sufficiently progressed)\n+                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+            }\n+        }\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n@@ -3265,6 +3373,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             }\n         }\n \n+        // Check that outbound peers have reasonable chains\n+        // GetTime() is used by this anti-DoS logic so we can test this using mocktime\n+        ConsiderEviction(pto, GetTime());\n \n         //\n         // Message: getdata (blocks)"
      },
      {
        "sha": "656324bba0c4cc327455eed03793ca8ef8007129",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6d00c6defc587e22c93e63029fdd538ce8858d/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6d00c6defc587e22c93e63029fdd538ce8858d/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=5a6d00c6defc587e22c93e63029fdd538ce8858d",
        "patch": "@@ -21,6 +21,12 @@ static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+/** Protect at least this many outbound peers from disconnection due to slow/\n+ * behind headers chain.\n+ */\n+static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n+/** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n+static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n \n class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -47,6 +53,8 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     * @return                      True if there is more work to be done\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n+\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n };\n \n struct CNodeStateStats {"
      }
    ]
  },
  {
    "sha": "e065249c014a070a8799b2ff947af5b8f012c5c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDY1MjQ5YzAxNGEwNzBhODc5OWIyZmY5NDdhZjViOGYwMTJjNWMx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-19T15:42:47Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T17:51:06Z"
      },
      "message": "Add unit test for outbound peer eviction",
      "tree": {
        "sha": "0e617c0c0739930397504b217077837a6e4d83a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e617c0c0739930397504b217077837a6e4d83a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e065249c014a070a8799b2ff947af5b8f012c5c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e065249c014a070a8799b2ff947af5b8f012c5c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e065249c014a070a8799b2ff947af5b8f012c5c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e065249c014a070a8799b2ff947af5b8f012c5c1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a6d00c6defc587e22c93e63029fdd538ce8858d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6d00c6defc587e22c93e63029fdd538ce8858d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6d00c6defc587e22c93e63029fdd538ce8858d"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 55,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7bcf304833f175596968cec2f3a6cb0dc30f21ca",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e065249c014a070a8799b2ff947af5b8f012c5c1/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e065249c014a070a8799b2ff947af5b8f012c5c1/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=e065249c014a070a8799b2ff947af5b8f012c5c1",
        "patch": "@@ -42,6 +42,51 @@ static NodeId id = 0;\n \n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n+// Test eviction of an outbound peer whose chain never advances\n+// Mock a node connection, and use mocktime to simulate a peer\n+// which never sends any headers messages.  PeerLogic should\n+// decide to evict that outbound peer, after the appropriate timeouts.\n+// Note that we protect 4 outbound nodes from being subject to\n+// this logic; this test takes advantage of that protection only\n+// being applied to nodes which send headers with sufficient\n+// work.\n+BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n+{\n+    std::atomic<bool> interruptDummy(false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false);\n+    dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic->InitializeNode(&dummyNode1);\n+    dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n+\n+    // This test requires that we have a chain with non-zero work.\n+    BOOST_CHECK(chainActive.Tip() != nullptr);\n+    BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n+\n+    // Test starts here\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    dummyNode1.vSendMsg.clear();\n+\n+    int64_t nStartTime = GetTime();\n+    // Wait 21 minutes\n+    SetMockTime(nStartTime+21*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    // Wait 3 more minutes\n+    SetMockTime(nStartTime+24*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\n+    BOOST_CHECK(dummyNode1.fDisconnect == true);\n+    SetMockTime(0);\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);\n@@ -71,6 +116,10 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     Misbehaving(dummyNode2.GetId(), 50);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode2.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n@@ -95,6 +144,9 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n@@ -121,6 +173,9 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     SetMockTime(nStartTime+60*60*24+1);\n     BOOST_CHECK(!connman->IsBanned(addr));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n CTransactionRef RandomOrphan()"
      }
    ]
  },
  {
    "sha": "d93fa261f079d529a94ff26aa406a49e28d10340",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTNmYTI2MWYwNzlkNTI5YTk0ZmYyNmFhNDA2YTQ5ZTI4ZDEwMzQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-26T19:53:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-26T19:53:41Z"
      },
      "message": "Merge #11490: Disconnect from outbound peers with bad headers chains\n\ne065249 Add unit test for outbound peer eviction (Suhas Daftuar)\n5a6d00c Permit disconnection of outbound peers on bad/slow chains (Suhas Daftuar)\nc60fd71 Disconnecting from bad outbound peers in IBD (Suhas Daftuar)\n\nPull request description:\n\n  The first commit will disconnect an outbound peer that serves us a headers chain with insufficient work while we're in IBD.\n\n  The second commit introduces a way to disconnect outbound peers whose chains fall out of sync with ours:\n\n  For a given outbound peer, we check whether their best known block (which is known from the blocks they announce to us) has at least as much work as our tip.  If it doesn't, we set a 20 minute timeout, and if we still haven't heard about a block with as much work as our tip had when we set the timeout, then we send a single getheaders message, and wait 2 more minutes.  If after two minutes their best known block has insufficient work, we disconnect that peer.\n\n  We protect 4 of our outbound peers (who provide some \"good\" headers chains, ie a chain with at least as much work as our tip at some point) from being subject to this logic, to prevent excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable number of nodes not known to be on bogus chains.\n\n  We also don't require our peers to be on the same chain as us, to prevent accidental partitioning of the network in the event of a chain split.  Note that if our peers are ever on a more work chain than our tip, then we will download and validate it, and then either reorg to it, or learn of a consensus incompatibility with that peer and disconnect.  This PR is designed to protect against peers that are on a less work chain which we may never try to download and validate.\n\nTree-SHA512: 2e0169a1dd8a7fb95980573ac4a201924bffdd724c19afcab5efcef076fdbe1f2cec7dc5f5d7e0a6327216f56d3828884f73642e00c8534b56ec2bb4c854a656",
      "tree": {
        "sha": "11498792dc2ca69d4883ae84f28e59af6b8051b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11498792dc2ca69d4883ae84f28e59af6b8051b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d93fa261f079d529a94ff26aa406a49e28d10340",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ8j1FAAoJEB5K7WKYbNJdLOAH/21elK6xPRV+RsX334ELbFAi\nVdiTJa7AM9CXxzxJP1+8//EFNE5T/jt60vqbTZVUEmTzxb6BihJm5wgtTSHYQI8w\njQpEp87OjEay3Q1wZ8jAJIUAOO1EMMAMdmvoQajWRv0qoW0jv16NpViX2zfhGttP\naDrGbKZgEdN9MFOcEcCxBSbhPgZayw03f7crZceGyJ7OveT2J3ET6jPT8sWhhL2Y\n3ife94pPr/aNKdDgxQseczcFHw9Z6qf9qM7oUK51t5/k/fz/FyMWAbu9MsCcUizD\nNJ8RKOkcmVu1RXw1Yq4qGSej6Lze9UTj2v2DPh1C1DqKjvqzOl6xeSK2g1CPFNk=\n=hl+5\n-----END PGP SIGNATURE-----",
        "payload": "tree 11498792dc2ca69d4883ae84f28e59af6b8051b4\nparent cf8c4a7633b1a9d146f8f0e8828408a42517a910\nparent e065249c014a070a8799b2ff947af5b8f012c5c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509047599 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509047621 +0200\n\nMerge #11490: Disconnect from outbound peers with bad headers chains\n\ne065249 Add unit test for outbound peer eviction (Suhas Daftuar)\n5a6d00c Permit disconnection of outbound peers on bad/slow chains (Suhas Daftuar)\nc60fd71 Disconnecting from bad outbound peers in IBD (Suhas Daftuar)\n\nPull request description:\n\n  The first commit will disconnect an outbound peer that serves us a headers chain with insufficient work while we're in IBD.\n\n  The second commit introduces a way to disconnect outbound peers whose chains fall out of sync with ours:\n\n  For a given outbound peer, we check whether their best known block (which is known from the blocks they announce to us) has at least as much work as our tip.  If it doesn't, we set a 20 minute timeout, and if we still haven't heard about a block with as much work as our tip had when we set the timeout, then we send a single getheaders message, and wait 2 more minutes.  If after two minutes their best known block has insufficient work, we disconnect that peer.\n\n  We protect 4 of our outbound peers (who provide some \"good\" headers chains, ie a chain with at least as much work as our tip at some point) from being subject to this logic, to prevent excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable number of nodes not known to be on bogus chains.\n\n  We also don't require our peers to be on the same chain as us, to prevent accidental partitioning of the network in the event of a chain split.  Note that if our peers are ever on a more work chain than our tip, then we will download and validate it, and then either reorg to it, or learn of a consensus incompatibility with that peer and disconnect.  This PR is designed to protect against peers that are on a less work chain which we may never try to download and validate.\n\nTree-SHA512: 2e0169a1dd8a7fb95980573ac4a201924bffdd724c19afcab5efcef076fdbe1f2cec7dc5f5d7e0a6327216f56d3828884f73642e00c8534b56ec2bb4c854a656\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93fa261f079d529a94ff26aa406a49e28d10340",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d93fa261f079d529a94ff26aa406a49e28d10340",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93fa261f079d529a94ff26aa406a49e28d10340/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf8c4a7633b1a9d146f8f0e8828408a42517a910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf8c4a7633b1a9d146f8f0e8828408a42517a910",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf8c4a7633b1a9d146f8f0e8828408a42517a910"
      },
      {
        "sha": "e065249c014a070a8799b2ff947af5b8f012c5c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e065249c014a070a8799b2ff947af5b8f012c5c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e065249c014a070a8799b2ff947af5b8f012c5c1"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 200,
      "deletions": 0
    },
    "files": [
      {
        "sha": "50ac76924b8c32d41c6fa93d22c41bd49ae23afd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93fa261f079d529a94ff26aa406a49e28d10340/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93fa261f079d529a94ff26aa406a49e28d10340/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d93fa261f079d529a94ff26aa406a49e28d10340",
        "patch": "@@ -124,6 +124,9 @@ namespace {\n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads = 0;\n \n+    /** Number of outbound peers with m_chain_sync.m_protect. */\n+    int g_outbound_peers_with_protect_from_disconnect = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n@@ -201,6 +204,33 @@ struct CNodeState {\n      */\n     bool fSupportsDesiredCmpctVersion;\n \n+    /** State used to enforce CHAIN_SYNC_TIMEOUT\n+      * Only in effect for outbound, non-manual connections, with\n+      * m_protect == false\n+      * Algorithm: if a peer's best known block has less work than our tip,\n+      * set a timeout CHAIN_SYNC_TIMEOUT seconds in the future:\n+      *   - If at timeout their best known block now has more work than our tip\n+      *     when the timeout was set, then either reset the timeout or clear it\n+      *     (after comparing against our current tip's work)\n+      *   - If at timeout their best known block still has less work than our\n+      *     tip did when the timeout was set, then send a getheaders message,\n+      *     and set a shorter timeout, HEADERS_RESPONSE_TIME seconds in future.\n+      *     If their best known block is still behind when that new timeout is\n+      *     reached, disconnect.\n+      */\n+    struct ChainSyncTimeoutState {\n+        //! A timeout used for checking whether our peer has sufficiently synced\n+        int64_t m_timeout;\n+        //! A header with the work we require on our peer's chain\n+        const CBlockIndex * m_work_header;\n+        //! After timeout is reached, set to true after sending getheaders\n+        bool m_sent_getheaders;\n+        //! Whether this peer is protected from disconnection due to a bad/slow chain\n+        bool m_protect;\n+    };\n+\n+    ChainSyncTimeoutState m_chain_sync;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -223,6 +253,7 @@ struct CNodeState {\n         fHaveWitness = false;\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n+        m_chain_sync = { 0, nullptr, false, false };\n     }\n };\n \n@@ -502,6 +533,13 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// Returns true for outbound peers, excluding manual connections, feelers, and\n+// one-shots\n+bool IsOutboundDisconnectionCandidate(const CNode *node)\n+{\n+    return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n+}\n+\n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n@@ -534,6 +572,8 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     nPreferredDownload -= state->fPreferredDownload;\n     nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n     assert(nPeersWithValidatedDownloads >= 0);\n+    g_outbound_peers_with_protect_from_disconnect -= state->m_chain_sync.m_protect;\n+    assert(g_outbound_peers_with_protect_from_disconnect >= 0);\n \n     mapNodeState.erase(nodeid);\n \n@@ -542,6 +582,7 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n         assert(mapBlocksInFlight.empty());\n         assert(nPreferredDownload == 0);\n         assert(nPeersWithValidatedDownloads == 0);\n+        assert(g_outbound_peers_with_protect_from_disconnect == 0);\n     }\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n@@ -2337,6 +2378,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindexLast);\n         UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n \n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n@@ -2396,6 +2441,35 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n         }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n         }\n     }\n \n@@ -2794,6 +2868,58 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState &state = *State(pto->GetId());\n+    const CNetMsgMaker msgMaker(pto->GetSendVersion());\n+\n+    if (!state.m_chain_sync.m_protect && IsOutboundDisconnectionCandidate(pto) && state.fSyncStarted) {\n+        // This is an outbound peer subject to disconnection if they don't\n+        // announce a block with as much work as the current tip within\n+        // CHAIN_SYNC_TIMEOUT + HEADERS_RESPONSE_TIME seconds (note: if\n+        // their chain has more work than ours, we should sync to it,\n+        // unless it's invalid, in which case we should find that out and\n+        // disconnect from them elsewhere).\n+        if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork) {\n+            if (state.m_chain_sync.m_timeout != 0) {\n+                state.m_chain_sync.m_timeout = 0;\n+                state.m_chain_sync.m_work_header = nullptr;\n+                state.m_chain_sync.m_sent_getheaders = false;\n+            }\n+        } else if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n+            // Our best block known by this peer is behind our tip, and we're either noticing\n+            // that for the first time, OR this peer was able to catch up to some earlier point\n+            // where we checked against our tip.\n+            // Either way, set a new timeout based on current tip.\n+            state.m_chain_sync.m_timeout = time_in_seconds + CHAIN_SYNC_TIMEOUT;\n+            state.m_chain_sync.m_work_header = chainActive.Tip();\n+            state.m_chain_sync.m_sent_getheaders = false;\n+        } else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout) {\n+            // No evidence yet that our peer has synced to a chain with work equal to that\n+            // of our tip, when we first detected it was behind. Send a single getheaders\n+            // message to give the peer a chance to update us.\n+            if (state.m_chain_sync.m_sent_getheaders) {\n+                // They've run out of time to catch up!\n+                LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n+                pto->fDisconnect = true;\n+            } else {\n+                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n+                state.m_chain_sync.m_sent_getheaders = true;\n+                constexpr int64_t HEADERS_RESPONSE_TIME = 120; // 2 minutes\n+                // Bump the timeout to allow a response, which could clear the timeout\n+                // (if the response shows the peer has synced), reset the timeout (if\n+                // the peer syncs to the required work but not to our tip), or result\n+                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                // has not sufficiently progressed)\n+                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+            }\n+        }\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n@@ -3260,6 +3386,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             }\n         }\n \n+        // Check that outbound peers have reasonable chains\n+        // GetTime() is used by this anti-DoS logic so we can test this using mocktime\n+        ConsiderEviction(pto, GetTime());\n \n         //\n         // Message: getdata (blocks)"
      },
      {
        "sha": "656324bba0c4cc327455eed03793ca8ef8007129",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93fa261f079d529a94ff26aa406a49e28d10340/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93fa261f079d529a94ff26aa406a49e28d10340/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=d93fa261f079d529a94ff26aa406a49e28d10340",
        "patch": "@@ -21,6 +21,12 @@ static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+/** Protect at least this many outbound peers from disconnection due to slow/\n+ * behind headers chain.\n+ */\n+static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n+/** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n+static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n \n class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -47,6 +53,8 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     * @return                      True if there is more work to be done\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n+\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "7bcf304833f175596968cec2f3a6cb0dc30f21ca",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93fa261f079d529a94ff26aa406a49e28d10340/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93fa261f079d529a94ff26aa406a49e28d10340/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=d93fa261f079d529a94ff26aa406a49e28d10340",
        "patch": "@@ -42,6 +42,51 @@ static NodeId id = 0;\n \n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n+// Test eviction of an outbound peer whose chain never advances\n+// Mock a node connection, and use mocktime to simulate a peer\n+// which never sends any headers messages.  PeerLogic should\n+// decide to evict that outbound peer, after the appropriate timeouts.\n+// Note that we protect 4 outbound nodes from being subject to\n+// this logic; this test takes advantage of that protection only\n+// being applied to nodes which send headers with sufficient\n+// work.\n+BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n+{\n+    std::atomic<bool> interruptDummy(false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false);\n+    dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic->InitializeNode(&dummyNode1);\n+    dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n+\n+    // This test requires that we have a chain with non-zero work.\n+    BOOST_CHECK(chainActive.Tip() != nullptr);\n+    BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n+\n+    // Test starts here\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    dummyNode1.vSendMsg.clear();\n+\n+    int64_t nStartTime = GetTime();\n+    // Wait 21 minutes\n+    SetMockTime(nStartTime+21*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    // Wait 3 more minutes\n+    SetMockTime(nStartTime+24*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\n+    BOOST_CHECK(dummyNode1.fDisconnect == true);\n+    SetMockTime(0);\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);\n@@ -71,6 +116,10 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     Misbehaving(dummyNode2.GetId(), 50);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode2.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n@@ -95,6 +144,9 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n@@ -121,6 +173,9 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     SetMockTime(nStartTime+60*60*24+1);\n     BOOST_CHECK(!connman->IsBanned(addr));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n CTransactionRef RandomOrphan()"
      },
      {
        "sha": "35cd7ad1418079f70692a6a7c4c759f92b7808f5",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93fa261f079d529a94ff26aa406a49e28d10340/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93fa261f079d529a94ff26aa406a49e28d10340/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=d93fa261f079d529a94ff26aa406a49e28d10340",
        "patch": "@@ -27,6 +27,7 @@ class MinimumChainWorkTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n@@ -74,6 +75,13 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         self.log.info(\"Verifying nodes are all synced\")\n+\n+        # Because nodes in regtest are all manual connections (eg using\n+        # addnode), node1 should not have disconnected node0. If not for that,\n+        # we'd expect node1 to have disconnected node0 for serving an\n+        # insufficient work chain, in which case we'd need to reconnect them to\n+        # continue the test.\n+\n         self.sync_all()\n         self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n "
      }
    ]
  },
  {
    "sha": "4637f18522429473e68f6f512a03040e121a446d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjM3ZjE4NTIyNDI5NDczZTY4ZjZmNTEyYTAzMDQwZTEyMWE0NDZk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T18:46:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T20:37:06Z"
      },
      "message": "moveonly: factor out headers processing into separate function\n\nProcessMessages will now return earlier when processing headers\nmessages, rather than continuing on (and do nothing).",
      "tree": {
        "sha": "c4acdb165a3e94bac76e8c698d3a7d49eaba5fdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4acdb165a3e94bac76e8c698d3a7d49eaba5fdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4637f18522429473e68f6f512a03040e121a446d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4637f18522429473e68f6f512a03040e121a446d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4637f18522429473e68f6f512a03040e121a446d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4637f18522429473e68f6f512a03040e121a446d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d93fa261f079d529a94ff26aa406a49e28d10340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93fa261f079d529a94ff26aa406a49e28d10340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d93fa261f079d529a94ff26aa406a49e28d10340"
      }
    ],
    "stats": {
      "total": 336,
      "additions": 173,
      "deletions": 163
    },
    "files": [
      {
        "sha": "78dc1a752ab5052ee2798f708573900ec7dce823",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 173,
        "deletions": 163,
        "changes": 336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4637f18522429473e68f6f512a03040e121a446d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4637f18522429473e68f6f512a03040e121a446d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4637f18522429473e68f6f512a03040e121a446d",
        "patch": "@@ -1205,6 +1205,178 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n+bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams)\n+{\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    size_t nCount = headers.size();\n+\n+    if (nCount == 0) {\n+        // Nothing interesting. Stop asking this peers for more headers.\n+        return true;\n+    }\n+\n+    const CBlockIndex *pindexLast = nullptr;\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this looks like it could be a block announcement (nCount <\n+        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n+        // don't connect:\n+        // - Send a getheaders message in response to try to connect the chain.\n+        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+        //   don't connect before giving DoS points\n+        // - Once a headers message is received that is valid and does connect,\n+        //   nUnconnectingHeaders gets reset back to 0.\n+        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+            nodestate->nUnconnectingHeaders++;\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+                    headers[0].GetHash().ToString(),\n+                    headers[0].hashPrevBlock.ToString(),\n+                    pindexBestHeader->nHeight,\n+                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+            // Set hashLastUnknownBlock for this peer, so that if we\n+            // eventually get the headers - even from a different peer -\n+            // we can use this peer to download.\n+            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n+\n+            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+                Misbehaving(pfrom->GetId(), 20);\n+            }\n+            return true;\n+        }\n+\n+        uint256 hashLastBlock;\n+        for (const CBlockHeader& header : headers) {\n+            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+                Misbehaving(pfrom->GetId(), 20);\n+                return error(\"non-continuous headers sequence\");\n+            }\n+            hashLastBlock = header.GetHash();\n+        }\n+    }\n+\n+    CValidationState state;\n+    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+        int nDoS;\n+        if (state.IsInvalid(nDoS)) {\n+            if (nDoS > 0) {\n+                LOCK(cs_main);\n+                Misbehaving(pfrom->GetId(), nDoS);\n+            }\n+            return error(\"invalid header received\");\n+        }\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+        if (nodestate->nUnconnectingHeaders > 0) {\n+            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+        }\n+        nodestate->nUnconnectingHeaders = 0;\n+\n+        assert(pindexLast);\n+        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n+\n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n+        if (nCount == MAX_HEADERS_RESULTS) {\n+            // Headers message had its maximum size; the peer may have more headers.\n+            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n+            // from there instead.\n+            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n+        }\n+\n+        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        // If this set of headers is valid and ends in a block with at least as\n+        // much work as our tip, download as much as possible.\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n+            std::vector<const CBlockIndex*> vToFetch;\n+            const CBlockIndex *pindexWalk = pindexLast;\n+            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n+            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n+                    // We don't have this block, and it's not yet in flight.\n+                    vToFetch.push_back(pindexWalk);\n+                }\n+                pindexWalk = pindexWalk->pprev;\n+            }\n+            // If pindexWalk still isn't on our main chain, we're looking at a\n+            // very large reorg at a time we think we're close to caught up to\n+            // the main chain -- this shouldn't really happen.  Bail out on the\n+            // direct fetch and rely on parallel download instead.\n+            if (!chainActive.Contains(pindexWalk)) {\n+                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                        pindexLast->GetBlockHash().ToString(),\n+                        pindexLast->nHeight);\n+            } else {\n+                std::vector<CInv> vGetData;\n+                // Download as much as possible, from earliest to latest.\n+                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n+                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        // Can't download any more from this peer\n+                        break;\n+                    }\n+                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n+                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n+                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n+                }\n+                if (vGetData.size() > 1) {\n+                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                }\n+                if (vGetData.size() > 0) {\n+                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                        // In any case, we want to download using a compact block, not a regular one\n+                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n+                    }\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                }\n+            }\n+        }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n@@ -2308,169 +2480,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        if (nCount == 0) {\n-            // Nothing interesting. Stop asking this peers for more headers.\n-            return true;\n-        }\n-\n-        const CBlockIndex *pindexLast = nullptr;\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n-        // If this looks like it could be a block announcement (nCount <\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                    headers[0].GetHash().ToString(),\n-                    headers[0].hashPrevBlock.ToString(),\n-                    pindexBestHeader->nHeight,\n-                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom->GetId(), 20);\n-            }\n-            return true;\n-        }\n-\n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n-            }\n-            hashLastBlock = header.GetHash();\n-        }\n-        }\n-\n-        CValidationState state;\n-        if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n-            int nDoS;\n-            if (state.IsInvalid(nDoS)) {\n-                if (nDoS > 0) {\n-                    LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n-                }\n-                return error(\"invalid header received\");\n-            }\n-        }\n-\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-        if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-        }\n-        nodestate->nUnconnectingHeaders = 0;\n-\n-        assert(pindexLast);\n-        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n-\n-        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n-        // because it is set in UpdateBlockAvailability. Some nullptr checks\n-        // are still present, however, as belt-and-suspenders.\n-\n-        if (nCount == MAX_HEADERS_RESULTS) {\n-            // Headers message had its maximum size; the peer may have more headers.\n-            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n-            // from there instead.\n-            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n-        }\n-\n-        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n-        // If this set of headers is valid and ends in a block with at least as\n-        // much work as our tip, download as much as possible.\n-        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            std::vector<const CBlockIndex*> vToFetch;\n-            const CBlockIndex *pindexWalk = pindexLast;\n-            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n-            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n-                    // We don't have this block, and it's not yet in flight.\n-                    vToFetch.push_back(pindexWalk);\n-                }\n-                pindexWalk = pindexWalk->pprev;\n-            }\n-            // If pindexWalk still isn't on our main chain, we're looking at a\n-            // very large reorg at a time we think we're close to caught up to\n-            // the main chain -- this shouldn't really happen.  Bail out on the\n-            // direct fetch and rely on parallel download instead.\n-            if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n-                        pindexLast->GetBlockHash().ToString(),\n-                        pindexLast->nHeight);\n-            } else {\n-                std::vector<CInv> vGetData;\n-                // Download as much as possible, from earliest to latest.\n-                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n-                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                        // Can't download any more from this peer\n-                        break;\n-                    }\n-                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n-                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n-                }\n-                if (vGetData.size() > 0) {\n-                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n-                        // In any case, we want to download using a compact block, not a regular one\n-                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n-                    }\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n-                }\n-            }\n-        }\n-        // If we're in IBD, we want outbound peers that will serve us a useful\n-        // chain. Disconnect peers that are on chains with insufficient work.\n-        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n-            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n-            // headers to fetch from this peer.\n-            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n-                // This peer has too little work on their headers chain to help\n-                // us sync -- disconnect if using an outbound slot (unless\n-                // whitelisted or addnode).\n-                // Note: We compare their tip to nMinimumChainWork (rather than\n-                // chainActive.Tip()) because we won't start block download\n-                // until we have a headers chain that has at least\n-                // nMinimumChainWork, even if a peer has a chain past our tip,\n-                // as an anti-DoS measure.\n-                if (IsOutboundDisconnectionCandidate(pfrom)) {\n-                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n-                    pfrom->fDisconnect = true;\n-                }\n-            }\n-        }\n-\n-        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n-            // If this is an outbound peer, check to see if we should protect\n-            // it from the bad/lagging chain logic.\n-            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n-                nodestate->m_chain_sync.m_protect = true;\n-                ++g_outbound_peers_with_protect_from_disconnect;\n-            }\n-        }\n-        }\n+        return ProcessHeadersMessage(pfrom, connman, headers, chainparams);\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing"
      }
    ]
  },
  {
    "sha": "37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzg4NmQ1ZTJmOTk5MjY3OGRlYTRiMWJkODkzZjRmMTBkNjFkM2Fk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T18:54:33Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-27T20:29:12Z"
      },
      "message": "Disconnect outbound peers relaying invalid headers",
      "tree": {
        "sha": "25a7e92c05cad5014c522310e76efd4fbf88bb84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25a7e92c05cad5014c522310e76efd4fbf88bb84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4637f18522429473e68f6f512a03040e121a446d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4637f18522429473e68f6f512a03040e121a446d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4637f18522429473e68f6f512a03040e121a446d"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 56,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4c3aacaf5f8609b678e88b1014a481b5e8eb00bb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 10,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
        "patch": "@@ -1205,7 +1205,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams)\n+bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool punish_duplicate_invalid)\n {\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     size_t nCount = headers.size();\n@@ -1258,13 +1258,48 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     }\n \n     CValidationState state;\n-    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+    CBlockHeader first_invalid_header;\n+    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             if (nDoS > 0) {\n                 LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n+            if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n+                // Goal: don't allow outbound peers to use up our outbound\n+                // connection slots if they are on incompatible chains.\n+                //\n+                // We ask the caller to set punish_invalid appropriately based\n+                // on the peer and the method of header delivery (compact\n+                // blocks are allowed to be invalid in some circumstances,\n+                // under BIP 152).\n+                // Here, we try to detect the narrow situation that we have a\n+                // valid block header (ie it was valid at the time the header\n+                // was received, and hence stored in mapBlockIndex) but know the\n+                // block is invalid, and that a peer has announced that same\n+                // block as being on its active chain.\n+                // Disconnect the peer in such a situation.\n+                //\n+                // Note: if the header that is invalid was not accepted to our\n+                // mapBlockIndex at all, that may also be grounds for\n+                // disconnecting the peer, as the chain they are on is likely\n+                // to be incompatible. However, there is a circumstance where\n+                // that does not hold: if the header's timestamp is more than\n+                // 2 hours ahead of our current time. In that case, the header\n+                // may become valid in the future, and we don't want to\n+                // disconnect a peer merely for serving us one too-far-ahead\n+                // block header, to prevent an attacker from splitting the\n+                // network by mining a block right at the 2 hour boundary.\n+                //\n+                // TODO: update the DoS logic (or, rather, rewrite the\n+                // DoS-interface between validation and net_processing) so that\n+                // the interface is cleaner, and so that we disconnect on all the\n+                // reasons that a peer's headers chain is incompatible\n+                // with ours (eg block->nVersion softforks, MTP violations,\n+                // etc), and not just the duplicate-invalid case.\n+                pfrom->fDisconnect = true;\n+            }\n             return error(\"invalid header received\");\n         }\n     }\n@@ -2219,7 +2254,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // If we end up treating this as a plain headers message, call that as well\n         // without cs_main.\n         bool fRevertToHeaderProcessing = false;\n-        CDataStream vHeadersMsg(SER_NETWORK, PROTOCOL_VERSION);\n \n         // Keep a CBlock for \"optimistic\" compactblock reconstructions (see\n         // below)\n@@ -2336,10 +2370,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 return true;\n             } else {\n                 // If this was an announce-cmpctblock, we want the same treatment as a header message\n-                // Dirty hack to process as if it were just a headers message (TODO: move message handling into their own functions)\n-                std::vector<CBlock> headers;\n-                headers.push_back(cmpctblock.header);\n-                vHeadersMsg << headers;\n                 fRevertToHeaderProcessing = true;\n             }\n         }\n@@ -2348,8 +2378,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (fProcessBLOCKTXN)\n             return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n-        if (fRevertToHeaderProcessing)\n-            return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n+        if (fRevertToHeaderProcessing) {\n+            // Headers received from HB compact block peers are permitted to be\n+            // relayed before full validation (see BIP 152), so we don't want to disconnect\n+            // the peer if the header turns out to be for an invalid block.\n+            // Note that if a peer tries to build on an invalid chain, that\n+            // will be detected and the peer will be banned.\n+            return ProcessHeadersMessage(pfrom, connman, {cmpctblock.header}, chainparams, /*punish_duplicate_invalid=*/false);\n+        }\n \n         if (fBlockReconstructed) {\n             // If we got here, we were able to optimistically reconstruct a\n@@ -2480,7 +2516,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, connman, headers, chainparams);\n+        // Headers received via a HEADERS message should be valid, and reflect\n+        // the chain the peer is on. If we receive a known-invalid header,\n+        // disconnect the peer if it is using one of our outbound connection\n+        // slots.\n+        bool should_punish = !pfrom->fInbound && !pfrom->m_manual_connection;\n+        return ProcessHeadersMessage(pfrom, connman, headers, chainparams, should_punish);\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing"
      },
      {
        "sha": "78eb6d7302409aba715bb81567d36dddcd34a5e7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
        "patch": "@@ -3079,13 +3079,15 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n // Exposed wrapper for AcceptBlockHeader\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)\n {\n+    if (first_invalid != nullptr) first_invalid->SetNull();\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+                if (first_invalid) *first_invalid = header;\n                 return false;\n             }\n             if (ppindex) {"
      },
      {
        "sha": "93669de6c4d7ae54bb14e042ca0dc84595b001aa",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37886d5e2f9992678dea4b1bd893f4f10d61d3ad/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
        "patch": "@@ -247,8 +247,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[out] state This may be set to an Error state if any error occurred processing them\n  * @param[in]  chainparams The params for the chain we want to connect to\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n+ * @param[out] first_invalid First header that fails validation, if one exists\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr);\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr, CBlockHeader *first_invalid=nullptr);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);"
      }
    ]
  },
  {
    "sha": "b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTU0NWQ4ZGY5OWZiNzFiYmI2MjdlZWJlNjIzZmY4ZDlhMmQ5NzE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-28T14:17:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-28T14:22:20Z"
      },
      "message": "Merge #10409: [tests] Add fuzz testing for BlockTransactions and BlockTransactionsRequest\n\nfd3a2f3 [tests] Add fuzz testing for BlockTransactions and BlockTransactionsRequest (practicalswift)\n\nPull request description:\n\n  The `BlockTransactions` deserialization code is reachable with tainted data via `ProcessMessage(\u2026, \"BLOCKTXN\", vRecv [tainted], \u2026)`.\n\n  The same thing applies to `BlockTransactionsRequest` which is reachable via `\"GETBLOCKTXN\"`.\n\nTree-SHA512: 64560ea344bc6145b940472f99866b808725745b060dedfb315be400bd94e55399f50b982149645bd7af7ed9935fd28751d7daf0d3f94a8e2ed3bc52e3325ffb",
      "tree": {
        "sha": "a8dbd19e0a75c96766366a380bdab189328f88bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8dbd19e0a75c96766366a380bdab189328f88bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ9JKcAAoJEB5K7WKYbNJdjOEH/is4UPMjnDzlaAD0S04DtDEO\nQHqqAGBDmXHGQzduBnNhu/b9I/wGOCJmiml65hYJJpP5jMqNitG+mZwFw77oG12Y\nBnJ6clRsvZ0Qwwp8b0vhu2ss16U0O6x2jG1Ziq5taElJcBnFHenqKphJEok8O+um\nGeeN6lXm3uVDUJxKPHal/nGSEZXhnE9v4AZybzWHE8+1SSmYLIoGOscS4sSWwr5c\ncpD1DTv1/+j/+QDF963A8/6+dZsa4QsnzFxGVG1sQRviGbPraek9tAUBXGPaNu8L\nWFV/Vbht+hskBh+BKhKkSkdgyCW2jU4qKaAE1foc5wkEKwsW8XhkQZy6LqUHl+w=\n=F/jA\n-----END PGP SIGNATURE-----",
        "payload": "tree a8dbd19e0a75c96766366a380bdab189328f88bd\nparent d93fa261f079d529a94ff26aa406a49e28d10340\nparent fd3a2f3130ebd1d1001c5dff80c1ff026654b00d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509200255 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509200540 +0200\n\nMerge #10409: [tests] Add fuzz testing for BlockTransactions and BlockTransactionsRequest\n\nfd3a2f3 [tests] Add fuzz testing for BlockTransactions and BlockTransactionsRequest (practicalswift)\n\nPull request description:\n\n  The `BlockTransactions` deserialization code is reachable with tainted data via `ProcessMessage(\u2026, \"BLOCKTXN\", vRecv [tainted], \u2026)`.\n\n  The same thing applies to `BlockTransactionsRequest` which is reachable via `\"GETBLOCKTXN\"`.\n\nTree-SHA512: 64560ea344bc6145b940472f99866b808725745b060dedfb315be400bd94e55399f50b982149645bd7af7ed9935fd28751d7daf0d3f94a8e2ed3bc52e3325ffb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5545d8df99fb71bbb627eebe623ff8d9a2d9719/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d93fa261f079d529a94ff26aa406a49e28d10340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93fa261f079d529a94ff26aa406a49e28d10340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d93fa261f079d529a94ff26aa406a49e28d10340"
      },
      {
        "sha": "fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd3a2f3130ebd1d1001c5dff80c1ff026654b00d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6694c5caa85c928d2a9e2c4b29de59397d973fa5",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5545d8df99fb71bbb627eebe623ff8d9a2d9719/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5545d8df99fb71bbb627eebe623ff8d9a2d9719/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
        "patch": "@@ -19,6 +19,7 @@\n #include \"undo.h\"\n #include \"version.h\"\n #include \"pubkey.h\"\n+#include \"blockencodings.h\"\n \n #include <stdint.h>\n #include <unistd.h>\n@@ -45,6 +46,8 @@ enum TEST_ID {\n     CBLOOMFILTER_DESERIALIZE,\n     CDISKBLOCKINDEX_DESERIALIZE,\n     CTXOUTCOMPRESSOR_DESERIALIZE,\n+    BLOCKTRANSACTIONS_DESERIALIZE,\n+    BLOCKTRANSACTIONSREQUEST_DESERIALIZE,\n     TEST_ID_END\n };\n \n@@ -245,6 +248,26 @@ int test_one_input(std::vector<uint8_t> buffer) {\n \n             break;\n         }\n+        case BLOCKTRANSACTIONS_DESERIALIZE:\n+        {\n+            try\n+            {\n+                BlockTransactions bt;\n+                ds >> bt;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+\n+            break;\n+        }\n+        case BLOCKTRANSACTIONSREQUEST_DESERIALIZE:\n+        {\n+            try\n+            {\n+                BlockTransactionsRequest btr;\n+                ds >> btr;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+\n+            break;\n+        }\n         default:\n             return 0;\n     }"
      }
    ]
  },
  {
    "sha": "f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTI3ZWUxYWE4NzFiMWJkNGM1YWIyYjIxOGQwZWEyN2VmOWZmZjE5",
    "commit": {
      "author": {
        "name": "Christian Gentry",
        "email": "christiangentry@gmail.com",
        "date": "2017-10-28T17:23:26Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-10-28T17:23:26Z"
      },
      "message": "Fixed a couple small grammatical errors.\n\n1. \"If a pull request is not to be considered for merging (yet), please\r\nprefix the ...\"\r\n\r\n2. If a particular commit references another issue, please add the reference. For\r\nexample: `refs #1234` or `fixes #4321`.",
      "tree": {
        "sha": "bf8304895cabc309030ee702cea7a2370a383274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf8304895cabc309030ee702cea7a2370a383274"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ9L0OCRBK7hj4Ov3rIwAAdHIIAFRRknEsD/nwqKvgMNxiFAs1\nBS/EuJiVSevxz6r5yIxOrPcg8s6jrY+P8PStUEexDolXGa1t4C3Zf9HOh1dI6Db+\nb8Z1wFEwk8vrueOwo5nc5YTf6HAH5fsIzGgzsX1izuNgJS3A83ZwVRT7UWhgp85k\nhghFzDBky5iBsaxANqiVzNuGrePJauWZnsIT1FypdRD2AMsfIpZwuOig0QMxwVIA\nfXVyxy+I6QQ/BmMWhy689k9jNEIWkqZYloACV2cHhApdVvLokT2vSjOPVgmyw/Tx\nYSgQsLaqLYeYA6qd/RyVmX5Dtt3G1wvNGAGDaj09HN2OepsLMjFSnUDTha5ph0g=\n=/YnC\n-----END PGP SIGNATURE-----\n",
        "payload": "tree bf8304895cabc309030ee702cea7a2370a383274\nparent b5545d8df99fb71bbb627eebe623ff8d9a2d9719\nauthor Christian Gentry <christiangentry@gmail.com> 1509211406 -0700\ncommitter GitHub <noreply@github.com> 1509211406 -0700\n\nFixed a couple small grammatical errors.\n\n1. \"If a pull request is not to be considered for merging (yet), please\r\nprefix the ...\"\r\n\r\n2. If a particular commit references another issue, please add the reference. For\r\nexample: `refs #1234` or `fixes #4321`."
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19/comments",
    "author": {
      "login": "BitsInMyBlood",
      "id": 5923690,
      "node_id": "MDQ6VXNlcjU5MjM2OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5923690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitsInMyBlood",
      "html_url": "https://github.com/BitsInMyBlood",
      "followers_url": "https://api.github.com/users/BitsInMyBlood/followers",
      "following_url": "https://api.github.com/users/BitsInMyBlood/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitsInMyBlood/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitsInMyBlood/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitsInMyBlood/subscriptions",
      "organizations_url": "https://api.github.com/users/BitsInMyBlood/orgs",
      "repos_url": "https://api.github.com/users/BitsInMyBlood/repos",
      "events_url": "https://api.github.com/users/BitsInMyBlood/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitsInMyBlood/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5545d8df99fb71bbb627eebe623ff8d9a2d9719"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2662794bcf45f7e95a4e6c396f65558ffc8d4a12",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
        "patch": "@@ -42,8 +42,8 @@ in init.cpp\") in which case a single title line is sufficient. Commit messages s\n helpful to people reading your code in the future, so explain the reasoning for\n your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n-If a particular commit references another issue, please add the reference, for\n-example `refs #1234`, or `fixes #4321`. Using the `fixes` or `closes` keywords\n+If a particular commit references another issue, please add the reference. For\n+example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n will cause the corresponding issue to be closed when the pull request is merged.\n \n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n@@ -85,7 +85,7 @@ Note that translations should not be submitted as pull requests, please see\n [Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md) \n for more information on helping with translations.\n \n-If a pull request is specifically not to be considered for merging (yet) please\n+If a pull request is not to be considered for merging (yet), please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n in the body of the pull request to indicate tasks are pending.\n "
      }
    ]
  },
  {
    "sha": "ba216b5fa63e7e6cae847d1e3621f5c54840f898",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTIxNmI1ZmE2M2U3ZTZjYWU4NDdkMWUzNjIxZjVjNTQ4NDBmODk4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-28T18:11:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-28T18:19:38Z"
      },
      "message": "Merge #11568: Disconnect outbound peers on invalid chains\n\n37886d5e2 Disconnect outbound peers relaying invalid headers (Suhas Daftuar)\n4637f1852 moveonly: factor out headers processing into separate function (Suhas Daftuar)\n\nPull request description:\n\n  Alternate to #11446.\n\n  Disconnect outbound (non-manual) peers that serve us block headers that are already known to be invalid, but exempt compact block announcements from such disconnects.\n\n  We restrict disconnection to outbound peers that are using up an outbound connection slot, because we rely on those peers to give us connectivity to the honest network (our inbound peers are not chosen by us and hence could all be from an attacker/sybil).  Maintaining connectivity to peers that serve us invalid headers is sometimes desirable, eg after a soft-fork, to protect unupgraded software from being partitioned off the honest network, so we prefer to only disconnect when necessary.\n\n  Compact block announcements are exempted from this logic to comply with BIP 152, which explicitly permits nodes to relay compact blocks before fully validating them.\n\nTree-SHA512: 3ea88e4ccc1184f292a85b17f800d401d2c3806fefc7ad5429d05d6872c53acfa5751e3df83ce6b9c0060ab289511ed70ae1323d140ccc5b12e3c8da6de49936",
      "tree": {
        "sha": "17e75153d56aa4425b5a1fc9af5bd348f69c9d9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17e75153d56aa4425b5a1fc9af5bd348f69c9d9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba216b5fa63e7e6cae847d1e3621f5c54840f898",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ9Mo7AAoJEKY26XYx92fgn1wP/1na5whUsMyroIT+AWnJ9ayH\n0WgYMmO6YYGeqhnB+89/6hXHHv8fastNd7qwvepHx2PHRI7BGjSu3514J63s2kLb\nj/p11XqeKhmS3jhvPU8IpbzL81YfAGAyeen4lRPnMlIHDADKIHhUN71Mk3ayQBJU\nnasNkmC3fK671vbahPBK3gMGtly7sng48rap5ErGn7HJ76Ox1N+DQEtBRmf73CRv\njF87jDitfxwrsrHOZel3IbxmoVPOgttP6iK4dMI6WqOgLFBvhvtdlAmTBX5a7dep\nOrV40U2TiI02vMNznK5fOnVokUF7RjwYHHjN8PRvT0aRaUx1T8LFq6BBh1E7lcRk\nlauKwVWGRpVzgpv+OxVgId8LLAsJsvRWVqV4cmhNoBoksqiFA9ztSCUVwnwYAHgw\nesoUIhmPjcu3J7/qm5EC4vMZr3x2QCmhGFODiuaPxuhwrnKf7frsetDyJyCYP6Jh\nYXmTNN2rQjtKxpr1KHW+9MNl21zQ1Jrj0gJjiz8DOxcWIw0/hd4jP1UpjbkZVBga\nvAx8dVIqucyXpZf1iWYgj5DtSMbSx31AX9TZFTCqJu4sw5ti1Hxaxfq2TTBbdKVO\nvHCH/nRSQP7slCI8UIAfdJR5Oz2JqZ/2TiswCVTxkrG6A8ItS/qfV3r0Nkjm+b7S\nVuh8osJoM1JCax4PRpxm\n=tQSS\n-----END PGP SIGNATURE-----",
        "payload": "tree 17e75153d56aa4425b5a1fc9af5bd348f69c9d9e\nparent b5545d8df99fb71bbb627eebe623ff8d9a2d9719\nparent 37886d5e2f9992678dea4b1bd893f4f10d61d3ad\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1509214283 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1509214778 -0700\n\nMerge #11568: Disconnect outbound peers on invalid chains\n\n37886d5e2 Disconnect outbound peers relaying invalid headers (Suhas Daftuar)\n4637f1852 moveonly: factor out headers processing into separate function (Suhas Daftuar)\n\nPull request description:\n\n  Alternate to #11446.\n\n  Disconnect outbound (non-manual) peers that serve us block headers that are already known to be invalid, but exempt compact block announcements from such disconnects.\n\n  We restrict disconnection to outbound peers that are using up an outbound connection slot, because we rely on those peers to give us connectivity to the honest network (our inbound peers are not chosen by us and hence could all be from an attacker/sybil).  Maintaining connectivity to peers that serve us invalid headers is sometimes desirable, eg after a soft-fork, to protect unupgraded software from being partitioned off the honest network, so we prefer to only disconnect when necessary.\n\n  Compact block announcements are exempted from this logic to comply with BIP 152, which explicitly permits nodes to relay compact blocks before fully validating them.\n\nTree-SHA512: 3ea88e4ccc1184f292a85b17f800d401d2c3806fefc7ad5429d05d6872c53acfa5751e3df83ce6b9c0060ab289511ed70ae1323d140ccc5b12e3c8da6de49936\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba216b5fa63e7e6cae847d1e3621f5c54840f898",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba216b5fa63e7e6cae847d1e3621f5c54840f898",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba216b5fa63e7e6cae847d1e3621f5c54840f898/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5545d8df99fb71bbb627eebe623ff8d9a2d9719",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5545d8df99fb71bbb627eebe623ff8d9a2d9719"
      },
      {
        "sha": "37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37886d5e2f9992678dea4b1bd893f4f10d61d3ad"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 226,
      "deletions": 172
    },
    "files": [
      {
        "sha": "4c3aacaf5f8609b678e88b1014a481b5e8eb00bb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 221,
        "deletions": 170,
        "changes": 391,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba216b5fa63e7e6cae847d1e3621f5c54840f898/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba216b5fa63e7e6cae847d1e3621f5c54840f898/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "patch": "@@ -1205,6 +1205,213 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n+bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool punish_duplicate_invalid)\n+{\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    size_t nCount = headers.size();\n+\n+    if (nCount == 0) {\n+        // Nothing interesting. Stop asking this peers for more headers.\n+        return true;\n+    }\n+\n+    const CBlockIndex *pindexLast = nullptr;\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this looks like it could be a block announcement (nCount <\n+        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n+        // don't connect:\n+        // - Send a getheaders message in response to try to connect the chain.\n+        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+        //   don't connect before giving DoS points\n+        // - Once a headers message is received that is valid and does connect,\n+        //   nUnconnectingHeaders gets reset back to 0.\n+        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+            nodestate->nUnconnectingHeaders++;\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+                    headers[0].GetHash().ToString(),\n+                    headers[0].hashPrevBlock.ToString(),\n+                    pindexBestHeader->nHeight,\n+                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+            // Set hashLastUnknownBlock for this peer, so that if we\n+            // eventually get the headers - even from a different peer -\n+            // we can use this peer to download.\n+            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n+\n+            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+                Misbehaving(pfrom->GetId(), 20);\n+            }\n+            return true;\n+        }\n+\n+        uint256 hashLastBlock;\n+        for (const CBlockHeader& header : headers) {\n+            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+                Misbehaving(pfrom->GetId(), 20);\n+                return error(\"non-continuous headers sequence\");\n+            }\n+            hashLastBlock = header.GetHash();\n+        }\n+    }\n+\n+    CValidationState state;\n+    CBlockHeader first_invalid_header;\n+    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n+        int nDoS;\n+        if (state.IsInvalid(nDoS)) {\n+            if (nDoS > 0) {\n+                LOCK(cs_main);\n+                Misbehaving(pfrom->GetId(), nDoS);\n+            }\n+            if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n+                // Goal: don't allow outbound peers to use up our outbound\n+                // connection slots if they are on incompatible chains.\n+                //\n+                // We ask the caller to set punish_invalid appropriately based\n+                // on the peer and the method of header delivery (compact\n+                // blocks are allowed to be invalid in some circumstances,\n+                // under BIP 152).\n+                // Here, we try to detect the narrow situation that we have a\n+                // valid block header (ie it was valid at the time the header\n+                // was received, and hence stored in mapBlockIndex) but know the\n+                // block is invalid, and that a peer has announced that same\n+                // block as being on its active chain.\n+                // Disconnect the peer in such a situation.\n+                //\n+                // Note: if the header that is invalid was not accepted to our\n+                // mapBlockIndex at all, that may also be grounds for\n+                // disconnecting the peer, as the chain they are on is likely\n+                // to be incompatible. However, there is a circumstance where\n+                // that does not hold: if the header's timestamp is more than\n+                // 2 hours ahead of our current time. In that case, the header\n+                // may become valid in the future, and we don't want to\n+                // disconnect a peer merely for serving us one too-far-ahead\n+                // block header, to prevent an attacker from splitting the\n+                // network by mining a block right at the 2 hour boundary.\n+                //\n+                // TODO: update the DoS logic (or, rather, rewrite the\n+                // DoS-interface between validation and net_processing) so that\n+                // the interface is cleaner, and so that we disconnect on all the\n+                // reasons that a peer's headers chain is incompatible\n+                // with ours (eg block->nVersion softforks, MTP violations,\n+                // etc), and not just the duplicate-invalid case.\n+                pfrom->fDisconnect = true;\n+            }\n+            return error(\"invalid header received\");\n+        }\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+        if (nodestate->nUnconnectingHeaders > 0) {\n+            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+        }\n+        nodestate->nUnconnectingHeaders = 0;\n+\n+        assert(pindexLast);\n+        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n+\n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n+        if (nCount == MAX_HEADERS_RESULTS) {\n+            // Headers message had its maximum size; the peer may have more headers.\n+            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n+            // from there instead.\n+            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n+        }\n+\n+        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        // If this set of headers is valid and ends in a block with at least as\n+        // much work as our tip, download as much as possible.\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n+            std::vector<const CBlockIndex*> vToFetch;\n+            const CBlockIndex *pindexWalk = pindexLast;\n+            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n+            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n+                    // We don't have this block, and it's not yet in flight.\n+                    vToFetch.push_back(pindexWalk);\n+                }\n+                pindexWalk = pindexWalk->pprev;\n+            }\n+            // If pindexWalk still isn't on our main chain, we're looking at a\n+            // very large reorg at a time we think we're close to caught up to\n+            // the main chain -- this shouldn't really happen.  Bail out on the\n+            // direct fetch and rely on parallel download instead.\n+            if (!chainActive.Contains(pindexWalk)) {\n+                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                        pindexLast->GetBlockHash().ToString(),\n+                        pindexLast->nHeight);\n+            } else {\n+                std::vector<CInv> vGetData;\n+                // Download as much as possible, from earliest to latest.\n+                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n+                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        // Can't download any more from this peer\n+                        break;\n+                    }\n+                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n+                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n+                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n+                }\n+                if (vGetData.size() > 1) {\n+                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                }\n+                if (vGetData.size() > 0) {\n+                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                        // In any case, we want to download using a compact block, not a regular one\n+                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n+                    }\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                }\n+            }\n+        }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n@@ -2047,7 +2254,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // If we end up treating this as a plain headers message, call that as well\n         // without cs_main.\n         bool fRevertToHeaderProcessing = false;\n-        CDataStream vHeadersMsg(SER_NETWORK, PROTOCOL_VERSION);\n \n         // Keep a CBlock for \"optimistic\" compactblock reconstructions (see\n         // below)\n@@ -2164,10 +2370,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 return true;\n             } else {\n                 // If this was an announce-cmpctblock, we want the same treatment as a header message\n-                // Dirty hack to process as if it were just a headers message (TODO: move message handling into their own functions)\n-                std::vector<CBlock> headers;\n-                headers.push_back(cmpctblock.header);\n-                vHeadersMsg << headers;\n                 fRevertToHeaderProcessing = true;\n             }\n         }\n@@ -2176,8 +2378,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (fProcessBLOCKTXN)\n             return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n-        if (fRevertToHeaderProcessing)\n-            return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n+        if (fRevertToHeaderProcessing) {\n+            // Headers received from HB compact block peers are permitted to be\n+            // relayed before full validation (see BIP 152), so we don't want to disconnect\n+            // the peer if the header turns out to be for an invalid block.\n+            // Note that if a peer tries to build on an invalid chain, that\n+            // will be detected and the peer will be banned.\n+            return ProcessHeadersMessage(pfrom, connman, {cmpctblock.header}, chainparams, /*punish_duplicate_invalid=*/false);\n+        }\n \n         if (fBlockReconstructed) {\n             // If we got here, we were able to optimistically reconstruct a\n@@ -2308,169 +2516,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        if (nCount == 0) {\n-            // Nothing interesting. Stop asking this peers for more headers.\n-            return true;\n-        }\n-\n-        const CBlockIndex *pindexLast = nullptr;\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n-        // If this looks like it could be a block announcement (nCount <\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                    headers[0].GetHash().ToString(),\n-                    headers[0].hashPrevBlock.ToString(),\n-                    pindexBestHeader->nHeight,\n-                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom->GetId(), 20);\n-            }\n-            return true;\n-        }\n-\n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n-            }\n-            hashLastBlock = header.GetHash();\n-        }\n-        }\n-\n-        CValidationState state;\n-        if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n-            int nDoS;\n-            if (state.IsInvalid(nDoS)) {\n-                if (nDoS > 0) {\n-                    LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n-                }\n-                return error(\"invalid header received\");\n-            }\n-        }\n-\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-        if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-        }\n-        nodestate->nUnconnectingHeaders = 0;\n-\n-        assert(pindexLast);\n-        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n-\n-        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n-        // because it is set in UpdateBlockAvailability. Some nullptr checks\n-        // are still present, however, as belt-and-suspenders.\n-\n-        if (nCount == MAX_HEADERS_RESULTS) {\n-            // Headers message had its maximum size; the peer may have more headers.\n-            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n-            // from there instead.\n-            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n-        }\n-\n-        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n-        // If this set of headers is valid and ends in a block with at least as\n-        // much work as our tip, download as much as possible.\n-        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            std::vector<const CBlockIndex*> vToFetch;\n-            const CBlockIndex *pindexWalk = pindexLast;\n-            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n-            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n-                    // We don't have this block, and it's not yet in flight.\n-                    vToFetch.push_back(pindexWalk);\n-                }\n-                pindexWalk = pindexWalk->pprev;\n-            }\n-            // If pindexWalk still isn't on our main chain, we're looking at a\n-            // very large reorg at a time we think we're close to caught up to\n-            // the main chain -- this shouldn't really happen.  Bail out on the\n-            // direct fetch and rely on parallel download instead.\n-            if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n-                        pindexLast->GetBlockHash().ToString(),\n-                        pindexLast->nHeight);\n-            } else {\n-                std::vector<CInv> vGetData;\n-                // Download as much as possible, from earliest to latest.\n-                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n-                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                        // Can't download any more from this peer\n-                        break;\n-                    }\n-                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n-                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n-                }\n-                if (vGetData.size() > 0) {\n-                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n-                        // In any case, we want to download using a compact block, not a regular one\n-                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n-                    }\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n-                }\n-            }\n-        }\n-        // If we're in IBD, we want outbound peers that will serve us a useful\n-        // chain. Disconnect peers that are on chains with insufficient work.\n-        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n-            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n-            // headers to fetch from this peer.\n-            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n-                // This peer has too little work on their headers chain to help\n-                // us sync -- disconnect if using an outbound slot (unless\n-                // whitelisted or addnode).\n-                // Note: We compare their tip to nMinimumChainWork (rather than\n-                // chainActive.Tip()) because we won't start block download\n-                // until we have a headers chain that has at least\n-                // nMinimumChainWork, even if a peer has a chain past our tip,\n-                // as an anti-DoS measure.\n-                if (IsOutboundDisconnectionCandidate(pfrom)) {\n-                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n-                    pfrom->fDisconnect = true;\n-                }\n-            }\n-        }\n-\n-        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n-            // If this is an outbound peer, check to see if we should protect\n-            // it from the bad/lagging chain logic.\n-            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n-                nodestate->m_chain_sync.m_protect = true;\n-                ++g_outbound_peers_with_protect_from_disconnect;\n-            }\n-        }\n-        }\n+        // Headers received via a HEADERS message should be valid, and reflect\n+        // the chain the peer is on. If we receive a known-invalid header,\n+        // disconnect the peer if it is using one of our outbound connection\n+        // slots.\n+        bool should_punish = !pfrom->fInbound && !pfrom->m_manual_connection;\n+        return ProcessHeadersMessage(pfrom, connman, headers, chainparams, should_punish);\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing"
      },
      {
        "sha": "78eb6d7302409aba715bb81567d36dddcd34a5e7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba216b5fa63e7e6cae847d1e3621f5c54840f898/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba216b5fa63e7e6cae847d1e3621f5c54840f898/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "patch": "@@ -3079,13 +3079,15 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n // Exposed wrapper for AcceptBlockHeader\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)\n {\n+    if (first_invalid != nullptr) first_invalid->SetNull();\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+                if (first_invalid) *first_invalid = header;\n                 return false;\n             }\n             if (ppindex) {"
      },
      {
        "sha": "93669de6c4d7ae54bb14e042ca0dc84595b001aa",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba216b5fa63e7e6cae847d1e3621f5c54840f898/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba216b5fa63e7e6cae847d1e3621f5c54840f898/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "patch": "@@ -247,8 +247,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[out] state This may be set to an Error state if any error occurred processing them\n  * @param[in]  chainparams The params for the chain we want to connect to\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n+ * @param[out] first_invalid First header that fails validation, if one exists\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr);\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr, CBlockHeader *first_invalid=nullptr);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);"
      }
    ]
  },
  {
    "sha": "60b98f8e145617e9e50a2eb7f3181953e1e8c424",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGI5OGY4ZTE0NTYxN2U5ZTUwYTJlYjdmMzE4MTk1M2UxZThjNDI0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-29T03:13:44Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-29T13:12:12Z"
      },
      "message": "[Util] Update tinyformat.h\n\nUpdates `tinyformat.h` to commit c42f/tinyformat@689695c upstream.",
      "tree": {
        "sha": "538c540f75a15082d33d74db2de480095ca1e61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/538c540f75a15082d33d74db2de480095ca1e61f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60b98f8e145617e9e50a2eb7f3181953e1e8c424",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAln106wACgkQLuufXMCV\nJsH4hg/+NarJsTlqY8LanrR0AcsP2mtHNA/MeT+uExE7EZiAdnL++B45KtAHu1uQ\nfiJ6o9cETpJlGDPhR7iDQMblrkvlcsdDr5vDQBLNEFk2FEZLY229KW9DwTc3nvh2\nFs1sPf3dAcfuQcwFABs5cZmVR33RYuTMwTJaN1nsFKtiLCf6rsBX5qrr9xtnZJ4j\n6QMNBdxZ/KlMZIktZeRQ01SMiNRkk3Nmdr1Z7LSkRuoUyHqrCvxSKypz5h05V+/2\npBt1ih+l2UDWkuXbMieNddhlhqoCZCErwWM+wccJ/qSQBngITpiNV9+R3UE2olBo\n+bk38GY5SCStkPiXm4h9Oxs10Ajr3ik9ouyOHdinPk333GLQ3Pc7S5clqe27hB5j\nz4IE/ahxweNblY+jG179XZoZAXob1Fgfd5ei/Lk0//sjY+1auA6CqEq3QaaBbIlI\ndBRE1CcZoy7ow5dZSSadZ1krfC6NykzT5Il6XyYqmyIq2TdAUk0OMnFbU196pB6f\nS7mLUbI5dXofjHclHfCWCl4aMm1BRsfBSZkuC0q7OqGV02FW5Szza8zc3ZJK8yUk\nyyIIEUbg31++8fne3zAfJPLAZn3UYAUC6LXLYurW6c9cMa2JIEVZLo7I2/jNAg72\ndTWb7QIvfBTfvsl13naf1Se9T7E1IykLAw36Lw6coVR+0lRrm3Q=\n=zuJ/\n-----END PGP SIGNATURE-----",
        "payload": "tree 538c540f75a15082d33d74db2de480095ca1e61f\nparent ba216b5fa63e7e6cae847d1e3621f5c54840f898\nauthor fanquake <fanquake@gmail.com> 1509246824 +0800\ncommitter fanquake <fanquake@gmail.com> 1509282732 +0800\n\n[Util] Update tinyformat.h\n\nUpdates `tinyformat.h` to commit c42f/tinyformat@689695c upstream.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b98f8e145617e9e50a2eb7f3181953e1e8c424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60b98f8e145617e9e50a2eb7f3181953e1e8c424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b98f8e145617e9e50a2eb7f3181953e1e8c424/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba216b5fa63e7e6cae847d1e3621f5c54840f898"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d34cfaa94f73d900ce966993fc0e076e2762a1f6",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60b98f8e145617e9e50a2eb7f3181953e1e8c424/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60b98f8e145617e9e50a2eb7f3181953e1e8c424/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=60b98f8e145617e9e50a2eb7f3181953e1e8c424",
        "patch": "@@ -495,7 +495,11 @@ namespace detail {\n class FormatArg\n {\n     public:\n-        FormatArg() {}\n+        FormatArg()\n+             : m_value(nullptr),\n+             m_formatImpl(nullptr),\n+             m_toIntImpl(nullptr)\n+         { }\n \n         template<typename T>\n         explicit FormatArg(const T& value)\n@@ -507,11 +511,15 @@ class FormatArg\n         void format(std::ostream& out, const char* fmtBegin,\n                     const char* fmtEnd, int ntrunc) const\n         {\n+            assert(m_value);\n+            assert(m_formatImpl);\n             m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n         }\n \n         int toInt() const\n         {\n+            assert(m_value);\n+            assert(m_toIntImpl);\n             return m_toIntImpl(m_value);\n         }\n \n@@ -712,23 +720,27 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n             break;\n         case 'X':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'x': case 'p':\n             out.setf(std::ios::hex, std::ios::basefield);\n             intConversion = true;\n             break;\n         case 'E':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'e':\n             out.setf(std::ios::scientific, std::ios::floatfield);\n             out.setf(std::ios::dec, std::ios::basefield);\n             break;\n         case 'F':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'f':\n             out.setf(std::ios::fixed, std::ios::floatfield);\n             break;\n         case 'G':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'g':\n             out.setf(std::ios::dec, std::ios::basefield);\n             // As in boost::format, let stream decide float format."
      }
    ]
  },
  {
    "sha": "bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjlhYjBmY2NmYmFkZDVjMDMyYTJjZDBiYjMxMzUwNDljZmZhNDJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-29T17:27:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-29T17:28:21Z"
      },
      "message": "Merge #11541: Build: Fix Automake warnings when running autogen.sh\n\ncc5c39d [Build] Add AM_OBJCXXFLAGS and QT_PIE_FLAGS to OBJCXXFLAGS to future-proof darwin targets (fanquake)\nf8c6697 Fix automake warnings when running autogen.sh (Evan Klitzke)\n\nPull request description:\n\n  Adjusted @eklitzke's commit to completely remove GZIP_ENV.\n  Added a commit to address OBJCXXFLAGS.\n  Rebased on master.\n  Relevant info from @theuni & #11013 below.\n\n  --------\n  GZIP_ENV was indeed added for determinism, but gitian exports this as needed, so it's not really necessary. I'd rather just remove it.\n\n  The mm.o rule was added to support XCode 4.2's ancient version of automake. That's irrelevant now, so it makes sense to remove that too.\n\n  All darwin targets are PIE by default, so we don't technically need the flags, but I'd be more comfortable if we hooked up the OBJCXXFLAGS in case future ones are added.\n\n  --------\n\n  The second commit addresses the last point, but could probably use a better commit message.\n  These warnings are removed from autogen output:\n  ```\n  Makefile.am:12: warning: user variable 'GZIP_ENV' defined here ...\n  /usr/local/Cellar/automake/1.15.1/share/automake-1.15/am/distdir.am: ... overrides Automake variable 'GZIP_ENV' defined here\n  src/Makefile.am: installing 'build-aux/depcomp'\n  src/Makefile.am:503: warning: user target '.mm.o' defined here ...\n  /usr/local/Cellar/automake/1.15.1/share/automake-1.15/am/depend2.am: ... overrides Automake target '.mm.o' defined here\n  ```\n\nTree-SHA512: bd59df5f6d3aafe35d5e36925bfe61cc71e774583a0438d7dd946c9e7ecf6e59d42f90a58b8cfef0faa404c81050338ad4cefe721b4a949af881e73b6ab254d4",
      "tree": {
        "sha": "6e37500eb35dbe63b1a64066380bd3cb4effb98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e37500eb35dbe63b1a64066380bd3cb4effb98b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ9g+1AAoJEB5K7WKYbNJddRoH/j8vqOnX0yIR1DSH7HTK34aX\nTgCFTbH1s55OaNBxOnHL08NbptFA8ZY+tCtybuZ+w4z33RFi+p4zQKdakXbKwZJU\n84Bb8O6ZLc2eElGRprWxniGbIrQN6536Li/6lLjF4g1J3mGTE83Aq4Hcst31dodW\nVi38ujt0r0D3O5YGme32ubG+UMgI96mq5g6EBhetVQk9GlciJfL++XmLPdkkdmrw\neoIGM8P1UE2EI8QNs9cScnvSnvNshwu+P9aOzyM7Spp/NCZqsCuIAlNZz2cmVKyr\naC5Tt5S4FRGrmHhqwvRD8bHGCj5mo5O4MCQCNBXct+qYfSjoUCNjyC+T1kXr0Eo=\n=DA6W\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e37500eb35dbe63b1a64066380bd3cb4effb98b\nparent ba216b5fa63e7e6cae847d1e3621f5c54840f898\nparent cc5c39ddca4cf5e01c45fdf69462f50ac984e264\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509298028 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509298101 +0100\n\nMerge #11541: Build: Fix Automake warnings when running autogen.sh\n\ncc5c39d [Build] Add AM_OBJCXXFLAGS and QT_PIE_FLAGS to OBJCXXFLAGS to future-proof darwin targets (fanquake)\nf8c6697 Fix automake warnings when running autogen.sh (Evan Klitzke)\n\nPull request description:\n\n  Adjusted @eklitzke's commit to completely remove GZIP_ENV.\n  Added a commit to address OBJCXXFLAGS.\n  Rebased on master.\n  Relevant info from @theuni & #11013 below.\n\n  --------\n  GZIP_ENV was indeed added for determinism, but gitian exports this as needed, so it's not really necessary. I'd rather just remove it.\n\n  The mm.o rule was added to support XCode 4.2's ancient version of automake. That's irrelevant now, so it makes sense to remove that too.\n\n  All darwin targets are PIE by default, so we don't technically need the flags, but I'd be more comfortable if we hooked up the OBJCXXFLAGS in case future ones are added.\n\n  --------\n\n  The second commit addresses the last point, but could probably use a better commit message.\n  These warnings are removed from autogen output:\n  ```\n  Makefile.am:12: warning: user variable 'GZIP_ENV' defined here ...\n  /usr/local/Cellar/automake/1.15.1/share/automake-1.15/am/distdir.am: ... overrides Automake variable 'GZIP_ENV' defined here\n  src/Makefile.am: installing 'build-aux/depcomp'\n  src/Makefile.am:503: warning: user target '.mm.o' defined here ...\n  /usr/local/Cellar/automake/1.15.1/share/automake-1.15/am/depend2.am: ... overrides Automake target '.mm.o' defined here\n  ```\n\nTree-SHA512: bd59df5f6d3aafe35d5e36925bfe61cc71e774583a0438d7dd946c9e7ecf6e59d42f90a58b8cfef0faa404c81050338ad4cefe721b4a949af881e73b6ab254d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba216b5fa63e7e6cae847d1e3621f5c54840f898"
      },
      {
        "sha": "cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc5c39ddca4cf5e01c45fdf69462f50ac984e264",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc5c39ddca4cf5e01c45fdf69462f50ac984e264"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a7092bb334fc46e6c7459cdbf993efbd3939465a",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "patch": "@@ -9,7 +9,6 @@ SUBDIRS += doc/man\n endif\n .PHONY: deploy FORCE\n \n-GZIP_ENV=\"-9n\"\n export PYTHONPATH\n \n if BUILD_BITCOIN_LIBS"
      },
      {
        "sha": "3e43076878a98d54132e2b68f8f586b8c0f09349",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "patch": "@@ -500,10 +500,6 @@ clean-local:\n \t## FIXME: How to get the appropriate modulename_CPPFLAGS in here?\n \t$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@\n \n-.mm.o:\n-\t$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n-\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) -c -o $@ $<\n-\n check-symbols: $(bin_PROGRAMS)\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\""
      },
      {
        "sha": "0767ee1302be19baabef2009c57955926323282b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "patch": "@@ -368,6 +368,7 @@ BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n+qt_libbitcoinqt_a_OBJCXXFLAGS = $(AM_OBJCXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)"
      }
    ]
  },
  {
    "sha": "2530bf27b72e53cc6ffec27de35f3b487984833d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTMwYmYyN2I3MmU1M2NjNmZmZWMyN2RlMzVmM2I0ODc5ODQ4MzNk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-30T13:28:19Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-30T19:00:17Z"
      },
      "message": "net: Add missing lock in ProcessHeadersMessage(...)\n\nReading the variable mapBlockIndex requires holding the mutex cs_main.\n\nThe new \"Disconnect outbound peers relaying invalid headers\" code\nadded in commit 37886d5e2f9992678dea4b1bd893f4f10d61d3ad and merged\nas part of #11568 two days ago did not lock cs_main prior to accessing\nmapBlockIndex.",
      "tree": {
        "sha": "1c58acb71c17cfafaed5f31f841ce46c915678bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c58acb71c17cfafaed5f31f841ce46c915678bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2530bf27b72e53cc6ffec27de35f3b487984833d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2530bf27b72e53cc6ffec27de35f3b487984833d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2530bf27b72e53cc6ffec27de35f3b487984833d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2530bf27b72e53cc6ffec27de35f3b487984833d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "92b7a75f736932964a524252ca8a95d8e047b9c0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2530bf27b72e53cc6ffec27de35f3b487984833d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2530bf27b72e53cc6ffec27de35f3b487984833d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2530bf27b72e53cc6ffec27de35f3b487984833d",
        "patch": "@@ -1262,8 +1262,8 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            LOCK(cs_main);\n             if (nDoS > 0) {\n-                LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n             if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {"
      }
    ]
  },
  {
    "sha": "8335cb478183d800e274f6e96f9d7269ae584220",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzM1Y2I0NzgxODNkODAwZTI3NGY2ZTk2ZjlkNzI2OWFlNTg0MjIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-31T12:10:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-31T12:10:58Z"
      },
      "message": "Merge #11578: net: Add missing lock in ProcessHeadersMessage(...)\n\n2530bf2 net: Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n\nPull request description:\n\n  Add missing lock in `ProcessHeadersMessage(...)`.\n\n  Reading the variable `mapBlockIndex` requires holding the mutex `cs_main`.\n\n  The new \"Disconnect outbound peers relaying invalid headers\" code added in commit 37886d5e2f9992678dea4b1bd893f4f10d61d3ad and merged as part of #11568 two days ago did not lock `cs_main` prior to accessing `mapBlockIndex`.\n\nTree-SHA512: b799c234be8043d036183a00bc7867bbf3bd7ffe3baa94c88529da3b3cd0571c31ed11dadfaf29c5b8498341d6d0a3c928029a43b69f3267ef263682c91563a3",
      "tree": {
        "sha": "1c58acb71c17cfafaed5f31f841ce46c915678bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c58acb71c17cfafaed5f31f841ce46c915678bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8335cb478183d800e274f6e96f9d7269ae584220",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+GhSAAoJEB5K7WKYbNJd+QAIALLZKJdBNnInTOxqDk8XXyA3\nXWBpNe8ghYLZp0TjTI/cr0373KsS3VHezjDeu4pYWOFd7JDcaoDCHhwRyWHKza84\nN6P7ISOaC6a3SbosSSPENJKZtTYTxPg9FME5a518OR0h9E2le7wb1UqzV3xqcgNB\n3RaGYYCM4FXIzhKb9yUX9hehISXfs666uJPuj1Yxpc8/Pbpac7vVPyu35I2quvuR\nh7x/8nGBzw6BBh07zCNbAV5NuSsGEOFPTpEdFtcZ+XUhOnYVBgJIV91Ck/13+nVz\nXwauchfzAqRfH7pleIHigGm/agJC2Hxv4wtg4+Ku8wvAOZrAnBjy/K9opMvOg1o=\n=er6T\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c58acb71c17cfafaed5f31f841ce46c915678bb\nparent bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b\nparent 2530bf27b72e53cc6ffec27de35f3b487984833d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509451821 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509451858 +0100\n\nMerge #11578: net: Add missing lock in ProcessHeadersMessage(...)\n\n2530bf2 net: Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n\nPull request description:\n\n  Add missing lock in `ProcessHeadersMessage(...)`.\n\n  Reading the variable `mapBlockIndex` requires holding the mutex `cs_main`.\n\n  The new \"Disconnect outbound peers relaying invalid headers\" code added in commit 37886d5e2f9992678dea4b1bd893f4f10d61d3ad and merged as part of #11568 two days ago did not lock `cs_main` prior to accessing `mapBlockIndex`.\n\nTree-SHA512: b799c234be8043d036183a00bc7867bbf3bd7ffe3baa94c88529da3b3cd0571c31ed11dadfaf29c5b8498341d6d0a3c928029a43b69f3267ef263682c91563a3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8335cb478183d800e274f6e96f9d7269ae584220",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8335cb478183d800e274f6e96f9d7269ae584220",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8335cb478183d800e274f6e96f9d7269ae584220/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b"
      },
      {
        "sha": "2530bf27b72e53cc6ffec27de35f3b487984833d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2530bf27b72e53cc6ffec27de35f3b487984833d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2530bf27b72e53cc6ffec27de35f3b487984833d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "92b7a75f736932964a524252ca8a95d8e047b9c0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8335cb478183d800e274f6e96f9d7269ae584220/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8335cb478183d800e274f6e96f9d7269ae584220/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8335cb478183d800e274f6e96f9d7269ae584220",
        "patch": "@@ -1262,8 +1262,8 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            LOCK(cs_main);\n             if (nDoS > 0) {\n-                LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n             if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {"
      }
    ]
  },
  {
    "sha": "3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjRhYzQzYmMzNzE1NjFiNWZhNTU5YmNjYjE3ZGMwNzAyYmQ0YjY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T19:38:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T17:36:02Z"
      },
      "message": "Rewrite p2p-acceptblock in preparation for slight behavior changes\n\nRemoves checking whitelisted behavior (which will be removed, the\ndifference in behavior here makes little sense) and no longer\nrequires that blocks at the same work as our tip be dropped if not\nrequested (in part because we *do* request those blocks).",
      "tree": {
        "sha": "5ccd26019e63bf1351b92cead7ba0f872a335556",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ccd26019e63bf1351b92cead7ba0f872a335556"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b4ac43bc371561b5fa559bccb17dc0702bd4b69/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d93fa261f079d529a94ff26aa406a49e28d10340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93fa261f079d529a94ff26aa406a49e28d10340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d93fa261f079d529a94ff26aa406a49e28d10340"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 122,
      "deletions": 114
    },
    "files": [
      {
        "sha": "9b2c1a73fc2f2f49f0eee3db4d61c452d1d87e0a",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 122,
        "deletions": 114,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b4ac43bc371561b5fa559bccb17dc0702bd4b69/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b4ac43bc371561b5fa559bccb17dc0702bd4b69/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
        "patch": "@@ -4,42 +4,32 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n-low-work unrequested blocks.\n-\n-We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n-respectively.\n+We have one NodeConn connection to node0 called test_node, and one to node1\n+called min_work_node.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance for node0 and node1, but node2 should skip processing\n-   due to nMinimumChainWork.\n+   The tip should advance for node0, but node1 should skip processing due to\n+   nMinimumChainWork.\n \n-Node2 is unused in tests 3-7:\n+Node1 is unused in tests 3-7:\n \n-3. Mine a block that forks the previous block, and deliver to each node from\n-   corresponding peer.\n-   Node0 should not process this block (just accept the header), because it is\n-   unrequested and doesn't have more work than the tip.\n-   Node1 should process because this is coming from a whitelisted peer.\n+3. Mine a block that forks from the genesis block, and deliver to test_node.\n+   Node0 should not process this block (just accept the header), because it\n+   is unrequested and doesn't have more or equal work to the tip.\n \n-4. Send another block that builds on the forking block.\n-   Node0 should process this block but be stuck on the shorter chain, because\n-   it's missing an intermediate block.\n-   Node1 should reorg to this longer chain.\n+4a,b. Send another two blocks that build on the forking block.\n+   Node0 should process the second block but be stuck on the shorter chain,\n+   because it's missing an intermediate block.\n \n-4b.Send 288 more blocks on the longer chain.\n+4c.Send 288 more blocks on the longer chain (the number of blocks ahead\n+   we currently store).\n    Node0 should process all but the last block (too far ahead in height).\n-   Send all headers to Node1, and then send the last block in that chain.\n-   Node1 should accept the block because it's coming from a whitelisted peer.\n \n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n@@ -52,7 +42,7 @@\n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n \n-8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n+8. Test Node1 is able to sync when connected to node0 (which should have sufficient\n work on its chain).\n \n \"\"\"\n@@ -71,8 +61,8 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n+        self.num_nodes = 2\n+        self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n@@ -84,132 +74,149 @@ def setup_network(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n-        white_node = NodeConnCB()  # connects to node1 (whitelisted)\n-        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n+        test_node = NodeConnCB()   # connects to node0\n+        min_work_node = NodeConnCB()  # connects to node1\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], min_work_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n-        min_work_node.add_connection(connections[2])\n+        min_work_node.add_connection(connections[1])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n         min_work_node.wait_for_verack()\n \n-        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n+        # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted by nodes 1/2\n+        # This should be accepted by node0\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(3):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n-        white_node.send_message(msg_block(blocks_h2[1]))\n-        min_work_node.send_message(msg_block(blocks_h2[2]))\n+        min_work_node.send_message(msg_block(blocks_h2[1]))\n \n-        for x in [test_node, white_node, min_work_node]:\n+        for x in [test_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 2)\n-        assert_equal(self.nodes[2].getblockcount(), 1)\n-        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n+        assert_equal(self.nodes[1].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n \n-        # 3. Send another block that builds on the original tip.\n-        blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in range(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n-            blocks_h2f[i].solve()\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n-        white_node.send_message(msg_block(blocks_h2f[1]))\n+        # 3. Send another block that builds on genesis.\n+        block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n+        block_time += 1\n+        block_h1f.solve()\n+        test_node.send_message(msg_block(block_h1f))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h2f[0].hash:\n+            if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_h1f.hash)\n+\n+        # 4. Send another two block that build on the fork.\n+        block_h2f = create_block(block_h1f.sha256, create_coinbase(2), block_time)\n+        block_time += 1\n+        block_h2f.solve()\n+        test_node.send_message(msg_block(block_h2f))\n \n-        for x in self.nodes[1].getchaintips():\n-            if x['hash'] == blocks_h2f[1].hash:\n-                assert_equal(x['status'], \"valid-headers\")\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n+        # can't be fully validated.\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_h2f.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n \n-        self.log.info(\"Second height 2 block accepted only from whitelisted peer\")\n+        # But this block should be accepted by node since it has equal work.\n+        # TODO: We currently drop this block but likely shouldn't\n+        #self.nodes[0].getblock(block_h2f.hash)\n+        self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n-        # 4. Now send another block that builds on the forking chain.\n-        blocks_h3 = []\n-        for i in range(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n-            blocks_h3[i].solve()\n-        test_node.send_message(msg_block(blocks_h3[0]))\n-        white_node.send_message(msg_block(blocks_h3[1]))\n+        # 4b. Now send another block that builds on the forking chain.\n+        block_h3 = create_block(block_h2f.sha256, create_coinbase(3), block_h2f.nTime+1)\n+        block_h3.solve()\n+        test_node.send_message(msg_block(block_h3))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n-        # Since the earlier block was not processed by node0, the new block\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h3[0].hash:\n+            if x['hash'] == block_h3.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        self.nodes[0].getblock(block_h3.hash)\n+\n+        # But this block should be accepted by node since it has more work.\n+        self.nodes[0].getblock(block_h3.hash)\n+        self.log.info(\"Unrequested more-work block accepted\")\n+\n+        # 4c. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node (as long as its not missing any headers)\n+        tip = block_h3\n+        all_blocks = []\n+        for i in range(288):\n+            next_block = create_block(tip.sha256, create_coinbase(i + 4), tip.nTime+1)\n+            next_block.solve()\n+            all_blocks.append(next_block)\n+            tip = next_block\n+\n+        # Now send the block at height 5 and check that it wasn't accepted (missing header)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblock, all_blocks[1].hash)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblockheader, all_blocks[1].hash)\n \n-        # But this block should be accepted by node0 since it has more work.\n-        self.nodes[0].getblock(blocks_h3[0].hash)\n-        self.log.info(\"Unrequested more-work block accepted from non-whitelisted peer\")\n+        # The block at height 5 should be accepted if we provide the missing header, though\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(all_blocks[0]))\n+        test_node.send_message(headers_message)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(all_blocks[1].hash)\n \n-        # Node1 should have accepted and reorged.\n-        assert_equal(self.nodes[1].getblockcount(), 3)\n-        self.log.info(\"Successfully reorged to length 3 chain from whitelisted peer\")\n+        # Now send the blocks in all_blocks\n+        for i in range(288):\n+            test_node.send_message(msg_block(all_blocks[i]))\n+        test_node.sync_with_ping()\n \n-        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n-        # the last (height-too-high) on node0.  Node1 should process the tip if\n-        # we give it the headers chain leading to the tip.\n-        tips = blocks_h3\n-        headers_message = msg_headers()\n-        all_blocks = []   # node0's blocks\n-        for j in range(2):\n-            for i in range(288):\n-                next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n-                next_block.solve()\n-                if j==0:\n-                    test_node.send_message(msg_block(next_block))\n-                    all_blocks.append(next_block)\n-                else:\n-                    headers_message.headers.append(CBlockHeader(next_block))\n-                tips[j] = next_block\n-\n-        time.sleep(2)\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n-        headers_message.headers.pop() # Ensure the last block is unrequested\n-        white_node.send_message(headers_message) # Send headers leading to tip\n-        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        white_node.sync_with_ping()\n-        self.nodes[1].getblock(tips[1].hash)\n-        self.log.info(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n-\n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        # Here, if the sleep is too short, the test could falsely succeed (if the\n-        # node hasn't processed the block by the time the sleep returns, and then\n-        # the node processes it and incorrectly advances the tip).\n-        # But this would be caught later on, when we verify that an inv triggers\n-        # a getdata request for this block.\n+        # The node should have requested the blocks at some point, so\n+        # disconnect/reconnect first\n+        connections[0].disconnect_node()\n+        test_node.wait_for_disconnect()\n+\n+        test_node = NodeConnCB()   # connects to node (not whitelisted)\n+        connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+        test_node.add_connection(connections[0])\n+\n+        test_node.wait_for_verack()\n+        test_node.send_message(msg_block(block_h1f))\n+        test_node.send_message(msg_block(block_h2f)) # This should not be required\n+\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         self.log.info(\"Unrequested block that would complete more-work chain was ignored\")\n@@ -220,27 +227,28 @@ def run_test(self):\n         with mininode_lock:\n             # Clear state so we can check the getdata request\n             test_node.last_message.pop(\"getdata\", None)\n-            test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n+            test_node.send_message(msg_inv([CInv(2, block_h3.sha256)]))\n \n         test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_message[\"getdata\"]\n \n         # Check that the getdata includes the right block\n-        assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n+        assert_equal(getdata.inv[0].hash, block_h1f.sha256)\n         self.log.info(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n+        test_node.send_message(msg_block(block_h1f))\n+        test_node.send_message(msg_block(block_h2f)) # This should not be required\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node2 to node0 and ensure it is able to sync\n-        connect_nodes(self.nodes[0], 2)\n-        sync_blocks([self.nodes[0], self.nodes[2]])\n-        self.log.info(\"Successfully synced nodes 2 and 0\")\n+        # 8. Connect node1 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.log.info(\"Successfully synced nodes 1 and 0\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      }
    ]
  },
  {
    "sha": "3d9c70ca0fd5d42f31114b689714af1825f0ed30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDljNzBjYTBmZDVkNDJmMzExMTRiNjg5NzE0YWYxODI1ZjBlZDMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T20:01:51Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T17:36:06Z"
      },
      "message": "Stop always storing blocks from whitelisted peers\n\nThere is no reason to wish to store blocks on disk always just\nbecause a peer is whitelisted. This appears to be a historical\nquirk to avoid breaking things when the accept limits were added.",
      "tree": {
        "sha": "4eaa24c761798416ad83ab0aac95b1e3f0a5c75d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4eaa24c761798416ad83ab0aac95b1e3f0a5c75d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d9c70ca0fd5d42f31114b689714af1825f0ed30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d9c70ca0fd5d42f31114b689714af1825f0ed30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d9c70ca0fd5d42f31114b689714af1825f0ed30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d9c70ca0fd5d42f31114b689714af1825f0ed30/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b4ac43bc371561b5fa559bccb17dc0702bd4b69"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c093d1d57f905fecd538d52868ec008cbe40a4e7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d9c70ca0fd5d42f31114b689714af1825f0ed30/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d9c70ca0fd5d42f31114b689714af1825f0ed30/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3d9c70ca0fd5d42f31114b689714af1825f0ed30",
        "patch": "@@ -2480,11 +2480,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n-        // Process all blocks from whitelisted peers, even if not requested,\n-        // unless we're still syncing with the network.\n-        // Such an unrequested block may still be processed, subject to the\n-        // conditions in AcceptBlock().\n-        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        bool forceProcessing = false;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "932f118e6a3779bb3d6c3cc83963cf34ac150e42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzJmMTE4ZTZhMzc3OWJiM2Q2YzNjYzgzOTYzY2YzNGFjMTUwZTQy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T20:04:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T17:36:06Z"
      },
      "message": "Accept unrequested blocks with work equal to our tip\n\nThis is a simple change that makes our accept requirements the\nsame as our request requirements, (ever so slightly) further\ndecoupling our consensus logic from our FindNextBlocksToDownload\nlogic in net_processing.",
      "tree": {
        "sha": "0905a7e98cc673f0cf5550ce0cf576735b73d8d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0905a7e98cc673f0cf5550ce0cf576735b73d8d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/932f118e6a3779bb3d6c3cc83963cf34ac150e42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/932f118e6a3779bb3d6c3cc83963cf34ac150e42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/932f118e6a3779bb3d6c3cc83963cf34ac150e42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/932f118e6a3779bb3d6c3cc83963cf34ac150e42/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d9c70ca0fd5d42f31114b689714af1825f0ed30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d9c70ca0fd5d42f31114b689714af1825f0ed30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d9c70ca0fd5d42f31114b689714af1825f0ed30"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9ea8c31b7db75e13e812cb1de4acef51def1d37e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/932f118e6a3779bb3d6c3cc83963cf34ac150e42/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/932f118e6a3779bb3d6c3cc83963cf34ac150e42/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=932f118e6a3779bb3d6c3cc83963cf34ac150e42",
        "patch": "@@ -3115,7 +3115,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    bool fHasMoreOrSameWork = (chainActive.Tip() ? pindex->nChainWork >= chainActive.Tip()->nChainWork : true);\n     // Blocks that are too out-of-order needlessly limit the effectiveness of\n     // pruning, because pruning will not delete block files that contain any\n     // blocks which are too close in height to the tip.  Apply this test\n@@ -3132,9 +3132,9 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n-        if (!fHasMoreWork) return true;     // Don't process less-work chains\n-        if (fTooFarAhead) return true;      // Block height is too high\n+        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n+        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n+        if (fTooFarAhead) return true;        // Block height is too high\n \n         // Protect against DoS attacks from low-work chains.\n         // If our tip is behind, a peer could try to send us"
      },
      {
        "sha": "36e0bd9ec68ce95bcb70e0e6135ac0f7dd631833",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/932f118e6a3779bb3d6c3cc83963cf34ac150e42/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/932f118e6a3779bb3d6c3cc83963cf34ac150e42/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=932f118e6a3779bb3d6c3cc83963cf34ac150e42",
        "patch": "@@ -142,8 +142,7 @@ def run_test(self):\n         assert(tip_entry_found)\n \n         # But this block should be accepted by node since it has equal work.\n-        # TODO: We currently drop this block but likely shouldn't\n-        #self.nodes[0].getblock(block_h2f.hash)\n+        self.nodes[0].getblock(block_h2f.hash)\n         self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n         # 4b. Now send another block that builds on the forking chain.\n@@ -215,7 +214,6 @@ def run_test(self):\n \n         test_node.wait_for_verack()\n         test_node.send_message(msg_block(block_h1f))\n-        test_node.send_message(msg_block(block_h2f)) # This should not be required\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n@@ -239,7 +237,6 @@ def run_test(self):\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(block_h1f))\n-        test_node.send_message(msg_block(block_h2f)) # This should not be required\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)"
      }
    ]
  },
  {
    "sha": "015a5258adffb0cf394f387a95ac9c8afc34cfc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTVhNTI1OGFkZmZiMGNmMzk0ZjM4N2E5NWFjOWM4YWZjMzRjZmMz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-19T20:55:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T17:51:30Z"
      },
      "message": "Reject headers building on invalid chains by tracking invalidity\n\nThis tracks the set of all known invalid-themselves blocks (ie\nblocks which we attempted to connect but which were found to be\ninvalid). This is used to cheaply check if new headers build on an\ninvalid chain.\n\nWhile we're at it we also resolve an edge-case in invalidateblock\non pruned nodes which results in them needing a reindex if they\nfail to reorg.",
      "tree": {
        "sha": "8aeccc239b697447c3fce49fa07807175ad798cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aeccc239b697447c3fce49fa07807175ad798cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/015a5258adffb0cf394f387a95ac9c8afc34cfc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/015a5258adffb0cf394f387a95ac9c8afc34cfc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/015a5258adffb0cf394f387a95ac9c8afc34cfc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/015a5258adffb0cf394f387a95ac9c8afc34cfc3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "932f118e6a3779bb3d6c3cc83963cf34ac150e42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/932f118e6a3779bb3d6c3cc83963cf34ac150e42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/932f118e6a3779bb3d6c3cc83963cf34ac150e42"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 66,
      "deletions": 8
    },
    "files": [
      {
        "sha": "60f44c595ff863fc5155b126760adcaed74f1a5b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 8,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/015a5258adffb0cf394f387a95ac9c8afc34cfc3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/015a5258adffb0cf394f387a95ac9c8afc34cfc3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=015a5258adffb0cf394f387a95ac9c8afc34cfc3",
        "patch": "@@ -156,6 +156,26 @@ namespace {\n     /** chainwork for the last block that preciousblock has been applied to. */\n     arith_uint256 nLastPreciousChainwork = 0;\n \n+    /** In order to efficiently track invalidity of headers, we keep the set of\n+      * blocks which we tried to connect and found to be invalid here (ie which\n+      * were set to BLOCK_FAILED_VALID since the last restart). We can then\n+      * walk this set and check if a new header is a descendant of something in\n+      * this set, preventing us from having to walk mapBlockIndex when we try\n+      * to connect a bad block and fail.\n+      *\n+      * While this is more complicated than marking everything which descends\n+      * from an invalid block as invalid at the time we discover it to be\n+      * invalid, doing so would require walking all of mapBlockIndex to find all\n+      * descendants. Since this case should be very rare, keeping track of all\n+      * BLOCK_FAILED_VALID blocks in a set should be just fine and work just as\n+      * well.\n+      *\n+      * Because we alreardy walk mapBlockIndex in height-order at startup, we go\n+      * ahead and mark descendants of invalid blocks as FAILED_CHILD at that time,\n+      * instead of putting things in this set.\n+      */\n+    std::set<CBlockIndex*> g_failed_blocks;\n+\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -1180,6 +1200,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n+        g_failed_blocks.insert(pindex);\n         setDirtyBlockIndex.insert(pindex);\n         setBlockIndexCandidates.erase(pindex);\n         InvalidChainFound(pindex);\n@@ -2533,17 +2554,18 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+    // We first disconnect backwards and then mark the blocks as invalid.\n+    // This prevents a case where pruned nodes may fail to invalidateblock\n+    // and be left unable to start as they have no tip candidates (as there\n+    // are no blocks that meet the \"have data and are not invalid per\n+    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+\n+    bool pindex_was_in_chain = false;\n+    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n     DisconnectedBlockTransactions disconnectpool;\n     while (chainActive.Contains(pindex)) {\n-        CBlockIndex *pindexWalk = chainActive.Tip();\n-        pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n-        setDirtyBlockIndex.insert(pindexWalk);\n-        setBlockIndexCandidates.erase(pindexWalk);\n+        pindex_was_in_chain = true;\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n@@ -2554,6 +2576,21 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         }\n     }\n \n+    // Now mark the blocks we just disconnected as descendants invalid\n+    // (note this may not be all descendants).\n+    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n+        setDirtyBlockIndex.insert(invalid_walk_tip);\n+        setBlockIndexCandidates.erase(invalid_walk_tip);\n+        invalid_walk_tip = invalid_walk_tip->pprev;\n+    }\n+\n+    // Mark the block itself as invalid.\n+    pindex->nStatus |= BLOCK_FAILED_VALID;\n+    setDirtyBlockIndex.insert(pindex);\n+    setBlockIndexCandidates.erase(pindex);\n+    g_failed_blocks.insert(pindex);\n+\n     // DisconnectTip will add transactions to disconnectpool; try to add these\n     // back to the mempool.\n     UpdateMempoolForReorg(disconnectpool, true);\n@@ -2591,6 +2628,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n                 // Reset invalid block marker if it was pointing to one of those.\n                 pindexBestInvalid = nullptr;\n             }\n+            g_failed_blocks.erase(it->second);\n         }\n         it++;\n     }\n@@ -3066,6 +3104,21 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            for (const CBlockIndex* failedit : g_failed_blocks) {\n+                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                    assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                    CBlockIndex* invalid_walk = pindexPrev;\n+                    while (invalid_walk != failedit) {\n+                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                        setDirtyBlockIndex.insert(invalid_walk);\n+                        invalid_walk = invalid_walk->pprev;\n+                    }\n+                    return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+                }\n+            }\n+        }\n     }\n     if (pindex == nullptr)\n         pindex = AddToBlockIndex(block);\n@@ -3492,6 +3545,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n                 pindex->nChainTx = pindex->nTx;\n             }\n         }\n+        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {\n+            pindex->nStatus |= BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(pindex);\n+        }\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->nChainTx || pindex->pprev == nullptr))\n             setBlockIndexCandidates.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n@@ -3882,6 +3939,7 @@ void UnloadBlockIndex()\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n+    g_failed_blocks.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {"
      }
    ]
  },
  {
    "sha": "00dcda60f6ee63d35bec640f27efe2338dd71270",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGRjZGE2MGY2ZWU2M2QzNWJlYzY0MGYyN2VmZTIzMzhkZDcxMjcw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T20:57:43Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T17:51:34Z"
      },
      "message": "[qa] test that invalid blocks on an invalid chain get a disconnect",
      "tree": {
        "sha": "e5c038a4552966133a6e62893935c020eb9760fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5c038a4552966133a6e62893935c020eb9760fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00dcda60f6ee63d35bec640f27efe2338dd71270",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dcda60f6ee63d35bec640f27efe2338dd71270",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00dcda60f6ee63d35bec640f27efe2338dd71270",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dcda60f6ee63d35bec640f27efe2338dd71270/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "015a5258adffb0cf394f387a95ac9c8afc34cfc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/015a5258adffb0cf394f387a95ac9c8afc34cfc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/015a5258adffb0cf394f387a95ac9c8afc34cfc3"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 80,
      "deletions": 4
    },
    "files": [
      {
        "sha": "220b7763694ed54f14b3403722ddacc5a544bad8",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 80,
        "deletions": 4,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dcda60f6ee63d35bec640f27efe2338dd71270/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dcda60f6ee63d35bec640f27efe2338dd71270/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=00dcda60f6ee63d35bec640f27efe2338dd71270",
        "patch": "@@ -42,16 +42,20 @@\n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n \n-8. Test Node1 is able to sync when connected to node0 (which should have sufficient\n-work on its chain).\n+8. Create a fork which is invalid at a height longer than the current chain\n+   (ie to which the node will try to reorg) but which has headers built on top\n+   of the invalid block. Check that we get disconnected if we send more headers\n+   on the chain the node now knows to be invalid.\n \n+9. Test Node1 is able to sync when connected to node0 (which should have sufficient\n+   work on its chain).\n \"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n \n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n@@ -240,9 +244,81 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_292.hash)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            # Only wait a short while so the test doesn't take forever if we do get\n+            # disconnected\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:\n+            test_node.wait_for_disconnect()\n+\n+            test_node = NodeConnCB()   # connects to node (not whitelisted)\n+            connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+            test_node.add_connection(connections[0])\n+\n+            NetworkThread().start() # Start up network handling in another thread\n+            test_node.wait_for_verack()\n+\n+        # We should have failed reorg and switched back to 290 (but have block 291)\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getblock(block_291.hash)[\"confirmations\"], -1)\n+\n+        # Now send a new header on the invalid chain, indicating we're forked off, and expect to get disconnected\n+        block_293 = create_block(block_292.sha256, create_coinbase(293), block_292.nTime+1)\n+        block_293.solve()\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_293))\n+        test_node.send_message(headers_message)\n+        test_node.wait_for_disconnect()\n+\n+        # 9. Connect node1 to node0 and ensure it is able to sync\n         connect_nodes(self.nodes[0], 1)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")"
      }
    ]
  },
  {
    "sha": "f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Q0YWRmYTZmZjVkYjE4MGVjMDlkOTNmNzhjZGM4YmZkYTI2Zjk2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T01:28:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T17:51:34Z"
      },
      "message": "Make p2p-acceptablock not an extended test",
      "tree": {
        "sha": "30800ef56af6f130665c90a632629a4056692e13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30800ef56af6f130665c90a632629a4056692e13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00dcda60f6ee63d35bec640f27efe2338dd71270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dcda60f6ee63d35bec640f27efe2338dd71270",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00dcda60f6ee63d35bec640f27efe2338dd71270"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca36426a0a2b51e721021858f7bc47b3dc33b094",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
        "patch": "@@ -125,6 +125,7 @@\n     'minchainwork.py',\n     'p2p-fingerprint.py',\n     'uacomment.py',\n+    'p2p-acceptblock.py',\n ]\n \n EXTENDED_SCRIPTS = [\n@@ -152,7 +153,6 @@\n     'txn_clone.py --mineblock',\n     'notifications.py',\n     'invalidateblock.py',\n-    'p2p-acceptblock.py',\n     'replace-by-fee.py',\n ]\n "
      }
    ]
  },
  {
    "sha": "720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjBkOWU4ZmExZDFjNzUxNmU4Mjc4ZWFhZjYwNzg5ZDJmMmM4YTUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-01T06:22:41Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-01T06:22:41Z"
      },
      "message": "[Wallet] always show help-line of wallet encryption calls",
      "tree": {
        "sha": "ae67666fbc6eb29e0444aad799e20cdedb2d8be2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae67666fbc6eb29e0444aad799e20cdedb2d8be2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAln5aFQACgkQHrd2uwPH\nki1Rmw/8C2AkI3zmRyN3njhf0apQi+AcmLMhOZaHyABdAyPzUIWIoF+vVAqquBvo\no/gcxCsyk45b+t1JEKM0qrQx9xhE9ljbVAL7ClKjrm5VbcG5R2bWc36WjmaVu5M9\nBYk4lB0pJnqi012dgi7qC//akKe0uLbuECXH7twpdVkYohgfx6GZt7eomc9/98yj\n1N+8QwK4o8IwDFE1mGaaoKQp+Ksa694xPGyhU4E1aRXZrBmb0RcZEajNMFDue1Xn\nUk83so0tExAdB8tmcpxwsWFDtUuf6KCYQMzVMvBaC87uZqAV2gYTTTvwPw4dKT6t\nHKzwpWc38wbmG2qXJv54z+sC8KZ9SSFSynNGLZtlTqMNBp7b41rqz20HAKtMpk3G\n70STXmJ0oV6jOeVe2hj7LPO7IGcvKAtxCLC5Mq5KsB4/r7lPuk1SeTwQYPAe8Kok\nJS7687JKES09qzcF6l3F5ZuQtf+hJFrkzaeZKiYz6HCL4PPmeWi8kg0AJ1BlW/Ro\nJBfJvryDiQbmMKQTWUAKFrQZ/KQkOWV6NhsP5lu7m+GAbkvboDJJ4iM4+4uFycpS\nb4nCH6QYF8nm/zs1GclyjvfhrisUOGkbruox4gXmFeidG4aKl4ungVpdabpszXpa\nsvSTwF5oMf/q0rNk2RAjsmxK84FHsGqqAZ5oD/kD3mvLSjI2Z3Q=\n=tOaI\n-----END PGP SIGNATURE-----",
        "payload": "tree ae67666fbc6eb29e0444aad799e20cdedb2d8be2\nparent 8335cb478183d800e274f6e96f9d7269ae584220\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1509517361 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1509517361 -1000\n\n[Wallet] always show help-line of wallet encryption calls\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8335cb478183d800e274f6e96f9d7269ae584220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8335cb478183d800e274f6e96f9d7269ae584220",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8335cb478183d800e274f6e96f9d7269ae584220"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0081f235f5f4dd93163815b3933424fbad106486",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
        "patch": "@@ -2179,7 +2179,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n+    if (request.fHelp || request.params.size() != 2) {\n         throw std::runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -2243,7 +2243,7 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n+    if (request.fHelp || request.params.size() != 2) {\n         throw std::runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -2294,7 +2294,7 @@ UniValue walletlock(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 0)) {\n+    if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2334,7 +2334,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() != 1)) {\n+    if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\""
      }
    ]
  },
  {
    "sha": "e8f3c88133b727960a4299dd84bfe18f4ce2a676",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGYzYzg4MTMzYjcyNzk2MGE0Mjk5ZGQ4NGJmZTE4ZjRjZTJhNjc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:00:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:01:50Z"
      },
      "message": "Merge #11442: [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2\n\n9d30f54 [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2 (fanquake)\n\nPull request description:\n\n  This updates the OpenBSD build docs to reflect building [master](8ddf60db7ad636b6a31b590251c671ded635fa1d) on a OpenBSD 6.2 VM (using VirtualBox 5.1.28 r117968 on macOS 10.12.6).\n\n  Versions of installed packages were:\n  ```\n  gmake 4.2.1\n  g++ 4.9.4\n  git 2.12.2\n  libevent 2.0.22\n  libtool 2.4.2\n  autoconf 2.69p2\n  automake 1.15p0\n  python 3.6.0\n  boost 1.58.0p3\n  llvm 4.0.0p2\n  ```\n\n  The boost package installed via pkg_add now seems to work correctly. So we shouldn't require manual building + patching.\n  I also wasn't required to make adjustments to any resource limits.\n\n  Building with g++ and Clang was successful, using:\n  ```\n  ./configure --disable-wallet --with-gui=no CC=egcc CXX=eg++ CPP=ecpp\n  ```\n  and\n  ```\n  ./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n  ```\n\n  Running ``` make check ``` worked for ```test/test_bitcoin``` but ```test/util/bitcoin-util-test.py``` failed with:\n  ```\n  Running test/util/bitcoin-util-test.py...\n  ../test/util/bitcoin-util-test.py\n  env: python3: No such file or directory\n  ```\n  So that seems like a configuration issue, Python 3.6 is installed.\n\n  Still todo:\n  - [ ] Check if a manual installation of Berkeley DB is required\n  - [x] Fix running ```test/util/bitcoin-util-test.py```\n  - [x] Have someone else verify building\n\n  cc @laanwj\n\nTree-SHA512: 34b176de4865b36dab9d66e74a15c37152e4b6c9784152c30dabbb515d6d9ae9cdbdc7a7b4d777876f91269a6a78cc277ec87775fc6c17dd509f7cf46e89a2b3",
      "tree": {
        "sha": "3d39e7d316fdc3b8ed64d5978f116b90d4db9de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d39e7d316fdc3b8ed64d5978f116b90d4db9de7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8f3c88133b727960a4299dd84bfe18f4ce2a676",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+cW+AAoJEB5K7WKYbNJdrjcIAJRRR6dL6sRWqrGKOAbGhEgi\njJDtJJz9dcOQmUukbYQl0kKbKmySq8GRzaS3rpb4AINJPxqehXGvmPgcAhdA16c6\n25LS2GSL6u9rbvBurVazn06I40l0+zjCyqUaFjHr7Z4NemEXNtXk7BenpK/9E5ql\nUeIjDCg6K8Pl2NTzkQT1r2m0HQn2ZCvCQx1gjIlOJCaPDuQAs0DhimVb3BDn43Nf\nJ7Kxqsd2JX2MewWJcEDvTmScdjslyO6qAyS1x7KN6gHPs9vVH0jmT1e5wGbYhZqF\nbJqHEt57ulfm/AUNg3dq/cc6z8QMTP02eSRqvCnMb9kQdfVHOAb8rS8GIWytLkg=\n=MTzW\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d39e7d316fdc3b8ed64d5978f116b90d4db9de7\nparent 8335cb478183d800e274f6e96f9d7269ae584220\nparent 9d30f54ef1c9412f2c71b89664952dd95b6ef959\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509541242 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509541310 +0100\n\nMerge #11442: [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2\n\n9d30f54 [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2 (fanquake)\n\nPull request description:\n\n  This updates the OpenBSD build docs to reflect building [master](8ddf60db7ad636b6a31b590251c671ded635fa1d) on a OpenBSD 6.2 VM (using VirtualBox 5.1.28 r117968 on macOS 10.12.6).\n\n  Versions of installed packages were:\n  ```\n  gmake 4.2.1\n  g++ 4.9.4\n  git 2.12.2\n  libevent 2.0.22\n  libtool 2.4.2\n  autoconf 2.69p2\n  automake 1.15p0\n  python 3.6.0\n  boost 1.58.0p3\n  llvm 4.0.0p2\n  ```\n\n  The boost package installed via pkg_add now seems to work correctly. So we shouldn't require manual building + patching.\n  I also wasn't required to make adjustments to any resource limits.\n\n  Building with g++ and Clang was successful, using:\n  ```\n  ./configure --disable-wallet --with-gui=no CC=egcc CXX=eg++ CPP=ecpp\n  ```\n  and\n  ```\n  ./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n  ```\n\n  Running ``` make check ``` worked for ```test/test_bitcoin``` but ```test/util/bitcoin-util-test.py``` failed with:\n  ```\n  Running test/util/bitcoin-util-test.py...\n  ../test/util/bitcoin-util-test.py\n  env: python3: No such file or directory\n  ```\n  So that seems like a configuration issue, Python 3.6 is installed.\n\n  Still todo:\n  - [ ] Check if a manual installation of Berkeley DB is required\n  - [x] Fix running ```test/util/bitcoin-util-test.py```\n  - [x] Have someone else verify building\n\n  cc @laanwj\n\nTree-SHA512: 34b176de4865b36dab9d66e74a15c37152e4b6c9784152c30dabbb515d6d9ae9cdbdc7a7b4d777876f91269a6a78cc277ec87775fc6c17dd509f7cf46e89a2b3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f3c88133b727960a4299dd84bfe18f4ce2a676",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f3c88133b727960a4299dd84bfe18f4ce2a676",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f3c88133b727960a4299dd84bfe18f4ce2a676/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8335cb478183d800e274f6e96f9d7269ae584220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8335cb478183d800e274f6e96f9d7269ae584220",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8335cb478183d800e274f6e96f9d7269ae584220"
      },
      {
        "sha": "9d30f54ef1c9412f2c71b89664952dd95b6ef959",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d30f54ef1c9412f2c71b89664952dd95b6ef959",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d30f54ef1c9412f2c71b89664952dd95b6ef959"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 22,
      "deletions": 81
    },
    "files": [
      {
        "sha": "760bb69b158a366bd0d0240271a6eda8446f02cd",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 22,
        "deletions": 81,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f3c88133b727960a4299dd84bfe18f4ce2a676/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f3c88133b727960a4299dd84bfe18f4ce2a676/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=e8f3c88133b727960a4299dd84bfe18f4ce2a676",
        "patch": "@@ -1,76 +1,44 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.1)\n+(updated for OpenBSD 6.2)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n-As OpenBSD is most common as a server OS, we will not bother with the GUI.\n+OpenBSD is most commonly used as a server OS, so this guide does not contain instructions for building the GUI.\n \n Preparation\n -------------\n \n Run the following as root to install the base dependencies for building:\n \n ```bash\n-pkg_add gmake libtool libevent\n+pkg_add git gmake libevent libtool\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.15)\n-pkg_add python # (select highest version, e.g. 3.5)\n+pkg_add python # (select highest version, e.g. 3.6)\n+pkg_add boost\n+\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n GCC\n -------\n \n-The default C++ compiler that comes with OpenBSD 5.9 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core, primarily as it has no C++11 support, but even before there were issues. So here we will be installing a newer compiler:\n+The default C++ compiler that comes with OpenBSD 6.2 is g++ 4.2.1. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core because it has no C++11 support. We'll install a newer version of GCC:\n \n ```bash\n-pkg_add g++ # (select newest 4.x version, e.g. 4.9.3)\n-```\n-\n-This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n-\n-### Building boost\n-\n-Do not use `pkg_add boost`! The boost version installed thus is compiled using the `g++` compiler not `eg++`, which will result in a conflict between `/usr/local/lib/libestdc++.so.XX.0` and `/usr/lib/libstdc++.so.XX.0`, resulting in a test crash:\n-\n-    test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n-    ...\n-    Segmentation fault (core dumped)\n+ pkg_add g++\n+ ```\n \n-This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n-\n-```\n-# Pick some path to install boost to, here we create a directory within the bitcoin directory\n-BITCOIN_ROOT=$(pwd)\n-BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n-mkdir -p $BOOST_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-curl -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2\n-echo '7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_64_0.tar.bz2: OK\n-tar -xjf boost_1_64_0.tar.bz2\n-\n-# Boost 1.64 needs one small patch for OpenBSD\n-cd boost_1_64_0\n-# Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n-\n-# Build w/ minimum configuration necessary for bitcoin\n-echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n-config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1\"\n-./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test\n-./b2 -d2 -j2 -d1 ${config_opts} --prefix=${BOOST_PREFIX} stage\n-./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n-```\n+ This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n \n ### Building BerkeleyDB\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n \n-See \"Berkeley DB\" in [build_unix.md](build_unix.md) for instructions on how to build BerkeleyDB 4.8.\n+See \"Berkeley DB\" in [build-unix.md](build-unix.md#berkeley-db) for instructions on how to build BerkeleyDB 4.8.\n You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n \n ```bash\n@@ -98,8 +66,8 @@ The standard ulimit restrictions in OpenBSD are very strict:\n \n     data(kbytes)         1572864\n \n-This is, unfortunately, no longer enough to compile some `.cpp` files in the project,\n-at least with gcc 4.9.3 (see issue https://github.com/bitcoin/bitcoin/issues/6658).\n+This, unfortunately, may no longer be enough to compile some `.cpp` files in the project,\n+at least with GCC 4.9.4 (see issue [#6658](https://github.com/bitcoin/bitcoin/issues/6658)).\n If your user is in the `staff` group the limit can be raised with:\n \n     ulimit -d 3000000\n@@ -118,59 +86,32 @@ export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you i\n export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n ./autogen.sh\n ```\n-Make sure `BDB_PREFIX` and `BOOST_PREFIX` are set to the appropriate paths from the above steps.\n+Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n To configure with wallet:\n ```bash\n-./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp \\\n+./configure --with-gui=no CC=egcc CXX=eg++ CPP=ecpp \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp\n+./configure --disable-wallet --with-gui=no CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n Build and run the tests:\n ```bash\n-gmake # can use -jX here for parallelism\n+gmake # use -jX here for parallelism\n gmake check\n ```\n \n-Clang (not currently working)\n+Clang\n ------------------------------\n \n-WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n-\n-Using a newer g++ results in linking the new code to a new libstdc++.\n-Libraries built with the old g++, will still import the old library.\n-This gives conflicts, necessitating rebuild of all C++ dependencies of the application.\n-\n-With clang this can - at least theoretically - be avoided because it uses the\n-base system's libstdc++.\n-\n ```bash\n-pkg_add llvm boost\n-```\n+pkg_add llvm\n \n-```bash\n ./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n-gmake\n+gmake # use -jX here for parallelism\n+gmake check\n ```\n-\n-However, this does not appear to work. Compilation succeeds, but link fails\n-with many 'local symbol discarded' errors:\n-\n-    local symbol 150: discarded in section `.text._ZN10tinyformat6detail14FormatIterator6finishEv' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-    local symbol 151: discarded in section `.text._ZN10tinyformat6detail14FormatIterator21streamStateFromFormatERSoRjPKcii' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-    local symbol 152: discarded in section `.text._ZN10tinyformat6detail12convertToIntIA13_cLb0EE6invokeERA13_Kc' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-\n-According to similar reported errors this is a binutils (ld) issue in 2.15, the\n-version installed by OpenBSD 5.7:\n-\n-- http://openbsd-archive.7691.n7.nabble.com/UPDATE-cppcheck-1-65-td248900.html\n-- https://llvm.org/bugs/show_bug.cgi?id=9758\n-\n-There is no known workaround for this."
      }
    ]
  },
  {
    "sha": "2631d55f61cdf5de435e35b305313a2fc9117812",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjMxZDU1ZjYxY2RmNWRlNDM1ZTM1YjMwNTMxM2EyZmM5MTE3ODEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:11:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:12:13Z"
      },
      "message": "Merge #11573: [Util] Update tinyformat.h\n\n60b98f8 [Util] Update tinyformat.h (fanquake)\n\nPull request description:\n\n  Updates `tinyformat.h` to commit c42f/tinyformat@689695c upstream. Including:\n  https://github.com/c42f/tinyformat/commit/8a2812d8480bfb66923eea0bb5cdda79fe4f17ba\n  https://github.com/c42f/tinyformat/commit/5d9e05a3479d1b2ec6a4602fd797f0ec26440db2\n  https://github.com/c42f/tinyformat/commit/48e2e48789907f80a7aec24a3f1d69196b78ed43\n\n  @achow101 mentioned that since upgrading to Ubuntu 17.10 (GCC 7), tinyformat had been throwing lots of -Wimplicit-fallthrough warnings. However fallthrough warnings should have been silenced by #10489. cc @theuni.\n\n  The upstream commit to fix fallthrough warnings is in this PR https://github.com/c42f/tinyformat/pull/39.\n\n  The last time tinyformat.h was updated in this repo was in #8274.\n\nTree-SHA512: a51bd30544693550e08148daf5d244e3a3a410caff7897351eb9cd28f661dc85e193e045bb86068ee4006b2f89a7233b7573b8c50d93d2a9a15a11386fdcc605",
      "tree": {
        "sha": "734c05dc8cbb221ae39264c0da042189f38dcfa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/734c05dc8cbb221ae39264c0da042189f38dcfa9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2631d55f61cdf5de435e35b305313a2fc9117812",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+cgtAAoJEB5K7WKYbNJdVksIAMDtG1qjDys7Lxg6e2JpAvH5\nPRktlLXeFuYIgc81zputd/1S+sZvkF99vG/UbjTrgSJ82utthjODHw+oBjBQ/VJ9\nLJDzu1Zp0dBB+AlGuVb/ZhW/zavI+2H/ZdLV5if9H58XetWvtq+hwXCfYClmt+ng\n5vBBM9s+EROUUpJIHRJVPWrg9W/7Fl7FfhgONKg1sapXx1nBnC+NHoXEipN0rNfJ\nHXFcRQ+rM/VWr2MC7ZC3ayQm7jxF5OCx/rcC3hU8OhbadUzBtqH1G+5OBNAElcI2\nVfxH8xfq9rgv0/yjNsoqqL9dFEFLN7WfKSIlrX76Z4wAaKnhoeLvMbnMRafY2y4=\n=Wesh\n-----END PGP SIGNATURE-----",
        "payload": "tree 734c05dc8cbb221ae39264c0da042189f38dcfa9\nparent e8f3c88133b727960a4299dd84bfe18f4ce2a676\nparent 60b98f8e145617e9e50a2eb7f3181953e1e8c424\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509541913 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509541933 +0100\n\nMerge #11573: [Util] Update tinyformat.h\n\n60b98f8 [Util] Update tinyformat.h (fanquake)\n\nPull request description:\n\n  Updates `tinyformat.h` to commit c42f/tinyformat@689695c upstream. Including:\n  https://github.com/c42f/tinyformat/commit/8a2812d8480bfb66923eea0bb5cdda79fe4f17ba\n  https://github.com/c42f/tinyformat/commit/5d9e05a3479d1b2ec6a4602fd797f0ec26440db2\n  https://github.com/c42f/tinyformat/commit/48e2e48789907f80a7aec24a3f1d69196b78ed43\n\n  @achow101 mentioned that since upgrading to Ubuntu 17.10 (GCC 7), tinyformat had been throwing lots of -Wimplicit-fallthrough warnings. However fallthrough warnings should have been silenced by #10489. cc @theuni.\n\n  The upstream commit to fix fallthrough warnings is in this PR https://github.com/c42f/tinyformat/pull/39.\n\n  The last time tinyformat.h was updated in this repo was in #8274.\n\nTree-SHA512: a51bd30544693550e08148daf5d244e3a3a410caff7897351eb9cd28f661dc85e193e045bb86068ee4006b2f89a7233b7573b8c50d93d2a9a15a11386fdcc605\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2631d55f61cdf5de435e35b305313a2fc9117812",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2631d55f61cdf5de435e35b305313a2fc9117812",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2631d55f61cdf5de435e35b305313a2fc9117812/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8f3c88133b727960a4299dd84bfe18f4ce2a676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f3c88133b727960a4299dd84bfe18f4ce2a676",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f3c88133b727960a4299dd84bfe18f4ce2a676"
      },
      {
        "sha": "60b98f8e145617e9e50a2eb7f3181953e1e8c424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b98f8e145617e9e50a2eb7f3181953e1e8c424",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60b98f8e145617e9e50a2eb7f3181953e1e8c424"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d34cfaa94f73d900ce966993fc0e076e2762a1f6",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2631d55f61cdf5de435e35b305313a2fc9117812/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2631d55f61cdf5de435e35b305313a2fc9117812/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=2631d55f61cdf5de435e35b305313a2fc9117812",
        "patch": "@@ -495,7 +495,11 @@ namespace detail {\n class FormatArg\n {\n     public:\n-        FormatArg() {}\n+        FormatArg()\n+             : m_value(nullptr),\n+             m_formatImpl(nullptr),\n+             m_toIntImpl(nullptr)\n+         { }\n \n         template<typename T>\n         explicit FormatArg(const T& value)\n@@ -507,11 +511,15 @@ class FormatArg\n         void format(std::ostream& out, const char* fmtBegin,\n                     const char* fmtEnd, int ntrunc) const\n         {\n+            assert(m_value);\n+            assert(m_formatImpl);\n             m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n         }\n \n         int toInt() const\n         {\n+            assert(m_value);\n+            assert(m_toIntImpl);\n             return m_toIntImpl(m_value);\n         }\n \n@@ -712,23 +720,27 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n             break;\n         case 'X':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'x': case 'p':\n             out.setf(std::ios::hex, std::ios::basefield);\n             intConversion = true;\n             break;\n         case 'E':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'e':\n             out.setf(std::ios::scientific, std::ios::floatfield);\n             out.setf(std::ios::dec, std::ios::basefield);\n             break;\n         case 'F':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'f':\n             out.setf(std::ios::fixed, std::ios::floatfield);\n             break;\n         case 'G':\n             out.setf(std::ios::uppercase);\n+            // Falls through\n         case 'g':\n             out.setf(std::ios::dec, std::ios::basefield);\n             // As in boost::format, let stream decide float format."
      }
    ]
  },
  {
    "sha": "e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWY2YTJhODAxYTAxYTZhMmEzNTI3ZjYyZTQ1NjFkNmEwNzM5OWNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:12:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:12:54Z"
      },
      "message": "Merge #11565: Make listsinceblock refuse unknown block hash\n\n659b206 Make listsinceblock refuse unknown block hash (Russell Yanofsky)\n\nPull request description:\n\n  Change suggested by @theuni  who noticed listsinceblock would ignore invalid block hashes causing it to return a completely unfiltered list of transactions.\n\nTree-SHA512: 3c8fb160265780d1334e856e853ab48e2e18372b8f1fc71ae480c3f45317048cc1fee0055d5c58031981a91b9c2bdbeb8e49a889d04ecba61729ce8109f2ce3f",
      "tree": {
        "sha": "6e6e81afc28ec7fbd7132b6a3b452e91290542e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e6e81afc28ec7fbd7132b6a3b452e91290542e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+chWAAoJEB5K7WKYbNJdiLMIAMEhafPFnUy+BV4BZdEahJit\n2DT6ZFPi/gr/1yaCQyp+C7xEW9Adn+31jeAd6u93w7kPpdG08Av7YWGybe05YVrp\nGHMRXobFcDQ2eH2sDeIbm5h5RlscMBTrCa/1hiaq6kZkA48SPNIDx/m4f+9pghVR\nZaHmWnfOHRoxA048J+o9G+XMaJ8rNz4i2uWL3zaVBVKDfdSDyXrQZrGWWSGvie+/\nOcp4CptT5XavUkzY+ySuNQCVWF+WQTLbQ7gMPHrSFX6y2vBO1j1X2qTKYmrRIRf2\nKGJo0p54Mn5eXfnVHNi5gD4DknYjJaStpZVZvnXAuqaYIUvcW1Em9uMTM5jCXpQ=\n=u3z8\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e6e81afc28ec7fbd7132b6a3b452e91290542e2\nparent 2631d55f61cdf5de435e35b305313a2fc9117812\nparent 659b2061c4329472a45e913c5d45e6ab180600a3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509541970 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509541974 +0100\n\nMerge #11565: Make listsinceblock refuse unknown block hash\n\n659b206 Make listsinceblock refuse unknown block hash (Russell Yanofsky)\n\nPull request description:\n\n  Change suggested by @theuni  who noticed listsinceblock would ignore invalid block hashes causing it to return a completely unfiltered list of transactions.\n\nTree-SHA512: 3c8fb160265780d1334e856e853ab48e2e18372b8f1fc71ae480c3f45317048cc1fee0055d5c58031981a91b9c2bdbeb8e49a889d04ecba61729ce8109f2ce3f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2631d55f61cdf5de435e35b305313a2fc9117812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2631d55f61cdf5de435e35b305313a2fc9117812",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2631d55f61cdf5de435e35b305313a2fc9117812"
      },
      {
        "sha": "659b2061c4329472a45e913c5d45e6ab180600a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/659b2061c4329472a45e913c5d45e6ab180600a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/659b2061c4329472a45e913c5d45e6ab180600a3"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 47,
      "deletions": 10
    },
    "files": [
      {
        "sha": "23414666ce3e369cff809618384726421f04dffd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
        "patch": "@@ -76,6 +76,9 @@ will only create hierarchical deterministic (HD) wallets.\n \n Low-level RPC changes\n ----------------------\n+- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n+  value is passed, instead of returning a list of all wallet transactions since\n+  the genesis block.\n - The \"currentblocksize\" value in getmininginfo has been removed.\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n   * `getblockchaininfo`"
      },
      {
        "sha": "97d6dc700c53e49e578b83a1eb7e45b13873c884",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
        "patch": "@@ -1893,19 +1893,20 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (!request.params[0].isNull()) {\n+    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         uint256 blockId;\n \n         blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n-        if (it != mapBlockIndex.end()) {\n-            paltindex = pindex = it->second;\n-            if (chainActive[pindex->nHeight] != pindex) {\n-                // the block being asked for is a part of a deactivated chain;\n-                // we don't want to depend on its perceived height in the block\n-                // chain, we want to instead use the last common ancestor\n-                pindex = chainActive.FindFork(pindex);\n-            }\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        paltindex = pindex = it->second;\n+        if (chainActive[pindex->nHeight] != pindex) {\n+            // the block being asked for is a part of a deactivated chain;\n+            // we don't want to depend on its perceived height in the block\n+            // chain, we want to instead use the last common ancestor\n+            pindex = chainActive.FindFork(pindex);\n         }\n     }\n "
      },
      {
        "sha": "67e7744bf8433c79134469111a4b0aacca22b60d",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error\n \n class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -16,10 +16,43 @@ def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()\n \n+        self.test_no_blockhash()\n+        self.test_invalid_blockhash()\n         self.test_reorg()\n         self.test_double_spend()\n         self.test_double_send()\n \n+    def test_no_blockhash(self):\n+        txid = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        blockhash, = self.nodes[2].generate(1)\n+        self.sync_all()\n+\n+        txs = self.nodes[0].listtransactions()\n+        assert_array_result(txs, {\"txid\": txid}, {\n+            \"category\": \"receive\",\n+            \"amount\": 1,\n+            \"blockhash\": blockhash,\n+            \"confirmations\": 1,\n+        })\n+        assert_equal(\n+            self.nodes[0].listsinceblock(),\n+            {\"lastblock\": blockhash,\n+             \"removed\": [],\n+             \"transactions\": txs})\n+        assert_equal(\n+            self.nodes[0].listsinceblock(\"\"),\n+            {\"lastblock\": blockhash,\n+             \"removed\": [],\n+             \"transactions\": txs})\n+\n+    def test_invalid_blockhash(self):\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"42759cde25462784395a337460bde75f58e73d3f08bd31fdc3507cbac856a2c4\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"invalid-hex\")\n+\n     def test_reorg(self):\n         '''\n         `listsinceblock` did not behave correctly when handed a block that was"
      }
    ]
  },
  {
    "sha": "c95832da87ac73dab38d61574a633d4110a6c47a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTU4MzJkYTg3YWM3M2RhYjM4ZDYxNTc0YTYzM2Q0MTEwYTZjNDdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:22:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:22:37Z"
      },
      "message": "Merge #11571: Fixed a couple small grammatical errors.\n\nf927ee1 Fixed a couple small grammatical errors. (Christian Gentry)\n\nPull request description:\n\n  1. \"If a pull request is not to be considered for merging (yet), please\n  prefix the ...\"\n\n  2. If a particular commit references another issue, please add the reference. For\n  example: `refs #1234` or `fixes #4321`.\n\nTree-SHA512: b2ed11a235800a6b8e9450937352954a2222eb6f08f9556c8f298fd3d64d18e731397b46f3141eab01e0196f53fa3a9d84fb707a1e7691a63dd146b3c5298fe5",
      "tree": {
        "sha": "6c9e6f7f56aacf748d1ea2835dab44a8cb7e5d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c9e6f7f56aacf748d1ea2835dab44a8cb7e5d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c95832da87ac73dab38d61574a633d4110a6c47a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+cqdAAoJEB5K7WKYbNJdeysH/jevkijx8PkwC0PIjcAeD4Oq\njuoSUqzIA5tvdK7udUTL/qRfujUv+9TXp7WxfS5yWj7h+NF71NojC4uzumnHUcK6\nnexXhDrl+5S8SBM/beVea0m3GlY1H6r0YJKSnyzUlrtzHEVYvdLDbchwhVAIGsJ5\n3YUMfJ8rs4aLhZRndHRwJc/h+vIhYocWstRAYKoaO809C6kq8rDc5H8Hgxb29FWC\nsTsB458FOpBgCSouDnVifA71WPnxB25NcVBr3JFrik2XSUIizpqeAnTWxIC03V2W\nFMO0gwouVgsQiOjH83khqTRxfPqvr/hfcd+RBcxM8GJNAl97ty57O8z8r6qGc44=\n=5Tnr\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c9e6f7f56aacf748d1ea2835dab44a8cb7e5d8c\nparent e1f6a2a801a01a6a2a3527f62e4561d6a07399ce\nparent f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509542553 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509542557 +0100\n\nMerge #11571: Fixed a couple small grammatical errors.\n\nf927ee1 Fixed a couple small grammatical errors. (Christian Gentry)\n\nPull request description:\n\n  1. \"If a pull request is not to be considered for merging (yet), please\n  prefix the ...\"\n\n  2. If a particular commit references another issue, please add the reference. For\n  example: `refs #1234` or `fixes #4321`.\n\nTree-SHA512: b2ed11a235800a6b8e9450937352954a2222eb6f08f9556c8f298fd3d64d18e731397b46f3141eab01e0196f53fa3a9d84fb707a1e7691a63dd146b3c5298fe5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95832da87ac73dab38d61574a633d4110a6c47a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c95832da87ac73dab38d61574a633d4110a6c47a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95832da87ac73dab38d61574a633d4110a6c47a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1f6a2a801a01a6a2a3527f62e4561d6a07399ce"
      },
      {
        "sha": "f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f927ee1aa871b1bd4c5ab2b218d0ea27ef9fff19"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2662794bcf45f7e95a4e6c396f65558ffc8d4a12",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c95832da87ac73dab38d61574a633d4110a6c47a/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c95832da87ac73dab38d61574a633d4110a6c47a/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=c95832da87ac73dab38d61574a633d4110a6c47a",
        "patch": "@@ -42,8 +42,8 @@ in init.cpp\") in which case a single title line is sufficient. Commit messages s\n helpful to people reading your code in the future, so explain the reasoning for\n your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n-If a particular commit references another issue, please add the reference, for\n-example `refs #1234`, or `fixes #4321`. Using the `fixes` or `closes` keywords\n+If a particular commit references another issue, please add the reference. For\n+example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n will cause the corresponding issue to be closed when the pull request is merged.\n \n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n@@ -85,7 +85,7 @@ Note that translations should not be submitted as pull requests, please see\n [Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md) \n for more information on helping with translations.\n \n-If a pull request is specifically not to be considered for merging (yet) please\n+If a pull request is not to be considered for merging (yet), please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n in the body of the pull request to indicate tasks are pending.\n "
      }
    ]
  },
  {
    "sha": "db2f83ed463b025e77a5527c3052980f971b8398",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjJmODNlZDQ2M2IwMjVlNzdhNTUyN2MzMDUyOTgwZjk3MWI4Mzk4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:26:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:26:23Z"
      },
      "message": "Merge #11511: [Init] Remove redundant exit(EXIT_FAILURE) instances and replace with return false\n\nb296bf1 Init: Remove redundant exit(EXIT_FAILURE) instances and replace with return false (donaloconnor)\n\nPull request description:\n\n  While reviewing the bitcoin code I noticed that there are a few exit(EXIT_FAILURE) at various places in the AppInit function.\n\n  This function returns to main() which will return/exit with EXIT_FAILURE so returning false instead of an explicit exit(EXIT_FAILURE) seems to be cleaner.\n\n  This PR attempts to make things a bit more consistent.\n\n  There is a subtle difference between exit() and return from main in that the exit() will not clean up any local vars but I don't think this makes a difference in this case. Using exit() might even lead to bugs in the future where the dtor of local objects are expected to be called.\n\nTree-SHA512: 7d104c3a752b4e7d7bc2382ef7e62543462988f1bbf13dd4077fbeff5399729b76c71a4352556f188b8d306604232477466f5bb827b58a6f3f6273f2370e1faa",
      "tree": {
        "sha": "743cec3eda2ca742bb5e1115896f90aa074afbc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743cec3eda2ca742bb5e1115896f90aa074afbc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db2f83ed463b025e77a5527c3052980f971b8398",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+ct/AAoJEB5K7WKYbNJdQJIH/3JBcTKub/ofavaxADEbpXF2\nN2jMVjqi9qhOukGPkzQeo2jYVPq0U91j3UfcKlRmmeXKCTB0XL9F1qiCUeDl6lxO\nlJV+sbeeFPKXDLewZ7HqzW3X37PAuv2nDkWRfTGScJj60YfljCtAi2lWt5h9pcfc\nogmbZhIXAdH2TskQNwhrne5+hsIC+CZEpX718Idzv/QpS/pbM7eVKwAPOV1Vm32N\n8OPXnIVhWiz92AXosgrjvqriyz0kRD3+G4z/sFny2+6pRlfO/p25Kcc9DPJNnYTd\nX7ORCvbRuSEkR43XoE4Y6pJOVGQ1ulNN4L8NUDOtAvE9DK5PoRpZDvVhBVRozKQ=\n=fuMn\n-----END PGP SIGNATURE-----",
        "payload": "tree 743cec3eda2ca742bb5e1115896f90aa074afbc7\nparent c95832da87ac73dab38d61574a633d4110a6c47a\nparent b296bf1496b213eaea53cac0a734679fed7a42f5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509542779 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509542783 +0100\n\nMerge #11511: [Init] Remove redundant exit(EXIT_FAILURE) instances and replace with return false\n\nb296bf1 Init: Remove redundant exit(EXIT_FAILURE) instances and replace with return false (donaloconnor)\n\nPull request description:\n\n  While reviewing the bitcoin code I noticed that there are a few exit(EXIT_FAILURE) at various places in the AppInit function.\n\n  This function returns to main() which will return/exit with EXIT_FAILURE so returning false instead of an explicit exit(EXIT_FAILURE) seems to be cleaner.\n\n  This PR attempts to make things a bit more consistent.\n\n  There is a subtle difference between exit() and return from main in that the exit() will not clean up any local vars but I don't think this makes a difference in this case. Using exit() might even lead to bugs in the future where the dtor of local objects are expected to be called.\n\nTree-SHA512: 7d104c3a752b4e7d7bc2382ef7e62543462988f1bbf13dd4077fbeff5399729b76c71a4352556f188b8d306604232477466f5bb827b58a6f3f6273f2370e1faa\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2f83ed463b025e77a5527c3052980f971b8398",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db2f83ed463b025e77a5527c3052980f971b8398",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2f83ed463b025e77a5527c3052980f971b8398/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c95832da87ac73dab38d61574a633d4110a6c47a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95832da87ac73dab38d61574a633d4110a6c47a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c95832da87ac73dab38d61574a633d4110a6c47a"
      },
      {
        "sha": "b296bf1496b213eaea53cac0a734679fed7a42f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b296bf1496b213eaea53cac0a734679fed7a42f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b296bf1496b213eaea53cac0a734679fed7a42f5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5f88c35dbdaa6d7aa2ce1b009e0f0a9449170650",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2f83ed463b025e77a5527c3052980f971b8398/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2f83ed463b025e77a5527c3052980f971b8398/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=db2f83ed463b025e77a5527c3052980f971b8398",
        "patch": "@@ -120,7 +120,7 @@ bool AppInit(int argc, char* argv[])\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n                 fprintf(stderr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n-                exit(EXIT_FAILURE);\n+                return false;\n             }\n         }\n \n@@ -132,17 +132,17 @@ bool AppInit(int argc, char* argv[])\n         if (!AppInitBasicSetup())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         if (!AppInitParameterInteraction())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         if (!AppInitSanityChecks())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         if (gArgs.GetBoolArg(\"-daemon\", false))\n         {\n@@ -163,7 +163,7 @@ bool AppInit(int argc, char* argv[])\n         if (!AppInitLockDataDirectory())\n         {\n             // If locking the data directory failed, exit immediately\n-            exit(EXIT_FAILURE);\n+            return false;\n         }\n         fRet = AppInitMain(threadGroup, scheduler);\n     }"
      }
    ]
  },
  {
    "sha": "cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmZhNWVlMTMyZjNlZjZhOGQxMzhlYjk4ZDE1ZGEyYjYxOTk5Y2E0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:29:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:42:08Z"
      },
      "message": "Merge #11531: Check that new headers are not a descendant of an invalid block (more effeciently)\n\nf3d4adf Make p2p-acceptablock not an extended test (Matt Corallo)\n00dcda6 [qa] test that invalid blocks on an invalid chain get a disconnect (Matt Corallo)\n015a525 Reject headers building on invalid chains by tracking invalidity (Matt Corallo)\n932f118 Accept unrequested blocks with work equal to our tip (Matt Corallo)\n3d9c70c Stop always storing blocks from whitelisted peers (Matt Corallo)\n3b4ac43 Rewrite p2p-acceptblock in preparation for slight behavior changes (Matt Corallo)\n\nPull request description:\n\n  @sdaftuar pointed out that the version in #11487 was somewhat DoS-able as someone could feed you a valid chain that forked off the the last checkpoint block and force you to do lots of work just walking backwards across blocks for each new block they gave you. We came up with a few proposals but settled on the one implemented here as likely the simplest without obvious DoS issues. It uses our existing on-load mapBlockIndex walk to make sure everything that descends from an invalid block is marked as such, and then simply caches blocks which we attempted to connect but which were found to be invalid. To avoid DoS issues during IBD, this will need to depend on #11458.\n\n  Includes tests from #11487.\n\nTree-SHA512: 46aff8332908e122dae72ceb5fe8cd241902c2281a87f58a5fb486bf69d46458d84a096fdcb5f3e8e07fbcf7466232b10c429f4d67855425f11b38ac0bf612e1",
      "tree": {
        "sha": "76135622e466c313228932d608ec2a04475f4481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76135622e466c313228932d608ec2a04475f4481"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+c8wAAoJEB5K7WKYbNJderQIAJc3OrRJsxwcY1AZ3QLgs41V\nEI0RPheHeVOXCgLWU5TVvIv/j0rH/uiZhPtTqLjL5ie5gHVhI+3LtKlDDN/soAwZ\nqCNPvg75DbPNmiOiEbSJeBVJvqq4yV7ItjruKzlBn8QyNu6NtiLimF64QuZ5AROd\niw7p75UGe4nPYzrSn3FkSLEEVZhcHk6svL8ioI77v6rudTEbNcyhGfKq3wB1Dr1T\n5az0ZHeI6iSLne+3gUPfQm9YBc0K7dt6ATpVLO39eHUF5XHVgy6IoUaby815xA5v\ntwP9aY14qqzTfK41zGqNWi7fUDdwNELhExDtyazvGd0TrcLHjm3W40xR+oH3cY8=\n=PyVV\n-----END PGP SIGNATURE-----",
        "payload": "tree 76135622e466c313228932d608ec2a04475f4481\nparent db2f83ed463b025e77a5527c3052980f971b8398\nparent f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509542971 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509543728 +0100\n\nMerge #11531: Check that new headers are not a descendant of an invalid block (more effeciently)\n\nf3d4adf Make p2p-acceptablock not an extended test (Matt Corallo)\n00dcda6 [qa] test that invalid blocks on an invalid chain get a disconnect (Matt Corallo)\n015a525 Reject headers building on invalid chains by tracking invalidity (Matt Corallo)\n932f118 Accept unrequested blocks with work equal to our tip (Matt Corallo)\n3d9c70c Stop always storing blocks from whitelisted peers (Matt Corallo)\n3b4ac43 Rewrite p2p-acceptblock in preparation for slight behavior changes (Matt Corallo)\n\nPull request description:\n\n  @sdaftuar pointed out that the version in #11487 was somewhat DoS-able as someone could feed you a valid chain that forked off the the last checkpoint block and force you to do lots of work just walking backwards across blocks for each new block they gave you. We came up with a few proposals but settled on the one implemented here as likely the simplest without obvious DoS issues. It uses our existing on-load mapBlockIndex walk to make sure everything that descends from an invalid block is marked as such, and then simply caches blocks which we attempted to connect but which were found to be invalid. To avoid DoS issues during IBD, this will need to depend on #11458.\n\n  Includes tests from #11487.\n\nTree-SHA512: 46aff8332908e122dae72ceb5fe8cd241902c2281a87f58a5fb486bf69d46458d84a096fdcb5f3e8e07fbcf7466232b10c429f4d67855425f11b38ac0bf612e1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db2f83ed463b025e77a5527c3052980f971b8398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2f83ed463b025e77a5527c3052980f971b8398",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db2f83ed463b025e77a5527c3052980f971b8398"
      },
      {
        "sha": "f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96"
      }
    ],
    "stats": {
      "total": 403,
      "additions": 269,
      "deletions": 134
    },
    "files": [
      {
        "sha": "2e93809efc266892786eea40ab3ead44aab6c204",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "patch": "@@ -2531,11 +2531,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n-        // Process all blocks from whitelisted peers, even if not requested,\n-        // unless we're still syncing with the network.\n-        // Such an unrequested block may still be processed, subject to the\n-        // conditions in AcceptBlock().\n-        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        bool forceProcessing = false;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);"
      },
      {
        "sha": "83cbcb42cb0b5ffd21fc2326bd940ce3b662616d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 12,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "patch": "@@ -156,6 +156,26 @@ namespace {\n     /** chainwork for the last block that preciousblock has been applied to. */\n     arith_uint256 nLastPreciousChainwork = 0;\n \n+    /** In order to efficiently track invalidity of headers, we keep the set of\n+      * blocks which we tried to connect and found to be invalid here (ie which\n+      * were set to BLOCK_FAILED_VALID since the last restart). We can then\n+      * walk this set and check if a new header is a descendant of something in\n+      * this set, preventing us from having to walk mapBlockIndex when we try\n+      * to connect a bad block and fail.\n+      *\n+      * While this is more complicated than marking everything which descends\n+      * from an invalid block as invalid at the time we discover it to be\n+      * invalid, doing so would require walking all of mapBlockIndex to find all\n+      * descendants. Since this case should be very rare, keeping track of all\n+      * BLOCK_FAILED_VALID blocks in a set should be just fine and work just as\n+      * well.\n+      *\n+      * Because we alreardy walk mapBlockIndex in height-order at startup, we go\n+      * ahead and mark descendants of invalid blocks as FAILED_CHILD at that time,\n+      * instead of putting things in this set.\n+      */\n+    std::set<CBlockIndex*> g_failed_blocks;\n+\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -1180,6 +1200,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n+        g_failed_blocks.insert(pindex);\n         setDirtyBlockIndex.insert(pindex);\n         setBlockIndexCandidates.erase(pindex);\n         InvalidChainFound(pindex);\n@@ -2533,17 +2554,18 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+    // We first disconnect backwards and then mark the blocks as invalid.\n+    // This prevents a case where pruned nodes may fail to invalidateblock\n+    // and be left unable to start as they have no tip candidates (as there\n+    // are no blocks that meet the \"have data and are not invalid per\n+    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+\n+    bool pindex_was_in_chain = false;\n+    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n     DisconnectedBlockTransactions disconnectpool;\n     while (chainActive.Contains(pindex)) {\n-        CBlockIndex *pindexWalk = chainActive.Tip();\n-        pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n-        setDirtyBlockIndex.insert(pindexWalk);\n-        setBlockIndexCandidates.erase(pindexWalk);\n+        pindex_was_in_chain = true;\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n@@ -2554,6 +2576,21 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         }\n     }\n \n+    // Now mark the blocks we just disconnected as descendants invalid\n+    // (note this may not be all descendants).\n+    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n+        setDirtyBlockIndex.insert(invalid_walk_tip);\n+        setBlockIndexCandidates.erase(invalid_walk_tip);\n+        invalid_walk_tip = invalid_walk_tip->pprev;\n+    }\n+\n+    // Mark the block itself as invalid.\n+    pindex->nStatus |= BLOCK_FAILED_VALID;\n+    setDirtyBlockIndex.insert(pindex);\n+    setBlockIndexCandidates.erase(pindex);\n+    g_failed_blocks.insert(pindex);\n+\n     // DisconnectTip will add transactions to disconnectpool; try to add these\n     // back to the mempool.\n     UpdateMempoolForReorg(disconnectpool, true);\n@@ -2591,6 +2628,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n                 // Reset invalid block marker if it was pointing to one of those.\n                 pindexBestInvalid = nullptr;\n             }\n+            g_failed_blocks.erase(it->second);\n         }\n         it++;\n     }\n@@ -3066,6 +3104,21 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            for (const CBlockIndex* failedit : g_failed_blocks) {\n+                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                    assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                    CBlockIndex* invalid_walk = pindexPrev;\n+                    while (invalid_walk != failedit) {\n+                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                        setDirtyBlockIndex.insert(invalid_walk);\n+                        invalid_walk = invalid_walk->pprev;\n+                    }\n+                    return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+                }\n+            }\n+        }\n     }\n     if (pindex == nullptr)\n         pindex = AddToBlockIndex(block);\n@@ -3117,7 +3170,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    bool fHasMoreOrSameWork = (chainActive.Tip() ? pindex->nChainWork >= chainActive.Tip()->nChainWork : true);\n     // Blocks that are too out-of-order needlessly limit the effectiveness of\n     // pruning, because pruning will not delete block files that contain any\n     // blocks which are too close in height to the tip.  Apply this test\n@@ -3134,9 +3187,9 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n-        if (!fHasMoreWork) return true;     // Don't process less-work chains\n-        if (fTooFarAhead) return true;      // Block height is too high\n+        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n+        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n+        if (fTooFarAhead) return true;        // Block height is too high\n \n         // Protect against DoS attacks from low-work chains.\n         // If our tip is behind, a peer could try to send us\n@@ -3494,6 +3547,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n                 pindex->nChainTx = pindex->nTx;\n             }\n         }\n+        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {\n+            pindex->nStatus |= BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(pindex);\n+        }\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->nChainTx || pindex->pprev == nullptr))\n             setBlockIndexCandidates.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n@@ -3884,6 +3941,7 @@ void UnloadBlockIndex()\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n+    g_failed_blocks.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {"
      },
      {
        "sha": "220b7763694ed54f14b3403722ddacc5a544bad8",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 197,
        "deletions": 116,
        "changes": 313,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "patch": "@@ -4,42 +4,32 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n-low-work unrequested blocks.\n-\n-We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n-respectively.\n+We have one NodeConn connection to node0 called test_node, and one to node1\n+called min_work_node.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance for node0 and node1, but node2 should skip processing\n-   due to nMinimumChainWork.\n+   The tip should advance for node0, but node1 should skip processing due to\n+   nMinimumChainWork.\n \n-Node2 is unused in tests 3-7:\n+Node1 is unused in tests 3-7:\n \n-3. Mine a block that forks the previous block, and deliver to each node from\n-   corresponding peer.\n-   Node0 should not process this block (just accept the header), because it is\n-   unrequested and doesn't have more work than the tip.\n-   Node1 should process because this is coming from a whitelisted peer.\n+3. Mine a block that forks from the genesis block, and deliver to test_node.\n+   Node0 should not process this block (just accept the header), because it\n+   is unrequested and doesn't have more or equal work to the tip.\n \n-4. Send another block that builds on the forking block.\n-   Node0 should process this block but be stuck on the shorter chain, because\n-   it's missing an intermediate block.\n-   Node1 should reorg to this longer chain.\n+4a,b. Send another two blocks that build on the forking block.\n+   Node0 should process the second block but be stuck on the shorter chain,\n+   because it's missing an intermediate block.\n \n-4b.Send 288 more blocks on the longer chain.\n+4c.Send 288 more blocks on the longer chain (the number of blocks ahead\n+   we currently store).\n    Node0 should process all but the last block (too far ahead in height).\n-   Send all headers to Node1, and then send the last block in that chain.\n-   Node1 should accept the block because it's coming from a whitelisted peer.\n \n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n@@ -52,16 +42,20 @@\n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n \n-8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n-work on its chain).\n+8. Create a fork which is invalid at a height longer than the current chain\n+   (ie to which the node will try to reorg) but which has headers built on top\n+   of the invalid block. Check that we get disconnected if we send more headers\n+   on the chain the node now knows to be invalid.\n \n+9. Test Node1 is able to sync when connected to node0 (which should have sufficient\n+   work on its chain).\n \"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n \n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n@@ -71,8 +65,8 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n+        self.num_nodes = 2\n+        self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n@@ -84,132 +78,147 @@ def setup_network(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n-        white_node = NodeConnCB()  # connects to node1 (whitelisted)\n-        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n+        test_node = NodeConnCB()   # connects to node0\n+        min_work_node = NodeConnCB()  # connects to node1\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], min_work_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n-        min_work_node.add_connection(connections[2])\n+        min_work_node.add_connection(connections[1])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n         min_work_node.wait_for_verack()\n \n-        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n+        # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted by nodes 1/2\n+        # This should be accepted by node0\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(3):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n-        white_node.send_message(msg_block(blocks_h2[1]))\n-        min_work_node.send_message(msg_block(blocks_h2[2]))\n+        min_work_node.send_message(msg_block(blocks_h2[1]))\n \n-        for x in [test_node, white_node, min_work_node]:\n+        for x in [test_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 2)\n-        assert_equal(self.nodes[2].getblockcount(), 1)\n-        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n+        assert_equal(self.nodes[1].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n \n-        # 3. Send another block that builds on the original tip.\n-        blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in range(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n-            blocks_h2f[i].solve()\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n-        white_node.send_message(msg_block(blocks_h2f[1]))\n+        # 3. Send another block that builds on genesis.\n+        block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n+        block_time += 1\n+        block_h1f.solve()\n+        test_node.send_message(msg_block(block_h1f))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h2f[0].hash:\n+            if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_h1f.hash)\n \n-        for x in self.nodes[1].getchaintips():\n-            if x['hash'] == blocks_h2f[1].hash:\n-                assert_equal(x['status'], \"valid-headers\")\n+        # 4. Send another two block that build on the fork.\n+        block_h2f = create_block(block_h1f.sha256, create_coinbase(2), block_time)\n+        block_time += 1\n+        block_h2f.solve()\n+        test_node.send_message(msg_block(block_h2f))\n \n-        self.log.info(\"Second height 2 block accepted only from whitelisted peer\")\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n+        # can't be fully validated.\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_h2f.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n \n-        # 4. Now send another block that builds on the forking chain.\n-        blocks_h3 = []\n-        for i in range(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n-            blocks_h3[i].solve()\n-        test_node.send_message(msg_block(blocks_h3[0]))\n-        white_node.send_message(msg_block(blocks_h3[1]))\n+        # But this block should be accepted by node since it has equal work.\n+        self.nodes[0].getblock(block_h2f.hash)\n+        self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n-        # Since the earlier block was not processed by node0, the new block\n+        # 4b. Now send another block that builds on the forking chain.\n+        block_h3 = create_block(block_h2f.sha256, create_coinbase(3), block_h2f.nTime+1)\n+        block_h3.solve()\n+        test_node.send_message(msg_block(block_h3))\n+\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h3[0].hash:\n+            if x['hash'] == block_h3.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        self.nodes[0].getblock(block_h3.hash)\n+\n+        # But this block should be accepted by node since it has more work.\n+        self.nodes[0].getblock(block_h3.hash)\n+        self.log.info(\"Unrequested more-work block accepted\")\n+\n+        # 4c. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node (as long as its not missing any headers)\n+        tip = block_h3\n+        all_blocks = []\n+        for i in range(288):\n+            next_block = create_block(tip.sha256, create_coinbase(i + 4), tip.nTime+1)\n+            next_block.solve()\n+            all_blocks.append(next_block)\n+            tip = next_block\n+\n+        # Now send the block at height 5 and check that it wasn't accepted (missing header)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblock, all_blocks[1].hash)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblockheader, all_blocks[1].hash)\n \n-        # But this block should be accepted by node0 since it has more work.\n-        self.nodes[0].getblock(blocks_h3[0].hash)\n-        self.log.info(\"Unrequested more-work block accepted from non-whitelisted peer\")\n+        # The block at height 5 should be accepted if we provide the missing header, though\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(all_blocks[0]))\n+        test_node.send_message(headers_message)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(all_blocks[1].hash)\n \n-        # Node1 should have accepted and reorged.\n-        assert_equal(self.nodes[1].getblockcount(), 3)\n-        self.log.info(\"Successfully reorged to length 3 chain from whitelisted peer\")\n+        # Now send the blocks in all_blocks\n+        for i in range(288):\n+            test_node.send_message(msg_block(all_blocks[i]))\n+        test_node.sync_with_ping()\n \n-        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n-        # the last (height-too-high) on node0.  Node1 should process the tip if\n-        # we give it the headers chain leading to the tip.\n-        tips = blocks_h3\n-        headers_message = msg_headers()\n-        all_blocks = []   # node0's blocks\n-        for j in range(2):\n-            for i in range(288):\n-                next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n-                next_block.solve()\n-                if j==0:\n-                    test_node.send_message(msg_block(next_block))\n-                    all_blocks.append(next_block)\n-                else:\n-                    headers_message.headers.append(CBlockHeader(next_block))\n-                tips[j] = next_block\n-\n-        time.sleep(2)\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n-        headers_message.headers.pop() # Ensure the last block is unrequested\n-        white_node.send_message(headers_message) # Send headers leading to tip\n-        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        white_node.sync_with_ping()\n-        self.nodes[1].getblock(tips[1].hash)\n-        self.log.info(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n-\n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        # Here, if the sleep is too short, the test could falsely succeed (if the\n-        # node hasn't processed the block by the time the sleep returns, and then\n-        # the node processes it and incorrectly advances the tip).\n-        # But this would be caught later on, when we verify that an inv triggers\n-        # a getdata request for this block.\n+        # The node should have requested the blocks at some point, so\n+        # disconnect/reconnect first\n+        connections[0].disconnect_node()\n+        test_node.wait_for_disconnect()\n+\n+        test_node = NodeConnCB()   # connects to node (not whitelisted)\n+        connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+        test_node.add_connection(connections[0])\n+\n+        test_node.wait_for_verack()\n+        test_node.send_message(msg_block(block_h1f))\n+\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         self.log.info(\"Unrequested block that would complete more-work chain was ignored\")\n@@ -220,27 +229,99 @@ def run_test(self):\n         with mininode_lock:\n             # Clear state so we can check the getdata request\n             test_node.last_message.pop(\"getdata\", None)\n-            test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n+            test_node.send_message(msg_inv([CInv(2, block_h3.sha256)]))\n \n         test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_message[\"getdata\"]\n \n         # Check that the getdata includes the right block\n-        assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n+        assert_equal(getdata.inv[0].hash, block_h1f.sha256)\n         self.log.info(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n+        test_node.send_message(msg_block(block_h1f))\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node2 to node0 and ensure it is able to sync\n-        connect_nodes(self.nodes[0], 2)\n-        sync_blocks([self.nodes[0], self.nodes[2]])\n-        self.log.info(\"Successfully synced nodes 2 and 0\")\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_292.hash)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            # Only wait a short while so the test doesn't take forever if we do get\n+            # disconnected\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:\n+            test_node.wait_for_disconnect()\n+\n+            test_node = NodeConnCB()   # connects to node (not whitelisted)\n+            connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+            test_node.add_connection(connections[0])\n+\n+            NetworkThread().start() # Start up network handling in another thread\n+            test_node.wait_for_verack()\n+\n+        # We should have failed reorg and switched back to 290 (but have block 291)\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getblock(block_291.hash)[\"confirmations\"], -1)\n+\n+        # Now send a new header on the invalid chain, indicating we're forked off, and expect to get disconnected\n+        block_293 = create_block(block_292.sha256, create_coinbase(293), block_292.nTime+1)\n+        block_293.solve()\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_293))\n+        test_node.send_message(headers_message)\n+        test_node.wait_for_disconnect()\n+\n+        # 9. Connect node1 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.log.info(\"Successfully synced nodes 1 and 0\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "ca36426a0a2b51e721021858f7bc47b3dc33b094",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "patch": "@@ -125,6 +125,7 @@\n     'minchainwork.py',\n     'p2p-fingerprint.py',\n     'uacomment.py',\n+    'p2p-acceptblock.py',\n ]\n \n EXTENDED_SCRIPTS = [\n@@ -152,7 +153,6 @@\n     'txn_clone.py --mineblock',\n     'notifications.py',\n     'invalidateblock.py',\n-    'p2p-acceptblock.py',\n     'replace-by-fee.py',\n ]\n "
      }
    ]
  },
  {
    "sha": "1b8c88451b0554502435d3883c528ad0aad1b09b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjhjODg0NTFiMDU1NDUwMjQzNWQzODgzYzUyOGFkMGFhZDFiMDli",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T16:26:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T16:27:02Z"
      },
      "message": "Merge #11376: Ensure backupwallet fails when attempting to backup to source file\n\n5d465e396 Ensure backupwallet fails when attempting to backup to source file (Tomas van der Wansem)\n\nPull request description:\n\n  Previous behaviour was to destroy the wallet (to zero-length)\n\n  This fixes #11375\n\nTree-SHA512: bfd1738659b15e3f23b6bbdf55ec12269c62c820bf701daec19500b52bd5845bb5516733c6f76f36197eb155182a8a35dc239ad4de2ef1e59bbb0f124a455759",
      "tree": {
        "sha": "90cf986283ccd754f0933e669c00eee2329c1027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90cf986283ccd754f0933e669c00eee2329c1027"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b8c88451b0554502435d3883c528ad0aad1b09b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ+fXWAAoJENLqSFDnUoslx5YP/0Eq/nDAu8B3cs05jaHFkrwt\n02HaCgsmeiwW2mT0uhyCefcxllTqNL4Dwypu3+xTC46V7o49i9bUqShFA/qjoba+\nfQK2JCGzDFZdmMHK3cSqmLnKI7D7SEyuPCENAwkZ1uQTpweZZ+pyR7mTImdHxJKn\njSrBB3cv4NUAYK9DbZwBXFzCoNMa/en9+Vv79RPJd/kZRpWW2+6buoNlkPy3Rg9d\nd0sgNHbbUGNkeegdDmNH3yB45MVexGEj2giGrlng1/ooSrUV8KWgThAiLH0xtQ9o\nz9/68BfHaClnyiRYQFqYrzWqfXPyeBaQJFkK24o/Zdb29j5K5dSg2CWTAX6LlDQ+\ncTfwwAZyHyHnwJ5URhTQBkX8OE46kLFp7lt+69g6i8Mr15IYprj/vjZbKS2bME6P\n4wKLr1QPHHbEwV/dZ34NQwxkRnU0/Y5rmlS/RNVW8KXyQVQb/1rC2mAP7+bacycj\ns3Kv/4zG6WHKhdSf5NMGQwmWaTOabPVnGwqSWPqV5Ynvng7WNInncUjnLTKbu3vX\nbu1Ix0TL+LZBX+0hGxasbSYkZLsCyK8UiAJA2EEsKFjGILbbgR9MFAhEwVA88xSJ\nQkQk9eoARE4Q8SGZ2qQxM4uGxC0MsmaAT6ItQrmz7AKGwzS3qRft6aauywaFuYtQ\nMAHcWlfWjddoN3aBbe3F\n=1BkB\n-----END PGP SIGNATURE-----",
        "payload": "tree 90cf986283ccd754f0933e669c00eee2329c1027\nparent cffa5ee132f3ef6a8d138eb98d15da2b61999ca4\nparent 5d465e396249a0e2cc60b16984a2bdbe4c8993c3\nauthor MarcoFalke <falke.marco@gmail.com> 1509553583 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1509553622 -0400\n\nMerge #11376: Ensure backupwallet fails when attempting to backup to source file\n\n5d465e396 Ensure backupwallet fails when attempting to backup to source file (Tomas van der Wansem)\n\nPull request description:\n\n  Previous behaviour was to destroy the wallet (to zero-length)\n\n  This fixes #11375\n\nTree-SHA512: bfd1738659b15e3f23b6bbdf55ec12269c62c820bf701daec19500b52bd5845bb5516733c6f76f36197eb155182a8a35dc239ad4de2ef1e59bbb0f124a455759\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b8c88451b0554502435d3883c528ad0aad1b09b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b8c88451b0554502435d3883c528ad0aad1b09b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b8c88451b0554502435d3883c528ad0aad1b09b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4"
      },
      {
        "sha": "5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d465e396249a0e2cc60b16984a2bdbe4c8993c3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5d48b01c2e5c1c9984ed661606abcc62293ea566",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b8c88451b0554502435d3883c528ad0aad1b09b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b8c88451b0554502435d3883c528ad0aad1b09b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=1b8c88451b0554502435d3883c528ad0aad1b09b",
        "patch": "@@ -705,6 +705,11 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                     pathDest /= strFile;\n \n                 try {\n+                    if (fs::equivalent(pathSrc, pathDest)) {\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        return false;\n+                    }\n+\n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n                     return true;"
      },
      {
        "sha": "85a149793e730fcaa072b80ee756d2b964ddf7b2",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b8c88451b0554502435d3883c528ad0aad1b09b/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b8c88451b0554502435d3883c528ad0aad1b09b/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=1b8c88451b0554502435d3883c528ad0aad1b09b",
        "patch": "@@ -190,6 +190,16 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), balance1)\n         assert_equal(self.nodes[2].getbalance(), balance2)\n \n+        # Backup to source wallet file must fail\n+        sourcePaths = [\n+            tmpdir + \"/node0/regtest/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallet.dat\",\n+            tmpdir + \"/node0/regtest/\",\n+            tmpdir + \"/node0/regtest\"]\n+\n+        for sourcePath in sourcePaths:\n+            assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)\n+\n \n if __name__ == '__main__':\n     WalletBackupTest().main()"
      }
    ]
  },
  {
    "sha": "2d4327db1973a354e9e4153de6958d49120fcde8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDQzMjdkYjE5NzNhMzU0ZTllNDE1M2RlNjk1OGQ0OTEyMGZjZGU4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-23T17:36:15Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-01T17:13:43Z"
      },
      "message": "net: Allow connecting to extra outbound peers",
      "tree": {
        "sha": "2f31c4deb1facd3378b84467e3e1ddbca3a51da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f31c4deb1facd3378b84467e3e1ddbca3a51da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d4327db1973a354e9e4153de6958d49120fcde8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d4327db1973a354e9e4153de6958d49120fcde8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d4327db1973a354e9e4153de6958d49120fcde8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d4327db1973a354e9e4153de6958d49120fcde8/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba216b5fa63e7e6cae847d1e3621f5c54840f898",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba216b5fa63e7e6cae847d1e3621f5c54840f898"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 51,
      "deletions": 1
    },
    "files": [
      {
        "sha": "077a51bac37423eb07abfb9be344cc54c09a53d1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d4327db1973a354e9e4153de6958d49120fcde8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d4327db1973a354e9e4153de6958d49120fcde8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2d4327db1973a354e9e4153de6958d49120fcde8",
        "patch": "@@ -1693,6 +1693,36 @@ void CConnman::ProcessOneShot()\n     }\n }\n \n+bool CConnman::GetTryNewOutboundPeer()\n+{\n+    return m_try_another_outbound_peer;\n+}\n+\n+void CConnman::SetTryNewOutboundPeer(bool flag)\n+{\n+    m_try_another_outbound_peer = flag;\n+}\n+\n+// Return the number of peers we have over our outbound connection limit\n+// Exclude peers that are marked for disconnect, or are going to be\n+// disconnected soon (eg one-shots and feelers)\n+// Also exclude peers that haven't finished initial connection handshake yet\n+// (so that we don't decide we're over our desired connection limit, and then\n+// evict some peer that has finished the handshake)\n+int CConnman::GetExtraOutboundCount()\n+{\n+    int nOutbound = 0;\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes) {\n+            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+                ++nOutbound;\n+            }\n+        }\n+    }\n+    return std::max(nOutbound - nMaxOutbound, 0);\n+}\n+\n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n {\n     // Connect to specific addresses\n@@ -1781,7 +1811,8 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         //  * Only make a feeler connection once every few minutes.\n         //\n         bool fFeeler = false;\n-        if (nOutbound >= nMaxOutbound) {\n+\n+        if (nOutbound >= nMaxOutbound && !GetTryNewOutboundPeer()) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n                 nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n@@ -2204,6 +2235,7 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     semOutbound = nullptr;\n     semAddnode = nullptr;\n     flagInterruptMsgProc = false;\n+    SetTryNewOutboundPeer(false);\n \n     Options connOptions;\n     Init(connOptions);"
      },
      {
        "sha": "c90df649922986440d1165e70e7b21f0e602e4a8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d4327db1973a354e9e4153de6958d49120fcde8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d4327db1973a354e9e4153de6958d49120fcde8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2d4327db1973a354e9e4153de6958d49120fcde8",
        "patch": "@@ -251,6 +251,19 @@ class CConnman\n     void GetBanned(banmap_t &banmap);\n     void SetBanned(const banmap_t &banmap);\n \n+    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n+    // a peer that is better than all our current peers.\n+    void SetTryNewOutboundPeer(bool flag);\n+    bool GetTryNewOutboundPeer();\n+\n+    // Return the number of outbound peers we have in excess of our target (eg,\n+    // if we previously called SetTryNewOutboundPeer(true), and have since set\n+    // to false, we may have extra peers that we wish to disconnect). This may\n+    // return a value less than (num_outbound_connections - num_outbound_slots)\n+    // in cases where some outbound connections are not yet fully connected, or\n+    // not yet fully disconnected.\n+    int GetExtraOutboundCount();\n+\n     bool AddNode(const std::string& node);\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n@@ -413,6 +426,11 @@ class CConnman\n     std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n+\n+    /** flag for deciding to connect to an extra outbound peer,\n+     *  in excess of nMaxOutbound\n+     *  This takes the place of a feeler connection */\n+    std::atomic_bool m_try_another_outbound_peer;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      }
    ]
  },
  {
    "sha": "db32a6589720e5b15931cef82e477118dfd92669",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjMyYTY1ODk3MjBlNWIxNTkzMWNlZjgyZTQ3NzExOGRmZDkyNjY5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-23T17:59:07Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-01T17:13:45Z"
      },
      "message": "Track tip update time and last new block announcement from each peer",
      "tree": {
        "sha": "613e1d9e19c8eef9915c80443efda7cad64afa20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/613e1d9e19c8eef9915c80443efda7cad64afa20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db32a6589720e5b15931cef82e477118dfd92669",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db32a6589720e5b15931cef82e477118dfd92669",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db32a6589720e5b15931cef82e477118dfd92669",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db32a6589720e5b15931cef82e477118dfd92669/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d4327db1973a354e9e4153de6958d49120fcde8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d4327db1973a354e9e4153de6958d49120fcde8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d4327db1973a354e9e4153de6958d49120fcde8"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 35,
      "deletions": 2
    },
    "files": [
      {
        "sha": "59df5d6502b5ad9e824cb0396ca292c268ef393b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db32a6589720e5b15931cef82e477118dfd92669/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db32a6589720e5b15931cef82e477118dfd92669/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=db32a6589720e5b15931cef82e477118dfd92669",
        "patch": "@@ -127,6 +127,10 @@ namespace {\n     /** Number of outbound peers with m_chain_sync.m_protect. */\n     int g_outbound_peers_with_protect_from_disconnect = 0;\n \n+\n+    /** When our tip was last updated. */\n+    int64_t g_last_tip_update = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n@@ -231,6 +235,9 @@ struct CNodeState {\n \n     ChainSyncTimeoutState m_chain_sync;\n \n+    //! Time of last new block announcement\n+    int64_t m_last_block_announcement;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -254,6 +261,7 @@ struct CNodeState {\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n         m_chain_sync = { 0, nullptr, false, false };\n+        m_last_block_announcement = 0;\n     }\n };\n \n@@ -797,6 +805,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n+\n+    g_last_tip_update = GetTime();\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n@@ -1215,6 +1225,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         return true;\n     }\n \n+    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n     {\n         LOCK(cs_main);\n@@ -1255,6 +1266,12 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             }\n             hashLastBlock = header.GetHash();\n         }\n+\n+        // If we don't have the last header, then they'll have given us\n+        // something new (if these headers are valid).\n+        if (mapBlockIndex.find(hashLastBlock) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n     }\n \n     CValidationState state;\n@@ -1319,6 +1336,10 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         // because it is set in UpdateBlockAvailability. Some nullptr checks\n         // are still present, however, as belt-and-suspenders.\n \n+        if (received_new_header && pindexLast->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n@@ -2219,6 +2240,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n \n+        bool received_new_header = false;\n+\n         {\n         LOCK(cs_main);\n \n@@ -2228,6 +2251,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n             return true;\n         }\n+\n+        if (mapBlockIndex.find(cmpctblock.header.GetHash()) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n         }\n \n         const CBlockIndex *pindex = nullptr;\n@@ -2266,6 +2293,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this was a new header with more work than our tip, update the\n+        // peer's last block announcement time\n+        if (received_new_header && pindex->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n@@ -2288,8 +2323,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!fAlreadyInFlight && !CanDirectFetch(chainparams.GetConsensus()))\n             return true;\n \n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n         if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates."
      }
    ]
  },
  {
    "sha": "6b58360f9b64eb0b680a662fdfd590e47f115f44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjU4MzYwZjliNjRlYjBiNjgwYTY2MmZkZmQ1OTBlNDdmMTE1ZjQ0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-01T16:02:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-01T21:49:07Z"
      },
      "message": "rpc: work-around an upstream libevent bug\n\nA rare race condition may trigger while awaiting the body of a message, see\nupsteam commit 5ff8eb26371c4dc56f384b2de35bea2d87814779 for details.\n\nThis may fix some reported rpc hangs/crashes.",
      "tree": {
        "sha": "2e80850dcc9c56af25f4771648b67179994dee35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e80850dcc9c56af25f4771648b67179994dee35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b58360f9b64eb0b680a662fdfd590e47f115f44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b58360f9b64eb0b680a662fdfd590e47f115f44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b58360f9b64eb0b680a662fdfd590e47f115f44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b58360f9b64eb0b680a662fdfd590e47f115f44/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cffa5ee132f3ef6a8d138eb98d15da2b61999ca4"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 26,
      "deletions": 2
    },
    "files": [
      {
        "sha": "63a634b244a618140dc7bc202e88f10f11a6b897",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b58360f9b64eb0b680a662fdfd590e47f115f44/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b58360f9b64eb0b680a662fdfd590e47f115f44/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6b58360f9b64eb0b680a662fdfd590e47f115f44",
        "patch": "@@ -24,6 +24,7 @@\n \n #include <event2/thread.h>\n #include <event2/buffer.h>\n+#include <event2/bufferevent.h>\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n@@ -239,6 +240,16 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n+    // Disable reading to work around a libevent bug, fixed in 2.2.0.\n+    if (event_get_version_number() < 0x02020001) {\n+        evhttp_connection* conn = evhttp_request_get_connection(req);\n+        if (conn) {\n+            bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+            if (bev) {\n+                bufferevent_disable(bev, EV_READ);\n+            }\n+        }\n+    }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n@@ -601,8 +612,21 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        std::bind(evhttp_send_reply, req, nStatus, (const char*)nullptr, (struct evbuffer *)nullptr));\n+    auto req_copy = req;\n+    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n+        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n+        // Re-enable reading from the socket. This is the second part of the libevent\n+        // workaround above.\n+        if (event_get_version_number() < 0x02020001) {\n+            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n+            if (conn) {\n+                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+                if (bev) {\n+                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n+                }\n+            }\n+        }\n+    });\n     ev->trigger(nullptr);\n     replySent = true;\n     req = nullptr; // transferred back to main thread"
      }
    ]
  },
  {
    "sha": "ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzdiMzdjZDJiZDYxMmE2NGE0MDA5YmE4MmYxY2QxZDU3ZjM3NDM0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-24T20:56:07Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-02T16:39:14Z"
      },
      "message": "Connect to an extra outbound peer if our tip is stale\n\nIf our tip hasn't updated in a while, that may be because our peers are\nnot relaying blocks to us that we would consider valid. Allow connection\nto an additional outbound peer in that circumstance.\n\nAlso, periodically check to see if we are exceeding our target number of\noutbound peers, and disconnect the one which has least recently\nannounced a new block to us (choosing the newest such peer in the case\nof tie).",
      "tree": {
        "sha": "cd7e7a674a9de4e5d93fea61c869fb7a03180725",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd7e7a674a9de4e5d93fea61c869fb7a03180725"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db32a6589720e5b15931cef82e477118dfd92669",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db32a6589720e5b15931cef82e477118dfd92669",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db32a6589720e5b15931cef82e477118dfd92669"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 114,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e57ea0f4367ef242d5a07eb4fd79ac5593b00339",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "patch": "@@ -1270,7 +1270,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman));\n+    peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "5eaeaab8f643300829a6a3d3f493761cf00394a7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "patch": "@@ -1701,6 +1701,7 @@ bool CConnman::GetTryNewOutboundPeer()\n void CConnman::SetTryNewOutboundPeer(bool flag)\n {\n     m_try_another_outbound_peer = flag;\n+    LogPrint(BCLog::NET, \"net: setting try another outbound peer=%s\\n\", flag ? \"true\" : \"false\");\n }\n \n // Return the number of peers we have over our outbound connection limit"
      },
      {
        "sha": "3aa13fff435f306c8d6270f3f4a266c8603e3b8d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 2,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "patch": "@@ -23,6 +23,7 @@\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"reverse_iterator.h\"\n+#include \"scheduler.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -127,7 +128,6 @@ namespace {\n     /** Number of outbound peers with m_chain_sync.m_protect. */\n     int g_outbound_peers_with_protect_from_disconnect = 0;\n \n-\n     /** When our tip was last updated. */\n     int64_t g_last_tip_update = 0;\n \n@@ -435,6 +435,15 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     }\n }\n \n+bool TipMayBeStale(const Consensus::Params &consensusParams)\n+{\n+    AssertLockHeld(cs_main);\n+    if (g_last_tip_update == 0) {\n+        g_last_tip_update = GetTime();\n+    }\n+    return g_last_tip_update < GetTime() - consensusParams.nPowTargetSpacing * 3 && mapBlocksInFlight.empty();\n+}\n+\n // Requires cs_main\n bool CanDirectFetch(const Consensus::Params &consensusParams)\n {\n@@ -772,9 +781,17 @@ static bool StaleBlockRequestAllowed(const CBlockIndex* pindex, const Consensus:\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    // Stale tip checking and peer eviction are on two different timers, but we\n+    // don't want them to get out of sync due to drift in the scheduler, so we\n+    // combine them in one function and schedule at the quicker (peer-eviction)\n+    // timer.\n+    static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n+    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n@@ -1424,6 +1441,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             // If this is an outbound peer, check to see if we should protect\n             // it from the bad/lagging chain logic.\n             if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom->GetId());\n                 nodestate->m_chain_sync.m_protect = true;\n                 ++g_outbound_peers_with_protect_from_disconnect;\n             }\n@@ -3004,6 +3022,83 @@ void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n     }\n }\n \n+void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n+{\n+    // Check whether we have too many outbound peers\n+    int extra_peers = connman->GetExtraOutboundCount();\n+    if (extra_peers > 0) {\n+        // If we have more outbound peers than we target, disconnect one.\n+        // Pick the outbound peer that least recently announced\n+        // us a new block, with ties broken by choosing the more recent\n+        // connection (higher node id)\n+        NodeId worst_peer = -1;\n+        int64_t oldest_block_announcement = std::numeric_limits<int64_t>::max();\n+\n+        LOCK(cs_main);\n+\n+        connman->ForEachNode([&](CNode* pnode) {\n+            // Ignore non-outbound peers, or nodes marked for disconnect already\n+            if (!IsOutboundDisconnectionCandidate(pnode) || pnode->fDisconnect) return;\n+            CNodeState *state = State(pnode->GetId());\n+            if (state == nullptr) return; // shouldn't be possible, but just in case\n+            // Don't evict our protected peers\n+            if (state->m_chain_sync.m_protect) return;\n+            if (state->m_last_block_announcement < oldest_block_announcement || (state->m_last_block_announcement == oldest_block_announcement && pnode->GetId() > worst_peer)) {\n+                worst_peer = pnode->GetId();\n+                oldest_block_announcement = state->m_last_block_announcement;\n+            }\n+        });\n+        if (worst_peer != -1) {\n+            bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n+                // Only disconnect a peer that has been connected to us for\n+                // some reasonable fraction of our check-frequency, to give\n+                // it time for new information to have arrived.\n+                // Also don't disconnect any peer we're trying to download a\n+                // block from.\n+                CNodeState &state = *State(pnode->GetId());\n+                if (time_in_seconds - pnode->nTimeConnected > MINIMUM_CONNECT_TIME && state.nBlocksInFlight == 0) {\n+                    LogPrint(BCLog::NET, \"disconnecting extra outbound peer=%d (last block announcement received at time %d)\\n\", pnode->GetId(), oldest_block_announcement);\n+                    pnode->fDisconnect = true;\n+                    return true;\n+                } else {\n+                    LogPrint(BCLog::NET, \"keeping outbound peer=%d chosen for eviction (connect time: %d, blocks_in_flight: %d)\\n\", pnode->GetId(), pnode->nTimeConnected, state.nBlocksInFlight);\n+                    return false;\n+                }\n+            });\n+            if (disconnected) {\n+                // If we disconnected an extra peer, that means we successfully\n+                // connected to at least one peer after the last time we\n+                // detected a stale tip. Don't try any more extra peers until\n+                // we next detect a stale tip, to limit the load we put on the\n+                // network from these extra connections.\n+                connman->SetTryNewOutboundPeer(false);\n+            }\n+        }\n+    }\n+}\n+\n+void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n+{\n+    if (connman == nullptr) return;\n+\n+    int64_t time_in_seconds = GetTime();\n+\n+    EvictExtraOutboundPeers(time_in_seconds);\n+\n+    if (time_in_seconds > m_stale_tip_check_time) {\n+        LOCK(cs_main);\n+        // Check whether our tip is stale, and if so, allow using an extra\n+        // outbound peer\n+        if (TipMayBeStale(consensusParams)) {\n+            LogPrintf(\"Potential stale tip detected, will try using extra outbound peer (last tip update: %d seconds ago)\\n\", time_in_seconds - g_last_tip_update);\n+            connman->SetTryNewOutboundPeer(true);\n+        } else if (connman->GetTryNewOutboundPeer()) {\n+            connman->SetTryNewOutboundPeer(false);\n+        }\n+        m_stale_tip_check_time = time_in_seconds + STALE_CHECK_INTERVAL;\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;"
      },
      {
        "sha": "0a49972eed148f2447e50a2301e905f3b3be4ff7",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"net.h\"\n #include \"validationinterface.h\"\n+#include \"consensus/params.h\"\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n@@ -27,13 +28,19 @@ static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/head\n static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n /** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n+/** How frequently to check for stale tips, in seconds */\n+static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n+/** How frequently to check for extra outbound peers and disconnect, in seconds */\n+static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n+/** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n+static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n-    CConnman* connman;\n+    CConnman* const connman;\n \n public:\n-    explicit PeerLogicValidation(CConnman* connman);\n+    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n@@ -55,6 +62,11 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    void EvictExtraOutboundPeers(int64_t time_in_seconds);\n+\n+private:\n+    int64_t m_stale_tip_check_time; //! Next time to check for stale tip\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "c768446d30532d259ca20f5beb4fc6016e131fdf",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "patch": "@@ -86,7 +86,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        peerLogic.reset(new PeerLogicValidation(connman));\n+        peerLogic.reset(new PeerLogicValidation(connman, scheduler));\n }\n \n TestingSetup::~TestingSetup()"
      }
    ]
  },
  {
    "sha": "83df25736ebaa23777e965d265ed677a8d79f23f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2RmMjU3MzZlYmFhMjM3NzdlOTY1ZDI2NWVkNjc3YThkNzlmMjNm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-24T08:26:05Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-02T16:39:14Z"
      },
      "message": "Add CConnmanTest to mutate g_connman in tests",
      "tree": {
        "sha": "781000ee1e9b246db0ff115229e53171b69b7c96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/781000ee1e9b246db0ff115229e53171b69b7c96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83df25736ebaa23777e965d265ed677a8d79f23f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83df25736ebaa23777e965d265ed677a8d79f23f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83df25736ebaa23777e965d265ed677a8d79f23f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83df25736ebaa23777e965d265ed677a8d79f23f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac7b37cd2bd612a64a4009ba82f1cd1d57f37434"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "edca1171ab741e7f4a7ecb6c934eb973516bc496",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83df25736ebaa23777e965d265ed677a8d79f23f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83df25736ebaa23777e965d265ed677a8d79f23f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=83df25736ebaa23777e965d265ed677a8d79f23f",
        "patch": "@@ -431,6 +431,8 @@ class CConnman\n      *  in excess of nMaxOutbound\n      *  This takes the place of a feeler connection */\n     std::atomic_bool m_try_another_outbound_peer;\n+\n+    friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      },
      {
        "sha": "85476b6da254bf4029a26ad837d924804b19ace0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83df25736ebaa23777e965d265ed677a8d79f23f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83df25736ebaa23777e965d265ed677a8d79f23f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=83df25736ebaa23777e965d265ed677a8d79f23f",
        "patch": "@@ -25,6 +25,18 @@\n \n #include <memory>\n \n+void CConnmanTest::AddNode(CNode& node)\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.push_back(&node);\n+}\n+\n+void CConnmanTest::ClearNodes()\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.clear();\n+}\n+\n uint256 insecure_rand_seed = GetRandHash();\n FastRandomContext insecure_rand_ctx(insecure_rand_seed);\n "
      },
      {
        "sha": "62ded2aaf5ac3ce09571edfbd163958f89edc79b",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83df25736ebaa23777e965d265ed677a8d79f23f/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83df25736ebaa23777e965d265ed677a8d79f23f/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=83df25736ebaa23777e965d265ed677a8d79f23f",
        "patch": "@@ -49,6 +49,12 @@ struct BasicTestingSetup {\n  * Included are data directory, coins database, script check threads setup.\n  */\n class CConnman;\n+class CNode;\n+struct CConnmanTest {\n+    static void AddNode(CNode& node);\n+    static void ClearNodes();\n+};\n+\n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "626291508c433488439b662f2e88882048fb59fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjYyOTE1MDhjNDMzNDg4NDM5YjY2MmYyZTg4ODgyMDQ4ZmI1OWZi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T14:32:46Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-02T16:39:14Z"
      },
      "message": "Add unit test for stale tip checking",
      "tree": {
        "sha": "f09d67b67497f85d76def9de2783048ec23aa109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f09d67b67497f85d76def9de2783048ec23aa109"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/626291508c433488439b662f2e88882048fb59fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/626291508c433488439b662f2e88882048fb59fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/626291508c433488439b662f2e88882048fb59fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/626291508c433488439b662f2e88882048fb59fb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83df25736ebaa23777e965d265ed677a8d79f23f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83df25736ebaa23777e965d265ed677a8d79f23f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83df25736ebaa23777e965d265ed677a8d79f23f"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 94,
      "deletions": 0
    },
    "files": [
      {
        "sha": "faa0c7620b49b1c970597c1269384da6d99e2731",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626291508c433488439b662f2e88882048fb59fb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626291508c433488439b662f2e88882048fb59fb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=626291508c433488439b662f2e88882048fb59fb",
        "patch": "@@ -550,6 +550,15 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// This function is used for testing the stale tip eviction logic, see\n+// DoS_tests.cpp\n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n+{\n+    LOCK(cs_main);\n+    CNodeState *state = State(node);\n+    if (state) state->m_last_block_announcement = time_in_seconds;\n+}\n+\n // Returns true for outbound peers, excluding manual connections, feelers, and\n // one-shots\n bool IsOutboundDisconnectionCandidate(const CNode *node)"
      },
      {
        "sha": "d1f9e63ecf5537b4aced43eac01eb610ae458d5e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626291508c433488439b662f2e88882048fb59fb/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626291508c433488439b662f2e88882048fb59fb/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=626291508c433488439b662f2e88882048fb59fb",
        "patch": "@@ -40,6 +40,8 @@ CService ip(uint32_t i)\n \n static NodeId id = 0;\n \n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds);\n+\n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n // Test eviction of an outbound peer whose chain never advances\n@@ -87,6 +89,89 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n+void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n+{\n+    CAddress addr(ip(GetRandInt(0xffffffff)), NODE_NONE);\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n+    CNode &node = *vNodes.back();\n+    node.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic.InitializeNode(&node);\n+    node.nVersion = 1;\n+    node.fSuccessfullyConnected = true;\n+\n+    CConnmanTest::AddNode(node);\n+}\n+\n+BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    constexpr int nMaxOutbound = 8;\n+    CConnman::Options options;\n+    options.nMaxConnections = 125;\n+    options.nMaxOutbound = nMaxOutbound;\n+    options.nMaxFeeler = 1;\n+\n+    connman->Init(options);\n+    std::vector<CNode *> vNodes;\n+\n+    // Mock some outbound peers\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        AddRandomOutboundPeer(vNodes, *peerLogic);\n+    }\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+\n+    // No nodes should be marked for disconnection while we have no extra peers\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    SetMockTime(GetTime() + 3*consensusParams.nPowTargetSpacing + 1);\n+\n+    // Now tip should definitely be stale, and we should look for an extra\n+    // outbound peer\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    BOOST_CHECK(connman->GetTryNewOutboundPeer());\n+\n+    // Still no peers should be marked for disconnection\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    // If we add one more peer, something should get marked for eviction\n+    // on the next check (since we're mocking the time to be in the future, the\n+    // required time connected check should be satisfied).\n+    AddRandomOutboundPeer(vNodes, *peerLogic);\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    // Last added node should get marked for eviction\n+    BOOST_CHECK(vNodes.back()->fDisconnect == true);\n+\n+    vNodes.back()->fDisconnect = false;\n+\n+    // Update the last announced block time for the last\n+    // peer, and check that the next newest node gets evicted.\n+    UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound-1; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes[nMaxOutbound-1]->fDisconnect == true);\n+    BOOST_CHECK(vNodes.back()->fDisconnect == false);\n+\n+    bool dummy;\n+    for (const CNode *node : vNodes) {\n+        peerLogic->FinalizeNode(node->GetId(), dummy);\n+    }\n+\n+    CConnmanTest::ClearNodes();\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);"
      }
    ]
  },
  {
    "sha": "bfb270acfa30713dc8c968bb9ee40cf5a2360359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmIyNzBhY2ZhMzA3MTNkYzhjOTY4YmI5ZWU0MGNmNWEyMzYwMzU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T16:58:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T16:58:56Z"
      },
      "message": "Merge #11590: [Wallet] always show help-line of wallet encryption calls\n\n720d9e8fa [Wallet] always show help-line of wallet encryption calls (Jonas Schnelli)\n\nPull request description:\n\n  We do currently show/hide the wallet encryption RPC calls from the help if the current wallet.\n  In case of an encrypted wallet, `encryptwallet` is hidden and `walletpassphrasechange`, `walletpassphrasechange` and `walletlock` do appear in the help.\n\n  This is no longer ideal in case of multiwallet due to the fact that one may want help infos in order to target a specific wallet.\n\n  IMO its preferable to have a static help screen (show everything always). The currently show/hidden calls do handle the possible invalid encryption-state fine.\n\n  Fixes #11588\n\nTree-SHA512: 513fecd15248a31361f5143685e8cdeb63dfd3fa7120828917e1db54d936dc3db60d48ce46efa5c3a563a48157fe962689879856eeeed53f904686b12aec204e",
      "tree": {
        "sha": "72403b504950daf2cd3245526b2800e333a23dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72403b504950daf2cd3245526b2800e333a23dd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfb270acfa30713dc8c968bb9ee40cf5a2360359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ+07QAAoJENLqSFDnUoslKacP/i76wdOAjPleI3/v/iAnDQjN\nlYHoguiyK6UfzChE0Or+eK/Tcpk2iFpm+rMsyzQKL16JDa65f7BK2UK53B0LzbpY\nodgLT8HDT2NpyBgq+o/rVtxA8bnCP5uyi9qW7iBIOYh1rg2efcf9gqRC4hMrIVM7\nzWk2I3mlDR8y0o7/g8CLBC7J7/HrzenNXEpCCZE8Zb1x9Fm2LSDNk+UuXvLwK0GG\n+1lJyD9JJu0+7oDEUKqpKtojFqIv+xM/9sj5x4+D06uXNhVJ2tIacOCyeyXdFxrF\nUirNf7AP/jnJQGAeXU6U8qNPkktZOy0J7yRzbpcmpmYpCV4uBtUq0i/k9aM7p2kR\nHA5TPS/L/ZFHv6Uvo3PYRfpKVRMeaRsxDaDJLjHa6yJW8zIz+M4qACkovWmkjLSa\nqfZ4CwQz2lv00wVrkBeiqIzuooaSoznrB+7MPozChGJmgxU2DSaEVYl+taspQ9ey\nkh04x4Mlux1JJ+voFUu40XQLHvnrLBIram5YNewnQSUBBwLsRWcgUiScjNirLj3V\nUFOuSK2YxamAeKQS7w1jbt89Ogo9eT2ctY7uQm51MpJMiibkK0DE1tzaCegtJ/XE\n2Msb2FyXu3HPH8RvrYmyGvg675c0iEOfVDve3G+zK6ljNnH5aO6d+u3sLg66ofoh\nIPjLBbANLAWrZpApFAuJ\n=dsTJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 72403b504950daf2cd3245526b2800e333a23dd7\nparent 1b8c88451b0554502435d3883c528ad0aad1b09b\nparent 720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53\nauthor MarcoFalke <falke.marco@gmail.com> 1509641926 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1509641936 -0400\n\nMerge #11590: [Wallet] always show help-line of wallet encryption calls\n\n720d9e8fa [Wallet] always show help-line of wallet encryption calls (Jonas Schnelli)\n\nPull request description:\n\n  We do currently show/hide the wallet encryption RPC calls from the help if the current wallet.\n  In case of an encrypted wallet, `encryptwallet` is hidden and `walletpassphrasechange`, `walletpassphrasechange` and `walletlock` do appear in the help.\n\n  This is no longer ideal in case of multiwallet due to the fact that one may want help infos in order to target a specific wallet.\n\n  IMO its preferable to have a static help screen (show everything always). The currently show/hidden calls do handle the possible invalid encryption-state fine.\n\n  Fixes #11588\n\nTree-SHA512: 513fecd15248a31361f5143685e8cdeb63dfd3fa7120828917e1db54d936dc3db60d48ce46efa5c3a563a48157fe962689879856eeeed53f904686b12aec204e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb270acfa30713dc8c968bb9ee40cf5a2360359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfb270acfa30713dc8c968bb9ee40cf5a2360359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb270acfa30713dc8c968bb9ee40cf5a2360359/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b8c88451b0554502435d3883c528ad0aad1b09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b8c88451b0554502435d3883c528ad0aad1b09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b8c88451b0554502435d3883c528ad0aad1b09b"
      },
      {
        "sha": "720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/720d9e8fa1d1c7516e8278eaaf60789d2f2c8a53"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c77cfa9ea9d2a960a95c709bac08c4ac232941cf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfb270acfa30713dc8c968bb9ee40cf5a2360359/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfb270acfa30713dc8c968bb9ee40cf5a2360359/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bfb270acfa30713dc8c968bb9ee40cf5a2360359",
        "patch": "@@ -2180,7 +2180,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n+    if (request.fHelp || request.params.size() != 2) {\n         throw std::runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -2244,7 +2244,7 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n+    if (request.fHelp || request.params.size() != 2) {\n         throw std::runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -2295,7 +2295,7 @@ UniValue walletlock(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 0)) {\n+    if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2335,7 +2335,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() != 1)) {\n+    if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\""
      }
    ]
  },
  {
    "sha": "97932cd2689659addfbb58dc6148928b73af3bd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzkzMmNkMjY4OTY1OWFkZGZiYjU4ZGM2MTQ4OTI4YjczYWYzYmQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-02T18:37:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-02T18:37:35Z"
      },
      "message": "rpc: further constrain the libevent workaround\n\nThe bug was introduced in 2.1.6-beta, versions before that don't need the\nworkaround.",
      "tree": {
        "sha": "26a86d6457c846e94a15b8b6ba4c02acd5054de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26a86d6457c846e94a15b8b6ba4c02acd5054de7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97932cd2689659addfbb58dc6148928b73af3bd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97932cd2689659addfbb58dc6148928b73af3bd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97932cd2689659addfbb58dc6148928b73af3bd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97932cd2689659addfbb58dc6148928b73af3bd0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b58360f9b64eb0b680a662fdfd590e47f115f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b58360f9b64eb0b680a662fdfd590e47f115f44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b58360f9b64eb0b680a662fdfd590e47f115f44"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f6cbaa20b71a5bb727a4353baee50c53080b3a5b",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97932cd2689659addfbb58dc6148928b73af3bd0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97932cd2689659addfbb58dc6148928b73af3bd0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=97932cd2689659addfbb58dc6148928b73af3bd0",
        "patch": "@@ -241,7 +241,7 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n     // Disable reading to work around a libevent bug, fixed in 2.2.0.\n-    if (event_get_version_number() < 0x02020001) {\n+    if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n         evhttp_connection* conn = evhttp_request_get_connection(req);\n         if (conn) {\n             bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n@@ -617,7 +617,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n         evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n         // Re-enable reading from the socket. This is the second part of the libevent\n         // workaround above.\n-        if (event_get_version_number() < 0x02020001) {\n+        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n             evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n             if (conn) {\n                 bufferevent* bev = evhttp_connection_get_bufferevent(conn);"
      }
    ]
  },
  {
    "sha": "7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDA4YjA3MDA1YzUwY2EyODY1ZWFkMzZmNWIzY2VlMGM4ZDFiYWNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-02T19:10:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-02T19:11:08Z"
      },
      "message": "Merge #11593: rpc: work-around an upstream libevent bug\n\n97932cd rpc: further constrain the libevent workaround (Cory Fields)\n6b58360 rpc: work-around an upstream libevent bug (Cory Fields)\n\nPull request description:\n\n  A rare race condition may trigger while awaiting the body of a message.\n\n  This may fix some reported rpc hangs/crashes.\n\n  This work-around mimics what libevent does internally once a write has started, which is what usually happens, but not always due to the processing happening on a different thread: https://github.com/libevent/libevent/blob/e7ff4ef2b4fc950a765008c18e74281cdb5e7668/http.c#L373\n\n  Fixed upstream at: https://github.com/libevent/libevent/commit/5ff8eb26371c4dc56f384b2de35bea2d87814779\n\nTree-SHA512: b9fa97cae9da2a44101c5faf1e3be0b9cbdf722982d35541cf224be31430779c75e519c8ed18d06ab7487bfb1211069b28f22739f126d6c28ca62d3f73b79a52",
      "tree": {
        "sha": "414e328707fadb3c89c1eb8eb07ebd04fb7a24c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/414e328707fadb3c89c1eb8eb07ebd04fb7a24c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+23MAAoJEB5K7WKYbNJd++UIAIwcSQoAeVMlqE+BWQ8X0XXv\nQ+qE2WB2+ulXW8lG6ZxvrCTcipKoVTVnsTT1sUpY4m4QXVWvWQ5jUCWUm86GISDT\nERpNmZZDDH6yHavEyDBUoCRwPvBYMmz6OMK9gfgQLF9Z0/fISx/v3g0dWetYEitC\nPAhZl1pzyNVvnDvTn8AAEFw3o3tw+/vLPCHRGtqIoOadNcTcL7f29Fdw1SmvBU1r\nH1+szP6nEHuU+/Yt2BcnU00agqpEo6T0R5zPkzVDYx0GLi//rFR2mJoVcwWNapqK\nb+Kx4v2E4MdD+71JcQQgmY+BD8bm5tXxyxhhnNbpvMApuCX75ILdkpzbPrI9O0A=\n=ffp3\n-----END PGP SIGNATURE-----",
        "payload": "tree 414e328707fadb3c89c1eb8eb07ebd04fb7a24c3\nparent bfb270acfa30713dc8c968bb9ee40cf5a2360359\nparent 97932cd2689659addfbb58dc6148928b73af3bd0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509649823 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509649868 +0100\n\nMerge #11593: rpc: work-around an upstream libevent bug\n\n97932cd rpc: further constrain the libevent workaround (Cory Fields)\n6b58360 rpc: work-around an upstream libevent bug (Cory Fields)\n\nPull request description:\n\n  A rare race condition may trigger while awaiting the body of a message.\n\n  This may fix some reported rpc hangs/crashes.\n\n  This work-around mimics what libevent does internally once a write has started, which is what usually happens, but not always due to the processing happening on a different thread: https://github.com/libevent/libevent/blob/e7ff4ef2b4fc950a765008c18e74281cdb5e7668/http.c#L373\n\n  Fixed upstream at: https://github.com/libevent/libevent/commit/5ff8eb26371c4dc56f384b2de35bea2d87814779\n\nTree-SHA512: b9fa97cae9da2a44101c5faf1e3be0b9cbdf722982d35541cf224be31430779c75e519c8ed18d06ab7487bfb1211069b28f22739f126d6c28ca62d3f73b79a52\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7008b07005c50ca2865ead36f5b3cee0c8d1bacc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfb270acfa30713dc8c968bb9ee40cf5a2360359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb270acfa30713dc8c968bb9ee40cf5a2360359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfb270acfa30713dc8c968bb9ee40cf5a2360359"
      },
      {
        "sha": "97932cd2689659addfbb58dc6148928b73af3bd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97932cd2689659addfbb58dc6148928b73af3bd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97932cd2689659addfbb58dc6148928b73af3bd0"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 26,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f6cbaa20b71a5bb727a4353baee50c53080b3a5b",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7008b07005c50ca2865ead36f5b3cee0c8d1bacc/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7008b07005c50ca2865ead36f5b3cee0c8d1bacc/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
        "patch": "@@ -24,6 +24,7 @@\n \n #include <event2/thread.h>\n #include <event2/buffer.h>\n+#include <event2/bufferevent.h>\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n@@ -239,6 +240,16 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n+    // Disable reading to work around a libevent bug, fixed in 2.2.0.\n+    if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n+        evhttp_connection* conn = evhttp_request_get_connection(req);\n+        if (conn) {\n+            bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+            if (bev) {\n+                bufferevent_disable(bev, EV_READ);\n+            }\n+        }\n+    }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n@@ -601,8 +612,21 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        std::bind(evhttp_send_reply, req, nStatus, (const char*)nullptr, (struct evbuffer *)nullptr));\n+    auto req_copy = req;\n+    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n+        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n+        // Re-enable reading from the socket. This is the second part of the libevent\n+        // workaround above.\n+        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n+            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n+            if (conn) {\n+                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+                if (bev) {\n+                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n+                }\n+            }\n+        }\n+    });\n     ev->trigger(nullptr);\n     replySent = true;\n     req = nullptr; // transferred back to main thread"
      }
    ]
  },
  {
    "sha": "2f959a58744d42859d74579220922e25ac3d2925",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjk1OWE1ODc0NGQ0Mjg1OWQ3NDU3OTIyMDkyMmUyNWFjM2QyOTI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-02T19:13:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-02T19:13:24Z"
      },
      "message": "Merge #11560: Connect to a new outbound peer if our tip is stale\n\n6262915 Add unit test for stale tip checking (Suhas Daftuar)\n83df257 Add CConnmanTest to mutate g_connman in tests (Jo\u00e3o Barbosa)\nac7b37c Connect to an extra outbound peer if our tip is stale (Suhas Daftuar)\ndb32a65 Track tip update time and last new block announcement from each peer (Suhas Daftuar)\n2d4327d net: Allow connecting to extra outbound peers (Suhas Daftuar)\n\nPull request description:\n\n  This is an alternative approach to #11534.  Rather than disconnect an outbound peer when our tip looks stale, instead try to connect to an additional outbound peer.\n\n  Periodically, check to see if we have more outbound peers than we target (ie if any extra peers are in use), and if so, disconnect the one that least recently announced a new block (breaking ties by choosing the newest peer that we connected to).\n\nTree-SHA512: 8f19e910e0bb36867f81783e020af225f356451899adfc7ade1895d6d3bd5afe51c83759610dfd10c62090c4fe404efa0283b2f63fde0bd7da898a1aaa7fb281",
      "tree": {
        "sha": "5b29d3325690b3b390e09ed05799e014a7e2affd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b29d3325690b3b390e09ed05799e014a7e2affd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f959a58744d42859d74579220922e25ac3d2925",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+25UAAoJEB5K7WKYbNJdb1gIAJiBIWYDclAsENSh7779XEOh\no38zjL/GZcilVDFOR0ji4JVaJnaRtUEDS8j0KYfWD8+ttxM37yzukSOqYa5MWI8M\nSONLa7Yz//LPuyV+EhD8BEKwOMwXrj3CiASCTFauccDfeSH16s2SbLpr1p9VVDqw\nRnGWX9NdMFjDg4QwYn8Q1vlo+MwNBA8lRstTGg3d/yFidooUMc1BQU4Uy43V4ess\nND17hCVeQAKrDBwnIT5zv5UOZvD3TZxvg+txB1HQBmkZCuf0js8QTV8gDzazy3ND\nE37Lh9BAxub7sK2Met7b1F3TawPjOpgaD33fGiMajcliKc/y8HVj/O8Uqs7/y8w=\n=r1/G\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b29d3325690b3b390e09ed05799e014a7e2affd\nparent 7008b07005c50ca2865ead36f5b3cee0c8d1bacc\nparent 626291508c433488439b662f2e88882048fb59fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509649997 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509650004 +0100\n\nMerge #11560: Connect to a new outbound peer if our tip is stale\n\n6262915 Add unit test for stale tip checking (Suhas Daftuar)\n83df257 Add CConnmanTest to mutate g_connman in tests (Jo\u00e3o Barbosa)\nac7b37c Connect to an extra outbound peer if our tip is stale (Suhas Daftuar)\ndb32a65 Track tip update time and last new block announcement from each peer (Suhas Daftuar)\n2d4327d net: Allow connecting to extra outbound peers (Suhas Daftuar)\n\nPull request description:\n\n  This is an alternative approach to #11534.  Rather than disconnect an outbound peer when our tip looks stale, instead try to connect to an additional outbound peer.\n\n  Periodically, check to see if we have more outbound peers than we target (ie if any extra peers are in use), and if so, disconnect the one that least recently announced a new block (breaking ties by choosing the newest peer that we connected to).\n\nTree-SHA512: 8f19e910e0bb36867f81783e020af225f356451899adfc7ade1895d6d3bd5afe51c83759610dfd10c62090c4fe404efa0283b2f63fde0bd7da898a1aaa7fb281\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f959a58744d42859d74579220922e25ac3d2925",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f959a58744d42859d74579220922e25ac3d2925",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f959a58744d42859d74579220922e25ac3d2925/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7008b07005c50ca2865ead36f5b3cee0c8d1bacc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7008b07005c50ca2865ead36f5b3cee0c8d1bacc"
      },
      {
        "sha": "626291508c433488439b662f2e88882048fb59fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/626291508c433488439b662f2e88882048fb59fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/626291508c433488439b662f2e88882048fb59fb"
      }
    ],
    "stats": {
      "total": 321,
      "additions": 313,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e57ea0f4367ef242d5a07eb4fd79ac5593b00339",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -1270,7 +1270,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman));\n+    peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "5eaeaab8f643300829a6a3d3f493761cf00394a7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -1693,6 +1693,37 @@ void CConnman::ProcessOneShot()\n     }\n }\n \n+bool CConnman::GetTryNewOutboundPeer()\n+{\n+    return m_try_another_outbound_peer;\n+}\n+\n+void CConnman::SetTryNewOutboundPeer(bool flag)\n+{\n+    m_try_another_outbound_peer = flag;\n+    LogPrint(BCLog::NET, \"net: setting try another outbound peer=%s\\n\", flag ? \"true\" : \"false\");\n+}\n+\n+// Return the number of peers we have over our outbound connection limit\n+// Exclude peers that are marked for disconnect, or are going to be\n+// disconnected soon (eg one-shots and feelers)\n+// Also exclude peers that haven't finished initial connection handshake yet\n+// (so that we don't decide we're over our desired connection limit, and then\n+// evict some peer that has finished the handshake)\n+int CConnman::GetExtraOutboundCount()\n+{\n+    int nOutbound = 0;\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes) {\n+            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+                ++nOutbound;\n+            }\n+        }\n+    }\n+    return std::max(nOutbound - nMaxOutbound, 0);\n+}\n+\n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n {\n     // Connect to specific addresses\n@@ -1781,7 +1812,8 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         //  * Only make a feeler connection once every few minutes.\n         //\n         bool fFeeler = false;\n-        if (nOutbound >= nMaxOutbound) {\n+\n+        if (nOutbound >= nMaxOutbound && !GetTryNewOutboundPeer()) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n                 nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n@@ -2204,6 +2236,7 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     semOutbound = nullptr;\n     semAddnode = nullptr;\n     flagInterruptMsgProc = false;\n+    SetTryNewOutboundPeer(false);\n \n     Options connOptions;\n     Init(connOptions);"
      },
      {
        "sha": "edca1171ab741e7f4a7ecb6c934eb973516bc496",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -251,6 +251,19 @@ class CConnman\n     void GetBanned(banmap_t &banmap);\n     void SetBanned(const banmap_t &banmap);\n \n+    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n+    // a peer that is better than all our current peers.\n+    void SetTryNewOutboundPeer(bool flag);\n+    bool GetTryNewOutboundPeer();\n+\n+    // Return the number of outbound peers we have in excess of our target (eg,\n+    // if we previously called SetTryNewOutboundPeer(true), and have since set\n+    // to false, we may have extra peers that we wish to disconnect). This may\n+    // return a value less than (num_outbound_connections - num_outbound_slots)\n+    // in cases where some outbound connections are not yet fully connected, or\n+    // not yet fully disconnected.\n+    int GetExtraOutboundCount();\n+\n     bool AddNode(const std::string& node);\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n@@ -413,6 +426,13 @@ class CConnman\n     std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n+\n+    /** flag for deciding to connect to an extra outbound peer,\n+     *  in excess of nMaxOutbound\n+     *  This takes the place of a feeler connection */\n+    std::atomic_bool m_try_another_outbound_peer;\n+\n+    friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      },
      {
        "sha": "35d73a6a2bffbf06ce774f5b00fca2ea4c776134",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 3,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -23,6 +23,7 @@\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"reverse_iterator.h\"\n+#include \"scheduler.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -127,6 +128,9 @@ namespace {\n     /** Number of outbound peers with m_chain_sync.m_protect. */\n     int g_outbound_peers_with_protect_from_disconnect = 0;\n \n+    /** When our tip was last updated. */\n+    int64_t g_last_tip_update = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n@@ -231,6 +235,9 @@ struct CNodeState {\n \n     ChainSyncTimeoutState m_chain_sync;\n \n+    //! Time of last new block announcement\n+    int64_t m_last_block_announcement;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -254,6 +261,7 @@ struct CNodeState {\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n         m_chain_sync = { 0, nullptr, false, false };\n+        m_last_block_announcement = 0;\n     }\n };\n \n@@ -427,6 +435,15 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     }\n }\n \n+bool TipMayBeStale(const Consensus::Params &consensusParams)\n+{\n+    AssertLockHeld(cs_main);\n+    if (g_last_tip_update == 0) {\n+        g_last_tip_update = GetTime();\n+    }\n+    return g_last_tip_update < GetTime() - consensusParams.nPowTargetSpacing * 3 && mapBlocksInFlight.empty();\n+}\n+\n // Requires cs_main\n bool CanDirectFetch(const Consensus::Params &consensusParams)\n {\n@@ -533,6 +550,15 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// This function is used for testing the stale tip eviction logic, see\n+// DoS_tests.cpp\n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n+{\n+    LOCK(cs_main);\n+    CNodeState *state = State(node);\n+    if (state) state->m_last_block_announcement = time_in_seconds;\n+}\n+\n // Returns true for outbound peers, excluding manual connections, feelers, and\n // one-shots\n bool IsOutboundDisconnectionCandidate(const CNode *node)\n@@ -764,9 +790,17 @@ static bool StaleBlockRequestAllowed(const CBlockIndex* pindex, const Consensus:\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    // Stale tip checking and peer eviction are on two different timers, but we\n+    // don't want them to get out of sync due to drift in the scheduler, so we\n+    // combine them in one function and schedule at the quicker (peer-eviction)\n+    // timer.\n+    static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n+    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n@@ -797,6 +831,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n+\n+    g_last_tip_update = GetTime();\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n@@ -1215,6 +1251,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         return true;\n     }\n \n+    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n     {\n         LOCK(cs_main);\n@@ -1255,6 +1292,12 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             }\n             hashLastBlock = header.GetHash();\n         }\n+\n+        // If we don't have the last header, then they'll have given us\n+        // something new (if these headers are valid).\n+        if (mapBlockIndex.find(hashLastBlock) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n     }\n \n     CValidationState state;\n@@ -1319,6 +1362,10 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         // because it is set in UpdateBlockAvailability. Some nullptr checks\n         // are still present, however, as belt-and-suspenders.\n \n+        if (received_new_header && pindexLast->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n@@ -1403,6 +1450,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             // If this is an outbound peer, check to see if we should protect\n             // it from the bad/lagging chain logic.\n             if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom->GetId());\n                 nodestate->m_chain_sync.m_protect = true;\n                 ++g_outbound_peers_with_protect_from_disconnect;\n             }\n@@ -2219,6 +2267,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n \n+        bool received_new_header = false;\n+\n         {\n         LOCK(cs_main);\n \n@@ -2228,6 +2278,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n             return true;\n         }\n+\n+        if (mapBlockIndex.find(cmpctblock.header.GetHash()) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n         }\n \n         const CBlockIndex *pindex = nullptr;\n@@ -2266,6 +2320,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this was a new header with more work than our tip, update the\n+        // peer's last block announcement time\n+        if (received_new_header && pindex->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n@@ -2288,8 +2350,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!fAlreadyInFlight && !CanDirectFetch(chainparams.GetConsensus()))\n             return true;\n \n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n         if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n@@ -2967,6 +3027,83 @@ void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n     }\n }\n \n+void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n+{\n+    // Check whether we have too many outbound peers\n+    int extra_peers = connman->GetExtraOutboundCount();\n+    if (extra_peers > 0) {\n+        // If we have more outbound peers than we target, disconnect one.\n+        // Pick the outbound peer that least recently announced\n+        // us a new block, with ties broken by choosing the more recent\n+        // connection (higher node id)\n+        NodeId worst_peer = -1;\n+        int64_t oldest_block_announcement = std::numeric_limits<int64_t>::max();\n+\n+        LOCK(cs_main);\n+\n+        connman->ForEachNode([&](CNode* pnode) {\n+            // Ignore non-outbound peers, or nodes marked for disconnect already\n+            if (!IsOutboundDisconnectionCandidate(pnode) || pnode->fDisconnect) return;\n+            CNodeState *state = State(pnode->GetId());\n+            if (state == nullptr) return; // shouldn't be possible, but just in case\n+            // Don't evict our protected peers\n+            if (state->m_chain_sync.m_protect) return;\n+            if (state->m_last_block_announcement < oldest_block_announcement || (state->m_last_block_announcement == oldest_block_announcement && pnode->GetId() > worst_peer)) {\n+                worst_peer = pnode->GetId();\n+                oldest_block_announcement = state->m_last_block_announcement;\n+            }\n+        });\n+        if (worst_peer != -1) {\n+            bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n+                // Only disconnect a peer that has been connected to us for\n+                // some reasonable fraction of our check-frequency, to give\n+                // it time for new information to have arrived.\n+                // Also don't disconnect any peer we're trying to download a\n+                // block from.\n+                CNodeState &state = *State(pnode->GetId());\n+                if (time_in_seconds - pnode->nTimeConnected > MINIMUM_CONNECT_TIME && state.nBlocksInFlight == 0) {\n+                    LogPrint(BCLog::NET, \"disconnecting extra outbound peer=%d (last block announcement received at time %d)\\n\", pnode->GetId(), oldest_block_announcement);\n+                    pnode->fDisconnect = true;\n+                    return true;\n+                } else {\n+                    LogPrint(BCLog::NET, \"keeping outbound peer=%d chosen for eviction (connect time: %d, blocks_in_flight: %d)\\n\", pnode->GetId(), pnode->nTimeConnected, state.nBlocksInFlight);\n+                    return false;\n+                }\n+            });\n+            if (disconnected) {\n+                // If we disconnected an extra peer, that means we successfully\n+                // connected to at least one peer after the last time we\n+                // detected a stale tip. Don't try any more extra peers until\n+                // we next detect a stale tip, to limit the load we put on the\n+                // network from these extra connections.\n+                connman->SetTryNewOutboundPeer(false);\n+            }\n+        }\n+    }\n+}\n+\n+void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n+{\n+    if (connman == nullptr) return;\n+\n+    int64_t time_in_seconds = GetTime();\n+\n+    EvictExtraOutboundPeers(time_in_seconds);\n+\n+    if (time_in_seconds > m_stale_tip_check_time) {\n+        LOCK(cs_main);\n+        // Check whether our tip is stale, and if so, allow using an extra\n+        // outbound peer\n+        if (TipMayBeStale(consensusParams)) {\n+            LogPrintf(\"Potential stale tip detected, will try using extra outbound peer (last tip update: %d seconds ago)\\n\", time_in_seconds - g_last_tip_update);\n+            connman->SetTryNewOutboundPeer(true);\n+        } else if (connman->GetTryNewOutboundPeer()) {\n+            connman->SetTryNewOutboundPeer(false);\n+        }\n+        m_stale_tip_check_time = time_in_seconds + STALE_CHECK_INTERVAL;\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;"
      },
      {
        "sha": "0a49972eed148f2447e50a2301e905f3b3be4ff7",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"net.h\"\n #include \"validationinterface.h\"\n+#include \"consensus/params.h\"\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n@@ -27,13 +28,19 @@ static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/head\n static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n /** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n+/** How frequently to check for stale tips, in seconds */\n+static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n+/** How frequently to check for extra outbound peers and disconnect, in seconds */\n+static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n+/** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n+static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n-    CConnman* connman;\n+    CConnman* const connman;\n \n public:\n-    explicit PeerLogicValidation(CConnman* connman);\n+    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n@@ -55,6 +62,11 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    void EvictExtraOutboundPeers(int64_t time_in_seconds);\n+\n+private:\n+    int64_t m_stale_tip_check_time; //! Next time to check for stale tip\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "d1f9e63ecf5537b4aced43eac01eb610ae458d5e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -40,6 +40,8 @@ CService ip(uint32_t i)\n \n static NodeId id = 0;\n \n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds);\n+\n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n // Test eviction of an outbound peer whose chain never advances\n@@ -87,6 +89,89 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n+void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n+{\n+    CAddress addr(ip(GetRandInt(0xffffffff)), NODE_NONE);\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n+    CNode &node = *vNodes.back();\n+    node.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic.InitializeNode(&node);\n+    node.nVersion = 1;\n+    node.fSuccessfullyConnected = true;\n+\n+    CConnmanTest::AddNode(node);\n+}\n+\n+BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    constexpr int nMaxOutbound = 8;\n+    CConnman::Options options;\n+    options.nMaxConnections = 125;\n+    options.nMaxOutbound = nMaxOutbound;\n+    options.nMaxFeeler = 1;\n+\n+    connman->Init(options);\n+    std::vector<CNode *> vNodes;\n+\n+    // Mock some outbound peers\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        AddRandomOutboundPeer(vNodes, *peerLogic);\n+    }\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+\n+    // No nodes should be marked for disconnection while we have no extra peers\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    SetMockTime(GetTime() + 3*consensusParams.nPowTargetSpacing + 1);\n+\n+    // Now tip should definitely be stale, and we should look for an extra\n+    // outbound peer\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    BOOST_CHECK(connman->GetTryNewOutboundPeer());\n+\n+    // Still no peers should be marked for disconnection\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    // If we add one more peer, something should get marked for eviction\n+    // on the next check (since we're mocking the time to be in the future, the\n+    // required time connected check should be satisfied).\n+    AddRandomOutboundPeer(vNodes, *peerLogic);\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    // Last added node should get marked for eviction\n+    BOOST_CHECK(vNodes.back()->fDisconnect == true);\n+\n+    vNodes.back()->fDisconnect = false;\n+\n+    // Update the last announced block time for the last\n+    // peer, and check that the next newest node gets evicted.\n+    UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound-1; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes[nMaxOutbound-1]->fDisconnect == true);\n+    BOOST_CHECK(vNodes.back()->fDisconnect == false);\n+\n+    bool dummy;\n+    for (const CNode *node : vNodes) {\n+        peerLogic->FinalizeNode(node->GetId(), dummy);\n+    }\n+\n+    CConnmanTest::ClearNodes();\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);"
      },
      {
        "sha": "85476b6da254bf4029a26ad837d924804b19ace0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -25,6 +25,18 @@\n \n #include <memory>\n \n+void CConnmanTest::AddNode(CNode& node)\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.push_back(&node);\n+}\n+\n+void CConnmanTest::ClearNodes()\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.clear();\n+}\n+\n uint256 insecure_rand_seed = GetRandHash();\n FastRandomContext insecure_rand_ctx(insecure_rand_seed);\n \n@@ -86,7 +98,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        peerLogic.reset(new PeerLogicValidation(connman));\n+        peerLogic.reset(new PeerLogicValidation(connman, scheduler));\n }\n \n TestingSetup::~TestingSetup()"
      },
      {
        "sha": "62ded2aaf5ac3ce09571edfbd163958f89edc79b",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f959a58744d42859d74579220922e25ac3d2925/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=2f959a58744d42859d74579220922e25ac3d2925",
        "patch": "@@ -49,6 +49,12 @@ struct BasicTestingSetup {\n  * Included are data directory, coins database, script check threads setup.\n  */\n class CConnman;\n+class CNode;\n+struct CConnmanTest {\n+    static void AddNode(CNode& node);\n+    static void ClearNodes();\n+};\n+\n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "41b15cfc9e6e25c63696c002bfdfec78882419cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWIxNWNmYzllNmUyNWM2MzY5NmMwMDJiZmRmZWM3ODg4MjQxOWNm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-04T19:35:06Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-04T19:35:06Z"
      },
      "message": "Add sjors gitian key",
      "tree": {
        "sha": "bb30343f8171cc519a1f04a252b3b39e4d95befc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb30343f8171cc519a1f04a252b3b39e4d95befc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41b15cfc9e6e25c63696c002bfdfec78882419cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAln+FmoTHHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCbJOD/49aLlX+vb2r2ekHIpjFP46S24dKdir\nlWnnG9IhXG8Za8z4k9u4vFrGGVppMCr0OUB0hi5ZuMIi7LA0xEUGTotG0+YwW7o9\n86K7j5ps7aC2uETGf1RAMWNiF+eyrzCHaiyvJiGfhZt0v/HB3ft4t3KM8wEAJlCz\nq/vur0B66kQNRa29Is2x4To9HpXiRJOymvbcjLCugPHgAbvK4pN0s3+IDAKUwAXQ\n+MOqa7DQXKOHAamy5UNIQqbTE87e/+3mw9GmSShTcjnon518z/cVrI+lONkW1stP\nJdHFILCdbw0bwYeKRsqtxfsIKAyPHrps+TJnOBvtCk+Gvp1GgYCr62zMacs2H2yK\nvwxBlFZ8Pm4m/WjZXQAKBdQPxo+ViTaGf7mtqyIHoQHuv2FxflPthn1RomWnoHIL\nLdrwvithFmEoY8ccaiwcKjeWOrplWz+/QPAtFaBogsjzhWxrEpD3v8MaiXuUxBHK\nFYaqYzFDuOiSnGcsTrNaECEnZm2d4ZmJ5ShJRhKumSFvLkVO8Yjhrcq7K8c15xZd\nlMnXYudDKDkUDkNTsjWHGUGC+NJmpMFvfsYl3utX0porUsqFc2sSLHY3j4/EHZR8\nhlKtrhBUz9+11S4YI95rXgUav7RUDaou3PYmgTPi/N7+WWz40OhjBxpC7DrsIMWS\nW21lf4enWh31nQ==\n=Lvm0\n-----END PGP SIGNATURE-----",
        "payload": "tree bb30343f8171cc519a1f04a252b3b39e4d95befc\nparent 2f959a58744d42859d74579220922e25ac3d2925\nauthor Sjors Provoost <sjors@sprovoost.nl> 1509824106 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1509824106 +0100\n\nAdd sjors gitian key\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b15cfc9e6e25c63696c002bfdfec78882419cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41b15cfc9e6e25c63696c002bfdfec78882419cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b15cfc9e6e25c63696c002bfdfec78882419cf/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f959a58744d42859d74579220922e25ac3d2925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f959a58744d42859d74579220922e25ac3d2925",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f959a58744d42859d74579220922e25ac3d2925"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2b5acc82aa47c6804a0b89ad426e26f9bad751a5",
        "filename": "contrib/gitian-keys/sjors-key.pgp",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41b15cfc9e6e25c63696c002bfdfec78882419cf/contrib/gitian-keys/sjors-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41b15cfc9e6e25c63696c002bfdfec78882419cf/contrib/gitian-keys/sjors-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sjors-key.pgp?ref=41b15cfc9e6e25c63696c002bfdfec78882419cf",
        "patch": "@@ -0,0 +1,76 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+\n+mQINBFWSwMoBEADG31O8+ex+xpgzVKQgF4iVRE5uBPT0+GM6FnwqIIhXVKiBLQh8\n+YDhhgk6joh+vsLrFzKZ9kXwoiHN8y/AiNCQ0xjAUdpznD5xvHAaGIAlT/sodRNT+\n+869WgT9G1uiVp0P4ucEeilmhCn9o51LqkS3roXkj0ec52b1pslUl2WKdu1ZD+Bj4\n+3/oVZm7mmjkDwl0RHJQmqlK0bunq0jlVlgH5sdQfmLbCZaq3LhVPf73zt5qHH+J6\n+ZbU7A4cqm2eN5SyH+Nno+cq3+vXmvVI+x/jPe/dPDCXaGWf5fWI/Lbk/mMP7JAl1\n+6X44CN+hZHUnNuzeZt2/ROWZ0s0JJcjQkSe9noUQedjBAHX82s886vsFzOHvDtul\n+EuV/XAjUlkhMbhZkZaIq9ucqHmUBI4+OcFEIbbKc9TrKtJe+CYuWTNlomVk/iFr8\n+zSm/S64NiqKi/BeQGgcsDZIaJDYfDP83esOOaaxFswHnJNtHnU1PwntrJtXft0dK\n+ydtlQZ6r96SYxLDTeGfC2SNk0zbnKAGvjj04vzQeN+JSRZ75tNKmgdbJdNL8wvPh\n+879TpCwMhNDvSRG+YqCe6whaJV76a+Doxg48HCJYaj6bnRn41/QGJEyL31I8l/7S\n+YsLLmAEbqwG7erYi7WZS3cRrGJI8RwohGMZf7yraqoaOgMKmtE/Sq0tLtwARAQAB\n+tCNTam9ycyBQcm92b29zdCA8c2pvcnNAc3Byb3Zvb3N0Lm5sPokCQAQTAQoAKgIb\n+AwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAUCWWXcoAIZAQAKCRBX/5vb\n+zDAQCeYJD/47XDMfEMg4g4spo7k92XsNkvjlAhWvvxd+kxow/V8c64WQXody32FZ\n+HRSmK8dVjf9mIJMKkX4lpKpim7cQxsdTcorcdu+yk4TK+Wah61vsMhbSSllfHs1U\n++q8jYMGnXTD+CY0aeTMrTfJcR2yN98jmNSWIL1qWmJ51RSTL6BQKb6eYtR7pWRkW\n+uMR6oFC09Db4fiKa4zhH81+/t0g+6pMY391gSluaS+OfNqGORCo+/IdG5IDzh5Vp\n+f19qXjd5oMsZQf6/P4b4XUktgl8RVRcNzdYGoXpcd8LpeHtEOh5I93ODmCwqd67b\n+YDlhDNN7iGhPndPEF6P4CNO/rXLPCZyMhRyt1dflu0KPCr+0AgR31cdhH/p7eCyj\n+FTE9gUgUHOG9OHdRoVXrwHYXwAiDBr2pp2giLpBsAwa4d2hXNDJ6wfMMCSOXKQlS\n+lHq06y/v/049DammkqW0XnEsU4qvsdteZ0jQu7Ob3LyGoytBIj8fn1OioT21W7wc\n+ns3/Tt4cQsn2ICBYB4PzqwkvGUp7fDwwHYw7rq6kvCEVDUDWMtVgQ8kjsh2OoU75\n+eeteM1Q1fV06Wfn2Qct9bn0NKRGrA8mm3lrCWYCeGqJeBvC6kna1QgV53vYRLJod\n+w3Ql4+M9tUIi9uiGLvVaGZWO9wU1EwL+EAO+6D85h6QiJN7H8gcwUokCPQQTAQoA\n+JwUCVZLAygIbAwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRBX/5vb\n+zDAQCauuD/9IDWhf/fTseA1Rt5i4gwK+8dCQjTlRS2cZtGc2aMX8w5XruDWnna1P\n+Mj/aVUncDrprRx9rxgEqIDyPheuJ6r7v6D8GjrpAjcG/BPNFtPaxQccbZbAYdzoj\n+Rrs+ttVIqS+wO7qLmQkKA4oGRMmgYh3VX8EBZNcvxaGCcJx0PfoqS8cPXTnCRHcg\n+Wx6kaFyuWtrTX+kCpDraB1KGtxedR4rzuOtUOLoqFOOfsQuOxPlKNNr9Zjc8x2o4\n+5TtwbuoEog8FIEttY6NOywpsSsvYvNB4gq1fxO49H0pQopmJlOMatMH6IRT7BJJZ\n+cOoHOh4X/zItOJZtuCOT4u+Y2XOuyLcW83X5ymIR3ZCxedsLzjyiCWm61/znJVON\n+Ws8I+gShbvauahBCB9rOHqwM0QioJMc36hUPB21KghQS8RJpGwmtk1WhFFMtAsSJ\n+w+wRfy2d6u+lSGdlA+2hEyKVm/DNQMDCQVFx3lQ6YBwAwkSiLMylrPKvs56fUjRr\n+74qoPyDxuRMC+q+TThHsy5O9r31G+Dc3+H5k4iTk354Jshjltx/k2O732e9Vxyar\n+/U5P7UZqHHuJKXDihUFrcJZq+gk8sGEWzGG/wocce7ezrTnHqR8YA04BTA4PXQqZ\n+4N42f422YYGIH/3Nm6drQkbigekLw6wx+NrxtTsYg4eCtSsaUd/RjLQhU2pvcnMg\n+UHJvdm9vc3QgPHNqb3JzQGZyZWVkb20ubmw+iQI9BBMBCgAnBQJZZdyfAhsDBQkH\n+hh+ABQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEFf/m9vMMBAJEsIQAK4ihgRB\n+05QqETpWNeV/XSGBHQINuwwEDz/k8dAJ5Uo6OoSpDULa16fs/EgAV46wTSxfWuci\n+n2Fc1AWLeLDWOax/NlycL00VDHEwT2PCjcc5uMuwR4RUTciKyByT1u7BFToZ6PyL\n+mbU6u6whcQejl6Ci2kw0Mu4n4bKTS7OL4/w/EbdfMSpRi8wWmTPMB/aMjtS2Mxi/\n+N+yQhJ9pReHADeCBoAjq0cUy+QbzvBwDCK4XWRzF7kiFuA7UW2r7/dX6l31mPfi/\n+GLA5+ftPxJ6EH8cxToF70OWiSfhOTleaqZaHUOG0V7wV2lr/bwAYzpVlxeZSCIta\n+lAA9ZLzUD2hiHYcei6kc/YjIhmlml7O0FK1eBk7+bt5wr0nvWt4Lbha4y5LxBX8C\n+d7InvB3xUYHz+S5Ul4vp0Rzx97MBL4oX2ltBEDpc1CcOgzv4dcWMG9bbh9/SaI/G\n+RehAzwkbpVUl9AEUNKO0dNlZUdu8CkehHdPdz5sJyS/9zE0A7yIECDFP9Nrht0nK\n+MahBijm4K+jOiLOZ2xyfOX1pVWLqIXGQHKjfcD3oI3qvGrQYtxB5Dffb9ACFMpZO\n+z3jM8h2UAa2/KqA4MZiZG9N6uWHKkIAMMuXWs1s439WePvbQ+5aw/qPUAMyqA3XZ\n+dkfn8QWaJPR4nRM+McYBYuS4fKK9HRJWQgcQuQINBFWSwMoBEACzmkabZ8oHWJUE\n+beU7rJF/TMbwV1IFtFxJ/QlY8rE4VnHekPMvkLi/gjx3WY5nmMe+d4JYoK/uPNdt\n+y5u0QYgH2MB/jebk4gYXCAHIPpU38h9UgHRb6qV8OaqHhmoXvKwyz+1QPzyJpmgg\n+oCUN+OAroNjl7zhunE7w7EEddFQftfPoGKEUnTjv84QOCuAb46JsYyiNAc3h6okq\n+74hY7PKCv8IRGclMPjemhBT2LEenn1t4yi7a8W/hjIe44PmQiqQEXR17keqcP/ls\n+EH9xSST1v/70ieiPqb6zbHGWzjQxqpFUJxRU6OluBCy5pHVd8wfFGYrrbTpoxaUC\n+jyA2SLr1oZZ9gaGprt6X7FC5gpE5LV9essq3O5wwvoPbyMe1F5uFaxIPhlt55oEu\n+rwVWecFJ8tSjniF/WSkTcILrOmiQZ4mylXfOP9Wk38seZReCs799KEfKFlXHk89a\n+Sj3ZvaJQxwVCnvsAsbVKmmHZ5wPt+G2KfhOkkv2A1I/UyeTT7aXvt2vxDqGuG0su\n+Eo6QknM/2Sr5Uv7BwBeSIQ6llH5ZnqKz34+HjriP8YPWzvsC959GXsxS01dCSvUM\n+92j5PvTZzf5dt1CWHMeufAY5XIH+nftkRniuScRhJ7xK3tJ7wngg7UvdeZwJWqmK\n+lJ7GI38V8HIMnd2x28yiGpj1ue6T+QARAQABiQIlBBgBCgAPBQJVksDKAhsMBQkH\n+hh+AAAoJEFf/m9vMMBAJjeIP/1UBCi6gSXzpGJBLD2u4PcZJjXBJAImZdf1aCqfS\n+YZBCaA65UrM3uaVa7h8MGAJc9kDjpqHurjDmG3YWf33KvHWYmReQvX43pZmfF12s\n+X7FZgcCfgZJKKj+ri6oHQonZzUMrecEcAJLLaQoD3Du3iZpETiyRLL7sJ1lZSaCJ\n+gYKnN4WV5GypvdFvb8vSUBST2h0D6AewGKMNh8ruRlkIxI+YSlywgYIH+O0qNKqW\n+wBlZc/5f+JZ3hu+cjx/+Zn+w+saIb6SgySg0UzN35b2WM2YzrfQep4ah3NIxuC7e\n+qzmfV6GnRtuUrBLVJ8qyjif1JSM9tZfinnmAB4/U5Qfc+YYViIXMTljmHWvbokas\n+tTBfVAw74yWnkv4ZuXf5SkTmGwEMJUOat0TSr085Ck5y394bRepdI1Y+1cdqpwMQ\n+QmkKyvcBlREQ7Xk1UnDDR3o/2ieVuGGHRp8jmoWBWGq4Cm43fYOlVe+PcaX0tDns\n+Tmmh2uwEU/TXe5qGil51OlSM7qhAMqhWUIYphSOcdvApNXuiWMfnTdjsNygE4HVh\n+Jq4efJ/nlx5N+PNAK2GpzeUJQGyxiVsXybq+h8UlvytBsdz1X6ZYzBv1yYwANThU\n+rMB1s4tMaEugX0aNByLcsxuS4ixd2qzwkYVz25Aeko/U1v2/j2cIRtrTNgja3BKE\n+N5Ug\n+=80Es\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "0cc98763919af6d0859b4b7de7d6cf65cd1d713e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2M5ODc2MzkxOWFmNmQwODU5YjRiN2RlN2Q2Y2Y2NWNkMWQ3MTNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-05T22:04:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-05T22:04:59Z"
      },
      "message": "Merge #11607: Add Gitian PGP key: Sjors\n\n41b15cfc9 Add sjors gitian key (Sjors Provoost)\n\nPull request description:\n\n  First Gitian PR: bitcoin/gitian.sigs#603\n\nTree-SHA512: 02ac643b31a47724bb06a80f00ca10b3f128aa4337e59e34161d6d2281f2882b1a834b3e4769de15fc3cea76616cf25b17e85026507c8f242f21b93744b4fe70",
      "tree": {
        "sha": "bb30343f8171cc519a1f04a252b3b39e4d95befc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb30343f8171cc519a1f04a252b3b39e4d95befc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cc98763919af6d0859b4b7de7d6cf65cd1d713e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAln/iwsACgkQHrd2uwPH\nki1qLRAAhJfsGc5w3KLvPxoE8nFneU7A35rlbjIvIQ2AHDXoNJA4WPIL6H2AJ+oZ\ngAN821cr0A9HmE/foPIINzdmldZeTjf6G0oIDZv78gCj1exXVrGwNQIgIcJlHHRB\nJjWvtCyPdzbPg/SKadJIxq6q+4aqThEk7Now3gFsaFiiLyTAaqAc4Lod0OFb2RDp\ndCvGsdHT+crB4lgyina2KxOevg22Q3p5BFFKBbjpiMQzSaE6Ac7URrZnzz0jQc0t\nEuRxpCxT+I85dmAO4A+DDkMcB9EVgG9kTNQaT1qHiCT4V27YKRMMWBmpsZthXPNa\nFsieUOyrEkiQW7Qkup57svq96d2DcoODkgl8T4h/IE/ul5aixyg5JFuohE4JDxXb\nWtW6z5BTGwVkhodxnsFwRIbuqW0KnMrMYVpVApEZyiVU0aqwXRXlR/le5LvZlZdJ\nXhESU0I/iWgMv2wYhHChuYfhK3YBOBNBNL8sj2mlgg1CzAIEfveeu97/zTSAIzjJ\nzhN3hV8lLR45MGbPbeIbkzNXj/WLOGIRFqjYc9VRbMt+9G4aRxvpSc+nt2rxCDIf\nXIvj/Usp6fbFRLhjeo1M6XSGiQ+ShXMwtf3/knKNjqmKU9JIg4ZVrJLBl16iH+fV\ndt2FEOqjur4BF+GQNqnVI6K1mu8x+wfbVGc1SGlCfOxonBszg5Q=\n=ANiF\n-----END PGP SIGNATURE-----",
        "payload": "tree bb30343f8171cc519a1f04a252b3b39e4d95befc\nparent 2f959a58744d42859d74579220922e25ac3d2925\nparent 41b15cfc9e6e25c63696c002bfdfec78882419cf\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1509919490 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1509919499 -1000\n\nMerge #11607: Add Gitian PGP key: Sjors\n\n41b15cfc9 Add sjors gitian key (Sjors Provoost)\n\nPull request description:\n\n  First Gitian PR: bitcoin/gitian.sigs#603\n\nTree-SHA512: 02ac643b31a47724bb06a80f00ca10b3f128aa4337e59e34161d6d2281f2882b1a834b3e4769de15fc3cea76616cf25b17e85026507c8f242f21b93744b4fe70\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc98763919af6d0859b4b7de7d6cf65cd1d713e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc98763919af6d0859b4b7de7d6cf65cd1d713e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc98763919af6d0859b4b7de7d6cf65cd1d713e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f959a58744d42859d74579220922e25ac3d2925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f959a58744d42859d74579220922e25ac3d2925",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f959a58744d42859d74579220922e25ac3d2925"
      },
      {
        "sha": "41b15cfc9e6e25c63696c002bfdfec78882419cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b15cfc9e6e25c63696c002bfdfec78882419cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41b15cfc9e6e25c63696c002bfdfec78882419cf"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2b5acc82aa47c6804a0b89ad426e26f9bad751a5",
        "filename": "contrib/gitian-keys/sjors-key.pgp",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc98763919af6d0859b4b7de7d6cf65cd1d713e/contrib/gitian-keys/sjors-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc98763919af6d0859b4b7de7d6cf65cd1d713e/contrib/gitian-keys/sjors-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sjors-key.pgp?ref=0cc98763919af6d0859b4b7de7d6cf65cd1d713e",
        "patch": "@@ -0,0 +1,76 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+\n+mQINBFWSwMoBEADG31O8+ex+xpgzVKQgF4iVRE5uBPT0+GM6FnwqIIhXVKiBLQh8\n+YDhhgk6joh+vsLrFzKZ9kXwoiHN8y/AiNCQ0xjAUdpznD5xvHAaGIAlT/sodRNT+\n+869WgT9G1uiVp0P4ucEeilmhCn9o51LqkS3roXkj0ec52b1pslUl2WKdu1ZD+Bj4\n+3/oVZm7mmjkDwl0RHJQmqlK0bunq0jlVlgH5sdQfmLbCZaq3LhVPf73zt5qHH+J6\n+ZbU7A4cqm2eN5SyH+Nno+cq3+vXmvVI+x/jPe/dPDCXaGWf5fWI/Lbk/mMP7JAl1\n+6X44CN+hZHUnNuzeZt2/ROWZ0s0JJcjQkSe9noUQedjBAHX82s886vsFzOHvDtul\n+EuV/XAjUlkhMbhZkZaIq9ucqHmUBI4+OcFEIbbKc9TrKtJe+CYuWTNlomVk/iFr8\n+zSm/S64NiqKi/BeQGgcsDZIaJDYfDP83esOOaaxFswHnJNtHnU1PwntrJtXft0dK\n+ydtlQZ6r96SYxLDTeGfC2SNk0zbnKAGvjj04vzQeN+JSRZ75tNKmgdbJdNL8wvPh\n+879TpCwMhNDvSRG+YqCe6whaJV76a+Doxg48HCJYaj6bnRn41/QGJEyL31I8l/7S\n+YsLLmAEbqwG7erYi7WZS3cRrGJI8RwohGMZf7yraqoaOgMKmtE/Sq0tLtwARAQAB\n+tCNTam9ycyBQcm92b29zdCA8c2pvcnNAc3Byb3Zvb3N0Lm5sPokCQAQTAQoAKgIb\n+AwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAUCWWXcoAIZAQAKCRBX/5vb\n+zDAQCeYJD/47XDMfEMg4g4spo7k92XsNkvjlAhWvvxd+kxow/V8c64WQXody32FZ\n+HRSmK8dVjf9mIJMKkX4lpKpim7cQxsdTcorcdu+yk4TK+Wah61vsMhbSSllfHs1U\n++q8jYMGnXTD+CY0aeTMrTfJcR2yN98jmNSWIL1qWmJ51RSTL6BQKb6eYtR7pWRkW\n+uMR6oFC09Db4fiKa4zhH81+/t0g+6pMY391gSluaS+OfNqGORCo+/IdG5IDzh5Vp\n+f19qXjd5oMsZQf6/P4b4XUktgl8RVRcNzdYGoXpcd8LpeHtEOh5I93ODmCwqd67b\n+YDlhDNN7iGhPndPEF6P4CNO/rXLPCZyMhRyt1dflu0KPCr+0AgR31cdhH/p7eCyj\n+FTE9gUgUHOG9OHdRoVXrwHYXwAiDBr2pp2giLpBsAwa4d2hXNDJ6wfMMCSOXKQlS\n+lHq06y/v/049DammkqW0XnEsU4qvsdteZ0jQu7Ob3LyGoytBIj8fn1OioT21W7wc\n+ns3/Tt4cQsn2ICBYB4PzqwkvGUp7fDwwHYw7rq6kvCEVDUDWMtVgQ8kjsh2OoU75\n+eeteM1Q1fV06Wfn2Qct9bn0NKRGrA8mm3lrCWYCeGqJeBvC6kna1QgV53vYRLJod\n+w3Ql4+M9tUIi9uiGLvVaGZWO9wU1EwL+EAO+6D85h6QiJN7H8gcwUokCPQQTAQoA\n+JwUCVZLAygIbAwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRBX/5vb\n+zDAQCauuD/9IDWhf/fTseA1Rt5i4gwK+8dCQjTlRS2cZtGc2aMX8w5XruDWnna1P\n+Mj/aVUncDrprRx9rxgEqIDyPheuJ6r7v6D8GjrpAjcG/BPNFtPaxQccbZbAYdzoj\n+Rrs+ttVIqS+wO7qLmQkKA4oGRMmgYh3VX8EBZNcvxaGCcJx0PfoqS8cPXTnCRHcg\n+Wx6kaFyuWtrTX+kCpDraB1KGtxedR4rzuOtUOLoqFOOfsQuOxPlKNNr9Zjc8x2o4\n+5TtwbuoEog8FIEttY6NOywpsSsvYvNB4gq1fxO49H0pQopmJlOMatMH6IRT7BJJZ\n+cOoHOh4X/zItOJZtuCOT4u+Y2XOuyLcW83X5ymIR3ZCxedsLzjyiCWm61/znJVON\n+Ws8I+gShbvauahBCB9rOHqwM0QioJMc36hUPB21KghQS8RJpGwmtk1WhFFMtAsSJ\n+w+wRfy2d6u+lSGdlA+2hEyKVm/DNQMDCQVFx3lQ6YBwAwkSiLMylrPKvs56fUjRr\n+74qoPyDxuRMC+q+TThHsy5O9r31G+Dc3+H5k4iTk354Jshjltx/k2O732e9Vxyar\n+/U5P7UZqHHuJKXDihUFrcJZq+gk8sGEWzGG/wocce7ezrTnHqR8YA04BTA4PXQqZ\n+4N42f422YYGIH/3Nm6drQkbigekLw6wx+NrxtTsYg4eCtSsaUd/RjLQhU2pvcnMg\n+UHJvdm9vc3QgPHNqb3JzQGZyZWVkb20ubmw+iQI9BBMBCgAnBQJZZdyfAhsDBQkH\n+hh+ABQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEFf/m9vMMBAJEsIQAK4ihgRB\n+05QqETpWNeV/XSGBHQINuwwEDz/k8dAJ5Uo6OoSpDULa16fs/EgAV46wTSxfWuci\n+n2Fc1AWLeLDWOax/NlycL00VDHEwT2PCjcc5uMuwR4RUTciKyByT1u7BFToZ6PyL\n+mbU6u6whcQejl6Ci2kw0Mu4n4bKTS7OL4/w/EbdfMSpRi8wWmTPMB/aMjtS2Mxi/\n+N+yQhJ9pReHADeCBoAjq0cUy+QbzvBwDCK4XWRzF7kiFuA7UW2r7/dX6l31mPfi/\n+GLA5+ftPxJ6EH8cxToF70OWiSfhOTleaqZaHUOG0V7wV2lr/bwAYzpVlxeZSCIta\n+lAA9ZLzUD2hiHYcei6kc/YjIhmlml7O0FK1eBk7+bt5wr0nvWt4Lbha4y5LxBX8C\n+d7InvB3xUYHz+S5Ul4vp0Rzx97MBL4oX2ltBEDpc1CcOgzv4dcWMG9bbh9/SaI/G\n+RehAzwkbpVUl9AEUNKO0dNlZUdu8CkehHdPdz5sJyS/9zE0A7yIECDFP9Nrht0nK\n+MahBijm4K+jOiLOZ2xyfOX1pVWLqIXGQHKjfcD3oI3qvGrQYtxB5Dffb9ACFMpZO\n+z3jM8h2UAa2/KqA4MZiZG9N6uWHKkIAMMuXWs1s439WePvbQ+5aw/qPUAMyqA3XZ\n+dkfn8QWaJPR4nRM+McYBYuS4fKK9HRJWQgcQuQINBFWSwMoBEACzmkabZ8oHWJUE\n+beU7rJF/TMbwV1IFtFxJ/QlY8rE4VnHekPMvkLi/gjx3WY5nmMe+d4JYoK/uPNdt\n+y5u0QYgH2MB/jebk4gYXCAHIPpU38h9UgHRb6qV8OaqHhmoXvKwyz+1QPzyJpmgg\n+oCUN+OAroNjl7zhunE7w7EEddFQftfPoGKEUnTjv84QOCuAb46JsYyiNAc3h6okq\n+74hY7PKCv8IRGclMPjemhBT2LEenn1t4yi7a8W/hjIe44PmQiqQEXR17keqcP/ls\n+EH9xSST1v/70ieiPqb6zbHGWzjQxqpFUJxRU6OluBCy5pHVd8wfFGYrrbTpoxaUC\n+jyA2SLr1oZZ9gaGprt6X7FC5gpE5LV9essq3O5wwvoPbyMe1F5uFaxIPhlt55oEu\n+rwVWecFJ8tSjniF/WSkTcILrOmiQZ4mylXfOP9Wk38seZReCs799KEfKFlXHk89a\n+Sj3ZvaJQxwVCnvsAsbVKmmHZ5wPt+G2KfhOkkv2A1I/UyeTT7aXvt2vxDqGuG0su\n+Eo6QknM/2Sr5Uv7BwBeSIQ6llH5ZnqKz34+HjriP8YPWzvsC959GXsxS01dCSvUM\n+92j5PvTZzf5dt1CWHMeufAY5XIH+nftkRniuScRhJ7xK3tJ7wngg7UvdeZwJWqmK\n+lJ7GI38V8HIMnd2x28yiGpj1ue6T+QARAQABiQIlBBgBCgAPBQJVksDKAhsMBQkH\n+hh+AAAoJEFf/m9vMMBAJjeIP/1UBCi6gSXzpGJBLD2u4PcZJjXBJAImZdf1aCqfS\n+YZBCaA65UrM3uaVa7h8MGAJc9kDjpqHurjDmG3YWf33KvHWYmReQvX43pZmfF12s\n+X7FZgcCfgZJKKj+ri6oHQonZzUMrecEcAJLLaQoD3Du3iZpETiyRLL7sJ1lZSaCJ\n+gYKnN4WV5GypvdFvb8vSUBST2h0D6AewGKMNh8ruRlkIxI+YSlywgYIH+O0qNKqW\n+wBlZc/5f+JZ3hu+cjx/+Zn+w+saIb6SgySg0UzN35b2WM2YzrfQep4ah3NIxuC7e\n+qzmfV6GnRtuUrBLVJ8qyjif1JSM9tZfinnmAB4/U5Qfc+YYViIXMTljmHWvbokas\n+tTBfVAw74yWnkv4ZuXf5SkTmGwEMJUOat0TSr085Ck5y394bRepdI1Y+1cdqpwMQ\n+QmkKyvcBlREQ7Xk1UnDDR3o/2ieVuGGHRp8jmoWBWGq4Cm43fYOlVe+PcaX0tDns\n+Tmmh2uwEU/TXe5qGil51OlSM7qhAMqhWUIYphSOcdvApNXuiWMfnTdjsNygE4HVh\n+Jq4efJ/nlx5N+PNAK2GpzeUJQGyxiVsXybq+h8UlvytBsdz1X6ZYzBv1yYwANThU\n+rMB1s4tMaEugX0aNByLcsxuS4ixd2qzwkYVz25Aeko/U1v2/j2cIRtrTNgja3BKE\n+N5Ug\n+=80Es\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  }
]