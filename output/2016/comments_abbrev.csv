jgarzik,2012-11-16T00:42:17Z,@sipa: ITYM back().  Updated.\n,https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10432231,10432231,
sipa,2012-11-18T20:01:09Z,"I like the general design, but this pull mixes an client-side optimization with changing the network protocol policy.\n\nI'm not against making it more strict and not trying to resync after a partial message or garbage data, but maybe that needs some discussion at least.\n",https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10490659,10490659,
mikehearn,2012-11-21T12:12:05Z,"When I didn't have resync after garbage data in bitcoinj I did see failures due to it, though it was long ago.\n\nBTW, is it possible now to send huge numbers of messages and cause OOM conditions? Previously if you did that the unread data would stick around in the kernels socket buffers and be discarded automatically. Now I guess the socket thread can read faster than the main thread can process.",https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10594689,10594689,
sipa,2012-11-21T14:21:49Z,"The last time I saw garbage occurring frequently was after the feb20 protocol upgrade. I suppose we can start requiring no garbage now...\n\nThe is still a receive buffer flooding check, by the way.\n",https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10598565,10598565,
BitcoinPullTester,2012-11-22T17:40:41Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8af12a9f5a56de594700abb5b0d9a05adf82d64b for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10641183,10641183,
sipa,2012-11-23T20:36:18Z,I wonder why we even need that flood protection. You could just as well stop polling sockets for read events if their receive buffer is above some threshold.\n,https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10669153,10669153,
sipa,2012-11-27T20:48:44Z,"For the record: I saw a node segfault with (among others) this patch, in the ~CNetMessage destructor (the CDataStream in it was not allocated, I assume uninitialized memory used as a CNetMessage).\n",https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-10776200,10776200,
BitcoinPullTester,2013-01-26T13:21:12Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8af12a9f5a56de594700abb5b0d9a05adf82d64b for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-12735236,12735236,
jgarzik,2013-03-24T16:29:08Z,Superceded by #2409 \n,https://github.com/bitcoin/bitcoin/pull/2016#issuecomment-15362009,15362009,
sipa,2012-11-15T22:41:16Z,vRecvMsg.back();\n,https://github.com/bitcoin/bitcoin/pull/2016#discussion_r2146150,2146150,src/net.cpp
sipa,2012-11-18T18:56:24Z,"I'm not sure this is right. When the receive version is set, it is only applied to new messages. In practice that probably doesn't mean anything, as the version/verack message order is quite strict.\n",https://github.com/bitcoin/bitcoin/pull/2016#discussion_r2161697,2161697,src/net.h
sipa,2012-12-13T23:11:44Z,Perhaps it's better to use an std::deque here instead of a std::vector?\n,https://github.com/bitcoin/bitcoin/pull/2016#discussion_r2415213,2415213,src/main.cpp
