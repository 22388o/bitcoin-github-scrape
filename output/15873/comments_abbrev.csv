fanatid,2019-04-23T06:41:56Z,"I support service which provide transactions history for users and accept their transactions for sending to network through bitcoind. Sometimes by some reason users transactions stuck for long time (very small percent). While blockexplorers kick users transactions from their mempool (which looks for users that their transaction not exists anymore), bitcoind which used by service still hold it. Pre",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-485663890,485663890,
jnewbery,2019-04-23T15:02:27Z,"I think this PR is the result of a misunderstanding of how transaction propagation and confirmation works in Bitcoin.\n\n> While blockexplorers kick users transactions from their mempool (which looks for users that their transaction not exists anymore)\n\nI expect that the vast majority of block explorers are backed by a Bitcoin Core node. The mempool will not remove a transaction except for:",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-485841844,485841844,
MarcoFalke,2019-04-23T15:07:53Z,"Agree with @jnewbery. Even though some miners run full-rbf, it might be easier and cleaner to use BIP 125 for now.",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-485844210,485844210,
fanatid,2019-04-23T15:41:41Z,"I agree that mempool will not remove transaction, while it not expired/limited/included/replaced. I also realize that if transaction broadcasted to network we can not remove it from network, while somebody else hold it. But, by some case bitcoind (0.17.1) hold broadcasted transaction, while it was removed from blockchain.info/blockchair.com/etc.\nI'm sorry, but I can not provide more details, bec",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-485858969,485858969,
gmaxwell,2019-04-23T16:28:54Z,"We've rejected this change before when it came without a really clear justification for its usefulness.  I haven't seen anything yet to change my mind there.\n\nBeing in bitcoind while blockchain.info has removed it is not, in and of itself, a good case for it.\n ",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-485877604,485877604,
andrewtoth,2019-04-23T22:11:23Z,"One thing this would be useful for would be testing mining replaced transactions in regtest. Unless I'm overlooking a way to do this, there isn't really a way to replace a transaction using RBF, then instead mine the transaction that was replaced. This is a common scenario on mainnet, since your replaced transaction might not propagate to a miner in time. \n\nThe workflow to do it with this rpc ",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-485993758,485993758,
sipa,2019-04-23T22:51:42Z,"> Unless I'm overlooking a way to do this, there isn't really a way to replace a transaction using RBF, then instead mine the transaction that was replaced.\n\nYou can construct and mine blocks directly from the python test framework, without bitcoind RPCs.",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-486002970,486002970,
andrewtoth,2019-04-23T23:03:25Z,"@sipa I'm talking about testing external systems systems which are talking to bitcoind, not using the python test framework. ",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-486005403,486005403,
gmaxwell,2019-04-24T05:31:25Z,"@andrewtoth  the same thing applies to whatever creates the block in the test, it can just manually inject the transaction. ",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-486073990,486073990,
Relaxo143,2019-04-26T10:04:32Z,"I like the idea of this rpc method since I've also personally needed to restart bitcoind in order to flush the mempool. Can someone explain though, could it be abused by any way? ",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487003808,487003808,
andrewtoth,2019-04-26T15:39:47Z,I suppose for my use case using this rpc would be a hack. A better solution would be modifying the `generatetoaddress` rpc to take a list of raw transactions to include in the block.,https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487103015,487103015,
MarcoFalke,2019-04-26T16:53:07Z,"Simply rewrite the `def create_block` in the test framwork (or translate it to the language your test framework is written)\n\nIf anyone needs this feature on mainnet, I fail to see why this canÂ´t be achieved by BIP-125 (with the additional advantage that the remainder of the network and miners will also switch out the transaction)",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487126037,487126037,
andrewtoth,2019-04-26T17:03:12Z,"The case I am talking about is not using a test framework, but using bitcoind in regtest. For testing a system that listens directly on the zmq interface and makes requests using rpc, it would be nice to be able to have an rpc that could generate a block with specified txs instead of using whatever is in the mempool.",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487129158,487129158,
sipa,2019-04-26T17:20:28Z,@andrewtoth I think that's a reasonable thing to add (an RPC to generate a block with specified contents).,https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487134370,487134370,
jnewbery,2019-04-28T15:47:43Z,"I think this is slightly less bad if it's for testing only (hidden rpc, only functions on regtest), but I'd still prefer not to add it if there are other ways to achieve the same thing.\n\n@andrewtoth - could you start a bitcoind in `-blocksonly`, then explicitly feed it the transactions you want to include in the block via the `sendrawtransaction` RPC or a `-whitelist` peer, and then generate t",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487390977,487390977,
andrewtoth,2019-04-28T23:37:22Z,"@jnewbery Yes that is a workaround to achieve what I want, but it requires running a second bitcoind.",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-487425037,487425037,
luke-jr,2019-05-01T06:06:30Z,"I think #7533 is a cleaner solution to the desired goal as I understand it? (Despite the PR closed status, I have continued to maintain it, and it is available in Knots already.)",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-488217420,488217420,
DrahtBot,2019-07-13T05:45:11Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-511091533,511091533,
fanquake,2020-02-25T02:13:10Z,"Doesn't seem to be any consensus that this is a good idea, or would be merged. Going to close this for now. Commenters might be interested in https://github.com/bitcoin/bitcoin/pull/17693 instead.",https://github.com/bitcoin/bitcoin/pull/15873#issuecomment-590646062,590646062,
