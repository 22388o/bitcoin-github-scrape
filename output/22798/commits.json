[
  {
    "sha": "fa10fbc6658fb8d87118cd550e4de406dca45f23",
    "node_id": "C_kwDOABII59oAKGZhMTBmYmM2NjU4ZmI4ZDg3MTE4Y2Q1NTBlNGRlNDA2ZGNhNDVmMjM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-25T17:55:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-21T09:13:29Z"
      },
      "message": "doc: Fix RPC result documentation",
      "tree": {
        "sha": "4a41a848234386936951ad27d94e15aad61cceec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a41a848234386936951ad27d94e15aad61cceec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa10fbc6658fb8d87118cd550e4de406dca45f23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi+UQwAj3EuQ4o+j0VpYkmkh5IYMNr2IB2KHKmu6jr4jApdPQbExcgGSSU7nCGb\n2ILLdiGqPj1tXzooZ2IkJXTdTK61HU9/0teok1JRviG/+SKSiZgZF0I1TPXqflt9\nGYMR1cfWPB4RAckBdBP+1iuMKqobJD4JmjevEIvssWoKXa8bHx5cgaI2ZUxakmbk\nXqD9a30QKU+Zh5a25GTRRWhSG3vD2goecKVt6JuphJv+9xBtZp+tb7fGHVf3VKwi\nf0k82L688w3paXw1LhR4wEkRnJWApnDuczgOw+o/RwhJ2NH68Qaw6cAc+kv0oBi3\nZUrUMjIn2siey3n5nTGFwTTP8O6S31Q+spFPXao3ac1UhhuKRUEWXM9UIWrMJRKu\ntBiKZLJ5Jr6uS+C0RSwNZSjnwc/TWDL+O2uEfYXSKeoF5W75PilaNOojkuaoHWOS\no7qv7jVpPQ52d9H/keIRUrxW8OWYGb0tv0rdHU9XIuRhJHh4/8MZ0kFvvU7mJI16\nkm3ZEd61\n=rt7m\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a41a848234386936951ad27d94e15aad61cceec\nparent 223ad2fd0d355a9caf3c12fe2a286030d7f3190f\nauthor MarcoFalke <falke.marco@gmail.com> 1629914115 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1632215609 +0200\n\ndoc: Fix RPC result documentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa10fbc6658fb8d87118cd550e4de406dca45f23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa10fbc6658fb8d87118cd550e4de406dca45f23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa10fbc6658fb8d87118cd550e4de406dca45f23/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "223ad2fd0d355a9caf3c12fe2a286030d7f3190f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223ad2fd0d355a9caf3c12fe2a286030d7f3190f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/223ad2fd0d355a9caf3c12fe2a286030d7f3190f"
      }
    ],
    "stats": {
      "total": 269,
      "additions": 145,
      "deletions": 124
    },
    "files": [
      {
        "sha": "08d21e0f715f359c6105d1de965a4129e425d293",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 42,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -1115,11 +1115,11 @@ static RPCHelpMan gettxoutsetinfo()\n                         {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", /* optional */ true, \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n                         {RPCResult::Type::STR_HEX, \"muhash\", /* optional */ true, \"The serialized hash (only present if 'muhash' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"transactions\", /* optional */ true, \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", /* optional */ true, \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\"},\n-                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", /* optional */ true, \"The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", /* optional */ true, \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n                         {\n                             {RPCResult::Type::STR_AMOUNT, \"prevout_spent\", \"Total amount of all prevouts spent in this block\"},\n                             {RPCResult::Type::STR_AMOUNT, \"coinbase\", \"Coinbase subsidy amount of this block\"},\n@@ -1436,32 +1436,32 @@ RPCHelpMan getblockchaininfo()\n                         {RPCResult::Type::STR_HEX, \"chainwork\", \"total amount of work in active chain, in hexadecimal\"},\n                         {RPCResult::Type::NUM, \"size_on_disk\", \"the estimated size of the block and undo files on disk\"},\n                         {RPCResult::Type::BOOL, \"pruned\", \"if the blocks are subject to pruning\"},\n-                        {RPCResult::Type::NUM, \"pruneheight\", \"lowest-height complete block stored (only present if pruning is enabled)\"},\n-                        {RPCResult::Type::BOOL, \"automatic_pruning\", \"whether automatic pruning is enabled (only present if pruning is enabled)\"},\n-                        {RPCResult::Type::NUM, \"prune_target_size\", \"the target size used by pruning (only present if automatic pruning is enabled)\"},\n+                        {RPCResult::Type::NUM, \"pruneheight\", /* optional */ true, \"lowest-height complete block stored (only present if pruning is enabled)\"},\n+                        {RPCResult::Type::BOOL, \"automatic_pruning\", /* optional */ true, \"whether automatic pruning is enabled (only present if pruning is enabled)\"},\n+                        {RPCResult::Type::NUM, \"prune_target_size\", /* optional */ true, \"the target size used by pruning (only present if automatic pruning is enabled)\"},\n                         {RPCResult::Type::OBJ_DYN, \"softforks\", \"status of softforks\",\n                         {\n                             {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n                                 {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n-                                {RPCResult::Type::OBJ, \"bip9\", \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {RPCResult::Type::OBJ, \"bip9\", /* optional */ true, \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n-                                    {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n+                                    {RPCResult::Type::NUM, \"bit\", /* optional */ true, \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n                                     {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::NUM, \"min_activation_height\", \"minimum height of blocks for which the rules may be enforced\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n+                                    {RPCResult::Type::OBJ, \"statistics\", /* optional */ true, \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n                                     {\n                                         {RPCResult::Type::NUM, \"period\", \"the length in blocks of the signalling period\"},\n-                                        {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature (only for \\\"started\\\" status)\"},\n+                                        {RPCResult::Type::NUM, \"threshold\", /* optional */ true, \"the number of blocks with the version bit set required to activate the feature (only for \\\"started\\\" status)\"},\n                                         {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n-                                        {RPCResult::Type::BOOL, \"possible\", \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n+                                        {RPCResult::Type::BOOL, \"possible\", /* optional */ true, \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n                                 {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                             }},\n                         }},\n@@ -1971,42 +1971,42 @@ static RPCHelpMan getblockstats()\n                 RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n             {\n-                {RPCResult::Type::NUM, \"avgfee\", \"Average fee in the block\"},\n-                {RPCResult::Type::NUM, \"avgfeerate\", \"Average feerate (in satoshis per virtual byte)\"},\n-                {RPCResult::Type::NUM, \"avgtxsize\", \"Average transaction size\"},\n-                {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash (to check for potential reorgs)\"},\n-                {RPCResult::Type::ARR_FIXED, \"feerate_percentiles\", \"Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\",\n+                {RPCResult::Type::NUM, \"avgfee\", /* optional */ true, \"Average fee in the block\"},\n+                {RPCResult::Type::NUM, \"avgfeerate\", /* optional */ true, \"Average feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"avgtxsize\", /* optional */ true, \"Average transaction size\"},\n+                {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"The block hash (to check for potential reorgs)\"},\n+                {RPCResult::Type::ARR_FIXED, \"feerate_percentiles\", /* optional */ true, \"Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\",\n                 {\n                     {RPCResult::Type::NUM, \"10th_percentile_feerate\", \"The 10th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"25th_percentile_feerate\", \"The 25th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"50th_percentile_feerate\", \"The 50th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"75th_percentile_feerate\", \"The 75th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"90th_percentile_feerate\", \"The 90th percentile feerate\"},\n                 }},\n-                {RPCResult::Type::NUM, \"height\", \"The height of the block\"},\n-                {RPCResult::Type::NUM, \"ins\", \"The number of inputs (excluding coinbase)\"},\n-                {RPCResult::Type::NUM, \"maxfee\", \"Maximum fee in the block\"},\n-                {RPCResult::Type::NUM, \"maxfeerate\", \"Maximum feerate (in satoshis per virtual byte)\"},\n-                {RPCResult::Type::NUM, \"maxtxsize\", \"Maximum transaction size\"},\n-                {RPCResult::Type::NUM, \"medianfee\", \"Truncated median fee in the block\"},\n-                {RPCResult::Type::NUM, \"mediantime\", \"The block median time past\"},\n-                {RPCResult::Type::NUM, \"mediantxsize\", \"Truncated median transaction size\"},\n-                {RPCResult::Type::NUM, \"minfee\", \"Minimum fee in the block\"},\n-                {RPCResult::Type::NUM, \"minfeerate\", \"Minimum feerate (in satoshis per virtual byte)\"},\n-                {RPCResult::Type::NUM, \"mintxsize\", \"Minimum transaction size\"},\n-                {RPCResult::Type::NUM, \"outs\", \"The number of outputs\"},\n-                {RPCResult::Type::NUM, \"subsidy\", \"The block subsidy\"},\n-                {RPCResult::Type::NUM, \"swtotal_size\", \"Total size of all segwit transactions\"},\n-                {RPCResult::Type::NUM, \"swtotal_weight\", \"Total weight of all segwit transactions\"},\n-                {RPCResult::Type::NUM, \"swtxs\", \"The number of segwit transactions\"},\n-                {RPCResult::Type::NUM, \"time\", \"The block time\"},\n-                {RPCResult::Type::NUM, \"total_out\", \"Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\"},\n-                {RPCResult::Type::NUM, \"total_size\", \"Total size of all non-coinbase transactions\"},\n-                {RPCResult::Type::NUM, \"total_weight\", \"Total weight of all non-coinbase transactions\"},\n-                {RPCResult::Type::NUM, \"totalfee\", \"The fee total\"},\n-                {RPCResult::Type::NUM, \"txs\", \"The number of transactions (including coinbase)\"},\n-                {RPCResult::Type::NUM, \"utxo_increase\", \"The increase/decrease in the number of unspent outputs\"},\n-                {RPCResult::Type::NUM, \"utxo_size_inc\", \"The increase/decrease in size for the utxo index (not discounting op_return and similar)\"},\n+                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"The height of the block\"},\n+                {RPCResult::Type::NUM, \"ins\", /* optional */ true, \"The number of inputs (excluding coinbase)\"},\n+                {RPCResult::Type::NUM, \"maxfee\", /* optional */ true, \"Maximum fee in the block\"},\n+                {RPCResult::Type::NUM, \"maxfeerate\", /* optional */ true, \"Maximum feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"maxtxsize\", /* optional */ true, \"Maximum transaction size\"},\n+                {RPCResult::Type::NUM, \"medianfee\", /* optional */ true, \"Truncated median fee in the block\"},\n+                {RPCResult::Type::NUM, \"mediantime\", /* optional */ true, \"The block median time past\"},\n+                {RPCResult::Type::NUM, \"mediantxsize\", /* optional */ true, \"Truncated median transaction size\"},\n+                {RPCResult::Type::NUM, \"minfee\", /* optional */ true, \"Minimum fee in the block\"},\n+                {RPCResult::Type::NUM, \"minfeerate\", /* optional */ true, \"Minimum feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"mintxsize\", /* optional */ true, \"Minimum transaction size\"},\n+                {RPCResult::Type::NUM, \"outs\", /* optional */ true, \"The number of outputs\"},\n+                {RPCResult::Type::NUM, \"subsidy\", /* optional */ true, \"The block subsidy\"},\n+                {RPCResult::Type::NUM, \"swtotal_size\", /* optional */ true, \"Total size of all segwit transactions\"},\n+                {RPCResult::Type::NUM, \"swtotal_weight\", /* optional */ true, \"Total weight of all segwit transactions\"},\n+                {RPCResult::Type::NUM, \"swtxs\", /* optional */ true, \"The number of segwit transactions\"},\n+                {RPCResult::Type::NUM, \"time\", /* optional */ true, \"The block time\"},\n+                {RPCResult::Type::NUM, \"total_out\", /* optional */ true, \"Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\"},\n+                {RPCResult::Type::NUM, \"total_size\", /* optional */ true, \"Total size of all non-coinbase transactions\"},\n+                {RPCResult::Type::NUM, \"total_weight\", /* optional */ true, \"Total weight of all non-coinbase transactions\"},\n+                {RPCResult::Type::NUM, \"totalfee\", /* optional */ true, \"The fee total\"},\n+                {RPCResult::Type::NUM, \"txs\", /* optional */ true, \"The number of transactions (including coinbase)\"},\n+                {RPCResult::Type::NUM, \"utxo_increase\", /* optional */ true, \"The increase/decrease in the number of unspent outputs\"},\n+                {RPCResult::Type::NUM, \"utxo_size_inc\", /* optional */ true, \"The increase/decrease in size for the utxo index (not discounting op_return and similar)\"},\n             }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockstats\", R\"('\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"' '[\"minfeerate\",\"avgfeerate\"]')\") +"
      },
      {
        "sha": "60ec15e904d611f34d203d8347de9eafcfc6c7b3",
        "filename": "src/rpc/external_signer.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/external_signer.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -24,8 +24,11 @@ static RPCHelpMan enumeratesigners()\n             {\n                 {RPCResult::Type::ARR, \"signers\", /* optional */ false, \"\",\n                 {\n-                    {RPCResult::Type::STR_HEX, \"masterkeyfingerprint\", \"Master key fingerprint\"},\n-                    {RPCResult::Type::STR, \"name\", \"Device name\"},\n+                    {RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"fingerprint\", \"Master key fingerprint\"},\n+                        {RPCResult::Type::STR, \"name\", \"Device name\"},\n+                    }},\n                 },\n                 }\n             }"
      },
      {
        "sha": "eb2d5b9c5f0248da49a686514caf4469ed4ea9f3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -553,6 +553,10 @@ static RPCHelpMan getblocktemplate()\n                 {\n                     {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                 }},\n+                {RPCResult::Type::ARR, \"capabilities\", \"\",\n+                {\n+                    {RPCResult::Type::STR, \"value\", \"A supported feature, for example 'proposal'\"},\n+                }},\n                 {RPCResult::Type::NUM, \"vbrequired\", \"bit mask of versionbits the server requires set in submissions\"},\n                 {RPCResult::Type::STR, \"previousblockhash\", \"The hash of current highest block\"},\n                 {RPCResult::Type::ARR, \"transactions\", \"contents of non-coinbase transactions that should be included in the next block\",\n@@ -586,11 +590,12 @@ static RPCHelpMan getblocktemplate()\n                 {RPCResult::Type::STR_HEX, \"noncerange\", \"A range of valid nonces\"},\n                 {RPCResult::Type::NUM, \"sigoplimit\", \"limit of sigops in blocks\"},\n                 {RPCResult::Type::NUM, \"sizelimit\", \"limit of block size\"},\n-                {RPCResult::Type::NUM, \"weightlimit\", \"limit of block weight\"},\n+                {RPCResult::Type::NUM, \"weightlimit\", /* optional */ true, \"limit of block weight\"},\n                 {RPCResult::Type::NUM_TIME, \"curtime\", \"current timestamp in \" + UNIX_EPOCH_TIME},\n                 {RPCResult::Type::STR, \"bits\", \"compressed target of next block\"},\n                 {RPCResult::Type::NUM, \"height\", \"The height of the next block\"},\n-                {RPCResult::Type::STR, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"},\n+                {RPCResult::Type::STR_HEX, \"signet_challenge\", /* optional */ true, \"Only on signet\"},\n+                {RPCResult::Type::STR_HEX, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"},\n             }},\n         },\n         RPCExamples{"
      },
      {
        "sha": "dff212998000c64705b387b4b4ba6d62f8b3044b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -44,10 +44,10 @@ static RPCHelpMan validateaddress()\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n-                        {RPCResult::Type::STR, \"address\", \"The bitcoin address validated\"},\n-                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address\"},\n-                        {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script\"},\n-                        {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address\"},\n+                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n+                        {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n+                        {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n                         {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n                         {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n                         {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n@@ -717,7 +717,7 @@ static RPCHelpMan getindexinfo()\n                     {\"index_name\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Filter results for an index with a specific name.\"},\n                 },\n                 RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\", {\n+                    RPCResult::Type::OBJ_DYN, \"\", \"\", {\n                         {\n                             RPCResult::Type::OBJ, \"name\", \"The name of the index\",\n                             {"
      },
      {
        "sha": "a9bee33c5d08fa156454c970158bdd2088b6428c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -116,10 +116,10 @@ static RPCHelpMan getpeerinfo()\n                             {\n                             {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n                             {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", \"(ip:port) Local address as reported by the peer\"},\n+                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n                             {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n                                                                 \"peer selection (only available if the asmap config flag is set)\"},\n                             {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n                             {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n@@ -135,9 +135,9 @@ static RPCHelpMan getpeerinfo()\n                             {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n                             {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n                             {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", \"ping wait (if non-zero)\"},\n+                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n                             {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n                             {RPCResult::Type::STR, \"subver\", \"The string version\"},\n                             {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},"
      },
      {
        "sha": "737abf6ca9b6429e38c1b3f96e267e335e04e629",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 26,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -94,7 +94,7 @@ static RPCHelpMan getrawtransaction()\n                      RPCResult{\"if verbose is set to true\",\n                          RPCResult::Type::OBJ, \"\", \"\",\n                          {\n-                             {RPCResult::Type::BOOL, \"in_active_chain\", \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\"},\n+                             {RPCResult::Type::BOOL, \"in_active_chain\", /* optional */ true, \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\"},\n                              {RPCResult::Type::STR_HEX, \"hex\", \"The serialized, hex-encoded data for 'txid'\"},\n                              {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id (same as provided)\"},\n                              {RPCResult::Type::STR_HEX, \"hash\", \"The transaction hash (differs from txid for witness transactions)\"},\n@@ -115,7 +115,7 @@ static RPCHelpMan getrawtransaction()\n                                          {RPCResult::Type::STR_HEX, \"hex\", \"hex\"},\n                                      }},\n                                      {RPCResult::Type::NUM, \"sequence\", \"The script sequence number\"},\n-                                     {RPCResult::Type::ARR, \"txinwitness\", \"\",\n+                                     {RPCResult::Type::ARR, \"txinwitness\", /* optional */ true, \"\",\n                                      {\n                                          {RPCResult::Type::STR_HEX, \"hex\", \"hex-encoded witness data (if any)\"},\n                                      }},\n@@ -141,10 +141,10 @@ static RPCHelpMan getrawtransaction()\n                                      }},\n                                  }},\n                              }},\n-                             {RPCResult::Type::STR_HEX, \"blockhash\", \"the block hash\"},\n-                             {RPCResult::Type::NUM, \"confirmations\", \"The confirmations\"},\n-                             {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME},\n-                             {RPCResult::Type::NUM, \"time\", \"Same as \\\"blocktime\\\"\"},\n+                             {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"the block hash\"},\n+                             {RPCResult::Type::NUM, \"confirmations\", /* optional */ true, \"The confirmations\"},\n+                             {RPCResult::Type::NUM_TIME, \"blocktime\", /* optional */ true, \"The block time expressed in \" + UNIX_EPOCH_TIME},\n+                             {RPCResult::Type::NUM, \"time\", /* optional */ true, \"Same as \\\"blocktime\\\"\"},\n                         }\n                     },\n                 },\n@@ -470,14 +470,15 @@ static RPCHelpMan decoderawtransaction()\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\",\n                             {\n-                                {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n-                                {RPCResult::Type::NUM, \"vout\", \"The output number\"},\n-                                {RPCResult::Type::OBJ, \"scriptSig\", \"The script\",\n+                                {RPCResult::Type::STR_HEX, \"coinbase\", /* optional */ true, \"\"},\n+                                {RPCResult::Type::STR_HEX, \"txid\", /* optional */ true, \"The transaction id\"},\n+                                {RPCResult::Type::NUM, \"vout\", /* optional */ true, \"The output number\"},\n+                                {RPCResult::Type::OBJ, \"scriptSig\", /* optional */ true, \"The script\",\n                                 {\n                                     {RPCResult::Type::STR, \"asm\", \"asm\"},\n                                     {RPCResult::Type::STR_HEX, \"hex\", \"hex\"},\n                                 }},\n-                                {RPCResult::Type::ARR, \"txinwitness\", \"\",\n+                                {RPCResult::Type::ARR, \"txinwitness\", /* optional */ true, \"\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"hex\", \"hex-encoded witness data (if any)\"},\n                                 }},\n@@ -559,8 +560,8 @@ static RPCHelpMan decodescript()\n                         {\n                             {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n                         }},\n-                        {RPCResult::Type::STR, \"p2sh\", \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n-                        {RPCResult::Type::OBJ, \"segwit\", \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n+                        {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n+                        {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n                         {\n                             {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n                             {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n@@ -772,6 +773,10 @@ static RPCHelpMan signrawtransactionwithkey()\n                             {\n                                 {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::ARR, \"witness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"witness\", \"\"},\n+                                }},\n                                 {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n                                 {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n                                 {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n@@ -909,15 +914,15 @@ static RPCHelpMan testmempoolaccept()\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate.\"\n+                            {RPCResult::Type::STR, \"package-error\", /* optional */ true, \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", /* optional */ true, \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate. \"\n                                                                \"If not present, the tx was not fully validated due to a failure in another tx in the list.\"},\n-                            {RPCResult::Type::NUM, \"vsize\", \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n-                            {RPCResult::Type::OBJ, \"fees\", \"Transaction fees (only present if 'allowed' is true)\",\n+                            {RPCResult::Type::NUM, \"vsize\", /* optional */ true, \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n+                            {RPCResult::Type::OBJ, \"fees\", /* optional */ true, \"Transaction fees (only present if 'allowed' is true)\",\n                             {\n                                 {RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee in \" + CURRENCY_UNIT},\n                             }},\n-                            {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n+                            {RPCResult::Type::STR, \"reject-reason\", /* optional */ true, \"Rejection string (only present when 'allowed' is false)\"},\n                         }},\n                     }\n                 },\n@@ -1056,7 +1061,7 @@ static RPCHelpMan decodepsbt()\n                                         {RPCResult::Type::STR, \"asm\", \"The asm\"},\n                                         {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n                                         {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n-                                        {RPCResult::Type::STR, \"address\",\" Bitcoin address if there is one\"},\n+                                        {RPCResult::Type::STR, \"address\", /*optional=*/true, \"Bitcoin address if there is one\"},\n                                     }},\n                                 }},\n                                 {RPCResult::Type::OBJ_DYN, \"partial_signatures\", /* optional */ true, \"\",\n@@ -1078,22 +1083,23 @@ static RPCHelpMan decodepsbt()\n                                 }},\n                                 {RPCResult::Type::ARR, \"bip32_derivs\", /* optional */ true, \"\",\n                                 {\n-                                    {RPCResult::Type::OBJ, \"pubkey\", /* optional */ true, \"The public key with the derivation path as the value.\",\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n                                     {\n+                                        {RPCResult::Type::STR, \"pubkey\", \"The public key with the derivation path as the value.\"},\n                                         {RPCResult::Type::STR, \"master_fingerprint\", \"The fingerprint of the master key\"},\n                                         {RPCResult::Type::STR, \"path\", \"The path\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::OBJ, \"final_scriptsig\", /* optional */ true, \"\",\n+                                {RPCResult::Type::OBJ, \"final_scriptSig\", /* optional */ true, \"\",\n                                 {\n                                     {RPCResult::Type::STR, \"asm\", \"The asm\"},\n                                     {RPCResult::Type::STR, \"hex\", \"The hex\"},\n                                 }},\n-                                {RPCResult::Type::ARR, \"final_scriptwitness\", \"\",\n+                                {RPCResult::Type::ARR, \"final_scriptwitness\", /* optional */ true, \"\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"\", \"hex-encoded witness data (if any)\"},\n                                 }},\n-                                {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                                {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n@@ -1124,7 +1130,7 @@ static RPCHelpMan decodepsbt()\n                                         {RPCResult::Type::STR, \"path\", \"The path\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                                {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n@@ -1398,8 +1404,8 @@ static RPCHelpMan finalizepsbt()\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n-                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded partially signed transaction if not extracted\"},\n-                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded network transaction if extracted\"},\n+                        {RPCResult::Type::STR, \"psbt\", /* optional */ true, \"The base64-encoded partially signed transaction if not extracted\"},\n+                        {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"The hex-encoded network transaction if extracted\"},\n                         {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n                     }\n                 },\n@@ -1791,7 +1797,7 @@ static RPCHelpMan analyzepsbt()\n             RPCResult {\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n-                    {RPCResult::Type::ARR, \"inputs\", \"\",\n+                    {RPCResult::Type::ARR, \"inputs\", /* optional */ true, \"\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {"
      },
      {
        "sha": "77757e79a33275e65e446f54b5da55648da44068",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 41,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10fbc6658fb8d87118cd550e4de406dca45f23/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa10fbc6658fb8d87118cd550e4de406dca45f23",
        "patch": "@@ -472,7 +472,7 @@ static RPCHelpMan sendtoaddress()\n                         RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n-                            {RPCResult::Type::STR, \"fee reason\", \"The transaction fee reason.\"}\n+                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n                         },\n                     },\n                 },\n@@ -899,7 +899,7 @@ static RPCHelpMan sendmany()\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n                 \"the number of addresses.\"},\n-                            {RPCResult::Type::STR, \"fee reason\", \"The transaction fee reason.\"}\n+                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n                         },\n                     },\n                 },\n@@ -1213,7 +1213,7 @@ static RPCHelpMan listreceivedbyaddress()\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n                             {RPCResult::Type::STR, \"address\", \"The receiving address\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received by the address\"},\n                             {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n@@ -1261,7 +1261,7 @@ static RPCHelpMan listreceivedbylabel()\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount received by addresses with this label\"},\n                             {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n                             {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n@@ -1388,20 +1388,24 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n {\n     return{{RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations for the transaction. Negative confirmations means the\\n\"\n                \"transaction conflicted that many blocks ago.\"},\n-           {RPCResult::Type::BOOL, \"generated\", \"Only present if transaction only input is a coinbase one.\"},\n-           {RPCResult::Type::BOOL, \"trusted\", \"Only present if we consider transaction to be trusted and so safe to spend from.\"},\n-           {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash containing the transaction.\"},\n-           {RPCResult::Type::NUM, \"blockheight\", \"The block height containing the transaction.\"},\n-           {RPCResult::Type::NUM, \"blockindex\", \"The index of the transaction in the block that includes it.\"},\n-           {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::BOOL, \"generated\", /* optional */ true, \"Only present if transaction only input is a coinbase one.\"},\n+           {RPCResult::Type::BOOL, \"trusted\", /* optional */ true, \"Only present if we consider transaction to be trusted and so safe to spend from.\"},\n+           {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"The block hash containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockheight\", /* optional */ true, \"The block height containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockindex\", /* optional */ true, \"The index of the transaction in the block that includes it.\"},\n+           {RPCResult::Type::NUM_TIME, \"blocktime\", /* optional */ true, \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n            {RPCResult::Type::ARR, \"walletconflicts\", \"Conflicting transaction ids.\",\n            {\n                {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n            }},\n+           {RPCResult::Type::STR_HEX, \"replaced_by_txid\", /* optional */ true, \"The txid if this tx was replaced.\"},\n+           {RPCResult::Type::STR_HEX, \"replaces_txid\", /* optional */ true, \"The txid if the tx replaces one.\"},\n+           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"\"},\n+           {RPCResult::Type::STR, \"to\", /* optional */ true, \"If a comment to is associated with the transaction.\"},\n            {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n-           {RPCResult::Type::STR, \"comment\", \"If a comment is associated with the transaction, only present if not empty.\"},\n+           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"If a comment is associated with the transaction, only present if not empty.\"},\n            {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n                \"may be unknown for unconfirmed transactions not in the mempool\"}};\n }\n@@ -1423,7 +1427,7 @@ static RPCHelpMan listtransactions()\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n                         {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n                             {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n                             {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n                                 \"\\\"send\\\"                  Transactions sent.\\n\"\n@@ -1433,14 +1437,14 @@ static RPCHelpMan listtransactions()\n                                 \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n                                 \"for all other categories\"},\n-                            {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n                             {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                            {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n                                  \"'send' category of transactions.\"},\n                         },\n                         TransactionDescriptionString()),\n                         {\n-                            {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                            {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n                                  \"'send' category of transactions.\"},\n                         })},\n                     }\n@@ -1537,7 +1541,7 @@ static RPCHelpMan listsinceblock()\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n                             {\n-                                {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n                                 {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n                                 {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n                                     \"\\\"send\\\"                  Transactions sent.\\n\"\n@@ -1548,18 +1552,17 @@ static RPCHelpMan listsinceblock()\n                                 {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n                                     \"for all other categories\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n                                      \"'send' category of transactions.\"},\n                             },\n                             TransactionDescriptionString()),\n                             {\n-                                {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n                                      \"'send' category of transactions.\"},\n-                                {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n-                                {RPCResult::Type::STR, \"to\", \"If a comment to is associated with the transaction.\"},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n                             })},\n                         }},\n-                        {RPCResult::Type::ARR, \"removed\", \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n+                        {RPCResult::Type::ARR, \"removed\", /* optional */ true, \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n                             \"Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\"\n                         , {{RPCResult::Type::ELISION, \"\", \"\"},}},\n                         {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain, or the genesis hash if the referenced block does not exist yet. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n@@ -1672,7 +1675,7 @@ static RPCHelpMan gettransaction()\n                     RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n                     {\n                         {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n                                      \"'send' category of transactions.\"},\n                     },\n                     TransactionDescriptionString()),\n@@ -1681,25 +1684,25 @@ static RPCHelpMan gettransaction()\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\",\n                             {\n-                                {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n-                                {RPCResult::Type::STR, \"address\", \"The bitcoin address involved in the transaction.\"},\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address involved in the transaction.\"},\n                                 {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n                                     \"\\\"send\\\"                  Transactions sent.\\n\"\n                                     \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n                                     \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n                                     \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n                                     \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n                                 {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                                {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n                                     \"'send' category of transactions.\"},\n-                                {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n                                      \"'send' category of transactions.\"},\n                             }},\n                         }},\n                         {RPCResult::Type::STR_HEX, \"hex\", \"Raw data for transaction\"},\n-                        {RPCResult::Type::OBJ, \"decoded\", \"Optional, the decoded transaction (only present when `verbose` is passed)\",\n+                        {RPCResult::Type::OBJ, \"decoded\", /* optional */ true, \"The decoded transaction (only present when `verbose` is passed)\",\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"Equivalent to the RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\"},\n                         }},\n@@ -2362,9 +2365,9 @@ static RPCHelpMan getbalances()\n                     {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"used\", \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"used\", /* optional */ true, \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n                 }},\n-                {RPCResult::Type::OBJ, \"watchonly\", \"watchonly balances (not present if wallet does not watch anything)\",\n+                {RPCResult::Type::OBJ, \"watchonly\", /* optional */ true, \"watchonly balances (not present if wallet does not watch anything)\",\n                 {\n                     {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n@@ -2431,9 +2434,9 @@ static RPCHelpMan getwalletinfo()\n                         {RPCResult::Type::STR_AMOUNT, \"unconfirmed_balance\", \"DEPRECATED. Identical to getbalances().mine.untrusted_pending\"},\n                         {RPCResult::Type::STR_AMOUNT, \"immature_balance\", \"DEPRECATED. Identical to getbalances().mine.immature\"},\n                         {RPCResult::Type::NUM, \"txcount\", \"the total number of transactions in the wallet\"},\n-                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool. Legacy wallets only.\"},\n+                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", /* optional */ true, \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool. Legacy wallets only.\"},\n                         {RPCResult::Type::NUM, \"keypoolsize\", \"how many new keys are pre-generated (only counts external keys)\"},\n-                        {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n+                        {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", /* optional */ true, \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n                         {RPCResult::Type::NUM_TIME, \"unlocked_until\", /* optional */ true, \"the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked (only present for passphrase-encrypted wallets)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"paytxfee\", \"the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kvB\"},\n                         {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"the Hash160 of the HD seed (only present when HD is enabled)\"},\n@@ -2955,20 +2958,20 @@ static RPCHelpMan listunspent()\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"the transaction id\"},\n                             {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                            {RPCResult::Type::STR, \"address\", \"the bitcoin address\"},\n-                            {RPCResult::Type::STR, \"label\", \"The associated label, or \\\"\\\" for the default label\"},\n+                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"the bitcoin address\"},\n+                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"The associated label, or \\\"\\\" for the default label\"},\n                             {RPCResult::Type::STR, \"scriptPubKey\", \"the script key\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"the transaction output amount in \" + CURRENCY_UNIT},\n                             {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n                             {RPCResult::Type::NUM, \"ancestorcount\", /* optional */ true, \"The number of in-mempool ancestor transactions, including this one (if transaction is in the mempool)\"},\n                             {RPCResult::Type::NUM, \"ancestorsize\", /* optional */ true, \"The virtual transaction size of in-mempool ancestors, including this one (if transaction is in the mempool)\"},\n                             {RPCResult::Type::STR_AMOUNT, \"ancestorfees\", /* optional */ true, \"The total fees of in-mempool ancestors (including this one) with fee deltas used for mining priority in \" + CURRENCY_ATOM + \" (if transaction is in the mempool)\"},\n-                            {RPCResult::Type::STR_HEX, \"redeemScript\", \"The redeemScript if scriptPubKey is P2SH\"},\n-                            {RPCResult::Type::STR, \"witnessScript\", \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n+                            {RPCResult::Type::STR_HEX, \"redeemScript\", /* optional */ true, \"The redeemScript if scriptPubKey is P2SH\"},\n+                            {RPCResult::Type::STR, \"witnessScript\", /* optional */ true, \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n                             {RPCResult::Type::BOOL, \"spendable\", \"Whether we have the private keys to spend this output\"},\n                             {RPCResult::Type::BOOL, \"solvable\", \"Whether we know how to spend this output, ignoring the lack of keys\"},\n-                            {RPCResult::Type::BOOL, \"reused\", \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n-                            {RPCResult::Type::STR, \"desc\", \"(only when solvable) A descriptor for spending this output\"},\n+                            {RPCResult::Type::BOOL, \"reused\", /* optional */ true, \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n+                            {RPCResult::Type::STR, \"desc\", /* optional */ true, \"(only when solvable) A descriptor for spending this output\"},\n                             {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n                                                             \"from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n                                                             \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n@@ -3442,6 +3445,10 @@ RPCHelpMan signrawtransactionwithwallet()\n                             {\n                                 {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::ARR, \"witness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"witness\", \"\"},\n+                                }},\n                                 {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n                                 {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n                                 {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n@@ -4188,9 +4195,9 @@ static RPCHelpMan send()\n             RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n-                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n-                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n-                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                    {RPCResult::Type::STR_HEX, \"txid\", /* optional */ true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /* optional */ true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n                 }\n         },\n         RPCExamples{\"\""
      }
    ]
  }
]