laanwj,2020-09-10 12:26:12,"Very nice and straightforward solution.\nACK e3318f4b06a5dfc3bf5a2a1592ac16ff7b306560",https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-690246393,690246393,
practicalswift,2020-09-10 14:28:17,@sipa I'm afraid the fix is incorrect: to get rid of the signed integer overflow you'll have to change also the local variable `c` in `CSipHasher::Write` to `uint8_t` :),https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-690326709,690326709,
elichai,2020-09-10 19:16:31,"FWIW this is also fixed in https://github.com/bitcoin/bitcoin/pull/18014\nbut I like the decrese in the size of CSipHasher :)\nutACK 812037cb80f72096738cf2b0c15b39536c6c1e24",https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-690651087,690651087,
sipa,2020-09-10 21:23:15,@practicalswift Fixed.,https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-690739590,690739590,
sipa,2020-09-10 21:23:55,"@elichai It's not actually a decrease in size, as its alignment is 8 bytes (at least on 64 bit platforms), so the size is 24 bytes before and after.",https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-690739895,690739895,
practicalswift,2020-09-11 06:04:03,"Thanks for the swift (and practical!) fix! :)\n\nACK 812037cb80f72096738cf2b0c15b39536c6c1e24",https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-690895220,690895220,
laanwj,2020-09-11 14:13:39,"> @elichai It's not actually a decrease in size, as its alignment is 8 bytes (at least on 64 bit platforms), so the size is 24 bytes before and after.\n\nIt's not like we store millions of SipHashers for this to matter anyway. ~~Nor does it matter for performance on any supported architecture~~ :smile:  (oh, crap, it might even be slower because the `&0xff` sometimes needs to be done explicitly)",https://github.com/bitcoin/bitcoin/pull/19931#issuecomment-691119583,691119583,
