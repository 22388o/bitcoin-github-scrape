[
  {
    "sha": "6c914ac176624468c66febdb1ad0e24ff2118a5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzkxNGFjMTc2NjI0NDY4YzY2ZmViZGIxYWQwZTI0ZmYyMTE4YTVm",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-03-23T21:07:51Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-05-03T18:35:51Z"
      },
      "message": "[wallet] Securely erase potentially sensitive keys/values",
      "tree": {
        "sha": "546c1239d37a4ab6fec953d1660ae4829310a97e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/546c1239d37a4ab6fec953d1660ae4829310a97e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c914ac176624468c66febdb1ad0e24ff2118a5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c914ac176624468c66febdb1ad0e24ff2118a5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c914ac176624468c66febdb1ad0e24ff2118a5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c914ac176624468c66febdb1ad0e24ff2118a5f/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2b99b13131b5d0fd6fae6d55892c2ebb327d438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b99b13131b5d0fd6fae6d55892c2ebb327d438",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b99b13131b5d0fd6fae6d55892c2ebb327d438"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 23,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f020216c7300a6a7894da8157cc2ffe87b3f62a3",
        "filename": "src/support/cleanse.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c914ac176624468c66febdb1ad0e24ff2118a5f/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c914ac176624468c66febdb1ad0e24ff2118a5f/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=6c914ac176624468c66febdb1ad0e24ff2118a5f",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <stdlib.h>\n \n+// Attempt to overwrite data in the specified memory span.\n void memory_cleanse(void *ptr, size_t len);\n \n #endif // BITCOIN_SUPPORT_CLEANSE_H"
      },
      {
        "sha": "3c6870d169d6d3016e3083344053094b840e900c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c914ac176624468c66febdb1ad0e24ff2118a5f/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c914ac176624468c66febdb1ad0e24ff2118a5f/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=6c914ac176624468c66febdb1ad0e24ff2118a5f",
        "patch": "@@ -180,22 +180,23 @@ class CDB\n         Dbt datValue;\n         datValue.set_flags(DB_DBT_MALLOC);\n         int ret = pdb->get(activeTxn, &datKey, &datValue, 0);\n-        memset(datKey.get_data(), 0, datKey.get_size());\n-        if (datValue.get_data() == NULL)\n-            return false;\n-\n-        // Unserialize value\n-        try {\n-            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n-            ssValue >> value;\n-        } catch (const std::exception&) {\n-            return false;\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        bool success = false;\n+        if (datValue.get_data() != NULL) {\n+            // Unserialize value\n+            try {\n+                CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n+                ssValue >> value;\n+                success = true;\n+            } catch (const std::exception&) {\n+                // In this case success remains 'false'\n+            }\n+\n+            // Clear and free memory\n+            memory_cleanse(datValue.get_data(), datValue.get_size());\n+            free(datValue.get_data());\n         }\n-\n-        // Clear and free memory\n-        memset(datValue.get_data(), 0, datValue.get_size());\n-        free(datValue.get_data());\n-        return (ret == 0);\n+        return ret == 0 && success;\n     }\n \n     template <typename K, typename T>\n@@ -222,8 +223,8 @@ class CDB\n         int ret = pdb->put(activeTxn, &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\n \n         // Clear memory in case it was a private key\n-        memset(datKey.get_data(), 0, datKey.get_size());\n-        memset(datValue.get_data(), 0, datValue.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        memory_cleanse(datValue.get_data(), datValue.get_size());\n         return (ret == 0);\n     }\n \n@@ -245,7 +246,7 @@ class CDB\n         int ret = pdb->del(activeTxn, &datKey, 0);\n \n         // Clear memory\n-        memset(datKey.get_data(), 0, datKey.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n         return (ret == 0 || ret == DB_NOTFOUND);\n     }\n \n@@ -265,7 +266,7 @@ class CDB\n         int ret = pdb->exists(activeTxn, &datKey, 0);\n \n         // Clear memory\n-        memset(datKey.get_data(), 0, datKey.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n         return (ret == 0);\n     }\n \n@@ -308,8 +309,8 @@ class CDB\n         ssValue.write((char*)datValue.get_data(), datValue.get_size());\n \n         // Clear and free memory\n-        memset(datKey.get_data(), 0, datKey.get_size());\n-        memset(datValue.get_data(), 0, datValue.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        memory_cleanse(datValue.get_data(), datValue.get_size());\n         free(datKey.get_data());\n         free(datValue.get_data());\n         return 0;"
      }
    ]
  }
]