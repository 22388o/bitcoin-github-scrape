laanwj,2017-05-02T13:07:12Z,"LGTM, utACK, as we have the `memory_cleanse` function anyway let's use it where it makes sense.",https://github.com/bitcoin/bitcoin/pull/10308#issuecomment-298630019,298630019,
jonasschnelli,2017-05-02T13:11:28Z,utACK 2ac544531d8fd50807f9a8d98b576e3a49a6402c,https://github.com/bitcoin/bitcoin/pull/10308#issuecomment-298631101,298631101,
sipa,2017-05-01T19:43:52Z,I don't believe anything in C++ can actually guarantee this.,https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114186169,114186169,src/support/cleanse.h
sipa,2017-05-01T22:08:47Z,Style nit: brace on the same line as the if.,https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114212690,114212690,src/wallet/db.h
laanwj,2017-05-02T13:03:08Z,Silently ignored exceptions are one of the larger frustrations when troubleshooting C++ code. Checking more closely it seems this is ok: please add a comment e.g. `/* success = false */` here to show what is happening.,https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114312369,114312369,src/wallet/db.h
tjps,2017-05-02T17:29:57Z,"While it's true that there is nothing in the standard that guarantees this, there are numerous compiler-specific attributes for this, as well as libraries that guarantee this (like right now, memory_cleanse is just a wrapper around OPENSSL_cleanse)\n\nMy goal with adding the comment is to explain its purpose to other maintainers of the codebase, as it hopefully sees more use.",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114376472,114376472,src/support/cleanse.h
tjps,2017-05-02T17:32:05Z,"That's actually my preference as well, but I thought that was against the style guide for this repo.  Can I assume brace on same line for code going forward?",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114376973,114376973,src/wallet/db.h
tjps,2017-05-02T17:33:11Z,"Good idea, added.",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114377242,114377242,src/wallet/db.h
tjps,2017-05-02T17:36:57Z,"On further research, I'm not sure OPENSSL_cleanse actually guarantees anything at all.  ",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114378126,114378126,src/support/cleanse.h
gmaxwell,2017-05-03T01:21:01Z,"> On further research, I'm not sure OPENSSL_cleanse actually guarantees anything at all.\n\nYep.",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114459940,114459940,src/support/cleanse.h
tjps,2017-05-03T01:24:52Z,"To be fair in this case since OPENSSL_cleanse() exists in an external shared object, we know it won't be optimized out.   Should I back out this comment though?",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114460199,114460199,src/support/cleanse.h
sipa,2017-05-03T01:38:04Z,"@tjps Nothing in C++ can guarantee that memory will be overwritten. The `memset_s` function from the C11 standard does require a guarantee, but gcc/g++ don't implement it I believe. So, writing in the source code that something has a guarantee may be misleading. Furthermore, the memory being overwritten is not the only thing we're after. The compiler is free to for example copy some of the memory ",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114461121,114461121,src/support/cleanse.h
tjps,2017-05-03T18:33:47Z,"Agreed, I reduced the verbiage to make it clear that it is a best-effort attempt.  \n\nAlso, it is my understanding that LTO only affects the object files you are linking, so dynamically loaded .so's are still safe from compiler analysis.  But I could be wrong, I've never actually come across a project of any significant size using LTO.\n\nComment updated.",https://github.com/bitcoin/bitcoin/pull/10308#discussion_r114620400,114620400,src/support/cleanse.h
