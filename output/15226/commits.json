[
  {
    "sha": "7687f7873b75c3cbdfa15ab570211dc39d24ab80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Njg3Zjc4NzNiNzVjM2NiZGZhMTVhYjU3MDIxMWRjMzlkMjRhYjgw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-07T02:26:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-10T17:24:53Z"
      },
      "message": "[wallet] Support creating a blank wallet\n\nA blank wallet is a wallet that has no keys, script or watch only things.\nA new wallet flag indicating that it is blank will be set when the wallet\nis blank. Once it is no longer blank (a seed has been generated, keys or\nscripts imported, etc), the flag will be unset.",
      "tree": {
        "sha": "2bbbc90f6c961ae1e6005be6584c63d94d721653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bbbc90f6c961ae1e6005be6584c63d94d721653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c99bb00470057f573f1d76b76e744a6ccd65b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c99bb00470057f573f1d76b76e744a6ccd65b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c99bb00470057f573f1d76b76e744a6ccd65b08"
      }
    ],
    "stats": {
      "total": 292,
      "additions": 221,
      "deletions": 71
    },
    "files": [
      {
        "sha": "3be84db3e9b88cf82ab9c30805d0c1a4b2c8ffd6",
        "filename": "doc/release-notes-15226.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/doc/release-notes-15226.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/doc/release-notes-15226.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15226.md?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -0,0 +1,8 @@\n+Miscellaneous RPC changes\n+------------\n+\n+- The RPC `createwallet` now has an optional `blank` argument that can be used to create a blank wallet.\n+Blank wallets do not have any keys or HD seed.\n+They cannot be opened in software older than 0.18.\n+Once a blank wallet has a HD seed set (by using `sethdseed`) or private keys, scripts, addresses, and other watch only things have been imported, the wallet is no longer blank and can be opened in 0.17.x.\n+Encrypting a blank wallet will also set a HD seed for it."
      },
      {
        "sha": "339c5f248723204aa8bdd4e2542c3b8c168b1f96",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -463,6 +463,7 @@ class WalletImpl : public Wallet\n     }\n     unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    bool canGetAddresses() override { return m_wallet.CanGetAddresses(); }\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }"
      },
      {
        "sha": "a86212356cbbf81574aabfe10a617633a24dec6e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -235,6 +235,9 @@ class Wallet\n     // Return whether HD enabled.\n     virtual bool hdEnabled() = 0;\n \n+    // Return whether the wallet is blank.\n+    virtual bool canGetAddresses() = 0;\n+\n     // check if a certain wallet flag is set.\n     virtual bool IsWalletFlagSet(uint64_t flag) = 0;\n "
      },
      {
        "sha": "f4f3be8f435c5222ddbcc5c17e4b9b5b93b4f7cb",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -580,12 +580,7 @@ bool WalletModel::privateKeysDisabled() const\n \n bool WalletModel::canGetAddresses() const\n {\n-    // The wallet can provide a fresh address if:\n-    // * hdEnabled(): an HD seed is present; or\n-    // * it is a legacy wallet, because:\n-    //     * !hdEnabled(): an HD seed is not present; and\n-    //     * !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS): private keys have not been disabled (which results in hdEnabled() == true)\n-    return m_wallet->hdEnabled() || (!m_wallet->hdEnabled() && !m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    return m_wallet->canGetAddresses();\n }\n \n QString WalletModel::getWalletName() const"
      },
      {
        "sha": "7115ce70d1967f3511256c7d15a8df4a7c1cebb3",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -161,6 +161,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"rescanblockchain\", 0, \"start_height\"},\n     { \"rescanblockchain\", 1, \"stop_height\"},\n     { \"createwallet\", 1, \"disable_private_keys\"},\n+    { \"createwallet\", 2, \"blank\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "a255177e360f45b3cb858c0ca0436fc62909e85b",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -182,7 +182,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no\n         if (!SetCrypted())\n             return false;\n \n-        bool keyPass = false;\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n         bool keyFail = false;\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)"
      },
      {
        "sha": "674c10879f5fe3c988ac5bb62db5578adb00124a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -170,12 +170,18 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    // Belt and suspenders check for disabled private keys\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n     LOCK(pwallet->cs_wallet);\n \n+    if (!pwallet->CanGetAddresses()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n+\n     // Parse the label first so we don't generate a key if there's an error\n     std::string label;\n     if (!request.params[0].isNull())\n@@ -231,12 +237,17 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    // Belt and suspenders check for disabled private keys\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n     LOCK(pwallet->cs_wallet);\n \n+    if (!pwallet->CanGetAddresses(true)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n     if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n     }\n@@ -2578,13 +2589,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n                     {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"blank\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2601,9 +2613,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     std::string error;\n     std::string warning;\n \n-    bool disable_privatekeys = false;\n-    if (!request.params[1].isNull()) {\n-        disable_privatekeys = request.params[1].get_bool();\n+    uint64_t flags = 0;\n+    if (!request.params[1].isNull() && request.params[1].get_bool()) {\n+        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+    }\n+\n+    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n     WalletLocation location(request.params[0].get_str());\n@@ -2616,7 +2632,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, flags);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n@@ -3880,7 +3896,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     // Do not do anything to non-HD wallets\n-    if (!pwallet->IsHDEnabled()) {\n+    if (!pwallet->CanSupportFeature(FEATURE_HD)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Start with -upgradewallet in order to upgrade a non-HD wallet to HD\");\n     }\n \n@@ -4184,7 +4200,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "1d4eae73a45b5d79eb7e943a4fd369fe9349182a",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -449,6 +449,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CPubKey pubkey;"
      },
      {
        "sha": "8201b58e0edaef2f456e11db861ae885884e4304",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 8,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -168,6 +168,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n@@ -177,7 +178,7 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n-    // use HD key derivation if HD was enabled during wallet creation\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n     if (IsHDEnabled()) {\n         DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n@@ -283,6 +284,7 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch &batch, const CKey& secret, const C\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n+    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n     return true;\n }\n \n@@ -349,7 +351,11 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n         return false;\n-    return WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript);\n+    if (WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n }\n \n bool CWallet::LoadCScript(const CScript& redeemScript)\n@@ -374,7 +380,11 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n     const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n-    return WalletBatch(*database).WriteWatchOnly(dest, meta);\n+    if (WalletBatch(*database).WriteWatchOnly(dest, meta)) {\n+        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n@@ -1402,6 +1412,7 @@ void CWallet::SetHDSeed(const CPubKey& seed)\n     newHdChain.seed_id = seed.GetID();\n     SetHDChain(newHdChain, false);\n     NotifyCanGetAddressesChanged();\n+    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n }\n \n void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n@@ -1418,6 +1429,30 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.seed_id.IsNull();\n }\n \n+bool CWallet::CanGenerateKeys()\n+{\n+    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n+    LOCK(cs_wallet);\n+    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n+}\n+\n+bool CWallet::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_wallet);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n void CWallet::SetWalletFlag(uint64_t flags)\n {\n     LOCK(cs_wallet);\n@@ -1426,6 +1461,14 @@ void CWallet::SetWalletFlag(uint64_t flags)\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n+void CWallet::UnsetWalletFlag(uint64_t flag)\n+{\n+    LOCK(cs_wallet);\n+    m_wallet_flags &= ~flag;\n+    if (!WalletBatch(*database).WriteWalletFlags(m_wallet_flags))\n+        throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n+}\n+\n bool CWallet::IsWalletFlagSet(uint64_t flag)\n {\n     return (m_wallet_flags & flag);\n@@ -3101,7 +3144,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         LOCK(cs_KeyStore);\n         // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n+            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n     }\n \n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n@@ -3286,7 +3330,7 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!CanGenerateKeys()) {\n         return false;\n     }\n     {\n@@ -3416,7 +3460,7 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n {\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!CanGetAddresses(internal)) {\n         return false;\n     }\n \n@@ -3617,6 +3661,10 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n {\n+    if (!pwallet->CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n@@ -4071,14 +4119,16 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         if ((wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             //selective allow to set flags\n             walletInstance->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        } else if (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET) {\n+            walletInstance->SetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n         } else {\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n             walletInstance->SetHDSeed(seed);\n-        }\n+        } // Otherwise, do not generate a new seed\n \n         // Top up the keypool\n-        if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n+        if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }"
      },
      {
        "sha": "0f7f3bab1850816f9cd469a253397a542a4128ae",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -136,9 +136,21 @@ enum WalletFlags : uint64_t {\n \n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n+\n+    //! Flag set when a wallet contains no HD seed and no private keys, scripts,\n+    //! addresses, and other watch only things, and is therefore \"blank.\"\n+    //!\n+    //! The only function this flag serves is to distinguish a blank wallet from\n+    //! a newly created wallet when the wallet database is loaded, to avoid\n+    //! initialization that should only happen on first run.\n+    //!\n+    //! This flag is also a mandatory flag to prevent previous versions of\n+    //! bitcoin from opening the wallet, thinking it was newly created, and\n+    //! then improperly reinitializing it.\n+    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET;\n \n /** A key pool entry */\n class CKeyPool\n@@ -1132,6 +1144,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n \n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    bool CanGetAddresses(bool internal = false);\n+\n     /* Generates a new HD seed (will not be activated) */\n     CPubKey GenerateNewSeed();\n \n@@ -1169,6 +1187,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** set a single wallet flag */\n     void SetWalletFlag(uint64_t flags);\n \n+    /** Unsets a single wallet flag */\n+    void UnsetWalletFlag(uint64_t flag);\n+\n     /** check if a certain wallet flag is set */\n     bool IsWalletFlagSet(uint64_t flag);\n "
      },
      {
        "sha": "b380a98d06cc34eee68574f2a2691632d60f382b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -118,8 +118,8 @@\n     'mempool_persist.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n-    'wallet_disableprivatekeys.py',\n-    'wallet_disableprivatekeys.py --usecli',\n+    'wallet_createwallet.py',\n+    'wallet_createwallet.py --usecli',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',"
      },
      {
        "sha": "9fd2650d788b5617cce403474600a52972897451",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test createwallet arguments.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class CreateWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(1) # Leave IBD for sethdseed\n+\n+        self.nodes[0].createwallet(wallet_name='w0')\n+        w0 = node.get_wallet_rpc('w0')\n+        address1 = w0.getnewaddress()\n+\n+        self.log.info(\"Test disableprivatekeys creation.\")\n+        self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n+        w1 = node.get_wallet_rpc('w1')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info('Test that private keys cannot be imported')\n+        addr = w0.getnewaddress('', 'legacy')\n+        privkey = w0.dumpprivkey(addr)\n+        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n+        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n+        assert(not result[0]['success'])\n+        assert('warning' not in result[0])\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n+\n+        self.log.info(\"Test blank creation with private keys disabled.\")\n+        self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, blank=True)\n+        w2 = node.get_wallet_rpc('w2')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info(\"Test blank creation with private keys enabled.\")\n+        self.nodes[0].createwallet(wallet_name='w3', disable_private_keys=False, blank=True)\n+        w3 = node.get_wallet_rpc('w3')\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getrawchangeaddress)\n+        # Import private key\n+        w3.importprivkey(w0.dumpprivkey(address1))\n+        # Imported private keys are currently ignored by the keypool\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n+        # Set the seed\n+        w3.sethdseed()\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 1)\n+        w3.getnewaddress()\n+        w3.getrawchangeaddress()\n+\n+        self.log.info(\"Test blank creation with privkeys enabled and then encryption\")\n+        self.nodes[0].createwallet(wallet_name='w4', disable_private_keys=False, blank=True)\n+        w4 = node.get_wallet_rpc('w4')\n+        assert_equal(w4.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n+        # Encrypt the wallet. Nothing should change about the keypool\n+        w4.encryptwallet('pass')\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n+        # Now set a seed and it should work. Wallet should also be encrypted\n+        w4.walletpassphrase('pass', 2)\n+        w4.sethdseed()\n+        w4.getnewaddress()\n+        w4.getrawchangeaddress()\n+\n+        self.log.info(\"Test blank creation with privkeys disabled and then encryption\")\n+        self.nodes[0].createwallet(wallet_name='w5', disable_private_keys=True, blank=True)\n+        w5 = node.get_wallet_rpc('w5')\n+        assert_equal(w5.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        # Encrypt the wallet\n+        w5.encryptwallet('pass')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+\n+if __name__ == '__main__':\n+    CreateWalletTest().main()"
      },
      {
        "sha": "e55bb82e76d6084b0b5bd11f9dc16f45954f98de",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "removed",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c99bb00470057f573f1d76b76e744a6ccd65b08/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c99bb00470057f573f1d76b76e744a6ccd65b08/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=5c99bb00470057f573f1d76b76e744a6ccd65b08",
        "patch": "@@ -1,46 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test disable-privatekeys mode.\n-\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_raises_rpc_error,\n-)\n-\n-\n-class DisablePrivateKeysTest(BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-        self.supports_cli = True\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def run_test(self):\n-        node = self.nodes[0]\n-        self.log.info(\"Test disableprivatekeys creation.\")\n-        self.nodes[0].createwallet('w1', True)\n-        self.nodes[0].createwallet('w2')\n-        w1 = node.get_wallet_rpc('w1')\n-        w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n-        w1.importpubkey(w2.getaddressinfo(w2.getnewaddress())['pubkey'])\n-\n-        self.log.info('Test that private keys cannot be imported')\n-        addr = w2.getnewaddress('', 'legacy')\n-        privkey = w2.dumpprivkey(addr)\n-        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n-        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n-        assert(not result[0]['success'])\n-        assert('warning' not in result[0])\n-        assert_equal(result[0]['error']['code'], -4)\n-        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n-\n-if __name__ == '__main__':\n-    DisablePrivateKeysTest().main()"
      }
    ]
  }
]