[
  {
    "sha": "c2dfbb4a97513557fe923b7810ea8639c320fefd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmRmYmI0YTk3NTEzNTU3ZmU5MjNiNzgxMGVhODYzOWMzMjBmZWZk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-06-11T21:23:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-06-12T21:33:35Z"
      },
      "message": "Add unavailable options to hidden options category\n\nOptions that are not available (but known in the source code) will\ncause an error if they are specified.\nMake these options \"available\" by adding them to the hidden options\ncategory to prevent conf files from failing when shared between binaries\nthat have different options available.",
      "tree": {
        "sha": "d8cb0e73ee160938f7d5cead7b86ee25753a27b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8cb0e73ee160938f7d5cead7b86ee25753a27b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2dfbb4a97513557fe923b7810ea8639c320fefd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2dfbb4a97513557fe923b7810ea8639c320fefd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2dfbb4a97513557fe923b7810ea8639c320fefd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2dfbb4a97513557fe923b7810ea8639c320fefd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c32b414b6325743c99fed1208bc53ab0fa1996f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c32b414b6325743c99fed1208bc53ab0fa1996f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c32b414b6325743c99fed1208bc53ab0fa1996f"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 47,
      "deletions": 20
    },
    "files": [
      {
        "sha": "4b9abb2a1ba88826dede21cffd2a9d902c91b641",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c2dfbb4a97513557fe923b7810ea8639c320fefd",
        "patch": "@@ -62,9 +62,6 @@ static bool AppInit(int argc, char* argv[])\n     //\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     SetupServerArgs();\n-#if HAVE_DECL_DAEMON\n-    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", false, OptionsCategory::OPTIONS);\n-#endif\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n         fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());"
      },
      {
        "sha": "67b3370e63d238f0dafdf00341839c3612702370",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 17,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c2dfbb4a97513557fe923b7810ea8639c320fefd",
        "patch": "@@ -76,7 +76,7 @@ std::unique_ptr<PeerLogicValidation> peerLogic;\n class DummyWalletInit : public WalletInitInterface {\n public:\n \n-    void AddWalletOptions() const override {}\n+    void AddWalletOptions() const override;\n     bool ParameterInteraction() const override {return true;}\n     void RegisterRPC(CRPCTable &) const override {}\n     bool Verify() const override {return true;}\n@@ -87,6 +87,15 @@ class DummyWalletInit : public WalletInitInterface {\n     void Close() const override {}\n };\n \n+void DummyWalletInit::AddWalletOptions() const\n+{\n+    std::vector<std::string> opts = {\"-addresstype\", \"-changetype\", \"-disablewallet\", \"-discardfee=<amt>\", \"-fallbackfee=<amt>\",\n+        \"-keypool=<n>\", \"-mintxfee=<amt>\", \"-paytxfee=<amt>\", \"-rescan\", \"-salvagewallet\", \"-spendzeroconfchange\",  \"-txconfirmtarget=<n>\",\n+        \"-upgradewallet\", \"-wallet=<path>\", \"-walletbroadcast\", \"-walletdir=<dir>\", \"-walletnotify=<cmd>\", \"-walletrbf\", \"-zapwallettxes=<mode>\",\n+        \"-dblogsize=<n>\", \"-flushwallet\", \"-privdb\", \"-walletrejectlongchains\"};\n+    gArgs.AddHiddenArgs(opts);\n+}\n+\n const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n #endif\n \n@@ -348,6 +357,12 @@ void SetupServerArgs()\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n \n+    // Hidden Options\n+    std::vector<std::string> hidden_args = {\"-rpcssl\", \"-benchmark\", \"-h\", \"-help\", \"-socks\", \"-tor\", \"-debugnet\", \"-whitelistalwaysrelay\",\n+        \"-prematurewitness\", \"-walletprematurewitness\", \"-promiscuousmempoolflags\", \"-blockminsize\", \"-dbcrashratio\", \"-forcecompactdb\", \"-usehd\",\n+        // GUI args. These will be overwritten by SetupUIArgs for the GUI\n+        \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n+\n     // Set all of the args and their help\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n@@ -375,6 +390,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n     gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n+#else\n+    hidden_args.emplace_back(\"-pid\");\n #endif\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -383,6 +400,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks\", false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n     gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", false, OptionsCategory::OPTIONS);\n+#else\n+    hidden_args.emplace_back(\"-sysperms\");\n #endif\n     gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n \n@@ -421,6 +440,8 @@ void SetupServerArgs()\n #else\n     gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), false, OptionsCategory::CONNECTION);\n #endif\n+#else\n+    hidden_args.emplace_back(\"-upnp\");\n #endif\n     gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n@@ -433,6 +454,11 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", false, OptionsCategory::ZMQ);\n     gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", false, OptionsCategory::ZMQ);\n     gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", false, OptionsCategory::ZMQ);\n+#else\n+    hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n+    hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n+    hidden_args.emplace_back(\"-zmqpubrawblock=<address>\");\n+    hidden_args.emplace_back(\"-zmqpubrawtx=<address>\");\n #endif\n \n     gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n@@ -500,22 +526,14 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n \n-    // Hidden options\n-    gArgs.AddArg(\"-rpcssl\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-benchmark\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-socks\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-tor\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-debugnet\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-whitelistalwaysrelay\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-prematurewitness\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-walletprematurewitness\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-promiscuousmempoolflags\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-blockminsize\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-dbcrashratio\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-forcecompactdb\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-usehd\", \"\", false, OptionsCategory::HIDDEN);\n+#if HAVE_DECL_DAEMON\n+    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", false, OptionsCategory::OPTIONS);\n+#else\n+    hidden_args.emplace_back(\"-daemon\");\n+#endif\n+\n+    // Add the hidden options\n+    gArgs.AddHiddenArgs(hidden_args);\n }\n \n std::string LicenseInfo()"
      },
      {
        "sha": "ab262b40632c27997e63f87b86527dc077944c13",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c2dfbb4a97513557fe923b7810ea8639c320fefd",
        "patch": "@@ -585,6 +585,13 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, const\n     assert(ret.second); // Make sure an insertion actually happened\n }\n \n+void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n+{\n+    for (const std::string& name : names) {\n+        AddArg(name, \"\", false, OptionsCategory::HIDDEN);\n+    }\n+}\n+\n std::string ArgsManager::GetHelpMessage()\n {\n     const bool show_debug = gArgs.GetBoolArg(\"-help-debug\", false);"
      },
      {
        "sha": "8094d72d6b92b73dab7e57c7353e21264ab9d203",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2dfbb4a97513557fe923b7810ea8639c320fefd/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c2dfbb4a97513557fe923b7810ea8639c320fefd",
        "patch": "@@ -263,6 +263,11 @@ class ArgsManager\n      */\n     void AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat);\n \n+    /**\n+     * Add many hidden arguments\n+     */\n+    void AddHiddenArgs(const std::vector<std::string>& args);\n+\n     /**\n      * Clear available arguments\n      */"
      }
    ]
  }
]