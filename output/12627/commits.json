[
  {
    "sha": "fa3528a85b05ea9507077f3eb340c9fb189251a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM1MjhhODViMDVlYTk1MDcwNzdmM2ViMzQwYzlmYjE4OTI1MWE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-06T23:43:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-06T23:42:19Z"
      },
      "message": "qa: Fix some tests to work on native windows",
      "tree": {
        "sha": "93eec5fb44970f4778a5feb270f4b9ae901a2841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93eec5fb44970f4778a5feb270f4b9ae901a2841"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJanydbAAoJEM4rdWl+aaVIGIsL/jYPh+p2I4p0nL8Gi9JrqX5W\n+64aHev2sHSo7ymW2Q4pL3qVtDRNwvcvFl5yAvbI59jhUzTY0WTx/89MNrqJ0ro9\nj0+suQVkzN64XZKUMYzdAVIhK5qohNP0O8C3YkR5XoQfkbPRHpmQZ8nCdLWtsStu\nWGgZZoQg52uNe3XRJ14+wDyVk5LmKx5MkF1YA/Outkdn2zlE/6TleSl6eXK9Rw0z\nukPpNWyomi8D8v9A33vsLbt4t2HNzWdhP9TqMzDCfloReWs2tEJJuOvG4TTDOQ5I\n/SSPFTmSz1n1GVAIiqTmduvb9mK0jLn1Basl1Za1XV/fY0RQGCK2c6Kq+LVDTmGN\nc1leYqv0z5FfLsT45XzO85LfY0R/gRD7RP1FKHMSYgnJBVJ9lEYMwxXlyBp5vOL7\n/yn3EzMDEMCWqfsldZp8NBErFkLNS+3nlphRhfJhA6Sc1QSpjc218xji5Z/kZOc8\njjmEKBFhlwtcytBdDCvo10AyArhc4vniLeWZ+A5qbg==\n=ibUW\n-----END PGP SIGNATURE-----",
        "payload": "tree 93eec5fb44970f4778a5feb270f4b9ae901a2841\nparent 8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800\nauthor MarcoFalke <falke.marco@gmail.com> 1520379830 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520379739 -0500\n\nqa: Fix some tests to work on native windows\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3528a85b05ea9507077f3eb340c9fb189251a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "53748df915ceadb0015db086105ef59a7215a0b1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "patch": "@@ -66,7 +66,9 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n-        self.start_node(1)  # Give this one a head-start, so we can be \"extra-sure\" that it didn't load anything later\n+        # Give this node a head-start, so we can be \"extra-sure\" that it didn't load anything later\n+        # Also don't store the mempool, to keep the datadir clean\n+        self.start_node(1, extra_args=[\"-persistmempool=0\"])\n         self.start_node(0)\n         self.start_node(2)\n         # Give bitcoind a second to reload the mempool"
      },
      {
        "sha": "36d1a2f856133b22ab5233ad09f6deb7f8168de2",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "patch": "@@ -9,7 +9,6 @@\n \n import sys\n import socket\n-import fcntl\n import struct\n import array\n import os\n@@ -90,6 +89,8 @@ def all_interfaces():\n     '''\n     Return all interfaces that are up\n     '''\n+    import fcntl  # Linux only, so only import when required\n+\n     is_64bits = sys.maxsize > 2**32\n     struct_size = 40 if is_64bits else 32\n     s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)"
      },
      {
        "sha": "94fd6baf046f226e3d918c223e0b26e588f84f76",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "patch": "@@ -7,7 +7,10 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_rpc_error)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n \n \n def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n@@ -88,7 +91,8 @@ def setup_network(self, split=False):\n         self.start_nodes()\n \n     def run_test (self):\n-        tmpdir = self.options.tmpdir\n+        wallet_unenc_dump = os.path.join(self.nodes[0].datadir, \"wallet.unencrypted.dump\")\n+        wallet_enc_dump = os.path.join(self.nodes[0].datadir, \"wallet.encrypted.dump\")\n \n         # generate 20 addresses to compare against the dump\n         # but since we add a p2sh-p2wpkh address for the first pubkey in the\n@@ -108,11 +112,11 @@ def run_test (self):\n         script_addrs = [witness_addr, multisig_addr]\n \n         # dump unencrypted wallet\n-        result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n-        assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+        result = self.nodes[0].dumpwallet(wallet_unenc_dump)\n+        assert_equal(result['filename'], wallet_unenc_dump)\n \n         found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, witness_addr_ret = \\\n-            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n+            read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n@@ -125,18 +129,18 @@ def run_test (self):\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n-        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n+        self.nodes[0].dumpwallet(wallet_enc_dump)\n \n         found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, witness_addr_ret = \\\n-            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n+            read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail\n-        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", lambda: self.nodes[0].dumpwallet(wallet_enc_dump))\n \n         # Restart node with new wallet, and test importwallet\n         self.stop_node(0)\n@@ -146,11 +150,11 @@ def run_test (self):\n         result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n-        self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+        self.nodes[0].importwallet(wallet_unenc_dump)\n \n         # Now check IsMine is true\n         result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':\n-    WalletDumpTest().main ()\n+    WalletDumpTest().main()"
      }
    ]
  }
]