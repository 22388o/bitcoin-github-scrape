[
  {
    "sha": "ab31b9d6fe7b39713682e3f52d11238dbe042c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjMxYjlkNmZlN2IzOTcxMzY4MmUzZjUyZDExMjM4ZGJlMDQyYzE2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-10T19:46:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-03-27T15:17:35Z"
      },
      "message": "Fix wallet unload race condition\n\nCurrently it's possible for ReleaseWallet to delete the CWallet pointer while\nit is processing BlockConnected, etc chain notifications.\n\nTo fix this, unregister from notifications earlier in UnloadWallet instead of\nReleaseWallet, and use a new RegisterSharedValidationInterface function to\nprevent the CValidationInterface shared_ptr from being deleted until the last\nnotification is actually finished.",
      "tree": {
        "sha": "f719291130d3322eaac867b793309f476d8872c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f719291130d3322eaac867b793309f476d8872c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab31b9d6fe7b39713682e3f52d11238dbe042c16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab31b9d6fe7b39713682e3f52d11238dbe042c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab31b9d6fe7b39713682e3f52d11238dbe042c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab31b9d6fe7b39713682e3f52d11238dbe042c16/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e50fdbe4e5bb98194e88023468bd77dee78b26e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e50fdbe4e5bb98194e88023468bd77dee78b26e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e50fdbe4e5bb98194e88023468bd77dee78b26e"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 62,
      "deletions": 42
    },
    "files": [
      {
        "sha": "0381369218b610fe4c7d3e90bd30a71f3d07512d",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -23,9 +23,8 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n         wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;\n         if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n-        wallet.handleNotifications();\n     }\n-\n+    auto handler = chain->handleNotifications({ &wallet, [](CWallet*) {} });\n \n     const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);"
      },
      {
        "sha": "880edcf132d3e6e0d47595f0d8545b5737aa724e",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 18,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -148,22 +148,12 @@ class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n     using UniqueLock::UniqueLock;\n };\n \n-class NotificationsHandlerImpl : public Handler, CValidationInterface\n+class NotificationsProxy : public CValidationInterface\n {\n public:\n-    explicit NotificationsHandlerImpl(Chain& chain, Chain::Notifications& notifications)\n-        : m_chain(chain), m_notifications(&notifications)\n-    {\n-        RegisterValidationInterface(this);\n-    }\n-    ~NotificationsHandlerImpl() override { disconnect(); }\n-    void disconnect() override\n-    {\n-        if (m_notifications) {\n-            m_notifications = nullptr;\n-            UnregisterValidationInterface(this);\n-        }\n-    }\n+    explicit NotificationsProxy(std::shared_ptr<Chain::Notifications> notifications)\n+        : m_notifications(std::move(notifications)) {}\n+    virtual ~NotificationsProxy() = default;\n     void TransactionAddedToMempool(const CTransactionRef& tx) override\n     {\n         m_notifications->transactionAddedToMempool(tx);\n@@ -185,8 +175,26 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n         m_notifications->updatedBlockTip();\n     }\n     void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->chainStateFlushed(locator); }\n-    Chain& m_chain;\n-    Chain::Notifications* m_notifications;\n+    std::shared_ptr<Chain::Notifications> m_notifications;\n+};\n+\n+class NotificationsHandlerImpl : public Handler\n+{\n+public:\n+    explicit NotificationsHandlerImpl(std::shared_ptr<Chain::Notifications> notifications)\n+        : m_proxy(std::make_shared<NotificationsProxy>(std::move(notifications)))\n+    {\n+        RegisterSharedValidationInterface(m_proxy);\n+    }\n+    ~NotificationsHandlerImpl() override { disconnect(); }\n+    void disconnect() override\n+    {\n+        if (m_proxy) {\n+            UnregisterSharedValidationInterface(m_proxy);\n+            m_proxy.reset();\n+        }\n+    }\n+    std::shared_ptr<NotificationsProxy> m_proxy;\n };\n \n class RpcHandlerImpl : public Handler\n@@ -343,9 +351,9 @@ class ChainImpl : public Chain\n     {\n         ::uiInterface.ShowProgress(title, progress, resume_possible);\n     }\n-    std::unique_ptr<Handler> handleNotifications(Notifications& notifications) override\n+    std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) override\n     {\n-        return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n+        return MakeUnique<NotificationsHandlerImpl>(std::move(notifications));\n     }\n     void waitForNotificationsIfTipChanged(const uint256& old_tip) override\n     {"
      },
      {
        "sha": "e1bc9bbbf3a5996094637a9228bb221d3107f733",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -229,7 +229,7 @@ class Chain\n     };\n \n     //! Register handler for notifications.\n-    virtual std::unique_ptr<Handler> handleNotifications(Notifications& notifications) = 0;\n+    virtual std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) = 0;\n \n     //! Wait for pending notifications to be processed unless block hash points to the current\n     //! chain tip."
      },
      {
        "sha": "f9f61e8a092cd5b10eba4d3a867f03d1a7d5c319",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -75,8 +75,10 @@ CMainSignals& GetMainSignals()\n     return g_signals;\n }\n \n-void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n+void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> pwalletIn) {\n+    // Each connection captures pwalletIn to ensure that each callback is\n+    // executed before pwalletIn is destroyed. For more details see #18338.\n+    ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn.get()];\n     conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n     conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(std::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, std::placeholders::_1));\n     conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n@@ -87,6 +89,18 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n }\n \n+void RegisterValidationInterface(CValidationInterface* callbacks)\n+{\n+    // Create a shared_ptr with a no-op deleter - CValidationInterface lifecycle\n+    // is managed by the caller.\n+    RegisterSharedValidationInterface({callbacks, [](CValidationInterface*){}});\n+}\n+\n+void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n+{\n+    UnregisterValidationInterface(callbacks.get());\n+}\n+\n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     if (g_signals.m_internals) {\n         g_signals.m_internals->m_connMainSignals.erase(pwalletIn);"
      },
      {
        "sha": "f9a359b7ad864d034966b9cc2a3adc18da7a9932",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -30,6 +30,14 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn);\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n+\n+// Alternate registration functions that release a shared_ptr after the last\n+// notification is sent. These are useful for race-free cleanup, since\n+// unregistration is nonblocking and can return before the last notification is\n+// processed.\n+void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n+void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n+\n /**\n  * Pushes a function to callback onto the notification queue, guaranteeing any\n  * callbacks generated prior to now are finished when the function is called.\n@@ -163,7 +171,7 @@ class CValidationInterface {\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface>);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n };\n@@ -173,7 +181,7 @@ class CMainSignals {\n private:\n     std::unique_ptr<MainSignalsInstance> m_internals;\n \n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface>);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);"
      },
      {
        "sha": "b9e714946de69459d5449118991f5b996b9f9df9",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -10,7 +10,6 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);\n-    m_wallet.handleNotifications();\n-\n+    m_chain_notifications_handler = m_chain->handleNotifications({ &m_wallet, [](CWallet*) {} });\n     m_chain_client->registerRpcs();\n }"
      },
      {
        "sha": "81d8a60b8ae2fee75ba9295fac917c008c490e74",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -23,6 +23,7 @@ struct WalletTestingSetup: public TestingSetup {\n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<interfaces::ChainClient> m_chain_client = interfaces::MakeWalletClient(*m_chain, {});\n     CWallet m_wallet;\n+    std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n };\n \n #endif // BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H"
      },
      {
        "sha": "98f308f927f782079e3f096b69eae24ef79defc2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -62,8 +62,10 @@ bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n \n bool RemoveWallet(const std::shared_ptr<CWallet>& wallet)\n {\n-    LOCK(cs_wallets);\n     assert(wallet);\n+    // Unregister with the validation interface which also drops shared ponters.\n+    wallet->m_chain_notifications_handler.reset();\n+    LOCK(cs_wallets);\n     std::vector<std::shared_ptr<CWallet>>::iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n     if (i == vpwallets.end()) return false;\n     vpwallets.erase(i);\n@@ -105,13 +107,9 @@ static std::set<std::string> g_unloading_wallet_set;\n // Custom deleter for shared_ptr<CWallet>.\n static void ReleaseWallet(CWallet* wallet)\n {\n-    // Unregister and delete the wallet right after BlockUntilSyncedToCurrentChain\n-    // so that it's in sync with the current chainstate.\n     const std::string name = wallet->GetName();\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n-    wallet->BlockUntilSyncedToCurrentChain();\n     wallet->Flush();\n-    wallet->m_chain_notifications_handler.reset();\n     delete wallet;\n     // Wallet is now released, notify UnloadWallet, if any.\n     {\n@@ -137,6 +135,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     // Notify the unload intent so that all remaining shared pointers are\n     // released.\n     wallet->NotifyUnload();\n+\n     // Time to ditch our shared_ptr and wait for ReleaseWallet call.\n     wallet.reset();\n     {\n@@ -4092,7 +4091,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     }\n \n     // Register with the validation interface. It's ok to do this after rescan since we're still holding locked_chain.\n-    walletInstance->handleNotifications();\n+    walletInstance->m_chain_notifications_handler = walletInstance->chain().handleNotifications(walletInstance);\n \n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n@@ -4105,11 +4104,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     return walletInstance;\n }\n \n-void CWallet::handleNotifications()\n-{\n-    m_chain_notifications_handler = m_chain->handleNotifications(*this);\n-}\n-\n void CWallet::postInitProcess()\n {\n     auto locked_chain = chain().lock();"
      },
      {
        "sha": "e3903bfcf4fc0c6208a4944f0adf2b7bd026eca2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab31b9d6fe7b39713682e3f52d11238dbe042c16/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "patch": "@@ -605,7 +605,7 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n /**\n  * A CWallet maintains a set of transactions and balances, and provides the ability to create new transactions.\n  */\n-class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n+class CWallet final : public WalletStorage, public interfaces::Chain::Notifications\n {\n private:\n     CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n@@ -781,9 +781,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     /** Registered interfaces::Chain::Notifications handler. */\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n \n-    /** Register the wallet for chain notifications */\n-    void handleNotifications();\n-\n     /** Interface for accessing chain state. */\n     interfaces::Chain& chain() const { assert(m_chain); return *m_chain; }\n "
      }
    ]
  },
  {
    "sha": "41b0baf43c243b64b394e774e336475a489cca2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWIwYmFmNDNjMjQzYjY0YjM5NGU3NzRlMzM2NDc1YTQ4OWNjYTJi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-03-19T22:53:33Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-03-27T15:17:35Z"
      },
      "message": "gui: Handle WalletModel::unload asynchronous\n\nThis change prevents deleting a WalletModel instance while it's\nbeing used.",
      "tree": {
        "sha": "120cb0a5a8963ba5d73e3505dcc9180d5b1fea5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/120cb0a5a8963ba5d73e3505dcc9180d5b1fea5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41b0baf43c243b64b394e774e336475a489cca2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b0baf43c243b64b394e774e336475a489cca2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41b0baf43c243b64b394e774e336475a489cca2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b0baf43c243b64b394e774e336475a489cca2b/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab31b9d6fe7b39713682e3f52d11238dbe042c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab31b9d6fe7b39713682e3f52d11238dbe042c16"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "88c694567ee62e93f18cb9d3a435db881cdeedf0",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41b0baf43c243b64b394e774e336475a489cca2b/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41b0baf43c243b64b394e774e336475a489cca2b/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=41b0baf43c243b64b394e774e336475a489cca2b",
        "patch": "@@ -116,7 +116,7 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n     const bool called = QMetaObject::invokeMethod(wallet_model, \"startPollBalance\");\n     assert(called);\n \n-    connect(wallet_model, &WalletModel::unload, [this, wallet_model] {\n+    connect(wallet_model, &WalletModel::unload, this, [this, wallet_model] {\n         // Defer removeAndDeleteWallet when no modal widget is active.\n         // TODO: remove this workaround by removing usage of QDiallog::exec.\n         if (QApplication::activeModalWidget()) {\n@@ -128,7 +128,7 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n         } else {\n             removeAndDeleteWallet(wallet_model);\n         }\n-    });\n+    }, Qt::QueuedConnection);\n \n     // Re-emit coinsSent signal from wallet model.\n     connect(wallet_model, &WalletModel::coinsSent, this, &WalletController::coinsSent);"
      }
    ]
  }
]