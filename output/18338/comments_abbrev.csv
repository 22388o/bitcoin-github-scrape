DrahtBot,2020-03-13 03:54:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18469 (Build: Move wallet RPCs to their own libbitcoin_walletrpcs module by luke-jr)\n* #18354 (Protect wallet by using s",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-598535986,598535986,
ryanofsky,2020-03-13 05:42:19,I wrote a test for new register/unregister functions that could be added here: d65b4874fda47aad2e412f0e0cac27e8eafb3838 ([branch](https://github.com/ryanofsky/bitcoin/commits/review.18338.1-edit)),https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-598559646,598559646,
bvbfan,2020-03-13 13:31:59,"> unregister from notifications earlier in UnloadWallet instead of\nReleaseWallet, and use a new RegisterSharedValidationInterface function to\nprevent the CValidationInterface shared_ptr from being deleted until the last\nnotification is actually finished.\n\nDoes not fix the root issue, which is notification thread hold mutex (no matter when notification is disconnected if it's the last ins",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-598721224,598721224,
ryanofsky,2020-03-13 14:19:11,"> Does not fix the root issue, which is notification thread hold mutex (no matter when notification is disconnected if it's the last instance of the wallet) then goes in Release wallet, flush, then deleting mutex while it's hold is SIGSEGV. Unit test does not do anything to ensure that.\n\nCan you give instructions to reproduce the issue or post a backtrace of the SIGSEGV? ReleaseWallet should n",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-598742979,598742979,
bvbfan,2020-03-14 07:24:06,"```\n#!/bin/bash\nwhile [ 1 ]\ndo\n    src/bitcoin-cli -testnet loadwallet test\n    src/bitcoin-cli -testnet unloadwallet test\ndone\n```\nRunning on testnet from scratch in parallel with this script it should not crash. Whole point of `EmptyQueue` was to not have notification holding wallet mutex while we delete it.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599022346,599022346,
promag,2020-03-16 00:17:46,"@bvbfan that script crashes `bitcoin-qt -regtest -server -printtoconsole`.\n\nStill investigating but looking at call stack it's caused by queued connections ""in flight"" (like `WalletController::walletAdded(WalletModel*)`) while the wallet model is deleted in `WalletController::removeAndDeleteWallet`.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599286541,599286541,
bvbfan,2020-03-16 12:18:15,"It looks like another issue, wallet model holds a unique_ptr to interface wallet which in other hand have a shared_ptr to actual wallet. Since `UnloadWallet` actually deletes wallet (it gets it from wallet map) unless wallet model outlive wallet. First make sure it works like that\n`bitcoind -testnet` (it's testnet because every few seconds new block is connected and notification is activated)",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599504930,599504930,
ryanofsky,2020-03-16 15:59:33,"> First make sure it works like that\n> `bitcoind -testnet` (it's testnet because every few seconds new block is connected and notification is activated)\n\nThanks for clarifying this. I had tried a bunch of ways to reproduce the issue with -regtest and could never get it to happen. But with cf4cb28efcf80c018a7f070c671f43cd172dbd86 and -testnet I was able to get the deadlock to happen in just a",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599617151,599617151,
bvbfan,2020-03-16 17:06:41,"> I still haven't been able to reproduce a SIGSEGV or any problem with this current PR 73bd962, though. So again if you have a stack trace it would help. Or it would help if you could describe in a more step-by-step way how you see the SIGSEGV happening\n\nSince `UnloadWallet` actively deletes wallet that's may not happen since `g_wallet_init_interface` is global and it's call `UnloadWallet` in ",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599654176,599654176,
ryanofsky,2020-03-16 17:32:43,"> > I still haven't been able to reproduce a SIGSEGV or any problem with this current PR [73bd962](https://github.com/bitcoin/bitcoin/commit/73bd96206851aa88db79b8efbc844700630980e1), though. So again if you have a stack trace it would help. Or it would help if you could describe in a more step-by-step way how you see the SIGSEGV happening\n> \n> Since `UnloadWallet` actively deletes wallet that",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599667902,599667902,
ryanofsky,2020-03-16 17:34:59,"> What may not happen?\n\nOh, maybe you are referring to the bitcoin-qt bug. I haven't tried to reproduce that yet.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599668968,599668968,
ryanofsky,2020-03-16 18:56:21,"re: https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599286541\n\n> @bvbfan that script crashes `bitcoin-qt -regtest -server -printtoconsole`.\n> \n> Still investigating but looking at call stack it's caused by queued connections ""in flight"" (like `WalletController::walletAdded(WalletModel*)`) while the wallet model is deleted in `WalletController::removeAndDeleteWallet`.\n\n@proma",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599706438,599706438,
bvbfan,2020-03-16 19:46:02,"In #18362 the bug is mostly `horizontalHeader` is nullptr (invalid pointer).\nBasically i did not like transfer ownership of wallet to the notification that's not expected to me.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599727503,599727503,
ryanofsky,2020-03-16 19:53:53,"]> Basically i did not like transfer ownership of wallet to the notification that's not expected to me.\n\nSure, but if you are already using a shared_ptr to refer to an object some places, it makes sense to use it consistently. Combining shared pointers and raw pointers and asynchronous notifications is a recipe for bugs.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-599730693,599730693,
promag,2020-03-21 22:24:32,"> I wrote a test for new register/unregister functions that could be added here: [d65b487](https://github.com/bitcoin/bitcoin/commit/d65b4874fda47aad2e412f0e0cac27e8eafb3838) ([branch](https://github.com/ryanofsky/bitcoin/commits/review.18338.1-edit))\n\nNo longer WIP, added 2 comments in the first commit, and included the above test, thanks!",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602113281,602113281,
hebasto,2020-03-23 08:03:25,@promag Why tests (d8102ce7c90378244fedbcf7e8cc81cb65d5ca0d) are dropped?,https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602442557,602442557,
promag,2020-03-23 09:26:32,"> @promag Why tests ([d8102ce](https://github.com/bitcoin/bitcoin/commit/d8102ce7c90378244fedbcf7e8cc81cb65d5ca0d)) are dropped?\n\nTwo travis jobs are getting stuck, I'm trying to understand the problem.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602479073,602479073,
bvbfan,2020-03-23 11:05:16,"To be architectural correct notification should hold a weak pointer, then should extend its lifetime for a particular call. ",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602525695,602525695,
hebasto,2020-03-23 14:18:26,"Tested 179051c9e7835ba24baf623a2a37ba465792f1ad on Linux Mint 19.3:\n\n1) start `bitcoin-qt` without wallets\n2) load a wallet via menu\n3) close this wallet via menu\n4) open it again:\n\n![Screenshot from 2020-03-23 16-17-50](https://user-images.githubusercontent.com/32963518/77326052-e1ed6000-6d21-11ea-9801-257a603db9f4.png)\n",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602624814,602624814,
bvbfan,2020-03-23 15:00:32,"@hebasto about duplicate wallet error, if you wait a bit it should work, the problem is extended wallet lifetime due to shared ownership, it can be fixed if weak pointer is introduced, but i'm 100% sure.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602653804,602653804,
promag,2020-03-23 15:12:28,"> To be architectural correct notification should hold a weak pointer, then should extend its lifetime for a particular call.\n\nThe captured shared_ptr are only valid until the validation interface is unregistered *and* boost signal finishes calling all slots (if any) in the scheduler thread.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602663928,602663928,
hebasto,2020-03-23 15:51:05,"@bvbfan \n>  if you wait a bit it should work...\n\nIt keeps its state.\n",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602688096,602688096,
ryanofsky,2020-03-25 13:21:04,"Code review ACK 179051c9e7835ba24baf623a2a37ba465792f1ad. No changes since [last review](https://github.com/bitcoin/bitcoin/issues/18362#issuecomment-601501126) other than new comments and PR description\n\nNeeds rebase due to conflict, however.\n\nAlso, it would be good to mention in PR description that this fixes issues #16307 and #18362",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-603835234,603835234,
ryanofsky,2020-03-25 13:29:01,"I think this PR is good in its current form as a minimal bug fix. Future followups could also:\n\n- Unify RegisterSharedValidationInterface and RegisterValidationInterface in #18354 (requires changes to indexing code)\n- Add RegisterSharedValidationInterface unit test from https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-598559646",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-603839402,603839402,
hebasto,2020-03-26 19:07:28,@promag could https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-602624814 be addressed before merging ;),https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-604627376,604627376,
promag,2020-03-27 10:13:36,"@hebasto nice catch, unloading from the GUI was relying on deleting the wallet model to bring down the reference count to zero. With this PR this is no longer true because those validation callbacks are capturing the wallet shared pointer. Temporarily pushed 240cf29 to address this issue.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-604920071,604920071,
ryanofsky,2020-03-27 13:35:22,"> @hebasto nice catch, unloading from the GUI was relying on deleting the wallet model to bring down the reference count to zero. With this PR this is no longer true because those validation callbacks are capturing the wallet shared pointer. Temporarily pushed [240cf29](https://github.com/bitcoin/bitcoin/commit/240cf29205815f5f5221b0cbb6c8f5829e5a46ff) to address this issue.\n\nThis is a good ca",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605004183,605004183,
promag,2020-03-27 14:07:58,Changed fix to f80e957 and squashed to e66da18.,https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605020087,605020087,
ryanofsky,2020-03-27 15:24:35,"Some notes for future cleanup.\n\nI think we can clean up shutdown sequence after this PR, since right now it's confusing what responsibilities of different unloading functions are. I think I'd:\n\n- Move log print and flush out of ReleaseWallet into CWallet destructor\n- Rename ReleaseWallet to DeleteWallet since only thing it's doing is deleting the wallet pointer\n- Move handler.reset and",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605060348,605060348,
hebasto,2020-03-29 15:34:36,"re-ACK 17316b3a6eb41204824111ea3cfeb2e1b7d80b1b, only suggested changes about class destructors.",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605655215,605655215,
promag,2020-03-30 10:32:49,Reverted.,https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605920175,605920175,
ryanofsky,2020-03-30 10:34:05,"Code review ACK 17316b3a6eb41204824111ea3cfeb2e1b7d80b1b, but I did prefer 41b0baf43c243b64b394e774e336475a489cca2b with safe, intact destructors better. Either one is fine to merge though.\n\nBesides the destructors other things on the future cleanup list are:\n\n- https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399678666\n- https://github.com/bitcoin/bitcoin/pull/18338#issuecommen",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605920724,605920724,
hebasto,2020-03-30 12:58:06,Is my previous [ACK](https://github.com/bitcoin/bitcoin/pull/18338#pullrequestreview-383334558) valid if a commit is reverted to the ACKed one?,https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-605983072,605983072,
hebasto,2020-03-30 15:13:32,"@promag \n> > @promag Why tests ([d8102ce](https://github.com/bitcoin/bitcoin/commit/d8102ce7c90378244fedbcf7e8cc81cb65d5ca0d)) are dropped?\n> \n> Two travis jobs are getting stuck, I'm trying to understand the problem.\n\nAny update about tests?",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-606060510,606060510,
ryanofsky,2020-03-30 18:03:22,"Code review ACK 41b0baf43c243b64b394e774e336475a489cca2b (previously acked but just repeating for clarity).\n\nThis might be ready for merge. Lot of tweaking at the end but changes: f80e9574873c6091559ce5c4cba736d1b349319d -> e66da188cbbd70f0e1c2f9050680d9af4fdc0c97\n41b0baf43c243b64b394e774e336475a489cca2b -> 17316b3a6eb41204824111ea3cfeb2e1b7d80b1b -> 41b0baf43c243b64b394e774e336475a489cca2b ",https://github.com/bitcoin/bitcoin/pull/18338#issuecomment-606153187,606153187,
bvbfan,2020-03-16 19:32:30,"`BlockUntilSyncedToCurrentChain` is still needed, unless we can expect data loss",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393264763,393264763,src/wallet/wallet.cpp
bvbfan,2020-03-16 19:33:52,Why not shared_ptr here?,https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393265428,393265428,src/validationinterface.h
ryanofsky,2020-03-16 19:35:52,"re: https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393264763\n\n> `BlockUntilSyncedToCurrentChain` is still needed, unless we can expect data loss\n\nBlockUntilSyncedToCurrentChain can't be called with locks held and it doesn't make sense here. It makes sense at beginning of RPC calls to ensure consistency between calls. It doesn't directly relate to writing or consolidating data.",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393266368,393266368,src/wallet/wallet.cpp
ryanofsky,2020-03-16 19:37:15,"re: https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393265428\n\n> Why not shared_ptr here?\n\nThis is an existing function the PR isn't changing (and there's no reason to change it)",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393267054,393267054,src/validationinterface.h
bvbfan,2020-03-17 06:20:19,"Where lock is held? If here it's, that's nasty bug.",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393464732,393464732,src/wallet/wallet.cpp
ryanofsky,2020-03-17 08:44:43,"> Where lock is held? If here it's, that's nasty bug.\n\nRight, I don't think there is a nasty bug now. I think it is good to avoid nasty bugs by not calling BlockUntilSyncedToCurrentChain when it is not necessary.",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r393520043,393520043,src/wallet/wallet.cpp
hebasto,2020-03-23 14:25:08,"Approach -0\n\nThis makes reasoning about code behavior harder.",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r396489464,396489464,src/validationinterface.cpp
ryanofsky,2020-03-23 15:23:04,"> Approach -0\n> \n> This makes reasoning about code behavior harder.\n\nHarder than what? Harder than than the status quo? Or harder than an alternate solution? \n\nThis should clearly not be harder to reason about than the status quo. The status quo uses a combination of raw pointers and shared pointers and has a use-after-free bug as a result. Dropping raw pointers and using shared pointe",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r396533485,396533485,src/validationinterface.cpp
ryanofsky,2020-03-23 15:30:54,"> Approach -0\n> \n> This makes reasoning about code behavior harder.\n\nIn case the comment is specifically about the RegisterValidationInterface function, this function and UnregisterValidationInterface could both be dropped in the future and replaced with RegisterShared functions. It wasn't done here just to keep the PR smaller and avoid having to change indexing code.",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r396539619,396539619,src/validationinterface.cpp
ryanofsky,2020-03-27 14:59:16,"In commit ""gui: Handle WalletModel::unload asynchronous"" (e66da188cbbd70f0e1c2f9050680d9af4fdc0c97)\n\nDoesn't make a big a difference in practice, but it might be a good idea to move assert(wallet) below before this, so it doesn't look like this is dereferencing before checking for potential null",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399327121,399327121,src/wallet/wallet.cpp
hebasto,2020-03-28 15:13:23,nit: The destructor of the derived class should not be declared with `override`.,https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399672974,399672974,src/interfaces/chain.cpp
hebasto,2020-03-28 15:29:17,"nit: Is the `NotificationsProxy` class intended for subclassing? If not, why its destructor is declared with `virtual`?",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399674652,399674652,src/interfaces/chain.cpp
hebasto,2020-03-28 16:06:45,"nit: Mind identical parameter naming in the `RegisterSharedValidationInterface` declaration and definition:\n`pwalletIn` vs `callbacks` ?",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399678666,399678666,src/validationinterface.cpp
hebasto,2020-03-29 11:52:14,"IIUC, `std::shared_ptr` with a no-op custom deleter (and without leveraging of `use_count()`) works the same as a raw pointer, no?",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399786583,399786583,src/validationinterface.cpp
promag,2020-03-29 12:00:07,"Right, that is intended for all validation interfaces except for wallets.",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399787574,399787574,src/validationinterface.cpp
promag,2020-03-29 15:30:50,Let's do that in one of Russel suggestions and avoid unnecessary changes here.,https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399813428,399813428,src/validationinterface.cpp
promag,2020-03-29 15:31:00,Removed.,https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399813446,399813446,src/interfaces/chain.cpp
promag,2020-03-29 15:31:12,Done.,https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399813463,399813463,src/interfaces/chain.cpp
ryanofsky,2020-03-30 10:26:42,"re: https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399672974\n\n> nit: The destructor of the derived class should not be declared with `override`.\n\nThis is a strange suggestion and I would suggest reverting 17316b3a6eb41204824111ea3cfeb2e1b7d80b1b to 41b0baf43c243b64b394e774e336475a489cca2b to undo it. The point of override keyword is to get the compiler to enforce assumptions the",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400085251,400085251,src/interfaces/chain.cpp
ryanofsky,2020-03-30 10:28:54,"re: https://github.com/bitcoin/bitcoin/pull/18338#discussion_r399674652\n\n> nit: Is the `NotificationsProxy` class intended for subclassing? If not, why its destructor is declared with `virtual`?\n\nWould again suggest reverting 17316b3a6eb41204824111ea3cfeb2e1b7d80b1b to 41b0baf43c243b64b394e774e336475a489cca2b to undo this change. The point of declaring this virtual is to prevent memory lea",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400086442,400086442,src/interfaces/chain.cpp
hebasto,2020-03-30 10:40:28,Sorry for noise. I forgot that member functions defined with `override` are still `virtual`.,https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400092897,400092897,src/interfaces/chain.cpp
hebasto,2020-03-30 10:43:32,"@ryanofsky ibid:\n> Note: in a derived class, if your base class has a virtual destructor, your own destructor is automatically virtual. ",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400094476,400094476,src/interfaces/chain.cpp
ryanofsky,2020-03-30 10:48:18,"> @ryanofsky ibid:\n> \n> > Note: in a derived class, if your base class has a virtual destructor, your own destructor is automatically virtual.\n\nYes, the problems happen when code changes over time. Without the override keyword somebody could make a change to the base class removing `virtual` and unknowingly cause memory leaks in the derived class. But with the override keyword, the compile",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400097167,400097167,src/interfaces/chain.cpp
hebasto,2020-03-30 11:04:20,"Yes, I [understand](16710) that consistent usage of `override` in derived classes protects from bugs caused by changes in base classes over time.\n\nBut how `virtual` could help for a desctructor in a derived class, if:\n> in a derived class, if your base class has a `virtual` destructor, your own destructor is _automatically_ `virtual`. You might need an explicitly defined destructor for other",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400106081,400106081,src/interfaces/chain.cpp
hebasto,2020-03-30 11:10:50,"A desctructor is not a regular member function. So I was confused with the following opinions:\n- https://github.com/isocpp/CppCoreGuidelines/issues/721\n- https://github.com/isocpp/CppCoreGuidelines/pull/737",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400109450,400109450,src/interfaces/chain.cpp
hebasto,2020-03-30 11:31:32,"@ryanofsky \n> In this case, override keyword makes it an error for the base class not to have a virtual destructor.\n\nI've verified this statement with the following diff:\n```diff\n--- a/src/interfaces/handler.h\n+++ b/src/interfaces/handler.h\n@@ -22,7 +22,7 @@ namespace interfaces {\n class Handler\n {\n public:\n-    virtual ~Handler() {}\n+    ~Handler() {}\n \n     //! Discon",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400120047,400120047,src/interfaces/chain.cpp
ryanofsky,2020-03-30 12:13:59,"> But how `virtual` could help for a desctructor in a derived class, if:\n> \n> > in a derived class, if your base class has a `virtual` destructor, your own destructor is _automatically_ `virtual`. You might need an explicitly defined destructor for other reasons, but there’s _no need_ to redeclare a destructor simply to make sure it is `virtual`. No matter whether you declare it with the `virt",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400142927,400142927,src/interfaces/chain.cpp
hebasto,2020-03-30 12:55:36,"Oh, I missed that: https://github.com/bitcoin/bitcoin/blob/41b0baf43c243b64b394e774e336475a489cca2b/src/validationinterface.h#L77-L83",https://github.com/bitcoin/bitcoin/pull/18338#discussion_r400168170,400168170,src/interfaces/chain.cpp
