maaku,2014-03-28T23:27:52Z,"And immediately after making the pull request I realize half of it is missing - CreateNewBlock needs to be updated to create the required commitment outputs. I will make that fix.\n\n@luke-jr: Any required commitment increases the block size linearly, by the very nature of what you are doing. By adding a commitment to a block you have to at the very least add the bytes of the hash you are committi",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-38978288,38978288,
maaku,2014-03-29T02:16:41Z,"Fixed CreateNewBlock() to include required commitments, and 'getblocktemplate' RPC command to include a 'budgets' field which mandates any required transaction outputs beyond the miner payout.\n",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-38984140,38984140,
petertodd,2014-04-01T14:12:28Z,"> It would require the proofs to carry 32 bytes of midstate data, plus an average of 32 bytes of data prior to the commitment, and some metadata to indicate the start of the commitment within the string. That is 65 bytes of overhead plus the commitments which follow that you don't care about, which could be sizable in itself. This is a rather large waste of space, especially for applications which",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39209630,39209630,
maaku,2014-04-01T17:36:53Z,"Well a proof is just 80 bytes block header + untaken Merkle paths + extra data at the (sub-)transaction level + a few bytes metadata. So for just the coinbase and one commitment that is 80 + 32 + 1-2 bytes. That's about 50% increase on a minimal block, but percentage-wise that's a worst case since the overhead is constant but the proof size increases logarithmically with the number of transactions",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39234638,39234638,
forrestv,2014-04-04T23:26:24Z,"A while ago I started writing [this proposal for MM2 (merged mining 2)](https://github.com/forrestv/mm2-spec), which is essentially the ""radix tree with single exposed root hash"" maaku described, which fulfills all three of his required properties, and which P2Pool is already using. The rest of this comment mostly summarizes things that have already been said.\n\nAdmittedly, using the midstate is ",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39621057,39621057,
petertodd,2014-04-05T10:51:10Z,"@forrestv Oh, so p2pool already supports committing to data in addition to the p2pool share state through the radix tree it commits in that OP_RETURN output?\n",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39634741,39634741,
forrestv,2014-04-05T21:40:03Z,"@petertodd The P2Pool protocol supports it, but the P2Pool software doesn't currently provide an API for adding other commitments. Once finished, my MM2 proposal will declare an API, and then I'll add support to P2Pool.\n",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39651637,39651637,
maaku,2014-04-05T22:31:11Z,"@forrestv you need a bitcoin rule change, otherwise you can't trust the midstate, as I explained above. Separating the commitments out of the coinbase transaction results in smaller proofs and fewer changes to existing infrastructure, at least once the commitments are used for anything validation related.\n",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39652925,39652925,
petertodd,2014-04-06T00:37:49Z,"You realise your claiming that p2pool is insecure?\n\nAnyway coinbase mid state as used by p2pool is unambiguous as the commitment is always the last txout of the transaction and the merkle path to the header has a fixed format. \n\n@forrestv Excellent! That's exactly what I've been hoping we'd do for better merge mining/commitments. Speaking of, I was considering implementing my tree chains idea ",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39655305,39655305,
forrestv,2014-04-06T01:08:01Z,"@petertodd, the insecurity he's talking about has to do with miners validating commitments. It would be possible to create a commitment that validating miners would treat as not a commitment at all, by stuffing it in a PUSHDATA. In the same vein, you'd need to make sure that a block doesn't have a commitment for a certain validation type if you think the block doesn't have it, which would be diffi",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39655730,39655730,
petertodd,2014-06-12T17:02:58Z,"BTW, I forgot to mention it before, but a serious issue with this scheme is that you can't prove the _absence_ of a given commitment compactly without forcing the commitments to all be in the same index in the merkle tree, which in turn creates an ugly need for a central registration authority every time you add a new commitment. Equally that a block is now invalid just for having two commitments ",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-45919249,45919249,
BitcoinPullTester,2014-06-23T13:20:55Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p3977_26592396ce233e3e58736ee7dc346be20ad68b0f/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-46843653,46843653,
luke-jr,2014-09-23T01:06:25Z,"Wouldn't it be simpler to just require the generation transaction produce a single dummy output, then spend that from 100 blocks ago with the first commitment, and produce an output that can be consumed by the second commitment of the same block? So instead of <type> OP_EQUAL, you'd do <type> OP_BLOCKCOMMITMENT (OP_NOP3 with no behaviour changes) and ignore it in scriptSig.\n\n@petertodd I don't b",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-56465765,56465765,
petertodd,2014-09-23T06:30:02Z,"@luke-jr You're thinking too generally: I'm simply saying that with a more appropriate commitment scheme a proof can be created that a given block doesn't have a certain type of commitment; I'm not saying that such a proof can always be created without the consent of the miner. On the other hand, @maaku's scheme is flawed in that such a proof can _never_ be created. (modulo providing the entire bl",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-56480716,56480716,
petertodd,2014-09-23T06:41:38Z,"BTW (U)TXO commitments are a concrete example where this is useful. A soft-fork to make (U)TXO commitments always required is problematic, because we can't change the format of those commitments in the future in another soft-fork - the exact form is baked in stone. However we can do a slightly less drastic soft-fork to require (U)TXO commitments to be valid, while still allowing miners to choose t",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-56481430,56481430,
maaku,2014-10-10T17:29:37Z,Fixed bitrot. This could use some tests still.\n,https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-58688293,58688293,
maaku,2014-10-10T17:46:12Z,"kerami, using the transaction ordering is doable, but fairly ugly in my own opinion. It is also strictly speaking less capable as it doesn't allow for frictionless non-consensus commitments--with the current solution you can pick a random UUID as the commitment type and have some assurance against namespace collision. I have to admit this isn't a strong argument however, as it is not clear to me t",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-58690844,58690844,
petertodd,2014-10-14T11:59:21Z,"@maaku \n\n> otherwise you break the secuirty model by opening up the possibility of paying for incorrect or malicious commitments.\n\nDon't get caught up in notions of 'security model' - I can nearly as easily pay for those commitments with out-of-band and enforce those commitments with social, legal, or if all else fails, even fidelity bonds. The idea that avoiding in-band fee payments will help",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-59031292,59031292,
maaku,2015-02-23T22:30:05Z,"I am no longer convinced that this is the optimal approach, and am therefore closing this pull request.\n",https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-75651701,75651701,
