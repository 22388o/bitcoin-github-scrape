sdaftuar,2020-09-01 21:10:22,"This implements something similar to what is discussed in #16859.\n\nMarking this as draft for now, as it builds on top of #19724.",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-685134274,685134274,
DrahtBot,2020-09-01 23:51:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19884 (p2p: No delay in adding fixed seeds if -dnsseed=0 and peers.dat is empty by dhruv)\n\nIf you consider this pull re",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-685192705,685192705,
practicalswift,2020-09-02 08:09:29,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-685431218,685431218,
naumenkogs,2020-09-02 08:25:41,"Concept ACK\n\nThe most interesting question seems to be the eviction criteria after this new block-relay peer gave us a new block, and we want to evict someone.\n\nI think the ""evict the youngest"" approach is reasonable: it would be very hard for an attacker to control our block-relay-only connections by just serving blocks faster when we connect to them periodically. They'd have to also main",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-685440307,685440307,
sdaftuar,2020-09-03 14:46:22,"Now that #19724 has been merged, this is ready for review.",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-686542959,686542959,
sdaftuar,2020-09-03 15:06:31,"> We still have a couple places with m_tx_relay == nullptr, and in some of them we mention block-relay-only in a related comment. Should we converge at least those to IsBlockOnlyConn() check?\n\nI actually didn't mean to necessarily include that `m_tx_relay == nullptr` in the `LogPrintf()` that I did; the clarification of changing to using the `IsBlockOnlyConn()` check was leftover from a previo",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-686556494,686556494,
sdaftuar,2020-09-04 15:28:40,"> I'm leaning towards Concept ACK but have you considered impact with #17428 ? I fear it may reduce its usefulness.\n\nI don't think #17428 has any meaningful interaction with this.  These connections are short-lived, and generally speaking under normal circumstances rotation doesn't actually occur, because we're unlikely to get a new block from one of these connections rather than from one of o",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-687220322,687220322,
naumenkogs,2020-09-07 09:06:53,"utACK 02cf9c7c649c6e3a425b486ad2a64c4f1a0c3fe7\n\n----------\n\nIf we want to make a strong statement that this is *by all means* an improvement over the existing approach, we might want to increase block-relay-only conns limit (`m_max_outbound_block_relay`) by 1. Otherwise, an attacker may make (currently) 1 out of 2 our block-relay-only conns more vulnerable for eviction by feeding us blocks",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-688183643,688183643,
practicalswift,2020-09-08 14:12:27,"@naumenkogs \n\n> If we want to make a strong statement that this is _by all means_ an improvement over the existing approach, we might want to increase block-relay-only conns limit (`m_max_outbound_block_relay`) by 1. Otherwise, an attacker may make (currently) 1 out of 2 our block-relay-only conns more vulnerable for eviction by feeding us blocks faster.\n\nWhat would be the best arguments _",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-688903823,688903823,
sdaftuar,2020-09-08 14:33:29,"> What would be the best arguments against bumping m_max_outbound_block_relay by 1?\n\nThe best argument I'm aware of: we use up more connection slots on listening nodes, which is a limited resource.  So if we start increasing the number of outbound connections we make, we should think hard about also increasing the default number of connections we expect a listening node to be able to handle.\",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-688918364,688918364,
sdaftuar,2020-09-09 15:59:49,"Rebased and updated to fix some documentation issues pointed out by @ariard.\n\n> I was thinking the reverse ! More #19858 having negative consequences on #17428. An attacker's sybil if selected as extra-block-relay might be able to outrun a high-bandwidth compact blocks peers such that evicting this peer from its anchor slot.\n\nI don't think that is a big concern -- by construction, only 1 o",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-689657614,689657614,
naumenkogs,2020-09-10 06:39:15,ACK 8ea760b10221eb01b057363693ab74cdc810fd4a,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-690023179,690023179,
sdaftuar,2020-09-10 13:25:22,"If anyone is curious, I tried to exercise the eviction logic a bit with this patch added on top of this PR:\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex c7b64f9d505..5a47d9d8c8d 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -2863,6 +2863,11 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n \n     m_deserializer = MakeUnique<V1TransportDe",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-690286990,690286990,
ariard,2020-09-15 16:24:32,"Tested/Code Review ACK 8ea760b under following caveats.\n\nI observed that the new eviction logic is working as expected and extra block-relay-only peers are rotated based on their last block received time.\n\nNote for the other reviewers, I took the proposed patch with further modifications:\n* scale down EXTRA_PEER_CHECK_INTERVAL/EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL to 5s and 15s\n* activa",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-692826368,692826368,
sdaftuar,2020-10-05 18:28:24,@jonatack Thanks for the review and testing; I've rebased to fix the silent merge conflict with the `LockAssertion` stuff and addressed your comments.,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-703809158,703809158,
jonatack,2020-10-06 14:23:11,"Diff per `git range-diff 875e1cc 8ea760b 93a0ec1` looks good, will circle back shortly.",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-704304140,704304140,
luke-jr,2020-10-20 15:58:29,Should this wait until it's verified the new chain is valid?,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-712955870,712955870,
sdaftuar,2020-10-20 16:25:01,">Should this wait until it's verified the new chain is valid?\n\n@luke-jr I'm interpreting your question as asking: ""Should we wait to decide which peer to keep and which to evict, until after any new chain received from the new peer has been validated?""  If that question is not what you meant, please clarify.\n\nI think a good question is exactly what we want to happen if we connect to a peer",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-712981368,712981368,
naumenkogs,2020-10-22 13:07:25,ACK 93a0ec1a629af533bb21418a3e134c268bc57395,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-714481343,714481343,
ariard,2020-11-05 00:06:23,"Code Review ACK 93a0ec1. Changes since last ACK : new lock assertions around node iteration in `EvictExtraOutboundPeers`, more compact conditional in same function, new comments.",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-722041343,722041343,
jnewbery,2020-11-27 09:34:25,"I'm curious how the timings for this mechanism were chosen:\n\n- we'll connect to an additional block-relay-only peer every 300 seconds on average\n- we'll consider eviction of the additional block-relay-peer every 45 seconds\n- if the youngest block-relay-connection is less than 30 seconds old, then we won't disconnect it.\n\nThat means that the additional block-relay-only connection has a ",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-734740321,734740321,
sdaftuar,2020-11-27 15:00:32,"@jnewbery I think the biggest difference between what is implemented here and what you seem to be suggesting is that your proposed approach would be much more aggressive about making outbound connections. When we increase the target number of connections we want to make, `ThreadOpenConnections` will constantly be trying to achieve that target, making connection attempts whenever we are below our t",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-734874989,734874989,
sdaftuar,2020-11-27 15:54:53,"(Oops, prematurely hit submit on this comment before I finished writing.)\n\n@jnewbery I fixed the unnecessary lock assertion in the latest commit.  My strong preference for now is to merge this PR as-is, as no problems seem to have emerged in review and testing thus far, it has several ACKs, this PR represents a substantial improvement in our peering behavior, and frankly this work has gotten s",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-734895473,734895473,
sdaftuar,2020-11-29 23:00:08,"Rebasing for the silent merge conflict with #20188, so squashed the lock annotation fix in while I was at it.",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-735471517,735471517,
sdaftuar,2020-12-01 14:04:56,@naumenkogs @sipa @jonatack @ariard Care to re-review?,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-736572336,736572336,
jonatack,2020-12-02 17:43:19,"Am re-testing with added logging on a node, re-review soon.",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-737387735,737387735,
jonatack,2020-12-09 16:18:52,Reviewers may be interested in the article in today's Bitcoin Optech about this PR: https://bitcoinops.org/en/newsletters/2020/12/09/#bitcoin-core-pr-review-club,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-741880853,741880853,
naumenkogs,2020-12-10 09:33:55,"ACK 7dc24baf7c88f3b03fa2aa59fc4cba332d7e7a69\n\n--------\n\nI find it slightly confusing that `IsBlockOnlyConn`really means *outbound* block-only conn. It makes the code-review harder for me, and I assume even more for new developers.\nNot sure what we could do here though.\n\n-------\n\nShoot, another ""needs rebase""",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-742400827,742400827,
sdaftuar,2020-12-10 13:55:20,"@naumenkogs Thanks for the re-review -- I just rebased again to deal with the merge conflict, another trivial change.\n\n> I find it slightly confusing that `IsBlockOnlyConn` really means outbound block-only conn. It makes the code-review harder for me, and I assume even more for new developers.\n\nI do as well!  On my to-do list is to propose and implement support for negotiating block-relay ",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-742535428,742535428,
MarcoFalke,2020-12-10 13:55:58,"@naumenkogs @sipa @jonatack @ariard you previously reviewed this, but there have been a few (silent) merge conflicts, so a re-ACK would be appreciated.\n\nIn the meantime it would be good if other maintainers refrained from merging conflicting pulls, see the list by DrahtBot: https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-685192705",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-742535758,742535758,
jonatack,2020-12-10 15:44:46,Logging used for my testing: https://github.com/jonatack/bitcoin/commit/8986db429738cb1f8e0057e4ac41af1a89bc714e (a variant of Suhas' patch above).,https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-742602943,742602943,
ariard,2020-12-10 16:06:23,"Code Review ACK b3a515c, only change since last time is dropping a useless `cs_main` taking. I manually tested a previous version of the PR, and not substantial change has been introduced since then which would alter behavior IMO.\n\n__________\n\n> The trade-off here is that the more frequently we make connections (and therefore add edges to the network graph of nodes), the more security we h",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-742616282,742616282,
ajtowns,2020-12-16 11:44:28,"> Testing this, I'm seeing some cases where the extra block-relay peer is being evicted for sending a tx, [...]\n\nLooking into this a bit further: I'm only seeing this coming from nodes advertising themselves as 0.20.1, and the timing seems like it's consistent with a 5s poisson delay since the connection is established. Not all 0.20.1 nodes are failing this way. I've just added some additional",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-746160585,746160585,
jnewbery,2020-12-16 12:55:17,"> Testing this, I'm seeing some cases where the extra block-relay peer is being evicted for sending a tx ...\n\nI'm surprised that your log isn't showing the ""send version message"" line. You obviously have NET logging enabled since you're seeing the ""receive version message"" line. These are outbound connections, so I'd expect to see ""send version message"" (in `InitializeNode()`) between ""Added c",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-746247194,746247194,
ajtowns,2020-12-16 13:49:36,"Oh, with logips enabled, I see those nodes also don't appear to be telling me my IP address, instead reporting their own IP in both `us=` and `peeraddr=`. Might just be a proxy that's munging the version message both ways, and losing the relay bit as well as address info.\n\nEdited to add:\n\nI think about 12%  of the extra block-relay-only connections my peer is opening get disconnected for t",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-746312882,746312882,
sdaftuar,2020-12-16 14:33:37,"> One thing that might be worth considering: our sybil mitigation only works for concurrent connections -- our 10 regular outbounds all have to be in different netgroups because they're simultaneously connected, but 10 sequential extra block-relay-only could all end up to the same netgroup. Could fix this by keeping track of the last 10 extra connections we've tried, and trying to choose the next ",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-746385941,746385941,
dhruv,2021-01-01 02:22:30,"IIUC, since this merge, an extra outbound-full-relay connection is made upon a stale tip(3 block intervals), and an extra outbound-block-relay connection is now made every 5 minutes. Is there still value in the former?",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-753242410,753242410,
sdaftuar,2021-01-01 02:38:16,"> IIUC, since this merge, an extra outbound-full-relay connection is made upon a stale tip(3 block intervals), and an extra outbound-block-relay connection is now made every 5 minutes. Is there still value in the former?\n\nYes I think there is. The stale tip logic more aggressively seeks out a new peer to connect to (staying in that state until a new connection is actually made) while this logi",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-753243816,753243816,
dhruv,2021-01-02 05:09:51,"@sdaftuar Thanks for explaining. Could this be a way to improve the interaction between the two behaviors?:\n\n1. Upon stale tip, seek extra outbound-block-relay more aggressively rather than a 5 minute interval (stay in that state until the tip is no longer stale). \n2. Novel block discovery by the extra outbound-block-relay triggers outbound-full-relay eviction.\n3. Eliminate extra outbound-",https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-753432802,753432802,
naumenkogs,2020-09-02 07:55:25,"Perhaps it's a good opportunity to refactor this function:\n- rename `GetExtraOutboundCount` -> `GetExtraFullOutboundCount`\n- rename `int nOutbound` -> `uint32_t full_outbound_peers`",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r481853670,481853670,src/net.cpp
naumenkogs,2020-09-02 08:08:21,"Should be along the following ""ignore non-outbound-full-relay peers""?\nOr probably even better: ""Consider only outbound full-relay peers not already marked for disconnection""?",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r481864952,481864952,src/net_processing.cpp
naumenkogs,2020-09-02 08:15:20,`nBlockRelay` doesn't seem to follow the code conventions we have for vars,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r481871155,481871155,src/net.cpp
sdaftuar,2020-09-03 14:45:23,Fixed.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483034922,483034922,src/net.cpp
sdaftuar,2020-09-03 14:45:48,Done.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483035233,483035233,src/net_processing.cpp
sdaftuar,2020-09-03 14:45:58,Fixed.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483035358,483035358,src/net.cpp
ariard,2020-09-04 00:56:58,I think it would be better to converge naming for BLOCK_RELAY and thus ease reviewing. They're commented as either block-relay or block-relay-only peers through the codebase but actually designate the same type. I'm even on which one we pick as long as we're consistent.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483328318,483328318,src/net.cpp
ariard,2020-09-04 01:02:41,This is making an assumption on `GetNewNodeId()` being a monotonic counter function of connections order. It may silently break id we modify ids selection to something else (like random nonces). Can we use `nTimeConnected` instead ?,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483329786,483329786,src/net_processing.cpp
ariard,2020-09-04 01:15:17,"I would be more conservative in allegation of this new eclipse counter-measure effectiveness.\n\nI believe we should have a hierarchy of eclipse attacks classified with regards to resources they require from the attacker to successfully perform them. And thus serves as a ground to evaluate a counter-measure with regards to a scenario. The fact that a stronger attack A can easily bypass counter-m",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483332808,483332808,src/net.cpp
ariard,2020-09-04 01:20:40,"I suppose this doesn't protect against initial-network-connection eclipse attack like DNS cache poisoning. Maybe after some timer based on an optimistic headers-chain sync delay and observing that our tip isn't near to local clock trigger this logic anyway ?\n\nThat said, if you're effectively eclipsed since the beginning and don't have any good peers available in your addrman I don't think it w",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483334138,483334138,src/net_processing.cpp
ariard,2020-09-04 01:31:11,"This is a bit of a name collusion, maybe `second_youngest_peer` -> `next_youngest_peer`",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483336732,483336732,src/net_processing.cpp
ariard,2020-09-04 01:46:05,"I think this is pproper even if it's biasing a bit towards attackers. I assume they run modified clients and thus always win new block announcement races and have public sybils well-spread through /16s.\n\nWe start with Alice, Malicia as 2 block-relay connections:\n* Alice connection gets dropped due an external event from our node viewpoint (like network issue or Alice inbound eviction logic)",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483340353,483340353,src/net.cpp
naumenkogs,2020-09-04 07:34:30,can we make this mockable from the beginning? (std::chrono),https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483441294,483441294,src/net.h
naumenkogs,2020-09-04 07:39:25,"I'd also prefer to not having this assumption, and it seems to be easy to avoid.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483443580,483443580,src/net_processing.cpp
naumenkogs,2020-09-04 07:41:32,"Should this ever be set back to false? For example, if we were offline for a week and we know we're catching up.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483444542,483444542,src/net_processing.h
naumenkogs,2020-09-04 09:01:48,"If `m_connman.ForEachNode` is not ordered, this algorithm may mistakenly select `second_youngest`.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483487568,483487568,src/net_processing.cpp
naumenkogs,2020-09-04 09:07:59,"nit: it's a little less clear that the youngest peer is the _temporary_ connection created just couple minutes ago, would be cool to explain it more explicitly.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483490780,483490780,src/net_processing.cpp
naumenkogs,2020-09-04 09:17:26,"nit: I had to double-check that `nBlocksInFlight` can't be tricked with fake blocks. If you gonna update it, maybe just say ""block with a valid header""?",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483496118,483496118,src/net_processing.cpp
sdaftuar,2020-09-04 15:29:37,"Sure I can change this, but keep in mind this logic is used a little further down already, in the existing outbound full-relay peer eviction algorithm.\n\nEDIT: Actually, I think while this has some logical appeal it makes the code read strictly worse -- CNode::nTimeConnected is tracked in seconds, so it's perfectly plausible that you might have two nodes that tie, and you'd presumably break the",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483691169,483691169,src/net_processing.cpp
sdaftuar,2020-09-04 15:30:41,"Sure I can add a hint -- I thought it was well-understood that we only request blocks that are on a (valid) headers chain resulting in a tip that has >= work as our tip, as we use that fact in multiple places in `net_processing`, I think.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483692149,483692149,src/net_processing.cpp
sdaftuar,2020-09-04 15:35:43,Wouldn't the existing stale-tip check let us get new outbound peers in the case that our tip isn't updating at all? ,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483696666,483696666,src/net_processing.cpp
sdaftuar,2020-09-04 15:39:05,"If you go offline for a week by shutting down bitcoind there is no issue; if you close your laptop or disconnect from the network though then yes you're right that we'll use these occasional peers to help us catch up, which is not the intent.  However, we don't have a good way to distinguish that situation in our code right now...  Arguably stale-tip checking shouldn't fire either in those circums",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483699833,483699833,src/net_processing.h
sdaftuar,2020-09-04 15:44:20,"Yep.  Most importantly, because we're always trying a new peer and exchanging best tip information, this should create a very high cost to an attacker to actually split the network for a meaningful amount of time (even if they've taking all our initial peer slots).",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483704479,483704479,src/net.cpp
sdaftuar,2020-09-04 16:00:07,"I re-read my comment, and I think it's pretty accurate.  If other reviewers think that the language here is somehow too strong and implies this logic is doing something it isn't, I'll reconsider.\n\nNote, by the way, that the behavior introduced here is beneficial to not just the node doing it, but to the whole network, as a node already connected to the honest network that is periodically conne",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483713328,483713328,src/net.cpp
sdaftuar,2020-09-04 16:25:50,Fixed in latest version.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483726992,483726992,src/net.cpp
sdaftuar,2020-09-04 16:26:51,"Can we punt until someone also changes the feeler logic to be the same?  Right now the logic for both is very similar, which I think helps readability.  (Also, I find `std::chrono` to be harder to work with than the tools I know, so I'm afraid I'll introduce an error if I try to make the change myself.)",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483728160,483728160,src/net.h
sdaftuar,2020-09-04 17:05:55,Fixed in latest version.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483750720,483750720,src/net_processing.cpp
sdaftuar,2020-09-04 17:06:04,Changed.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r483750782,483750782,src/net_processing.cpp
naumenkogs,2020-09-07 08:30:02,"My worry was that `nBlocksInFlight` might contain just a hash for an announced block (pre-compact blocks) which we have no idea about. Then announcing any random hash would trick us.\n\nYour current comment is sufficient to clarify that this is not possible.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484274913,484274913,src/net_processing.cpp
naumenkogs,2020-09-07 08:48:37,"Not sure what you mean by ""feeler logic to be the same"", but I'm making feeler timings mockable as part of #19869, you're very welcome to review :)\n\nMy opinion is not very strong here, we can update it later, I just thought it's a good opportunity.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484285863,484285863,src/net.h
ariard,2020-09-08 13:32:38,"I was assuming someone feeding you _slowly_ the most-PoW valid chain thus never triggering the stale-tip check ? I think a broader definition of eclipse attack should include slow chain feeding as it's open the door for offchain exploitation.\n\nThat said, I think eclipse attacks during the bootstrap view of your network view are a special-case and we can address them latter with smarter heurist",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484923353,484923353,src/net_processing.cpp
ariard,2020-09-08 13:58:09,Update comment to reflect latest changes  (411056e) on keeping the most recent block announcement?,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484942044,484942044,src/net.cpp
ariard,2020-09-08 14:00:05,Have you considered a `MarkExtraBlockRelayPeers` function which a) set `m_start_extra_block_relay_peers` to true if isn't and b) return the state of `m_start_extra_block_relay_peers` ? That way you can drop new `m_initial_sync_finished` I think,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484943585,484943585,src/net.h
ariard,2020-09-08 14:02:47,"Same, reflect changes, ""a more recent block than one provided by next-youngest""?",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484945485,484945485,src/net_processing.cpp
ariard,2020-09-08 14:08:45,"As alternative have you considered caching them ? We know both when we open such connections and when we drop them. It would avoid the risk of logic bug and iterating every other connections types not concerned by such eviction.\n\nI think it's more a future work direction.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484949893,484949893,src/net_processing.cpp
ariard,2020-09-08 14:11:03,"""so any in-flight block is a good hint that such peer will soon provide us with useful work""",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484951554,484951554,src/net_processing.cpp
ariard,2020-09-08 14:11:51,You can mention `CanDirectFetch` as the completed-initial-sync-yet condition.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484952119,484952119,src/net_processing.h
ariard,2020-09-08 14:12:53,"""See ThreadOpenConnections""",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r484952915,484952915,src/net_processing.cpp
sdaftuar,2020-09-09 14:53:46,"We do require that our initial headers-sync peer provide us with a headers chain that looks reasonable within a bounded amount of time (on the order of 20 minutes if I remember correctly -- the time scales with the expected honest chain length and very conservative notions of how long it takes to download headers).  However if we're connecting blocks slowly, we can't distinguish between our own no",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485676851,485676851,src/net_processing.cpp
sdaftuar,2020-09-09 14:54:47,"If #19869 is merged first, then I'll update the code here as well when I rebase.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485677705,485677705,src/net.h
sdaftuar,2020-09-09 15:04:09,"I assume you mean caching at the time we open the connection?  I think that is problematic, because in order to keep that extra state up to date in the event that peers get disconnected and we make new connections after that, you have to a lot of additional error checking and introduced added complexity.  Doing all the checks in one place, at the point in time that we care about getting to a new/c",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485685042,485685042,src/net_processing.cpp
sdaftuar,2020-09-09 15:52:49,Thanks! Fixed.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485720385,485720385,src/net.cpp
sdaftuar,2020-09-09 15:52:57,"I had a slight preference for not frequently looking at an atomic; `m_initial_sync_finished` is only used in one thread and therefore doesn't need locks.  This issue seems minor either way, so planning to leave it as-is.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485720468,485720468,src/net.h
sdaftuar,2020-09-09 15:53:01,Thanks! Fixed.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485720501,485720501,src/net_processing.cpp
sdaftuar,2020-09-09 15:53:51,This seems self-evident!  Leaving as-is.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485721066,485721066,src/net_processing.cpp
sdaftuar,2020-09-09 15:54:39,I don't think that's necessary here.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485721653,485721653,src/net_processing.h
sdaftuar,2020-09-09 15:54:48,I think this is fine as-is.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r485721742,485721742,src/net_processing.cpp
jonatack,2020-10-04 15:23:25,"The two lock assertions added in this function need to be updated to build on current master:\n```diff\n@@ -3964,8 +3964,8 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         std::pair<NodeId, int64_t> youngest_peer = {-1, 0};\n         std::pair<NodeId, int64_t> next_youngest_peer = {-1, 0};\n \n-        m_connman.ForEachNode([&](CNode* pnode) {\n-            Lo",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499257992,499257992,src/net_processing.cpp
jonatack,2020-10-04 15:27:33,(see #19979),https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499258411,499258411,src/net_processing.cpp
jonatack,2020-10-05 08:54:49,"perhaps\n```diff\n     // Note that we use higher nodeid as a measure for most recent connection.\n-    int extra_block_relay_peers = m_connman.GetExtraBlockRelayCount();\n-    if (extra_block_relay_peers > 0) {\n-        std::pair<NodeId, int64_t> youngest_peer = {-1, 0};\n-        std::pair<NodeId, int64_t> next_youngest_peer = {-1, 0};\n+    if (m_connman.GetExtraBlockRelayCount() > 0) {",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499441781,499441781,src/net_processing.cpp
jonatack,2020-10-05 08:57:46,"perhaps, as `extra_peers` isn't reused\n```diff\n-    int extra_peers = m_connman.GetExtraFullOutboundCount();\n-    if (extra_peers > 0) {\n+    if (m_connman.GetExtraFullOutboundCount() > 0) {\n```\n",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499443704,499443704,src/net_processing.cpp
jonatack,2020-10-05 09:00:41,"`EvictExtraOutboundPeers()` seems like a natural candidate to be separated into two functions,`EvictExtraOutboundBlockRelayPeers()` and `EvictExtraOutboundFullRelayPeers()`. This might enable better unit testing of the logic. If you agree, it may be easier to do this now than later.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499445435,499445435,src/net_processing.cpp
sdaftuar,2020-10-05 17:49:27,"Thanks, updated.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499769823,499769823,src/net_processing.cpp
sdaftuar,2020-10-05 18:18:14,Done.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499785328,499785328,src/net_processing.cpp
sdaftuar,2020-10-05 18:18:27,Done.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499785441,499785441,src/net_processing.cpp
sdaftuar,2020-10-05 18:24:54,"Well, there's also an argument to be made that it's simpler to have all of the outbound peer eviction logic in one place/one callback.\n\nIf there is a reason (like testing) to do so, I think splitting this up in the future could make sense, but for now I'd like to keep the changes here to be more straightforward.  So assuming this implementation is correct I'd prefer to leave it as-is.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r499788853,499788853,src/net_processing.cpp
sipa,2020-11-05 00:45:01,"Is it possible to hit `node_state == nullptr` here? If not, I'd rather assert it.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r517715632,517715632,src/net_processing.cpp
jonatack,2020-11-06 10:08:09,"daf74979 nit suggestion (or the inverse change), for symmetry with the extra full outbound code in the same function\n```diff\n             } else {\n                 LogPrint(BCLog::NET, ""keeping block-relay-only peer=%d chosen for eviction (connect time: %d, blocks_in_flight: %d)\n"",\n                     pnode->GetId(), pnode->nTimeConnected, node_state->nBlocksInFlight);\n+               ",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r518648674,518648674,src/net_processing.cpp
jonatack,2020-11-06 10:22:41,"daf74979 In my testing, this logging nearly always returned ""(last block received at time 0)""; perhaps for this common case the logging could return ""(no block received)"" or similar.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r518656458,518656458,src/net_processing.cpp
sdaftuar,2020-11-10 14:19:37,"It shouldn't be possible (as far as I understand), but this pattern of checking for nullptr seems to be present throughout the code (and we seem to have merged recent commits that add nullptr checks in analogous places, eg fc66d0a65cdc52a3b259effe0c29b5eafb1b5ff5). \n\nIn this particular place in our code, nullptr should be handled just fine if it were to somehow occur (all we'd do is mark the C",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r520596989,520596989,src/net_processing.cpp
jnewbery,2020-11-22 11:29:35,"Since you're cleaning this up and adding another very similar function below, consider factoring out those loops and using a more functional style:\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 48977aeadf..8456af01c5 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -1822,30 +1822,14 @@ void CConnman::SetTryNewOutboundPeer(bool flag)\n // evict some peer that has finished the ha",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528321515,528321515,src/net.cpp
jnewbery,2020-11-22 11:41:36,"I agree with @naumenkogs review comment https://github.com/bitcoin/bitcoin/pull/19858#issuecomment-685440307 about changing the remaining places where `m_tx_relay == nullptr` is used as a proxy for `IsBlockOnlyConn()` to use `IsBlockOnlyConn()`. There's already a commit in this branch for _Use conn_type to identify block-relay peers, rather than m_tx_relay == nullptr_, so I don't see why we wouldn",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528322920,528322920,src/net_processing.cpp
jnewbery,2020-11-22 12:05:01,"This variable name is very confusing. It's a different concept from `IsInitialBlockDownload()` but very similarly named. `IsInitialBlockDownload()` returns whether we've ever had a block at our tip that is within 24 hours of current time. This returns whether we've ever had a block at our tip that is within 200 minutes of current time.\n\nThe variable also isn't needed. We can just make `StartEx",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528325663,528325663,src/net_processing.h
jnewbery,2020-11-22 12:48:11,"> if you close your laptop or disconnect from the network though then yes you're right that we'll use these occasional peers to help us catch up, which is not the intent.\n\nIf this is the intent (to stop making these short-lived connections if we've fallen behind the tip), then I think we can achieve that fairly easily by removing this caching variable, making `CanDirectFetch()` a public method",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528330907,528330907,src/net_processing.h
jnewbery,2020-11-22 12:55:50,"I don't think `cs_main` is needed for this lambda. Unless I've missed something, we're not accessing anything in here that is guarded by cs_main.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528331824,528331824,src/net_processing.cpp
jnewbery,2020-11-22 13:17:05,"I think it's better/more defensive not to add asserts in the p2p stack if we can gracefully handle the condition. Here we can just set `fDisconnect` and hopefully `FinalizeNode()` will handle cleaning up the state.\n\nAt most, we should use `Assume()` (https://github.com/bitcoin/bitcoin/pull/20255) which will crash in tests and continue in production.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528334380,528334380,src/net_processing.cpp
jnewbery,2020-11-22 13:18:42,"It's strange to return `true` here and `false` below, and then throw away that return value. It'd be clearer to always return the same value.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528334554,528334554,src/net_processing.cpp
jnewbery,2020-11-22 13:25:30,"Why not disconnect the worst peer (the one that has been longest without providing a block)?\ne.g.:\n\n- connect to block-relay-only peer 1. It never provides any blocks.\n- connect to block-relay-only peer 2. It provides blocks.\n- connect to extra block-relay-only peer 3. It provides one block in the time it's connected.\n\nWith this logic we'd disconnect peer 2, but I think it'd be stric",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528335350,528335350,src/net_processing.cpp
jnewbery,2020-11-22 13:26:29,"```suggestion\n            CNodeState* node_state = State(pnode->GetId());\n```\n\n(`*` and `&` should bind to the left in new code)",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528335481,528335481,src/net_processing.cpp
jnewbery,2020-11-22 13:51:18,"I agree that splitting this function would be a better structure. There's no shared state between the top and bottom half of the function, and splitting logic into smaller pieces makes it easier to follow. It also allows guard clauses and early exits, which reduces deep nesting and is a very clear way of expressing the intent of the function.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528338603,528338603,src/net_processing.cpp
jnewbery,2020-11-22 13:57:26,"In general, it's better to avoid default capture in lambdas, since if that lambda is used outside the scope that it's defined, it can lead to dangling references. That can't happen here, but I think it's just best practice to explicitly state what you'll need.\n\n```suggestion\n        m_connman.ForEachNode([&youngest_peer, &next_youngest_peer](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) ",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528339390,528339390,src/net_processing.cpp
jnewbery,2020-11-22 13:58:00,"It's best to capture simple types by value (and again, explicitly rather than by default):\n\n```suggestion\n        m_connman.ForNode(to_disconnect, [time_in_seconds](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n```",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r528339455,528339455,src/net_processing.cpp
naumenkogs,2020-11-27 07:53:30,"A peer would never provide us a block if we provided them a block earlier.\n\nSo, an attacker can try being veeeery fast at sending blocks to a victim (I assume it's possible) so that other peers are worst, and slowly evict them one by one.\nThis of course assumes an attacker has eviction capabilities.\n\nCurrent approach of this PR is more conservative and wouldn't allow this.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531432433,531432433,src/net_processing.cpp
jnewbery,2020-11-27 09:20:17,"Essentially this means that we have one 'fixed' block-relay-only peer (even across restarts due to anchor connections) and one evictable block-relay-only peer.\n\nYou may be right that this makes it more difficult for an adversary to take over both block-relay-only connections, although it seems like it'd be very difficult to pull off - the adversary would need to take over a large part of the v",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531475462,531475462,src/net_processing.cpp
sdaftuar,2020-11-27 15:18:39,Happy to pick this up in a followup PR. I don't think we need to clutter this one further with style cleanups now that this has some review and ACKs.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531657452,531657452,src/net_processing.cpp
sdaftuar,2020-11-27 15:23:26,"I thought I did document this in`net.h`, but I think it would make sense to put a writeup of how all this works on our wiki, which I'd be happy to do after this is merged.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531659645,531659645,src/net_processing.cpp
sdaftuar,2020-11-27 15:25:24,Feel free to pick this up in a future PR if you like; I'm leaving this as-is for now as I think this is easier to review and understand if this all happens in the same scheduler callback.,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531660586,531660586,src/net_processing.cpp
sdaftuar,2020-11-27 15:42:57,"I think this would mean that we stop using block-relay-only peer rotation when our tip is stale, which might be when we want these connections happening the most?  It becomes arguable whether we should just rely on stale-tip-checking + full outbound peer rotation at that point, but I think we would want to carefully reason about our protections in that scenario.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531669010,531669010,src/net_processing.h
sdaftuar,2020-11-27 15:51:56,"Oops, that seems correct.  I'll add a commit that removes this.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r531673223,531673223,src/net_processing.cpp
naumenkogs,2020-12-10 08:55:15,"To be clear, there was a bug here (no critical behavior, just meaningless code).\nIt was already useless to check for ""BlockRelayConn"", because they were filtered out later in ""if (pnode->m_tx_relay == nullptr)"". All good after this change.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r539986106,539986106,src/net_processing.cpp
ajtowns,2020-12-11 09:01:42,"Isn't this suggestion (changing `m_tx_relay == nullptr` to `IsBlockOnlyConn()` when logging a new outbound peer) already done? I think github is confusing me...\n\nAnyway, changing that entire `x ? ""y"" : ""z""` to just be `pfrom.ConnectionTypeAsString()` seems like it might be better.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r540791588,540791588,src/net_processing.cpp
ajtowns,2020-12-11 09:15:04,"If this does get refactored further, making it `bool HasExtraBlockRelay()` and `bool HasExtraFullOutbound` and returning `count > m_max_x` instead of `max(0, count - m_max_x)` would be an idea too.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r540799536,540799536,src/net.cpp
ajtowns,2020-12-11 09:42:39,"Might have been better to have made it:\n\n```c++\n        CNodeState* state = State(pnode->GetId());\n        int blocks_in_flight = (state == nullptr ? 0 : state->nBlocksInFlight);\n```\n\nAs it is, it looks like `node_state == nullptr` is something that could happen and requires special casing to ensure we do disconnect it immediately, whereas in reality it's never reachable (we ensure w",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r540817510,540817510,src/net_processing.cpp
ajtowns,2020-12-11 09:48:10,Seems better to use the names from `ConnectionTypeAsString` in comments than the shouty enums (ie `outbound-full-relay`) here).,https://github.com/bitcoin/bitcoin/pull/19858#discussion_r540821050,540821050,src/net_processing.cpp
sdaftuar,2020-12-16 14:57:27,"I've updated the documentation on the wiki:\nhttps://github.com/bitcoin-core/bitcoin-devwiki/wiki/P2P-Design-Philosophy/_compare/452d8a0c96503ac7158a975acf7d55cd674a3735\n\nPlease let me know if you think anything is missing and I'd be happy to clarify further.",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r544365851,544365851,src/net_processing.cpp
sdaftuar,2020-12-18 13:16:42,"@jonatack If you have a patch to do this, please feel free to open a PR (I agree that this is mildly annoying).",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r545824316,545824316,src/net_processing.cpp
jonatack,2020-12-19 14:55:55,"thanks @sdaftuar, done in #20723",https://github.com/bitcoin/bitcoin/pull/19858#discussion_r546246953,546246953,src/net_processing.cpp
