[
  {
    "sha": "91d61952a82af3e8887e8ae532ecc19d87fe9073",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWQ2MTk1MmE4MmFmM2U4ODg3ZThhZTUzMmVjYzE5ZDg3ZmU5MDcz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-09-01T20:32:09Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-12-10T13:41:57Z"
      },
      "message": "Simplify and clarify extra outbound peer counting",
      "tree": {
        "sha": "7595a09515d4ec79e518b6536106967552fa6f29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7595a09515d4ec79e518b6536106967552fa6f29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91d61952a82af3e8887e8ae532ecc19d87fe9073",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d61952a82af3e8887e8ae532ecc19d87fe9073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91d61952a82af3e8887e8ae532ecc19d87fe9073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d61952a82af3e8887e8ae532ecc19d87fe9073/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86f20071931b803b5f26ed8f685d98d4919fb7a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f20071931b803b5f26ed8f685d98d4919fb7a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f20071931b803b5f26ed8f685d98d4919fb7a7"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "09be3d01fa90444b33343a1163789f2bf10eeccf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "patch": "@@ -200,7 +200,7 @@ void Shutdown(NodeContext& node)\n     // using the other before destroying them.\n     if (node.peerman) UnregisterValidationInterface(node.peerman.get());\n     // Follow the lock order requirements:\n-    // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n+    // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraFullOutboundCount\n     //   which locks cs_vNodes.\n     // * ProcessMessage locks cs_main and g_cs_orphans before indirectly calling ForEachNode which\n     //   locks cs_vNodes."
      },
      {
        "sha": "fe1baf97a3278a4cf2968fcf77476e2870f038f5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "patch": "@@ -1827,18 +1827,18 @@ void CConnman::SetTryNewOutboundPeer(bool flag)\n // Also exclude peers that haven't finished initial connection handshake yet\n // (so that we don't decide we're over our desired connection limit, and then\n // evict some peer that has finished the handshake)\n-int CConnman::GetExtraOutboundCount()\n+int CConnman::GetExtraFullOutboundCount()\n {\n-    int nOutbound = 0;\n+    int full_outbound_peers = 0;\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && pnode->IsOutboundOrBlockRelayConn()) {\n-                ++nOutbound;\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && pnode->IsFullOutboundConn()) {\n+                ++full_outbound_peers;\n             }\n         }\n     }\n-    return std::max(nOutbound - m_max_outbound_full_relay - m_max_outbound_block_relay, 0);\n+    return std::max(full_outbound_peers - m_max_outbound_full_relay, 0);\n }\n \n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)"
      },
      {
        "sha": "e959718faba69a2cf59c1cab96d1fa4fcf3ea1ef",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "patch": "@@ -336,7 +336,7 @@ class CConnman\n     // return a value less than (num_outbound_connections - num_outbound_slots)\n     // in cases where some outbound connections are not yet fully connected, or\n     // not yet fully disconnected.\n-    int GetExtraOutboundCount();\n+    int GetExtraFullOutboundCount();\n \n     bool AddNode(const std::string& node);\n     bool RemoveAddedNode(const std::string& node);"
      },
      {
        "sha": "243ac6a34b629b96f6790bfe398e01735da5cad8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "patch": "@@ -3910,7 +3910,7 @@ void PeerManager::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n {\n     // Check whether we have too many outbound peers\n-    int extra_peers = m_connman.GetExtraOutboundCount();\n+    int extra_peers = m_connman.GetExtraFullOutboundCount();\n     if (extra_peers > 0) {\n         // If we have more outbound peers than we target, disconnect one.\n         // Pick the outbound peer that least recently announced"
      },
      {
        "sha": "bb97f58cf26c87222bb01275833fdd278cdd0c08",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d61952a82af3e8887e8ae532ecc19d87fe9073/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "patch": "@@ -145,7 +145,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n     (void)connman.GetAddedNodeInfo();\n     (void)connman.GetBestHeight();\n-    (void)connman.GetExtraOutboundCount();\n+    (void)connman.GetExtraFullOutboundCount();\n     (void)connman.GetLocalServices();\n     (void)connman.GetMaxOutboundTarget();\n     (void)connman.GetMaxOutboundTimeframe();"
      }
    ]
  },
  {
    "sha": "3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2M4YTdhMGY1ZmExODNjZDdmMGNmNWU1NmYxNmY5YTlkMWYyNDQx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-09-01T20:49:40Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-12-10T13:41:57Z"
      },
      "message": "Use conn_type to identify block-relay peers, rather than m_tx_relay == nullptr",
      "tree": {
        "sha": "34d30352ed590be09d0a8a785a9fd75a04ceb31a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34d30352ed590be09d0a8a785a9fd75a04ceb31a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d61952a82af3e8887e8ae532ecc19d87fe9073",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91d61952a82af3e8887e8ae532ecc19d87fe9073"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ffbd2c17f93ce65cd1a948bc03f8814304d54751",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
        "patch": "@@ -2466,7 +2466,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s (%s)\\n\",\n                       pfrom.nVersion.load(), pfrom.nStartingHeight,\n                       pfrom.GetId(), (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToString()) : \"\"),\n-                      pfrom.m_tx_relay == nullptr ? \"block-relay\" : \"full-relay\");\n+                      pfrom.IsBlockOnlyConn() ? \"block-relay\" : \"full-relay\");\n         }\n \n         if (pfrom.GetCommonVersion() >= SENDHEADERS_VERSION) {\n@@ -3923,13 +3923,11 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n             AssertLockHeld(::cs_main);\n \n             // Ignore non-outbound peers, or nodes marked for disconnect already\n-            if (!pnode->IsOutboundOrBlockRelayConn() || pnode->fDisconnect) return;\n+            if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;\n             CNodeState *state = State(pnode->GetId());\n             if (state == nullptr) return; // shouldn't be possible, but just in case\n             // Don't evict our protected peers\n             if (state->m_chain_sync.m_protect) return;\n-            // Don't evict our block-relay-only peers.\n-            if (pnode->m_tx_relay == nullptr) return;\n             if (state->m_last_block_announcement < oldest_block_announcement || (state->m_last_block_announcement == oldest_block_announcement && pnode->GetId() > worst_peer)) {\n                 worst_peer = pnode->GetId();\n                 oldest_block_announcement = state->m_last_block_announcement;"
      }
    ]
  },
  {
    "sha": "daffaf03fbede6c01287779e464379ee3acb005a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWZmYWYwM2ZiZWRlNmMwMTI4Nzc3OWU0NjQzNzllZTNhY2IwMDVh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-09-01T21:05:47Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-12-10T13:46:39Z"
      },
      "message": "Periodically make block-relay connections and sync headers\n\nTo make eclipse attacks more difficult, regularly initiate outbound connections\nand stay connected long enough to sync headers and potentially learn of new\nblocks. If we learn a new block, rotate out an existing block-relay peer in\nfavor of the new peer.\n\nThis augments the existing outbound peer rotation that exists -- currently we\nmake new full-relay connections when our tip is stale, which we disconnect\nafter waiting a small time to see if we learn a new block.  As block-relay\nconnections use minimal bandwidth, we can make these connections regularly and\nnot just when our tip is stale.\n\nLike feeler connections, these connections are not aggressive; whenever our\ntimer fires (once every 5 minutes on average), we'll try to initiate a new\nblock-relay connection as described, but if we fail to connect we just wait for\nour timer to fire again before repeating with a new peer.",
      "tree": {
        "sha": "106fddb539d273bed1168ccde48340f0071057d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/106fddb539d273bed1168ccde48340f0071057d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daffaf03fbede6c01287779e464379ee3acb005a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daffaf03fbede6c01287779e464379ee3acb005a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daffaf03fbede6c01287779e464379ee3acb005a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daffaf03fbede6c01287779e464379ee3acb005a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc8a7a0f5fa183cd7f0cf5e56f16f9a9d1f2441"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 111,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7cb91f13885152217d063540fdc2d17ada480452",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 2,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daffaf03fbede6c01287779e464379ee3acb005a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daffaf03fbede6c01287779e464379ee3acb005a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=daffaf03fbede6c01287779e464379ee3acb005a",
        "patch": "@@ -1841,6 +1841,20 @@ int CConnman::GetExtraFullOutboundCount()\n     return std::max(full_outbound_peers - m_max_outbound_full_relay, 0);\n }\n \n+int CConnman::GetExtraBlockRelayCount()\n+{\n+    int block_relay_peers = 0;\n+    {\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && pnode->IsBlockOnlyConn()) {\n+                ++block_relay_peers;\n+            }\n+        }\n+    }\n+    return std::max(block_relay_peers - m_max_outbound_block_relay, 0);\n+}\n+\n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n {\n     // Connect to specific addresses\n@@ -1869,6 +1883,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n \n     // Minimum time before next feeler connection (in microseconds).\n     int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n+    int64_t nNextExtraBlockRelay = PoissonNextSend(nStart*1000*1000, EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n     while (!interruptNet)\n     {\n         ProcessAddrFetch();\n@@ -1941,8 +1956,9 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // until we hit our block-relay-only peer limit.\n         // GetTryNewOutboundPeer() gets set when a stale tip is detected, so we\n         // try opening an additional OUTBOUND_FULL_RELAY connection. If none of\n-        // these conditions are met, check the nNextFeeler timer to decide if\n-        // we should open a FEELER.\n+        // these conditions are met, check to see if it's time to try an extra\n+        // block-relay-only peer (to confirm our tip is current, see below) or the nNextFeeler\n+        // timer to decide if we should open a FEELER.\n \n         if (!m_anchors.empty() && (nOutboundBlockRelay < m_max_outbound_block_relay)) {\n             conn_type = ConnectionType::BLOCK_RELAY;\n@@ -1953,6 +1969,30 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             conn_type = ConnectionType::BLOCK_RELAY;\n         } else if (GetTryNewOutboundPeer()) {\n             // OUTBOUND_FULL_RELAY\n+        } else if (nTime > nNextExtraBlockRelay && m_start_extra_block_relay_peers) {\n+            // Periodically connect to a peer (using regular outbound selection\n+            // methodology from addrman) and stay connected long enough to sync\n+            // headers, but not much else.\n+            //\n+            // Then disconnect the peer, if we haven't learned anything new.\n+            //\n+            // The idea is to make eclipse attacks very difficult to pull off,\n+            // because every few minutes we're finding a new peer to learn headers\n+            // from.\n+            //\n+            // This is similar to the logic for trying extra outbound (full-relay)\n+            // peers, except:\n+            // - we do this all the time on a poisson timer, rather than just when\n+            //   our tip is stale\n+            // - we potentially disconnect our next-youngest block-relay-only peer, if our\n+            //   newest block-relay-only peer delivers a block more recently.\n+            //   See the eviction logic in net_processing.cpp.\n+            //\n+            // Because we can promote these connections to block-relay-only\n+            // connections, they do not get their own ConnectionType enum\n+            // (similar to how we deal with extra outbound peers).\n+            nNextExtraBlockRelay = PoissonNextSend(nTime, EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n+            conn_type = ConnectionType::BLOCK_RELAY;\n         } else if (nTime > nNextFeeler) {\n             nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n             conn_type = ConnectionType::FEELER;"
      },
      {
        "sha": "41f7fa93ff86995dab11b43744d5a90b0d2b033c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daffaf03fbede6c01287779e464379ee3acb005a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daffaf03fbede6c01287779e464379ee3acb005a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=daffaf03fbede6c01287779e464379ee3acb005a",
        "patch": "@@ -48,6 +48,8 @@ static const bool DEFAULT_WHITELISTFORCERELAY = false;\n static const int TIMEOUT_INTERVAL = 20 * 60;\n /** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n static const int FEELER_INTERVAL = 120;\n+/** Run the extra block-relay-only connection loop once every 5 minutes. **/\n+static const int EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL = 300;\n /** The maximum number of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n@@ -330,13 +332,20 @@ class CConnman\n     void SetTryNewOutboundPeer(bool flag);\n     bool GetTryNewOutboundPeer();\n \n+    void StartExtraBlockRelayPeers() {\n+        LogPrint(BCLog::NET, \"net: enabling extra block-relay-only peers\\n\");\n+        m_start_extra_block_relay_peers = true;\n+    }\n+\n     // Return the number of outbound peers we have in excess of our target (eg,\n     // if we previously called SetTryNewOutboundPeer(true), and have since set\n     // to false, we may have extra peers that we wish to disconnect). This may\n     // return a value less than (num_outbound_connections - num_outbound_slots)\n     // in cases where some outbound connections are not yet fully connected, or\n     // not yet fully disconnected.\n     int GetExtraFullOutboundCount();\n+    // Count the number of block-relay-only peers we have over our limit.\n+    int GetExtraBlockRelayCount();\n \n     bool AddNode(const std::string& node);\n     bool RemoveAddedNode(const std::string& node);\n@@ -594,6 +603,12 @@ class CConnman\n      *  This takes the place of a feeler connection */\n     std::atomic_bool m_try_another_outbound_peer;\n \n+    /** flag for initiating extra block-relay-only peer connections.\n+     *  this should only be enabled after initial chain sync has occurred,\n+     *  as these connections are intended to be short-lived and low-bandwidth.\n+     */\n+    std::atomic_bool m_start_extra_block_relay_peers{false};\n+\n     std::atomic<int64_t> m_next_send_inv_to_incoming{0};\n \n     /**"
      },
      {
        "sha": "7dee2db3c862ec53336adaebee6f4fc2556c7415",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daffaf03fbede6c01287779e464379ee3acb005a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daffaf03fbede6c01287779e464379ee3acb005a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=daffaf03fbede6c01287779e464379ee3acb005a",
        "patch": "@@ -3909,9 +3909,52 @@ void PeerManager::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n \n void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n {\n+    // If we have any extra block-relay-only peers, disconnect the youngest unless\n+    // it's given us a block -- in which case, compare with the second-youngest, and\n+    // out of those two, disconnect the peer who least recently gave us a block.\n+    // The youngest block-relay-only peer would be the extra peer we connected\n+    // to temporarily in order to sync our tip; see net.cpp.\n+    // Note that we use higher nodeid as a measure for most recent connection.\n+    if (m_connman.GetExtraBlockRelayCount() > 0) {\n+        std::pair<NodeId, int64_t> youngest_peer{-1, 0}, next_youngest_peer{-1, 0};\n+\n+        m_connman.ForEachNode([&](CNode* pnode) {\n+            if (!pnode->IsBlockOnlyConn() || pnode->fDisconnect) return;\n+            if (pnode->GetId() > youngest_peer.first) {\n+                next_youngest_peer = youngest_peer;\n+                youngest_peer.first = pnode->GetId();\n+                youngest_peer.second = pnode->nLastBlockTime;\n+            }\n+        });\n+        NodeId to_disconnect = youngest_peer.first;\n+        if (youngest_peer.second > next_youngest_peer.second) {\n+            // Our newest block-relay-only peer gave us a block more recently;\n+            // disconnect our second youngest.\n+            to_disconnect = next_youngest_peer.first;\n+        }\n+        m_connman.ForNode(to_disconnect, [&](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+            AssertLockHeld(::cs_main);\n+            // Make sure we're not getting a block right now, and that\n+            // we've been connected long enough for this eviction to happen\n+            // at all.\n+            // Note that we only request blocks from a peer if we learn of a\n+            // valid headers chain with at least as much work as our tip.\n+            CNodeState *node_state = State(pnode->GetId());\n+            if (node_state == nullptr ||\n+                (time_in_seconds - pnode->nTimeConnected >= MINIMUM_CONNECT_TIME && node_state->nBlocksInFlight == 0)) {\n+                pnode->fDisconnect = true;\n+                LogPrint(BCLog::NET, \"disconnecting extra block-relay-only peer=%d (last block received at time %d)\\n\", pnode->GetId(), pnode->nLastBlockTime);\n+                return true;\n+            } else {\n+                LogPrint(BCLog::NET, \"keeping block-relay-only peer=%d chosen for eviction (connect time: %d, blocks_in_flight: %d)\\n\",\n+                    pnode->GetId(), pnode->nTimeConnected, node_state->nBlocksInFlight);\n+            }\n+            return false;\n+        });\n+    }\n+\n     // Check whether we have too many outbound peers\n-    int extra_peers = m_connman.GetExtraFullOutboundCount();\n-    if (extra_peers > 0) {\n+    if (m_connman.GetExtraFullOutboundCount() > 0) {\n         // If we have more outbound peers than we target, disconnect one.\n         // Pick the outbound peer that least recently announced\n         // us a new block, with ties broken by choosing the more recent\n@@ -3983,6 +4026,11 @@ void PeerManager::CheckForStaleTipAndEvictPeers()\n         }\n         m_stale_tip_check_time = time_in_seconds + STALE_CHECK_INTERVAL;\n     }\n+\n+    if (!m_initial_sync_finished && CanDirectFetch(m_chainparams.GetConsensus())) {\n+        m_connman.StartExtraBlockRelayPeers();\n+        m_initial_sync_finished = true;\n+    }\n }\n \n namespace {"
      },
      {
        "sha": "12a4e9c38f8ea48ab0a8ea292bccde9325d7c51a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daffaf03fbede6c01287779e464379ee3acb005a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daffaf03fbede6c01287779e464379ee3acb005a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=daffaf03fbede6c01287779e464379ee3acb005a",
        "patch": "@@ -206,6 +206,10 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     //* Whether this node is running in blocks only mode */\n     const bool m_ignore_incoming_txs;\n \n+    /** Whether we've completed initial sync yet, for determining when to turn\n+      * on extra block-relay-only peers. */\n+    bool m_initial_sync_finished{false};\n+\n     /** Protects m_peer_map */\n     mutable Mutex m_peer_mutex;\n     /**"
      }
    ]
  },
  {
    "sha": "b3a515c0bec97633a76bec101af47c3c90c0b749",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2E1MTVjMGJlYzk3NjMzYTc2YmVjMTAxYWY0N2MzYzkwYzBiNzQ5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-09-03T14:41:02Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-12-10T13:46:51Z"
      },
      "message": "Clarify comments around outbound peer eviction",
      "tree": {
        "sha": "086c9262fb0edaeb24d6033c72c7487d11b58f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/086c9262fb0edaeb24d6033c72c7487d11b58f47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3a515c0bec97633a76bec101af47c3c90c0b749",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a515c0bec97633a76bec101af47c3c90c0b749",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a515c0bec97633a76bec101af47c3c90c0b749",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a515c0bec97633a76bec101af47c3c90c0b749/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daffaf03fbede6c01287779e464379ee3acb005a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daffaf03fbede6c01287779e464379ee3acb005a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daffaf03fbede6c01287779e464379ee3acb005a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "200c286f5d7d9196347c1525d6f21227f4b3a087",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a515c0bec97633a76bec101af47c3c90c0b749/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a515c0bec97633a76bec101af47c3c90c0b749/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b3a515c0bec97633a76bec101af47c3c90c0b749",
        "patch": "@@ -3953,10 +3953,10 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         });\n     }\n \n-    // Check whether we have too many outbound peers\n+    // Check whether we have too many OUTBOUND_FULL_RELAY peers\n     if (m_connman.GetExtraFullOutboundCount() > 0) {\n-        // If we have more outbound peers than we target, disconnect one.\n-        // Pick the outbound peer that least recently announced\n+        // If we have more OUTBOUND_FULL_RELAY peers than we target, disconnect one.\n+        // Pick the OUTBOUND_FULL_RELAY peer that least recently announced\n         // us a new block, with ties broken by choosing the more recent\n         // connection (higher node id)\n         NodeId worst_peer = -1;\n@@ -3965,7 +3965,8 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         m_connman.ForEachNode([&](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n             AssertLockHeld(::cs_main);\n \n-            // Ignore non-outbound peers, or nodes marked for disconnect already\n+            // Only consider OUTBOUND_FULL_RELAY peers that are not already\n+            // marked for disconnection\n             if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;\n             CNodeState *state = State(pnode->GetId());\n             if (state == nullptr) return; // shouldn't be possible, but just in case"
      }
    ]
  }
]