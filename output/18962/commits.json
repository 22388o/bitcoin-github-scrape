[
  {
    "sha": "746736639e6d05acdb85c866d4c605c947d4c500",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDY3MzY2MzllNmQwNWFjZGI4NWM4NjZkNGM2MDVjOTQ3ZDRjNTAw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T18:18:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-12T20:29:49Z"
      },
      "message": "[net processing] Only send a getheaders for one block in an INV\n\nHeaders-first is the primary method of announcement on the network. If a\nnode fell back sending blocks by inv, it's probably for a re-org. The\nfinal block hash provided should be the highest, so send a getheaders\nand then fetch the blocks we need to catch up.",
      "tree": {
        "sha": "d987d4177d161b987f7ecf50735040e5d667a2a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d987d4177d161b987f7ecf50735040e5d667a2a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/746736639e6d05acdb85c866d4c605c947d4c500",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/746736639e6d05acdb85c866d4c605c947d4c500",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/746736639e6d05acdb85c866d4c605c947d4c500",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/746736639e6d05acdb85c866d4c605c947d4c500/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8da1e43b63cb36759eeb1fcfd6768163265c44e2"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7e9bb2f27cb92d2d2d35da29bb31d5b548b7e51c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/746736639e6d05acdb85c866d4c605c947d4c500/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/746736639e6d05acdb85c866d4c605c947d4c500/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=746736639e6d05acdb85c866d4c605c947d4c500",
        "patch": "@@ -2420,6 +2420,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n         const auto current_time = GetTime<std::chrono::microseconds>();\n+        uint256* best_block{nullptr};\n \n         for (CInv &inv : vInv)\n         {\n@@ -2436,17 +2437,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n-                    // We used to request the full block here, but since headers-announcements are now the\n-                    // primary method of announcement on the network, and since, in the case that a node\n-                    // fell back to inv we probably have a reorg which we should get the headers for first,\n-                    // we now only provide a getheaders response here. When we receive the headers, we will\n-                    // then ask for the blocks we need.\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), inv.hash));\n-                    LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n+                    // Headers-first is the primary method of announcement on\n+                    // the network. If a node fell back to sending blocks by inv,\n+                    // it's probably for a re-org. The final block hash\n+                    // provided should be the highest, so send a getheaders and\n+                    // then fetch the blocks we need to catch up.\n+                    best_block = &inv.hash;\n                 }\n-            }\n-            else\n-            {\n+            } else {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n@@ -2457,6 +2455,12 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 }\n             }\n         }\n+\n+        if (best_block != nullptr) {\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), *best_block));\n+            LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, best_block->ToString(), pfrom->GetId());\n+        }\n+\n         return true;\n     }\n "
      }
    ]
  }
]