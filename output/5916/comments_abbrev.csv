laanwj,2015-03-18T12:35:25Z,"Remembering where a key comes from, yeah, why not.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-82950595,82950595,
laanwj,2015-03-18T12:37:15Z,"""generationtype"" may not be the best name though; we also have ""generated"" for wallet transactions that shows whether the coins were mined.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-82951003,82951003,
jonasschnelli,2015-03-18T13:20:07Z,What about using `keyGenerationType`?\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-82967361,82967361,
laanwj,2015-03-18T13:24:29Z,"key_generation_type then, we don't tend to use lowerCamelCase in RPC\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-82968728,82968728,
jonasschnelli,2015-03-18T13:30:13Z,Right.\nChanged and pushed.\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-82971389,82971389,
laanwj,2015-03-20T08:37:18Z,"Hm, one thought: Would the resulting wallet still be backwards compatible?\nWe have a versioning/upgrade system for wallets, not sure if it should be used here.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-83956957,83956957,
jonasschnelli,2015-03-20T09:02:27Z,Good point. I'll have to check/test the backward compatibility. I'm not sure what happens to the deserialization when there are one additional byte at the end.\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-83959645,83959645,
jonasschnelli,2015-03-20T10:20:39Z,"It's backward and forward compatible.\nTested.\n\nThe 1byte flag added at the end of the CKeyMetadata serialization stream will be ignored when running (old) master-branch. Using a ""new"" wallet on a ""old"" bitcoind will still keep the key generation data because Metadata is somehow immutable (will only be created/changes when a key gets generated).\nAlso testes with a full keypool generated with ""k",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-83980596,83980596,
laanwj,2015-03-24T16:39:08Z,"SGTM, utACK\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-85591673,85591673,
luke-jr,2015-06-02T01:47:39Z,"I don't understand the term ""generation"" in this context.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-107770407,107770407,
jonasschnelli,2015-06-02T19:06:23Z,"@luke-jr: ""generation"" was the best i could find. What would you prefer (maybe something like ""Key generation environment"" or ""key generation security context"")?\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-108059125,108059125,
luke-jr,2015-06-24T05:17:46Z,"""origin"" perhaps.\n\nAlso, this is lacking -upgradewallet logic. Even if old versions can handle it, third-party software might not.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-114729987,114729987,
jonasschnelli,2015-06-24T07:15:43Z,"@luke-jr: right, it missed the `-upgradewallet` approach. I aim for including the key origin/generation type in the new wallet.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-114757465,114757465,
jonasschnelli,2015-06-24T07:55:32Z,Renamed to key origin and added wallet new wallet feature level 70000\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-114770668,114770668,
jgarzik,2015-09-15T18:12:43Z,concept and code review ACK\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-140487308,140487308,
dcousens,2015-09-16T07:06:44Z,"NACK on the bit flag,  concept ACK on the general idea (tracking private key origin).\nAn enumeration sounds fine.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-140650350,140650350,
jonasschnelli,2015-09-16T13:17:24Z,"@dcousens: i really like the idea of bit flags. IMO it is flexible, it could indicate different things like if a key was generated deterministic after bip32, etc. What are the downsides of the bit flags compared to a enum/int?\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-140739489,140739489,
dcousens,2015-09-16T14:44:51Z,"@jonasschnelli I'd go so far to say that this could be user defined,  as even a `string` type might be suitable.\nThe bit flag idea seems very isolated and only useful for very specific applications.\n\nI don't really have a strong opinion either way on this,  did you have a use case in mind?\n\n**edit**: in terms of https://github.com/bitcoin/bitcoin/issues/3314,  a bit flag would make sense.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-140763190,140763190,
laanwj,2015-09-24T13:18:44Z,"I'd disagree with using a string type. It uses more memory and disk space (this is per key!), and is also worst for anything machine-understandable.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-142924460,142924460,
jonasschnelli,2015-09-24T14:51:37Z,"Rebased and replace the 8bit bitfield with a 32bit bitfield, also removed the ""unset"" keyflag.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-142952415,142952415,
luke-jr,2015-10-23T02:23:35Z,"How will this top commit affect wallets with top-minus-one keyFlags? Bitcoin LJR includes the previous semantics, and it would be nice not to break loading such wallets. Maybe the wallet version can be bumped one to handle that case?\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-150414827,150414827,
jonasschnelli,2015-10-23T06:55:47Z,"@luke-jr: hmm.. yes. This would be required unless we want to break LJR 0.11 wallets. I have plans to update this PR, but it will take some weeks (this PR has low prio). If anyone likes to take this over: go ahead.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-150491978,150491978,
laanwj,2016-02-10T11:39:16Z,"> Rebased and replace the 8bit bitfield with a 32bit bitfield, also removed the ""unset"" keyflag.\n\nThat's better.\nConcept ACK.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-182326724,182326724,
btcdrak,2016-04-05T14:28:50Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-205833455,205833455,
jonasschnelli,2016-07-20T13:06:09Z,Do we really need a minVersionBump for this change?\nThis PRs minVersionBump to 70000 is kinda senseless.\n\nWhat about just detecting the change in the deserialization code?\nI guess every useable deserialization code (assume third party apps) can handle this.\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-233942917,233942917,
luke-jr,2016-07-20T17:25:10Z,"Well, we don't want to add data unless the user upgrades their wallet explicitly (or makes a new one) either.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-234019663,234019663,
jonasschnelli,2016-07-20T18:45:17Z,"> Well, we don't want to add data unless the user upgrades their wallet explicitly (or makes a new one) either.\n\nBut this would make the upgraded wallet no longer work with older versions of bitcoin-core (<0.13 if we would merge this for 0.13) even with the fact that older version _are capable_ of handling the changed/new CKeyMetadata format. This sounds inefficient to me.\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-234043396,234043396,
luke-jr,2016-07-20T22:21:16Z,"Won't old versions currently strip off the key origin data, even if they load the wallet itself okay?\n",https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-234101876,234101876,
jonasschnelli,2016-08-09T12:56:51Z,Closing in favor of https://github.com/bitcoin/bitcoin/pull/8471\n,https://github.com/bitcoin/bitcoin/pull/5916#issuecomment-238544059,238544059,
luke-jr,2015-06-02T01:46:33Z,Why are these 16-bit hex numbers for an 8-bit type?\n,https://github.com/bitcoin/bitcoin/pull/5916#discussion_r31487702,31487702,src/wallet/walletdb.h
jonasschnelli,2015-06-02T19:12:10Z,Yes. This is wrong. Changed and pushed.\n,https://github.com/bitcoin/bitcoin/pull/5916#discussion_r31559710,31559710,src/wallet/walletdb.h
luke-jr,2015-07-11T07:14:15Z,"Shouldn't this be used for actually unknown origins (eg, 0 or no-known-bits-set)?\n",https://github.com/bitcoin/bitcoin/pull/5916#discussion_r34410472,34410472,src/wallet/rpcwallet.cpp
jonasschnelli,2015-07-11T07:24:14Z,Yes. Agree with you. I will change this to not only holding KEY_ORIGIN within the flags... update is on the way.\n,https://github.com/bitcoin/bitcoin/pull/5916#discussion_r34410566,34410566,src/wallet/rpcwallet.cpp
laanwj,2015-07-21T10:56:42Z,"I don't understand why you're using a bitfield here instead of an enumeration. Do combinations of these ever happen? In `rpcwallet.cpp` you squash it to one ""enum"" anyway.\n(or is eg IMPORTED ENC used to signify that the key was imported while the wallet was encrypted? If so, the rpc should probably return a list of flag strings instead of one string)\n",https://github.com/bitcoin/bitcoin/pull/5916#discussion_r35090687,35090687,src/wallet/walletdb.h
jonasschnelli,2015-07-21T12:29:52Z,"At this point, it is probably the right approach (to use bitfield). It would mean to be extendable because it is a serialized and database stored uint8. Combinations should be possible.\nBut i agree that the `rpcwallet.cpp` part should be better. Will take a look at it.\n",https://github.com/bitcoin/bitcoin/pull/5916#discussion_r35096231,35096231,src/wallet/walletdb.h
laanwj,2015-07-21T12:38:40Z,"But an enumeration is extensible too, by adding entries. You could say that a bitfield limits extensibility as -at most- 8 flags are possible, whereas an enumeration allows for 256 discrete options in the same space.\nUnless combinations are meaningful, there is no need to use a bitfield.\nBut I don't care deeply. It just seems weird, especially to have both an ENC and UNENC flag, they conflict)\n",https://github.com/bitcoin/bitcoin/pull/5916#discussion_r35096823,35096823,src/wallet/walletdb.h
jonasschnelli,2015-07-21T12:44:29Z,"The main idea was to allow multiple key flags. Like (`imported`) AND (`encrypted` OR `unencrypted`) or potential new key flags like (`UI` OR `RPC` together with AND's above).\nI just thought when changing the database model, do it right and flexible.\n",https://github.com/bitcoin/bitcoin/pull/5916#discussion_r35097193,35097193,src/wallet/walletdb.h
laanwj,2015-07-21T13:05:00Z,"That idea is good, but you're burning flags! You have only 8! At the least get rid of `UNKNOWN` as a flag, !x already implies that.\n",https://github.com/bitcoin/bitcoin/pull/5916#discussion_r35098816,35098816,src/wallet/walletdb.h
jonasschnelli,2015-07-21T13:06:05Z,Yeah. Agreed. Will remove it.\n,https://github.com/bitcoin/bitcoin/pull/5916#discussion_r35098916,35098916,src/wallet/walletdb.h
