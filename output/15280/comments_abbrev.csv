jonasschnelli,2019-01-29T20:36:40Z,utACK 870e35c30c0286e729a55fc343ab9b1945619699,https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-458697392,458697392,
hebasto,2019-01-30T07:32:27Z,tACK 870e35c30c0286e729a55fc343ab9b1945619699 (Linux) modulo https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251922336 and https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252140382.,https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-458841163,458841163,
Empact,2019-01-30T18:13:01Z,"This could benefit from adding ""why"" to each commit message, which currently only describe what is done. Will be easier to evaluate now and interpret in the future with that info.",https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-459049587,459049587,
promag,2019-01-30T23:02:55Z,"Improved each commit message (hope it is now more clear).\n\nA good test case to check with and without this PR is:\n 1. add a MilliSleep to the rescan loop, after the while:\nhttps://github.com/bitcoin/bitcoin/blob/cb77dc820f1bc1965a9d40759feb201d7869cfa9/src/wallet/wallet.cpp#L1659-L1660\n 2. launch with `-nowallet -rescan`\n 3. call `loadwallet a_wallet_with_some_transactions` in the cons",https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-459145629,459145629,
DrahtBot,2019-01-31T01:04:16Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15153](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15153.html) (gui: Add Open Wallet menu by promag)\n\nIf ",https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-459173788,459173788,
Empact,2019-01-31T19:59:50Z,"utACK https://github.com/bitcoin/bitcoin/pull/15280/commits/0b53bf94d30d1a90770a86c89b97de929b0ffc27\n\nThanks for expanding those commit messages. Should we also guard in `RegisterValidationInterface`? It's the only other unguarded access to `g_signals.m_internals`.",https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-459484759,459484759,
promag,2019-02-01T07:39:50Z,@Empact different PR IMO. I had a commit to guard it with `cs_main` but removed since it's not GUI related.,https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-459634227,459634227,
laanwj,2019-02-04T09:49:25Z,utACK 0dd6a8c12489ea4428b398a2328dde5d1a9fe39b,https://github.com/bitcoin/bitcoin/pull/15280#issuecomment-460186688,460186688,
Sjors,2019-01-29T16:52:26Z,"Can you explain this move, either in a comment or in the commit message?",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251921435,251921435,src/qt/bitcoin.cpp
Sjors,2019-01-29T16:54:32Z,"Nit: might as well merge this with the next commit, which explains _why_ this exposure is needed..",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251922336,251922336,src/qt/bitcoingui.h
Sjors,2019-01-29T16:56:34Z,Can you explain why you moved `startShutdown();` up? Is it because `setClientModel` could be blocking and so you can to get this over with first?,https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251923247,251923247,src/qt/bitcoin.cpp
promag,2019-01-29T17:40:04Z,"Calling `setClientModel(nullptr)` hits:\nhttps://github.com/bitcoin/bitcoin/blob/7275365c9bc7e7ebd6bbf7dcb251946aac44b5de/src/qt/rpcconsole.cpp#L688-L692\n\nand if there is a rescan in progress it blocks until the rescan completes. Calling `m_node.startShutdown();` causes the rescan to interrupt.",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251941137,251941137,src/qt/bitcoin.cpp
promag,2019-01-29T17:41:51Z,The `m_wallet_controller` must be deleted after `window` (because it's used there).,https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251941786,251941786,src/qt/bitcoin.cpp
Sjors,2019-01-29T18:17:23Z,"Thanks. I meant in a source code comment though :-) The shutdown logic keeps causing headaches, so there's no such thing as too much documentation I think. ",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r251955049,251955049,src/qt/bitcoin.cpp
promag,2019-01-29T21:43:10Z,"I'll add if I need to update this branch for other reasons, otherwise I'll improve the shutdown even further with more comments. From testing this is enough to get #15153 working without problems.",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252029806,252029806,src/qt/bitcoin.cpp
hebasto,2019-01-30T07:24:43Z,"Could be\n```\n    if (g_signals.m_internals) {\n        g_signals.m_internals->m_connMainSignals.erase(pwalletIn);\n    }\n```",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252140382,252140382,src/validationinterface.cpp
promag,2019-01-30T07:37:25Z,I think it's good to have move only separate?,https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252142950,252142950,src/qt/bitcoingui.h
promag,2019-01-30T07:39:39Z,"Yes, but in other function it also early returns. Also, if the condition is removed the code doesn't have to be re-indent.",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252143439,252143439,src/validationinterface.cpp
hebasto,2019-01-30T07:46:08Z,"Checking a pointer variable before use is a general pattern, right? Why could it be removed?",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252144753,252144753,src/validationinterface.cpp
promag,2019-01-30T22:54:30Z,Changed to your suggestion.,https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252472317,252472317,src/validationinterface.cpp
Empact,2019-01-31T19:55:22Z,"I like to combine exposing a new interface with adding uses for it - I think of it as an expression of the outside-in development principle, the use comes before the changes it motivates/justifies.",https://github.com/bitcoin/bitcoin/pull/15280#discussion_r252816938,252816938,src/qt/bitcoingui.h
