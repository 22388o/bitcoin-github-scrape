[
  {
    "sha": "483a3bd63ea698f2d1b0d1adc4064e4726894a98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODNhM2JkNjNlYTY5OGYyZDFiMGQxYWRjNDA2NGU0NzI2ODk0YTk4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-05-27T12:45:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-05-27T12:45:24Z"
      },
      "message": "Backport to wx2.8 and dynamically link most libs.\n\nLibs should never be statically linked unless there is a clear\nreason, also, wx2.8 should have been used to begin with, a\ndevelopment release should not be used for release software.",
      "tree": {
        "sha": "25dccbb48dda39666ee4ef7c3010494edfb513d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25dccbb48dda39666ee4ef7c3010494edfb513d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/483a3bd63ea698f2d1b0d1adc4064e4726894a98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483a3bd63ea698f2d1b0d1adc4064e4726894a98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/483a3bd63ea698f2d1b0d1adc4064e4726894a98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483a3bd63ea698f2d1b0d1adc4064e4726894a98/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a452d9ee2dea7e606ec102b0a1a411da4e5e5a91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a452d9ee2dea7e606ec102b0a1a411da4e5e5a91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a452d9ee2dea7e606ec102b0a1a411da4e5e5a91"
      }
    ],
    "stats": {
      "total": 616,
      "additions": 328,
      "deletions": 288
    },
    "files": [
      {
        "sha": "3c2799660fb9e4d81d375be1574759149b007730",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -137,60 +137,60 @@ bool AppInit2(int argc, char* argv[])\n \n     if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n     {\n-        string beta = VERSION_IS_BETA ? _(\" beta\") : \"\";\n+        string beta = VERSION_IS_BETA ? GetTranslationString(\" beta\") : \"\";\n         string strUsage = string() +\n-          _(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-          _(\"Usage:\") + \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\" +\n+          GetTranslationString(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+          GetTranslationString(\"Usage:\") + \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\" +\n             \"  bitcoin [options]                   \\t  \" + \"\\n\" +\n-            \"  bitcoin [options] <command> [params]\\t  \" + _(\"Send command to -server or bitcoind\\n\") +\n-            \"  bitcoin [options] help              \\t\\t  \" + _(\"List commands\\n\") +\n-            \"  bitcoin [options] help <command>    \\t\\t  \" + _(\"Get help for a command\\n\") +\n-          _(\"Options:\\n\") +\n-            \"  -conf=<file>     \\t\\t  \" + _(\"Specify configuration file (default: bitcoin.conf)\\n\") +\n-            \"  -pid=<file>      \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\\n\") +\n-            \"  -gen             \\t\\t  \" + _(\"Generate coins\\n\") +\n-            \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\\n\") +\n-            \"  -min             \\t\\t  \" + _(\"Start minimized\\n\") +\n-            \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\\n\") +\n-            \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n-            \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\\n\") +\n-            \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n-            \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\\n\") +\n-            \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\\n\") +\n+            \"  bitcoin [options] <command> [params]\\t  \" + GetTranslationString(\"Send command to -server or bitcoind\\n\") +\n+            \"  bitcoin [options] help              \\t\\t  \" + GetTranslationString(\"List commands\\n\") +\n+            \"  bitcoin [options] help <command>    \\t\\t  \" + GetTranslationString(\"Get help for a command\\n\") +\n+          GetTranslationString(\"Options:\\n\") +\n+            \"  -conf=<file>     \\t\\t  \" + GetTranslationString(\"Specify configuration file (default: bitcoin.conf)\\n\") +\n+            \"  -pid=<file>      \\t\\t  \" + GetTranslationString(\"Specify pid file (default: bitcoind.pid)\\n\") +\n+            \"  -gen             \\t\\t  \" + GetTranslationString(\"Generate coins\\n\") +\n+            \"  -gen=0           \\t\\t  \" + GetTranslationString(\"Don't generate coins\\n\") +\n+            \"  -min             \\t\\t  \" + GetTranslationString(\"Start minimized\\n\") +\n+            \"  -datadir=<dir>   \\t\\t  \" + GetTranslationString(\"Specify data directory\\n\") +\n+            \"  -proxy=<ip:port> \\t  \"   + GetTranslationString(\"Connect through socks4 proxy\\n\") +\n+            \"  -dns             \\t  \"   + GetTranslationString(\"Allow DNS lookups for addnode and connect\\n\") +\n+            \"  -addnode=<ip>    \\t  \"   + GetTranslationString(\"Add a node to connect to\\n\") +\n+            \"  -connect=<ip>    \\t\\t  \" + GetTranslationString(\"Connect only to the specified node\\n\") +\n+            \"  -nolisten        \\t  \"   + GetTranslationString(\"Don't accept connections from outside\\n\") +\n #ifdef USE_UPNP\n #if USE_UPNP\n-            \"  -noupnp          \\t  \"   + _(\"Don't attempt to use UPnP to map the listening port\\n\") +\n+            \"  -noupnp          \\t  \"   + GetTranslationString(\"Don't attempt to use UPnP to map the listening port\\n\") +\n #else\n-            \"  -upnp            \\t  \"   + _(\"Attempt to use UPnP to map the listening port\\n\") +\n+            \"  -upnp            \\t  \"   + GetTranslationString(\"Attempt to use UPnP to map the listening port\\n\") +\n #endif\n #endif\n-            \"  -paytxfee=<amt>  \\t  \"   + _(\"Fee per KB to add to transactions you send\\n\") +\n+            \"  -paytxfee=<amt>  \\t  \"   + GetTranslationString(\"Fee per KB to add to transactions you send\\n\") +\n #ifdef GUI\n-            \"  -server          \\t\\t  \" + _(\"Accept command line and JSON-RPC commands\\n\") +\n+            \"  -server          \\t\\t  \" + GetTranslationString(\"Accept command line and JSON-RPC commands\\n\") +\n #endif\n #ifndef __WXMSW__\n-            \"  -daemon          \\t\\t  \" + _(\"Run in the background as a daemon and accept commands\\n\") +\n+            \"  -daemon          \\t\\t  \" + GetTranslationString(\"Run in the background as a daemon and accept commands\\n\") +\n #endif\n-            \"  -testnet         \\t\\t  \" + _(\"Use the test network\\n\") +\n-            \"  -rpcuser=<user>  \\t  \"   + _(\"Username for JSON-RPC connections\\n\") +\n-            \"  -rpcpassword=<pw>\\t  \"   + _(\"Password for JSON-RPC connections\\n\") +\n-            \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n-            \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n-            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n-            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n-            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n+            \"  -testnet         \\t\\t  \" + GetTranslationString(\"Use the test network\\n\") +\n+            \"  -rpcuser=<user>  \\t  \"   + GetTranslationString(\"Username for JSON-RPC connections\\n\") +\n+            \"  -rpcpassword=<pw>\\t  \"   + GetTranslationString(\"Password for JSON-RPC connections\\n\") +\n+            \"  -rpcport=<port>  \\t\\t  \" + GetTranslationString(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n+            \"  -rpcallowip=<ip> \\t\\t  \" + GetTranslationString(\"Allow JSON-RPC connections from specified IP address\\n\") +\n+            \"  -rpcconnect=<ip> \\t  \"   + GetTranslationString(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n+            \"  -keypool=<n>     \\t  \"   + GetTranslationString(\"Set key pool size to <n> (default: 100)\\n\") +\n+            \"  -rescan          \\t  \"   + GetTranslationString(\"Rescan the block chain for missing wallet transactions\\n\");\n \n #ifdef USE_SSL\n         strUsage += string() +\n-            _(\"\\nSSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\") +\n-            \"  -rpcssl                                \\t  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\\n\") +\n-            \"  -rpcsslcertificatechainfile=<file.cert>\\t  \" + _(\"Server certificate file (default: server.cert)\\n\") +\n-            \"  -rpcsslprivatekeyfile=<file.pem>       \\t  \" + _(\"Server private key (default: server.pem)\\n\") +\n-            \"  -rpcsslciphers=<ciphers>               \\t  \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\");\n+            GetTranslationString(\"\\nSSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\") +\n+            \"  -rpcssl                                \\t  \" + GetTranslationString(\"Use OpenSSL (https) for JSON-RPC connections\\n\") +\n+            \"  -rpcsslcertificatechainfile=<file.cert>\\t  \" + GetTranslationString(\"Server certificate file (default: server.cert)\\n\") +\n+            \"  -rpcsslprivatekeyfile=<file.pem>       \\t  \" + GetTranslationString(\"Server private key (default: server.pem)\\n\") +\n+            \"  -rpcsslciphers=<ciphers>               \\t  \" + GetTranslationString(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\");\n #endif\n \n         strUsage += string() +\n-            \"  -?               \\t\\t  \" + _(\"This help message\\n\");\n+            \"  -?               \\t\\t  \" + GetTranslationString(\"This help message\\n\");\n \n #if defined(__WXMSW__) && defined(GUI)\n         // Tabs make the columns line up in the message box\n@@ -266,9 +266,9 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     printf(\"Bitcoin version %s\\n\", FormatFullVersion().c_str());\n #ifdef GUI\n-    printf(\"OS version %s\\n\", ((string)wxGetOsDescription()).c_str());\n-    printf(\"System default language is %d %s\\n\", g_locale.GetSystemLanguage(), ((string)g_locale.GetSysName()).c_str());\n-    printf(\"Language file %s (%s)\\n\", (string(\"locale/\") + (string)g_locale.GetCanonicalName() + \"/LC_MESSAGES/bitcoin.mo\").c_str(), ((string)g_locale.GetLocale()).c_str());\n+    printf(\"OS version %s\\n\", ((string)wxGetOsDescription().mb_str()).c_str());\n+    printf(\"System default language is %d %s\\n\", g_locale.GetSystemLanguage(), ((string)g_locale.GetSysName().mb_str()).c_str());\n+    printf(\"Language file %s (%s)\\n\", (string(\"locale/\") + (string)g_locale.GetCanonicalName().mb_str() + \"/LC_MESSAGES/bitcoin.mo\").c_str(), ((string)((wxString)g_locale.GetLocale()).mb_str()).c_str());\n #endif\n     printf(\"Default data directory %s\\n\", GetDefaultDataDir().c_str());\n \n@@ -327,7 +327,7 @@ bool AppInit2(int argc, char* argv[])\n     static boost::interprocess::file_lock lock(strLockFile.c_str());\n     if (!lock.try_lock())\n     {\n-        wxMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str()), \"Bitcoin\");\n+        wxMessageBox(GetWXOrStdString(strprintf(GetTranslationChar(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str())), _T(\"Bitcoin\"));\n         return false;\n     }\n \n@@ -337,7 +337,7 @@ bool AppInit2(int argc, char* argv[])\n     {\n         if (!BindListenPort(strErrors))\n         {\n-            wxMessageBox(strErrors, \"Bitcoin\");\n+            wxMessageBox(GetWXOrStdString(strErrors), _T(\"Bitcoin\"));\n             return false;\n         }\n     }\n@@ -353,20 +353,20 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"Loading addresses...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadAddresses())\n-        strErrors += _(\"Error loading addr.dat      \\n\");\n+        strErrors += GetTranslationString(\"Error loading addr.dat      \\n\");\n     printf(\" addresses   %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadBlockIndex())\n-        strErrors += _(\"Error loading blkindex.dat      \\n\");\n+        strErrors += GetTranslationString(\"Error loading blkindex.dat      \\n\");\n     printf(\" block index %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     printf(\"Loading wallet...\\n\");\n     nStart = GetTimeMillis();\n     bool fFirstRun;\n     if (!LoadWallet(fFirstRun))\n-        strErrors += _(\"Error loading wallet.dat      \\n\");\n+        strErrors += GetTranslationString(\"Error loading wallet.dat      \\n\");\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     CBlockIndex *pindexRescan = pindexBest;\n@@ -399,7 +399,7 @@ bool AppInit2(int argc, char* argv[])\n \n     if (!strErrors.empty())\n     {\n-        wxMessageBox(strErrors, \"Bitcoin\", wxOK | wxICON_ERROR);\n+        wxMessageBox(GetWXOrStdString(strErrors), _T(\"Bitcoin\"), wxOK | wxICON_ERROR);\n         return false;\n     }\n \n@@ -446,7 +446,7 @@ bool AppInit2(int argc, char* argv[])\n         addrProxy = CAddress(mapArgs[\"-proxy\"]);\n         if (!addrProxy.IsValid())\n         {\n-            wxMessageBox(_(\"Invalid -proxy address\"), \"Bitcoin\");\n+            wxMessageBox(_(\"Invalid -proxy address\"), _T(\"Bitcoin\"));\n             return false;\n         }\n     }\n@@ -469,11 +469,11 @@ bool AppInit2(int argc, char* argv[])\n     {\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n         {\n-            wxMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), \"Bitcoin\");\n+            wxMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), _T(\"Bitcoin\"));\n             return false;\n         }\n         if (nTransactionFee > 0.25 * COIN)\n-            wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+            wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), _T(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION);\n     }\n \n     if (fHaveUPnP)\n@@ -501,7 +501,7 @@ bool AppInit2(int argc, char* argv[])\n     RandAddSeedPerfmon();\n \n     if (!CreateThread(StartNode, NULL))\n-        wxMessageBox(\"Error: CreateThread(StartNode) failed\", \"Bitcoin\");\n+        wxMessageBox(_T(\"Error: CreateThread(StartNode) failed\"), _T(\"Bitcoin\"));\n \n     if (fServer)\n         CreateThread(ThreadRPCServer, NULL);"
      },
      {
        "sha": "417111ad15af92efedcb18c1f31e78e9c003f931",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -1863,7 +1863,7 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n     if (nFreeBytesAvailable < (uint64)15000000 + nAdditionalBytes)\n     {\n         fShutdown = true;\n-        string strMessage = _(\"Warning: Disk space is low  \");\n+        string strMessage = GetTranslationString(\"Warning: Disk space is low  \");\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n         ThreadSafeMessageBox(strMessage, \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n@@ -3987,18 +3987,18 @@ string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAs\n     {\n         string strError;\n         if (nValue + nFeeRequired > GetBalance())\n-            strError = strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n+            strError = strprintf(GetTranslationChar(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n         else\n-            strError = _(\"Error: Transaction creation failed  \");\n+            strError = GetTranslationString(\"Error: Transaction creation failed  \");\n         printf(\"SendMoney() : %s\", strError.c_str());\n         return strError;\n     }\n \n-    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), NULL))\n+    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, GetTranslationString(\"Sending...\"), NULL))\n         return \"ABORTED\";\n \n     if (!CommitTransaction(wtxNew, reservekey))\n-        return _(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+        return GetTranslationString(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n \n     MainFrameRepaint();\n     return \"\";\n@@ -4011,14 +4011,14 @@ string SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtx\n {\n     // Check amount\n     if (nValue <= 0)\n-        return _(\"Invalid amount\");\n+        return GetTranslationString(\"Invalid amount\");\n     if (nValue + nTransactionFee > GetBalance())\n-        return _(\"Insufficient funds\");\n+        return GetTranslationString(\"Insufficient funds\");\n \n     // Parse bitcoin address\n     CScript scriptPubKey;\n     if (!scriptPubKey.SetBitcoinAddress(strAddress))\n-        return _(\"Invalid bitcoin address\");\n+        return GetTranslationString(\"Invalid bitcoin address\");\n \n     return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n }"
      },
      {
        "sha": "6b270173bf7292510b7dce831fd5496e547bc1da",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -12,32 +12,33 @@ USE_UPNP:=0\n \n DEFS=-DNOPCH -DFOURWAYSSE2 -DUSE_SSL\n \n-# for boost 1.37, add -mt to the boost libraries\n+# static link crypto, as some distros rip out the ec crypto that we depend on\n LIBS= \\\n  -Wl,-Bstatic \\\n-   -l boost_system \\\n-   -l boost_filesystem \\\n-   -l boost_program_options \\\n-   -l boost_thread \\\n-   -l db_cxx \\\n-   -l ssl \\\n    -l crypto\n \n+# static link miniupnpc as most distros do not ship it\n ifdef USE_UPNP\n \tLIBS += -l miniupnpc\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+# for boost 1.37, add -mt to the boost libraries\n LIBS+= \\\n  -Wl,-Bdynamic \\\n    -l gthread-2.0 \\\n    -l z \\\n    -l dl \\\n-   -l pthread\n-\n+   -l pthread \\\n+   -l boost_system \\\n+   -l boost_filesystem \\\n+   -l boost_program_options \\\n+   -l boost_thread \\\n+   -l db_cxx \\\n+   -l ssl\n \n DEBUGFLAGS=-g -D__WXDEBUG__\n-CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n+CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEFS)\n HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n     script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h\n "
      },
      {
        "sha": "128f9d0beb1fb7e2d248f6cb1bac9005032e12a7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -1500,7 +1500,7 @@ bool BindListenPort(string& strError)\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"), ntohs(sockaddr.sin_port));\n+            strError = strprintf(GetTranslationChar(\"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"), ntohs(sockaddr.sin_port));\n         else\n             strError = strprintf(\"Error: Unable to bind to port %d on this computer (bind returned error %d)\", ntohs(sockaddr.sin_port), nErr);\n         printf(\"%s\\n\", strError.c_str());"
      },
      {
        "sha": "9d32f9ff182b9d04e7db2103310fa2c01512fe5f",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -1799,11 +1799,11 @@ void ThreadRPCServer2(void* parg)\n     {\n         string strWhatAmI = \"To use bitcoind\";\n         if (mapArgs.count(\"-server\"))\n-            strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");\n+            strWhatAmI = strprintf(GetTranslationChar(\"To use the %s option\"), \"\\\"-server\\\"\");\n         else if (mapArgs.count(\"-daemon\"))\n-            strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-daemon\\\"\");\n+            strWhatAmI = strprintf(GetTranslationChar(\"To use the %s option\"), \"\\\"-daemon\\\"\");\n         PrintConsole(\n-            _(\"Warning: %s, you must set rpcpassword=<password>\\nin the configuration file: %s\\n\"\n+            GetTranslationChar(\"Warning: %s, you must set rpcpassword=<password>\\nin the configuration file: %s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"),\n                 strWhatAmI.c_str(),\n                 GetConfigFile().c_str());\n@@ -1971,7 +1971,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n {\n     if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n         throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+            GetTranslationChar(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n                 GetConfigFile().c_str()));\n "
      },
      {
        "sha": "19aed75cc79317d25030c58a5570ceaf46400dd2",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 204,
        "deletions": 197,
        "changes": 401,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -59,17 +59,17 @@ bool Is24HourTime()\n string DateStr(int64 nTime)\n {\n     // Can only be used safely here in the UI\n-    return (string)wxDateTime((time_t)nTime).FormatDate();\n+    return string(wxDateTime((time_t)nTime).FormatDate().mb_str());\n }\n \n string DateTimeStr(int64 nTime)\n {\n     // Can only be used safely here in the UI\n     wxDateTime datetime((time_t)nTime);\n     if (Is24HourTime())\n-        return (string)datetime.Format(\"%x %H:%M\");\n+        return string(datetime.Format(_T(\"%x %H:%M\")).mb_str());\n     else\n-        return (string)datetime.Format(\"%x \") + itostr((datetime.GetHour() + 11) % 12 + 1) + (string)datetime.Format(\":%M %p\");\n+        return string(datetime.Format(_T(\"%x \")).mb_str()) + itostr((datetime.GetHour() + 11) % 12 + 1) + string(datetime.Format(_T(\":%M %p\")).mb_str());\n }\n \n wxString GetItemText(wxListCtrl* listCtrl, int nIndex, int nColumn)\n@@ -80,7 +80,7 @@ wxString GetItemText(wxListCtrl* listCtrl, int nIndex, int nColumn)\n     item.m_col = nColumn;\n     item.m_mask = wxLIST_MASK_TEXT;\n     if (!listCtrl->GetItem(item))\n-        return \"\";\n+        return _T(\"\");\n     return item.GetText();\n }\n \n@@ -178,18 +178,18 @@ string HtmlEscape(const string& str, bool fMultiLine=false)\n \n void CalledMessageBox(const string& message, const string& caption, int style, wxWindow* parent, int x, int y, int* pnRet, bool* pfDone)\n {\n-    *pnRet = wxMessageBox(message, caption, style, parent, x, y);\n+    *pnRet = wxMessageBox(wxString(message.c_str(), wxConvUTF8), wxString(caption.c_str(), wxConvUTF8), style, parent, x, y);\n     *pfDone = true;\n }\n \n int ThreadSafeMessageBox(const string& message, const string& caption, int style, wxWindow* parent, int x, int y)\n {\n #ifdef __WXMSW__\n-    return wxMessageBox(message, caption, style, parent, x, y);\n+    return wxMessageBox(wxString(message.c_str(), wxConvUTF8), wxString(caption.c_str(), wxConvUTF8), style, parent, x, y);\n #else\n     if (wxThread::IsMain() || fDaemon)\n     {\n-        return wxMessageBox(message, caption, style, parent, x, y);\n+        return wxMessageBox(wxString(message.c_str(), wxConvUTF8), wxString(caption.c_str(), wxConvUTF8), style, parent, x, y);\n     }\n     else\n     {\n@@ -208,7 +208,7 @@ bool ThreadSafeAskFee(int64 nFeeRequired, const string& strCaption, wxWindow* pa\n     if (nFeeRequired < MIN_TX_FEE || nFeeRequired <= nTransactionFee || fDaemon)\n         return true;\n     string strMessage = strprintf(\n-        _(\"This transaction is over the size limit.  You can still send it for a fee of %s, \"\n+        GetTranslationChar(\"This transaction is over the size limit.  You can still send it for a fee of %s, \"\n           \"which goes to the nodes that process your transaction and helps to support the network.  \"\n           \"Do you want to pay the fee?\"),\n         FormatMoney(nFeeRequired).c_str());\n@@ -220,23 +220,23 @@ void CalledSetStatusBar(const string& strText, int nField)\n     if (nField == 0 && GetWarnings(\"statusbar\") != \"\")\n         return;\n     if (pframeMain && pframeMain->m_statusBar)\n-        pframeMain->m_statusBar->SetStatusText(strText, nField);\n+        pframeMain->m_statusBar->SetStatusText(wxString(strText.c_str(), wxConvUTF8), nField);\n }\n \n void SetDefaultReceivingAddress(const string& strAddress)\n {\n     // Update main window address and database\n     if (pframeMain == NULL)\n         return;\n-    if (strAddress != pframeMain->m_textCtrlAddress->GetValue())\n+    if (strAddress != string(pframeMain->m_textCtrlAddress->GetValue().mb_str()))\n     {\n         uint160 hash160;\n         if (!AddressToHash160(strAddress, hash160))\n             return;\n         if (!mapPubKeys.count(hash160))\n             return;\n         CWalletDB().WriteDefaultKey(mapPubKeys[hash160]);\n-        pframeMain->m_textCtrlAddress->SetValue(strAddress);\n+        pframeMain->m_textCtrlAddress->SetValue(wxString(strAddress.c_str(), wxConvUTF8));\n     }\n }\n \n@@ -285,7 +285,7 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     dResize = 1.22;\n     SetSize(dResize * GetSize().GetWidth(), 1.15 * GetSize().GetHeight());\n #endif\n-    m_staticTextBalance->SetLabel(FormatMoney(GetBalance()) + \"  \");\n+    m_staticTextBalance->SetLabel(wxString(string(FormatMoney(GetBalance()) + \"  \").c_str(), wxConvUTF8));\n     m_listCtrl->SetFocus();\n     ptaskbaricon = new CMyTaskBarIcon();\n #ifdef __WXMAC_OSX__\n@@ -306,8 +306,8 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     wxListCtrl* pplistCtrl[] = {m_listCtrlAll, m_listCtrlSentReceived, m_listCtrlSent, m_listCtrlReceived};\n     BOOST_FOREACH(wxListCtrl* p, pplistCtrl)\n     {\n-        p->InsertColumn(0, \"\",               wxLIST_FORMAT_LEFT,  dResize * 0);\n-        p->InsertColumn(1, \"\",               wxLIST_FORMAT_LEFT,  dResize * 0);\n+        p->InsertColumn(0, _T(\"\"),               wxLIST_FORMAT_LEFT,  dResize * 0);\n+        p->InsertColumn(1, _T(\"\"),               wxLIST_FORMAT_LEFT,  dResize * 0);\n         p->InsertColumn(2, _(\"Status\"),      wxLIST_FORMAT_LEFT,  dResize * 112);\n         p->InsertColumn(3, _(\"Date\"),        wxLIST_FORMAT_LEFT,  dResize * nDateWidth);\n         p->InsertColumn(4, _(\"Description\"), wxLIST_FORMAT_LEFT,  dResize * 409 - nDateWidth);\n@@ -326,7 +326,7 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     // Fill your address text box\n     vector<unsigned char> vchPubKey;\n     if (CWalletDB(\"r\").ReadDefaultKey(vchPubKey))\n-        m_textCtrlAddress->SetValue(PubKeyToAddress(vchPubKey));\n+        m_textCtrlAddress->SetValue(wxString(PubKeyToAddress(vchPubKey).c_str(), wxConvUTF8));\n \n     // Fill listctrl with wallet transactions\n     RefreshListCtrl();\n@@ -447,7 +447,7 @@ int CMainFrame::GetSortIndex(const string& strSort)\n     while (low < high)\n     {\n         int mid = low + ((high - low) / 2);\n-        if (strSort.compare(m_listCtrl->GetItemText(mid).c_str()) >= 0)\n+        if (strSort.compare(string(m_listCtrl->GetItemText(mid).mb_str())) >= 0)\n             high = mid;\n         else\n             low = mid + 1;\n@@ -466,31 +466,31 @@ void CMainFrame::InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSo\n     {\n         string strHash = \" \" + hashKey.ToString();\n         while ((nIndex = m_listCtrl->FindItem(nIndex, nData)) != -1)\n-            if (GetItemText(m_listCtrl, nIndex, 1) == strHash)\n+            if (GetItemText(m_listCtrl, nIndex, 1) == wxString(strHash.c_str(), wxConvUTF8))\n                 break;\n     }\n \n     // fNew is for blind insert, only use if you're sure it's new\n     if (fNew || nIndex == -1)\n     {\n-        nIndex = m_listCtrl->InsertItem(GetSortIndex(strSort), strSort);\n+        nIndex = m_listCtrl->InsertItem(GetSortIndex(strSort), wxString(strSort.c_str(), wxConvUTF8));\n     }\n     else\n     {\n         // If sort key changed, must delete and reinsert to make it relocate\n-        if (GetItemText(m_listCtrl, nIndex, 0) != strSort)\n+        if (GetItemText(m_listCtrl, nIndex, 0) != wxString(strSort.c_str(), wxConvUTF8))\n         {\n             m_listCtrl->DeleteItem(nIndex);\n-            nIndex = m_listCtrl->InsertItem(GetSortIndex(strSort), strSort);\n+            nIndex = m_listCtrl->InsertItem(GetSortIndex(strSort), wxString(strSort.c_str(), wxConvUTF8));\n         }\n     }\n \n-    m_listCtrl->SetItem(nIndex, 1, \" \" + hashKey.ToString());\n-    m_listCtrl->SetItem(nIndex, 2, str2);\n-    m_listCtrl->SetItem(nIndex, 3, str3);\n-    m_listCtrl->SetItem(nIndex, 4, str4);\n-    m_listCtrl->SetItem(nIndex, 5, str5);\n-    m_listCtrl->SetItem(nIndex, 6, str6);\n+    m_listCtrl->SetItem(nIndex, 1, wxString(string(\" \" + hashKey.ToString()).c_str(), wxConvUTF8));\n+    m_listCtrl->SetItem(nIndex, 2, wxString(str2.c_str(), wxConvUTF8));\n+    m_listCtrl->SetItem(nIndex, 3, wxString(str3.c_str(), wxConvUTF8));\n+    m_listCtrl->SetItem(nIndex, 4, wxString(str4.c_str(), wxConvUTF8));\n+    m_listCtrl->SetItem(nIndex, 5, wxString(str5.c_str(), wxConvUTF8));\n+    m_listCtrl->SetItem(nIndex, 6, wxString(str6.c_str(), wxConvUTF8));\n     m_listCtrl->SetItemData(nIndex, nData);\n     SetItemTextColour(m_listCtrl, nIndex, colour);\n }\n@@ -503,7 +503,7 @@ bool CMainFrame::DeleteLine(uint256 hashKey)\n     int nIndex = -1;\n     string strHash = \" \" + hashKey.ToString();\n     while ((nIndex = m_listCtrl->FindItem(nIndex, nData)) != -1)\n-        if (GetItemText(m_listCtrl, nIndex, 1) == strHash)\n+        if (GetItemText(m_listCtrl, nIndex, 1) == wxString(strHash.c_str(), wxConvUTF8))\n             break;\n \n     if (nIndex != -1)\n@@ -518,19 +518,19 @@ string FormatTxStatus(const CWalletTx& wtx)\n     if (!wtx.IsFinal())\n     {\n         if (wtx.nLockTime < 500000000)\n-            return strprintf(_(\"Open for %d blocks\"), nBestHeight - wtx.nLockTime);\n+            return strprintf(GetTranslationChar(\"Open for %d blocks\"), nBestHeight - wtx.nLockTime);\n         else\n-            return strprintf(_(\"Open until %s\"), DateTimeStr(wtx.nLockTime).c_str());\n+            return strprintf(GetTranslationChar(\"Open until %s\"), DateTimeStr(wtx.nLockTime).c_str());\n     }\n     else\n     {\n         int nDepth = wtx.GetDepthInMainChain();\n         if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n-            return strprintf(_(\"%d/offline?\"), nDepth);\n+            return strprintf(GetTranslationChar(\"%d/offline?\"), nDepth);\n         else if (nDepth < 6)\n-            return strprintf(_(\"%d/unconfirmed\"), nDepth);\n+            return strprintf(GetTranslationChar(\"%d/unconfirmed\"), nDepth);\n         else\n-            return strprintf(_(\"%d confirmations\"), nDepth);\n+            return strprintf(GetTranslationChar(\"%d confirmations\"), nDepth);\n     }\n }\n \n@@ -615,23 +615,23 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n         if (wtx.IsCoinBase())\n         {\n             // Generated\n-            strDescription = _(\"Generated\");\n+            strDescription = GetTranslationString(\"Generated\");\n             if (nCredit == 0)\n             {\n                 int64 nUnmatured = 0;\n                 BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                     nUnmatured += txout.GetCredit();\n                 if (wtx.IsInMainChain())\n                 {\n-                    strDescription = strprintf(_(\"Generated (%s matures in %d more blocks)\"), FormatMoney(nUnmatured).c_str(), wtx.GetBlocksToMaturity());\n+                    strDescription = strprintf(GetTranslationChar(\"Generated (%s matures in %d more blocks)\"), FormatMoney(nUnmatured).c_str(), wtx.GetBlocksToMaturity());\n \n                     // Check if the block was requested by anyone\n                     if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n-                        strDescription = _(\"Generated - Warning: This block was not received by any other nodes and will probably not be accepted!\");\n+                        strDescription = GetTranslationString(\"Generated - Warning: This block was not received by any other nodes and will probably not be accepted!\");\n                 }\n                 else\n                 {\n-                    strDescription = _(\"Generated (not accepted)\");\n+                    strDescription = GetTranslationString(\"Generated (not accepted)\");\n                 }\n             }\n         }\n@@ -641,7 +641,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             if (!fShowReceived)\n                 return false;\n             if (!mapValue[\"from\"].empty())\n-                strDescription += _(\"From: \") + mapValue[\"from\"];\n+                strDescription += GetTranslationString(\"From: \") + mapValue[\"from\"];\n             if (!mapValue[\"message\"].empty())\n             {\n                 if (!strDescription.empty())\n@@ -665,7 +665,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                         {\n                             //strDescription += _(\"Received payment to \");\n                             //strDescription += _(\"Received with address \");\n-                            strDescription += _(\"Received with: \");\n+                            strDescription += GetTranslationString(\"Received with: \");\n                             string strAddress = PubKeyToAddress(vchPubKey);\n                             map<string, string>::iterator mi = mapAddressBook.find(strAddress);\n                             if (mi != mapAddressBook.end() && !(*mi).second.empty())\n@@ -688,11 +688,11 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             strCredit = \"[\" + strCredit + \"]\";\n \n         InsertLine(fNew, nIndex, hash, strSort, colour,\n-                   strStatus,\n-                   nTime ? DateTimeStr(nTime) : \"\",\n-                   SingleLine(strDescription),\n-                   \"\",\n-                   strCredit);\n+                   wxString(strStatus.c_str(), wxConvUTF8),\n+                   nTime ? wxString(DateTimeStr(nTime).c_str(), wxConvUTF8) : _T(\"\"),\n+                   wxString(SingleLine(strDescription).c_str(), wxConvUTF8),\n+                   _T(\"\"),\n+                   wxString(strCredit.c_str(), wxConvUTF8));\n     }\n     else\n     {\n@@ -709,11 +709,11 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             // Payment to self\n             int64 nChange = wtx.GetChange();\n             InsertLine(fNew, nIndex, hash, strSort, colour,\n-                       strStatus,\n-                       nTime ? DateTimeStr(nTime) : \"\",\n+                       wxString(strStatus.c_str(), wxConvUTF8),\n+                       nTime ? wxString(DateTimeStr(nTime).c_str(), wxConvUTF8) : _T(\"\"),\n                        _(\"Payment to yourself\"),\n-                       FormatMoney(-(nDebit - nChange), true),\n-                       FormatMoney(nCredit - nChange, true));\n+                       wxString(FormatMoney(-(nDebit - nChange), true).c_str(), wxConvUTF8),\n+                       wxString(FormatMoney(nCredit - nChange, true).c_str(), wxConvUTF8));\n         }\n         else if (fAllFromMe)\n         {\n@@ -745,7 +745,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                         strAddress = Hash160ToAddress(hash160);\n                 }\n \n-                string strDescription = _(\"To: \");\n+                string strDescription = GetTranslationString(\"To: \");\n                 CRITICAL_BLOCK(cs_mapAddressBook)\n                     if (mapAddressBook.count(strAddress) && !mapAddressBook[strAddress].empty())\n                         strDescription += mapAddressBook[strAddress] + \" \";\n@@ -771,11 +771,11 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                 }\n \n                 InsertLine(fNew, nIndex, hash, strprintf(\"%s-%d\", strSort.c_str(), nOut), colour,\n-                           strStatus,\n-                           nTime ? DateTimeStr(nTime) : \"\",\n-                           SingleLine(strDescription),\n-                           FormatMoney(-nValue, true),\n-                           \"\");\n+                           wxString(strStatus.c_str(), wxConvUTF8),\n+                           nTime ? wxString(DateTimeStr(nTime).c_str(), wxConvUTF8) : _T(\"\"),\n+                           wxString(SingleLine(strDescription).c_str(), wxConvUTF8),\n+                           wxString(FormatMoney(-nValue, true).c_str(), wxConvUTF8),\n+                           _T(\"\"));\n                 nIndex = -1;\n                 wtx.nLinesDisplayed++;\n             }\n@@ -792,11 +792,11 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                 fAllMine = fAllMine && txin.IsMine();\n \n             InsertLine(fNew, nIndex, hash, strSort, colour,\n-                       strStatus,\n-                       nTime ? DateTimeStr(nTime) : \"\",\n-                       \"\",\n-                       FormatMoney(nNet, true),\n-                       \"\");\n+                       wxString(strStatus.c_str(), wxConvUTF8),\n+                       nTime ? wxString(DateTimeStr(nTime).c_str(), wxConvUTF8) : _T(\"\"),\n+                       _T(\"\"),\n+                       wxString(FormatMoney(nNet, true).c_str(), wxConvUTF8),\n+                       _T(\"\"));\n         }\n     }\n \n@@ -910,7 +910,7 @@ void CMainFrame::RefreshStatusColumn()\n \n         for (int nIndex = nStart; nIndex < min(nEnd, m_listCtrl->GetItemCount()); nIndex++)\n         {\n-            uint256 hash((string)GetItemText(m_listCtrl, nIndex, 1));\n+            uint256 hash(string(GetItemText(m_listCtrl, nIndex, 1).mb_str()));\n             map<uint256, CWalletTx>::iterator mi = mapWallet.find(hash);\n             if (mi == mapWallet.end())\n             {\n@@ -927,7 +927,7 @@ void CMainFrame::RefreshStatusColumn()\n             }\n             else\n             {\n-                m_listCtrl->SetItem(nIndex, 2, FormatTxStatus(wtx));\n+                m_listCtrl->SetItem(nIndex, 2, wxString(FormatTxStatus(wtx).c_str(), wxConvUTF8));\n             }\n         }\n     }\n@@ -1015,15 +1015,15 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)\n             {\n                 string strTop;\n                 if (m_listCtrl->GetItemCount())\n-                    strTop = (string)m_listCtrl->GetItemText(0);\n+                    strTop = string(m_listCtrl->GetItemText(0).mb_str());\n                 BOOST_FOREACH(uint256 hash, vWalletUpdated)\n                 {\n                     map<uint256, CWalletTx>::iterator mi = mapWallet.find(hash);\n                     if (mi != mapWallet.end())\n                         InsertTransaction((*mi).second, false);\n                 }\n                 vWalletUpdated.clear();\n-                if (m_listCtrl->GetItemCount() && strTop != (string)m_listCtrl->GetItemText(0))\n+                if (m_listCtrl->GetItemCount() && strTop != string(m_listCtrl->GetItemText(0).mb_str()))\n                     m_listCtrl->ScrollList(0, INT_MIN/2);\n             }\n         }\n@@ -1032,7 +1032,7 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)\n         TRY_CRITICAL_BLOCK(cs_mapWallet)\n         {\n             fPaintedBalance = true;\n-            m_staticTextBalance->SetLabel(FormatMoney(GetBalance()) + \"  \");\n+            m_staticTextBalance->SetLabel(wxString(string(FormatMoney(GetBalance()) + \"  \").c_str(), wxConvUTF8));\n \n             // Count hidden and multi-line transactions\n             nTransactionCount = 0;\n@@ -1053,25 +1053,25 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)\n     static string strPrevWarning;\n     string strWarning = GetWarnings(\"statusbar\");\n     if (strWarning != \"\")\n-        m_statusBar->SetStatusText(string(\"    \") + _(strWarning), 0);\n+        m_statusBar->SetStatusText(wxString(string(string(\"    \") + GetTranslationString(strWarning.c_str())).c_str(), wxConvUTF8), 0);\n     else if (strPrevWarning != \"\")\n-        m_statusBar->SetStatusText(\"\", 0);\n+        m_statusBar->SetStatusText(_T(\"\"), 0);\n     strPrevWarning = strWarning;\n \n     string strGen = \"\";\n     if (fGenerateBitcoins)\n-        strGen = _(\"    Generating\");\n+        strGen = GetTranslationString(\"    Generating\");\n     if (fGenerateBitcoins && vNodes.empty())\n-        strGen = _(\"(not connected)\");\n-    m_statusBar->SetStatusText(strGen, 1);\n+        strGen = GetTranslationString(\"(not connected)\");\n+    m_statusBar->SetStatusText(wxString(strGen.c_str(), wxConvUTF8), 1);\n \n-    string strStatus = strprintf(_(\"     %d connections     %d blocks     %d transactions\"), vNodes.size(), nBestHeight, nTransactionCount);\n-    m_statusBar->SetStatusText(strStatus, 2);\n+    string strStatus = strprintf(GetTranslationChar(\"     %d connections     %d blocks     %d transactions\"), vNodes.size(), nBestHeight, nTransactionCount);\n+    m_statusBar->SetStatusText(wxString(strStatus.c_str(), wxConvUTF8), 2);\n \n     // Update receiving address\n     string strDefaultAddress = PubKeyToAddress(vchDefaultKey);\n-    if (m_textCtrlAddress->GetValue() != strDefaultAddress)\n-        m_textCtrlAddress->SetValue(strDefaultAddress);\n+    if (string(m_textCtrlAddress->GetValue().mb_str()) != strDefaultAddress)\n+        m_textCtrlAddress->SetValue(wxString(strDefaultAddress.c_str(), wxConvUTF8));\n }\n \n \n@@ -1112,7 +1112,7 @@ void CMainFrame::OnUpdateUIOptionsGenerate(wxUpdateUIEvent& event)\n void CMainFrame::OnMenuOptionsChangeYourAddress(wxCommandEvent& event)\n {\n     // Options->Your Receiving Addresses\n-    CAddressBookDialog dialog(this, \"\", CAddressBookDialog::RECEIVING, false);\n+    CAddressBookDialog dialog(this, _T(\"\"), CAddressBookDialog::RECEIVING, false);\n     if (!dialog.ShowModal())\n         return;\n }\n@@ -1141,7 +1141,7 @@ void CMainFrame::OnButtonSend(wxCommandEvent& event)\n void CMainFrame::OnButtonAddressBook(wxCommandEvent& event)\n {\n     // Toolbar: Address Book\n-    CAddressBookDialog dialogAddr(this, \"\", CAddressBookDialog::SENDING, false);\n+    CAddressBookDialog dialogAddr(this, _T(\"\"), CAddressBookDialog::SENDING, false);\n     if (dialogAddr.ShowModal() == 2)\n     {\n         // Send\n@@ -1170,8 +1170,8 @@ void CMainFrame::OnButtonNew(wxCommandEvent& event)\n {\n     // Ask name\n     CGetTextFromUserDialog dialog(this,\n-        _(\"New Receiving Address\"),\n-        _(\"You should use a new address for each payment you receive.\\n\\nLabel\"),\n+        GetTranslationString(\"New Receiving Address\"),\n+        GetTranslationString(\"You should use a new address for each payment you receive.\\n\\nLabel\"),\n         \"\");\n     if (!dialog.ShowModal())\n         return;\n@@ -1197,7 +1197,7 @@ void CMainFrame::OnButtonCopy(wxCommandEvent& event)\n \n void CMainFrame::OnListItemActivated(wxListEvent& event)\n {\n-    uint256 hash((string)GetItemText(m_listCtrl, event.GetIndex(), 1));\n+    uint256 hash(string(GetItemText(m_listCtrl, event.GetIndex(), 1).mb_str()));\n     CWalletTx wtx;\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n@@ -1243,34 +1243,34 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n \n \n \n-        strHTML += _(\"<b>Status:</b> \") + FormatTxStatus(wtx);\n+        strHTML += GetTranslationString(\"<b>Status:</b> \") + FormatTxStatus(wtx);\n         int nRequests = wtx.GetRequestCount();\n         if (nRequests != -1)\n         {\n             if (nRequests == 0)\n-                strHTML += _(\", has not been successfully broadcast yet\");\n+                strHTML += GetTranslationString(\", has not been successfully broadcast yet\");\n             else if (nRequests == 1)\n-                strHTML += strprintf(_(\", broadcast through %d node\"), nRequests);\n+                strHTML += strprintf(GetTranslationChar(\", broadcast through %d node\"), nRequests);\n             else\n-                strHTML += strprintf(_(\", broadcast through %d nodes\"), nRequests);\n+                strHTML += strprintf(GetTranslationChar(\", broadcast through %d nodes\"), nRequests);\n         }\n         strHTML += \"<br>\";\n \n-        strHTML += _(\"<b>Date:</b> \") + (nTime ? DateTimeStr(nTime) : \"\") + \"<br>\";\n+        strHTML += GetTranslationString(\"<b>Date:</b> \") + (nTime ? DateTimeStr(nTime) : \"\") + \"<br>\";\n \n \n         //\n         // From\n         //\n         if (wtx.IsCoinBase())\n         {\n-            strHTML += _(\"<b>Source:</b> Generated<br>\");\n+            strHTML += GetTranslationString(\"<b>Source:</b> Generated<br>\");\n         }\n         else if (!wtx.mapValue[\"from\"].empty())\n         {\n             // Online transaction\n             if (!wtx.mapValue[\"from\"].empty())\n-                strHTML += _(\"<b>From:</b> \") + HtmlEscape(wtx.mapValue[\"from\"]) + \"<br>\";\n+                strHTML += GetTranslationString(\"<b>From:</b> \") + HtmlEscape(wtx.mapValue[\"from\"]) + \"<br>\";\n         }\n         else\n         {\n@@ -1288,13 +1288,13 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                             string strAddress = PubKeyToAddress(vchPubKey);\n                             if (mapAddressBook.count(strAddress))\n                             {\n-                                strHTML += string() + _(\"<b>From:</b> \") + _(\"unknown\") + \"<br>\";\n-                                strHTML += _(\"<b>To:</b> \");\n+                                strHTML += string() + GetTranslationString(\"<b>From:</b> \") + GetTranslationString(\"unknown\") + \"<br>\";\n+                                strHTML += GetTranslationString(\"<b>To:</b> \");\n                                 strHTML += HtmlEscape(strAddress);\n                                 if (!mapAddressBook[strAddress].empty())\n-                                    strHTML += _(\" (yours, label: \") + mapAddressBook[strAddress] + \")\";\n+                                    strHTML += GetTranslationString(\" (yours, label: \") + mapAddressBook[strAddress] + \")\";\n                                 else\n-                                    strHTML += _(\" (yours)\");\n+                                    strHTML += GetTranslationString(\" (yours)\");\n                                 strHTML += \"<br>\";\n                             }\n                         }\n@@ -1313,7 +1313,7 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n         {\n             // Online transaction\n             strAddress = wtx.mapValue[\"to\"];\n-            strHTML += _(\"<b>To:</b> \");\n+            strHTML += GetTranslationString(\"<b>To:</b> \");\n             if (mapAddressBook.count(strAddress) && !mapAddressBook[strAddress].empty())\n                 strHTML += mapAddressBook[strAddress] + \" \";\n             strHTML += HtmlEscape(strAddress) + \"<br>\";\n@@ -1331,19 +1331,19 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n             int64 nUnmatured = 0;\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 nUnmatured += txout.GetCredit();\n-            strHTML += _(\"<b>Credit:</b> \");\n+            strHTML += GetTranslationString(\"<b>Credit:</b> \");\n             if (wtx.IsInMainChain())\n-                strHTML += strprintf(_(\"(%s matures in %d more blocks)\"), FormatMoney(nUnmatured).c_str(), wtx.GetBlocksToMaturity());\n+                strHTML += strprintf(GetTranslationChar(\"(%s matures in %d more blocks)\"), FormatMoney(nUnmatured).c_str(), wtx.GetBlocksToMaturity());\n             else\n-                strHTML += _(\"(not accepted)\");\n+                strHTML += GetTranslationString(\"(not accepted)\");\n             strHTML += \"<br>\";\n         }\n         else if (nNet > 0)\n         {\n             //\n             // Credit\n             //\n-            strHTML += _(\"<b>Credit:</b> \") + FormatMoney(nNet) + \"<br>\";\n+            strHTML += GetTranslationString(\"<b>Credit:</b> \") + FormatMoney(nNet) + \"<br>\";\n         }\n         else\n         {\n@@ -1372,29 +1372,29 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                         if (ExtractHash160(txout.scriptPubKey, hash160))\n                         {\n                             string strAddress = Hash160ToAddress(hash160);\n-                            strHTML += _(\"<b>To:</b> \");\n+                            strHTML += GetTranslationString(\"<b>To:</b> \");\n                             if (mapAddressBook.count(strAddress) && !mapAddressBook[strAddress].empty())\n                                 strHTML += mapAddressBook[strAddress] + \" \";\n                             strHTML += strAddress;\n                             strHTML += \"<br>\";\n                         }\n                     }\n \n-                    strHTML += _(\"<b>Debit:</b> \") + FormatMoney(-txout.nValue) + \"<br>\";\n+                    strHTML += GetTranslationString(\"<b>Debit:</b> \") + FormatMoney(-txout.nValue) + \"<br>\";\n                 }\n \n                 if (fAllToMe)\n                 {\n                     // Payment to self\n                     int64 nChange = wtx.GetChange();\n                     int64 nValue = nCredit - nChange;\n-                    strHTML += _(\"<b>Debit:</b> \") + FormatMoney(-nValue) + \"<br>\";\n-                    strHTML += _(\"<b>Credit:</b> \") + FormatMoney(nValue) + \"<br>\";\n+                    strHTML += GetTranslationString(\"<b>Debit:</b> \") + FormatMoney(-nValue) + \"<br>\";\n+                    strHTML += GetTranslationString(\"<b>Credit:</b> \") + FormatMoney(nValue) + \"<br>\";\n                 }\n \n                 int64 nTxFee = nDebit - wtx.GetValueOut();\n                 if (nTxFee > 0)\n-                    strHTML += _(\"<b>Transaction fee:</b> \") + FormatMoney(-nTxFee) + \"<br>\";\n+                    strHTML += GetTranslationString(\"<b>Transaction fee:</b> \") + FormatMoney(-nTxFee) + \"<br>\";\n             }\n             else\n             {\n@@ -1403,26 +1403,26 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                 //\n                 BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                     if (txin.IsMine())\n-                        strHTML += _(\"<b>Debit:</b> \") + FormatMoney(-txin.GetDebit()) + \"<br>\";\n+                        strHTML += GetTranslationString(\"<b>Debit:</b> \") + FormatMoney(-txin.GetDebit()) + \"<br>\";\n                 BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                     if (txout.IsMine())\n-                        strHTML += _(\"<b>Credit:</b> \") + FormatMoney(txout.GetCredit()) + \"<br>\";\n+                        strHTML += GetTranslationString(\"<b>Credit:</b> \") + FormatMoney(txout.GetCredit()) + \"<br>\";\n             }\n         }\n \n-        strHTML += _(\"<b>Net amount:</b> \") + FormatMoney(nNet, true) + \"<br>\";\n+        strHTML += GetTranslationString(\"<b>Net amount:</b> \") + FormatMoney(nNet, true) + \"<br>\";\n \n \n         //\n         // Message\n         //\n         if (!wtx.mapValue[\"message\"].empty())\n-            strHTML += string() + \"<br><b>\" + _(\"Message:\") + \"</b><br>\" + HtmlEscape(wtx.mapValue[\"message\"], true) + \"<br>\";\n+            strHTML += string() + \"<br><b>\" + GetTranslationString(\"Message:\") + \"</b><br>\" + HtmlEscape(wtx.mapValue[\"message\"], true) + \"<br>\";\n         if (!wtx.mapValue[\"comment\"].empty())\n-            strHTML += string() + \"<br><b>\" + _(\"Comment:\") + \"</b><br>\" + HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n+            strHTML += string() + \"<br><b>\" + GetTranslationString(\"Comment:\") + \"</b><br>\" + HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n \n         if (wtx.IsCoinBase())\n-            strHTML += string() + \"<br>\" + _(\"Generated coins must wait 120 blocks before they can be spent.  When you generated this block, it was broadcast to the network to be added to the block chain.  If it fails to get into the chain, it will change to \\\"not accepted\\\" and not be spendable.  This may occasionally happen if another node generates a block within a few seconds of yours.\") + \"<br>\";\n+            strHTML += string() + \"<br>\" + GetTranslationString(\"Generated coins must wait 120 blocks before they can be spent.  When you generated this block, it was broadcast to the network to be added to the block chain.  If it fails to get into the chain, it will change to \\\"not accepted\\\" and not be spendable.  This may occasionally happen if another node generates a block within a few seconds of yours.\") + \"<br>\";\n \n \n         //\n@@ -1466,7 +1466,7 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n \n         strHTML += \"</font></html>\";\n         string(strHTML.begin(), strHTML.end()).swap(strHTML);\n-        m_htmlWin->SetPage(strHTML);\n+        m_htmlWin->SetPage(wxString(strHTML.c_str(), wxConvUTF8));\n         m_buttonOK->SetFocus();\n     }\n }\n@@ -1602,7 +1602,7 @@ void SetStartOnSystemStartup(bool fAutoStart)\n         boost::filesystem::ofstream optionFile(GetAutostartFilePath(), ios_base::out|ios_base::trunc);\n         if (!optionFile.good())\n         {\n-            wxMessageBox(_(\"Cannot write autostart/bitcoin.desktop file\"), \"Bitcoin\");\n+            wxMessageBox(_(\"Cannot write autostart/bitcoin.desktop file\"), _T(\"Bitcoin\"));\n             return;\n         }\n         // Write a bitcoin.desktop file to the autostart directory:\n@@ -1663,7 +1663,7 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)\n #endif\n \n     // Init values\n-    m_textCtrlTransactionFee->SetValue(FormatMoney(nTransactionFee));\n+    m_textCtrlTransactionFee->SetValue(wxString(FormatMoney(nTransactionFee).c_str(), wxConvUTF8));\n     m_checkBoxStartOnSystemStartup->SetValue(fTmpStartOnSystemStartup = GetStartOnSystemStartup());\n     m_checkBoxMinimizeToTray->SetValue(fMinimizeToTray);\n     m_checkBoxMinimizeOnClose->SetValue(fMinimizeOnClose);\n@@ -1676,8 +1676,8 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)\n     m_textCtrlProxyPort->Enable(fUseProxy);\n     m_staticTextProxyIP->Enable(fUseProxy);\n     m_staticTextProxyPort->Enable(fUseProxy);\n-    m_textCtrlProxyIP->SetValue(addrProxy.ToStringIP());\n-    m_textCtrlProxyPort->SetValue(addrProxy.ToStringPort());\n+    m_textCtrlProxyIP->SetValue(wxString(addrProxy.ToStringIP().c_str(), wxConvUTF8));\n+    m_textCtrlProxyPort->SetValue(wxString(addrProxy.ToStringPort().c_str(), wxConvUTF8));\n \n     m_buttonOK->SetFocus();\n }\n@@ -1700,8 +1700,8 @@ void COptionsDialog::OnKillFocusTransactionFee(wxFocusEvent& event)\n {\n     event.Skip();\n     int64 nTmp = nTransactionFee;\n-    ParseMoney(m_textCtrlTransactionFee->GetValue(), nTmp);\n-    m_textCtrlTransactionFee->SetValue(FormatMoney(nTmp));\n+    ParseMoney(string(m_textCtrlTransactionFee->GetValue().mb_str()), nTmp);\n+    m_textCtrlTransactionFee->SetValue(wxString(FormatMoney(nTmp).c_str(), wxConvUTF8));\n }\n \n void COptionsDialog::OnCheckBoxUseProxy(wxCommandEvent& event)\n@@ -1715,10 +1715,10 @@ void COptionsDialog::OnCheckBoxUseProxy(wxCommandEvent& event)\n CAddress COptionsDialog::GetProxyAddr()\n {\n     // Be careful about byte order, addr.ip and addr.port are big endian\n-    CAddress addr(m_textCtrlProxyIP->GetValue() + \":\" + m_textCtrlProxyPort->GetValue());\n+    CAddress addr(string(m_textCtrlProxyIP->GetValue().mb_str()) + \":\" + string(m_textCtrlProxyPort->GetValue().mb_str()));\n     if (addr.ip == INADDR_NONE)\n         addr.ip = addrProxy.ip;\n-    int nPort = atoi(m_textCtrlProxyPort->GetValue());\n+    int nPort = atoi(string(m_textCtrlProxyPort->GetValue().mb_str()));\n     addr.port = htons(nPort);\n     if (nPort <= 0 || nPort > USHRT_MAX)\n         addr.port = addrProxy.port;\n@@ -1728,8 +1728,8 @@ CAddress COptionsDialog::GetProxyAddr()\n void COptionsDialog::OnKillFocusProxy(wxFocusEvent& event)\n {\n     event.Skip();\n-    m_textCtrlProxyIP->SetValue(GetProxyAddr().ToStringIP());\n-    m_textCtrlProxyPort->SetValue(GetProxyAddr().ToStringPort());\n+    m_textCtrlProxyIP->SetValue(wxString(GetProxyAddr().ToStringIP().c_str(), wxConvUTF8));\n+    m_textCtrlProxyPort->SetValue(wxString(GetProxyAddr().ToStringPort().c_str(), wxConvUTF8));\n }\n \n \n@@ -1749,7 +1749,7 @@ void COptionsDialog::OnButtonApply(wxCommandEvent& event)\n     CWalletDB walletdb;\n \n     int64 nPrevTransactionFee = nTransactionFee;\n-    if (ParseMoney(m_textCtrlTransactionFee->GetValue(), nTransactionFee) && nTransactionFee != nPrevTransactionFee)\n+    if (ParseMoney(string(m_textCtrlTransactionFee->GetValue().mb_str()), nTransactionFee) && nTransactionFee != nPrevTransactionFee)\n         walletdb.WriteSetting(\"nTransactionFee\", nTransactionFee);\n \n     if (fTmpStartOnSystemStartup != m_checkBoxStartOnSystemStartup->GetValue())\n@@ -1797,14 +1797,14 @@ void COptionsDialog::OnButtonApply(wxCommandEvent& event)\n \n CAboutDialog::CAboutDialog(wxWindow* parent) : CAboutDialogBase(parent)\n {\n-    m_staticTextVersion->SetLabel(strprintf(_(\"version %s\"), FormatFullVersion().c_str()));\n+    m_staticTextVersion->SetLabel(wxString(strprintf(GetTranslationChar(\"version %s\"), FormatFullVersion().c_str()).c_str(), wxConvUTF8));\n \n     // Change (c) into UTF-8 or ANSI copyright symbol\n     wxString str = m_staticTextMain->GetLabel();\n #if wxUSE_UNICODE\n-    str.Replace(\"(c)\", wxString::FromUTF8(\"\\xC2\\xA9\"));\n+    str.Replace(_T(\"(c)\"), wxString::FromUTF8(\"\\xC2\\xA9\"));\n #else\n-    str.Replace(\"(c)\", \"\\xA9\");\n+    str.Replace(_T(\"(c)\"), \"\\xA9\");\n #endif\n     m_staticTextMain->SetLabel(str);\n #ifndef __WXMSW__\n@@ -1881,8 +1881,8 @@ void CSendDialog::OnKillFocusAmount(wxFocusEvent& event)\n     if (m_textCtrlAmount->GetValue().Trim().empty())\n         return;\n     int64 nTmp;\n-    if (ParseMoney(m_textCtrlAmount->GetValue(), nTmp))\n-        m_textCtrlAmount->SetValue(FormatMoney(nTmp));\n+    if (ParseMoney(string(m_textCtrlAmount->GetValue().mb_str()), nTmp))\n+        m_textCtrlAmount->SetValue(wxString(FormatMoney(nTmp).c_str(), wxConvUTF8));\n }\n \n void CSendDialog::OnButtonAddressBook(wxCommandEvent& event)\n@@ -1914,11 +1914,11 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n     TRY_CRITICAL_BLOCK(cs_sendlock)\n     {\n         CWalletTx wtx;\n-        string strAddress = (string)m_textCtrlAddress->GetValue();\n+        string strAddress = string(m_textCtrlAddress->GetValue().mb_str());\n \n         // Parse amount\n         int64 nValue = 0;\n-        if (!ParseMoney(m_textCtrlAmount->GetValue(), nValue) || nValue <= 0)\n+        if (!ParseMoney(string(m_textCtrlAmount->GetValue().mb_str()), nValue) || nValue <= 0)\n         {\n             wxMessageBox(_(\"Error in amount  \"), _(\"Send Coins\"));\n             return;\n@@ -1930,7 +1930,7 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n         }\n         if (nValue + nTransactionFee > GetBalance())\n         {\n-            wxMessageBox(string(_(\"Total exceeds your balance when the \")) + FormatMoney(nTransactionFee) + _(\" transaction fee is included  \"), _(\"Send Coins\"));\n+            wxMessageBox(GetWXOrStdString(GetTranslationString(\"Total exceeds your balance when the \") + FormatMoney(nTransactionFee) + GetTranslationString(\" transaction fee is included  \")), _(\"Send Coins\"));\n             return;\n         }\n \n@@ -1953,7 +1953,7 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n                     return; // leave send dialog open\n                 else\n                 {\n-                    wxMessageBox(strError + \"  \", _(\"Sending...\"));\n+                    wxMessageBox(wxString(string(strError + \"  \").c_str(), wxConvUTF8), _(\"Sending...\"));\n                     EndModal(false);\n                     return;\n                 }\n@@ -2020,8 +2020,8 @@ CSendingDialog::CSendingDialog(wxWindow* parent, const CAddress& addrIn, int64 n\n     SetSize(nScaleX * GetSize().GetWidth(), nScaleY * GetSize().GetHeight());\n #endif\n \n-    SetTitle(strprintf(_(\"Sending %s to %s\"), FormatMoney(nPrice).c_str(), wtx.mapValue[\"to\"].c_str()));\n-    m_textCtrlStatus->SetValue(\"\");\n+    SetTitle(wxString(strprintf(GetTranslationChar(\"Sending %s to %s\"), FormatMoney(nPrice).c_str(), wtx.mapValue[\"to\"].c_str()).c_str(), wxConvUTF8));\n+    m_textCtrlStatus->SetValue(_T(\"\"));\n \n     CreateThread(SendingDialogStartTransfer, this);\n }\n@@ -2079,9 +2079,9 @@ void CSendingDialog::OnPaint(wxPaintEvent& event)\n {\n     event.Skip();\n     if (strlen(pszStatus) > 130)\n-        m_textCtrlStatus->SetValue(string(\"\\n\") + pszStatus);\n+        m_textCtrlStatus->SetValue(wxString(string(string(\"\\n\") + pszStatus).c_str(), wxConvUTF8));\n     else\n-        m_textCtrlStatus->SetValue(string(\"\\n\\n\") + pszStatus);\n+        m_textCtrlStatus->SetValue(wxString(string(string(\"\\n\\n\") + pszStatus).c_str(), wxConvUTF8));\n     m_staticTextSending->SetFocus();\n     if (!fCanCancel)\n         m_buttonCancel->Enable(false);\n@@ -2093,7 +2093,7 @@ void CSendingDialog::OnPaint(wxPaintEvent& event)\n     }\n     if (fAbort && fCanCancel && IsShown())\n     {\n-        strcpy(pszStatus, _(\"CANCELLED\"));\n+        strcpy(pszStatus, GetTranslationChar(\"CANCELLED\"));\n         m_buttonOK->Enable(true);\n         m_buttonOK->SetFocus();\n         m_buttonCancel->Enable(false);\n@@ -2126,7 +2126,7 @@ bool CSendingDialog::Status()\n     if (fAbort && fCanCancel)\n     {\n         memset(pszStatus, 0, 10);\n-        strcpy(pszStatus, _(\"CANCELLED\"));\n+        strcpy(pszStatus, GetTranslationChar(\"CANCELLED\"));\n         Repaint();\n         fWorkDone = true;\n         return false;\n@@ -2152,7 +2152,7 @@ bool CSendingDialog::Error(const string& str)\n {\n     fCanCancel = false;\n     fWorkDone = true;\n-    Status(string(_(\"Error: \")) + str);\n+    Status(GetTranslationString(\"Error: \") + str);\n     return false;\n }\n \n@@ -2166,22 +2166,22 @@ void CSendingDialog::StartTransfer()\n     // Make sure we have enough money\n     if (nPrice + nTransactionFee > GetBalance())\n     {\n-        Error(_(\"Insufficient funds\"));\n+        Error(GetTranslationString(\"Insufficient funds\"));\n         return;\n     }\n \n     // We may have connected already for product details\n-    if (!Status(_(\"Connecting...\")))\n+    if (!Status(GetTranslationString(\"Connecting...\")))\n         return;\n     CNode* pnode = ConnectNode(addr, 15 * 60);\n     if (!pnode)\n     {\n-        Error(_(\"Unable to connect\"));\n+        Error(GetTranslationString(\"Unable to connect\"));\n         return;\n     }\n \n     // Send order to seller, with response going to OnReply2 via event handler\n-    if (!Status(_(\"Requesting public key...\")))\n+    if (!Status(GetTranslationString(\"Requesting public key...\")))\n         return;\n     pnode->PushRequest(\"checkorder\", wtx, SendingDialogOnReply2, this);\n }\n@@ -2193,7 +2193,7 @@ void SendingDialogOnReply2(void* parg, CDataStream& vRecv)\n \n void CSendingDialog::OnReply2(CDataStream& vRecv)\n {\n-    if (!Status(_(\"Received public key...\")))\n+    if (!Status(GetTranslationString(\"Received public key...\")))\n         return;\n \n     CScript scriptPubKey;\n@@ -2207,9 +2207,9 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n             if (!vRecv.empty())\n                 vRecv >> strMessage;\n             if (nRet == 2)\n-                Error(_(\"Recipient is not accepting transactions sent by IP address\"));\n+                Error(GetTranslationString(\"Recipient is not accepting transactions sent by IP address\"));\n             else\n-                Error(_(\"Transfer was not accepted\"));\n+                Error(GetTranslationString(\"Transfer was not accepted\"));\n             //// todo: enlarge the window and enable a hidden white box to put seller's message\n             return;\n         }\n@@ -2218,7 +2218,7 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n     catch (...)\n     {\n         //// what do we want to do about this?\n-        Error(_(\"Invalid response received\"));\n+        Error(GetTranslationString(\"Invalid response received\"));\n         return;\n     }\n \n@@ -2233,36 +2233,36 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n     CRITICAL_BLOCK(cs_main)\n     {\n         // Pay\n-        if (!Status(_(\"Creating transaction...\")))\n+        if (!Status(GetTranslationString(\"Creating transaction...\")))\n             return;\n         if (nPrice + nTransactionFee > GetBalance())\n         {\n-            Error(_(\"Insufficient funds\"));\n+            Error(GetTranslationString(\"Insufficient funds\"));\n             return;\n         }\n         CReserveKey reservekey;\n         int64 nFeeRequired;\n         if (!CreateTransaction(scriptPubKey, nPrice, wtx, reservekey, nFeeRequired))\n         {\n             if (nPrice + nFeeRequired > GetBalance())\n-                Error(strprintf(_(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"), FormatMoney(nFeeRequired).c_str()));\n+                Error(strprintf(GetTranslationChar(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"), FormatMoney(nFeeRequired).c_str()));\n             else\n-                Error(_(\"Transaction creation failed\"));\n+                Error(GetTranslationString(\"Transaction creation failed\"));\n             return;\n         }\n \n         // Transaction fee\n-        if (!ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), this))\n+        if (!ThreadSafeAskFee(nFeeRequired, GetTranslationString(\"Sending...\"), this))\n         {\n-            Error(_(\"Transaction aborted\"));\n+            Error(GetTranslationString(\"Transaction aborted\"));\n             return;\n         }\n \n         // Make sure we're still connected\n         CNode* pnode = ConnectNode(addr, 2 * 60 * 60);\n         if (!pnode)\n         {\n-            Error(_(\"Lost connection, transaction cancelled\"));\n+            Error(GetTranslationString(\"Lost connection, transaction cancelled\"));\n             return;\n         }\n \n@@ -2278,13 +2278,13 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n                 return;\n             fCanCancel = false;\n         }\n-        if (!Status(_(\"Sending payment...\")))\n+        if (!Status(GetTranslationString(\"Sending payment...\")))\n             return;\n \n         // Commit\n         if (!CommitTransaction(wtx, reservekey))\n         {\n-            Error(_(\"The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"));\n+            Error(GetTranslationString(\"The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"));\n             return;\n         }\n \n@@ -2293,7 +2293,7 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n         wtxSend.fFromMe = false;\n         pnode->PushRequest(\"submitorder\", wtxSend, SendingDialogOnReply3, this);\n \n-        Status(_(\"Waiting for confirmation...\"));\n+        Status(GetTranslationString(\"Waiting for confirmation...\"));\n         MainFrameRepaint();\n     }\n }\n@@ -2311,7 +2311,7 @@ void CSendingDialog::OnReply3(CDataStream& vRecv)\n         vRecv >> nRet;\n         if (nRet > 0)\n         {\n-            Error(_(\"The payment was sent, but the recipient was unable to verify it.\\n\"\n+            Error(GetTranslationString(\"The payment was sent, but the recipient was unable to verify it.\\n\"\n                     \"The transaction is recorded and will credit to the recipient,\\n\"\n                     \"but the comment information will be blank.\"));\n             return;\n@@ -2320,13 +2320,13 @@ void CSendingDialog::OnReply3(CDataStream& vRecv)\n     catch (...)\n     {\n         //// what do we want to do about this?\n-        Error(_(\"Payment was sent, but an invalid response was received\"));\n+        Error(GetTranslationString(\"Payment was sent, but an invalid response was received\"));\n         return;\n     }\n \n     fSuccess = true;\n     fWorkDone = true;\n-    Status(_(\"Payment completed\"));\n+    Status(GetTranslationString(\"Payment completed\"));\n }\n \n \n@@ -2379,16 +2379,16 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit\n     CRITICAL_BLOCK(cs_mapKeys)\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n-        string strDefaultReceiving = (string)pframeMain->m_textCtrlAddress->GetValue();\n+        string strDefaultReceiving = string(pframeMain->m_textCtrlAddress->GetValue().mb_str());\n         BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapAddressBook)\n         {\n             string strAddress = item.first;\n             string strName = item.second;\n             uint160 hash160;\n             bool fMine = (AddressToHash160(strAddress, hash160) && mapPubKeys.count(hash160));\n             wxListCtrl* plistCtrl = fMine ? m_listCtrlReceiving : m_listCtrlSending;\n-            int nIndex = InsertLine(plistCtrl, strName, strAddress);\n-            if (strAddress == (fMine ? strDefaultReceiving : string(strInitSelected)))\n+            int nIndex = InsertLine(plistCtrl, wxString(strName.c_str(), wxConvUTF8), wxString(strAddress.c_str(), wxConvUTF8));\n+            if (strAddress == (fMine ? strDefaultReceiving : string(strInitSelected.mb_str())))\n                 plistCtrl->SetItemState(nIndex, wxLIST_STATE_SELECTED|wxLIST_STATE_FOCUSED, wxLIST_STATE_SELECTED|wxLIST_STATE_FOCUSED);\n         }\n     }\n@@ -2398,23 +2398,23 @@ wxString CAddressBookDialog::GetSelectedAddress()\n {\n     int nIndex = GetSelection(m_listCtrl);\n     if (nIndex == -1)\n-        return \"\";\n+        return _T(\"\");\n     return GetItemText(m_listCtrl, nIndex, 1);\n }\n \n wxString CAddressBookDialog::GetSelectedSendingAddress()\n {\n     int nIndex = GetSelection(m_listCtrlSending);\n     if (nIndex == -1)\n-        return \"\";\n+        return _T(\"\");\n     return GetItemText(m_listCtrlSending, nIndex, 1);\n }\n \n wxString CAddressBookDialog::GetSelectedReceivingAddress()\n {\n     int nIndex = GetSelection(m_listCtrlReceiving);\n     if (nIndex == -1)\n-        return \"\";\n+        return _T(\"\");\n     return GetItemText(m_listCtrlReceiving, nIndex, 1);\n }\n \n@@ -2438,16 +2438,16 @@ void CAddressBookDialog::OnListEndLabelEdit(wxListEvent& event)\n     event.Skip();\n     if (event.IsEditCancelled())\n         return;\n-    string strAddress = (string)GetItemText(m_listCtrl, event.GetIndex(), 1);\n-    SetAddressBookName(strAddress, string(event.GetText()));\n+    string strAddress = string(GetItemText(m_listCtrl, event.GetIndex(), 1).mb_str());\n+    SetAddressBookName(strAddress, string(event.GetText().mb_str()));\n     pframeMain->RefreshListCtrl();\n }\n \n void CAddressBookDialog::OnListItemSelected(wxListEvent& event)\n {\n     event.Skip();\n     if (nPage == RECEIVING)\n-        SetDefaultReceivingAddress((string)GetSelectedReceivingAddress());\n+        SetDefaultReceivingAddress(string(GetSelectedReceivingAddress().mb_str()));\n }\n \n void CAddressBookDialog::OnListItemActivated(wxListEvent& event)\n@@ -2456,7 +2456,7 @@ void CAddressBookDialog::OnListItemActivated(wxListEvent& event)\n     if (fDuringSend)\n     {\n         // Doubleclick returns selection\n-        EndModal(GetSelectedAddress() != \"\" ? 2 : 0);\n+        EndModal(string(GetSelectedAddress().mb_str()) != \"\" ? 2 : 0);\n         return;\n     }\n \n@@ -2473,7 +2473,7 @@ void CAddressBookDialog::OnButtonDelete(wxCommandEvent& event)\n     {\n         if (m_listCtrl->GetItemState(nIndex, wxLIST_STATE_SELECTED))\n         {\n-            string strAddress = (string)GetItemText(m_listCtrl, nIndex, 1);\n+            string strAddress = string(GetItemText(m_listCtrl, nIndex, 1).mb_str());\n             CWalletDB().EraseName(strAddress);\n             m_listCtrl->DeleteItem(nIndex);\n         }\n@@ -2496,7 +2496,7 @@ bool CAddressBookDialog::CheckIfMine(const string& strAddress, const string& str\n     uint160 hash160;\n     bool fMine = (AddressToHash160(strAddress, hash160) && mapPubKeys.count(hash160));\n     if (fMine)\n-        wxMessageBox(_(\"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"), strTitle);\n+        wxMessageBox(_(\"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"), wxString(strTitle.c_str(), wxConvUTF8));\n     return fMine;\n }\n \n@@ -2505,28 +2505,28 @@ void CAddressBookDialog::OnButtonEdit(wxCommandEvent& event)\n     int nIndex = GetSelection(m_listCtrl);\n     if (nIndex == -1)\n         return;\n-    string strName = (string)m_listCtrl->GetItemText(nIndex);\n-    string strAddress = (string)GetItemText(m_listCtrl, nIndex, 1);\n+    string strName = string(m_listCtrl->GetItemText(nIndex).mb_str());\n+    string strAddress = string(GetItemText(m_listCtrl, nIndex, 1).mb_str());\n     string strAddressOrg = strAddress;\n \n     if (nPage == SENDING)\n     {\n         // Ask name and address\n         do\n         {\n-            CGetTextFromUserDialog dialog(this, _(\"Edit Address\"), _(\"Name\"), strName, _(\"Address\"), strAddress);\n+            CGetTextFromUserDialog dialog(this, GetTranslationString(\"Edit Address\"), GetTranslationString(\"Name\"), strName, GetTranslationString(\"Address\"), strAddress);\n             if (!dialog.ShowModal())\n                 return;\n             strName = dialog.GetValue1();\n             strAddress = dialog.GetValue2();\n         }\n-        while (CheckIfMine(strAddress, _(\"Edit Address\")));\n+        while (CheckIfMine(strAddress, GetTranslationString(\"Edit Address\")));\n \n     }\n     else if (nPage == RECEIVING)\n     {\n         // Ask name\n-        CGetTextFromUserDialog dialog(this, _(\"Edit Address Label\"), _(\"Label\"), strName);\n+        CGetTextFromUserDialog dialog(this, GetTranslationString(\"Edit Address Label\"), GetTranslationString(\"Label\"), strName);\n         if (!dialog.ShowModal())\n             return;\n         strName = dialog.GetValue();\n@@ -2536,8 +2536,8 @@ void CAddressBookDialog::OnButtonEdit(wxCommandEvent& event)\n     if (strAddress != strAddressOrg)\n         CWalletDB().EraseName(strAddressOrg);\n     SetAddressBookName(strAddress, strName);\n-    m_listCtrl->SetItem(nIndex, 1, strAddress);\n-    m_listCtrl->SetItemText(nIndex, strName);\n+    m_listCtrl->SetItem(nIndex, 1, wxString(strAddress.c_str(), wxConvUTF8));\n+    m_listCtrl->SetItemText(nIndex, wxString(strName.c_str(), wxConvUTF8));\n     pframeMain->RefreshListCtrl();\n }\n \n@@ -2551,20 +2551,20 @@ void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)\n         // Ask name and address\n         do\n         {\n-            CGetTextFromUserDialog dialog(this, _(\"Add Address\"), _(\"Name\"), strName, _(\"Address\"), strAddress);\n+            CGetTextFromUserDialog dialog(this, GetTranslationString(\"Add Address\"), GetTranslationString(\"Name\"), strName, GetTranslationString(\"Address\"), strAddress);\n             if (!dialog.ShowModal())\n                 return;\n             strName = dialog.GetValue1();\n             strAddress = dialog.GetValue2();\n         }\n-        while (CheckIfMine(strAddress, _(\"Add Address\")));\n+        while (CheckIfMine(strAddress, GetTranslationString(\"Add Address\")));\n     }\n     else if (nPage == RECEIVING)\n     {\n         // Ask name\n         CGetTextFromUserDialog dialog(this,\n-            _(\"New Receiving Address\"),\n-            _(\"You should use a new address for each payment you receive.\\n\\nLabel\"),\n+            GetTranslationString(\"New Receiving Address\"),\n+            GetTranslationString(\"You should use a new address for each payment you receive.\\n\\nLabel\"),\n             \"\");\n         if (!dialog.ShowModal())\n             return;\n@@ -2576,7 +2576,7 @@ void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)\n \n     // Add to list and select it\n     SetAddressBookName(strAddress, strName);\n-    int nIndex = InsertLine(m_listCtrl, strName, strAddress);\n+    int nIndex = InsertLine(m_listCtrl, wxString(strName.c_str(), wxConvUTF8), wxString(strAddress.c_str(), wxConvUTF8));\n     SetSelection(m_listCtrl, nIndex);\n     m_listCtrl->SetFocus();\n     if (nPage == SENDING)\n@@ -2586,7 +2586,7 @@ void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)\n void CAddressBookDialog::OnButtonOK(wxCommandEvent& event)\n {\n     // OK\n-    EndModal(GetSelectedAddress() != \"\" ? 1 : 0);\n+    EndModal(string(GetSelectedAddress().mb_str()) != \"\" ? 1 : 0);\n }\n \n void CAddressBookDialog::OnButtonCancel(wxCommandEvent& event)\n@@ -2634,11 +2634,11 @@ void CMyTaskBarIcon::Show(bool fShow)\n     static char pszPrevTip[200];\n     if (fShow)\n     {\n-        string strTooltip = _(\"Bitcoin\");\n+        string strTooltip = GetTranslationString(\"Bitcoin\");\n         if (fGenerateBitcoins)\n-            strTooltip = _(\"Bitcoin - Generating\");\n+            strTooltip = GetTranslationString(\"Bitcoin - Generating\");\n         if (fGenerateBitcoins && vNodes.empty())\n-            strTooltip = _(\"Bitcoin - (not connected)\");\n+            strTooltip = GetTranslationString(\"Bitcoin - (not connected)\");\n \n         // Optimization, only update when changed, using char array to be reentrant\n         if (strncmp(pszPrevTip, strTooltip.c_str(), sizeof(pszPrevTip)-1) != 0)\n@@ -2647,9 +2647,9 @@ void CMyTaskBarIcon::Show(bool fShow)\n #ifdef __WXMSW__\n             // somehow it'll choose the wrong size and scale it down if\n             // we use the main icon, so we hand it one with only 16x16\n-            SetIcon(wxICON(favicon), strTooltip);\n+            SetIcon(wxICON(favicon), wxString(strTooltip.c_str(), wxConvUTF8));\n #else\n-            SetIcon(bitcoin80_xpm, strTooltip);\n+            SetIcon(bitcoin80_xpm, wxString(strTooltip.c_str(), wxConvUTF8));\n #endif\n         }\n     }\n@@ -2804,7 +2804,7 @@ bool CMyApp::Initialize(int& argc, wxChar** argv)\n             strlwr(pszLower);\n             str = pszLower;\n             #endif\n-            if (str == \"-daemon\")\n+            if (string(str.mb_str()) == \"-daemon\")\n                 fDaemon = true;\n         }\n     }\n@@ -2852,9 +2852,9 @@ bool CMyApp::OnInit()\n     g_isPainting = 10000;\n #endif\n #if defined(__WXMSW__ ) || defined(__WXMAC_OSX__)\n-    SetAppName(\"Bitcoin\");\n+    SetAppName(_T(\"Bitcoin\"));\n #else\n-    SetAppName(\"bitcoin\");\n+    SetAppName(_T(\"bitcoin\"));\n #endif\n #ifdef __WXMSW__\n #if wxUSE_UNICODE\n@@ -2873,13 +2873,13 @@ bool CMyApp::OnInit()\n \n     // Load locale/<lang>/LC_MESSAGES/bitcoin.mo language file\n     g_locale.Init(wxLANGUAGE_DEFAULT, 0);\n-    g_locale.AddCatalogLookupPathPrefix(\"locale\");\n+    g_locale.AddCatalogLookupPathPrefix(_T(\"locale\"));\n #ifndef __WXMSW__\n-    g_locale.AddCatalogLookupPathPrefix(\"/usr/share/locale\");\n-    g_locale.AddCatalogLookupPathPrefix(\"/usr/local/share/locale\");\n+    g_locale.AddCatalogLookupPathPrefix(_T(\"/usr/share/locale\"));\n+    g_locale.AddCatalogLookupPathPrefix(_T(\"/usr/local/share/locale\"));\n #endif\n-    g_locale.AddCatalog(\"wxstd\"); // wxWidgets standard translations, if any\n-    g_locale.AddCatalog(\"bitcoin\");\n+    g_locale.AddCatalog(_T(\"wxstd\")); // wxWidgets standard translations, if any\n+    g_locale.AddCatalog(_T(\"bitcoin\"));\n \n #ifdef __WXMSW__\n     HDC hdc = GetDC(NULL);\n@@ -2891,7 +2891,14 @@ bool CMyApp::OnInit()\n     }\n #endif\n \n-    return AppInit(argc, argv);\n+    char* chArgv[argc];\n+    for (int i = 1; i < argc; i++)\n+    {\n+        chArgv[i] = (char *)malloc((wxStrlen(argv[i]) + 1) * sizeof(char));\n+        strlcpy(chArgv[i], wxString(argv[i]).mb_str(wxConvUTF8), wxStrlen(argv[i]) + 1);\n+    }\n+\n+    return AppInit(argc, chArgv);\n }\n \n int CMyApp::OnExit()\n@@ -2909,14 +2916,14 @@ bool CMyApp::OnExceptionInMainLoop()\n     catch (std::exception& e)\n     {\n         PrintException(&e, \"CMyApp::OnExceptionInMainLoop()\");\n-        wxLogWarning(\"Exception %s %s\", typeid(e).name(), e.what());\n+        wxLogWarning(_T(\"Exception %s %s\"), typeid(e).name(), e.what());\n         Sleep(1000);\n         throw;\n     }\n     catch (...)\n     {\n         PrintException(NULL, \"CMyApp::OnExceptionInMainLoop()\");\n-        wxLogWarning(\"Unknown exception\");\n+        wxLogWarning(_T(\"Unknown exception\"));\n         Sleep(1000);\n         throw;\n     }\n@@ -2933,20 +2940,20 @@ void CMyApp::OnUnhandledException()\n     catch (std::exception& e)\n     {\n         PrintException(&e, \"CMyApp::OnUnhandledException()\");\n-        wxLogWarning(\"Exception %s %s\", typeid(e).name(), e.what());\n+        wxLogWarning(_T(\"Exception %s %s\"), typeid(e).name(), e.what());\n         Sleep(1000);\n         throw;\n     }\n     catch (...)\n     {\n         PrintException(NULL, \"CMyApp::OnUnhandledException()\");\n-        wxLogWarning(\"Unknown exception\");\n+        wxLogWarning(_T(\"Unknown exception\"));\n         Sleep(1000);\n         throw;\n     }\n }\n \n void CMyApp::OnFatalException()\n {\n-    wxMessageBox(_(\"Program has crashed and will terminate.  \"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+    wxMessageBox(_(\"Program has crashed and will terminate.  \"), _T(\"Bitcoin\"), wxOK | wxICON_ERROR);\n }"
      },
      {
        "sha": "73f2beb57b43473cdfaa691c7bc5ef1a6611d1e9",
        "filename": "src/ui.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/ui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/ui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.h?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -24,14 +24,14 @@ void SetStartOnSystemStartup(bool fAutoStart);\n \n \n \n-inline int MyMessageBox(const wxString& message, const wxString& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n+inline int MyMessageBox(const wxString& message, const wxString& caption=_T(\"Message\"), int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n {\n #ifdef GUI\n     if (!fDaemon)\n         return wxMessageBox(message, caption, style, parent, x, y);\n #endif\n-    printf(\"wxMessageBox %s: %s\\n\", std::string(caption).c_str(), std::string(message).c_str());\n-    fprintf(stderr, \"%s: %s\\n\", std::string(caption).c_str(), std::string(message).c_str());\n+    printf(\"wxMessageBox %s: %s\\n\", std::string(caption.mb_str()).c_str(), std::string(message.mb_str()).c_str());\n+    fprintf(stderr, \"%s: %s\\n\", std::string(caption.mb_str()).c_str(), std::string(message.mb_str()).c_str());\n     return wxOK;\n }\n #define wxMessageBox  MyMessageBox\n@@ -174,7 +174,7 @@ class CSendDialog : public CSendDialogBase\n \t\n public:\n     /** Constructor */\n-    CSendDialog(wxWindow* parent, const wxString& strAddress=\"\");\n+    CSendDialog(wxWindow* parent, const wxString& strAddress=_T(\"\"));\n \n     // Custom\n     bool fEnabledPrev;\n@@ -287,20 +287,20 @@ class CGetTextFromUserDialog : public CGetTextFromUserDialogBase\n                            const std::string& strMessage1,\n                            const std::string& strValue1=\"\",\n                            const std::string& strMessage2=\"\",\n-                           const std::string& strValue2=\"\") : CGetTextFromUserDialogBase(parent, wxID_ANY, strCaption)\n+                           const std::string& strValue2=\"\") : CGetTextFromUserDialogBase(parent, wxID_ANY, wxString(strCaption.c_str(), wxConvUTF8))\n     {\n         int x = GetSize().GetWidth();\n         int y = GetSize().GetHeight();\n-        m_staticTextMessage1->SetLabel(strMessage1);\n-        m_textCtrl1->SetValue(strValue1);\n-        y += wxString(strMessage1).Freq('\\n') * 14;\n+        m_staticTextMessage1->SetLabel(wxString(strMessage1.c_str(), wxConvUTF8));\n+        m_textCtrl1->SetValue(wxString(strValue1.c_str(), wxConvUTF8));\n+        y += wxString(strMessage1.c_str(), wxConvUTF8).Freq('\\n') * 14;\n         if (!strMessage2.empty())\n         {\n             m_staticTextMessage2->Show(true);\n-            m_staticTextMessage2->SetLabel(strMessage2);\n+            m_staticTextMessage2->SetLabel(wxString(strMessage2.c_str(), wxConvUTF8));\n             m_textCtrl2->Show(true);\n-            m_textCtrl2->SetValue(strValue2);\n-            y += 46 + wxString(strMessage2).Freq('\\n') * 14;\n+            m_textCtrl2->SetValue(wxString(strValue2.c_str(), wxConvUTF8));\n+            y += 46 + wxString(strMessage2.c_str(), wxConvUTF8).Freq('\\n') * 14;\n         }\n #ifndef __WXMSW__\n         x = x * 114 / 100;\n@@ -310,9 +310,9 @@ class CGetTextFromUserDialog : public CGetTextFromUserDialogBase\n     }\n \n     // Custom\n-    std::string GetValue()  { return (std::string)m_textCtrl1->GetValue(); }\n-    std::string GetValue1() { return (std::string)m_textCtrl1->GetValue(); }\n-    std::string GetValue2() { return (std::string)m_textCtrl2->GetValue(); }\n+    std::string GetValue()  { return std::string(m_textCtrl1->GetValue().mb_str()); }\n+    std::string GetValue1() { return std::string(m_textCtrl1->GetValue().mb_str()); }\n+    std::string GetValue2() { return std::string(m_textCtrl2->GetValue().mb_str()); }\n };\n \n "
      },
      {
        "sha": "5904bfdc798eae930e1f5b721f20445fcbe34b37",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -575,7 +575,7 @@ void PrintException(std::exception* pex, const char* pszThread)\n     strMiscWarning = pszMessage;\n #ifdef GUI\n     if (wxTheApp && !fDaemon)\n-        MyMessageBox(pszMessage, \"Bitcoin\", wxOK | wxICON_ERROR);\n+        MyMessageBox(wxString(pszMessage, wxConvUTF8), _T(\"Bitcoin\"), wxOK | wxICON_ERROR);\n #endif\n     throw;\n }\n@@ -863,7 +863,7 @@ void AddTimeData(unsigned int ip, int64 nTime)\n                 if (!fMatch)\n                 {\n                     fDone = true;\n-                    string strMessage = _(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n+                    string strMessage = GetTranslationString(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n                     strMiscWarning = strMessage;\n                     printf(\"*** %s\\n\", strMessage.c_str());\n                     boost::thread(boost::bind(ThreadSafeMessageBox, strMessage+\" \", string(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION, (wxWindow*)NULL, -1, -1));\n@@ -896,7 +896,7 @@ string FormatFullVersion()\n {\n     string s = FormatVersion(VERSION) + pszSubVer;\n     if (VERSION_IS_BETA)\n-        s += _(\"-beta\");\n+        s += GetTranslationString(\"-beta\");\n     return s;\n }\n "
      },
      {
        "sha": "a4cf15fbacadc755628d3921d8d70bb31e7e004b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483a3bd63ea698f2d1b0d1adc4064e4726894a98/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=483a3bd63ea698f2d1b0d1adc4064e4726894a98",
        "patch": "@@ -139,11 +139,43 @@ inline int myclosesocket(SOCKET& hSocket)\n }\n #define closesocket(s)      myclosesocket(s)\n \n-#ifndef GUI\n+#ifdef GUI\n+inline wxString GetWXOrStdString(std::string psz)\n+{\n+    return wxString(psz.c_str(), wxConvUTF8);\n+}\n+inline std::string GetTranslationString(const char* psz)\n+{\n+    return std::string(((wxString)wxGetTranslation(wxString(psz, wxConvUTF8))).mb_str());\n+}\n+inline const char* GetTranslationChar(const char* psz)\n+{\n+    int nTranslationLength = wxStrlen((wxString)wxGetTranslation(wxString(psz, wxConvUTF8)));\n+    char* retChar = (char*)malloc((nTranslationLength + 1) * sizeof(char));\n+    strlcpy(retChar, ((wxString)wxGetTranslation(wxString(psz, wxConvUTF8))).mb_str(wxConvUTF8), nTranslationLength + 1);\n+    return retChar;\n+}\n+#else\n+inline std::string GetWXOrStdString(std::string psz)\n+{\n+    return psz;\n+}\n+inline std::string GetTranslationString(const char* psz)\n+{\n+    return std::string(psz);\n+}\n+inline const char* GetTranslationChar(const char* psz)\n+{\n+    return psz;\n+}\n inline const char* _(const char* psz)\n {\n     return psz;\n }\n+inline const char* _T(const char* psz)\n+{\n+    return psz;\n+}\n #endif\n \n "
      }
    ]
  }
]