DrahtBot,2021-08-30 22:28:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23512](https://github.com/bitcoin/bitcoin/pull/23512) (policy: Treat taproot as always active by MarcoFalke)\n* [#23417]",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-908748127,908748127,
Rspigler,2021-09-01 05:48:41,"Strong concept ACK!\n\nGlad this is getting a fix.  As discussed in 17190 and OP, there's more improvements that can come after this.\n",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-909916556,909916556,
mjdietzx,2021-09-03 19:10:18,Concept and Approach ACK. I plan on updating the test and docs introduced in #22067 to take advantage of this in a follow up PR. So I will try to do a more thorough review and testing of this after that is merged and I start on the followup based on this branch. (or if it looks like this will get merged first I will do that earlier),https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-912752496,912752496,
Sjors,2021-09-29 09:36:52,"> Note that the path specifier is different from what was proposed. It uses angle brackets and the semicolon because these are unused characters available in the character set and I wanted to avoid conflicts with characters already in use in descriptors.\n\n`{0,1}` seems more readable and would at least be a subset of [BIP 88](https://github.com/bitcoin/bips/blob/master/bip-0088.mediawiki). The ",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-930013431,930013431,
achow101,2021-09-29 17:16:43,"> The conflict is with taproot descriptors, which use `{` and `,` for nesting the scripts.\n\nThe conflict is actually with the `,` in a variety of descriptors. The particular issue I had run into was using `,` in a `multi()` descriptor. Since `,` is used to separate the components of `multi()`, the parser would look for the next `,` for the next item to parse. If we use `,` for the multipath sp",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-930374136,930374136,
mjdietzx,2021-10-18 19:09:22,"I'm doing some more review/testing of this PR, but when I checkout this PR and rebase to master, I get build error:\n```bash\nwallet/rpcwallet.cpp:3387:45: error: no viable conversion from 'std::pair<std::unique_ptr<Descriptor>, std::unique_ptr<Descriptor> >' to 'std::unique_ptr<Descriptor>'\n  std::unique_ptr<Descriptor> desc = Parse(desc_str, desc_out, error, true);\n```",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946080177,946080177,
achow101,2021-10-18 20:58:20,Fixed the silent merge conflict.,https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946159692,946159692,
mjdietzx,2021-10-18 22:32:35,"So in my tests, from this multipath descriptor string: `f""wsh(sortedmulti(M},{f'/<0;1>/*,'.join(xpubs)}/<0;1>/*))""`\n\nI have a descriptor that looks like this:\n\n```python\n{\n  'descriptor': 'wsh(sortedmulti(2,tpubDCcZnBitiPCBqsdLWx8Lkc2BrsvVTdZU2Gcioi8yY76HrGSvp4oWyxZ5GUKGVcjdv4wzWbfntfLdcEEfVRamhSgwi1ZxgfNtayQ2QEEjfTv/0/*,tpubDCMtV5vMS9Zn2paRcw7o83ytLY7WHMCGYRSDxhz7HWnZ4ix19EQpi7g3wvYxE",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946220198,946220198,
achow101,2021-10-18 22:52:28,"@mjdietzx `importdescriptors` is probably failing. You should check the result of the import and see if there are any errors.\n\nIs your branch pushed so I can have a look?",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946228642,946228642,
mjdietzx,2021-10-18 22:56:18,"In my code I actually have:\n\n```python\nresult = multisig.importdescriptors([\n                {\n                    ""desc"": descriptor[""descriptor""],\n                    ""active"": True,\n                    ""timestamp"": ""now"",\n                },\n            ])\n            assert all(r[""success""] for r in result)\n```\n\nAnd that doesn't catch any errors. I will push my branch ",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946230118,946230118,
mjdietzx,2021-10-18 23:41:14,"I had an error in my tests - it seems everything in this PR is working properly.\n\nThis works:\n```python\nresult = multisig.importdescriptors([\n  {\n    ""desc"": descsum_create(f""wsh(sortedmulti({self.M},{f'/<0;1>/*,'.join(xpubs)}/<0;1>/*))""),\n    ""active"": True,\n    ""timestamp"": ""now"",\n  },\n])\n```\n\nre the error I posted eariler, I was trying to do this (using `getdescriptori",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946250177,946250177,
achow101,2021-10-18 23:50:17,"> We used `getdescriptorinfo` instead of `descsum_create` so `test/functional/wallet_multisig_descriptor_psbt.py` will only use node functions without an additional script for the checksum (see review of #22067 for more info). I wonder if this is useful user feedback at all @achow101? I'm specifically wondering about the interface of `getdescriptorinfo` now, and if it would make sense to return so",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946253347,946253347,
mjdietzx,2021-10-23 21:58:25,Review ACK 796c439. I also lightly used/tested this by running #23308 on top of this as additional test coverage.,https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950223294,950223294,
mjdietzx,2021-10-24 17:57:20,"I think there may be another silent merge conflict w/ master:\n\n```bash\nwallet/test/util.cpp:33:37: error: no viable conversion from 'std::pair<std::unique_ptr<Descriptor>, std::unique_ptr<Descriptor> >' to 'std::unique_ptr<Descriptor>'\n        std::unique_ptr<Descriptor> desc = Parse(""combo("" + EncodeSecret(key) + "")"", provider, error, /* require_checksum=*/ false);\n```\n\nCan you try ",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950366689,950366689,
achow101,2021-10-24 22:23:36,Rebased again,https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950405427,950405427,
mjdietzx,2021-10-24 23:41:11,reACK a6ff1c7,https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950417960,950417960,
DrahtBot,2021-11-25 07:42:45,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-978914994,978914994,
MarcoFalke,2021-10-19 12:00:39,"```\nscript/descriptor.cpp:1298:36: error: moving a temporary object prevents copy elision [-Werror,-Wpessimizing-move]\n            internal_keys.second = std::move(internal_keys.first->Clone());\n                                   ^\nscript/descriptor.cpp:1298:36: note: remove std::move call here\n            internal_keys.second = std::move(internal_keys.first->Clone());",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731789078,731789078,src/script/descriptor.cpp
mjdietzx,2021-10-19 14:50:05,"I'm still not convinced this is the best interface for `getdescriptorinfo`\n\nI'd expect `descriptor` to always be the full descriptor (whether multipath or not). In the case of multipath, I'd then expect two optional attributes `descriptor_receiving` and `descriptor_change` to be present in the response.",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731951961,731951961,src/rpc/misc.cpp
mjdietzx,2021-10-19 14:50:25,nit: `descriptor_change` should be optional,https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731952329,731952329,src/rpc/misc.cpp
mjdietzx,2021-10-19 14:53:30,"Is it worth having an assertion that if `desc.second` is defined, then `desc.first` must also be defined here?\n\nThen for L31,L32 should we be asserting that `desc.first->IsRange() == desc.second->IsRange()` and `desc.first->IsSolvable() == desc.second->IsSolvable()`?",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731955977,731955977,src/test/fuzz/descriptor_parse.cpp
achow101,2021-10-19 17:02:12,`descriptor` cannot currently be the multipath descriptor as generating the string output for one is not yet implemented. I'm not sure on a good approach for doing that yet.,https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732073045,732073045,src/rpc/misc.cpp
achow101,2021-10-19 17:45:09,Fixed,https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732105971,732105971,src/script/descriptor.cpp
achow101,2021-10-19 17:46:42,Done,https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732107085,732107085,src/test/fuzz/descriptor_parse.cpp
mjdietzx,2021-10-19 20:44:27,"Are you saying something like:\n\n- The multipath `descriptor` string input to `getdescriptorinfo` is parsed/expanded to the two descriptors\n- Now each of these descriptors is converted back `ToString` and returned as `descriptor` (first) and `descriptor_change` (second)\n\nAnd that we currently don't have a way to go from the two parsed/expanded descriptors back to the single multipath desc",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732230299,732230299,src/rpc/misc.cpp
achow101,2021-10-19 21:12:58,"Yes, that is correct.",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732248223,732248223,src/rpc/misc.cpp
mjdietzx,2021-10-19 21:24:00,"Ok, so what's the downside of something like:\n- Each of these parsed descriptors is converted back `ToString` and returned as `descriptor_receiving` (first) and descriptor_change (second)\n- The same multipath `descriptor` string input to `getdescriptorinfo` is just returned for the `descriptor` output (with a checksum added)",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732254681,732254681,src/rpc/misc.cpp
mjdietzx,2021-10-23 15:24:24,"I've been thinking through the response returned here. It doesn't seem ideal that the shape of this response differs between a single descriptor and a multipath descriptor. Ie this returns an array of addresses if we pass in a descriptor, but it returns an object if we pass in a multipath descriptor.\n\nHave you thought through an api where the response is more uniform and ""feels"" the same for b",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734981897,734981897,src/rpc/misc.cpp
mjdietzx,2021-10-23 15:25:40,"Related to my above comment, if the response is uniform we could potentially simplify this a bit and have a single return at the end of the function",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734981967,734981967,src/rpc/misc.cpp
mjdietzx,2021-10-23 15:27:43,"@achow101 could you entertain me on this, if nothing else it'll help me understand this better as I finish up my review",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734982142,734982142,src/rpc/misc.cpp
achow101,2021-10-23 20:35:47,The primary reason for having the two different return results is to maintain backwards compatibility with anyone who may be using the RPC now.,https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735017916,735017916,src/rpc/misc.cpp
achow101,2021-10-23 20:41:36,"#15986 provides a bit more context for this.\n\nThere are a few reasons I would prefer to not change the behavior of the `descriptor` result. The first is for backwards compatibility. This RPC may already be used in a way that expects the canonicalized descriptor produced by `getdescriptorinfo` in the `descriptor` field. Additionally, if a descriptor with a private key were provided, if we were ",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735018483,735018483,src/rpc/misc.cpp
mjdietzx,2021-10-23 22:00:41,"Yeah, I figured there'd need to be a deprecation process if we wanted to do this. Anyways, if you think it's enough of an improvement to warrant that I'd be happy to do give it a go as a followup PR. Just lmk",https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735034342,735034342,src/rpc/misc.cpp
