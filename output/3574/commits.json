[
  {
    "sha": "74ad5868245790c1f6c712c6afaa0d76398d2d7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGFkNTg2ODI0NTc5MGMxZjZjNzEyYzZhZmFhMGQ3NjM5OGQyZDdk",
    "commit": {
      "author": {
        "name": "aalness",
        "email": "andy.alness@gmail.com",
        "date": "2014-01-22T23:45:34Z"
      },
      "committer": {
        "name": "aalness",
        "email": "andy.alness@gmail.com",
        "date": "2014-01-25T00:30:25Z"
      },
      "message": "Fix for: https://github.com/bitcoin/bitcoin/issues/2667\n\nlockunspent will now validate all of the provided outputs are\nboth unspent and belong to the local wallet.\n\nThe operation is now also atomic.",
      "tree": {
        "sha": "61bdc2f8803ccb92fef74efea68ca80ef733e7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61bdc2f8803ccb92fef74efea68ca80ef733e7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74ad5868245790c1f6c712c6afaa0d76398d2d7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74ad5868245790c1f6c712c6afaa0d76398d2d7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74ad5868245790c1f6c712c6afaa0d76398d2d7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74ad5868245790c1f6c712c6afaa0d76398d2d7d/comments",
    "author": {
      "login": "aalness",
      "id": 4391003,
      "node_id": "MDQ6VXNlcjQzOTEwMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4391003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aalness",
      "html_url": "https://github.com/aalness",
      "followers_url": "https://api.github.com/users/aalness/followers",
      "following_url": "https://api.github.com/users/aalness/following{/other_user}",
      "gists_url": "https://api.github.com/users/aalness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aalness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aalness/subscriptions",
      "organizations_url": "https://api.github.com/users/aalness/orgs",
      "repos_url": "https://api.github.com/users/aalness/repos",
      "events_url": "https://api.github.com/users/aalness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aalness/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "aalness",
      "id": 4391003,
      "node_id": "MDQ6VXNlcjQzOTEwMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4391003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aalness",
      "html_url": "https://github.com/aalness",
      "followers_url": "https://api.github.com/users/aalness/followers",
      "following_url": "https://api.github.com/users/aalness/following{/other_user}",
      "gists_url": "https://api.github.com/users/aalness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aalness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aalness/subscriptions",
      "organizations_url": "https://api.github.com/users/aalness/orgs",
      "repos_url": "https://api.github.com/users/aalness/repos",
      "events_url": "https://api.github.com/users/aalness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aalness/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c3cd878b94e6aaa480d9fbced8d23965b096771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c3cd878b94e6aaa480d9fbced8d23965b096771",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c3cd878b94e6aaa480d9fbced8d23965b096771"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 72,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0b1eecd07a2ce6a3531e6b8cd312d8e2e36b9ae8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ad5868245790c1f6c712c6afaa0d76398d2d7d/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ad5868245790c1f6c712c6afaa0d76398d2d7d/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=74ad5868245790c1f6c712c6afaa0d76398d2d7d",
        "patch": "@@ -1774,6 +1774,8 @@ Value lockunspent(const Array& params, bool fHelp)\n     }\n \n     Array outputs = params[1].get_array();\n+\n+    // Validate all of the outputs first.\n     BOOST_FOREACH(Value& output, outputs)\n     {\n         if (output.type() != obj_type)\n@@ -1791,7 +1793,26 @@ Value lockunspent(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n         COutPoint outpt(uint256(txid), nOutput);\n+        \n+        if (fUnlock)\n+        {\n+            if (!pwalletMain->IsLockedCoin(outpt.hash, outpt.n))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n+        }\n+        else if (!pwalletMain->IsAvailableCoin(outpt))\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected available output\");\n+        }\n+    }\n \n+    // Atomically set (un)locked status for the outputs.\n+    BOOST_FOREACH(Value& output, outputs)\n+    {\n+        const Object& o = output.get_obj();\n+        string txid = find_value(o, \"txid\").get_str();\n+        int nOutput = find_value(o, \"vout\").get_int();\n+        COutPoint outpt(uint256(txid), nOutput);\n+\t\t\n         if (fUnlock)\n             pwalletMain->UnlockCoin(outpt);\n         else"
      },
      {
        "sha": "208d208be6e59310d0b01c4be335b90663bce50b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 14,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ad5868245790c1f6c712c6afaa0d76398d2d7d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ad5868245790c1f6c712c6afaa0d76398d2d7d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=74ad5868245790c1f6c712c6afaa0d76398d2d7d",
        "patch": "@@ -925,6 +925,20 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n+bool CWalletTx::IsAvailable(bool fCheckConfirmed) const\n+{\n+    if (!IsFinalTx(*this))\n+        return false;\n+    \n+    if (fCheckConfirmed && !IsConfirmed())\n+        return false;\n+    \n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return false;\n+    \n+    return true;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away\n@@ -1029,26 +1043,45 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-\n-            if (!IsFinalTx(*pcoin))\n-                continue;\n-\n-            if (fOnlyConfirmed && !pcoin->IsConfirmed())\n-                continue;\n-\n-            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            if (!pcoin->IsAvailable(fOnlyConfirmed))\n                 continue;\n-\n-            for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n-                    !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n-                    (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n+            \n+            for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n+            {\n+                if (IsAvailableCoin(*pcoin, (*it).first, i, coinControl))\n+                    vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n             }\n         }\n     }\n }\n \n+bool CWallet::IsAvailableCoin(const COutPoint& output, bool fCheckConfirmed) const\n+{\n+    AssertLockHeld(cs_wallet); // mapWallet\n+    \n+    map<uint256, CWalletTx>::const_iterator it = mapWallet.find(output.hash);\n+    if (it == mapWallet.end())\n+        return false;\n+    \n+    const CWalletTx& coin = (*it).second;\n+    if (!coin.IsAvailable(fCheckConfirmed))\n+        return false;\n+    \n+    return IsAvailableCoin(coin, output.hash, output.n, NULL);\n+}\n+\n+bool CWallet::IsAvailableCoin(const CWalletTx& coin, uint256 hash, unsigned int n, const CCoinControl *coinControl) const\n+{\n+    // It's assumed the caller has tested coin.IsAvailable().\n+    // It can be costly so we don't want to call it unnecessarily.\n+    if (n >= coin.vout.size())\n+        return false;\n+    \n+    return (!(coin.IsSpent(n)) && IsMine(coin.vout[n]) &&\n+            !IsLockedCoin(hash, n) && coin.vout[n].nValue > 0 &&\n+            (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected(hash, n)));\n+}\n+\n static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > >vValue, int64_t nTotalLower, int64_t nTargetValue,\n                                   vector<char>& vfBest, int64_t& nBest, int iterations = 1000)\n {"
      },
      {
        "sha": "1f0d025762b74f63e6400ac50fde62565e500b40",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ad5868245790c1f6c712c6afaa0d76398d2d7d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ad5868245790c1f6c712c6afaa0d76398d2d7d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=74ad5868245790c1f6c712c6afaa0d76398d2d7d",
        "patch": "@@ -95,6 +95,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n {\n private:\n     bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool IsAvailableCoin(const CWalletTx& coin, uint256 hash, unsigned int n, const CCoinControl *coinControl) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -167,6 +168,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n \n+    bool IsAvailableCoin(const COutPoint& output, bool fCheckConfirmed=false) const;\n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n@@ -745,6 +747,8 @@ class CWalletTx : public CMerkleTx\n     void AddSupportingTransactions();\n     bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n+\n+    bool IsAvailable(bool fCheckConfirmed) const;\n };\n \n "
      }
    ]
  }
]