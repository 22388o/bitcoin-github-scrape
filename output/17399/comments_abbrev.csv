DrahtBot,2019-11-07 03:36:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18077 (net: Add NAT-PMP port forwarding support by hebasto)\n* #17828 (net: Use log categories when logging events that P",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-550647765,550647765,
laanwj,2019-11-08 08:37:55,"Concept ACK.\n\n> Added #includes and template function might slow down compilation a bit, though.\n\nYes, although this is a quite straightforward use of templates, no boost nested template horrors, so I hope it's not too bad.",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-551436906,551436906,
jnewbery,2019-11-08 20:21:38,Concept ACK. Will review code once @ajtowns's comments are addressed.,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-551976554,551976554,
practicalswift,2019-11-11 12:44:32,Concept ACK: new code is easier to reason about,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-552431092,552431092,
jnewbery,2019-11-13 19:41:02,utACK 2948ebd29d0a53f11aefc8546bcac4125c726cc6,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-553567363,553567363,
jkczyz,2019-11-30 00:58:41,Rebased and updated to account for #17624 in 1452949.,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-559900971,559900971,
MarcoFalke,2019-12-20 18:00:26,"ACK 14529499743e071ddc091e5508e1eea4532e754d üéè\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 14529499743e071ddc091e5508e1eea4532e754d üéè\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgCpgv/XrM9w3dqV6IqX53LVCU81lx6hex2Gjbb8X0wb2rfaBxS1H/y+D",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-568021496,568021496,
jnewbery,2019-12-20 23:23:57,"utACK 14529499743e071ddc091e5508e1eea4532e754d\n\nSince the initialization relies on `[TX|BLOCK]_RESULT_UNSET` being 0, what do you think of:\n\n```diff\n--- a/src/consensus/validation.h\n+++ b/src/consensus/validation.h\n@@ -16,7 +16,7 @@\n   * provider of the transaction should be banned/ignored/disconnected/etc.\n   */\n enum class TxValidationResult {\n-    TX_RESULT_UNSET,         ",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-568123586,568123586,
jkczyz,2019-12-22 03:46:34,"> utACK [1452949](https://github.com/bitcoin/bitcoin/commit/14529499743e071ddc091e5508e1eea4532e754d)\n> \n> Since the initialization relies on `[TX|BLOCK]_RESULT_UNSET` being 0, what do you think of:\n> \n> ```diff\n> --- a/src/consensus/validation.h\n> +++ b/src/consensus/validation.h\n> @@ -16,7 +16,7 @@\n>    * provider of the transaction should be banned/ignored/disconnected/etc.\n> ",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-568230358,568230358,
jnewbery,2019-12-22 15:38:36,ACK a975974,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-568273358,568273358,
jkczyz,2020-01-03 20:40:53,Rebased,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-570692008,570692008,
jnewbery,2020-01-03 21:00:03,reACK 2afff87a88a3f539cece488f927386a6e106cdc2,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-570696571,570696571,
ariard,2020-01-03 23:16:10,"ACK 2afff87, only change since 1452949 is default initialization first member of `TxValidationResult`/`BlockValidationResult` enums to 0.",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-570726396,570726396,
jkczyz,2020-01-09 22:47:23,"Rebased to account for changes in #16688. Specifically, pushed 7bb194ba252191b531803ad2952c984c70d192da to:\n\n- Account for changes to `FormatStateMessage` made in 72f3227c83810936e7a334304e5fd7c6dab8e91b and 6edebacb2191373e76d79a4972d6192300976096\n- Update use of `FormatStateMessage` in f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f\n\nCan be verified with:\n```\ngit range-diff 17e14ac..2afff",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-572792303,572792303,
jnewbery,2020-01-10 18:43:38,code review ACK bf5bc260e914e2413bed4041e5089fdee03a344a,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-573157577,573157577,
MarcoFalke,2020-02-28 19:17:44,"ACK 10efc0487c442bccb0e4a9ac29452af1592a3cf2 üê±\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 10efc0487c442bccb0e4a9ac29452af1592a3cf2 üê±\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiSBQv9GTJ4FVCrg3wq2XM0X75nYvO3+OK32UmnzgXDJjk7Pghohc7v7m",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-592683577,592683577,
practicalswift,2020-02-29 19:47:27,ACK 10e85d4adc9b7dbbda63e00195e0a962f51e4d2c -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-592987312,592987312,
ajtowns,2020-03-01 12:53:03,ACK 10efc0487c442bccb0e4a9ac29452af1592a3cf2 -- looks good to me,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-593093757,593093757,
jonatack,2020-03-01 14:06:33,"ACK 10efc048 code review, build/tests green, nice cleanup",https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-593101169,593101169,
practicalswift,2020-03-01 20:37:46,post-merge ACK 10efc0487c442bccb0e4a9ac29452af1592a3cf2,https://github.com/bitcoin/bitcoin/pull/17399#issuecomment-593142479,593142479,
promag,2019-11-07 10:28:17,"nit, in L85 do `} m_mode{MODE_VALID};` and drop constructor?",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r343577327,343577327,src/consensus/validation.h
promag,2019-11-07 10:33:17,You can still forward declare `TxValidationState` and `BlockValidationState` where needed and avoid the issues pointed by @ryanofsky?,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r343579534,343579534,src/consensus/tx_check.h
jkczyz,2019-11-07 18:28:55,"This causes a compilation error:\n\n```console\nIn file included from consensus/tx_check.cpp:8:\n./consensus/validation.h:115:7: error: typedef redefinition with different types ('ValidationState<TxValidationResult>' vs 'TxValidationState')\nusing TxValidationState = ValidationState<TxValidationResult>;\n      ^\n./consensus/tx_check.h:16:7: note: previous definition is here\nclass TxValid",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r343805188,343805188,src/consensus/tx_check.h
jkczyz,2019-11-07 18:30:29,The diff here is a bit misleading as I'm actually moving `Invalid` to the `public` section and not modifying the constructor. Is the convention to put this in a separate a commit? Or would it be considered outside the scope of the PR?,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r343805959,343805959,src/consensus/validation.h
ajtowns,2019-11-08 11:35:46,"Could move this into ValidationState directly, and make it\n```\nstd::string FormatStateMessage() const { return m_reject_reason + (m_debug_message.empty() ? """" : "", "" + m_debug_message); }\n```",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344134666,344134666,src/util/validation.h
ajtowns,2019-11-08 11:38:26,I think you can do `class TxValidationState : ValidationState<TxValidationResult> { };` and still be able to use forward declarations `class TxValidationState;` fwiw.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344135555,344135555,src/consensus/validation.h
promag,2019-11-08 21:26:30,"Right, but the constructor could still be dropped.",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344373034,344373034,src/consensus/validation.h
jkczyz,2019-11-08 22:15:34,Good idea! Done in 0468628.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344388046,344388046,src/consensus/validation.h
jkczyz,2019-11-08 22:15:38,Done in 7239d01 but named it `ToString` since #16688 uses it for valid states as well.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344388068,344388068,src/util/validation.h
jkczyz,2019-11-08 22:16:36,Understood. But that doesn't answer either of my questions... ü§î ,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344388339,344388339,src/consensus/validation.h
jnewbery,2019-11-11 14:48:34,"It seems a bit sad to leave this const all by itself in this implementation file. Perhaps move it to the header file and change to a constexpr? Bonus points for renaming `util/validation.h` to `util/strings.h` since it isn't anything to do with validation any more, and I can't find anywhere that would be a better home for this const.",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344745928,344745928,src/util/validation.cpp
promag,2019-11-11 15:37:58,"IMHO could be added in ""Templatize ValidationState instead of subclassing"", but no big deal.",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344770116,344770116,src/consensus/validation.h
MarcoFalke,2019-11-11 16:06:30,"I don't thing `std::string` can be constexpr. Also, moving it to the header file might inline it in every translation unit. Probably doesn't matter for a short string like this, but no need to change existing code to make it worse.",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344784418,344784418,src/util/validation.cpp
jnewbery,2019-11-11 16:49:16,You're right. `std::string` can't be constexpr.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344805277,344805277,src/util/validation.cpp
jkczyz,2019-11-11 23:14:35,"Looking at the references to `strMessageMagic`, they are always of the form:\n\n```c++\nCHashWriter ss(SER_GETHASH, 0);\nss << strMessageMagic;\nss << strMessage;\n```\n\nAnd then the result of its `GetHash` is passed to either `SignCompact` or `RecoverCompact`, and the variable `ss` is never used again.\n\nSo the above code could be refactored into a function where `strMessageMagic` is ",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344952441,344952441,src/util/validation.cpp
jnewbery,2019-11-11 23:19:53,"> What does ss stand for here?\n\nNot sure. Serialization stream?",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344953771,344953771,src/util/validation.cpp
jnewbery,2019-11-11 23:22:58,(there have been `CDataStream ss` variables in the codebase since Satoshi era),https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344954492,344954492,src/util/validation.cpp
jkczyz,2019-11-11 23:24:38,Ended up doing this separately in 7470037 as it gives cleaner diffs.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344954883,344954883,src/consensus/validation.h
jkczyz,2019-11-12 00:41:30,"Perhaps I could move that boilerplate code to `util/hash.h` as `HashMessage`?\n\n```c++\nuint256 HashMessage(const std::string& message);\n```\n\nOpen to more suitable naming for the file and function. Note that `util/string.h` already exists for string joining, so the plural version may be confusing.\n\nWould likely leave this to a follow-up PR given I'd be refactoring call sites.",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r344971883,344971883,src/util/validation.cpp
jnewbery,2019-11-13 19:38:09,"> Open to more suitable naming for the file and function\n\nPerhaps `/util/message.h`?\n\n> Would likely leave this to a follow-up PR given I'd be refactoring call sites.\n\nYeah, anything other than a simple rename should be left as a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/17399#discussion_r345962034,345962034,src/util/validation.cpp
jkczyz,2019-11-22 06:28:50,Opened #17557 with the refactor.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r349448604,349448604,src/util/validation.cpp
jkczyz,2020-02-28 18:17:36,Rebased and was able to remove `util/validation.h` and `util/validation.cpp` now that #17577 is merged.,https://github.com/bitcoin/bitcoin/pull/17399#discussion_r385847650,385847650,src/util/validation.cpp
