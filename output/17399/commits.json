[
  {
    "sha": "0aed17ef2892478c28cd660e53223c6dd1dc0187",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWVkMTdlZjI4OTI0NzhjMjhjZDY2MGU1MzIyM2M2ZGQxZGMwMTg3",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-08T21:22:36Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2020-02-28T01:59:07Z"
      },
      "message": "Refactor FormatStateMessage into ValidationState",
      "tree": {
        "sha": "dc2290695c6d65e7917df9d83e8e4da5f5ce6e1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc2290695c6d65e7917df9d83e8e4da5f5ce6e1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0aed17ef2892478c28cd660e53223c6dd1dc0187",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aed17ef2892478c28cd660e53223c6dd1dc0187",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0aed17ef2892478c28cd660e53223c6dd1dc0187",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aed17ef2892478c28cd660e53223c6dd1dc0187/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe63d79eabf1a9a0084d43802620d34f383aa358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe63d79eabf1a9a0084d43802620d34f383aa358",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe63d79eabf1a9a0084d43802620d34f383aa358"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 47,
      "deletions": 87
    },
    "files": [
      {
        "sha": "0a1c45cf8ced059dcb12fcdcf982e0378f2c08f3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -229,7 +229,6 @@ BITCOIN_CORE_H = \\\n   util/time.h \\\n   util/translation.h \\\n   util/url.h \\\n-  util/validation.h \\\n   util/vector.h \\\n   validation.h \\\n   validationinterface.h \\\n@@ -528,7 +527,6 @@ libbitcoin_util_a_SOURCES = \\\n   util/string.cpp \\\n   util/time.cpp \\\n   util/url.cpp \\\n-  util/validation.cpp \\\n   $(BITCOIN_CORE_H)\n \n if GLIBC_BACK_COMPAT"
      },
      {
        "sha": "4ead26a416dac3ea5527981fd8799195a19a5587",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -108,6 +108,18 @@ class ValidationState {\n     bool IsError() const { return m_mode == MODE_ERROR; }\n     std::string GetRejectReason() const { return m_reject_reason; }\n     std::string GetDebugMessage() const { return m_debug_message; }\n+    std::string ToString() const\n+    {\n+        if (IsValid()) {\n+            return \"Valid\";\n+        }\n+\n+        if (!m_debug_message.empty()) {\n+            return m_reject_reason + \", \" + m_debug_message;\n+        }\n+\n+        return m_reject_reason;\n+    }\n };\n \n inline ValidationState::~ValidationState() {};"
      },
      {
        "sha": "1c9faec8037181217e44848aff3b311b34e8df75",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -51,7 +51,6 @@\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <util/asmap.h>\n #include <validation.h>\n #include <hash.h>\n@@ -710,7 +709,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     BlockValidationState state;\n     if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n+        LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n         StartShutdown();\n         return;\n     }"
      },
      {
        "sha": "61d27d17c16e139a225e28eb026dc74488b9b804",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -20,7 +20,6 @@\n #include <timedata.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n #include <algorithm>\n #include <utility>\n@@ -167,7 +166,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     BlockValidationState state;\n     if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n-        throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+        throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();\n "
      },
      {
        "sha": "fa09b60630a28ca2f99922defe52b954c28acd6e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -26,7 +26,6 @@\n #include <txmempool.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n-#include <util/validation.h>\n \n #include <memory>\n #include <typeinfo>\n@@ -1432,7 +1431,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     if (need_activate_chain) {\n         BlockValidationState state;\n         if (!ActivateBestChain(state, Params(), a_recent_block)) {\n-            LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", FormatStateMessage(state));\n+            LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n \n@@ -2342,7 +2341,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             BlockValidationState state;\n             if (!ActivateBestChain(state, Params(), a_recent_block)) {\n-                LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", FormatStateMessage(state));\n+                LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }\n \n@@ -2636,7 +2635,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             LogPrint(BCLog::MEMPOOLREJ, \"%s from peer=%d was not accepted: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->GetId(),\n-                FormatStateMessage(state));\n+                state.ToString());\n             MaybePunishNodeForTx(pfrom->GetId(), state);\n         }\n         return true;"
      },
      {
        "sha": "201406ce3b69dfe574abfaf9c2c0725a657b0017",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -7,7 +7,6 @@\n #include <net.h>\n #include <net_processing.h>\n #include <node/context.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <node/transaction.h>\n@@ -41,7 +40,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         TxValidationState state;\n         if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = FormatStateMessage(state);\n+            err_string = state.ToString();\n             if (state.IsInvalid()) {\n                 if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n                     return TransactionError::MISSING_INPUTS;"
      },
      {
        "sha": "40637a552e26e1c76871939741bd8f97ae8ff683",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -31,7 +31,6 @@\n #include <undo.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n@@ -1486,7 +1485,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n     PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n     }\n \n     return NullUniValue;\n@@ -1524,7 +1523,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n     }\n \n     return NullUniValue;\n@@ -1561,7 +1560,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n     ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "5bfdcd6555f026164bc485b155993ff7a97642e1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -28,7 +28,6 @@\n #include <util/fees.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>\n@@ -307,7 +306,7 @@ static UniValue BIP22ValidationResult(const BlockValidationState& state)\n         return NullUniValue;\n \n     if (state.IsError())\n-        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());\n     if (state.IsInvalid())\n     {\n         std::string strRejectReason = state.GetRejectReason();\n@@ -823,7 +822,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n     ProcessNewBlockHeaders({h}, state, Params());\n     if (state.IsValid()) return NullUniValue;\n     if (state.IsError()) {\n-        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());\n     }\n     throw JSONRPCError(RPC_VERIFY_ERROR, state.GetRejectReason());\n }"
      },
      {
        "sha": "fc736bc3a1b2182b989d0ad4aea8aafcbb5ab772",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -25,7 +25,6 @@\n #include <util/strencodings.h>\n #include <util/time.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n@@ -123,7 +122,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n     BlockValidationState state;\n     if (!ActivateBestChain(state, chainparams)) {\n-        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", FormatStateMessage(state)));\n+        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used."
      },
      {
        "sha": "ffbee21aebf96e2bbab494e471430645fef7d0e4",
        "filename": "src/util/validation.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe63d79eabf1a9a0084d43802620d34f383aa358/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe63d79eabf1a9a0084d43802620d34f383aa358/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=fe63d79eabf1a9a0084d43802620d34f383aa358",
        "patch": "@@ -1,23 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <util/validation.h>\n-\n-#include <consensus/validation.h>\n-#include <tinyformat.h>\n-\n-std::string FormatStateMessage(const ValidationState &state)\n-{\n-    if (state.IsValid()) {\n-        return \"Valid\";\n-    }\n-\n-    const std::string debug_message = state.GetDebugMessage();\n-    if (!debug_message.empty()) {\n-        return strprintf(\"%s, %s\", state.GetRejectReason(), debug_message);\n-    }\n-\n-    return state.GetRejectReason();\n-}"
      },
      {
        "sha": "5ee260a055e762815736d7ccaa30bebe7a7caced",
        "filename": "src/util/validation.h",
        "status": "removed",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe63d79eabf1a9a0084d43802620d34f383aa358/src/util/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe63d79eabf1a9a0084d43802620d34f383aa358/src/util/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.h?ref=fe63d79eabf1a9a0084d43802620d34f383aa358",
        "patch": "@@ -1,16 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UTIL_VALIDATION_H\n-#define BITCOIN_UTIL_VALIDATION_H\n-\n-#include <string>\n-\n-class ValidationState;\n-\n-/** Convert ValidationState to a human-readable message for logging */\n-std::string FormatStateMessage(const ValidationState &state);\n-\n-#endif // BITCOIN_UTIL_VALIDATION_H"
      },
      {
        "sha": "c0327c39bc6cb51afff2a0b2401ce2baaed5eee6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -43,7 +43,6 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n \n@@ -662,7 +661,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     CAmount nFees = 0;\n     if (!Consensus::CheckTxInputs(tx, state, m_view, GetSpendHeight(m_view), nFees)) {\n-        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n@@ -951,7 +950,7 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, Precomp\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n     if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata)) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n-                __func__, hash.ToString(), FormatStateMessage(state));\n+                __func__, hash.ToString(), state.ToString());\n     }\n \n     return true;\n@@ -1921,7 +1920,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n             // problems.\n             return AbortNode(state, \"Corrupt block found indicating potential hardware failure; shutting down\");\n         }\n-        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     }\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2099,7 +2098,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n                 // Any transaction validation failure in ConnectBlock is a block consensus failure\n                 state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,\n                             tx_state.GetRejectReason(), tx_state.GetDebugMessage());\n-                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n             }\n             nFees += txfee;\n             if (!MoneyRange(nFees)) {\n@@ -2142,7 +2141,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n                 state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,\n                               tx_state.GetRejectReason(), tx_state.GetDebugMessage());\n                 return error(\"ConnectBlock(): CheckInputScripts on %s failed with %s\",\n-                    tx.GetHash().ToString(), FormatStateMessage(state));\n+                    tx.GetHash().ToString(), state.ToString());\n             }\n             control.Add(vChecks);\n         }\n@@ -2359,7 +2358,7 @@ void CChainState::ForceFlushStateToDisk() {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n     if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS)) {\n-        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n@@ -2369,7 +2368,7 @@ void CChainState::PruneAndFlush() {\n     const CChainParams& chainparams = Params();\n \n     if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n-        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n@@ -2596,7 +2595,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"%s: ConnectBlock %s failed, %s\", __func__, pindexNew->GetBlockHash().ToString(), FormatStateMessage(state));\n+            return error(\"%s: ConnectBlock %s failed, %s\", __func__, pindexNew->GetBlockHash().ToString(), state.ToString());\n         }\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime3 - nTime2) * MILLI, nTimeConnectTotal * MICRO, nTimeConnectTotal * MILLI / nBlocksTotal);\n@@ -3601,7 +3600,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n         }\n \n         if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n-            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         // Get prev block index\n         CBlockIndex* pindexPrev = nullptr;\n@@ -3616,7 +3615,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, \"bad-prevblk\");\n         }\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n-            return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+            return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         /* Determine if this block descends from any block which has been found\n          * invalid (m_failed_blocks), then mark pindexPrev and any blocks between\n@@ -3766,7 +3765,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return error(\"%s: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: %s\", __func__, state.ToString());\n     }\n \n     // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n@@ -3816,15 +3815,15 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n \n     NotifyHeaderTip();\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n     if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n \n     return true;\n }\n@@ -3842,11 +3841,11 @@ bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainpar\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n-        return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n-        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n-        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.ToString());\n     if (!::ChainstateActive().ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n@@ -3944,7 +3943,7 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n     const CChainParams& chainparams = Params();\n     if (!::ChainstateActive().FlushStateToDisk(\n             chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n-        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n@@ -4262,7 +4261,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n-                         pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n+                         pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n@@ -4311,7 +4310,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!::ChainstateActive().ConnectBlock(block, state, pindex, coins, chainparams))\n-                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n         }\n     }\n \n@@ -4499,7 +4498,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n             // Disconnect block\n             if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n             }\n \n             // Reduce validity flag and have-data flags.\n@@ -4519,7 +4518,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n         // Occasionally flush state to disk.\n         if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n     }\n@@ -4550,7 +4549,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n         // it'll get called a bunch real soon.\n         BlockValidationState state;\n         if (!::ChainstateActive().FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n     }"
      },
      {
        "sha": "1deb93c972744a6b96c2fda0f91c1413ab5829f2",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -11,7 +11,6 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <scheduler.h>\n-#include <util/validation.h>\n \n #include <future>\n #include <unordered_map>\n@@ -193,7 +192,7 @@ void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n \n void CMainSignals::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n     LOG_EVENT(\"%s: block hash=%s state=%s\", __func__,\n-              block.GetHash().ToString(), FormatStateMessage(state));\n+              block.GetHash().ToString(), state.ToString());\n     m_internals->BlockChecked(block, state);\n }\n "
      },
      {
        "sha": "486a6b8bf119383d9b28746923e7738fed24822a",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -12,7 +12,6 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result."
      },
      {
        "sha": "5a97f62b71bbdcd11f356daa202d97295a1e86ec",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aed17ef2892478c28cd660e53223c6dd1dc0187/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "patch": "@@ -27,7 +27,6 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n "
      }
    ]
  },
  {
    "sha": "10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGU4NWQ0YWRjOWI3ZGJiZGE2M2UwMDE5NWUwYTk2MmY1MWU0ZDJj",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-11T23:15:16Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2020-02-28T01:59:21Z"
      },
      "message": "Remove ValidationState's constructor",
      "tree": {
        "sha": "347b2e7b30d363acd981874ee0dc5ebdbe0de9f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/347b2e7b30d363acd981874ee0dc5ebdbe0de9f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aed17ef2892478c28cd660e53223c6dd1dc0187",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0aed17ef2892478c28cd660e53223c6dd1dc0187"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "da7a043dc509299103f0adc5460d160d249872a7",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
        "patch": "@@ -80,7 +80,7 @@ class ValidationState {\n         MODE_VALID,   //!< everything ok\n         MODE_INVALID, //!< network rule violation (DoS value may be set)\n         MODE_ERROR,   //!< run-time error\n-    } m_mode;\n+    } m_mode{MODE_VALID};\n     std::string m_reject_reason;\n     std::string m_debug_message;\n protected:\n@@ -95,7 +95,6 @@ class ValidationState {\n     // ValidationState is abstract. Have a pure virtual destructor.\n     virtual ~ValidationState() = 0;\n \n-    ValidationState() : m_mode(MODE_VALID) {}\n     bool Error(const std::string& reject_reason)\n     {\n         if (m_mode == MODE_VALID)"
      }
    ]
  },
  {
    "sha": "10efc0487c442bccb0e4a9ac29452af1592a3cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGVmYzA0ODdjNDQyYmNjYjBlNGE5YWMyOTQ1MmFmMTU5MmEzY2Yy",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-08T20:14:27Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2020-02-28T01:59:21Z"
      },
      "message": "Templatize ValidationState instead of subclassing\n\nThis removes boilerplate code in the subclasses which otherwise only\ndiffer by the result type.",
      "tree": {
        "sha": "0ad3623d3ffeaeb4eea13b5d2a7cd9fa61503f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ad3623d3ffeaeb4eea13b5d2a7cd9fa61503f16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10efc0487c442bccb0e4a9ac29452af1592a3cf2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10efc0487c442bccb0e4a9ac29452af1592a3cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10efc0487c442bccb0e4a9ac29452af1592a3cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10efc0487c442bccb0e4a9ac29452af1592a3cf2/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10e85d4adc9b7dbbda63e00195e0a962f51e4d2c"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 13,
      "deletions": 39
    },
    "files": [
      {
        "sha": "a79e7b9d127ae80c22ae853a02ad4c16d2891a9a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 13,
        "deletions": 39,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10efc0487c442bccb0e4a9ac29452af1592a3cf2/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10efc0487c442bccb0e4a9ac29452af1592a3cf2/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=10efc0487c442bccb0e4a9ac29452af1592a3cf2",
        "patch": "@@ -16,7 +16,7 @@\n   * provider of the transaction should be banned/ignored/disconnected/etc.\n   */\n enum class TxValidationResult {\n-    TX_RESULT_UNSET,         //!< initial value. Tx has not yet been rejected\n+    TX_RESULT_UNSET = 0,     //!< initial value. Tx has not yet been rejected\n     TX_CONSENSUS,            //!< invalid by consensus rules\n     /**\n      * Invalid by a change to consensus rules more recent than SegWit.\n@@ -50,7 +50,7 @@ enum class TxValidationResult {\n   * useful for some other use-cases.\n   */\n enum class BlockValidationResult {\n-    BLOCK_RESULT_UNSET,      //!< initial value. Block has not yet been rejected\n+    BLOCK_RESULT_UNSET = 0,  //!< initial value. Block has not yet been rejected\n     BLOCK_CONSENSUS,         //!< invalid by consensus rules (excluding any below reasons)\n     /**\n      * Invalid by a change to consensus rules more recent than SegWit.\n@@ -71,30 +71,31 @@ enum class BlockValidationResult {\n \n \n \n-/** Base class for capturing information about block/transaction validation. This is subclassed\n+/** Template for capturing information about block/transaction validation. This is instantiated\n  *  by TxValidationState and BlockValidationState for validation information on transactions\n  *  and blocks respectively. */\n+template <typename Result>\n class ValidationState {\n private:\n     enum mode_state {\n         MODE_VALID,   //!< everything ok\n         MODE_INVALID, //!< network rule violation (DoS value may be set)\n         MODE_ERROR,   //!< run-time error\n     } m_mode{MODE_VALID};\n+    Result m_result{};\n     std::string m_reject_reason;\n     std::string m_debug_message;\n-protected:\n-    void Invalid(const std::string &reject_reason=\"\",\n+public:\n+    bool Invalid(Result result,\n+                 const std::string &reject_reason=\"\",\n                  const std::string &debug_message=\"\")\n     {\n+        m_result = result;\n         m_reject_reason = reject_reason;\n         m_debug_message = debug_message;\n         if (m_mode != MODE_ERROR) m_mode = MODE_INVALID;\n+        return false;\n     }\n-public:\n-    // ValidationState is abstract. Have a pure virtual destructor.\n-    virtual ~ValidationState() = 0;\n-\n     bool Error(const std::string& reject_reason)\n     {\n         if (m_mode == MODE_VALID)\n@@ -105,6 +106,7 @@ class ValidationState {\n     bool IsValid() const { return m_mode == MODE_VALID; }\n     bool IsInvalid() const { return m_mode == MODE_INVALID; }\n     bool IsError() const { return m_mode == MODE_ERROR; }\n+    Result GetResult() const { return m_result; }\n     std::string GetRejectReason() const { return m_reject_reason; }\n     std::string GetDebugMessage() const { return m_debug_message; }\n     std::string ToString() const\n@@ -121,36 +123,8 @@ class ValidationState {\n     }\n };\n \n-inline ValidationState::~ValidationState() {};\n-\n-class TxValidationState : public ValidationState {\n-private:\n-    TxValidationResult m_result = TxValidationResult::TX_RESULT_UNSET;\n-public:\n-    bool Invalid(TxValidationResult result,\n-                 const std::string &reject_reason=\"\",\n-                 const std::string &debug_message=\"\")\n-    {\n-        m_result = result;\n-        ValidationState::Invalid(reject_reason, debug_message);\n-        return false;\n-    }\n-    TxValidationResult GetResult() const { return m_result; }\n-};\n-\n-class BlockValidationState : public ValidationState {\n-private:\n-    BlockValidationResult m_result = BlockValidationResult::BLOCK_RESULT_UNSET;\n-public:\n-    bool Invalid(BlockValidationResult result,\n-                 const std::string &reject_reason=\"\",\n-                 const std::string &debug_message=\"\") {\n-        m_result = result;\n-        ValidationState::Invalid(reject_reason, debug_message);\n-        return false;\n-    }\n-    BlockValidationResult GetResult() const { return m_result; }\n-};\n+class TxValidationState : public ValidationState<TxValidationResult> {};\n+class BlockValidationState : public ValidationState<BlockValidationResult> {};\n \n // These implement the weight = (stripped_size * 4) + witness_size formula,\n // using only serialization with and without witness data. As witness_size"
      }
    ]
  }
]