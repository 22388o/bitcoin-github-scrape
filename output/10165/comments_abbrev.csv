laanwj,2017-04-07T12:44:14Z,utACK https://github.com/bitcoin/bitcoin/pull/10165/commits/2f5eb873dda9d1561c233a2313322a53afea5161,https://github.com/bitcoin/bitcoin/pull/10165#issuecomment-292526495,292526495,
NicolasDorier,2017-04-08T03:54:15Z,"I needed to rebase, I ended up using `boost::optional` and getting ride of `IsNull()` + added checks for inconsistency in the constructor. @ryanofsky @laanwj can you reACK?",https://github.com/bitcoin/bitcoin/pull/10165#issuecomment-292692731,292692731,
btcdrak,2017-04-09T20:03:44Z,"utACK 7e0b365\n",https://github.com/bitcoin/bitcoin/pull/10165#issuecomment-292809222,292809222,
laanwj,2017-04-10T12:07:17Z,"> I needed to rebase, I ended up using boost::optional \n\nWas about to ask ""why not std::optional"" but apparently that's C++17. Well, easy to replace when we adapt that - the concept is great.",https://github.com/bitcoin/bitcoin/pull/10165#issuecomment-292930343,292930343,
NicolasDorier,2017-04-12T06:14:25Z,"Travis fail unrelated to this PR, @laanwj can you kick the travis box one time to fix the issue ?",https://github.com/bitcoin/bitcoin/pull/10165#issuecomment-293483858,293483858,
ryanofsky,2017-04-07T12:39:57Z,Would suggest throwing std::out_of_range if this condition is not true. This should be compatible with all the places this code is called (since they previously would have resulted in out-of-bounds memory accesses).,https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110379979,110379979,src/wallet/wallet.h
ryanofsky,2017-04-07T13:04:58Z,"Would suggest deleting default constructor and IsNull method. Their presence seem to make this class more complex and precarious than is necessary, and could lead to bugs and unintended behavior.\n\nThe only place where a nullable `CInputCoin` seems to be used is in one `coinLowestLarger` local variable, and you could more easily declare this variable as `boost::optional<CInputCoin> coinLowestLa",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110384304,110384304,src/wallet/wallet.h
NicolasDorier,2017-04-07T14:20:53Z,"I don't think using `optional` would make the code more clear. I never saw it used anywhere in bitcoin.\nWhat about using `CInputCoin*` for coinLowestLarger instead?",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110400583,110400583,src/wallet/wallet.h
ryanofsky,2017-04-07T14:44:23Z,"> I don't think using optional would make the code more clear.\n\nI think optional's useful. It saves work of having to build optionality into types you define, and more importantly it allows the same type to be optional in some contexts and required in others, which I think is exactly what you want here. std::optional is part of c++17 so eventually it will start becoming more commonly used.\n",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110406605,110406605,src/wallet/wallet.h
laanwj,2017-04-07T16:26:51Z,"I agree. That's safer than leaving the object as invalid dummy object, which would be harder to troubleshoot as it's not checked against everywhere..",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110429299,110429299,src/wallet/wallet.h
JeremyRubin,2017-04-10T15:24:13Z,"Prefer to use a typedef (I actually prefer using personally, but some devs are unfamiliar with it and you don't need it as CInputCoin is not templated)\n\nAlso, prefer a non-Hungarian name if you're introducing a new class.\nSee https://github.com/bitcoin/bitcoin/pull/9472#discussion_r95775684 -- Hungarians for new code discouraged.",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110685804,110685804,src/wallet/wallet.h
JeremyRubin,2017-04-10T15:33:38Z,I'm a bit confused here -- isn't coinLowestLarger always null at this point?,https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110688487,110688487,src/wallet/wallet.cpp
JeremyRubin,2017-04-10T15:35:27Z,prefer not to have fields intermixed with functions.,https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110688970,110688970,src/wallet/wallet.h
JeremyRubin,2017-04-10T15:41:13Z,"Can you invert the logic here `if (!P) throw` is a bit easier to read.\n\nMight also be good to make it a `const CWalletTx&` so as to make sure that de-referencability is checked everywhere that this is called.",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110690341,110690341,src/wallet/wallet.h
bulldozer00,2017-04-10T16:26:04Z,Why are these data members public and not private?,https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110701084,110701084,src/wallet/wallet.h
bulldozer00,2017-04-10T16:28:51Z,"Think about replacing old style ""typedef  X Y "" with the more intuitive C++11 ""using Y = X"" style",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110701730,110701730,src/wallet/test/wallet_tests.cpp
NicolasDorier,2017-04-11T10:23:34Z,better to do in a separate PR. I want to keep it focused on `CInputCoin`.,https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110866200,110866200,src/wallet/test/wallet_tests.cpp
NicolasDorier,2017-04-11T10:23:57Z,because I use them outside the class.,https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110866272,110866272,src/wallet/wallet.h
NicolasDorier,2017-04-11T10:32:45Z,"Ah indeed, C# habits... Just replaced by `if(!walletTx)`.\n\nI would like to do `const CWalletTx&` in a separate PR, as it need more code change, and I need this PR for another one depending on it.",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110867730,110867730,src/wallet/wallet.h
JeremyRubin,2017-04-11T18:52:35Z,"Ah, I was unclear -- I actually don't mind a `== nullptr` (although current state is cleaner), I was referring to the `throw out_of_range`. It's easier if a constructor is: `if (! preconditionA) throw A; if (!preconditionB) throw B; ....;` rather than `if (! preconditionA) throw A; if (preconditionB)...; else throw B;`",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r110985081,110985081,src/wallet/wallet.h
NicolasDorier,2017-04-12T02:36:29Z,"@JeremyRubin indeed, much clearer. I updated the PR.",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r111054968,111054968,src/wallet/wallet.h
laanwj,2017-04-12T15:16:43Z,"We don't use that style anywhere, introducing it here is not a good idea. I'd prefer to save that for new code.",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r111179521,111179521,src/wallet/test/wallet_tests.cpp
laanwj,2017-04-12T15:37:41Z,"It is not visible on github but local diff shows me that line endings are weird here:\n```diff\n-using CInputCoin = std::pair<const CWalletTx*, unsigned int>;\n+class CInputCoin {^M\n+public:^M\n```\n^M is 13, so I suppose these are DOS line endings. Looks like it is only in `src/wallet/wallet.h`, and only the newly  introduced code.\nsuggest running:\n```bash\n$ dos2unix src/wallet/walle",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r111185227,111185227,src/wallet/wallet.h
NicolasDorier,2017-04-13T05:33:50Z,"oops. Yes, developping on visual studio... Fixed.",https://github.com/bitcoin/bitcoin/pull/10165#discussion_r111314230,111314230,src/wallet/wallet.h
