[
  {
    "sha": "fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDQ0YWMxZThiNzVmNmY4M2NjMGZlYTIwYWU3MjFkZTE2M2ZmOWNj",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-07T09:38:33Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-08T03:50:14Z"
      },
      "message": "[Wallet] Rename std::pair<const CWalletTx*, unsigned int> to CInputCoin",
      "tree": {
        "sha": "34e749da0376002b34fb674804291526796e8c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34e749da0376002b34fb674804291526796e8c2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df1ca9e93a61787ea7ad8743dfb400126a52b8e9"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "42891f345b7c8e7cb57800427891b51e1844c81e",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "patch": "@@ -48,7 +48,7 @@ static void CoinSelection(benchmark::State& state)\n             addCoin(1000 * COIN, wallet, vCoins);\n         addCoin(3 * COIN, wallet, vCoins);\n \n-        std::set<std::pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;\n         bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet);\n         assert(success);"
      },
      {
        "sha": "7201d17b075c847057716eb64c8c73445baac37f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "patch": "@@ -23,7 +23,7 @@\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n {\n     CMutableTransaction txNew(tx);\n-    std::vector<std::pair<const CWalletTx *, unsigned int>> vCoins;\n+    std::vector<CInputCoin> vCoins;\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n     // wallet, with a valid index into the vout array."
      },
      {
        "sha": "03353619213c4eb9e0e7f1fcfeb2094812781dcd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "patch": "@@ -29,7 +29,7 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n \n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n-typedef std::set<std::pair<const CWalletTx*,unsigned int> > CoinSet;\n+typedef std::set<CInputCoin> CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n "
      },
      {
        "sha": "982293acaebc17745b460d62de76235e65579889",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "patch": "@@ -65,8 +65,8 @@ const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"00000000000000000000000000000000\n \n struct CompareValueOnly\n {\n-    bool operator()(const std::pair<CAmount, std::pair<const CWalletTx*, unsigned int> >& t1,\n-                    const std::pair<CAmount, std::pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const std::pair<CAmount, CInputCoin>& t1,\n+                    const std::pair<CAmount, CInputCoin>& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -2032,7 +2032,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n     }\n }\n \n-static void ApproximateBestSubset(const std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > >& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoin> >& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     std::vector<char> vfIncluded;\n@@ -2079,16 +2079,16 @@ static void ApproximateBestSubset(const std::vector<std::pair<CAmount, std::pair\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    std::pair<CAmount, CInputCoin> coinLowestLarger;\n     coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n     coinLowestLarger.second.first = NULL;\n-    std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > > vValue;\n+    std::vector<std::pair<CAmount, CInputCoin> > vValue;\n     CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n@@ -2109,7 +2109,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n         int i = output.i;\n         CAmount n = pcoin->tx->vout[i].nValue;\n \n-        std::pair<CAmount,std::pair<const CWalletTx*,unsigned int> > coin = std::make_pair(n,std::make_pair(pcoin, i));\n+        std::pair<CAmount,CInputCoin> coin = std::make_pair(n,std::make_pair(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -2187,7 +2187,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n@@ -2205,7 +2205,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     }\n \n     // calculate value from preset inputs and store them\n-    std::set<std::pair<const CWalletTx*, uint32_t> > setPresetCoins;\n+    std::set<CInputCoin> setPresetCoins;\n     CAmount nValueFromPresetInputs = 0;\n \n     std::vector<COutPoint> vPresetInputs;\n@@ -2395,7 +2395,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n \n     {\n-        std::set<std::pair<const CWalletTx*,unsigned int> > setCoins;\n+        std::set<CInputCoin> setCoins;\n         LOCK2(cs_main, cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;"
      },
      {
        "sha": "a882cec77892510e6da415b7df3a4aec6a3def6a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "patch": "@@ -475,7 +475,7 @@ class CWalletTx : public CMerkleTx\n };\n \n \n-\n+using CInputCoin = std::pair<const CWalletTx*, unsigned int>;\n \n class COutput\n {\n@@ -632,7 +632,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * all coins from coinControl are selected; Never select unconfirmed coins\n      * if they are not ours\n      */\n-    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -780,7 +780,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n "
      }
    ]
  },
  {
    "sha": "e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzhiYzQ1ODEwYzA4MzRhZDQ3Y2ZmY2RmYjUyZjBhNTdiZmJiYTJk",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-07T09:57:06Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T05:30:52Z"
      },
      "message": "[Wallet] Decouple CInputCoin from CWalletTx",
      "tree": {
        "sha": "469be3b6616442acdbb2b8f146e0b14b657d7b4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/469be3b6616442acdbb2b8f146e0b14b657d7b4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd44ac1e8b75f6f83cc0fea20ae721de163ff9cc"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 43,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6b030935f37b9ad72c203b8bb02ce0a8f728f9f4",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
        "patch": "@@ -30,7 +30,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWal\n     for (auto& input : tx.vin) {\n         const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n         assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(&(mi->second), input.prevout.n);\n+        vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n     }\n     if (!pWallet->DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)"
      },
      {
        "sha": "2b12ece8dc37d2b7a6069196bce5a6006b540453",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
        "patch": "@@ -2087,7 +2087,6 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     // List of values less than target\n     std::pair<CAmount, CInputCoin> coinLowestLarger;\n     coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n-    coinLowestLarger.second.first = NULL;\n     std::vector<std::pair<CAmount, CInputCoin> > vValue;\n     CAmount nTotalLower = 0;\n \n@@ -2109,7 +2108,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n         int i = output.i;\n         CAmount n = pcoin->tx->vout[i].nValue;\n \n-        std::pair<CAmount,CInputCoin> coin = std::make_pair(n,std::make_pair(pcoin, i));\n+        std::pair<CAmount,CInputCoin> coin = std::make_pair(n, CInputCoin(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -2140,7 +2139,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     if (nTotalLower < nTargetValue)\n     {\n-        if (coinLowestLarger.second.first == NULL)\n+        if (coinLowestLarger.second.IsNull())\n             return false;\n         setCoinsRet.insert(coinLowestLarger.second);\n         nValueRet += coinLowestLarger.first;\n@@ -2159,7 +2158,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger.second.first &&\n+    if (coinLowestLarger.second.IsNull() &&\n         ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n     {\n         setCoinsRet.insert(coinLowestLarger.second);\n@@ -2199,7 +2198,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (!out.fSpendable)\n                  continue;\n             nValueRet += out.tx->tx->vout[out.i].nValue;\n-            setCoinsRet.insert(std::make_pair(out.tx, out.i));\n+            setCoinsRet.insert(CInputCoin(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n@@ -2221,15 +2220,15 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (pcoin->tx->vout.size() <= outpoint.n)\n                 return false;\n             nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(std::make_pair(pcoin, outpoint.n));\n+            setPresetCoins.insert(CInputCoin(pcoin, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n     }\n \n     // remove preset inputs from vCoins\n     for (std::vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)\n     {\n-        if (setPresetCoins.count(std::make_pair(it->tx, it->i)))\n+        if (setPresetCoins.count(CInputCoin(it->tx, it->i)))\n             it = vCoins.erase(it);\n         else\n             ++it;\n@@ -2554,7 +2553,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // behavior.\"\n                 bool rbf = coinControl ? coinControl->signalRbf : fWalletRbf;\n                 for (const auto& coin : setCoins)\n-                    txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n+                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               std::numeric_limits<unsigned int>::max() - (rbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n@@ -2637,10 +2636,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             int nIn = 0;\n             for (const auto& coin : setCoins)\n             {\n-                const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+                const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->tx->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n+                if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\");\n                     return false;"
      },
      {
        "sha": "d43bd4b590e617482673a962a0f23ba0ed64cdee",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 33,
        "deletions": 2,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
        "patch": "@@ -475,7 +475,38 @@ class CWalletTx : public CMerkleTx\n };\n \n \n-using CInputCoin = std::pair<const CWalletTx*, unsigned int>;\n+class CInputCoin {\n+public:\n+    CInputCoin()\n+    {\n+    }\n+    CInputCoin(const CWalletTx* walletTx, unsigned int i)\n+    {\n+        if (walletTx != nullptr && i < walletTx->tx->vout.size())\n+        {\n+            outpoint = COutPoint(walletTx->GetHash(), i);\n+            txout = walletTx->tx->vout[i];\n+        }\n+    }\n+    bool IsNull() const\n+    {\n+        return outpoint.IsNull() && txout.IsNull();\n+    }\n+    COutPoint outpoint;\n+    CTxOut txout;\n+\n+    bool operator<(const CInputCoin& rhs) const {\n+        return outpoint < rhs.outpoint;\n+    }\n+\n+    bool operator!=(const CInputCoin& rhs) const {\n+        return outpoint != rhs.outpoint;\n+    }\n+\n+    bool operator==(const CInputCoin& rhs) const {\n+        return outpoint == rhs.outpoint;\n+    }\n+};\n \n class COutput\n {\n@@ -1132,7 +1163,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     int nIn = 0;\n     for (const auto& coin : coins)\n     {\n-        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        const CScript& scriptPubKey = coin.txout.scriptPubKey;\n         SignatureData sigdata;\n \n         if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))"
      }
    ]
  },
  {
    "sha": "f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTk3ZGNiN2M4NzViNTFhYmU5YTRjZmRjYjIyZGQ1MDk5Y2RiZjdm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-07T10:04:41Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T05:31:08Z"
      },
      "message": "[Wallet] Simplify code using CInputCoin",
      "tree": {
        "sha": "5beaff30ead86fe7225121b00ab7c9dd078f63d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5beaff30ead86fe7225121b00ab7c9dd078f63d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e78bc45810c0834ad47cffcdfb52f0a57bfbba2d"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 27,
      "deletions": 29
    },
    "files": [
      {
        "sha": "540352c7da29292e6ff1058b87a965f5ea4d3940",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 29,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
        "patch": "@@ -65,10 +65,10 @@ const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"00000000000000000000000000000000\n \n struct CompareValueOnly\n {\n-    bool operator()(const std::pair<CAmount, CInputCoin>& t1,\n-                    const std::pair<CAmount, CInputCoin>& t2) const\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n     {\n-        return t1.first < t2.first;\n+        return t1.txout.nValue < t2.txout.nValue;\n     }\n };\n \n@@ -2032,7 +2032,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n     }\n }\n \n-static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoin> >& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     std::vector<char> vfIncluded;\n@@ -2059,7 +2059,7 @@ static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoi\n                 //the selection random.\n                 if (nPass == 0 ? insecure_rand.rand32()&1 : !vfIncluded[i])\n                 {\n-                    nTotal += vValue[i].first;\n+                    nTotal += vValue[i].txout.nValue;\n                     vfIncluded[i] = true;\n                     if (nTotal >= nTargetValue)\n                     {\n@@ -2069,7 +2069,7 @@ static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoi\n                             nBest = nTotal;\n                             vfBest = vfIncluded;\n                         }\n-                        nTotal -= vValue[i].first;\n+                        nTotal -= vValue[i].txout.nValue;\n                         vfIncluded[i] = false;\n                     }\n                 }\n@@ -2085,9 +2085,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     nValueRet = 0;\n \n     // List of values less than target\n-    std::pair<CAmount, CInputCoin> coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n-    std::vector<std::pair<CAmount, CInputCoin> > vValue;\n+    CInputCoin coinLowestLarger;\n+    std::vector<CInputCoin> vValue;\n     CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n@@ -2106,22 +2105,21 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-        CAmount n = pcoin->tx->vout[i].nValue;\n \n-        std::pair<CAmount,CInputCoin> coin = std::make_pair(n, CInputCoin(pcoin, i));\n+        CInputCoin coin = CInputCoin(pcoin, i);\n \n-        if (n == nTargetValue)\n+        if (coin.txout.nValue == nTargetValue)\n         {\n-            setCoinsRet.insert(coin.second);\n-            nValueRet += coin.first;\n+            setCoinsRet.insert(coin);\n+            nValueRet += coin.txout.nValue;\n             return true;\n         }\n-        else if (n < nTargetValue + MIN_CHANGE)\n+        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n         {\n             vValue.push_back(coin);\n-            nTotalLower += n;\n+            nTotalLower += coin.txout.nValue;\n         }\n-        else if (n < coinLowestLarger.first)\n+        else if (coinLowestLarger.IsNull() || coin.txout.nValue < coinLowestLarger.txout.nValue)\n         {\n             coinLowestLarger = coin;\n         }\n@@ -2131,18 +2129,18 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     {\n         for (unsigned int i = 0; i < vValue.size(); ++i)\n         {\n-            setCoinsRet.insert(vValue[i].second);\n-            nValueRet += vValue[i].first;\n+            setCoinsRet.insert(vValue[i]);\n+            nValueRet += vValue[i].txout.nValue;\n         }\n         return true;\n     }\n \n     if (nTotalLower < nTargetValue)\n     {\n-        if (coinLowestLarger.second.IsNull())\n+        if (coinLowestLarger.IsNull())\n             return false;\n-        setCoinsRet.insert(coinLowestLarger.second);\n-        nValueRet += coinLowestLarger.first;\n+        setCoinsRet.insert(coinLowestLarger);\n+        nValueRet += coinLowestLarger.txout.nValue;\n         return true;\n     }\n \n@@ -2158,25 +2156,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger.second.IsNull() &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n+    if (!coinLowestLarger.IsNull() &&\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.txout.nValue <= nBest))\n     {\n-        setCoinsRet.insert(coinLowestLarger.second);\n-        nValueRet += coinLowestLarger.first;\n+        setCoinsRet.insert(coinLowestLarger);\n+        nValueRet += coinLowestLarger.txout.nValue;\n     }\n     else {\n         for (unsigned int i = 0; i < vValue.size(); i++)\n             if (vfBest[i])\n             {\n-                setCoinsRet.insert(vValue[i].second);\n-                nValueRet += vValue[i].first;\n+                setCoinsRet.insert(vValue[i]);\n+                nValueRet += vValue[i].txout.nValue;\n             }\n \n         if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n             LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n             for (unsigned int i = 0; i < vValue.size(); i++) {\n                 if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].first));\n+                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n                 }\n             }\n             LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));"
      }
    ]
  },
  {
    "sha": "c37e32af0d2f8723f89c5304d41a4a41d4d34ea3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzdlMzJhZjBkMmY4NzIzZjg5YzUzMDRkNDFhNGE0MWQ0ZDM0ZWEz",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-08T03:41:27Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T05:32:24Z"
      },
      "message": "[Wallet] Prevent CInputCoin to be in a null state",
      "tree": {
        "sha": "686b8200b6de71b683ef66f2a152d903d0778bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/686b8200b6de71b683ef66f2a152d903d0778bea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f597dcb7c875b51abe9a4cfdcb22dd5099cdbf7f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 17,
      "deletions": 21
    },
    "files": [
      {
        "sha": "ff135fb05b1043938508d145afb078d6ce968519",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c37e32af0d2f8723f89c5304d41a4a41d4d34ea3",
        "patch": "@@ -2085,7 +2085,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     nValueRet = 0;\n \n     // List of values less than target\n-    CInputCoin coinLowestLarger;\n+    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n     CAmount nTotalLower = 0;\n \n@@ -2119,7 +2119,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             vValue.push_back(coin);\n             nTotalLower += coin.txout.nValue;\n         }\n-        else if (coinLowestLarger.IsNull() || coin.txout.nValue < coinLowestLarger.txout.nValue)\n+        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n         {\n             coinLowestLarger = coin;\n         }\n@@ -2137,10 +2137,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     if (nTotalLower < nTargetValue)\n     {\n-        if (coinLowestLarger.IsNull())\n+        if (!coinLowestLarger)\n             return false;\n-        setCoinsRet.insert(coinLowestLarger);\n-        nValueRet += coinLowestLarger.txout.nValue;\n+        setCoinsRet.insert(coinLowestLarger.get());\n+        nValueRet += coinLowestLarger->txout.nValue;\n         return true;\n     }\n \n@@ -2156,11 +2156,11 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n-    if (!coinLowestLarger.IsNull() &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.txout.nValue <= nBest))\n+    if (coinLowestLarger &&\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n     {\n-        setCoinsRet.insert(coinLowestLarger);\n-        nValueRet += coinLowestLarger.txout.nValue;\n+        setCoinsRet.insert(coinLowestLarger.get());\n+        nValueRet += coinLowestLarger->txout.nValue;\n     }\n     else {\n         for (unsigned int i = 0; i < vValue.size(); i++)"
      },
      {
        "sha": "b95d3de52f35b7d60056261c4c88412d20ad9932",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37e32af0d2f8723f89c5304d41a4a41d4d34ea3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c37e32af0d2f8723f89c5304d41a4a41d4d34ea3",
        "patch": "@@ -477,21 +477,17 @@ class CWalletTx : public CMerkleTx\n \n class CInputCoin {\n public:\n-    CInputCoin()\n-    {\n-    }\n     CInputCoin(const CWalletTx* walletTx, unsigned int i)\n     {\n-        if (walletTx != nullptr && i < walletTx->tx->vout.size())\n-        {\n-            outpoint = COutPoint(walletTx->GetHash(), i);\n-            txout = walletTx->tx->vout[i];\n-        }\n-    }\n-    bool IsNull() const\n-    {\n-        return outpoint.IsNull() && txout.IsNull();\n+        if (!walletTx)\n+            throw std::invalid_argument(\"walletTx should not be null\");\n+        if (i >= walletTx->tx->vout.size())\n+            throw std::out_of_range(\"The output index is out of range\");\n+\n+        outpoint = COutPoint(walletTx->GetHash(), i);\n+        txout = walletTx->tx->vout[i];\n     }\n+\n     COutPoint outpoint;\n     CTxOut txout;\n "
      }
    ]
  }
]