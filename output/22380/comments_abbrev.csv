DrahtBot,2021-07-01 08:12:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23611](https://github.com/bitcoin/bitcoin/pull/23611) (build: add `LTO` option to depends by fanquake)\n* [#22555](https",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-872028104,872028104,
hebasto,2021-07-01 12:12:06,"Concept ACK.\n\n> This should be a no-op for our release builds...\n\nCould be verified on by-package basis with #21995.",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-872193964,872193964,
laanwj,2021-07-21 10:04:01,"Concept ACK.\n\nWould it make sense to define a global e.g. `EXTRA_CFLAGS` variable and use it for every package, instead of repeating this for every single one?",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-884063202,884063202,
tryphe,2021-08-01 22:39:40,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-890598273,890598273,
Zero-1729,2021-08-21 12:05:01,"Concept ACK\n\n> Would it make sense to define a global e.g. `EXTRA_CFLAGS` variable and use it for every package, instead of repeating this for every single one?\n\nIs there a reason for not going this route?",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-903106663,903106663,
fanquake,2021-08-31 06:06:53,"I've reworked this, and based it on top of #22840.\n\n> Would it make sense to define a global e.g. EXTRA_CFLAGS variable and use it for every package, instead of repeating this for every single one?\n\nI've added `DEFAULT_C_STD` and `DEFAULT_CXX_STD` variables to the depends makefile. Defaulting to `c11` and `c++17`. This means the versions are set in one place, and can also be overriden if s",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-908928241,908928241,
fanquake,2021-09-02 02:28:16,Rebased now that #22840 is in. Would be good to get feedback on the new approach.,https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-911054923,911054923,
fanquake,2021-09-02 05:10:44,"Guix Builds:\n```bash\nbash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\nba6a9c335b06f7b9afe8ea1513fc63f3d428ea241da62d6846b11b261dd3a2f5  guix-build-e5e8749daeb5/output/aarch64-linux-gnu/SHA256SUMS.part\nd93909a10e7acdf9a63a1040403b52e2ac3cb8a85e012e8f0bb78fe00839f6a6  guix-build-e5e8749daeb5/output/aarch64-linux-g",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-911187809,911187809,
theuni,2021-09-03 16:33:28,"Concept ACK. Definitely better to be explicit.\n\nNit: `DEFAULT_FOO` implies that it's the fallback unless something specific was requested, which is not the case here as the value can be overridden. Would prefer to drop/replace the `DEFAULT_` prefix.",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-912666063,912666063,
dongcarl,2021-09-03 18:08:14,"Concept ACK!\n\nWondering: instead of setting it for every package, could we do it in `hosts/*.mk`?",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-912718224,912718224,
DrahtBot,2021-09-04 14:07:26,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit dd097c42df7378c9d0114c04c82b3c38c18e13dc<br>(master) | commit be0afcbd0eee0b43bdcb185e5eaf1087071a45ac<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`bd03f15bef7e8032...`](https://drahtbot.space/guix/bitcoin/bitcoin/dd097c42df7378c9d0114c04c82b3c38c18e13dc/SHA256SUMS.part) | [`3c43ce4959a560af...`](https://,https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-912980325,912980325,
practicalswift,2021-09-04 14:34:34,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-912984353,912984353,
fanquake,2021-09-09 07:38:13,"> Nit: DEFAULT_FOO implies that it's the fallback unless something specific was requested, which is not the case here as the value can be overridden. Would prefer to drop/replace the DEFAULT_ prefix.\n\nDropped the `DEFAULT` prefix.\n\n> Wondering: instead of setting it for every package, could we do it in hosts/*.mk?\n\nReworked to set both in hosts/*.mk. Is this what you had in mind?",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-915841086,915841086,
fanquake,2021-09-09 09:37:51,"Android build failure here looks unrelated, however the macOS one seems to be an issue. Doesn't happen when building natively, only when cross-compiling qt:\n```bash\nConfiguring qt...\nCreating qmake...\nmake[1]: Entering directory '/tmp/cirrus-ci-build/depends/work/build/x86_64-apple-darwin18/qt/5.12.11-07ec867c621/qtbase/qmake'\nmake[1]: Leaving directory '/tmp/cirrus-ci-build/depends/work",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-915926509,915926509,
dongcarl,2021-10-12 14:36:19,"Does this mean that `qmake` tests `CXX` by invoking it with `CFLAGS`?\n<details>\n  <summary>If so...</summary>\n\n  ![image](https://user-images.githubusercontent.com/3445290/136976211-6b9bf2cb-6a6a-441b-89fa-7dafe2be0bd6.png)\n\n</details>",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-941072986,941072986,
fanquake,2021-11-14 04:46:10,"Rebased on master, and added a potential fix for the macOS cross-compile issue. Which is to just not append `QMAKE_CFLAGS` to `QMAKE_CXXFLAGS` in the macOS configuration.",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-968205653,968205653,
fanquake,2021-11-16 02:14:01,Updated both commits to document the new variables in the depends README.,https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-969685241,969685241,
dongcarl,2021-11-16 19:16:20,"Looking clean! A few points of discussion:\n1. Wondering if it'd make sense to somehow export the `CXX_STANDARD` in config.site\n2. Wondering if we should be putting `-std` flags in `CFLAGS` or `CC`, for any other flag I would argue for `CFLAGS`, but `-std` seems quite fundamental, and if I understand correctly prior versions of autoconf would put `-std` flags into `CC` when requested: https://w",https://github.com/bitcoin/bitcoin/pull/22380#issuecomment-970589598,970589598,
