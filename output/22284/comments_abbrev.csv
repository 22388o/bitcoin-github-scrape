jonatack,2021-06-20 14:39:43,"Added benchmarks. This pull speeds up `ProtectEvictionCandidatesByRatio()` between 2x and 6x for the benchmarked cases. It's not a hotspot, but the improvement is significant.\n\n\n```\n$ ./src/bench/bench_bitcoin -filter=EvictionProtection*.*\n```\n\nmaster\n\n```rake\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|----------------",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-864564794,864564794,
klementtan,2021-06-20 15:18:18,"Tested on macOs 11.4 and this PR indeed optimize it by 1.3x to 5x. \n\n<details> \n<summary> Test result </summary>\n\nOn 272f327fbfcb8bb61f8e1c9d65c665372cd60976(master with benchmarks):\n```\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|      756,331,588.00 |               ",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-864569995,864569995,
DrahtBot,2021-06-20 17:24:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19377 by hebasto\n\nIf you consider this pull request important, please also help to review the conflicting pull requests",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-864586340,864586340,
theStack,2021-06-22 16:22:17,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-866133352,866133352,
jonatack,2021-07-06 16:46:07,"Thank you @vasild, @jarolrod, @klementtan and @theStack; feedback taken (and rebased, apologies).",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-874919226,874919226,
klementtan,2021-07-07 01:41:33,"Tested on 524aa5dc6a6f20f2fd16a63bd1356d577794d510\n- Didn't notice any significant improvement with c0d658f1806a81ae5bf20355861979eb7f7ea1f4\n- d2bb6231aaa798590b85700e03dac79f32204aec reduced time for `EvictionProtection1Network250Candidates` by about **40%**\n- Didn't notice any significant improvement with edc59d08fc57f5f10657a044224a0b3ae2d2b9bc\n- 524aa5dc6a6f20f2fd16a63bd1356d577794d510",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-875202761,875202761,
jonatack,2021-07-07 11:23:42,"Thanks for testing @klementtan!\n\n> Didn't notice any significant improvement with [c0d658f](https://github.com/bitcoin/bitcoin/commit/c0d658f1806a81ae5bf20355861979eb7f7ea1f4)\n\nThanks for pointing this out. The benchmarks don't test it. Will look at adding a bench with no protected networks.\n\n> Didn't notice any significant improvement with [edc59d0](https://github.com/bitcoin/bitcoin/",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-875523082,875523082,
jonatack,2021-07-08 10:25:20,"Updated per `git diff 524aa5d b1d905c`\n- adjusted the benchmarks to use the default `Epochs` of 11, increased the `epochIterations` from 100 to 1000, and added a warmup of 100; I didn't find a magic sweet spot (I have to run it several times) but this seems to improve the `err%` somewhat while keeping the benchmark fast\n- added two benchmarks, EvictionProtection0Networks250Candidates and Evict",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-876322380,876322380,
klementtan,2021-07-08 13:49:29,"Tested and code review ACK b1d905c2. \n\nAlso no longer seeing `... Unstable with ~100.0 iters. Increase minEpochIterations to e.g. 1000)` warning. \n\n<details>\n<summary> Bench results </summary>\n\n5adb0645:\n\n```\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|         ",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-876455300,876455300,
jonatack,2021-07-09 15:56:37,"> Not sure what to make of it because I'm running the `macOS 12` Beta (not a super stable system overall).\n\nYes, I tuned my system and yet still see that most of the time on at least half of the benchmarks when running all of them with `./src/bench/bench_bitcoin`.  It came down to the preference of being able to run these new benchmarks 10 times in ~20 seconds rather than once in 30-60 seconds",https://github.com/bitcoin/bitcoin/pull/22284#issuecomment-877286823,877286823,
vasild,2021-06-30 09:09:09,"This function already exists in `src/test/net_peer_eviction_tests.cpp`. Dedup:\n\n```diff\n    test: make GetRandomNodeEvictionCandidates() reusable\n\n    Move `GetRandomNodeEvictionCandidates()` from\n    `src/test/net_peer_eviction_tests.cpp` to `src/test/util/net.h` and\n    `src/test/util/net.cpp` so that it can be reused by other tests.\n\ndiff --git a/src/test/net_peer_eviction_tes",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r661275001,661275001,src/bench/peer_eviction.cpp
vasild,2021-06-30 09:23:24,"I think [nanobench](https://nanobench.ankerl.com/reference.html#_CPPv4N6ankerl9nanobench5Bench6epochsE6size_t) is designed to make such loops unnecessary. It can provide stable results even if the test function is very fast/short, no need to loop 60k times.\n\nAlso, the above benchmarks the copying of the data which could add noise to the test. Given that the input is not huge we can create a se",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r661285594,661285594,src/bench/peer_eviction.cpp
vasild,2021-06-30 09:34:42,"99a25fb393 `p2p: iterate over eviction candidates once instead of thrice`\n\nI did not observe any difference in performance due to this commit.\n\nIt changes the complexity from `O(num networks * num candidates)` to `O(num candidates * num networks)`. The early `break` optimization maybe makes it `O(num candidates * num networks * 0.5)` on average, but that is equal to `O(num candidates * num",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r661294200,661294200,src/net.cpp
vasild,2021-06-30 09:46:31,"06b898c3e1 `p2p: iterate eviction protection only on networks having candidates`\n\nLooking at this commit - there is no need to re-calculate `num_networks` inside the loop because `networks` is not changed in the loop. It can be calculated just once before the loop:\n\n```cpp\nauto num_networks = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\nif (net",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r661302739,661302739,src/net.cpp
vasild,2021-06-30 10:44:33,"> I did not observe any difference in performance due to this commit.\n\nHere are the results I get:\n\n272f327fbf `bench: add peer eviction protection benchmarks`\n```\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|      706,673,971.00 |                1.42 |    1.7% |      7.",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r661341225,661341225,src/net.cpp
jonatack,2021-07-01 13:13:17,Done (thanks!),https://github.com/bitcoin/bitcoin/pull/22284#discussion_r662277055,662277055,src/bench/peer_eviction.cpp
jonatack,2021-07-01 13:21:12,"I tried this, and am playing with your proposal that looks good! but as before when I was trying to use these options, nanobench kept saying it was unstable and to increase the iterations, beyond even the numbers I settled on in my manual loops that yielded slowish but stableish results for me.\n```\n:wavy_dash: ... (Unstable with ~1,000.0 iters. Increase `minEpochIterations` to e.g. 10000)\n:w",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r662283296,662283296,src/bench/peer_eviction.cpp
jonatack,2021-07-01 13:27:36,99a25fb393c791bb6b6edeab3677d39bf6b1d97d I agree that it's probably not worth it.,https://github.com/bitcoin/bitcoin/pull/22284#discussion_r662288417,662288417,src/net.cpp
vasild,2021-07-01 16:18:27,"Here are some numbers:\n\n* `sizeof(NodeEvictionCandidate)` is 64\n* number of candidates is 250\n* the current test contains 60k iterations\n\nSo that would make 64 * 250 * 60000 = 916 MiB.\n\nIn the changes above I suggested 10 epochs * 100 iterations (1000 copies): 64 * 250 * 1000 = 15 MiB.\n\n> so I understand why you proposed reducing the number of iters\n\nYes, I was concerned ab",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r662428128,662428128,src/bench/peer_eviction.cpp
vasild,2021-07-05 12:18:56,"Two random thoughts:\n\n1. Do you get ""unstable results"" warnings when running other benchmarks from `src/bench`?\n2. Nanobench's [`warmup()`](https://nanobench.ankerl.com/reference.html#_CPPv4N6ankerl9nanobench5Bench6warmupE8uint64_t) may help?",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r663886898,663886898,src/bench/peer_eviction.cpp
jonatack,2021-07-06 15:35:18,"Reorganized to be step by step, with no anticipatory changes.",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r664666909,664666909,src/net.cpp
jonatack,2021-07-06 15:35:32,Dropped.,https://github.com/bitcoin/bitcoin/pull/22284#discussion_r664667111,664667111,src/net.cpp
jonatack,2021-07-06 15:37:46,"I've tuned my system for benchmarking, and nevertheless, any iterations less than in my original proposal still return bench error rates above 5%, often 10-25%, rendering the benchmark somewhat useless for me.\n\nI'm going to consider that my system (2 physical cores, 4 logical ones, with an open source coreboot) is unusual and unsuited to running these benchmarks and use this feedback provided ",https://github.com/bitcoin/bitcoin/pull/22284#discussion_r664668934,664668934,src/bench/peer_eviction.cpp
