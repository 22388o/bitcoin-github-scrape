gmaxwell,2013-03-27T22:15:44Z,"I certainly like stuff like this over the forking...\n\nWhat is the usecase for the IP addresses?  \n\nThis removes the fIsInitialDownload test around the forking blocknotify— that test is incorrect to begin with (it can make you miss reorgs if the blocks have particular weird times), but without it blocknotify is a forkbomb. :)\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15556682,15556682,
ghost,2013-03-27T22:30:26Z,The IP address is just to tell when the Bitcoin client has gotten a new IP address from the network.\n\nI moved the test for 'fIsInitialDownload' so it only evaluates once.(two times in the master code at the moment if you take a look).\n\nHmm. There will be scenarios were you would like to have the blocks announced during 'fIsInitialDownload' and when you don't. Will make an parameter for that.\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15557336,15557336,
gmaxwell,2013-03-27T22:34:43Z,"Ah, missed that curly removal.\n\nIn any case that doesn't change the point that IsInitial is not a reliable test, go look at how it's implemented.  The way that it's setup there— in theory— a miner could construct a reorg that doesn't trigger the notice. This might be bad if you're depending on being told about the reorg in order to abort shipping a good or whatever.\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15557563,15557563,
jgarzik,2013-03-27T23:44:37Z,+1 for 0mq support in general.  Reading now...\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15560172,15560172,
laanwj,2013-03-28T10:45:22Z,I like this. Delivering events over 0mq for block/transaction/etc\nnotifications is much more elegant and efficient than launching commands.\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15580166,15580166,
petertodd,2013-03-28T12:27:25Z,"Note that 0mq is LGPL, which is a bit more restrictive than the MIT/BSD license that bitcoin-qt is currently licensed under. Specifically LGPL requires you to distribute binaries that can be relinked if the user decides to change the source of the LGPL library. Not an issue with dynamic linking, but static linking is problematic. Other than some graphics assets - see assets-attribution.txt - this ",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15585826,15585826,
gavinandresen,2013-03-28T14:50:45Z,"Nice!\nCan you put the trivial python client in contrib/0mq/ ?\n\nAlso:\n0mq is available in MacPorts, does version matter?\nzmq                            @3.2.2          devel/zmq\nzmq20                          @2.0.11         devel/zmq20\nzmq22                          @2.2.0          devel/zmq22\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15592572,15592572,
gmaxwell,2013-03-28T16:16:22Z,@petertodd  I was aware of the licensing— I don't think it's problematic.  We have LGPL (QT) and advertising-clause BSD (OpenSSL) in parts of the system which are more essential... ZeroMQ can at least just be left out by someone practicing extreme licensing confusion.  GMP for modular inversion will be a bigger question in the future.\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15597704,15597704,
ghost,2013-03-28T16:28:08Z,"@gavinandresen \n\nYes, the version does matter.  Use the version 3.2.2 (which is the latest stable one). \n\nQuote from 0mq:  ""We recommend this release to anyone developing new applications with ØMQ""\n\nI will include example client(s) under contrib/0mq in later commitments. \n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15598501,15598501,
petertodd,2013-03-28T16:29:06Z,"@gmaxwell Yup, it's a niche case for it to actually matter, but we should document it clearly for the lawyers; might as well put the info about our dependencies and associated license obligations in assets-attribution.txt or a similar file. (yes, I'm volunteering to write that up)\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15598559,15598559,
BitcoinPullTester,2013-03-30T10:37:57Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/7c05592af68dd7d1ec9219c1afe76207797f3214 for binaries and test log.\nThis is an automated test script which runs test cases on each commit every time is updated.\nIt, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at http://jenkins.bl",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15672530,15672530,
ghost,2013-03-30T16:34:40Z,@ BitcoinPullTester\n\nYou need to build with make -f makefile.unix USE_ZMQ=1\n\nto actually know if this pull request builds or not. You do need to have libzmq installed before that.\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15677339,15677339,
mikehearn,2013-04-01T15:54:11Z,"The idea is neat, but there doesn't seem to be much documentation on how to use it or what form the messages take. For instance you call the message ""new block"" but that's not correct is it, it's ""new best block"" - you won't see blocks that connect to a side chain and if a re-org happens (I think) you will only see the new top block and not the intervening blocks published on the queue. Or did I m",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15721285,15721285,
ghost,2013-04-01T16:20:51Z,"@mikehearn\n\nWhat the publisher does is to send new messages when something happens in the bitcoin client. You don't have to ask if something has happened, you already know that.\n\nUnder 'contrib/0mq/bitcoin-zmq.py' is an example client of how the publisher part works and their filter defined.\n\nPlease run this and take a look of what the output is. (Hint: all json)\n\nTo your other questions t",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-15722511,15722511,
luke-jr,2013-04-08T05:33:27Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-16033280,16033280,
mikehearn,2013-04-08T08:42:34Z,"Don't get me wrong, new best block isn't a bad thing to notify on. New side blocks probably aren't that interesting for most users anyway. Just pointing out that the naming/docs could be updated.\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-16038833,16038833,
TripleSpeeder,2013-04-12T20:44:48Z,"This makes a LOT of usecases possible. I use an older fork of bitcoind, based on even older implementation by Gavin, exactly for this purpose - Have an automatic callback whenever a transaction and/or block is coming in (See my fork on github).\n\nOne suggestion:\nAdd an option to get the ""incoming transaction"" notification only when it is for the own wallet. I think this would be a frequent useca",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-16316589,16316589,
laanwj,2013-04-15T15:58:30Z,"Some comments after code review:\n- There is no authentication for requests over ZMQ, do I get this right?\n- When compiling with USE_ZMQ, enabling it should be an option, not be done by default. This allows builders of Linux distributions (for example) to build an executable with all options enabled, and leaves it up to the end user to enable it or not.\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-16393896,16393896,
ghost,2013-04-15T16:19:43Z,"@laanwj \n\nThe usleep is only running if there is nothing for the thread to do. If we have a lot of request coming in, we will process this until the queue is empty. The reason why I have done this is to be able to shutdown the bitcoin process.\n\n0mq does not any authentication method. That's correct. Only allow it from trusted sources.\n\nThe default value for USE_ZMQ is zero (0) in the makefil",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-16395222,16395222,
laanwj,2013-04-15T17:19:26Z,"You seem to be completely misunderstanding me\n\n1) I know why you added the usleep, so my suggestion is to use a ""blocking read"" for the same time instead of an usleep (which doesn't process messages when they come in). Not an unbounded blocking wait, of course, that would indeed make it impossible to exit the client.\n\n2) I agree with ""allow it from trusted sources only"". How does this work? Is",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-16398766,16398766,
jgarzik,2013-05-30T16:48:13Z,"Agree with @laanwj comments.\n\nLet's go those addressed, and get this merged.\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-18693102,18693102,
doublec,2013-05-31T23:58:56Z,"Would it be faster to split this into two pull requests? The first to do the pub/sub notifications of transactions, blocks and ip addresses. The second for the zmq based RPC server. The reason for splitting the latter is there is likely to be much discussion over authentication which would bog down the acceptance of the notification patch,\n\nI've been using my own zmq patch for notification of bl",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-18779696,18779696,
luke-jr,2013-07-17T03:48:42Z,@fredan Are you going to fix this up?\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-21090391,21090391,
jgarzik,2013-08-25T03:21:29Z,"Ping @fredan.  Also, ping @doublec in case you are motivated to split this up, and get 0mq support moving again.\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-23221167,23221167,
laanwj,2013-08-29T11:30:09Z,Splitting it into two sounds like a good idea. I suppose the notifications can be unauthenticated.\n,https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-23482490,23482490,
gavinandresen,2013-10-21T01:39:44Z,"Closing this because of inactivity. If you have time to rework this so it merges cleanly against the current tree, please open a new pull request (and link to the discussion in this closed request, if it is relevant).\n",https://github.com/bitcoin/bitcoin/pull/2415#issuecomment-26688588,26688588,
laanwj,2013-04-15T16:01:59Z,"Do you need this usleep? If zeromq has a way to block XXms waiting for a request, I'd prefer that. It would result in less latency when responding to requests and means the process doesn't have to wake up unnecessarily.\n",https://github.com/bitcoin/bitcoin/pull/2415#discussion_r3796459,3796459,src/bitcoin_zmq.cpp
