DrahtBot,2020-02-03 23:41:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18191 (Epoch mempool cache regression plus remove excluded set. by JeremyRubin)\n\nIf you consider this pull request impo",https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-581672987,581672987,
sdaftuar,2020-02-10 20:12:51,"> The cache was an optimization to limit re-traversal in UpdateForDescendants. But because we know that descendants limit limits the total number of descendants, this actually doesn't help that much. There are some common cases where having a CacheMap might be faster, but an adversary can trivially construct a worst-case example that causes equal behavior with or without a cachemap. For example, a",https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-584330983,584330983,
JeremyRubin,2020-02-10 22:14:16,"So I think what's confusing about it is that it does ""hinder"" one attacker, but opens up a different attacker. I think what's worse is that with this redress, we have gone from a small processing time issue (which is sad) to a memory attack (which can cause nodes to OOM). Therefore IMO it's not worthwhile.\n\nIt's also unclear who is getting walked in this case to me -- are we walking things tha",https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-584384046,584384046,
adamjonas,2020-02-18 22:55:09,"To catch reviewers up, ~#18120~ #18191 has been peeled off from this because it is a more clear-cut win.\n\nBased on the conversation between @sdaftuar and @JeremyRubin in [IRC](http://www.erisian.com.au/bitcoin-core-dev/log-2020-02-11.html#l-374), the second commit, which eliminates the cache, can allocate a _lot_ of memory which would OOM the process in worst-case scenarios. There may be an op",https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-587945596,587945596,
sdaftuar,2020-02-10 19:17:36,"From reading this code, it looks like if you have a hit in the cache, then you wouldn't end up adding `grand_child_it` to `update_cache`; you'd just add `grand_child_it`'s descendants?   That looks like a bug, though I haven't written a test to try to demonstrate it.\n\nI know the cache goes away in the next commit, so assuming that makes sense then this may not be worth fixing (versus just squa",https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377263645,377263645,src/txmempool.cpp
JeremyRubin,2020-02-10 20:44:31,I think you're correct about that. The fix is to include grand_child_it and then swap it into the already_traversed index if there is a hit.,https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377305680,377305680,src/txmempool.cpp
JeremyRubin,2020-02-11 01:23:02,fixed,https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377410129,377410129,src/txmempool.cpp
