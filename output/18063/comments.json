[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/581672987",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-581672987",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18063",
    "id": 581672987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTY3Mjk4Nw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-03T23:41:29Z",
    "updated_at": "2020-03-06T02:22:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18191 (Epoch mempool cache regression plus remove excluded set. by JeremyRubin)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/581672987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584330983",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-584330983",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18063",
    "id": 584330983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDMzMDk4Mw==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-10T20:12:51Z",
    "updated_at": "2020-02-10T20:12:51Z",
    "author_association": "MEMBER",
    "body": "> The cache was an optimization to limit re-traversal in UpdateForDescendants. But because we know that descendants limit limits the total number of descendants, this actually doesn't help that much. There are some common cases where having a CacheMap might be faster, but an adversary can trivially construct a worst-case example that causes equal behavior with or without a cachemap. For example, a transaction with N/2 children which each have N/2 outputs that get spent by N/2 grandchildren will cause the parent to iterate over N^2 entries with or without CacheMap. Post Epochs, UpdateForDescendants is sufficiently cheap such that the cachemap is just extra memory overhead.\r\n\r\nI've been thinking about this again, trying to remember the motivation here.  I think the concern is that when you're adding back transactions from a block, you have no guarantees for what kinds of chains could exist in that block.  For instance, maybe you have a block with 4000 transactions that consist of each transaction being a child of the one preceding it?  In that situation, it seems like caching the results as you go could be faster than rewalking each time.\r\n\r\nI can try to come up with some adversarial examples and benchmark them.  It's not totally obvious what to be optimizing for; I imagine that in the common case having no cache is best, but limiting worst-case behavior might be the better metric here (so that a reorg-capable-attacker isn't sidelining honest hashpower through tricks like this).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584330983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584384046",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-584384046",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18063",
    "id": 584384046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDM4NDA0Ng==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-10T22:14:16Z",
    "updated_at": "2020-02-10T22:14:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I think what's confusing about it is that it does \"hinder\" one attacker, but opens up a different attacker. I think what's worse is that with this redress, we have gone from a small processing time issue (which is sad) to a memory attack (which can cause nodes to OOM). Therefore IMO it's not worthwhile.\r\n\r\nIt's also unclear who is getting walked in this case to me -- are we walking things that are still in the MemPool or things that came from the block?\r\n\r\nIn either case, the argument is roughly the same:\r\n\r\nSuppose I have N/2 direct children with N/2 outputs and N/2 grandchildren with N/2 inputs.\r\n\r\n![image](https://user-images.githubusercontent.com/886523/74191765-0c1f0e80-4c09-11ea-849d-ee709f0bb8d3.png)\r\n\r\n\r\nSo the traversal is equal or better for every node except node -1. However, if we use a node 17 instead of node -1:\r\n\r\n![image](https://user-images.githubusercontent.com/886523/74191796-150fe000-4c09-11ea-88c9-4d587483de31.png)\r\n\r\nWhat this shows us is the cache working to keep the runtimes consistent on this pattern, but that uncached isn't *substantially* worse. If you look at these in Big-O, they come out to the same polynomial, so it's really about the constants.\r\n\r\nLet's look at another example.\r\n\r\n![image](https://user-images.githubusercontent.com/886523/74192668-cf541700-4c0a-11ea-8d9a-37714ae3bbdd.png)\r\n\r\nSo by doing a simple linear chain, our cache can now use O(N^2) memory. Here the caching is worthless, except if it is faster to traverse the cache data structure than the MempoolChildren. For context if the smallest transaction is 61 bytes...\r\n\r\n(1mb / 61 bytes)**2 * 8 bytes = 2 GB.\r\n\r\nThis sort of attack is more concerning than the fan out one above, because the fan in/out inputs and outputs are somewhat  \"self limiting\", e.g.:\r\n\r\nmaximize n*m subject to (61 + n*9) + (61 + n * 41 + m * 9) + (61 + m * 41) < 1e6\r\n\r\nm, n = 10000, 10000\r\n\r\nThen we have n caches of size m, or 800 MB.\r\n\r\n\r\n\r\nThe worst case complexity for non-cached is probably combo-ing a one in one out with a fanned out anchor. Suppose we have N/2 for a chain, and then N/2 for fan out. With or without caching, you end up with something that is N^3 (with caching: N/2 iterations over a N^2 cache, without caching: N/2 iterations over a N^2 subtree).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584384046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587945596",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#issuecomment-587945596",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18063",
    "id": 587945596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Nzk0NTU5Ng==",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?u=fc2e6f106f98731d49e9787f9cbfe86a17447c23&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T22:55:09Z",
    "updated_at": "2020-03-09T15:32:27Z",
    "author_association": "MEMBER",
    "body": "To catch reviewers up, ~#18120~ #18191 has been peeled off from this because it is a more clear-cut win.\r\n\r\nBased on the conversation between @sdaftuar and @JeremyRubin in [IRC](http://www.erisian.com.au/bitcoin-core-dev/log-2020-02-11.html#l-374), the second commit, which eliminates the cache, can allocate a _lot_ of memory which would OOM the process in worst-case scenarios. There may be an opportunity, however, to find a sweet spot where the memory tradeoff is worth the CPU benefit.\r\n\r\nFurther investigation and possible re-architecting are still under discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587945596/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377263645",
    "pull_request_review_id": 356194912,
    "id": 377263645,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2MzY0NQ==",
    "diff_hunk": "@@ -57,48 +57,69 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const std::set<uint256>& exclude)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    const CTxMemPool::setEntries& direct_children = GetMemPoolChildren(update_it);\n+    // set up the update_cache to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction)\n+    vecEntries update_cache;\n+    update_cache.reserve(direct_children.size());\n+    // mark every direct_child as visited so that we don't accidentally re-add them\n+    // to the cache in the grandchild is child case\n+    for (const txiter direct_child : direct_children) {\n+        update_cache.emplace_back(direct_child);\n+        visited(direct_child);\n+    }\n+    // already_traversed index keeps track of the elements that we've\n+    // already expanded. If index is < already_traversed, we've walked it.\n+    // If index is >= already_traversed, we need to walk it.\n+    // If already_traversed >= update_cache.size(), we're finished.\n+    for (size_t already_traversed = 0; already_traversed < update_cache.size(); /* modified in loop body */) {\n+        // rotate the back() to behind already_traversed\n+        const txiter child_it = update_cache.back();\n+        std::swap(update_cache[already_traversed++], update_cache.back());\n+\n+        // N.B. grand_children may also be children\n+        const CTxMemPool::setEntries& grand_children = GetMemPoolChildren(child_it);\n+        for (const txiter grand_child_it : grand_children) {\n+            if (visited(grand_child_it)) continue;\n+            cacheMap::iterator cached_great_grand_children = cache.find(grand_child_it);\n+            if (cached_great_grand_children != cache.end()) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "a2cae4270711f85582aa184d156d5beb119db129",
    "original_commit_id": "89a50ce5cb022332d3381c9b5588e1c2f0f473c6",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "From reading this code, it looks like if you have a hit in the cache, then you wouldn't end up adding `grand_child_it` to `update_cache`; you'd just add `grand_child_it`'s descendants?   That looks like a bug, though I haven't written a test to try to demonstrate it.\r\n\r\nI know the cache goes away in the next commit, so assuming that makes sense then this may not be worth fixing (versus just squashing the two commits together), but I think it'd just be a two-line fix, if my understanding is correct?",
    "created_at": "2020-02-10T19:17:36Z",
    "updated_at": "2020-02-11T01:23:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377263645",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18063",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377263645"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377263645"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18063"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377263645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377305680",
    "pull_request_review_id": 356249080,
    "id": 377305680,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwNTY4MA==",
    "diff_hunk": "@@ -57,48 +57,69 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const std::set<uint256>& exclude)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    const CTxMemPool::setEntries& direct_children = GetMemPoolChildren(update_it);\n+    // set up the update_cache to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction)\n+    vecEntries update_cache;\n+    update_cache.reserve(direct_children.size());\n+    // mark every direct_child as visited so that we don't accidentally re-add them\n+    // to the cache in the grandchild is child case\n+    for (const txiter direct_child : direct_children) {\n+        update_cache.emplace_back(direct_child);\n+        visited(direct_child);\n+    }\n+    // already_traversed index keeps track of the elements that we've\n+    // already expanded. If index is < already_traversed, we've walked it.\n+    // If index is >= already_traversed, we need to walk it.\n+    // If already_traversed >= update_cache.size(), we're finished.\n+    for (size_t already_traversed = 0; already_traversed < update_cache.size(); /* modified in loop body */) {\n+        // rotate the back() to behind already_traversed\n+        const txiter child_it = update_cache.back();\n+        std::swap(update_cache[already_traversed++], update_cache.back());\n+\n+        // N.B. grand_children may also be children\n+        const CTxMemPool::setEntries& grand_children = GetMemPoolChildren(child_it);\n+        for (const txiter grand_child_it : grand_children) {\n+            if (visited(grand_child_it)) continue;\n+            cacheMap::iterator cached_great_grand_children = cache.find(grand_child_it);\n+            if (cached_great_grand_children != cache.end()) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "a2cae4270711f85582aa184d156d5beb119db129",
    "original_commit_id": "89a50ce5cb022332d3381c9b5588e1c2f0f473c6",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you're correct about that. The fix is to include grand_child_it and then swap it into the already_traversed index if there is a hit.",
    "created_at": "2020-02-10T20:44:31Z",
    "updated_at": "2020-02-11T01:23:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377305680",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18063",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377305680"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377305680"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18063"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377305680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT",
    "in_reply_to_id": 377263645
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377410129",
    "pull_request_review_id": 356376360,
    "id": 377410129,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMDEyOQ==",
    "diff_hunk": "@@ -57,48 +57,69 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const std::set<uint256>& exclude)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    const CTxMemPool::setEntries& direct_children = GetMemPoolChildren(update_it);\n+    // set up the update_cache to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction)\n+    vecEntries update_cache;\n+    update_cache.reserve(direct_children.size());\n+    // mark every direct_child as visited so that we don't accidentally re-add them\n+    // to the cache in the grandchild is child case\n+    for (const txiter direct_child : direct_children) {\n+        update_cache.emplace_back(direct_child);\n+        visited(direct_child);\n+    }\n+    // already_traversed index keeps track of the elements that we've\n+    // already expanded. If index is < already_traversed, we've walked it.\n+    // If index is >= already_traversed, we need to walk it.\n+    // If already_traversed >= update_cache.size(), we're finished.\n+    for (size_t already_traversed = 0; already_traversed < update_cache.size(); /* modified in loop body */) {\n+        // rotate the back() to behind already_traversed\n+        const txiter child_it = update_cache.back();\n+        std::swap(update_cache[already_traversed++], update_cache.back());\n+\n+        // N.B. grand_children may also be children\n+        const CTxMemPool::setEntries& grand_children = GetMemPoolChildren(child_it);\n+        for (const txiter grand_child_it : grand_children) {\n+            if (visited(grand_child_it)) continue;\n+            cacheMap::iterator cached_great_grand_children = cache.find(grand_child_it);\n+            if (cached_great_grand_children != cache.end()) {",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "a2cae4270711f85582aa184d156d5beb119db129",
    "original_commit_id": "89a50ce5cb022332d3381c9b5588e1c2f0f473c6",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-02-11T01:23:02Z",
    "updated_at": "2020-02-11T01:23:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377410129",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18063",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377410129"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18063#discussion_r377410129"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18063"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377410129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT",
    "in_reply_to_id": 377263645
  }
]