dongcarl,2021-07-27 20:02:06,"Ping @jnewbery, since https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-858536566 :relaxed: ",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-887796309,887796309,
jnewbery,2021-07-27 21:48:03,Concept ACK. Globals must fall!,https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-887856830,887856830,
DrahtBot,2021-07-28 10:06:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23280](https://github.com/bitcoin/bitcoin/pull/23280) (init: Coalesce Chainstate loading sequence between {,non-}unittes",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-888183043,888183043,
dongcarl,2021-08-24 17:57:12,"Pushed f741623c25 -> 6e6472e6dc\n- Address https://github.com/bitcoin/bitcoin/pull/22564#discussion_r694260466\n- Address https://github.com/bitcoin/bitcoin/pull/22564#discussion_r680513805",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-904855311,904855311,
dongcarl,2021-08-24 18:45:58,"Pushed 6e6472e6dc -> 6bb9ed3f62:\n- Rebased on master",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-904886902,904886902,
jamesob,2021-09-14 19:50:24,"Concept ACK, will review in next few days",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-919464754,919464754,
jamesob,2021-09-29 17:20:31,"For what it's worth, I benched this and there don't seem to be any significant performance implications to moving block index entries from `CBlockIndex` pointers to values.\n\n---\n\n\n|          bench name           |                                                                                                     command                                                                     ",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-930377301,930377301,
dongcarl,2021-10-07 01:52:08,"Pushed 71bacd9 -> e78b6e5:\n- Addressed https://github.com/bitcoin/bitcoin/pull/22564#discussion_r712573048\n- Addressed https://github.com/bitcoin/bitcoin/pull/22564#discussion_r712598917\n- Addressed https://github.com/bitcoin/bitcoin/pull/22564#discussion_r716945997\n- Addressed https://github.com/bitcoin/bitcoin/pull/22564#discussion_r716987095\n\n",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-937379956,937379956,
dongcarl,2021-10-07 01:59:08,"Pushed e78b6e5 -> 5b72333:\n- Rebased over master",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-937382271,937382271,
dongcarl,2021-10-08 22:16:50,"Pushed 5b72333 -> 148bf14\n- Added `CBlockUndo` forward declaration\n- Made intermediate commits comply with lock annotations by adding `GUARDED_BY` annotations to `extern` declarations and fixing up code",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-939145083,939145083,
dongcarl,2021-10-09 00:39:26,"Pushed 148bf148e198027b25894df429dd13b9ca9f60a1 -> 0898078ed59453cc850ebe08010e68e6dea51dbd:\n- Only move the `PeerManager` construction in ""init: Reset mempool and chainman via reconstruction"" so that it's more easily reviewable.",https://github.com/bitcoin/bitcoin/pull/22564#issuecomment-939192113,939192113,
ajtowns,2021-08-01 12:23:58,"Hard NACK -- the signatures for the two versions of `DeploymentActiveAfter` (and `..At`) should only differ by whether they accept a `DeploymentPos` or a `BuriedDeployment`, otherwise we're back to having to edit bunches of call sites when burying deployments.\n\nBUT... I think you can get the result you're trying for by making `DeploymentActiveAfter` (and `..At`) inline member functions of `Blo",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r680503657,680503657,src/deploymentstatus.h
ajtowns,2021-08-01 13:06:26,"Note that there shouldn't be any logical need for this to be cleared here -- the cached information doesn't become invalid when we load up different blocks, only if the consensus parameters are changed.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r680508909,680508909,src/validation.cpp
ajtowns,2021-08-01 13:44:15,Should be `auto& i : warningcache` ??,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r680513805,680513805,src/validation.cpp
MarcoFalke,2021-08-01 14:24:19,"Wouldn't another class in validation be better suited to host the deployment status? My goal was to move BlockManger to node/storage and have it deal with storage only, not validation. ",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r680518852,680518852,src/deploymentstatus.h
ajtowns,2021-08-01 14:52:31,"@MarcoFalke Maybe? I look at deployment status as an expansion of Consensus::Params -- so more as input to validation than a result of it. If we switch to using the coinbase witness nonce for deployment signalling we'd need to change the way we store blocks so that it's easy to access that info without having to load every signalling block from disk, so it's kind-of storage related in that sense?",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r680522667,680522667,src/deploymentstatus.h
dongcarl,2021-08-03 19:27:49,"> the signatures for the two versions of `DeploymentActiveAfter` (and `..At`) should only differ by whether they accept a `DeploymentPos` or a `BuriedDeployment`, otherwise we're back to having to edit bunches of call sites when burying deployments.\n\nOh I did not realize that this was the case! Note to self: add a code comment documenting this.\n\n> BUT... I think you can get the result you'",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r682041105,682041105,src/deploymentstatus.h
ryanofsky,2021-08-23 19:46:31,"In commit ""No more heap BlockIndices"" (6a897c0601dff4f116b1ab223595c5c2fac0e7a3)\n\nComment seems to lack a little context, maybe prefix with ""Because validation code takes pointers to the map's CBlockIndex objects, if we ever switch...""",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r694260466,694260466,src/validation.h
dongcarl,2021-08-24 19:29:37,"Is this the same case for `warningcache` as well? If so, perhaps we'll just move the clearing logic to `SelectParams` and not move these two structures into `BlockManager`?",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695141648,695141648,src/validation.cpp
ryanofsky,2021-08-25 14:42:37,"In commit ""Move pindexBest{Header,Invalid} to BlockManager"" (9fdf6825bc6a3a27b23b7a1015afc33b3a62effd)\n\nIs there a reason these are moved to BlockManager class instead of ChainstateManager class? I don't see anywhere where the blockmanager class itself is accessing these members, and I don't see any references to this through any blockmanager reference except the ChainStateManager::m_blockman ",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695824018,695824018,src/validation.h
ryanofsky,2021-08-25 14:59:53,"In commit ""Move setDirty{BlockIndex,FileInfo} to BlockManager"" (feb62ff2a0af6fedfaa3078b1a512416cdf71264)\n\nShould just delete these old function declarations (now that they are member functions)",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695841110,695841110,src/node/blockstorage.h
ryanofsky,2021-08-25 15:05:44,"In commit ""Move setDirty{BlockIndex,FileInfo} to BlockManager"" (feb62ff2a0af6fedfaa3078b1a512416cdf71264)\n\nCan these clears which are moved from `UnloadBlockIndex` to `BlockManager::Unload` be done in a different commit before all the other changes in this commit? It's confusing because `UnloadBlockIndex` isn't even calling `BlockManager::Unload` directly, but indirectly through the `Chainstat",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695846531,695846531,src/validation.cpp
ryanofsky,2021-08-25 15:32:40,"In commit ""Move setDirty{BlockIndex,FileInfo} to BlockManager"" (feb62ff2a0af6fedfaa3078b1a512416cdf71264)\n\nMoving these variables to BlockManager makes more sense to me than moving pIndexBest variables in the prior commit, but it would helpful to say why this move destination makes sense in the commit description. Maybe ""Move these variables to block manager because they are used to update the",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695871478,695871478,src/validation.h
dongcarl,2021-08-25 16:59:12,"I believe they are accessed by `BlockManager` here: https://github.com/bitcoin/bitcoin/blob/21438d55d553ae5bf3be7c0d4431aaf136db6c6b/src/validation.cpp#L3732-L3737\n\nAdditionally (and I'd like feedback on if this makes sense), it seems to me that variables whose type involve `CBlockIndex*` should likely live an die with the `BlockManager` since it owns the `BlockMap` entries to which these poin",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695941754,695941754,src/validation.h
ryanofsky,2021-08-25 17:41:34,"> I believe they are accessed by `BlockManager` here:\n> \n> https://github.com/bitcoin/bitcoin/blob/21438d55d553ae5bf3be7c0d4431aaf136db6c6b/src/validation.cpp#L3732-L3737\n> \n> Additionally (and I'd like feedback on if this makes sense), it seems to me that variables whose type involve `CBlockIndex*` should likely live an die with the `BlockManager` since it owns the `BlockMap` entries to w",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695978717,695978717,src/validation.h
ryanofsky,2021-08-25 17:58:17,"Looking at your link more it does make some sense to me to keep these variables here if they can be derived directly from block index data like that.\n\nThe boundaries are definitely a little blurry here and in longer run I'd be inclined to want to move this logic out of the Block Manager class so it is just responsible storing the index data and not interpreting it so much. In short run I would",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r695990703,695990703,src/validation.h
ryanofsky,2021-08-26 17:13:50,"In commit ""validation: Add missing cs_LastBlockFile locks in PruneAndFlush() and UnloadBlockIndex(). Add missing locking annotation for nLastBlockFile and fCheckForPruning."" (ccd6ec5e620dbb3ae251b3511d00aaf3614e97da)\n\nI think `GUARDED_BY(cs_LastBlockFile)` should be added here to the `vinfoBlockFile` variable as well. The ""last block"" mutex name is confusing, but I believe the naming only ende",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r696827015,696827015,src/node/blockstorage.cpp
ryanofsky,2021-08-27 16:35:46,"In commit ""validation: Add missing cs_nBlockSequenceId lock in UnloadBlockIndex(). Add missing locking annotation for nBlockSequenceId."" (7c3f21a5c16e83ef6baacbcd600d15a470ff1e5b)\n\nTwo notes for future improvements:\n\n- Looking at actual `nBlockSequenceId` uses, it is really just used as an atomic, and could be replaced with an atomic and the mutex could be eliminated with no change in beha",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r697576048,697576048,src/validation.h
ryanofsky,2021-08-27 16:50:58,"In commit ""Move cs_LastBlockFile guarded objects to BlockManager"" (ca77cd53abb455847094cecdc11b217c64166de8)\n\nShould fully remove this declaration and the one below",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r697585112,697585112,src/node/blockstorage.h
ryanofsky,2021-08-27 16:55:05,"In commit ""Move cs_LastBlockFile guarded objects to BlockManager"" (ca77cd53abb455847094cecdc11b217c64166de8)\n\nIt would seem better to keep this comment which is still summarizing behavior of this block of code.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r697587487,697587487,src/test/validation_chainstate_tests.cpp
ryanofsky,2021-08-27 17:07:00,"In commit ""Move cs_LastBlockFile guarded objects to BlockManager"" (ca77cd53abb455847094cecdc11b217c64166de8)\n\nI guess this is a preexisting thing better to address in a different PR, but it seems wrong if cs_main is required to get a *pointer* to blockman from the chainman. I didn't look but ideally the blockman pointer would be set once in the chainman constructor and could just be const. Or ",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r697594297,697594297,src/wallet/test/wallet_tests.cpp
ryanofsky,2021-08-30 17:08:50,"In commit ""Move fHavePruned to BlockManager"" (b40f35d7f0507fcfb71d1c950c5158d6ff5fdb5e)\n\nThis is another place like https://github.com/bitcoin/bitcoin/pull/22564#discussion_r697594297 where it looks like m_blockman is improperly annotated to require cs_main. In general, if you have a variable\n\n```c++\nT variable GUARDED_BY(mutex);\n```\n\nAnd you are writing `WITH_LOCK(mutex, return &v",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r698659280,698659280,src/bench/rpc_blockchain.cpp
dongcarl,2021-09-14 18:07:22,Deleted as of d849178b9c36de80cded34a5305236282d7b24d6,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708512723,708512723,src/node/blockstorage.h
dongcarl,2021-09-14 18:09:05,"First note done in master, second note done by: b903d3b682bc1a779f924fb9da778ec295ab017b",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708513880,708513880,src/validation.h
dongcarl,2021-09-14 18:09:26,Removed as of d849178b9c36de80cded34a5305236282d7b24d6,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708514137,708514137,src/node/blockstorage.h
dongcarl,2021-09-14 18:09:31,Removed as of d849178b9c36de80cded34a5305236282d7b24d6,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708514206,708514206,src/node/blockstorage.h
dongcarl,2021-09-14 18:10:02,Fixed in 8fd345b98f8b8cb81a2c5c9e227405364d7b46a2,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708514602,708514602,src/test/validation_chainstate_tests.cpp
dongcarl,2021-09-14 19:27:08,"vinfo guarded in: 952482e8598c9bd38a7a4e382c0c791acda11ff4\ncs_LastBlockFile renamed in: 71bacd9265f66f4ffc94f551dcdb9fc64e673fb9",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708567724,708567724,src/node/blockstorage.cpp
dongcarl,2021-09-14 19:41:15,Description added to fa455c0339561ca19a3edd6b249be962ae87194d,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708577418,708577418,src/validation.h
ajtowns,2021-09-15 03:04:45,"Yes, `warningcache` only relies on the chain history, consensus params, and versionbitscache state. Moving the clearing logic to `SelectParams` would introduce a circular dependency though, I think?",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708801191,708801191,src/validation.cpp
ajtowns,2021-09-15 05:02:35,"> This looks good to me, and it seems like they would eventually end up having to interact with `BlockManager` anyway according to the following?\n\nWell, using the cb wit nonce for activation signalling might never happen, and even if it does, I think it's a fair way off (since it would need getblocktemplate changes or stratumv2 or similar to make it even possible), so I wouldn't put too much w",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r708839714,708839714,src/deploymentstatus.h
jamesob,2021-09-20 23:06:23,"Not at all blocking and could be done in a separate commit, but might be nice to add a docstring describing purpose and usage of this member while all this is fresh in your head.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r712573048,712573048,src/validation.h
jamesob,2021-09-20 23:59:52,"https://github.com/bitcoin/bitcoin/pull/22564/commits/fa455c0339561ca19a3edd6b249be962ae87194d\n\nMight mention these changes somewhere in the commit message; I was surprised to see them here after reading it.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r712598917,712598917,src/node/blockstorage.cpp
jamesob,2021-09-27 18:34:55,"17f227f6d44bb417d0c6540e081d4d374bece6a7\n\nI think this forward declaration is probably outdated and doesn't seem necessary anymore - I was able to compile without it.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r716945997,716945997,src/versionbits.h
jamesob,2021-09-27 19:37:28,"https://github.com/bitcoin/bitcoin/pull/22564/commits/b48d7c010f644ed01e310ea4ab590580640a16b7\n\nTook me awhile to parse this name. I'm not opposed, it's kind of cute, but is it something we've used before? Maybe `newIndex`?",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r716987095,716987095,src/validation.cpp
jamesob,2021-09-27 19:54:21,"https://github.com/bitcoin/bitcoin/pull/22564/commits/b48d7c010f644ed01e310ea4ab590580640a16b7\n\nI'm not so worried about this function in particular since it's really only executed once on startup, but I've got to imagine there may be some performance implications if we're potentially introducing a lot of CBlockIndex value copying (vs. the pointers). \n\nThis does strike me as a pretty big c",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r716998451,716998451,src/validation.cpp
jamesob,2021-09-28 14:19:33,"https://github.com/bitcoin/bitcoin/pull/22564/commits/3de7842f50c44e6bed675048737e19a1d8ca5fa4\n\nThis is most easily reviewed with `--color-move=dimmed_zebra`.\n\nGiven that init reordering is notoriously tricky, we should probably be sure to test invocation of `bitcoind` with each flag that was moved here.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r717628411,717628411,src/init.cpp
dongcarl,2021-10-06 19:48:15,"> we're potentially introducing a lot of CBlockIndex value copying (vs. the pointers)\n\nI don't think we're introducing value copying because we're iterating with `std::pair<...>&`, but perhaps there's something I'm missing? When I asked him about it, ryanofsky also pointed out that the const reference was actually more dangerous since it could have created copies through implicit conversion.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r723625367,723625367,src/validation.cpp
dongcarl,2021-10-06 19:48:46,"Yes, I think I'm going to work a bit more on this commit to see if I can make it more easily reviewable.",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r723625689,723625689,src/init.cpp
dongcarl,2021-10-07 01:40:54,"Good idea, added in e78b6e5105",https://github.com/bitcoin/bitcoin/pull/22564#discussion_r723787975,723787975,src/validation.h
dongcarl,2021-10-07 01:41:17,True! Fixed in f99156b575!,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r723788163,723788163,src/node/blockstorage.cpp
dongcarl,2021-10-07 01:41:31,Done! f5ad3509dc,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r723788218,723788218,src/versionbits.h
dongcarl,2021-10-07 01:41:52,Hehe that's an artifact from me experimenting. Changed in 5bab523f31!,https://github.com/bitcoin/bitcoin/pull/22564#discussion_r723788315,723788315,src/validation.cpp
