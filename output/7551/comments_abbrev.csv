laanwj,2016-02-17T18:22:08Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185334798,185334798,
instagibbs,2016-02-18T02:39:32Z,concept ACK\n\nI have implemented a method to also simply just import an spv proof + transaction rather than rescan. Would be nice to include that in this as well. (need to add tests and PR...)\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185516219,185516219,
jonasschnelli,2016-02-18T14:33:27Z,"Concept ACK.\nIIRC, this would be the first RPC command that accept a associative array parameter list (`json options (json, optional) Options`). IMO this is good but I would prefer a general way of providing key/value parameters for RPC commands (probably out-of-scope for this PR).\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185747197,185747197,
laanwj,2016-02-19T09:51:18Z,"> IIRC, this would be the first RPC command that accept a associative array parameter list\n\nI agree. Though I've done a similar thing in #7552. Use positional arguments only for the 'essential' arguments, and an associative array for everything optional or future-extensible.\n\nMuch less hassle and confusing than APIs with tons of positional arguments, especially optional ones.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-186143004,186143004,
promag,2016-02-19T10:29:50Z,@jonasschnelli there is also https://github.com/bitcoin/bitcoin/pull/7518 that accepts options as a JSON object.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-186160708,186160708,
luke-jr,2016-02-25T11:45:51Z,GBT also uses an options Object\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-188748840,188748840,
jtimon,2016-02-25T23:10:40Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-189026033,189026033,
pedrobranco,2016-03-10T14:44:48Z,"Replaced the output result from   [ { ""**result**"": true } , ... ] to [ { ""**success**"": true } , ... ].\n\nIn case of giving a exception should we show any information of the reason in the result? Something like:\n[ { ""success"": false , **error** : { ""code"": -5, ""message"": ""Invalid private key encoding"" } } , ... ]\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-194880245,194880245,
instagibbs,2016-03-10T14:51:12Z,"Passing along error messages would be hugely helpful, yes.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-194884014,194884014,
pedrobranco,2016-03-10T15:32:55Z,"@instagibbs :+1: \n\nAnother thing, currently we match the input to the output status by the order given of the input array. \nShouldn't we put some information of the input (unique enough) in the output to be easier take some action in case of success/failure? \n\nExample:\n\ninput = [ { type: ""address"", value: ""myaddress1""}, { type: ""address"", value: ""myaddress2""}, ... ]\noutput = [ { success: t",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-194906398,194906398,
instagibbs,2016-03-14T15:12:41Z,I'll have to defer to others on the value of that. I don't see much value-add personally but unsure.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-196361386,196361386,
mrbandrews,2016-03-17T18:59:26Z,Lightly tested ACK.\nI made a few nit comments on the python test. \nIf you wanted you could add a test that trying to import a private key and scriptpubKey for the same address fails.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-198034632,198034632,
pedrobranco,2016-03-28T13:10:49Z,@mrbandrews Test added.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202385808,202385808,
MarcoFalke,2016-03-28T14:49:02Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202423784,202423784,
laanwj,2016-03-29T09:16:33Z,Needs rebase after #7558\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202794361,202794361,
pedrobranco,2016-03-29T15:30:50Z,> Nit: Would be nice to be more verbose here.\n\n@MarcoFalke What do you suggest?\n\n@laanwj Rebased.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202955265,202955265,
pedrobranco,2016-04-04T15:31:04Z,@laanwj Are you considering merging this soon?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-205351792,205351792,
sipa,2016-04-14T09:40:50Z,"Sorry for the very late response here, but I think it's undesirable to have the ""p2sh"" flag in this call. The fact that it's present in importscript is historical, but quite confusing I think (see #7687).\n\nHere is what happens:\n\n> importaddress ""script"" p2sh=false\n\nwill mark scriptPubKeys that exactly match script as ismine, but without the ability to spend them, and there is no address adde",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-209852807,209852807,
sipa,2016-04-14T09:57:06Z,"To add some more background: ultimately, there are 3 internal calls that can be issued:\n- AddCScript(redeemscript) allows the wallet to construct scriptSigs for scriptPubKeys that send to P2SH(redeemscript). This only affects ismine when redeemscript itself can be signed for.\n- AddWatchOnly(scriptPubKey) marks a particular scriptPubKey as unconditionally ismine (whether we know how to construct ",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-209858703,209858703,
btcdrak,2016-04-14T10:51:13Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-209877337,209877337,
pedrobranco,2016-04-18T12:26:37Z,@sipa Thanks for the explanation. I've added p2sh support only because `importaddress` rpc call already had it. Do you agree that we should remove _p2sh_ flag from `importmulti` call?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-211357809,211357809,
laanwj,2016-04-25T13:30:44Z,"Maybe I'm misunderstanding this, but I think the type should fully specify what kind of object is imported:\n\n```\n      ""type"": ""privkey | pubkey | address | script"", (string, required) Type of address\n```\n\nThis makes an extra P2SH flag redundant.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-214328723,214328723,
sipa,2016-04-25T13:33:59Z,"script is ambiguous: it can mean ""i'm importing this script, so that when it is used as a P2SH redeemscript, the client knows how to sign it"", or ""i want outputs spending to this exact script to be counting towards my balance and listunspent"".\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-214330051,214330051,
laanwj,2016-04-25T13:34:56Z,Then add a different type for either case?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-214330364,214330364,
laanwj,2016-04-25T13:36:33Z,"eh, the  ""i'm importing this script, so that when it is used as a P2SH redeemscript, the client knows how to sign it"" case probably doesn't belong here at all, as it relates to signing and doesn't affect the balance/rescan?\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-214330859,214330859,
sipa,2016-04-25T13:38:48Z,"@laanwj It does, because if that script itself uses keys that are known to the wallet, it will make such outputs be considered spendable.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-214331463,214331463,
sipa,2016-04-25T15:32:08Z,"I'm sorry for just mentioning some background and complaints, and not offering a good solution. But I think we have a mess that is caused by having half a dozen different ways through which a script can be considered spendable/solvable/ismine, and having magic import commands with many edge cases (like importaddress now) that just try to do as much as possible, and we should not maintain that in n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-214397377,214397377,
promag,2016-05-02T13:41:31Z,@sipa thanks for these insights!\n\nTotally agree with @sipa regarding the object keys. Specially because there is no `type` key 👏  With these keys we can be sure the caller knows his business.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-216237814,216237814,
promag,2016-05-02T13:47:54Z,@sipa replace `output` by `scriptPubKey` ?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-216239765,216239765,
sipa,2016-05-02T13:52:59Z,"@promag I considered that, but if it's an address, it's not really a scriptPubKey (especially if there is ever support for things like stealth addresses (which contain cryptographic information that never actually directly ends up in the scriptPubKey).\n\nPerhaps there should be two separate fields, address or scriptPubKey, and you're required to exactly provide one of them.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-216241719,216241719,
pedrobranco,2016-05-02T14:59:16Z,"@sipa ACK and thanks for the proposal. \n\nAlso, when calling with the private keys and `watchonly=true`. Should we throw an error / warn the user that he should use pubkeys instead if he wants watch-only? Or should we allow importing private keys in watch-only (deriving the pubkey)?\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-216259403,216259403,
promag,2016-05-25T09:27:15Z,"> @promag I considered that, but if it's an address, it's not really a scriptPubKey (especially if there is ever support for things like stealth addresses (which contain cryptographic information that never actually directly ends up in the scriptPubKey).\n\n@sipa maybe we could go with:\n- `{ ""scriptPubKey"": <script> }`\n- `{ ""scriptPubKey"": { ""address"": <address> } }`\n\nIt's scalable and unambig",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-221520641,221520641,
promag,2016-05-25T09:28:07Z,@arowser this is still work in progress.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-221520830,221520830,
sipa,2016-05-25T13:57:05Z,@promag Looks good to me.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-221584090,221584090,
laanwj,2016-06-08T12:04:56Z,"As this is very often requested functionality I'd really like to get this in for 0.13.\n\nNote that the deadline for features for 0.13 is June 16, so that would mean we'll have to get it to a mergeable state in a week. Is that realistic?\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-224569219,224569219,
pedrobranco,2016-06-08T13:54:21Z,"@laanwj Yes, i think is realistic.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-224595950,224595950,
laanwj,2016-06-13T09:24:59Z,Ping...\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-225530834,225530834,
pedrobranco,2016-06-13T11:43:55Z,@laanwj I'm working on this with @promag and we'll try to push a solution as fastest as we can (probably by tomorrow). \n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-225558326,225558326,
pedrobranco,2016-06-15T10:21:46Z,@laanwj We have a partial solution but is not complete: \n- Does not checks the consistency between private/pub keys and scriptPubKey / redeemScript.\n- Does not support **internal** and **watchonly** modes.\n\nWe've made a major refactor and unfortunately we think we are late for the 0.13 milestone.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-226147551,226147551,
laanwj,2016-06-20T13:51:15Z,"Looks good to me - utACK https://github.com/bitcoin/bitcoin/pull/7551/commits/d72a88616f3ad0578ca6e6d8f025db5574f9bf07\n\n> Does not support internal and watchonly modes.\n\nSeems acceptable for a first version, it's not documented either so that's consistent.\n\n> We've made a major refactor and unfortunately we think we are late for the 0.13 milestone.\n\nI'm afraid so too, if we would merge it ",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-227147704,227147704,
pedrobranco,2016-06-20T14:29:28Z,"> Code does get more testing on master, but so close to a release it's more risky, we don't want to release with something broken.\n\nI totally agree.\n\nStill we need help on how to implement internal mode and watch-only, and the consistency checking (technical doubts, so we'll need to do some researching).\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-227158766,227158766,
sipa,2016-06-20T14:31:16Z,"I promise to help with this (nag me if I forget), but after 0.13 is\nbranched off.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-227159303,227159303,
pedrobranco,2016-06-20T14:56:05Z,"> I promise to help with this (nag me if I forget), but after 0.13 is\n> branched off.\n\nThanks for the support.\n\nI have some doubts about the expected result in some situations:\n- When we have private keys on `keys` and `watch-only=true` what should we do:\n  - import the public key of each given key?\n  - import the private key and mark it somehow to unspentable / watchable only?\n- The watc",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-227166998,227166998,
laanwj,2016-06-21T08:32:07Z,@pedrobranco Removing the 0.13 milestone then - thanks for your patience!\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-227375014,227375014,
sipa,2016-07-01T10:04:04Z,"I think if private keys are given and watchonly, you should fail. The reason for the watchonly option is to indicate that you intentionally are not providing a private key, and are not expecting the ability to spend. It's there so that if someone just forgets to provide a private key (as opposed to making it intentionally watch-only), the call can warn them by failing.\n\nThe internal concept is s",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-229909250,229909250,
pedrobranco,2016-07-01T10:11:32Z,@sipa ACK.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-229910803,229910803,
pedrobranco,2016-07-18T17:12:06Z,Consistency check added + internal + watchonly.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-233393881,233393881,
pedrobranco,2016-07-28T09:31:15Z,Can someone please review the PR?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-235846198,235846198,
jonasschnelli,2016-07-28T09:32:19Z,Will test today.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-235846431,235846431,
jonasschnelli,2016-07-28T18:22:04Z,"The rescan behavior seems not to work, I'm happy to test again once this is fixed.\nWe really want to have importmulti in 0.14.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-235981345,235981345,
pedrobranco,2016-08-03T09:31:15Z,@jonasschnelli Can you please test the rescan behavior?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-237189631,237189631,
laanwj,2016-09-09T10:17:33Z,What needs to be done here?\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-245875699,245875699,
pedrobranco,2016-09-09T11:03:38Z,> What needs to be done here?\n\nMaybe add some tests for the rescan feature.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-245883916,245883916,
laanwj,2016-09-19T14:03:28Z,"Personally, I don't know the opinion of others, I'd really like to move forward and merge this if the base functionality is agreed on. There is still enough time before 0.14 to fix problems, add tests, add features etc.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-248001959,248001959,
pedrobranco,2016-09-29T09:21:06Z,Rebased and nits addressed.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-250414684,250414684,
laanwj,2016-10-19T13:33:38Z,Needs (easy) rebase in rpcwallet.cpp after #8788\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-254813551,254813551,
pedrobranco,2016-10-19T21:44:23Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-254950038,254950038,
jonasschnelli,2016-10-20T06:57:22Z,Re-Tested ACK 215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40\nI think this is ready for merge. Possible optimizations and nit-fixing can be done separately.\n,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-255024637,255024637,
laanwj,2016-10-20T07:05:27Z,"> I think this is ready for merge. Possible optimizations and nit-fixing can be done separately.\n\nYes, agreed. The code is self-contained so the risk of regressions is minimal. The `importmulti` RPC call should be considered experimental for now, but 0.14 is still a few months away anyhow.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-255025907,255025907,
rebroad,2016-10-25T02:31:44Z,bisect identifies cb08fdbf78685b55029768524ca867772711c32b as the commit that causes the compile to fail with:-\n\n```\nmake src/qt/bitcoin-qt\nMakefile:1169: warning: overriding commands for target `src/qt/bitcoin-qt'\nMakefile:1107: warning: ignoring old commands for target `src/qt/bitcoin-qt'\nmake -C src qt/bitcoin-qt\nmake[1]: Entering directory `/home/rebroad/src/bitcoin/src'\n  CXX      wal,https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-255919644,255919644,
laanwj,2016-10-25T05:34:50Z,"This has not given any compile issues for anyone else besides a boost issue which was fixed later ( #8980).\nAlso when I look at the source, pubkey is simply defined as:\n\n```\nCPubKey pubkey = key.GetPubKey();\n```\n\nIf you are trying to merge this into some other code base do not complain here if the build breaks.\n",https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-255940845,255940845,
promag,2016-02-17T20:24:48Z,@laanwj should we catch specific exceptions to return the error?\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53225824,53225824,src/wallet/rpcdump.cpp
promag,2016-02-17T20:26:18Z,Only this line is necessary because RPCTypeCheck doesn't enforce the length. See implementation.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53226022,53226022,src/wallet/rpcdump.cpp
pedrobranco,2016-02-17T22:09:45Z,Will fix.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53239448,53239448,src/wallet/rpcdump.cpp
promag,2016-02-17T22:42:31Z,"What about the second argument be a JSON object? Here it would be `{ ""rescan"": true }`. But it could have more options, for instance, one that would rejects addresses with timestamps belonging to pruned blocks.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53243961,53243961,src/wallet/rpcdump.cpp
promag,2016-02-17T22:43:52Z,"I would move up all auxiliary functions (the ones in title case), then the RPC handlers. WDYT?\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53244140,53244140,src/wallet/rpcdump.cpp
instagibbs,2016-02-18T20:00:30Z,This is never used?\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53373673,53373673,qa/rpc-tests/importmulti.py
pedrobranco,2016-02-18T20:05:36Z,"True,  i will remove.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53374368,53374368,qa/rpc-tests/importmulti.py
pedrobranco,2016-02-19T14:33:12Z,"IMO should catch the `JSONRPCError` and be included on the response, something like:\n\n``` bash\noutput: [\n  {\n    ""result"": true\n  },\n  {\n    ""result"": false,\n    ""error"": {\n      ""code"": -5,\n      ""message"": ""Invalid Bitcoin address""\n    }\n  }\n]\n```\n\nand catch other exceptions as ""missing required fields"" (runtime_error). Also maybe changing from ""result"" to ""success"".\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53466842,53466842,src/wallet/rpcdump.cpp
mrbandrews,2016-03-17T18:55:28Z,Nit: only need to initialize 2 nodes\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559090,56559090,qa/rpc-tests/importmulti.py
mrbandrews,2016-03-17T18:56:04Z,I don't believe it's necessary to connect the nodes for this test\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559180,56559180,qa/rpc-tests/importmulti.py
mrbandrews,2016-03-17T18:56:18Z,"See above, no need to connect/sync\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559211,56559211,qa/rpc-tests/importmulti.py
mrbandrews,2016-03-17T18:56:49Z,Same comment\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559279,56559279,qa/rpc-tests/importmulti.py
MarcoFalke,2016-03-28T13:31:57Z,"Nit: Would be nice to be more verbose here. ~~Maybe move the comment from above into an `AssertionError`?~~\n\nEdit: Also, I don't like the `pass`. Effectively the current try-except is a noop. Am I missing something?\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57571286,57571286,qa/rpc-tests/importmulti.py
MarcoFalke,2016-03-28T14:41:37Z,"This is indeed a noop, please remove the code or replace it with something else. Maybe?\n\n``` diff\ndiff --git a/qa/rpc-tests/importmulti.py b/qa/rpc-tests/importmulti.py\nindex 845bcfe..243e70e 100755\n--- a/qa/rpc-tests/importmulti.py\n+++ b/qa/rpc-tests/importmulti.py\n@@ -108,7 +108,3 @@ class ImportMultiTest (BitcoinTestFramework):\n         # empty json case\n-        try:\n-            sel",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57578347,57578347,qa/rpc-tests/importmulti.py
MarcoFalke,2016-03-28T14:47:35Z,Nit: Some more dead code\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57579066,57579066,qa/rpc-tests/importmulti.py
pedrobranco,2016-03-29T15:15:39Z,Yes.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57741191,57741191,qa/rpc-tests/importmulti.py
jonasschnelli,2016-04-14T09:54:26Z,"nit formating:\n\n```\n    {\n      ""type"": ""privkey | pubkey | address | script"", (string, required) Type of address\n      ""value"": ""..."",                                (string, required) Value of the address\n      ""timestamp"": 1454686740,                         (integer, optional) Timestamp\n      ""label"": ""...""                                 (string, optional) Label\n      ""p2sh"": true | f",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r59690445,59690445,src/wallet/rpcdump.cpp
MarcoFalke,2016-05-06T09:37:36Z,Mind to change this to py3?\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r62308037,62308037,qa/rpc-tests/importmulti.py
pedrobranco,2016-05-06T10:04:12Z,Sure.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r62310701,62310701,qa/rpc-tests/importmulti.py
MarcoFalke,2016-06-15T19:41:53Z,"Could you use `__init__` for that, instead of overwriting `setup_chain`?\n\nI.e. something like\n\n``` py\n    def __init__(self):\n        super().__init__()\n        self.num_nodes = 2\n        self.setup_clean_chain = True\n```\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r67231396,67231396,qa/rpc-tests/importmulti.py
pedrobranco,2016-06-16T09:28:44Z,"Sure, and looks way better.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r67314202,67314202,qa/rpc-tests/importmulti.py
MarcoFalke,2016-06-16T09:32:34Z,"micro-Nit: missing trailing `,`\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r67314744,67314744,qa/pull-tester/rpc-tests.py
MarcoFalke,2016-06-16T09:33:01Z,Nit: Might as well place this in the header\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r67314818,67314818,qa/rpc-tests/importmulti.py
jonasschnelli,2016-07-28T10:03:20Z,"Using c++11 lambda here?\n\nSomething like:\n\n``` c++\nstd::lower_bound(vChain.begin(), vChain.end(), nTime,\n   [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTime() < time; }\n);\n```\n\nWould probably be less confusing to read.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72596015,72596015,src/chain.cpp
jonasschnelli,2016-07-28T10:10:47Z,"Are you sure this is correct?\nI can't see a link between the input timestamp and `nLowestTimestamp`.\nIn case of a rescan, `nLowestTimestamp` is always `chainActive.Tip()->GetBlockTime()` which is incorrect IMO.\n\nAlso, we should add a time- or block-delta between `nLowestTimestamp` and the actual rescan height. Timestamps could be slightly wrong (timezones, failed implementations, accuracy). Ma",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72596877,72596877,src/wallet/rpcdump.cpp
jonasschnelli,2016-07-28T10:25:47Z,To bad we need to hold `cs_main` for this. But I think its not possible without it with the current lock structure.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72598662,72598662,src/wallet/rpcdump.cpp
jonasschnelli,2016-07-28T10:27:55Z,"nit: `;` can be removed;\nmini-nit: You are using ""ifs without brackets"" together with some ""ifs with brackets"".\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72598900,72598900,src/wallet/rpcdump.cpp
jonasschnelli,2016-07-28T18:21:10Z,`fRunScan` is always `false` which result in never triggering a rescan.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72674539,72674539,src/wallet/rpcdump.cpp
pedrobranco,2016-07-29T10:47:47Z,"I will check if any of the requests returns `success=true`, then allow the rescan (fRunScan  = true) if not disabled via options.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72774244,72774244,src/wallet/rpcdump.cpp
pedrobranco,2016-07-29T11:03:42Z,"It was left out in this latest proposal, so I will fix that. \n\n> Maybe we should go down another 144 blocks.\n\nI'm not quite sure about rescanning in a different timestamp that the user specifies, given that he knows what's he doing. Is there any reason for the 144 blocks?\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72775727,72775727,src/wallet/rpcdump.cpp
jonasschnelli,2016-07-29T11:49:08Z,"I think that is **not** correct.\nThere are two appearance of the variable `fRunScan`, one on L977 (`bool fRunScan = false;`) and one on L992 (`if (fRescan && fRunScan && request.size()) {`).\n\nI can't see a code part where fRunScan will be set to `true`.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72779705,72779705,src/wallet/rpcdump.cpp
jonasschnelli,2016-07-29T11:50:10Z,144 blocks = 1day. I think going back/deeper one day is reasonable.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72779789,72779789,src/wallet/rpcdump.cpp
pedrobranco,2016-07-29T13:15:08Z,"What I have meant in the comment is that after pushing the fix it it will do what I've described:\n\n> I will check if any of the requests returns success=true, then allow the rescan (fRunScan = true) if not disabled via options.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r72788960,72788960,src/wallet/rpcdump.cpp
jonasschnelli,2016-08-04T15:34:19Z,I guess `nLowestTimestamp` is always > 0.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r73545904,73545904,src/wallet/rpcdump.cpp
jonasschnelli,2016-09-28T14:28:30Z,nit: using `chainActive.Tip()`s blocktime with the later `FindLatestBefore(nLowestTimestamp)` will probably always result in re-scaning a couple 1-2 blocks when importing with a timestamp in future.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r80929574,80929574,src/wallet/rpcdump.cpp
jonasschnelli,2016-09-28T14:32:01Z,This `else` should be removed because it can only set a already `false` `fRescan` again to `false`.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r80930561,80930561,src/wallet/rpcdump.cpp
pedrobranco,2016-09-28T14:44:38Z,`fRescan` is initially set to `true`.\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r80933944,80933944,src/wallet/rpcdump.cpp
jonasschnelli,2016-09-28T14:46:26Z,"Argh. Your right. Got fooled by `fRunScan`, `fRescan`.\nNevermind then.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r80934414,80934414,src/wallet/rpcdump.cpp
pedrobranco,2016-09-28T14:54:46Z,We can prevent rescanning if `nLowestTimestamp` is in the future:\n\n``` cpp\nif (fRescan && fRunScan && request.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTime()) {\n(...)\n```\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r80936636,80936636,src/wallet/rpcdump.cpp
pedrobranco,2016-09-28T14:57:06Z,No problem @jonasschnelli .\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r80937273,80937273,src/wallet/rpcdump.cpp
laanwj,2016-10-05T14:46:10Z,It looks like you're doing the IsMine/HaveWatchOnly/AddWatchOnly dance twice here. Why?\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r81989644,81989644,src/wallet/rpcdump.cpp
pedrobranco,2016-10-06T09:47:00Z,"I was wondering the same when I checked the RPC call `importpubkey`, which calls the same _dance_ in [here](https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpcdump.cpp#L395).\n\nIn doubt, and since I did want to change the behavior of importing pub keys, I've added the **TODO** mark for revision of this part of the code.\n",https://github.com/bitcoin/bitcoin/pull/7551#discussion_r82152188,82152188,src/wallet/rpcdump.cpp
rebroad,2016-10-25T02:53:58Z,pubKey is not defined.... pubkey is though!\n,https://github.com/bitcoin/bitcoin/pull/7551#discussion_r84823393,84823393,src/wallet/rpcdump.cpp
