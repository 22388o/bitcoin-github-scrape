[
  {
    "sha": "9caf3166511ea0baa5c8213de0be558e917a1d90",
    "node_id": "C_kwDOABII59oAKDljYWYzMTY2NTExZWEwYmFhNWM4MjEzZGUwYmU1NThlOTE3YTFkOTA",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-16T22:44:48Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:13:29Z"
      },
      "message": "net: add Yggdrasil support",
      "tree": {
        "sha": "eb7b3612b2c0ff2646ac0ae49623e77437b73960",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb7b3612b2c0ff2646ac0ae49623e77437b73960"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9caf3166511ea0baa5c8213de0be558e917a1d90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGktdkACgkQkfOzObmg\nKj0qTQ//Xdgil6stc0e2X8tpJP57HG29jxh8+K90AAbwhRjmu7uyRN5j/mSByTVl\nBWriznpL7mLjC37aEroeFLQWw/bcfy3tOVmyuhkyGuVQdxSSFTHCLfck0/3HcK8N\nQGOsmngpPfKy9ZMe0tKSg1JmzlOCWc+Iu8qlzIGeu/5Fk/a6A7aiYWiZnwx+0mmS\nEzQp3OQh9a8TmfR3adOQ5lhZMXWU4QxpPW0vLe14QSZcj2nW6gp0yp0TC3Rkw8YP\nROdjsQS8q3cx5iLyueebh4Vjot7lzrH8moHif+mRSrt8+98LErRFcVX4mMm5DGBA\nto/enfyPS7mqmREeI9DBZ0Kpu54ibww/UJk6LvM5f4Uj3BY01FDI1/q90Fj0x9Vs\nAjlLHdEakZW9Gt34RI1lzOpL5/l8dUtTkF73vrFABnW0YTw6mxhiAX1JAtpmDyj+\nAZ8cSP2rq/MnDe+fp5Jy3/h3SxZVLjwfyAFU5JEp2c8MTdNF7Cc8HEVF0z9GoLVn\nskiaAVeS1eUrX3aGENjN4fKaAct278meyOnFLsYPy4VjsRkJVOCS/3iNLkThXlon\nJUAYTa7jGD557jSOlJzGjOpjnrdaNSjh5ubOy0/7vErhVago1vq4IaXYpG8p5brw\nk+fNBajK+2MlqlQSkL4PwDYr9SwlNCOzOCZphGoiKyt0bsOKccY=\n=RlhN\n-----END PGP SIGNATURE-----",
        "payload": "tree eb7b3612b2c0ff2646ac0ae49623e77437b73960\nparent b4f647fa36a3336774ab616048bc6709bdc59fa1\nauthor Pavol Rusnak <pavol@rusnak.io> 1637102688 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638184409 +0100\n\nnet: add Yggdrasil support\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9caf3166511ea0baa5c8213de0be558e917a1d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9caf3166511ea0baa5c8213de0be558e917a1d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9caf3166511ea0baa5c8213de0be558e917a1d90/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4f647fa36a3336774ab616048bc6709bdc59fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4f647fa36a3336774ab616048bc6709bdc59fa1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4f647fa36a3336774ab616048bc6709bdc59fa1"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 127,
      "deletions": 22
    },
    "files": [
      {
        "sha": "cb93cb65634479e23a4c516736f1cc69d80b9b2f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -49,7 +49,7 @@ static constexpr int DEFAULT_WAIT_CLIENT_TIMEOUT = 0;\n static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n static constexpr int8_t UNKNOWN_NETWORK{-1};\n-static constexpr std::array NETWORKS{\"ipv4\", \"ipv6\", \"onion\", \"i2p\", \"cjdns\"};\n+static constexpr std::array NETWORKS{\"ipv4\", \"ipv6\", \"onion\", \"i2p\", \"cjdns\", \"yggdrasil\"};\n \n /** Default number of blocks to generate for RPC generatetoaddress. */\n static const std::string DEFAULT_NBLOCKS = \"1\";\n@@ -625,7 +625,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         \"           \\\"manual\\\" - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n         \"           \\\"feeler\\\" - short-lived connection for testing addresses\\n\"\n         \"           \\\"addr\\\"   - address fetch; short-lived connection for requesting addresses\\n\"\n-        \"  net      Network the peer connected through (\\\"ipv4\\\", \\\"ipv6\\\", \\\"onion\\\", \\\"i2p\\\", or \\\"cjdns\\\")\\n\"\n+        \"  net      Network the peer connected through (\\\"ipv4\\\", \\\"ipv6\\\", \\\"onion\\\", \\\"i2p\\\", \\\"cjdns\\\" or \\\"yggdrasil\\\")\\n\"\n         \"  mping    Minimum observed ping time, in milliseconds (ms)\\n\"\n         \"  ping     Last observed ping time, in milliseconds (ms)\\n\"\n         \"  send     Time since last message sent to the peer, in seconds\\n\""
      },
      {
        "sha": "b3214b3785b7e08a51ae7dbcd1dff4b729d1d35b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -424,6 +424,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-cjdnsreachable\", \"If set then this host is configured for CJDNS (connecting to fc00::/8 addresses would lead us to the CJDNS network) (default: 0)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-yggdrasilreachable\", \"If set then this host is configured for Yggdrasil (connecting to 0200::/8 addresses would lead us to the Yggdrasil network) (default: 0)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1312,6 +1313,14 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // 2.1. -onlynet is not given or\n     // 2.2. -onlynet=cjdns is given\n \n+    if (!args.IsArgSet(\"-yggdrasilreachable\")) {\n+        SetReachable(NET_YGGDRASIL, false);\n+    }\n+    // Now IsReachable(NET_YGGDRASIL) is true if:\n+    // 1. -yggdrasilreachable is given and\n+    // 2.1. -onlynet is not given or\n+    // 2.2. -onlynet=yggdrasil is given\n+\n     // Check for host lookup allowed before parsing any network related parameters\n     fNameLookup = args.GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n@@ -1334,6 +1343,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         SetProxy(NET_IPV6, addrProxy);\n         SetProxy(NET_ONION, addrProxy);\n         SetProxy(NET_CJDNS, addrProxy);\n+        SetProxy(NET_YGGDRASIL, addrProxy);\n         SetNameProxy(addrProxy);\n         SetReachable(NET_ONION, true); // by default, -proxy sets onion as reachable, unless -noonion later\n     }"
      },
      {
        "sha": "2fa8a229172c741f10f3bcead2a6d0cc779b0cbf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 9,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -234,22 +234,32 @@ std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n  * If an IPv6 address belongs to the address range used by the CJDNS network and\n  * the CJDNS network is reachable (-cjdnsreachable config is set), then change\n  * the type from NET_IPV6 to NET_CJDNS.\n+ *\n+ * If an IPv6 address belongs to the address range used by the Yggdrasil network and\n+ * the Yggdrasil network is reachable (-yggdrasilreachable config is set), then change\n+ * the type from NET_IPV6 to NET_YGGDRASIL.\n+ *\n  * @param[in] service Address to potentially convert.\n- * @return a copy of `service` either unmodified or changed to CJDNS.\n+ * @return a copy of `service` either unmodified or changed to CJDNS or Yggdrasil.\n  */\n-CService MaybeFlipIPv6toCJDNS(const CService& service)\n+CService MaybeFlipIPv6toCJDNSorYggdrasil(const CService& service)\n {\n     CService ret{service};\n-    if (ret.m_net == NET_IPV6 && ret.m_addr[0] == 0xfc && IsReachable(NET_CJDNS)) {\n-        ret.m_net = NET_CJDNS;\n+    if (ret.m_net == NET_IPV6) {\n+        if (ret.m_addr[0] == 0xfc && IsReachable(NET_CJDNS)) {\n+            ret.m_net = NET_CJDNS;\n+        } else\n+        if (ret.m_addr[0] == 0x02 && IsReachable(NET_YGGDRASIL)) {\n+            ret.m_net = NET_YGGDRASIL;\n+        }\n     }\n     return ret;\n }\n \n // learn a new local address\n bool AddLocal(const CService& addr_, int nScore)\n {\n-    CService addr{MaybeFlipIPv6toCJDNS(addr_)};\n+    CService addr{MaybeFlipIPv6toCJDNSorYggdrasil(addr_)};\n \n     if (!addr.IsRoutable())\n         return false;\n@@ -428,7 +438,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         std::vector<CService> resolved;\n         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n             const CService rnd{resolved[GetRand(resolved.size())]};\n-            addrConnect = CAddress{MaybeFlipIPv6toCJDNS(rnd), NODE_NONE};\n+            addrConnect = CAddress{MaybeFlipIPv6toCJDNSorYggdrasil(rnd), NODE_NONE};\n             if (!addrConnect.IsValid()) {\n                 LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\\n\", addrConnect.ToString(), pszDest);\n                 return nullptr;\n@@ -1112,10 +1122,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n         LogPrintf(\"Warning: Unknown socket family\\n\");\n     } else {\n-        addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};\n+        addr = CAddress{MaybeFlipIPv6toCJDNSorYggdrasil(addr), NODE_NONE};\n     }\n \n-    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(hSocket)), NODE_NONE};\n+    const CAddress addr_bind{MaybeFlipIPv6toCJDNSorYggdrasil(GetBindAddress(hSocket)), NODE_NONE};\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n@@ -2479,7 +2489,7 @@ NodeId CConnman::GetNewNodeId()\n \n bool CConnman::Bind(const CService& addr_, unsigned int flags, NetPermissionFlags permissions)\n {\n-    const CService addr{MaybeFlipIPv6toCJDNS(addr_)};\n+    const CService addr{MaybeFlipIPv6toCJDNSorYggdrasil(addr_)};\n \n     if (!(flags & BF_EXPLICIT) && !IsReachable(addr)) {\n         return false;"
      },
      {
        "sha": "4ea23194a90bafc9f953f204a3352dc835daa6ce",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 4,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -37,6 +37,8 @@ CNetAddr::BIP155Network CNetAddr::GetBIP155Network() const\n         return BIP155Network::I2P;\n     case NET_CJDNS:\n         return BIP155Network::CJDNS;\n+    case NET_YGGDRASIL:\n+        return BIP155Network::YGGDRASIL;\n     case NET_INTERNAL:   // should have been handled before calling this function\n     case NET_UNROUTABLE: // m_net is never and should not be set to NET_UNROUTABLE\n     case NET_MAX:        // m_net is never and should not be set to NET_MAX\n@@ -89,6 +91,14 @@ bool CNetAddr::SetNetFromBIP155Network(uint8_t possible_bip155_net, size_t addre\n         throw std::ios_base::failure(\n             strprintf(\"BIP155 CJDNS address with length %u (should be %u)\", address_size,\n                       ADDR_CJDNS_SIZE));\n+    case BIP155Network::YGGDRASIL:\n+        if (address_size == ADDR_YGGDRASIL_SIZE) {\n+            m_net = NET_YGGDRASIL;\n+            return true;\n+        }\n+        throw std::ios_base::failure(\n+            strprintf(\"BIP155 Yggdrasil address with length %u (should be %u)\", address_size,\n+                      ADDR_YGGDRASIL_SIZE));\n     }\n \n     // Don't throw on addresses with unknown network ids (maybe from the future).\n@@ -123,6 +133,9 @@ void CNetAddr::SetIP(const CNetAddr& ipIn)\n     case NET_CJDNS:\n         assert(ipIn.m_addr.size() == ADDR_CJDNS_SIZE);\n         break;\n+    case NET_YGGDRASIL:\n+        assert(ipIn.m_addr.size() == ADDR_YGGDRASIL_SIZE);\n+        break;\n     case NET_INTERNAL:\n         assert(ipIn.m_addr.size() == ADDR_INTERNAL_SIZE);\n         break;\n@@ -422,6 +435,11 @@ bool CNetAddr::IsI2P() const { return m_net == NET_I2P; }\n  */\n bool CNetAddr::IsCJDNS() const { return m_net == NET_CJDNS; }\n \n+/**\n+ * Check whether this object represents a Yggdrasil address.\n+ */\n+bool CNetAddr::IsYggdrasil() const { return m_net == NET_YGGDRASIL; }\n+\n bool CNetAddr::IsLocal() const\n {\n     // IPv4 loopback (127.0.0.0/8 or 0.0.0.0/8)\n@@ -461,6 +479,11 @@ bool CNetAddr::IsValid() const\n         return false;\n     }\n \n+    // Yggdrasil addresses always start with 0x02\n+    if (IsYggdrasil() && (m_addr[0] != 0x02)) {\n+        return false;\n+    }\n+\n     // documentation IPv6 address\n     if (IsRFC3849())\n         return false;\n@@ -512,6 +535,7 @@ bool CNetAddr::IsAddrV1Compatible() const\n     case NET_ONION:\n     case NET_I2P:\n     case NET_CJDNS:\n+    case NET_YGGDRASIL:\n         return false;\n     case NET_UNROUTABLE: // m_net is never and should not be set to NET_UNROUTABLE\n     case NET_MAX:        // m_net is never and should not be set to NET_MAX\n@@ -618,6 +642,8 @@ std::string CNetAddr::ToStringIP() const\n         return EncodeBase32(m_addr, false /* don't pad with = */) + \".b32.i2p\";\n     case NET_CJDNS:\n         return IPv6ToString(m_addr, 0);\n+    case NET_YGGDRASIL:\n+        return IPv6ToString(m_addr, 0);\n     case NET_INTERNAL:\n         return EncodeBase32(m_addr) + \".internal\";\n     case NET_UNROUTABLE: // m_net is never and should not be set to NET_UNROUTABLE\n@@ -663,7 +689,7 @@ bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const\n }\n \n /**\n- * Try to get our IPv6 (or CJDNS) address.\n+ * Try to get our IPv6 (or CJDNS or Yggdrasil) address.\n  *\n  * @param[out] pipv6Addr The in6_addr struct to which to copy.\n  *\n@@ -674,7 +700,7 @@ bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const\n  */\n bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const\n {\n-    if (!IsIPv6() && !IsCJDNS()) {\n+    if (!IsIPv6() && !IsCJDNS() && !IsYggdrasil()) {\n         return false;\n     }\n     assert(sizeof(*pipv6Addr) == m_addr.size());\n@@ -796,11 +822,12 @@ std::vector<unsigned char> CNetAddr::GetGroup(const std::vector<bool> &asmap) co\n         return vchRet;\n     } else if (IsTor() || IsI2P()) {\n         nBits = 4;\n-    } else if (IsCJDNS()) {\n+    } else if (IsCJDNS() || IsYggdrasil()) {\n         // Treat in the same way as Tor and I2P because the address in all of\n         // them is \"random\" bytes (derived from a public key). However in CJDNS\n         // the first byte is a constant 0xfc, so the random bytes come after it.\n         // Thus skip the constant 8 bits at the start.\n+        // The same applies for Yggdrasil, but the first byte is a constant 0x02.\n         nBits = 12;\n     } else if (IsHeNet()) {\n         // for he.net, use /36 groups\n@@ -903,6 +930,11 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         case NET_CJDNS: return REACH_PRIVATE;\n         default: return REACH_DEFAULT;\n         }\n+    case NET_YGGDRASIL:\n+        switch (ourNet) {\n+        case NET_YGGDRASIL: return REACH_PRIVATE;\n+        default: return REACH_DEFAULT;\n+        }\n     case NET_TEREDO:\n         switch(ourNet) {\n         default:          return REACH_DEFAULT;\n@@ -1004,7 +1036,7 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n         paddrin->sin_port = htons(port);\n         return true;\n     }\n-    if (IsIPv6() || IsCJDNS()) {\n+    if (IsIPv6() || IsCJDNS() || IsYggdrasil()) {\n         if (*addrlen < (socklen_t)sizeof(struct sockaddr_in6))\n             return false;\n         *addrlen = sizeof(struct sockaddr_in6);\n@@ -1140,6 +1172,7 @@ CSubNet::CSubNet(const CNetAddr& addr) : CSubNet()\n     case NET_ONION:\n     case NET_I2P:\n     case NET_CJDNS:\n+    case NET_YGGDRASIL:\n         valid = true;\n         break;\n     case NET_INTERNAL:\n@@ -1167,6 +1200,7 @@ bool CSubNet::Match(const CNetAddr &addr) const\n     case NET_ONION:\n     case NET_I2P:\n     case NET_CJDNS:\n+    case NET_YGGDRASIL:\n     case NET_INTERNAL:\n         return addr == network;\n     case NET_UNROUTABLE:\n@@ -1207,6 +1241,7 @@ std::string CSubNet::ToString() const\n     case NET_ONION:\n     case NET_I2P:\n     case NET_CJDNS:\n+    case NET_YGGDRASIL:\n     case NET_INTERNAL:\n     case NET_UNROUTABLE:\n     case NET_MAX:\n@@ -1230,6 +1265,7 @@ bool CSubNet::SanityCheck() const\n     case NET_ONION:\n     case NET_I2P:\n     case NET_CJDNS:\n+    case NET_YGGDRASIL:\n         return true;\n     case NET_INTERNAL:\n     case NET_UNROUTABLE:"
      },
      {
        "sha": "777d495bf41d80f9f2d6bed04fb485f214ab4984",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -61,6 +61,9 @@ enum Network {\n     /// CJDNS\n     NET_CJDNS,\n \n+    /// Yggdrasil\n+    NET_YGGDRASIL,\n+\n     /// A set of addresses that represent the hash of a string or FQDN. We use\n     /// them in AddrMan to keep track of which DNS seeds were used.\n     NET_INTERNAL,\n@@ -106,6 +109,9 @@ static constexpr size_t ADDR_I2P_SIZE = 32;\n /// Size of CJDNS address (in bytes).\n static constexpr size_t ADDR_CJDNS_SIZE = 16;\n \n+/// Size of Yggdrasil address (in bytes).\n+static constexpr size_t ADDR_YGGDRASIL_SIZE = 16;\n+\n /// Size of \"internal\" (NET_INTERNAL) address (in bytes).\n static constexpr size_t ADDR_INTERNAL_SIZE = 10;\n \n@@ -181,6 +187,7 @@ class CNetAddr\n     bool IsTor() const;\n     bool IsI2P() const;\n     bool IsCJDNS() const;\n+    bool IsYggdrasil() const;\n     bool IsLocal() const;\n     bool IsRoutable() const;\n     bool IsInternal() const;\n@@ -224,7 +231,7 @@ class CNetAddr\n      */\n     bool IsRelayable() const\n     {\n-        return IsIPv4() || IsIPv6() || IsTor() || IsI2P() || IsCJDNS();\n+        return IsIPv4() || IsIPv6() || IsTor() || IsI2P() || IsCJDNS() || IsYggdrasil();\n     }\n \n     /**\n@@ -284,6 +291,7 @@ class CNetAddr\n         TORV3 = 4,\n         I2P = 5,\n         CJDNS = 6,\n+        YGGDRASIL = 7,\n     };\n \n     /**\n@@ -341,13 +349,14 @@ class CNetAddr\n         case NET_ONION:\n         case NET_I2P:\n         case NET_CJDNS:\n+        case NET_YGGDRASIL:\n             break;\n         case NET_UNROUTABLE:\n         case NET_MAX:\n             assert(false);\n         } // no default case, so the compiler can warn about missing cases\n \n-        // Serialize ONION, I2P and CJDNS as all-zeros.\n+        // Serialize ONION, I2P, CJDNS and YGGDRASIL as all-zeros.\n         memset(arr, 0x0, V1_SERIALIZATION_SIZE);\n     }\n \n@@ -556,7 +565,7 @@ class CService : public CNetAddr\n     }\n \n     friend class CServiceHash;\n-    friend CService MaybeFlipIPv6toCJDNS(const CService& service);\n+    friend CService MaybeFlipIPv6toCJDNSorYggdrasil(const CService& service);\n };\n \n class CServiceHash"
      },
      {
        "sha": "007d93b0761624da8e422a0a40e23eebb495708c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -99,6 +99,9 @@ enum Network ParseNetwork(const std::string& net_in) {\n     if (net == \"cjdns\") {\n         return NET_CJDNS;\n     }\n+    if (net == \"yggdrasil\") {\n+        return NET_YGGDRASIL;\n+    }\n     return NET_UNROUTABLE;\n }\n \n@@ -111,6 +114,7 @@ std::string GetNetworkName(enum Network net)\n     case NET_ONION: return \"onion\";\n     case NET_I2P: return \"i2p\";\n     case NET_CJDNS: return \"cjdns\";\n+    case NET_YGGDRASIL: return \"yggdrasil\";\n     case NET_INTERNAL: return \"internal\";\n     case NET_MAX: assert(false);\n     } // no default case, so the compiler can warn about missing cases"
      },
      {
        "sha": "4bba4840435a93288a2c61c6df3a0538da918090",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -45,15 +45,16 @@ CNetAddr RandAddr(FuzzedDataProvider& fuzzed_data_provider, FastRandomContext& f\n     if (fuzzed_data_provider.remaining_bytes() > 1 && fuzzed_data_provider.ConsumeBool()) {\n         addr = ConsumeNetAddr(fuzzed_data_provider);\n     } else {\n-        // The networks [1..6] correspond to CNetAddr::BIP155Network (private).\n+        // The networks [1..7] correspond to CNetAddr::BIP155Network (private).\n         static const std::map<uint8_t, uint8_t> net_len_map = {{1, ADDR_IPV4_SIZE},\n                                                                {2, ADDR_IPV6_SIZE},\n                                                                {4, ADDR_TORV3_SIZE},\n                                                                {5, ADDR_I2P_SIZE},\n-                                                               {6, ADDR_CJDNS_SIZE}};\n-        uint8_t net = fast_random_context.randrange(5) + 1; // [1..5]\n+                                                               {6, ADDR_CJDNS_SIZE},\n+                                                               {7, ADDR_YGGDRASIL_SIZE}};\n+        uint8_t net = fast_random_context.randrange(6) + 1; // [1..6]\n         if (net == 3) {\n-            net = 6;\n+            net = 7;\n         }\n \n         CDataStream s(SER_NETWORK, PROTOCOL_VERSION | ADDRV2_FORMAT);"
      },
      {
        "sha": "6c2e3fa8c1fb52db27b008d5ac5ddc18dfcaaed1",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -557,6 +557,38 @@ BOOST_AUTO_TEST_CASE(cnetaddr_unserialize_v2)\n     BOOST_REQUIRE(!s.empty()); // The stream is not consumed on invalid input.\n     s.clear();\n \n+    // Valid Yggdrasil.\n+    s << MakeSpan(ParseHex(\"07\"                               // network type (Yggdrasil)\n+                           \"10\"                               // address length\n+                           \"02000001000200030004000500060007\" // address\n+                           ));\n+    s >> addr;\n+    BOOST_CHECK(addr.IsValid());\n+    BOOST_CHECK(addr.IsYggdrasil());\n+    BOOST_CHECK(!addr.IsAddrV1Compatible());\n+    BOOST_CHECK_EQUAL(addr.ToString(), \"200:1:2:3:4:5:6:7\");\n+    BOOST_REQUIRE(s.empty());\n+\n+    // Invalid Yggdrasil, wrong prefix.\n+    s << MakeSpan(ParseHex(\"07\"                               // network type (Yggdrasil)\n+                           \"10\"                               // address length\n+                           \"aa000001000200030004000500060007\" // address\n+                           ));\n+    s >> addr;\n+    BOOST_CHECK(addr.IsYggdrasil());\n+    BOOST_CHECK(!addr.IsValid());\n+    BOOST_REQUIRE(s.empty());\n+\n+    // Invalid Yggdrasil, with bogus length.\n+    s << MakeSpan(ParseHex(\"07\" // network type (Yggdrasil)\n+                           \"01\" // address length\n+                           \"00\" // address\n+                           ));\n+    BOOST_CHECK_EXCEPTION(s >> addr, std::ios_base::failure,\n+                          HasReason(\"BIP155 Yggdrasil address with length 1 (should be 16)\"));\n+    BOOST_REQUIRE(!s.empty()); // The stream is not consumed on invalid input.\n+    s.clear();\n+\n     // Unknown, with extreme length.\n     s << MakeSpan(ParseHex(\"aa\"             // network type (unknown)\n                            \"fe00000002\"     // address length (CompactSize's MAX_SIZE)"
      },
      {
        "sha": "8f2cdac0594f184f0bd25bbcc19d67291c9e55f0",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -340,12 +340,14 @@ BOOST_AUTO_TEST_CASE(netbase_parsenetwork)\n     BOOST_CHECK_EQUAL(ParseNetwork(\"onion\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"tor\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"cjdns\"), NET_CJDNS);\n+    BOOST_CHECK_EQUAL(ParseNetwork(\"yggdrasil\"), NET_YGGDRASIL);\n \n     BOOST_CHECK_EQUAL(ParseNetwork(\"IPv4\"), NET_IPV4);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"IPv6\"), NET_IPV6);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"ONION\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"TOR\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"CJDNS\"), NET_CJDNS);\n+    BOOST_CHECK_EQUAL(ParseNetwork(\"YGGDRASIL\"), NET_YGGDRASIL);\n \n     BOOST_CHECK_EQUAL(ParseNetwork(\":)\"), NET_UNROUTABLE);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"t\u00d6r\"), NET_UNROUTABLE);"
      },
      {
        "sha": "70b80b8cad587b0e67d3b17002665f0aac3ed0f1",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caf3166511ea0baa5c8213de0be558e917a1d90/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=9caf3166511ea0baa5c8213de0be558e917a1d90",
        "patch": "@@ -82,6 +82,7 @@ constexpr auto ALL_NETWORKS = std::array{\n     Network::NET_ONION,\n     Network::NET_I2P,\n     Network::NET_CJDNS,\n+    Network::NET_YGGDRASIL,\n     Network::NET_INTERNAL,\n };\n "
      }
    ]
  },
  {
    "sha": "c35def135fe115a9501c6a7f875b3e8cf4dca22e",
    "node_id": "C_kwDOABII59oAKGMzNWRlZjEzNWZlMTE1YTk1MDFjNmE3Zjg3NWIzZThjZjRkY2EyMmU",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-16T22:45:05Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:13:29Z"
      },
      "message": "contrib: recognize Yggdrasil seeds",
      "tree": {
        "sha": "16426fdf791a39927191e67e1b77c1fee1bb6ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16426fdf791a39927191e67e1b77c1fee1bb6ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c35def135fe115a9501c6a7f875b3e8cf4dca22e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGktdkACgkQkfOzObmg\nKj3RThAAlYNZXtn/iuBoWiZQSlMv0s/f/rMwWAxdzk9m0ul5i7Wd6injAHv0BFC5\nd67givYQUFXd36NZiNUYd4mTEzSbucqPe95lYkWCZ/NDf8qJsq7TXAYzOmZG0pga\nGxLs/ec4oFnLtDRGBKKQP7p33NoCVL6gx22Am8NWMGxRdtqrLy93f85nYLXPYJlr\nAtt8DA8cmBISu8ftkNtZoypvE7lZqsMbBA0WcDBWjM0iOJYuf0D2IWu+aTyp3jnc\ntmVtZkSibwx/5kd01etnJIT1Lf7dERkhVVo73kFdIIW05qUX6RjW1IPSI69MwwUQ\nsDV1OoeOekPRN32r4COqiVsIEjjvSx4cvPv6ahmlWEsA+8tqX+oYbv7wstd5YDEl\nlsl+xif+ASs0aGNehfaKvu7zdulAHHZoFP4tRL5309TG4N71QkuavI1EcfaCpKPH\nrcJe9/Jv2AJD9MLgYQ6QRVJC258FCtRtmwodwmELE3JhiK8rMFM8aAAf0ezGMQbv\nqRJzWgS7NaCY8fr16pArgMguujak69E2dDLUPRxaLAyzvHCDqVuVCrERb7GfaigI\n6PytpLytMXTSBzvpYYGwfohft69c0lXzsKiHC5FYI159rmc5dcv88kz0nthupdGb\nPYO5KBLnj7oy7yPTaeRnirXZP4Y/BLGamAuxBl5UsT0RJpEfV0g=\n=QkJJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 16426fdf791a39927191e67e1b77c1fee1bb6ab0\nparent 9caf3166511ea0baa5c8213de0be558e917a1d90\nauthor Pavol Rusnak <pavol@rusnak.io> 1637102705 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638184409 +0100\n\ncontrib: recognize Yggdrasil seeds\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c35def135fe115a9501c6a7f875b3e8cf4dca22e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c35def135fe115a9501c6a7f875b3e8cf4dca22e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c35def135fe115a9501c6a7f875b3e8cf4dca22e/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9caf3166511ea0baa5c8213de0be558e917a1d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9caf3166511ea0baa5c8213de0be558e917a1d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9caf3166511ea0baa5c8213de0be558e917a1d90"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "059e80d464680926dc49e269dcb589ca04ce5bfc",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c35def135fe115a9501c6a7f875b3e8cf4dca22e/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c35def135fe115a9501c6a7f875b3e8cf4dca22e/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=c35def135fe115a9501c6a7f875b3e8cf4dca22e",
        "patch": "@@ -41,6 +41,7 @@ class BIP155Network(Enum):\n     TORV3 = 4\n     I2P = 5\n     CJDNS = 6\n+    YGGDRASIL = 7\n \n def name_to_bip155(addr):\n     '''Convert address string to BIP155 (networkID, addr) tuple.'''\n@@ -61,7 +62,7 @@ def name_to_bip155(addr):\n             raise ValueError(f'Invalid I2P {vchAddr}')\n     elif '.' in addr: # IPv4\n         return (BIP155Network.IPV4, bytes((int(x) for x in addr.split('.'))))\n-    elif ':' in addr: # IPv6 or CJDNS\n+    elif ':' in addr: # IPv6 or CJDNS or Yggdrasil\n         sub = [[], []] # prefix, suffix\n         x = 0\n         addr = addr.split(':')\n@@ -83,6 +84,10 @@ def name_to_bip155(addr):\n             # not to the publicly unroutable \"Unique Local Unicast\" network, see\n             # RFC4193: https://datatracker.ietf.org/doc/html/rfc4193#section-8\n             return (BIP155Network.CJDNS, addr_bytes)\n+        elif addr_bytes[0] == 0x02:\n+            # Assume that seeds with 0200::/8 addresses belong to Yggdrasil.\n+            # See https://yggdrasil-network.github.io/faq.html#will-yggdrasil-conflict-with-my-network-routing\n+            return (BIP155Network.YGGDRASIL, addr_bytes)\n         else:\n             return (BIP155Network.IPV6, addr_bytes)\n     else:"
      }
    ]
  },
  {
    "sha": "d66181337a6103bd1bb60b3732a1b1216da9afe5",
    "node_id": "C_kwDOABII59oAKGQ2NjE4MTMzN2E2MTAzYmQxYmI2MGIzNzMyYTFiMTIxNmRhOWFmZTU",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-16T22:45:55Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:13:29Z"
      },
      "message": "qt: add Yggdrasil support",
      "tree": {
        "sha": "ded3443cce59914a3c70c032306938bb3e133d98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ded3443cce59914a3c70c032306938bb3e133d98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d66181337a6103bd1bb60b3732a1b1216da9afe5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGktdkACgkQkfOzObmg\nKj3XYA//S+gudiznrwEN9N2MiltNTEopHDiwrvXunqg1aDgBfq78m2MwN/AQI7ic\n3NMod6RYhtksEyiW8+3W3bQsOvvjCi0cfLku6584PKYEH/fB6m6nylFre4aVGlbR\ncEMKcoPTuj9eh5u5K3OvyeIdzXjlYV2LtSUQZTvrCkYeG/FvkAHYcyi5mS0jjxhQ\nltOuhGz0wCVtx3Md/OZwThFtvUqRCe8qXUMFiLccDZ/t6lpruaLVqM0h0J+j8m6Z\nHbFTtsI/k7yJARKgP8nEcRJxKRw+0+f96CszdGwDFkOQ59+kPMmuYjwEqqpizlnD\nvSlX2qqt4/Zw3qCZumnu2Fezk9xICxa3497C1uPlCnvwGKT4yF+jhXMtlGWhNAcH\nmOlqVoMfO0+xCbS+ZCmhqGHkjvf0lCPcnLkKhgyNOaNr/ErIAnFVudTrbC9arWzr\nWVj5xhOP+qXtPou0fzLiA4ow14R2zCqzJq2bWWRm8RjQeLWb7SJPhy8k9hX1g+8b\n32fu1e1IqrloFvnD33TwoWp4LQdsGmXqFKzzSoZm8oYDbqTiIXyJmRYkZhjItJQl\nUiPkMIGuiCc/Z4Ok5H32Fc3Oq5E0PvquGbZcDZQv/F6bONeI+BmmNwscmvbrERUz\n1KdsbbdBhkCIHlJYhqJ0rnm63cMYIIncnUWWoixkTw3FPp9rY5A=\n=tjg6\n-----END PGP SIGNATURE-----",
        "payload": "tree ded3443cce59914a3c70c032306938bb3e133d98\nparent c35def135fe115a9501c6a7f875b3e8cf4dca22e\nauthor Pavol Rusnak <pavol@rusnak.io> 1637102755 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638184409 +0100\n\nqt: add Yggdrasil support\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d66181337a6103bd1bb60b3732a1b1216da9afe5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d66181337a6103bd1bb60b3732a1b1216da9afe5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d66181337a6103bd1bb60b3732a1b1216da9afe5/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c35def135fe115a9501c6a7f875b3e8cf4dca22e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c35def135fe115a9501c6a7f875b3e8cf4dca22e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c35def135fe115a9501c6a7f875b3e8cf4dca22e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c37fe32388735b7fe7f66a3a27a975ae48dce978",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=d66181337a6103bd1bb60b3732a1b1216da9afe5",
        "patch": "@@ -1087,7 +1087,7 @@\n                <item row=\"2\" column=\"0\">\n                 <widget class=\"QLabel\" name=\"peerNetworkLabel\">\n                  <property name=\"toolTip\">\n-                  <string>The network protocol this peer is connected through: IPv4, IPv6, Onion, I2P, or CJDNS.</string>\n+                  <string>The network protocol this peer is connected through: IPv4, IPv6, Onion, I2P, CJDNS, or Yggdrasil.</string>\n                  </property>\n                  <property name=\"text\">\n                   <string>Network</string>"
      },
      {
        "sha": "0582b970255aea30e699bb20edf8ecf3c600960d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d66181337a6103bd1bb60b3732a1b1216da9afe5",
        "patch": "@@ -670,6 +670,7 @@ QString NetworkToQString(Network net)\n     case NET_ONION: return \"Onion\";\n     case NET_I2P: return \"I2P\";\n     case NET_CJDNS: return \"CJDNS\";\n+    case NET_YGGDRASIL: return \"Yggdrasil\";\n     case NET_INTERNAL: return QObject::tr(\"Internal\");\n     case NET_MAX: assert(false);\n     } // no default case, so the compiler can warn about missing cases"
      },
      {
        "sha": "7a308531a8a5f815644f73664e848d2f095bb71d",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=d66181337a6103bd1bb60b3732a1b1216da9afe5",
        "patch": "@@ -2733,7 +2733,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+23\"/>\n-        <source>The network protocol this peer is connected through: IPv4, IPv6, Onion, I2P, or CJDNS.</source>\n+        <source>The network protocol this peer is connected through: IPv4, IPv6, Onion, I2P, CJDNS, or Yggdrasil.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>"
      },
      {
        "sha": "fd6e4a1f78c00f407d394a416766769deae57830",
        "filename": "src/qt/locale/bitcoin_en.xlf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/locale/bitcoin_en.xlf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d66181337a6103bd1bb60b3732a1b1216da9afe5/src/qt/locale/bitcoin_en.xlf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.xlf?ref=d66181337a6103bd1bb60b3732a1b1216da9afe5",
        "patch": "@@ -2871,7 +2871,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <context-group purpose=\"location\"><context context-type=\"linenumber\">1067</context></context-group>\n       </trans-unit>\n       <trans-unit id=\"_msg516\">\n-        <source xml:space=\"preserve\">The network protocol this peer is connected through: IPv4, IPv6, Onion, I2P, or CJDNS.</source>\n+        <source xml:space=\"preserve\">The network protocol this peer is connected through: IPv4, IPv6, Onion, I2P, CJDNS, or Yggdrasil.</source>\n         <target xml:space=\"preserve\"></target>\n         <context-group purpose=\"location\"><context context-type=\"linenumber\">1090</context></context-group>\n       </trans-unit>"
      }
    ]
  },
  {
    "sha": "2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
    "node_id": "C_kwDOABII59oAKDJkNjM1YTZlYzAzN2NiYmIzMjk5YTZhNGE3YzcyMGRkZDI2MzhmNTc",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-16T22:46:20Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:13:29Z"
      },
      "message": "test: add functional tests for Yggdrasil",
      "tree": {
        "sha": "6a46436112d1e7d2a9a9d3eff7c7183b709bc342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a46436112d1e7d2a9a9d3eff7c7183b709bc342"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGktdkACgkQkfOzObmg\nKj2seA//cJmd6C5F09SJD7qYNxtbA1vWpBhx9QbYPrjaMzfS9mufm5d1AcTq912x\nTF3Kx2XvpDJ5WLlbmqEjpJOuan4GaYg6wrFONRf9R5K6tJqx7fRP4kV6uDy+EfBx\ny4ejMYDF9jnz9wDpGpprSEDGmW3RYIM3X9OFYASC5KOHC8jAdj9m/LVcuGC57XW0\nGXO6FywSh6RalhEzSE2SziSXUgIHtAqFs7eSDTDpkHqKvgXEd5TKmR2ku1Bd39BX\nFKchYUACn8w6shPtgjVbTW4kkkStcudpox2WATDI4IUO4c80OxoBhIroH3VAn4UF\nctmeO6+snSWJ5XLBwRc51GjXVGuh7teeTpbYNpYhYGeEyHelSTxWKTTu5nnxgdti\nDu8F6dua7VlF4lw8yvtK3GLMEFaYcotNtX86N4ZbebHKum7FPQQ/973KkyuI9Lcs\nCQ/U7uP94EQqC7aihkwj5Z4bBY8Ub5Fojp5aIAKc72e/PvvYLJzhc2wLYRhzhLck\nKlsquuHKruje4cOFT+rRcmutH5+a5zILff6Xw1QXXOVMlQqsJcyws00tBrIHbNLW\nsuBrq40ETdPlIvhLOdgl+7hvwDFBnLRRE3ujCV8vhJzcV3kN52wSWDShGoX4IXQy\nCMFplCTMOXWPnEELHvX+zwj8yQVlwPRWRHoe70IFNnE/ipRXoq4=\n=HqP1\n-----END PGP SIGNATURE-----",
        "payload": "tree 6a46436112d1e7d2a9a9d3eff7c7183b709bc342\nparent d66181337a6103bd1bb60b3732a1b1216da9afe5\nauthor Pavol Rusnak <pavol@rusnak.io> 1637102780 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638184409 +0100\n\ntest: add functional tests for Yggdrasil\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d66181337a6103bd1bb60b3732a1b1216da9afe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d66181337a6103bd1bb60b3732a1b1216da9afe5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d66181337a6103bd1bb60b3732a1b1216da9afe5"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 58,
      "deletions": 14
    },
    "files": [
      {
        "sha": "dd8f390022a4fa01f248957348345eaaf891d42e",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 53,
        "deletions": 9,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
        "patch": "@@ -13,6 +13,7 @@\n     - `-onion` (proxy just onions)\n     - `-proxyrandomize` Circuit randomization\n     - `-cjdnsreachable`\n+    - `-yggdrasilreachable`\n - Proxy configurations to test on proxy side,\n     - support no authentication (other proxy)\n     - support no authentication + user/pass authentication (Tor)\n@@ -28,6 +29,7 @@\n addnode connect to onion\n addnode connect to generic DNS name\n addnode connect to a CJDNS address\n+addnode connect to a Yggdrasil address\n \n - Test getnetworkinfo for each node\n \"\"\"\n@@ -53,14 +55,15 @@\n NET_ONION = \"onion\"\n NET_I2P = \"i2p\"\n NET_CJDNS = \"cjdns\"\n+NET_YGGDRASIL = \"yggdrasil\"\n \n # Networks returned by RPC getnetworkinfo, defined in src/rpc/net.cpp::GetNetworksInfo()\n-NETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS})\n+NETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_YGGDRASIL})\n \n \n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 5\n+        self.num_nodes = 6\n         self.setup_clean_chain = True\n \n     def setup_nodes(self):\n@@ -106,7 +109,9 @@ def setup_nodes(self):\n             ['-listen', f'-proxy={self.conf2.addr[0]}:{self.conf2.addr[1]}','-proxyrandomize=1'],\n             [],\n             ['-listen', f'-proxy={self.conf1.addr[0]}:{self.conf1.addr[1]}','-proxyrandomize=1',\n-                '-cjdnsreachable']\n+                '-cjdnsreachable'],\n+            ['-listen', f'-proxy={self.conf1.addr[0]}:{self.conf1.addr[1]}','-proxyrandomize=1',\n+                '-yggdrasilreachable'],\n         ]\n         if self.have_ipv6:\n             args[3] = ['-listen', f'-proxy=[{self.conf3.addr[0]}]:{self.conf3.addr[1]}','-proxyrandomize=0', '-noonion']\n@@ -118,7 +123,7 @@ def network_test(self, node, addr, network):\n             if peer[\"addr\"] == addr:\n                 assert_equal(peer[\"network\"], network)\n \n-    def node_test(self, node, *, proxies, auth, test_onion, test_cjdns):\n+    def node_test(self, node, *, proxies, auth, test_onion, test_cjdns, test_yggdrasil):\n         rv = []\n         addr = \"15.61.23.23:1234\"\n         self.log.debug(f\"Test: outgoing IPv4 connection through node for address {addr}\")\n@@ -181,6 +186,21 @@ def node_test(self, node, *, proxies, auth, test_onion, test_cjdns):\n             rv.append(cmd)\n             self.network_test(node, addr, network=NET_CJDNS)\n \n+        if test_yggdrasil:\n+            addr = \"[200:1:2:3:4:5:6:7]:8888\"\n+            self.log.debug(f\"Test: outgoing Yggdrasil connection through node for address {addr}\")\n+            node.addnode(addr, \"onetry\")\n+            cmd = proxies[1].queue.get()\n+            assert isinstance(cmd, Socks5Command)\n+            assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n+            assert_equal(cmd.addr, b\"200:1:2:3:4:5:6:7\")\n+            assert_equal(cmd.port, 8888)\n+            if not auth:\n+                assert_equal(cmd.username, None)\n+                assert_equal(cmd.password, None)\n+            rv.append(cmd)\n+            self.network_test(node, addr, network=NET_YGGDRASIL)\n+\n         addr = \"node.noumenon:8333\"\n         self.log.debug(f\"Test: outgoing DNS name connection through node for address {addr}\")\n         node.addnode(addr, \"onetry\")\n@@ -201,17 +221,17 @@ def run_test(self):\n         # basic -proxy\n         self.node_test(self.nodes[0],\n             proxies=[self.serv1, self.serv1, self.serv1, self.serv1],\n-            auth=False, test_onion=True, test_cjdns=False)\n+            auth=False, test_onion=True, test_cjdns=False, test_yggdrasil=False)\n \n         # -proxy plus -onion\n         self.node_test(self.nodes[1],\n             proxies=[self.serv1, self.serv1, self.serv2, self.serv1],\n-            auth=False, test_onion=True, test_cjdns=False)\n+            auth=False, test_onion=True, test_cjdns=False, test_yggdrasil=False)\n \n         # -proxy plus -onion, -proxyrandomize\n         rv = self.node_test(self.nodes[2],\n             proxies=[self.serv2, self.serv2, self.serv2, self.serv2],\n-            auth=True, test_onion=True, test_cjdns=False)\n+            auth=True, test_onion=True, test_cjdns=False, test_yggdrasil=False)\n         # Check that credentials as used for -proxyrandomize connections are unique\n         credentials = set((x.username,x.password) for x in rv)\n         assert_equal(len(credentials), len(rv))\n@@ -220,12 +240,17 @@ def run_test(self):\n             # proxy on IPv6 localhost\n             self.node_test(self.nodes[3],\n                 proxies=[self.serv3, self.serv3, self.serv3, self.serv3],\n-                auth=False, test_onion=False, test_cjdns=False)\n+                auth=False, test_onion=False, test_cjdns=False, test_yggdrasil=False)\n \n         # -proxy=unauth -proxyrandomize=1 -cjdnsreachable\n         self.node_test(self.nodes[4],\n             proxies=[self.serv1, self.serv1, self.serv1, self.serv1],\n-            auth=False, test_onion=True, test_cjdns=True)\n+            auth=False, test_onion=True, test_cjdns=True, test_yggdrasil=False)\n+\n+        # -proxy=unauth -proxyrandomize=1 -yggdrasilreachable\n+        self.node_test(self.nodes[5],\n+            proxies=[self.serv1, self.serv1, self.serv1, self.serv1],\n+            auth=False, test_onion=True, test_cjdns=False, test_yggdrasil=True)\n \n         def networks_dict(d):\n             r = {}\n@@ -248,6 +273,7 @@ def networks_dict(d):\n         assert_equal(n0['onion']['reachable'], True)\n         assert_equal(n0['i2p']['reachable'], False)\n         assert_equal(n0['cjdns']['reachable'], False)\n+        assert_equal(n0['yggdrasil']['reachable'], False)\n \n         n1 = networks_dict(self.nodes[1].getnetworkinfo())\n         assert_equal(NETWORKS, n1.keys())\n@@ -275,6 +301,7 @@ def networks_dict(d):\n         assert_equal(n2['onion']['reachable'], True)\n         assert_equal(n2['i2p']['reachable'], False)\n         assert_equal(n2['cjdns']['reachable'], False)\n+        assert_equal(n2['yggdrasil']['reachable'], False)\n \n         if self.have_ipv6:\n             n3 = networks_dict(self.nodes[3].getnetworkinfo())\n@@ -289,6 +316,7 @@ def networks_dict(d):\n             assert_equal(n3['onion']['reachable'], False)\n             assert_equal(n3['i2p']['reachable'], False)\n             assert_equal(n3['cjdns']['reachable'], False)\n+            assert_equal(n3['yggdrasil']['reachable'], False)\n \n         n4 = networks_dict(self.nodes[4].getnetworkinfo())\n         assert_equal(NETWORKS, n4.keys())\n@@ -304,7 +332,23 @@ def networks_dict(d):\n         assert_equal(n4['onion']['reachable'], True)\n         assert_equal(n4['i2p']['reachable'], False)\n         assert_equal(n4['cjdns']['reachable'], True)\n+        assert_equal(n4['yggdrasil']['reachable'], False)\n \n+        n5 = networks_dict(self.nodes[5].getnetworkinfo())\n+        assert_equal(NETWORKS, n5.keys())\n+        for net in NETWORKS:\n+            if net == NET_I2P:\n+                expected_proxy = ''\n+                expected_randomize = False\n+            else:\n+                expected_proxy = '%s:%i' % (self.conf1.addr)\n+                expected_randomize = True\n+            assert_equal(n5[net]['proxy'], expected_proxy)\n+            assert_equal(n5[net]['proxy_randomize_credentials'], expected_randomize)\n+        assert_equal(n5['onion']['reachable'], True)\n+        assert_equal(n5['i2p']['reachable'], False)\n+        assert_equal(n5['cjdns']['reachable'], False)\n+        assert_equal(n5['yggdrasil']['reachable'], True)\n \n if __name__ == '__main__':\n     ProxyTest().main()"
      },
      {
        "sha": "6a9611b7d1c7371a425e76eb8a16fd34ee60771c",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
        "patch": "@@ -136,7 +136,7 @@ def run_test(self):\n         network_info = self.nodes[0].getnetworkinfo()\n         cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()\n         cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n-        assert_equal(cli_get_info[\"Proxies\"], \"127.0.0.1:9050 (ipv4, ipv6, onion, cjdns), 127.0.0.1:7656 (i2p)\")\n+        assert_equal(cli_get_info[\"Proxies\"], \"127.0.0.1:9050 (ipv4, ipv6, onion, cjdns, yggdrasil), 127.0.0.1:7656 (i2p)\")\n \n         if self.is_wallet_compiled():\n             self.log.info(\"Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info\")"
      },
      {
        "sha": "372e15aa80a001190a2ba5b96e3142b252179690",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
        "patch": "@@ -105,7 +105,7 @@ def test_getpeerinfo(self):\n         assert_equal(peer_info[1][1]['connection_type'], 'inbound')\n \n         # Check dynamically generated networks list in getpeerinfo help output.\n-        assert \"(ipv4, ipv6, onion, i2p, cjdns, not_publicly_routable)\" in self.nodes[0].help(\"getpeerinfo\")\n+        assert \"(ipv4, ipv6, onion, i2p, cjdns, yggdrasil, not_publicly_routable)\" in self.nodes[0].help(\"getpeerinfo\")\n \n     def test_getnettotals(self):\n         self.log.info(\"Test getnettotals\")\n@@ -156,7 +156,7 @@ def test_getnetworkinfo(self):\n             assert_net_servicesnames(int(info[\"localservices\"], 0x10), info[\"localservicesnames\"])\n \n         # Check dynamically generated networks list in getnetworkinfo help output.\n-        assert \"(ipv4, ipv6, onion, i2p, cjdns)\" in self.nodes[0].help(\"getnetworkinfo\")\n+        assert \"(ipv4, ipv6, onion, i2p, cjdns, yggdrasil)\" in self.nodes[0].help(\"getnetworkinfo\")\n \n     def test_getaddednodeinfo(self):\n         self.log.info(\"Test getaddednodeinfo\")\n@@ -227,8 +227,8 @@ def test_getnodeaddresses(self):\n         assert_equal(res[0][\"port\"], 8333)\n         assert_equal(res[0][\"services\"], P2P_SERVICES)\n \n-        # Test for the absence of onion, I2P and CJDNS addresses.\n-        for network in [\"onion\", \"i2p\", \"cjdns\"]:\n+        # Test for the absence of onion, I2P, CJDNS and Yggdrasil addresses.\n+        for network in [\"onion\", \"i2p\", \"cjdns\", \"yggdrasil\"]:\n             assert_equal(self.nodes[0].getnodeaddresses(0, network), [])\n \n         # Test invalid arguments."
      }
    ]
  },
  {
    "sha": "beef7ce094b2114b7a1feb4db0b24345999a839b",
    "node_id": "C_kwDOABII59oAKGJlZWY3Y2UwOTRiMjExNGI3YTFmZWI0ZGIwYjI0MzQ1OTk5YTgzOWI",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-18T23:04:59Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:13:29Z"
      },
      "message": "net: use 0200::/7 for Yggdrasil",
      "tree": {
        "sha": "394cbe585b01349c1888ebefeb064bbf5854a7d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/394cbe585b01349c1888ebefeb064bbf5854a7d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beef7ce094b2114b7a1feb4db0b24345999a839b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGktdkACgkQkfOzObmg\nKj2IdxAAgwwm5VYmWBIl1gxRru0FeA6a5+9N9FjFGKptMBZM8D/oh4aJG74f1KQA\nE13Y0b4absNT0U2a9H7/TUr+0pXPcVWJlPUCRX2D1fRoEH/kZG30RXLq4+LX4Ewr\nF7ts71X9F/DoArSQqz26PS/2K5NOO3olsYPH7P7TUUHPyJRz0QoglP/W5Q0ALi62\n1Ub7J0XMEqbTXWomCKFxUOaUugo8C1xuUSogFCSQqm0gl6Ts/a7S33uglGknYjxB\nbWediZifK4XcC2hmdYpj0FUAKBW9F7eqqxQBt4EpRJ9uOpHC/Nsa1dhJJKpanOYx\njG+iYIUcW/tdBeQsLuaP0TO1hon/otqXQ7iIzcbgjk0WMaAPbTbTMMgmCkqgMTrB\nF/TAHQOkcwaEdIGQGXaAVlefjXEeLLU8zImq1iOyD4z65M1F4T3474mWGYw4xuPS\n2r5G98tJeGk7CvlSMcFJccoIu4eGBt10EncNNXmp6Skq/8a82hdI3YHYWQD8ecTM\np9chk/tzvrhVdLkvr9N+a6u8j8A6UeCx7nkYSWQL//0Pqm56HbQaR963ylUBJFDI\nKYf3fwAdw6Itpu780KxpXf7lVi99TmUsv2teNXhCzpWaABxvZTSKW2vLwLK2eH8X\nLwnlFhGu/CM+2tFQrAPqetBz3rnhK3MTmVWH/fMBBB0G5U6Mlb0=\n=jKfl\n-----END PGP SIGNATURE-----",
        "payload": "tree 394cbe585b01349c1888ebefeb064bbf5854a7d6\nparent 2d635a6ec037cbbb3299a6a4a7c720ddd2638f57\nauthor Pavol Rusnak <pavol@rusnak.io> 1637276699 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638184409 +0100\n\nnet: use 0200::/7 for Yggdrasil\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beef7ce094b2114b7a1feb4db0b24345999a839b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beef7ce094b2114b7a1feb4db0b24345999a839b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beef7ce094b2114b7a1feb4db0b24345999a839b/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d635a6ec037cbbb3299a6a4a7c720ddd2638f57"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "51cc539ffed0db5014494e78c26b3ee347721b02",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ce094b2114b7a1feb4db0b24345999a839b/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ce094b2114b7a1feb4db0b24345999a839b/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=beef7ce094b2114b7a1feb4db0b24345999a839b",
        "patch": "@@ -84,8 +84,8 @@ def name_to_bip155(addr):\n             # not to the publicly unroutable \"Unique Local Unicast\" network, see\n             # RFC4193: https://datatracker.ietf.org/doc/html/rfc4193#section-8\n             return (BIP155Network.CJDNS, addr_bytes)\n-        elif addr_bytes[0] == 0x02:\n-            # Assume that seeds with 0200::/8 addresses belong to Yggdrasil.\n+        elif addr_bytes[0] in [0x02, 0x03]:\n+            # Assume that seeds with 0200::/7 addresses belong to Yggdrasil.\n             # See https://yggdrasil-network.github.io/faq.html#will-yggdrasil-conflict-with-my-network-routing\n             return (BIP155Network.YGGDRASIL, addr_bytes)\n         else:"
      },
      {
        "sha": "81023d1dec229fa17bd9b4f05eeb37f9cc05846e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ce094b2114b7a1feb4db0b24345999a839b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ce094b2114b7a1feb4db0b24345999a839b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=beef7ce094b2114b7a1feb4db0b24345999a839b",
        "patch": "@@ -424,7 +424,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-cjdnsreachable\", \"If set then this host is configured for CJDNS (connecting to fc00::/8 addresses would lead us to the CJDNS network) (default: 0)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-yggdrasilreachable\", \"If set then this host is configured for Yggdrasil (connecting to 0200::/8 addresses would lead us to the Yggdrasil network) (default: 0)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-yggdrasilreachable\", \"If set then this host is configured for Yggdrasil (connecting to 0200::/7 addresses would lead us to the Yggdrasil network) (default: 0)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "f7c7959957b43f4b0c051bed59c88cdd499f0ec4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ce094b2114b7a1feb4db0b24345999a839b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ce094b2114b7a1feb4db0b24345999a839b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=beef7ce094b2114b7a1feb4db0b24345999a839b",
        "patch": "@@ -249,7 +249,7 @@ CService MaybeFlipIPv6toCJDNSorYggdrasil(const CService& service)\n         if (ret.m_addr[0] == 0xfc && IsReachable(NET_CJDNS)) {\n             ret.m_net = NET_CJDNS;\n         } else\n-        if (ret.m_addr[0] == 0x02 && IsReachable(NET_YGGDRASIL)) {\n+        if ((ret.m_addr[0] & 0xfe) == 0x02 && IsReachable(NET_YGGDRASIL)) {\n             ret.m_net = NET_YGGDRASIL;\n         }\n     }"
      },
      {
        "sha": "cc484b07f560f4315f8c65cf971f0d61af66f327",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ce094b2114b7a1feb4db0b24345999a839b/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ce094b2114b7a1feb4db0b24345999a839b/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=beef7ce094b2114b7a1feb4db0b24345999a839b",
        "patch": "@@ -479,8 +479,8 @@ bool CNetAddr::IsValid() const\n         return false;\n     }\n \n-    // Yggdrasil addresses always start with 0x02\n-    if (IsYggdrasil() && (m_addr[0] != 0x02)) {\n+    // Yggdrasil addresses always start with 0x02 or 0x03\n+    if (IsYggdrasil() && ((m_addr[0] & 0xfe) != 0x02)) {\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "ce4028426c0a353aa12933346132f2457a53ef3d",
    "node_id": "C_kwDOABII59oAKGNlNDAyODQyNmMwYTM1M2FhMTI5MzMzNDYxMzJmMjQ1N2E1M2VmM2Q",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:10:06Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T12:41:08Z"
      },
      "message": "net: rename MaybeFlipIPv6toCJDNSorYggdrasil to MaybeFlipIPv6toAltNet",
      "tree": {
        "sha": "a41fd11d185af5b8e5636690cdf78ef915a78b06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a41fd11d185af5b8e5636690cdf78ef915a78b06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce4028426c0a353aa12933346132f2457a53ef3d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGkymQACgkQkfOzObmg\nKj3WfQ//XabCjG4pXd4ZyJAdJoVzqH7yTaWCUBoTCkuKu8DNAYo0ND/wFFk9yg0z\nJcAJEiW9yv4vrK/qYY+i+NnYHoMFw8GjqM+HycrkSytKec0ap/inDFpgu3hMWp6A\n7XGnIbC3dAgOYfsz90g2bV3jd3zEjhm+nOPYVnmKakcjVzuumkYat48xQsm+8F3E\nJsydCjcTL0aM3ndUBqluafqnSwj7dEuoORTD97zILgTVu4DhhsH5SpQYTHydPs8Q\nO39YvXQfPYbUHJSEN3R6SK+6hVJA00OjMFk1l4mNOfe0ji9W6Vy2pZ3P4z+MIp1O\ny4HGy/cMpt/zOtRT0OrbMWkWMtCbLMseujk00tLKwc7QNY4Mq+22yvW5wtzuZrKX\nEgChD+ak05btYUpDFlJeXdhB05Qu8OiCyn0CFd3vXScooW0NuVS7d8YW586YNnbN\n5mqRy0dWFJ8oRV31vCiHzJqDg/6RC8/1sCXZR1Zp+FZvr6fkwmoRXNUtjFHmVbV7\n4AWF27noLxvcX+nuAgrZQpM+iqPilIb+2AaawAV4Ovnysxqrq3anl7riuHGsscy9\n6JGR3JjG8LUPj4c1G9F6LoTdkiwx27K3DJ72GxzMKu85Y9oSWcFVQgi42Eh76vTn\nzq0vjCJUiuP5Q27Am4NpWaRhNHc5gqasHJ8Psg5glNBTHoNsHmE=\n=05kG\n-----END PGP SIGNATURE-----",
        "payload": "tree a41fd11d185af5b8e5636690cdf78ef915a78b06\nparent beef7ce094b2114b7a1feb4db0b24345999a839b\nauthor Pavol Rusnak <pavol@rusnak.io> 1638184206 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638189668 +0100\n\nnet: rename MaybeFlipIPv6toCJDNSorYggdrasil to MaybeFlipIPv6toAltNet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4028426c0a353aa12933346132f2457a53ef3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce4028426c0a353aa12933346132f2457a53ef3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4028426c0a353aa12933346132f2457a53ef3d/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beef7ce094b2114b7a1feb4db0b24345999a839b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beef7ce094b2114b7a1feb4db0b24345999a839b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beef7ce094b2114b7a1feb4db0b24345999a839b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "fbfb755d6ba6a1ec272062e8f5632f4f3d81c2b6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4028426c0a353aa12933346132f2457a53ef3d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4028426c0a353aa12933346132f2457a53ef3d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ce4028426c0a353aa12933346132f2457a53ef3d",
        "patch": "@@ -242,7 +242,7 @@ std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n  * @param[in] service Address to potentially convert.\n  * @return a copy of `service` either unmodified or changed to CJDNS or Yggdrasil.\n  */\n-CService MaybeFlipIPv6toCJDNSorYggdrasil(const CService& service)\n+CService MaybeFlipIPv6toAltNet(const CService& service)\n {\n     CService ret{service};\n     if (ret.m_net == NET_IPV6) {\n@@ -259,7 +259,7 @@ CService MaybeFlipIPv6toCJDNSorYggdrasil(const CService& service)\n // learn a new local address\n bool AddLocal(const CService& addr_, int nScore)\n {\n-    CService addr{MaybeFlipIPv6toCJDNSorYggdrasil(addr_)};\n+    CService addr{MaybeFlipIPv6toAltNet(addr_)};\n \n     if (!addr.IsRoutable())\n         return false;\n@@ -438,7 +438,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         std::vector<CService> resolved;\n         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n             const CService rnd{resolved[GetRand(resolved.size())]};\n-            addrConnect = CAddress{MaybeFlipIPv6toCJDNSorYggdrasil(rnd), NODE_NONE};\n+            addrConnect = CAddress{MaybeFlipIPv6toAltNet(rnd), NODE_NONE};\n             if (!addrConnect.IsValid()) {\n                 LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\\n\", addrConnect.ToString(), pszDest);\n                 return nullptr;\n@@ -1122,10 +1122,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n         LogPrintf(\"Warning: Unknown socket family\\n\");\n     } else {\n-        addr = CAddress{MaybeFlipIPv6toCJDNSorYggdrasil(addr), NODE_NONE};\n+        addr = CAddress{MaybeFlipIPv6toAltNet(addr), NODE_NONE};\n     }\n \n-    const CAddress addr_bind{MaybeFlipIPv6toCJDNSorYggdrasil(GetBindAddress(hSocket)), NODE_NONE};\n+    const CAddress addr_bind{MaybeFlipIPv6toAltNet(GetBindAddress(hSocket)), NODE_NONE};\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n@@ -2489,7 +2489,7 @@ NodeId CConnman::GetNewNodeId()\n \n bool CConnman::Bind(const CService& addr_, unsigned int flags, NetPermissionFlags permissions)\n {\n-    const CService addr{MaybeFlipIPv6toCJDNSorYggdrasil(addr_)};\n+    const CService addr{MaybeFlipIPv6toAltNet(addr_)};\n \n     if (!(flags & BF_EXPLICIT) && !IsReachable(addr)) {\n         return false;"
      },
      {
        "sha": "e4a29da93f6cd42f41ad04bf6d178d032360c0fc",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4028426c0a353aa12933346132f2457a53ef3d/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4028426c0a353aa12933346132f2457a53ef3d/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=ce4028426c0a353aa12933346132f2457a53ef3d",
        "patch": "@@ -565,7 +565,7 @@ class CService : public CNetAddr\n     }\n \n     friend class CServiceHash;\n-    friend CService MaybeFlipIPv6toCJDNSorYggdrasil(const CService& service);\n+    friend CService MaybeFlipIPv6toAltNet(const CService& service);\n };\n \n class CServiceHash"
      }
    ]
  },
  {
    "sha": "a85cd9187d33bd9a2859aabe28c656825da0e539",
    "node_id": "C_kwDOABII59oAKGE4NWNkOTE4N2QzM2JkOWEyODU5YWFiZTI4YzY1NjgyNWRhMGU1Mzk",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T11:08:54Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "pavol@rusnak.io",
        "date": "2021-11-29T15:27:49Z"
      },
      "message": "net: use \"ygg\" instead of \"yggdrasil\" to make columns less wide",
      "tree": {
        "sha": "883969940055703cb8e5c92f2ee72edb4864458a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/883969940055703cb8e5c92f2ee72edb4864458a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a85cd9187d33bd9a2859aabe28c656825da0e539",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEhuZ5L8J7/UeIYMEQkfOzObmgKj0FAmGk8XcACgkQkfOzObmg\nKj3Rqg//VOQxFZ8ceEGiL+p62fb/j8MuYlpgLi3bkOEl8e4+OreENNqugU8U1fUx\nMLNCSg4HcF5a4fiw585kwKWX4emqENoXzVUX+Fp6u7FoXz/cEc0UvkoFEMB4uvB/\nDTC32d+gK/eXf1zOwQNeG+iVqzf9ulytoshGVAe20jolwVLjD4C7Zo46M9qiBdlr\ng6VR84bHSzZzGplku8BzbX/hhh9BcS/iInSPcUmYP13ffhRkvumkoBr8Sz9PgXgY\nLeXGTnS1XWHOLbH9xc+g7HWCbSEx2PVsarV00kOPQDpCF1lhOhXz3SfK/SJ6vtKD\n/JUObqhliMxe3v4UyyExPfX/P/oRlDE2HgDPQoIlnblC2YoBj5Hz9ZcDQHvmtqc9\nCWKe2U3bZbiz608PJtjG44L8WqSm6ilW2wVadJlGRCtbbVUkCuk0kz32Gl2Ix9ow\n3Tzqld77ph5wCH1ZSy9kuLzK9cHH9SYAxbC2YbLOLvbcLS45nnJWgoNX1/nfgbCf\nyak0VsWg23DsEr4gRYUgc+wu8G/hP+ghTjySCPeUA6eF4m8gsjz4xWTskbcbITVf\n5eI9c01h2bOyURHau8IRjyU9s797FtGNrHFib9Wd2LjqV8gKg2TpTPo4n0+hjCfc\nc6E73x5MDQrg1VU7YbUeN0KjGK0+n8tCRyCiVlQYsBynnpm+HO4=\n=sSNP\n-----END PGP SIGNATURE-----",
        "payload": "tree 883969940055703cb8e5c92f2ee72edb4864458a\nparent ce4028426c0a353aa12933346132f2457a53ef3d\nauthor Pavol Rusnak <pavol@rusnak.io> 1638184134 +0100\ncommitter Pavol Rusnak <pavol@rusnak.io> 1638199669 +0100\n\nnet: use \"ygg\" instead of \"yggdrasil\" to make columns less wide\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a85cd9187d33bd9a2859aabe28c656825da0e539",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a85cd9187d33bd9a2859aabe28c656825da0e539",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a85cd9187d33bd9a2859aabe28c656825da0e539/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce4028426c0a353aa12933346132f2457a53ef3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4028426c0a353aa12933346132f2457a53ef3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce4028426c0a353aa12933346132f2457a53ef3d"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "b22b420b0c39ed63c0d631d81398d59550f64654",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -49,7 +49,7 @@ static constexpr int DEFAULT_WAIT_CLIENT_TIMEOUT = 0;\n static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n static constexpr int8_t UNKNOWN_NETWORK{-1};\n-static constexpr std::array NETWORKS{\"ipv4\", \"ipv6\", \"onion\", \"i2p\", \"cjdns\", \"yggdrasil\"};\n+static constexpr std::array NETWORKS{\"ipv4\", \"ipv6\", \"onion\", \"i2p\", \"cjdns\", \"ygg\"};\n \n /** Default number of blocks to generate for RPC generatetoaddress. */\n static const std::string DEFAULT_NBLOCKS = \"1\";\n@@ -625,7 +625,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         \"           \\\"manual\\\" - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n         \"           \\\"feeler\\\" - short-lived connection for testing addresses\\n\"\n         \"           \\\"addr\\\"   - address fetch; short-lived connection for requesting addresses\\n\"\n-        \"  net      Network the peer connected through (\\\"ipv4\\\", \\\"ipv6\\\", \\\"onion\\\", \\\"i2p\\\", \\\"cjdns\\\" or \\\"yggdrasil\\\")\\n\"\n+        \"  net      Network the peer connected through (\\\"ipv4\\\", \\\"ipv6\\\", \\\"onion\\\", \\\"i2p\\\", \\\"cjdns\\\" or \\\"ygg\\\")\\n\"\n         \"  mping    Minimum observed ping time, in milliseconds (ms)\\n\"\n         \"  ping     Last observed ping time, in milliseconds (ms)\\n\"\n         \"  send     Time since last message sent to the peer, in seconds\\n\""
      },
      {
        "sha": "e5b8591b7cc8890543e062315cec9b9ed142b725",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -99,7 +99,7 @@ enum Network ParseNetwork(const std::string& net_in) {\n     if (net == \"cjdns\") {\n         return NET_CJDNS;\n     }\n-    if (net == \"yggdrasil\") {\n+    if (net == \"ygg\") {\n         return NET_YGGDRASIL;\n     }\n     return NET_UNROUTABLE;\n@@ -114,7 +114,7 @@ std::string GetNetworkName(enum Network net)\n     case NET_ONION: return \"onion\";\n     case NET_I2P: return \"i2p\";\n     case NET_CJDNS: return \"cjdns\";\n-    case NET_YGGDRASIL: return \"yggdrasil\";\n+    case NET_YGGDRASIL: return \"ygg\";\n     case NET_INTERNAL: return \"internal\";\n     case NET_MAX: assert(false);\n     } // no default case, so the compiler can warn about missing cases"
      },
      {
        "sha": "f63c25dc835ca9d4150e2cc7db8287e2e3a1f2e9",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -670,7 +670,7 @@ QString NetworkToQString(Network net)\n     case NET_ONION: return \"Onion\";\n     case NET_I2P: return \"I2P\";\n     case NET_CJDNS: return \"CJDNS\";\n-    case NET_YGGDRASIL: return \"Yggdrasil\";\n+    case NET_YGGDRASIL: return \"Ygg\";\n     case NET_INTERNAL: return QObject::tr(\"Internal\");\n     case NET_MAX: assert(false);\n     } // no default case, so the compiler can warn about missing cases"
      },
      {
        "sha": "5c1602f51cb1cbe19dcf099e2bfb06f536b83039",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -340,14 +340,14 @@ BOOST_AUTO_TEST_CASE(netbase_parsenetwork)\n     BOOST_CHECK_EQUAL(ParseNetwork(\"onion\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"tor\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"cjdns\"), NET_CJDNS);\n-    BOOST_CHECK_EQUAL(ParseNetwork(\"yggdrasil\"), NET_YGGDRASIL);\n+    BOOST_CHECK_EQUAL(ParseNetwork(\"ygg\"), NET_YGGDRASIL);\n \n     BOOST_CHECK_EQUAL(ParseNetwork(\"IPv4\"), NET_IPV4);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"IPv6\"), NET_IPV6);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"ONION\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"TOR\"), NET_ONION);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"CJDNS\"), NET_CJDNS);\n-    BOOST_CHECK_EQUAL(ParseNetwork(\"YGGDRASIL\"), NET_YGGDRASIL);\n+    BOOST_CHECK_EQUAL(ParseNetwork(\"YGG\"), NET_YGGDRASIL);\n \n     BOOST_CHECK_EQUAL(ParseNetwork(\":)\"), NET_UNROUTABLE);\n     BOOST_CHECK_EQUAL(ParseNetwork(\"t\u00d6r\"), NET_UNROUTABLE);"
      },
      {
        "sha": "190c283c7070766fbef4d06e69a5304cac2b46d7",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -55,7 +55,7 @@\n NET_ONION = \"onion\"\n NET_I2P = \"i2p\"\n NET_CJDNS = \"cjdns\"\n-NET_YGGDRASIL = \"yggdrasil\"\n+NET_YGGDRASIL = \"ygg\"\n \n # Networks returned by RPC getnetworkinfo, defined in src/rpc/net.cpp::GetNetworksInfo()\n NETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_YGGDRASIL})\n@@ -273,7 +273,7 @@ def networks_dict(d):\n         assert_equal(n0['onion']['reachable'], True)\n         assert_equal(n0['i2p']['reachable'], False)\n         assert_equal(n0['cjdns']['reachable'], False)\n-        assert_equal(n0['yggdrasil']['reachable'], False)\n+        assert_equal(n0['ygg']['reachable'], False)\n \n         n1 = networks_dict(self.nodes[1].getnetworkinfo())\n         assert_equal(NETWORKS, n1.keys())\n@@ -301,7 +301,7 @@ def networks_dict(d):\n         assert_equal(n2['onion']['reachable'], True)\n         assert_equal(n2['i2p']['reachable'], False)\n         assert_equal(n2['cjdns']['reachable'], False)\n-        assert_equal(n2['yggdrasil']['reachable'], False)\n+        assert_equal(n2['ygg']['reachable'], False)\n \n         if self.have_ipv6:\n             n3 = networks_dict(self.nodes[3].getnetworkinfo())\n@@ -316,7 +316,7 @@ def networks_dict(d):\n             assert_equal(n3['onion']['reachable'], False)\n             assert_equal(n3['i2p']['reachable'], False)\n             assert_equal(n3['cjdns']['reachable'], False)\n-            assert_equal(n3['yggdrasil']['reachable'], False)\n+            assert_equal(n3['ygg']['reachable'], False)\n \n         n4 = networks_dict(self.nodes[4].getnetworkinfo())\n         assert_equal(NETWORKS, n4.keys())\n@@ -332,7 +332,7 @@ def networks_dict(d):\n         assert_equal(n4['onion']['reachable'], True)\n         assert_equal(n4['i2p']['reachable'], False)\n         assert_equal(n4['cjdns']['reachable'], True)\n-        assert_equal(n4['yggdrasil']['reachable'], False)\n+        assert_equal(n4['ygg']['reachable'], False)\n \n         n5 = networks_dict(self.nodes[5].getnetworkinfo())\n         assert_equal(NETWORKS, n5.keys())\n@@ -348,7 +348,7 @@ def networks_dict(d):\n         assert_equal(n5['onion']['reachable'], True)\n         assert_equal(n5['i2p']['reachable'], False)\n         assert_equal(n5['cjdns']['reachable'], False)\n-        assert_equal(n5['yggdrasil']['reachable'], True)\n+        assert_equal(n5['ygg']['reachable'], True)\n \n if __name__ == '__main__':\n     ProxyTest().main()"
      },
      {
        "sha": "222eac3eae25179aa1fae9878134a4959ffa7919",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -136,7 +136,7 @@ def run_test(self):\n         network_info = self.nodes[0].getnetworkinfo()\n         cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()\n         cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n-        assert_equal(cli_get_info[\"Proxies\"], \"127.0.0.1:9050 (ipv4, ipv6, onion, cjdns, yggdrasil), 127.0.0.1:7656 (i2p)\")\n+        assert_equal(cli_get_info[\"Proxies\"], \"127.0.0.1:9050 (ipv4, ipv6, onion, cjdns, ygg), 127.0.0.1:7656 (i2p)\")\n \n         if self.is_wallet_compiled():\n             self.log.info(\"Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info\")"
      },
      {
        "sha": "1f7a173f080f58ad4b84910354e1152bed32f670",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85cd9187d33bd9a2859aabe28c656825da0e539/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85cd9187d33bd9a2859aabe28c656825da0e539/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=a85cd9187d33bd9a2859aabe28c656825da0e539",
        "patch": "@@ -105,7 +105,7 @@ def test_getpeerinfo(self):\n         assert_equal(peer_info[1][1]['connection_type'], 'inbound')\n \n         # Check dynamically generated networks list in getpeerinfo help output.\n-        assert \"(ipv4, ipv6, onion, i2p, cjdns, yggdrasil, not_publicly_routable)\" in self.nodes[0].help(\"getpeerinfo\")\n+        assert \"(ipv4, ipv6, onion, i2p, cjdns, ygg, not_publicly_routable)\" in self.nodes[0].help(\"getpeerinfo\")\n \n     def test_getnettotals(self):\n         self.log.info(\"Test getnettotals\")\n@@ -156,7 +156,7 @@ def test_getnetworkinfo(self):\n             assert_net_servicesnames(int(info[\"localservices\"], 0x10), info[\"localservicesnames\"])\n \n         # Check dynamically generated networks list in getnetworkinfo help output.\n-        assert \"(ipv4, ipv6, onion, i2p, cjdns, yggdrasil)\" in self.nodes[0].help(\"getnetworkinfo\")\n+        assert \"(ipv4, ipv6, onion, i2p, cjdns, ygg)\" in self.nodes[0].help(\"getnetworkinfo\")\n \n     def test_getaddednodeinfo(self):\n         self.log.info(\"Test getaddednodeinfo\")\n@@ -228,7 +228,7 @@ def test_getnodeaddresses(self):\n         assert_equal(res[0][\"services\"], P2P_SERVICES)\n \n         # Test for the absence of onion, I2P, CJDNS and Yggdrasil addresses.\n-        for network in [\"onion\", \"i2p\", \"cjdns\", \"yggdrasil\"]:\n+        for network in [\"onion\", \"i2p\", \"cjdns\", \"ygg\"]:\n             assert_equal(self.nodes[0].getnodeaddresses(0, network), [])\n \n         # Test invalid arguments."
      }
    ]
  }
]