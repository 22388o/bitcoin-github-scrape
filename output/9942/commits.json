[
  {
    "sha": "ae7327b8322d36d00047e92fe699371185de1c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTczMjdiODMyMmQzNmQwMDA0N2U5MmZlNjk5MzcxMTg1ZGUxYzY4",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-14T21:54:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:51:51Z"
      },
      "message": "Make feeEstimator its own global instance of CBlockPolicyEstimator",
      "tree": {
        "sha": "dc0fc0e80ff4e6a34bfd2ac01c7441da0b229d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0fc0e80ff4e6a34bfd2ac01c7441da0b229d07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae7327b8322d36d00047e92fe699371185de1c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae7327b8322d36d00047e92fe699371185de1c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae7327b8322d36d00047e92fe699371185de1c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae7327b8322d36d00047e92fe699371185de1c68/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e183ea2047b3ccdbadbc7dfd5828aada9ed270a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e183ea2047b3ccdbadbc7dfd5828aada9ed270a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e183ea2047b3ccdbadbc7dfd5828aada9ed270a3"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 12,
      "deletions": 16
    },
    "files": [
      {
        "sha": "93abd183068d5c85b788bb0ff735ae19e269d864",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae7327b8322d36d00047e92fe699371185de1c68/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae7327b8322d36d00047e92fe699371185de1c68/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=ae7327b8322d36d00047e92fe699371185de1c68",
        "patch": "@@ -16,7 +16,8 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n-    CTxMemPool mpool;\n+    CBlockPolicyEstimator feeEst;\n+    CTxMemPool mpool(&feeEst);\n     TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     CAmount deltaFee(100);"
      },
      {
        "sha": "3dc7c11f2d96abb04ae7e45fb1451504d1bdd08d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae7327b8322d36d00047e92fe699371185de1c68/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae7327b8322d36d00047e92fe699371185de1c68/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ae7327b8322d36d00047e92fe699371185de1c68",
        "patch": "@@ -333,22 +333,15 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool() :\n-    nTransactionsUpdated(0)\n+CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n+    nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n {\n     _clear(); //lock free clear\n \n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     nCheckFrequency = 0;\n-\n-    minerPolicyEstimator = new CBlockPolicyEstimator();\n-}\n-\n-CTxMemPool::~CTxMemPool()\n-{\n-    delete minerPolicyEstimator;\n }\n \n void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n@@ -427,7 +420,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n \n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    minerPolicyEstimator->processTransaction(entry, validFeeEstimate);\n+    if (minerPolicyEstimator) {minerPolicyEstimator->processTransaction(entry, validFeeEstimate);}\n \n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n@@ -457,7 +450,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     mapLinks.erase(it);\n     mapTx.erase(it);\n     nTransactionsUpdated++;\n-    minerPolicyEstimator->removeTx(hash);\n+    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash);}\n }\n \n // Calculates descendants of entry that are not already in setDescendants, and adds to\n@@ -591,7 +584,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n             entries.push_back(&*i);\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n-    minerPolicyEstimator->processBlock(nBlockHeight, entries);\n+    if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());"
      },
      {
        "sha": "8ec2b0090df6abd145a740f1883e528980337ade",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae7327b8322d36d00047e92fe699371185de1c68/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae7327b8322d36d00047e92fe699371185de1c68/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ae7327b8322d36d00047e92fe699371185de1c68",
        "patch": "@@ -496,8 +496,7 @@ class CTxMemPool\n \n     /** Create a new CTxMemPool.\n      */\n-    CTxMemPool();\n-    ~CTxMemPool();\n+    CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n \n     /**\n      * If sanity-checking is turned on, check makes sure the pool is"
      },
      {
        "sha": "95b94d6b06709acfdac47af892d42496bf58e757",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae7327b8322d36d00047e92fe699371185de1c68/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae7327b8322d36d00047e92fe699371185de1c68/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ae7327b8322d36d00047e92fe699371185de1c68",
        "patch": "@@ -80,7 +80,8 @@ uint256 hashAssumeValid;\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n-CTxMemPool mempool;\n+CBlockPolicyEstimator feeEstimator;\n+CTxMemPool mempool(&feeEstimator);\n \n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n "
      },
      {
        "sha": "075a836a9f7aa5692e0add9d2ddc5bd849148739",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae7327b8322d36d00047e92fe699371185de1c68/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae7327b8322d36d00047e92fe699371185de1c68/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ae7327b8322d36d00047e92fe699371185de1c68",
        "patch": "@@ -39,6 +39,7 @@ class CChainParams;\n class CInv;\n class CConnman;\n class CScriptCheck;\n+class CBlockPolicyEstimator;\n class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n@@ -152,6 +153,7 @@ struct BlockHasher\n \n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n+extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;"
      }
    ]
  },
  {
    "sha": "f6187d6e393b5ca587604b678f91496d50149a20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjE4N2Q2ZTM5M2I1Y2E1ODc2MDRiNjc4ZjkxNDk2ZDUwMTQ5YTIw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-15T14:16:51Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:51:51Z"
      },
      "message": "Make processBlockTx private.",
      "tree": {
        "sha": "370c1545a29c69908953f65059b8fd0280a1b6cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/370c1545a29c69908953f65059b8fd0280a1b6cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6187d6e393b5ca587604b678f91496d50149a20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6187d6e393b5ca587604b678f91496d50149a20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6187d6e393b5ca587604b678f91496d50149a20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6187d6e393b5ca587604b678f91496d50149a20/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae7327b8322d36d00047e92fe699371185de1c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae7327b8322d36d00047e92fe699371185de1c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae7327b8322d36d00047e92fe699371185de1c68"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7abd1d43a1c7e56ccef994b12c822c55f69dc6df",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6187d6e393b5ca587604b678f91496d50149a20/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6187d6e393b5ca587604b678f91496d50149a20/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=f6187d6e393b5ca587604b678f91496d50149a20",
        "patch": "@@ -209,9 +209,6 @@ class CBlockPolicyEstimator\n     void processBlock(unsigned int nBlockHeight,\n                       std::vector<const CTxMemPoolEntry*>& entries);\n \n-    /** Process a transaction confirmed in a block*/\n-    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n-\n     /** Process a transaction accepted to the mempool*/\n     void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n \n@@ -251,6 +248,10 @@ class CBlockPolicyEstimator\n \n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;\n+\n+    /** Process a transaction confirmed in a block*/\n+    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n+\n };\n \n class FeeFilterRounder"
      }
    ]
  },
  {
    "sha": "dbb9e3699b8e835fd72a5db2c22927d828484c32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmI5ZTM2OTliOGU4MzVmZDcyYTVkYjJjMjI5MjdkODI4NDg0YzMy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-15T14:24:11Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:51:51Z"
      },
      "message": "Give CBlockPolicyEstimator it's own lock",
      "tree": {
        "sha": "ebbcfd000a92b47b7c882eb0eb003bd55e1075f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebbcfd000a92b47b7c882eb0eb003bd55e1075f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbb9e3699b8e835fd72a5db2c22927d828484c32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb9e3699b8e835fd72a5db2c22927d828484c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb9e3699b8e835fd72a5db2c22927d828484c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb9e3699b8e835fd72a5db2c22927d828484c32/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6187d6e393b5ca587604b678f91496d50149a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6187d6e393b5ca587604b678f91496d50149a20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6187d6e393b5ca587604b678f91496d50149a20"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 25,
      "deletions": 14
    },
    "files": [
      {
        "sha": "05f2a20e9a37f3905f6577172ca4a6095a8b6fcb",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb9e3699b8e835fd72a5db2c22927d828484c32/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb9e3699b8e835fd72a5db2c22927d828484c32/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=dbb9e3699b8e835fd72a5db2c22927d828484c32",
        "patch": "@@ -290,6 +290,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n // of no harm to try to remove them again.\n bool CBlockPolicyEstimator::removeTx(uint256 hash)\n {\n+    LOCK(cs_feeEstimator);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos != mapMemPoolTxs.end()) {\n         feeStats.removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n@@ -315,6 +316,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n {\n+    LOCK(cs_feeEstimator);\n     unsigned int txHeight = entry.GetHeight();\n     uint256 hash = entry.GetTx().GetHash();\n     if (mapMemPoolTxs.count(hash)) {\n@@ -374,6 +376,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n                                          std::vector<const CTxMemPoolEntry*>& entries)\n {\n+    LOCK(cs_feeEstimator);\n     if (nBlockHeight <= nBestSeenHeight) {\n         // Ignore side chains and re-orgs; assuming they are random\n         // they don't affect the estimate.\n@@ -410,6 +413,7 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n {\n+    LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n     // It's not possible to get reasonable estimates for confTarget of 1\n     if (confTarget <= 1 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n@@ -427,18 +431,24 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n-    // Return failure if trying to analyze a target we're not tracking\n-    if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n-        return CFeeRate(0);\n-\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget == 1)\n-        confTarget = 2;\n \n     double median = -1;\n-    while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n-        median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n-    }\n+\n+    {\n+        LOCK(cs_feeEstimator);\n+\n+        // Return failure if trying to analyze a target we're not tracking\n+        if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+            return CFeeRate(0);\n+\n+        // It's not possible to get reasonable estimates for confTarget of 1\n+        if (confTarget == 1)\n+            confTarget = 2;\n+\n+        while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n+            median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        }\n+    } // Must unlock cs_feeEstimator before taking mempool locks\n \n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget - 1;\n@@ -456,12 +466,14 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n \n void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n {\n+    LOCK(cs_feeEstimator);\n     fileout << nBestSeenHeight;\n     feeStats.Write(fileout);\n }\n \n void CBlockPolicyEstimator::Read(CAutoFile& filein, int nFileVersion)\n {\n+    LOCK(cs_feeEstimator);\n     int nFileBestSeenHeight;\n     filein >> nFileBestSeenHeight;\n     feeStats.Read(filein);"
      },
      {
        "sha": "e11a6582a4ef879b9c287f01430d2fefae1947e7",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb9e3699b8e835fd72a5db2c22927d828484c32/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb9e3699b8e835fd72a5db2c22927d828484c32/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=dbb9e3699b8e835fd72a5db2c22927d828484c32",
        "patch": "@@ -8,6 +8,7 @@\n #include \"amount.h\"\n #include \"uint256.h\"\n #include \"random.h\"\n+#include \"sync.h\"\n \n #include <map>\n #include <string>\n@@ -249,6 +250,8 @@ class CBlockPolicyEstimator\n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;\n \n+    mutable CCriticalSection cs_feeEstimator;\n+\n     /** Process a transaction confirmed in a block*/\n     bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n "
      },
      {
        "sha": "7fac48d3c59fbe10e02f89a00b310f99ca440116",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb9e3699b8e835fd72a5db2c22927d828484c32/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb9e3699b8e835fd72a5db2c22927d828484c32/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=dbb9e3699b8e835fd72a5db2c22927d828484c32",
        "patch": "@@ -845,20 +845,17 @@ TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n \n CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n {\n-    LOCK(cs);\n     return minerPolicyEstimator->estimateFee(nBlocks);\n }\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n-    LOCK(cs);\n     return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n }\n \n bool\n CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n {\n     try {\n-        LOCK(cs);\n         fileout << 139900; // version required to read: 0.13.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         minerPolicyEstimator->Write(fileout);\n@@ -878,7 +875,6 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n-        LOCK(cs);\n         minerPolicyEstimator->Read(filein, nVersionThatWrote);\n     }\n     catch (const std::exception&) {"
      }
    ]
  },
  {
    "sha": "14e10aa842b8583f9648accd5d151dbdf342b9dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGUxMGFhODQyYjg1ODNmOTY0OGFjY2Q1ZDE1MWRiZGYzNDJiOWRj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-15T20:23:34Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:56:50Z"
      },
      "message": "Call estimate(Smart)Fee directly from CBlockPolicyEstimator",
      "tree": {
        "sha": "bd9cb352c1734d8ec7dbd87fee74b1f91e77644b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd9cb352c1734d8ec7dbd87fee74b1f91e77644b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14e10aa842b8583f9648accd5d151dbdf342b9dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e10aa842b8583f9648accd5d151dbdf342b9dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14e10aa842b8583f9648accd5d151dbdf342b9dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e10aa842b8583f9648accd5d151dbdf342b9dc/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbb9e3699b8e835fd72a5db2c22927d828484c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb9e3699b8e835fd72a5db2c22927d828484c32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb9e3699b8e835fd72a5db2c22927d828484c32"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 49,
      "deletions": 60
    },
    "files": [
      {
        "sha": "66da753a8b7d779718ff8fab7a567cebf400eacb",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -77,7 +77,7 @@ void TxConfirmStats::UpdateMovingAverages()\n // returns -1 on error conditions\n double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                                          double successBreakPoint, bool requireGreater,\n-                                         unsigned int nBlockHeight)\n+                                         unsigned int nBlockHeight) const\n {\n     // Counters for a bucket (or range of buckets)\n     double nConf = 0; // Number of tx's confirmed within the confTarget\n@@ -411,7 +411,7 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     untrackedTxs = 0;\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n+CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n@@ -427,7 +427,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;"
      },
      {
        "sha": "2299144b94d20e3f1f2c07a473a4eb1dc7c60f89",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -150,10 +150,10 @@ class TxConfirmStats\n      * @param nBlockHeight the current block height\n      */\n     double EstimateMedianVal(int confTarget, double sufficientTxVal,\n-                             double minSuccess, bool requireGreater, unsigned int nBlockHeight);\n+                             double minSuccess, bool requireGreater, unsigned int nBlockHeight) const;\n \n     /** Return the max number of confirms we're tracking */\n-    unsigned int GetMaxConfirms() { return confAvg.size(); }\n+    unsigned int GetMaxConfirms() const { return confAvg.size(); }\n \n     /** Write state of estimation data to a file*/\n     void Write(CAutoFile& fileout);\n@@ -217,13 +217,13 @@ class CBlockPolicyEstimator\n     bool removeTx(uint256 hash);\n \n     /** Return a feerate estimate */\n-    CFeeRate estimateFee(int confTarget);\n+    CFeeRate estimateFee(int confTarget) const;\n \n     /** Estimate feerate needed to get be included in a block within\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const;\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "38ad6e9aab6c4b16bee7ee2624deddcb7396fe9c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -15,6 +15,7 @@\n \n #include \"wallet/coincontrol.h\"\n #include \"init.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"validation.h\" // For mempool\n #include \"wallet/wallet.h\"\n@@ -512,7 +513,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, ::mempool, ::feeEstimator);\n         if (nPayFee > 0 && coinControl->nMinimumTotalFee > nPayFee)\n             nPayFee = coinControl->nMinimumTotalFee;\n \n@@ -592,7 +593,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), mempool.estimateSmartFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(nTxConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "5d58a6a11f8fafd04b92503b3f0d8f2696dfcb5b",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -21,6 +21,7 @@\n #include \"validation.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n #include \"txmempool.h\"\n+#include \"policy/fees.h\"\n #include \"wallet/wallet.h\"\n \n #include <QFontMetrics>\n@@ -660,7 +661,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     int estimateFoundAtBlocks = nBlocksToConfirm;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks, ::mempool);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),"
      },
      {
        "sha": "4aad267b8a818520819398a4b5346e61cb23d1c7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -15,6 +15,7 @@\n #include \"validation.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"pow.h\"\n #include \"rpc/blockchain.h\"\n #include \"rpc/server.h\"\n@@ -819,7 +820,7 @@ UniValue estimatefee(const JSONRPCRequest& request)\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n-    CFeeRate feeRate = mempool.estimateFee(nBlocks);\n+    CFeeRate feeRate = ::feeEstimator.estimateFee(nBlocks);\n     if (feeRate == CFeeRate(0))\n         return -1.0;\n \n@@ -857,7 +858,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;"
      },
      {
        "sha": "ed6782ea345644ec0029e424b6ea9005aa6c07d9",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -79,16 +79,16 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             // At this point we should need to combine 5 buckets to get enough data points\n             // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n             // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n-            BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(2) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n+            BOOST_CHECK(feeEst.estimateFee(2) == CFeeRate(0));\n+            BOOST_CHECK(feeEst.estimateFee(3) == CFeeRate(0));\n+            BOOST_CHECK(feeEst.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(feeEst.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n             int answerFound;\n-            BOOST_CHECK(mpool.estimateSmartFee(1, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(mpool.estimateSmartFee(3, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(mpool.estimateSmartFee(4, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(mpool.estimateSmartFee(8, &answerFound) == mpool.estimateFee(8) && answerFound == 8);\n+            BOOST_CHECK(feeEst.estimateSmartFee(1, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(feeEst.estimateSmartFee(3, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(feeEst.estimateSmartFee(4, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(feeEst.estimateSmartFee(8, &answerFound, mpool) == feeEst.estimateFee(8) && answerFound == 8);\n         }\n     }\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Second highest feerate has 100% chance of being included by 2 blocks,\n     // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n-        origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n+        origFeeEst.push_back(feeEst.estimateFee(i).GetFeePerK());\n         if (i > 2) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n         }\n@@ -119,10 +119,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     while (blocknum < 250)\n         mpool.removeForBlock(block, ++blocknum);\n \n-    BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n+    BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n     }\n \n \n@@ -142,8 +142,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n \n     int answerFound;\n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimateSmartFee(i, &answerFound).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, &answerFound, mpool).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n     }\n \n     // Mine all those transactions\n@@ -158,9 +158,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n     mpool.removeForBlock(block, 265);\n     block.clear();\n-    BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n+    BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n     }\n \n     // Mine 200 more blocks where everything is mined every block\n@@ -180,9 +180,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n     }\n-    BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n+    BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 10; i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n     }\n \n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n@@ -191,8 +191,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n-        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateFee(i).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n     }\n }\n "
      },
      {
        "sha": "fa058414916437449921412e7956cdedf1961808",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -843,15 +843,6 @@ TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n     return GetInfo(i);\n }\n \n-CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n-{\n-    return minerPolicyEstimator->estimateFee(nBlocks);\n-}\n-CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n-{\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n-}\n-\n bool\n CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n {"
      },
      {
        "sha": "3aa5b46c46dfc95d603a96f49900132f5e1898ac",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -617,15 +617,6 @@ class CTxMemPool\n     TxMempoolInfo info(const uint256& hash) const;\n     std::vector<TxMempoolInfo> infoAll() const;\n \n-    /** Estimate fee rate needed to get into the next nBlocks\n-     *  If no answer can be given at nBlocks, return an estimate\n-     *  at the lowest number of blocks where one can be given\n-     */\n-    CFeeRate estimateSmartFee(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n-\n-    /** Estimate fee rate needed to get into the next nBlocks */\n-    CFeeRate estimateFee(int nBlocks) const;\n-\n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);"
      },
      {
        "sha": "67792dad79a063b10cb19143f8848eeef0eb6e2c",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -5,6 +5,7 @@\n #include \"consensus/validation.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"validation.h\" //for mempool access\n@@ -159,11 +160,11 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     } else {\n         // if user specified a confirm target then don't consider any global payTxFee\n         if (specifiedConfirmTarget) {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, CAmount(0));\n         }\n         // otherwise use the regular wallet logic to select payTxFee or default confirm target\n         else {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator);\n         }\n \n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);"
      },
      {
        "sha": "43b71712c0c0e7df6e5dbee87193f969af2a0c59",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -11,6 +11,7 @@\n #include \"init.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\""
      },
      {
        "sha": "9defcb54c87409da7e33eb9a833cb926621038f6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -16,6 +16,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"primitives/block.h\"\n@@ -2575,7 +2576,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator);\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }\n@@ -2749,19 +2750,19 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator)\n {\n     // payTxFee is the user-set global for desired feerate\n-    return GetMinimumFee(nTxBytes, nConfirmTarget, pool, payTxFee.GetFee(nTxBytes));\n+    return GetMinimumFee(nTxBytes, nConfirmTarget, pool, estimator, payTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, CAmount targetFee)\n {\n     CAmount nFeeNeeded = targetFee;\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0) {\n         int estimateFoundTarget = nConfirmTarget;\n-        nFeeNeeded = pool.estimateSmartFee(nConfirmTarget, &estimateFoundTarget).GetFee(nTxBytes);\n+        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, &estimateFoundTarget, pool).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n         if (nFeeNeeded == 0)\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);"
      },
      {
        "sha": "c8869a4c0f9eb8fb43edebb26e96673d037932ac",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e10aa842b8583f9648accd5d151dbdf342b9dc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "patch": "@@ -75,6 +75,7 @@ class CReserveKey;\n class CScript;\n class CScheduler;\n class CTxMemPool;\n+class CBlockPolicyEstimator;\n class CWalletTx;\n \n /** (client) version numbers for particular wallet features */\n@@ -890,12 +891,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator);\n     /**\n      * Estimate the minimum fee considering required fee and targetFee or if 0\n      * then fee estimation for nConfirmTarget\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, CAmount targetFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmE4MWU1NGUwMzkwZWMwYmU3ZGJjOGViZWEwYzM1OTMzNDQyYThh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-15T20:48:48Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:56:50Z"
      },
      "message": "Read and Write fee estimate file directly from CBlockPolicyEstimator",
      "tree": {
        "sha": "614058d4426ef86d836b017db769327402706ea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/614058d4426ef86d836b017db769327402706ea0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e10aa842b8583f9648accd5d151dbdf342b9dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14e10aa842b8583f9648accd5d151dbdf342b9dc"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 38,
      "deletions": 55
    },
    "files": [
      {
        "sha": "f06c9e11000f25135e34b84332befdfed38085a9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "patch": "@@ -25,6 +25,7 @@\n #include \"netbase.h\"\n #include \"net.h\"\n #include \"net_processing.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"rpc/server.h\"\n #include \"rpc/register.h\"\n@@ -215,7 +216,7 @@ void Shutdown()\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n-            mempool.WriteFeeEstimates(est_fileout);\n+            ::feeEstimator.Write(est_fileout);\n         else\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n         fFeeEstimatesInitialized = false;\n@@ -1550,7 +1551,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n-        mempool.ReadFeeEstimates(est_filein);\n+        ::feeEstimator.Read(est_filein);\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet"
      },
      {
        "sha": "eed71089e4980c49e6534e5ad623fd38d155484f",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "patch": "@@ -7,6 +7,7 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"streams.h\"\n@@ -173,7 +174,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     return median;\n }\n \n-void TxConfirmStats::Write(CAutoFile& fileout)\n+void TxConfirmStats::Write(CAutoFile& fileout) const\n {\n     fileout << decay;\n     fileout << buckets;\n@@ -464,21 +465,40 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     return CFeeRate(median);\n }\n \n-void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n+bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n-    LOCK(cs_feeEstimator);\n-    fileout << nBestSeenHeight;\n-    feeStats.Write(fileout);\n+    try {\n+        LOCK(cs_feeEstimator);\n+        fileout << 139900; // version required to read: 0.13.99 or later\n+        fileout << CLIENT_VERSION; // version that wrote the file\n+        fileout << nBestSeenHeight;\n+        feeStats.Write(fileout);\n+    }\n+    catch (const std::exception&) {\n+        LogPrintf(\"CBlockPolicyEstimator::Write(): unable to read policy estimator data (non-fatal)\\n\");\n+        return false;\n+    }\n+    return true;\n }\n \n-void CBlockPolicyEstimator::Read(CAutoFile& filein, int nFileVersion)\n+bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n-    LOCK(cs_feeEstimator);\n-    int nFileBestSeenHeight;\n-    filein >> nFileBestSeenHeight;\n-    feeStats.Read(filein);\n-    nBestSeenHeight = nFileBestSeenHeight;\n-    // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+    try {\n+        LOCK(cs_feeEstimator);\n+        int nVersionRequired, nVersionThatWrote, nFileBestSeenHeight;\n+        filein >> nVersionRequired >> nVersionThatWrote;\n+        if (nVersionRequired > CLIENT_VERSION)\n+            return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n+        filein >> nFileBestSeenHeight;\n+        feeStats.Read(filein);\n+        nBestSeenHeight = nFileBestSeenHeight;\n+        // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+    }\n+    catch (const std::exception&) {\n+        LogPrintf(\"CBlockPolicyEstimator::Read(): unable to read policy estimator data (non-fatal)\\n\");\n+        return false;\n+    }\n+    return true;\n }\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)"
      },
      {
        "sha": "d11de81ee387d9b551e9c8163be43862ebdd92e5",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "patch": "@@ -156,7 +156,7 @@ class TxConfirmStats\n     unsigned int GetMaxConfirms() const { return confAvg.size(); }\n \n     /** Write state of estimation data to a file*/\n-    void Write(CAutoFile& fileout);\n+    void Write(CAutoFile& fileout) const;\n \n     /**\n      * Read saved state of estimation data from a file and replace all internal data structures and\n@@ -226,10 +226,10 @@ class CBlockPolicyEstimator\n     CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const;\n \n     /** Write estimation data to a file */\n-    void Write(CAutoFile& fileout);\n+    bool Write(CAutoFile& fileout) const;\n \n     /** Read estimation data from a file */\n-    void Read(CAutoFile& filein, int nFileVersion);\n+    bool Read(CAutoFile& filein);\n \n private:\n     CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main"
      },
      {
        "sha": "ac842da6bf31e15edbff2f7b88c4f672e8ead588",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"txmempool.h\"\n \n-#include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n@@ -16,7 +15,6 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utiltime.h\"\n-#include \"version.h\"\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n@@ -843,38 +841,6 @@ TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n     return GetInfo(i);\n }\n \n-bool\n-CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n-{\n-    try {\n-        fileout << 139900; // version required to read: 0.13.99 or later\n-        fileout << CLIENT_VERSION; // version that wrote the file\n-        minerPolicyEstimator->Write(fileout);\n-    }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\\n\");\n-        return false;\n-    }\n-    return true;\n-}\n-\n-bool\n-CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n-{\n-    try {\n-        int nVersionRequired, nVersionThatWrote;\n-        filein >> nVersionRequired >> nVersionThatWrote;\n-        if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n-        minerPolicyEstimator->Read(filein, nVersionThatWrote);\n-    }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\\n\");\n-        return false;\n-    }\n-    return true;\n-}\n-\n void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)\n {\n     {"
      },
      {
        "sha": "92c4d9f9d474e947cfe6f0f609e916cbed69b776",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "patch": "@@ -617,10 +617,6 @@ class CTxMemPool\n     TxMempoolInfo info(const uint256& hash) const;\n     std::vector<TxMempoolInfo> infoAll() const;\n \n-    /** Write/Read estimates to disk */\n-    bool WriteFeeEstimates(CAutoFile& fileout) const;\n-    bool ReadFeeEstimates(CAutoFile& filein);\n-\n     size_t DynamicMemoryUsage() const;\n \n     boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;"
      }
    ]
  },
  {
    "sha": "2332f19bef025c22fab5a96a0cd2d52d22489aa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzMyZjE5YmVmMDI1YzIyZmFiNWE5NmEwY2QyZDUyZDIyNDg5YWEy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T21:23:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:56:50Z"
      },
      "message": "Initialize TxConfirmStats in constructor\n\nand change to storing as a pointer.",
      "tree": {
        "sha": "76718006577766a897db35b2b797a103c7474d3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76718006577766a897db35b2b797a103c7474d3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2332f19bef025c22fab5a96a0cd2d52d22489aa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2332f19bef025c22fab5a96a0cd2d52d22489aa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2332f19bef025c22fab5a96a0cd2d52d22489aa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2332f19bef025c22fab5a96a0cd2d52d22489aa2/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ba81e54e0390ec0be7dbc8ebea0c35933442a8a"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f926c09612962f5a6102fa447ace4412434d6cbf",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2332f19bef025c22fab5a96a0cd2d52d22489aa2/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2332f19bef025c22fab5a96a0cd2d52d22489aa2/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=2332f19bef025c22fab5a96a0cd2d52d22489aa2",
        "patch": "@@ -14,8 +14,8 @@\n #include \"txmempool.h\"\n #include \"util.h\"\n \n-void TxConfirmStats::Initialize(std::vector<double>& defaultBuckets,\n-                                unsigned int maxConfirms, double _decay)\n+TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n+                               unsigned int maxConfirms, double _decay)\n {\n     decay = _decay;\n     for (unsigned int i = 0; i < defaultBuckets.size(); i++) {\n@@ -294,7 +294,7 @@ bool CBlockPolicyEstimator::removeTx(uint256 hash)\n     LOCK(cs_feeEstimator);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos != mapMemPoolTxs.end()) {\n-        feeStats.removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n+        feeStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n         mapMemPoolTxs.erase(hash);\n         return true;\n     } else {\n@@ -312,7 +312,12 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n         vfeelist.push_back(bucketBoundary);\n     }\n     vfeelist.push_back(INF_FEERATE);\n-    feeStats.Initialize(vfeelist, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+    feeStats = new TxConfirmStats(vfeelist, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+}\n+\n+CBlockPolicyEstimator::~CBlockPolicyEstimator()\n+{\n+    delete feeStats;\n }\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n@@ -346,7 +351,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     CFeeRate feeRate(entry.GetFee(), entry.GetTxSize());\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n-    mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    mapMemPoolTxs[hash].bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n }\n \n bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n@@ -370,7 +375,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n     // Feerates are stored and reported as BTC-per-kb:\n     CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n \n-    feeStats.Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n+    feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n     return true;\n }\n \n@@ -393,7 +398,7 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     nBestSeenHeight = nBlockHeight;\n \n     // Clear the current block state and update unconfirmed circular buffer\n-    feeStats.ClearCurrent(nBlockHeight);\n+    feeStats->ClearCurrent(nBlockHeight);\n \n     unsigned int countedTxs = 0;\n     // Repopulate the current block states\n@@ -403,7 +408,7 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     }\n \n     // Update all exponential averages with the current block state\n-    feeStats.UpdateMovingAverages();\n+    feeStats->UpdateMovingAverages();\n \n     LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n              countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n@@ -417,10 +422,10 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n     // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n         return CFeeRate(0);\n \n-    double median = feeStats.EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n \n     if (median < 0)\n         return CFeeRate(0);\n@@ -439,15 +444,15 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n-            median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n+            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n         }\n     } // Must unlock cs_feeEstimator before taking mempool locks\n \n@@ -472,7 +477,7 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n         fileout << 139900; // version required to read: 0.13.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n-        feeStats.Write(fileout);\n+        feeStats->Write(fileout);\n     }\n     catch (const std::exception&) {\n         LogPrintf(\"CBlockPolicyEstimator::Write(): unable to read policy estimator data (non-fatal)\\n\");\n@@ -490,7 +495,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n         filein >> nFileBestSeenHeight;\n-        feeStats.Read(filein);\n+        feeStats->Read(filein);\n         nBestSeenHeight = nFileBestSeenHeight;\n         // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n     }"
      },
      {
        "sha": "1a9eb0051ee0adb126d1739ed5518c35a826b310",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2332f19bef025c22fab5a96a0cd2d52d22489aa2/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2332f19bef025c22fab5a96a0cd2d52d22489aa2/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=2332f19bef025c22fab5a96a0cd2d52d22489aa2",
        "patch": "@@ -108,13 +108,13 @@ class TxConfirmStats\n \n public:\n     /**\n-     * Initialize the data structures.  This is called by BlockPolicyEstimator's\n+     * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n      * constructor with default values.\n      * @param defaultBuckets contains the upper limits for the bucket boundaries\n      * @param maxConfirms max number of confirms to track\n      * @param decay how much to decay the historical moving average per block\n      */\n-    void Initialize(std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n+    TxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n \n     /** Clear the state of the curBlock variables to start counting for the new block */\n     void ClearCurrent(unsigned int nBlockHeight);\n@@ -205,6 +205,7 @@ class CBlockPolicyEstimator\n public:\n     /** Create new BlockPolicyEstimator and initialize stats tracking classes with default values */\n     CBlockPolicyEstimator();\n+    ~CBlockPolicyEstimator();\n \n     /** Process all the transactions that have been included in a block */\n     void processBlock(unsigned int nBlockHeight,\n@@ -245,7 +246,7 @@ class CBlockPolicyEstimator\n     std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n \n     /** Classes to track historical data on transaction confirmations */\n-    TxConfirmStats feeStats;\n+    TxConfirmStats* feeStats;\n \n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;"
      }
    ]
  },
  {
    "sha": "68af6514987d9d7bfcd67caa9394edda6ab5ef2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGFmNjUxNDk4N2Q5ZDdiZmNkNjdjYWE5Mzk0ZWRkYTZhYjVlZjJj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T22:27:20Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-10T17:56:50Z"
      },
      "message": "MOVEONLY: move TxConfirmStats to cpp",
      "tree": {
        "sha": "42fd9fc163a71a7a4592155a76aeb3942b367441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42fd9fc163a71a7a4592155a76aeb3942b367441"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68af6514987d9d7bfcd67caa9394edda6ab5ef2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68af6514987d9d7bfcd67caa9394edda6ab5ef2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68af6514987d9d7bfcd67caa9394edda6ab5ef2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68af6514987d9d7bfcd67caa9394edda6ab5ef2c/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2332f19bef025c22fab5a96a0cd2d52d22489aa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2332f19bef025c22fab5a96a0cd2d52d22489aa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2332f19bef025c22fab5a96a0cd2d52d22489aa2"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 107,
      "deletions": 107
    },
    "files": [
      {
        "sha": "f3f7f8378e5684ea707c45065d3c319465563b75",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 0,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68af6514987d9d7bfcd67caa9394edda6ab5ef2c/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68af6514987d9d7bfcd67caa9394edda6ab5ef2c/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=68af6514987d9d7bfcd67caa9394edda6ab5ef2c",
        "patch": "@@ -14,6 +14,112 @@\n #include \"txmempool.h\"\n #include \"util.h\"\n \n+/**\n+ * We will instantiate an instance of this class to track transactions that were\n+ * included in a block. We will lump transactions into a bucket according to their\n+ * approximate feerate and then track how long it took for those txs to be included in a block\n+ *\n+ * The tracking of unconfirmed (mempool) transactions is completely independent of the\n+ * historical tracking of transactions that have been confirmed in a block.\n+ */\n+class TxConfirmStats\n+{\n+private:\n+    //Define the buckets we will group transactions into\n+    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n+    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n+\n+    // For each bucket X:\n+    // Count the total # of txs in each bucket\n+    // Track the historical moving average of this total over blocks\n+    std::vector<double> txCtAvg;\n+    // and calculate the total for the current block to update the moving average\n+    std::vector<int> curBlockTxCt;\n+\n+    // Count the total # of txs confirmed within Y blocks in each bucket\n+    // Track the historical moving average of theses totals over blocks\n+    std::vector<std::vector<double> > confAvg; // confAvg[Y][X]\n+    // and calculate the totals for the current block to update the moving averages\n+    std::vector<std::vector<int> > curBlockConf; // curBlockConf[Y][X]\n+\n+    // Sum the total feerate of all tx's in each bucket\n+    // Track the historical moving average of this total over blocks\n+    std::vector<double> avg;\n+    // and calculate the total for the current block to update the moving average\n+    std::vector<double> curBlockVal;\n+\n+    // Combine the conf counts with tx counts to calculate the confirmation % for each Y,X\n+    // Combine the total value with the tx counts to calculate the avg feerate per bucket\n+\n+    double decay;\n+\n+    // Mempool counts of outstanding transactions\n+    // For each bucket X, track the number of transactions in the mempool\n+    // that are unconfirmed for each possible confirmation value Y\n+    std::vector<std::vector<int> > unconfTxs;  //unconfTxs[Y][X]\n+    // transactions still unconfirmed after MAX_CONFIRMS for each bucket\n+    std::vector<int> oldUnconfTxs;\n+\n+public:\n+    /**\n+     * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n+     * constructor with default values.\n+     * @param defaultBuckets contains the upper limits for the bucket boundaries\n+     * @param maxConfirms max number of confirms to track\n+     * @param decay how much to decay the historical moving average per block\n+     */\n+    TxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n+\n+    /** Clear the state of the curBlock variables to start counting for the new block */\n+    void ClearCurrent(unsigned int nBlockHeight);\n+\n+    /**\n+     * Record a new transaction data point in the current block stats\n+     * @param blocksToConfirm the number of blocks it took this transaction to confirm\n+     * @param val the feerate of the transaction\n+     * @warning blocksToConfirm is 1-based and has to be >= 1\n+     */\n+    void Record(int blocksToConfirm, double val);\n+\n+    /** Record a new transaction entering the mempool*/\n+    unsigned int NewTx(unsigned int nBlockHeight, double val);\n+\n+    /** Remove a transaction from mempool tracking stats*/\n+    void removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight,\n+                  unsigned int bucketIndex);\n+\n+    /** Update our estimates by decaying our historical moving average and updating\n+        with the data gathered from the current block */\n+    void UpdateMovingAverages();\n+\n+    /**\n+     * Calculate a feerate estimate.  Find the lowest value bucket (or range of buckets\n+     * to make sure we have enough data points) whose transactions still have sufficient likelihood\n+     * of being confirmed within the target number of confirmations\n+     * @param confTarget target number of confirmations\n+     * @param sufficientTxVal required average number of transactions per block in a bucket range\n+     * @param minSuccess the success probability we require\n+     * @param requireGreater return the lowest feerate such that all higher values pass minSuccess OR\n+     *        return the highest feerate such that all lower values fail minSuccess\n+     * @param nBlockHeight the current block height\n+     */\n+    double EstimateMedianVal(int confTarget, double sufficientTxVal,\n+                             double minSuccess, bool requireGreater, unsigned int nBlockHeight) const;\n+\n+    /** Return the max number of confirms we're tracking */\n+    unsigned int GetMaxConfirms() const { return confAvg.size(); }\n+\n+    /** Write state of estimation data to a file*/\n+    void Write(CAutoFile& fileout) const;\n+\n+    /**\n+     * Read saved state of estimation data from a file and replace all internal data structures and\n+     * variables with this state.\n+     */\n+    void Read(CAutoFile& filein);\n+};\n+\n+\n TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n                                unsigned int maxConfirms, double _decay)\n {"
      },
      {
        "sha": "34f07c7270751efa878fe84dee8fb5bec7524025",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 107,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68af6514987d9d7bfcd67caa9394edda6ab5ef2c/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68af6514987d9d7bfcd67caa9394edda6ab5ef2c/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=68af6514987d9d7bfcd67caa9394edda6ab5ef2c",
        "patch": "@@ -18,6 +18,7 @@ class CAutoFile;\n class CFeeRate;\n class CTxMemPoolEntry;\n class CTxMemPool;\n+class TxConfirmStats;\n \n /** \\class CBlockPolicyEstimator\n  * The BlockPolicyEstimator is used for estimating the feerate needed\n@@ -60,113 +61,6 @@ class CTxMemPool;\n  * they've been outstanding.\n  */\n \n-/**\n- * We will instantiate an instance of this class to track transactions that were\n- * included in a block. We will lump transactions into a bucket according to their\n- * approximate feerate and then track how long it took for those txs to be included in a block\n- *\n- * The tracking of unconfirmed (mempool) transactions is completely independent of the\n- * historical tracking of transactions that have been confirmed in a block.\n- */\n-class TxConfirmStats\n-{\n-private:\n-    //Define the buckets we will group transactions into\n-    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n-\n-    // For each bucket X:\n-    // Count the total # of txs in each bucket\n-    // Track the historical moving average of this total over blocks\n-    std::vector<double> txCtAvg;\n-    // and calculate the total for the current block to update the moving average\n-    std::vector<int> curBlockTxCt;\n-\n-    // Count the total # of txs confirmed within Y blocks in each bucket\n-    // Track the historical moving average of theses totals over blocks\n-    std::vector<std::vector<double> > confAvg; // confAvg[Y][X]\n-    // and calculate the totals for the current block to update the moving averages\n-    std::vector<std::vector<int> > curBlockConf; // curBlockConf[Y][X]\n-\n-    // Sum the total feerate of all tx's in each bucket\n-    // Track the historical moving average of this total over blocks\n-    std::vector<double> avg;\n-    // and calculate the total for the current block to update the moving average\n-    std::vector<double> curBlockVal;\n-\n-    // Combine the conf counts with tx counts to calculate the confirmation % for each Y,X\n-    // Combine the total value with the tx counts to calculate the avg feerate per bucket\n-\n-    double decay;\n-\n-    // Mempool counts of outstanding transactions\n-    // For each bucket X, track the number of transactions in the mempool\n-    // that are unconfirmed for each possible confirmation value Y\n-    std::vector<std::vector<int> > unconfTxs;  //unconfTxs[Y][X]\n-    // transactions still unconfirmed after MAX_CONFIRMS for each bucket\n-    std::vector<int> oldUnconfTxs;\n-\n-public:\n-    /**\n-     * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n-     * constructor with default values.\n-     * @param defaultBuckets contains the upper limits for the bucket boundaries\n-     * @param maxConfirms max number of confirms to track\n-     * @param decay how much to decay the historical moving average per block\n-     */\n-    TxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n-\n-    /** Clear the state of the curBlock variables to start counting for the new block */\n-    void ClearCurrent(unsigned int nBlockHeight);\n-\n-    /**\n-     * Record a new transaction data point in the current block stats\n-     * @param blocksToConfirm the number of blocks it took this transaction to confirm\n-     * @param val the feerate of the transaction\n-     * @warning blocksToConfirm is 1-based and has to be >= 1\n-     */\n-    void Record(int blocksToConfirm, double val);\n-\n-    /** Record a new transaction entering the mempool*/\n-    unsigned int NewTx(unsigned int nBlockHeight, double val);\n-\n-    /** Remove a transaction from mempool tracking stats*/\n-    void removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight,\n-                  unsigned int bucketIndex);\n-\n-    /** Update our estimates by decaying our historical moving average and updating\n-        with the data gathered from the current block */\n-    void UpdateMovingAverages();\n-\n-    /**\n-     * Calculate a feerate estimate.  Find the lowest value bucket (or range of buckets\n-     * to make sure we have enough data points) whose transactions still have sufficient likelihood\n-     * of being confirmed within the target number of confirmations\n-     * @param confTarget target number of confirmations\n-     * @param sufficientTxVal required average number of transactions per block in a bucket range\n-     * @param minSuccess the success probability we require\n-     * @param requireGreater return the lowest feerate such that all higher values pass minSuccess OR\n-     *        return the highest feerate such that all lower values fail minSuccess\n-     * @param nBlockHeight the current block height\n-     */\n-    double EstimateMedianVal(int confTarget, double sufficientTxVal,\n-                             double minSuccess, bool requireGreater, unsigned int nBlockHeight) const;\n-\n-    /** Return the max number of confirms we're tracking */\n-    unsigned int GetMaxConfirms() const { return confAvg.size(); }\n-\n-    /** Write state of estimation data to a file*/\n-    void Write(CAutoFile& fileout) const;\n-\n-    /**\n-     * Read saved state of estimation data from a file and replace all internal data structures and\n-     * variables with this state.\n-     */\n-    void Read(CAutoFile& filein);\n-};\n-\n-\n-\n /** Track confirm delays up to 25 blocks, can't estimate beyond that */\n static const unsigned int MAX_BLOCK_CONFIRMS = 25;\n "
      }
    ]
  }
]