[
  {
    "sha": "96f3257234b5db02c7248a539be5ea2ccda3bff5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmYzMjU3MjM0YjVkYjAyYzcyNDhhNTM5YmU1ZWEyY2NkYTNiZmY1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-21T22:17:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T22:27:07Z"
      },
      "message": "Don't automatically include fees via JSON-RPC, and (with undocumented -nosafefees option) allow forcing them to send with under the 'minimum'",
      "tree": {
        "sha": "9f84eb8dd92a1cecbba92fc4e4476da3ea5d33bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f84eb8dd92a1cecbba92fc4e4476da3ea5d33bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96f3257234b5db02c7248a539be5ea2ccda3bff5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f3257234b5db02c7248a539be5ea2ccda3bff5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96f3257234b5db02c7248a539be5ea2ccda3bff5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f3257234b5db02c7248a539be5ea2ccda3bff5/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11f73c728afcc1663755d85311cc09c5188a4dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f73c728afcc1663755d85311cc09c5188a4dd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11f73c728afcc1663755d85311cc09c5188a4dd3"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 42,
      "deletions": 24
    },
    "files": [
      {
        "sha": "353e7197ac658053557b2b97a3ae6e0b2e105d79",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "patch": "@@ -547,6 +547,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    obj.push_back(Pair(\"forcetxfee\",    fForceFee));\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n@@ -734,6 +735,15 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n Value settxfee(const Array& params, bool fHelp)\n {\n+    if (GetBoolArg(\"-nosafefees\"))\n+    {\n+        if (fHelp || params.size() < 1 || params.size() > 2)\n+            throw runtime_error(\n+                \"settxfee <amount> [force]\\n\"\n+                \"<amount> is a real and is rounded to the nearest 0.00000001\\n\"\n+                \"[force] is a boolean that enables sending less than the safe minimum fee\");\n+    }\n+    else\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n             \"settxfee <amount>\\n\"\n@@ -745,6 +755,8 @@ Value settxfee(const Array& params, bool fHelp)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n \n     nTransactionFee = nAmount;\n+    if (params.size() > 1)\n+        fForceFee = params[1].get_bool();\n     return true;\n }\n \n@@ -773,7 +785,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx, fForceFee);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -1105,7 +1117,7 @@ Value sendfrom(const Array& params, bool fHelp)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx, fForceFee);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -1164,7 +1176,7 @@ Value sendmany(const Array& params, bool fHelp)\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, fForceFee);\n     if (!fCreated)\n     {\n         if (totalAmount + nFeeRequired > pwalletMain->GetBalance())\n@@ -2973,6 +2985,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n     if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n+    if (strMethod == \"settxfee\"               && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);"
      },
      {
        "sha": "bc2c6019cf7750954776fa08f4b7281242b674fd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "patch": "@@ -56,6 +56,7 @@ int64 nHPSTimerStart;\n \n // Settings\n int64 nTransactionFee = 0;\n+bool fForceFee = false;\n \n \n "
      },
      {
        "sha": "50d6e2c47a8d6a8cd512d831a93e70dcee892820",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "patch": "@@ -70,6 +70,7 @@ extern unsigned char pchMessageStart[4];\n \n // Settings\n extern int64 nTransactionFee;\n+extern bool fForceFee;\n \n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64 nMinDiskSpace = 52428800;"
      },
      {
        "sha": "70d008566e09bdfcbdcec0a746f30eaff9364e09",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "patch": "@@ -17,7 +17,7 @@ static int noui_ThreadSafeMessageBox(const std::string& message, const std::stri\n \n static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n {\n-    return true;\n+    return false;\n }\n \n static void noui_QueueShutdown()"
      },
      {
        "sha": "57b029e19ce4b4ad29d41eb09a63a2e4ef858e0c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "patch": "@@ -1044,7 +1044,7 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee)\n {\n     int64 nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n@@ -1091,7 +1091,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n                 // NOTE: this depends on the exact behaviour of GetMinFee\n-                if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n+                if (!fForceFee && nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n                 {\n                     int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n                     nChange -= nMoveToFee;\n@@ -1140,14 +1140,17 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     return false;\n                 dPriority /= nBytes;\n \n-                // Check that enough fee is included\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n-                bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n-                if (nFeeRet < max(nPayFee, nMinFee))\n+                if (!fForceFee)\n                 {\n-                    nFeeRet = max(nPayFee, nMinFee);\n-                    continue;\n+                    // Check that enough fee is included\n+                    int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+                    bool fAllowFree = CTransaction::AllowFree(dPriority);\n+                    int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n+                    if (nFeeRet < max(nPayFee, nMinFee))\n+                    {\n+                        nFeeRet = max(nPayFee, nMinFee);\n+                        continue;\n+                    }\n                 }\n \n                 // Fill vtxPrev by copying from previous transactions vtxPrev\n@@ -1161,11 +1164,11 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee)\n {\n     vector< pair<CScript, int64> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet);\n+    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, fForceFee);\n }\n \n // Call after CreateTransaction unless you want to abort\n@@ -1220,7 +1223,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee, const bool fForceFee)\n {\n     CReserveKey reservekey(this);\n     int64 nFeeRequired;\n@@ -1231,7 +1234,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         printf(\"SendMoney() : %s\", strError.c_str());\n         return strError;\n     }\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired))\n+    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, fForceFee))\n     {\n         string strError;\n         if (nValue + nFeeRequired > GetBalance())\n@@ -1243,7 +1246,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n     }\n \n     if (fAskFee && !uiInterface.ThreadSafeAskFee(nFeeRequired, _(\"Sending...\")))\n-        return \"ABORTED\";\n+        return strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n \n     if (!CommitTransaction(wtxNew, reservekey))\n         return _(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n@@ -1253,7 +1256,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee, const bool fForceFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1265,7 +1268,7 @@ string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nVal\n     CScript scriptPubKey;\n     scriptPubKey.SetDestination(address);\n \n-    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n+    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee, fForceFee);\n }\n \n "
      },
      {
        "sha": "949ac6955c7e45b8b32752b00d5392522ecec952",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f3257234b5db02c7248a539be5ea2ccda3bff5/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "patch": "@@ -145,11 +145,11 @@ class CWallet : public CCryptoKeyStore\n     int64 GetBalance() const;\n     int64 GetUnconfirmedBalance() const;\n     int64 GetImmatureBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n-    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n+    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee=false);\n+    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee=false);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, const bool fForceFee=false);\n+    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, const bool fForceFee=false);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool();"
      }
    ]
  },
  {
    "sha": "911e77253e9f3ead86ce9c55d60d4741f987390b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTFlNzcyNTNlOWYzZWFkODZjZTljNTVkNjBkNDc0MWY5ODczOTBi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-21T22:20:20Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T22:27:20Z"
      },
      "message": "Accept automatic fees up to new \"maxtxfee\" parameter",
      "tree": {
        "sha": "6178401264c3c1875c5bbc7097a3b91695a7382b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6178401264c3c1875c5bbc7097a3b91695a7382b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/911e77253e9f3ead86ce9c55d60d4741f987390b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911e77253e9f3ead86ce9c55d60d4741f987390b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/911e77253e9f3ead86ce9c55d60d4741f987390b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911e77253e9f3ead86ce9c55d60d4741f987390b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f3257234b5db02c7248a539be5ea2ccda3bff5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96f3257234b5db02c7248a539be5ea2ccda3bff5"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 38,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c047abcaf06a2b297f5acca2a62ffab7d8932cf8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 10,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911e77253e9f3ead86ce9c55d60d4741f987390b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911e77253e9f3ead86ce9c55d60d4741f987390b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=911e77253e9f3ead86ce9c55d60d4741f987390b",
        "patch": "@@ -547,6 +547,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    obj.push_back(Pair(\"maxtxfee\",      ValueFromAmount(nTransactionFeeMax)));\n     obj.push_back(Pair(\"forcetxfee\",    fForceFee));\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n@@ -737,26 +738,42 @@ Value settxfee(const Array& params, bool fHelp)\n {\n     if (GetBoolArg(\"-nosafefees\"))\n     {\n-        if (fHelp || params.size() < 1 || params.size() > 2)\n+        if (fHelp || params.size() < 1 || params.size() > 3)\n             throw runtime_error(\n-                \"settxfee <amount> [force]\\n\"\n-                \"<amount> is a real and is rounded to the nearest 0.00000001\\n\"\n+                \"settxfee <default amount> [maximum amount] [force]\\n\"\n+                \"<default amount> specifies the transaction fee to include in all transactions\\n\"\n+                \"[maximum amount] specifies the upper limit of how high the client will automatically\\n\"\n+                \"                 adjust your fee as it deems necessary\\n\"\n                 \"[force] is a boolean that enables sending less than the safe minimum fee\");\n     }\n     else\n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"settxfee <amount>\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\");\n+            \"settxfee <default amount> [maximum amount]\\n\"\n+            \"<default amount> specifies the transaction fee to include in all transactions\\n\"\n+            \"[maximum amount] specifies the upper limit of how high the client will automatically\\n\"\n+            \"                 adjust your fee as it deems necessary\");\n \n-    // Amount\n+    // Amounts\n     int64 nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n \n-    nTransactionFee = nAmount;\n     if (params.size() > 1)\n-        fForceFee = params[1].get_bool();\n+    {\n+        int64 nAmountMax;\n+        if (params[1].get_real() == 0.0)\n+            nAmountMax = 0;\n+        else\n+            nAmountMax = AmountFromValue(params[1]);\n+        if (nAmountMax < nAmount)\n+            throw runtime_error(\"Maximum fee, if provided, should be at least the amount of the default fee\");\n+        nTransactionFeeMax = nAmountMax;\n+    }\n+    nTransactionFee = nAmount;\n+    if (params.size() > 2)\n+        fForceFee = params[2].get_bool();\n+\n     return true;\n }\n \n@@ -2985,7 +3002,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n     if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"settxfee\"               && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"settxfee\"               && n > 1) ConvertTo<double>(params[1]);\n+    if (strMethod == \"settxfee\"               && n > 2) ConvertTo<bool>(params[2]);\n     if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);"
      },
      {
        "sha": "57cb0d4707388958ea2e999b9ad63aafbb15c316",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911e77253e9f3ead86ce9c55d60d4741f987390b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911e77253e9f3ead86ce9c55d60d4741f987390b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=911e77253e9f3ead86ce9c55d60d4741f987390b",
        "patch": "@@ -387,6 +387,12 @@ bool AppInit2()\n             InitWarning(_(\"Warning: -paytxfee is set very high. This is the transaction fee you will pay if you send a transaction.\"));\n     }\n \n+    if (mapArgs.count(\"-maxtxfee\"))\n+    {\n+        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nTransactionFeeMax))\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maxtxfee\"].c_str()));\n+    }\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Make sure only a single Bitcoin process is using the data directory."
      },
      {
        "sha": "5587e09bcc2b3909c4489450a6116b20fafe0777",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911e77253e9f3ead86ce9c55d60d4741f987390b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911e77253e9f3ead86ce9c55d60d4741f987390b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=911e77253e9f3ead86ce9c55d60d4741f987390b",
        "patch": "@@ -56,6 +56,7 @@ int64 nHPSTimerStart;\n \n // Settings\n int64 nTransactionFee = 0;\n+int64 nTransactionFeeMax = CENT;\n bool fForceFee = false;\n \n "
      },
      {
        "sha": "2aa44b522b918bf76e512c514a320637c85a8836",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911e77253e9f3ead86ce9c55d60d4741f987390b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911e77253e9f3ead86ce9c55d60d4741f987390b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=911e77253e9f3ead86ce9c55d60d4741f987390b",
        "patch": "@@ -70,6 +70,7 @@ extern unsigned char pchMessageStart[4];\n \n // Settings\n extern int64 nTransactionFee;\n+extern int64 nTransactionFeeMax;\n extern bool fForceFee;\n \n // Minimum disk space required - used in CheckDiskSpace()"
      },
      {
        "sha": "1a926ae0e5d078026c824c404ce2449c76d64d45",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911e77253e9f3ead86ce9c55d60d4741f987390b/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911e77253e9f3ead86ce9c55d60d4741f987390b/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=911e77253e9f3ead86ce9c55d60d4741f987390b",
        "patch": "@@ -7,6 +7,7 @@\n #include \"bitcoinrpc.h\"\n \n #include <string>\n+#include \"main.h\"\n \n static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n {\n@@ -17,7 +18,7 @@ static int noui_ThreadSafeMessageBox(const std::string& message, const std::stri\n \n static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n {\n-    return false;\n+    return nFeeRequired == nTransactionFee || nFeeRequired <= nTransactionFeeMax;\n }\n \n static void noui_QueueShutdown()"
      }
    ]
  },
  {
    "sha": "6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTBhMjVmYWE0ZDZiMWExYjNmMDJmMWVhMTBlZTQ2N2U3YjI2NGVh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-21T22:21:05Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T22:27:33Z"
      },
      "message": "Accept any transaction (fee-free or even non-standard) from myself",
      "tree": {
        "sha": "a6ec50495f2a746df3c0a9ee08c2e49459ec4dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6ec50495f2a746df3c0a9ee08c2e49459ec4dfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "911e77253e9f3ead86ce9c55d60d4741f987390b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911e77253e9f3ead86ce9c55d60d4741f987390b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/911e77253e9f3ead86ce9c55d60d4741f987390b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "789582ad7f461479ece5078dc24794f076c3e056",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
        "patch": "@@ -489,8 +489,10 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n \n+    bool fFromMe = pwalletMain->IsFromMe(tx);\n+\n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !tx.IsStandard())\n+    if (!fTestNet && !tx.IsStandard() && !fFromMe)\n         return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n \n     // Do we already have it?\n@@ -547,7 +549,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!tx.AreInputsStandard(mapInputs) && !fTestNet)\n+        if (!tx.AreInputsStandard(mapInputs) && !fFromMe && !fTestNet)\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then\n@@ -557,6 +559,9 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         int64 nFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n+        if (!fFromMe)\n+        {\n+\n         // Don't accept it if it can't get into a block\n         if (nFees < tx.GetMinFee(1000, true, GMF_RELAY))\n             return error(\"CTxMemPool::accept() : not enough fees\");\n@@ -586,6 +591,8 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n             }\n         }\n \n+        }\n+\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))\n@@ -3382,7 +3389,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n+            int64 nMinFee = pwalletMain->IsFromMe(tx) ? 0 : tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n \n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency"
      }
    ]
  },
  {
    "sha": "de4a4488961d24b338314f0c74b753de5d56a648",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTRhNDQ4ODk2MWQyNGIzMzgzMTRmMGM3NGI3NTNkZTVkNTZhNjQ4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-21T22:24:32Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T22:28:04Z"
      },
      "message": "Refactor maxtxfee and -nosafefees slightly to work together",
      "tree": {
        "sha": "ae19ae5c782f967d185fe6bc0152fae19344a700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae19ae5c782f967d185fe6bc0152fae19344a700"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de4a4488961d24b338314f0c74b753de5d56a648",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de4a4488961d24b338314f0c74b753de5d56a648",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de4a4488961d24b338314f0c74b753de5d56a648",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de4a4488961d24b338314f0c74b753de5d56a648/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a0a25faa4d6b1a1b3f02f1ea10ee467e7b264ea"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 27,
      "deletions": 21
    },
    "files": [
      {
        "sha": "66f9cd338134ce8974ff8c03ea881173e9abac1b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de4a4488961d24b338314f0c74b753de5d56a648/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de4a4488961d24b338314f0c74b753de5d56a648/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=de4a4488961d24b338314f0c74b753de5d56a648",
        "patch": "@@ -802,7 +802,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx, fForceFee);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx, true, fForceFee ? nTransactionFeeMax : MAX_MONEY);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -1134,7 +1134,7 @@ Value sendfrom(const Array& params, bool fHelp)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx, fForceFee);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx, true, fForceFee ? nTransactionFeeMax : MAX_MONEY);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -1193,7 +1193,7 @@ Value sendmany(const Array& params, bool fHelp)\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, fForceFee);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, fForceFee ? nTransactionFeeMax : MAX_MONEY);\n     if (!fCreated)\n     {\n         if (totalAmount + nFeeRequired > pwalletMain->GetBalance())"
      },
      {
        "sha": "7875b2a2da55bb98a3269c9cd847d6b93c05e381",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 14,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de4a4488961d24b338314f0c74b753de5d56a648/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de4a4488961d24b338314f0c74b753de5d56a648/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=de4a4488961d24b338314f0c74b753de5d56a648",
        "patch": "@@ -1044,7 +1044,7 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const int64 nMaxFee)\n {\n     int64 nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n@@ -1091,11 +1091,15 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n                 // NOTE: this depends on the exact behaviour of GetMinFee\n-                if (!fForceFee && nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n+                if (nChange > 0 && nChange < CENT)\n                 {\n-                    int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n-                    nChange -= nMoveToFee;\n-                    nFeeRet += nMoveToFee;\n+                    int64 nFeeForChange = min(MIN_TX_FEE, nMaxFee);\n+                    if (nFeeRet < nFeeForChange)\n+                    {\n+                        int64 nMoveToFee = min(nChange, nFeeForChange - nFeeRet);\n+                        nChange -= nMoveToFee;\n+                        nFeeRet += nMoveToFee;\n+                    }\n                 }\n \n                 if (nChange > 0)\n@@ -1140,15 +1144,17 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     return false;\n                 dPriority /= nBytes;\n \n-                if (!fForceFee)\n+                if (nMaxFee > nFeeRet)\n                 {\n                     // Check that enough fee is included\n                     int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                     bool fAllowFree = CTransaction::AllowFree(dPriority);\n                     int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n-                    if (nFeeRet < max(nPayFee, nMinFee))\n+                    nMinFee = max(nPayFee, nMinFee);\n+                    nMinFee = min(nMinFee, nMaxFee);\n+                    if (nFeeRet < nMinFee)\n                     {\n-                        nFeeRet = max(nPayFee, nMinFee);\n+                        nFeeRet = nMinFee;\n                         continue;\n                     }\n                 }\n@@ -1164,11 +1170,11 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const int64 nMaxFee)\n {\n     vector< pair<CScript, int64> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, fForceFee);\n+    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, nMaxFee);\n }\n \n // Call after CreateTransaction unless you want to abort\n@@ -1223,7 +1229,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee, const bool fForceFee)\n+string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee, const int64 nMaxFee)\n {\n     CReserveKey reservekey(this);\n     int64 nFeeRequired;\n@@ -1234,7 +1240,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         printf(\"SendMoney() : %s\", strError.c_str());\n         return strError;\n     }\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, fForceFee))\n+    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, nMaxFee))\n     {\n         string strError;\n         if (nValue + nFeeRequired > GetBalance())\n@@ -1256,7 +1262,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee, const bool fForceFee)\n+string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee, const int64 nMaxFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1268,7 +1274,7 @@ string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nVal\n     CScript scriptPubKey;\n     scriptPubKey.SetDestination(address);\n \n-    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee, fForceFee);\n+    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee, nMaxFee);\n }\n \n "
      },
      {
        "sha": "6ead6cdfbefd1adfd5d30ca15ff1a1e82a70221f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de4a4488961d24b338314f0c74b753de5d56a648/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de4a4488961d24b338314f0c74b753de5d56a648/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=de4a4488961d24b338314f0c74b753de5d56a648",
        "patch": "@@ -145,11 +145,11 @@ class CWallet : public CCryptoKeyStore\n     int64 GetBalance() const;\n     int64 GetUnconfirmedBalance() const;\n     int64 GetImmatureBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee=false);\n-    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const bool fForceFee=false);\n+    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const int64 nMaxFee=0x7fffffff);\n+    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, const int64 nMaxFee=0x7fffffff);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, const bool fForceFee=false);\n-    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, const bool fForceFee=false);\n+    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, const int64 nMaxFee=0x7fffffff);\n+    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, const int64 nMaxFee=0x7fffffff);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool();"
      }
    ]
  }
]