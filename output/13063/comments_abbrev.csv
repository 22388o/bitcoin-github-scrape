jnewbery,2018-04-24T15:59:43Z,needs rebase,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-383986496,383986496,
promag,2018-04-24T16:30:38Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-383996823,383996823,
Empact,2018-04-25T21:19:09Z,I like the idea of `CWalletRef` here. `std::shared_ptr<CWallet>` buries the lede a bit.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-384437645,384437645,
jonasschnelli,2018-04-26T07:56:17Z,"Concept ACK.\nA bit unfortunate that we have a lot of `CWallet* const pwallet = wallet.get();` calls outside of any lock which AFAIK partially defeats the improvements the shared pointer adds.",https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-384548582,384548582,
promag,2018-04-26T09:04:25Z,"> A bit unfortunate that we have a lot of `CWallet* const pwallet = wallet.get();` calls outside of any lock\n\n@jonasschnelli what you mean by outside? There is always a `std::shared_ptr<CWallet>` in scope when `.get()` pointer is used. The only exception is `RegisterValidationInterface(walletInstance.get());`.\n",https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-384568075,384568075,
jonasschnelli,2018-04-26T09:05:37Z,@promag: Yes. Your right.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-384568430,384568430,
promag,2018-05-07T20:39:58Z,Rebased on master.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-387198757,387198757,
jnewbery,2018-05-08T14:23:33Z,Can you update the PR description with the motivation for this (possibly just copy from #11402)?,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-387419933,387419933,
MarcoFalke,2018-05-21T19:26:27Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-390756605,390756605,
promag,2018-05-22T14:14:49Z,"```\nstd::unique_ptr<CWallet> RemoveWallet(const CWallet& wallet);  // Removes and releases ownership from vpwallets\n```\n@jimpo without shared_ptr the caller of `RemoveWallet` must ensure no one is using the wallet before releasing it. This may require synchronization between multiple threads, including UI.\n\nWith `shared_ptr`, the last pointer can safely release the wallet.",https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391006318,391006318,
promag,2018-05-22T14:17:01Z,@jnewbery improved PR description.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391007134,391007134,
promag,2018-05-22T14:28:42Z,Rebased due to merge of #12560 and #13059.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391011466,391011466,
jnewbery,2018-05-22T15:49:31Z,"Fails build:\n\n```\nCXX      wallet/libbitcoin_wallet_a-wallet.o\nwallet/wallet.cpp: In member function ‘DBErrors CWallet::LoadWallet(bool&)’:\nwallet/wallet.cpp:3204:32: error: no match for call to ‘(boost::signals2::signal<void(std::shared_ptr<CWallet>)>) (CWallet* const)’\n     uiInterface.LoadWallet(this);\n                                ^\n```",https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391042146,391042146,
promag,2018-05-22T16:19:52Z,Fixed @jnewbery.,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391052344,391052344,
jnewbery,2018-05-22T18:14:52Z,utACK 80b4910f7d87983f50047074c3c2397b0a5c4e92,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391089446,391089446,
jimpo,2018-05-22T18:56:51Z,utACK 80b4910,https://github.com/bitcoin/bitcoin/pull/13063#issuecomment-391103059,391103059,
jnewbery,2018-05-08T14:08:45Z,Is it possible to remove `m_wallet` and just keep `m_shared_wallet`?,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r186740049,186740049,src/interfaces/wallet.cpp
jnewbery,2018-05-08T14:09:52Z,"Can we update `EnsureWalletIsAvailable()` to take a `std::shared_ptr<CWallet>`, and then remove the need to create a `CWallet* const` in all of these rpc methods?",https://github.com/bitcoin/bitcoin/pull/13063#discussion_r186740422,186740422,src/wallet/rpcwallet.cpp
jnewbery,2018-05-08T14:21:35Z,"nit: it'd be nice to rename these variables to `wallet` (yes, I know these are (smart) pointers, but `pwallet` everywhere else means raw pointers)",https://github.com/bitcoin/bitcoin/pull/13063#discussion_r186744702,186744702,src/wallet/init.cpp
jimpo,2018-05-19T00:01:39Z,I think this should just return a raw pointer or CWallet&.,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189416502,189416502,src/wallet/rpcwallet.h
promag,2018-05-22T14:18:35Z,The RPC handler must *hold* the wallet to prevent concurrent unload.,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189918729,189918729,src/wallet/rpcwallet.h
promag,2018-05-22T14:22:51Z,"The problem is that there are a lot of other calls that receive `CWallet*` and the diff started to be big. I can do that in a separate branch so you can see, WDYT?",https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189920508,189920508,src/wallet/rpcwallet.cpp
promag,2018-05-22T14:23:38Z,"Yes, sure, but the diff will grow.",https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189920883,189920883,src/interfaces/wallet.cpp
jnewbery,2018-05-22T15:12:27Z,Definitely. Can be done in a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189940145,189940145,src/wallet/rpcwallet.cpp
jnewbery,2018-05-22T15:12:38Z,Can be done in a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189940229,189940229,src/interfaces/wallet.cpp
jimpo,2018-05-22T16:49:58Z,When does this get unregistered? Seems like the validation interface queue may hold a pointer after the wallet is released.,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189975003,189975003,src/wallet/wallet.cpp
promag,2018-05-22T17:41:54Z,When `UnregisterAllValidationInterfaces` is called. Obviously `unloadwallet` RPC or the `Unload wallet` action in the UI will have to unregister.,https://github.com/bitcoin/bitcoin/pull/13063#discussion_r189991697,189991697,src/wallet/wallet.cpp
