[
  {
    "sha": "80b4910f7d87983f50047074c3c2397b0a5c4e92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGI0OTEwZjdkODc5ODNmNTAwNDcwNzRjM2MyMzk3YjBhNWM0ZTky",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-05-22T15:18:07Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-05-22T15:56:20Z"
      },
      "message": "wallet: Use shared pointer to retain wallet instance",
      "tree": {
        "sha": "0bd471d1bc9b659b52033bd333cfe9b433e9b4e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bd471d1bc9b659b52033bd333cfe9b433e9b4e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80b4910f7d87983f50047074c3c2397b0a5c4e92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b4910f7d87983f50047074c3c2397b0a5c4e92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80b4910f7d87983f50047074c3c2397b0a5c4e92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b4910f7d87983f50047074c3c2397b0a5c4e92/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6916024768ec57a00f54224640ab4e4871d2a30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6916024768ec57a00f54224640ab4e4871d2a30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6916024768ec57a00f54224640ab4e4871d2a30a"
      }
    ],
    "stats": {
      "total": 378,
      "additions": 239,
      "deletions": 139
    },
    "files": [
      {
        "sha": "927035117604feb52c12d6546dc4333ddace4ee4",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -222,8 +222,8 @@ class NodeImpl : public Node\n     {\n #ifdef ENABLE_WALLET\n         std::vector<std::unique_ptr<Wallet>> wallets;\n-        for (CWallet* wallet : GetWallets()) {\n-            wallets.emplace_back(MakeWallet(*wallet));\n+        for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n+            wallets.emplace_back(MakeWallet(wallet));\n         }\n         return wallets;\n #else\n@@ -249,7 +249,7 @@ class NodeImpl : public Node\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n         CHECK_WALLET(\n-            return MakeHandler(::uiInterface.LoadWallet.connect([fn](CWallet* wallet) { fn(MakeWallet(*wallet)); })));\n+            return MakeHandler(::uiInterface.LoadWallet.connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); })));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {"
      },
      {
        "sha": "3029dbe8e3770e2df747c7e9a8dba530c92d6dc4",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -118,7 +118,7 @@ WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int de\n class WalletImpl : public Wallet\n {\n public:\n-    WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n+    WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n \n     bool encryptWallet(const SecureString& wallet_passphrase) override\n     {\n@@ -453,11 +453,12 @@ class WalletImpl : public Wallet\n         return MakeHandler(m_wallet.NotifyWatchonlyChanged.connect(fn));\n     }\n \n+    std::shared_ptr<CWallet> m_shared_wallet;\n     CWallet& m_wallet;\n };\n \n } // namespace\n \n-std::unique_ptr<Wallet> MakeWallet(CWallet& wallet) { return MakeUnique<WalletImpl>(wallet); }\n+std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return MakeUnique<WalletImpl>(wallet); }\n \n } // namespace interfaces"
      },
      {
        "sha": "82ae0b14b54aaba21ddf320338937f5f1b550991",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -363,7 +363,7 @@ struct WalletTxOut\n \n //! Return implementation of Wallet interface. This function will be undefined\n //! in builds where ENABLE_WALLET is false.\n-std::unique_ptr<Wallet> MakeWallet(CWallet& wallet);\n+std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet);\n \n } // namespace interfaces\n "
      },
      {
        "sha": "c3d33c76d42a229b2946addb68f2056ecb83b9b5",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -56,15 +56,15 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook()\n {\n     TestChain100Setup test;\n-    CWallet wallet(\"mock\", WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"mock\", WalletDatabase::CreateMock());\n     bool firstRun;\n-    wallet.LoadWallet(firstRun);\n+    wallet->LoadWallet(firstRun);\n \n     auto build_address = [&wallet]() {\n         CKey key;\n         key.MakeNewKey(true);\n         CTxDestination dest(GetDestinationForKey(\n-            key.GetPubKey(), wallet.m_default_address_type));\n+            key.GetPubKey(), wallet->m_default_address_type));\n \n         return std::make_pair(dest, QString::fromStdString(EncodeDestination(dest)));\n     };\n@@ -87,13 +87,13 @@ void TestAddAddressesToSendBook()\n     std::tie(std::ignore, new_address) = build_address();\n \n     {\n-        LOCK(wallet.cs_wallet);\n-        wallet.SetAddressBook(r_key_dest, r_label.toStdString(), \"receive\");\n-        wallet.SetAddressBook(s_key_dest, s_label.toStdString(), \"send\");\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetAddressBook(r_key_dest, r_label.toStdString(), \"receive\");\n+        wallet->SetAddressBook(s_key_dest, s_label.toStdString(), \"send\");\n     }\n \n     auto check_addbook_size = [&wallet](int expected_size) {\n-        QCOMPARE(static_cast<int>(wallet.mapAddressBook.size()), expected_size);\n+        QCOMPARE(static_cast<int>(wallet->mapAddressBook.size()), expected_size);\n     };\n \n     // We should start with the two addresses we added earlier and nothing else.\n@@ -103,9 +103,9 @@ void TestAddAddressesToSendBook()\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     auto node = interfaces::MakeNode();\n     OptionsModel optionsModel(*node);\n-    AddWallet(&wallet);\n+    AddWallet(wallet);\n     WalletModel walletModel(std::move(node->getWallets()[0]), *node, platformStyle.get(), &optionsModel);\n-    RemoveWallet(&wallet);\n+    RemoveWallet(wallet);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "33c49dc7cb9a91f223bceaee59a6a69cdd630e81",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -144,39 +144,39 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    CWallet wallet(\"mock\", WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"mock\", WalletDatabase::CreateMock());\n     bool firstRun;\n-    wallet.LoadWallet(firstRun);\n+    wallet->LoadWallet(firstRun);\n     {\n-        LOCK(wallet.cs_wallet);\n-        wallet.SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet.m_default_address_type), \"\", \"receive\");\n-        wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n+        wallet->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n     {\n         LOCK(cs_main);\n-        WalletRescanReserver reserver(&wallet);\n+        WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, true);\n+        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, true);\n     }\n-    wallet.SetBroadcastTransactions(true);\n+    wallet->SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions.\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     SendCoinsDialog sendCoinsDialog(platformStyle.get());\n     TransactionView transactionView(platformStyle.get());\n     auto node = interfaces::MakeNode();\n     OptionsModel optionsModel(*node);\n-    AddWallet(&wallet);\n+    AddWallet(wallet);\n     WalletModel walletModel(std::move(node->getWallets().back()), *node, platformStyle.get(), &optionsModel);\n-    RemoveWallet(&wallet);\n+    RemoveWallet(wallet);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n \n     // Send two transactions, and verify they are added to transaction list.\n     TransactionTableModel* transactionTableModel = walletModel.getTransactionTableModel();\n     QCOMPARE(transactionTableModel->rowCount({}), 105);\n-    uint256 txid1 = SendCoins(wallet, sendCoinsDialog, CKeyID(), 5 * COIN, false /* rbf */);\n-    uint256 txid2 = SendCoins(wallet, sendCoinsDialog, CKeyID(), 10 * COIN, true /* rbf */);\n+    uint256 txid1 = SendCoins(*wallet.get(), sendCoinsDialog, CKeyID(), 5 * COIN, false /* rbf */);\n+    uint256 txid2 = SendCoins(*wallet.get(), sendCoinsDialog, CKeyID(), 10 * COIN, true /* rbf */);\n     QCOMPARE(transactionTableModel->rowCount({}), 107);\n     QVERIFY(FindTx(*transactionTableModel, txid1).isValid());\n     QVERIFY(FindTx(*transactionTableModel, txid2).isValid());"
      },
      {
        "sha": "ad2d55afe7121a3ddb032765fcb509016baa8083",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -988,7 +988,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n #endif\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)"
      },
      {
        "sha": "3add369df0a63938f9b839681863a3c6e7c1cfdb",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_UI_INTERFACE_H\n #define BITCOIN_UI_INTERFACE_H\n \n+#include <memory>\n #include <stdint.h>\n #include <string>\n \n@@ -92,7 +93,7 @@ class CClientUIInterface\n     boost::signals2::signal<void ()> NotifyAlertChanged;\n \n     /** A wallet has been loaded. */\n-    boost::signals2::signal<void (CWallet* wallet)> LoadWallet;\n+    boost::signals2::signal<void (std::shared_ptr<CWallet> wallet)> LoadWallet;\n \n     /**\n      * Show progress e.g. for verifychain."
      },
      {
        "sha": "237bca7e5d3d6df6f5a41309fd61516932cb6760",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -226,7 +226,7 @@ bool WalletInit::Open() const\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n         if (!pwallet) {\n             return false;\n         }\n@@ -238,7 +238,7 @@ bool WalletInit::Open() const\n \n void WalletInit::Start(CScheduler& scheduler) const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         pwallet->postInitProcess();\n     }\n \n@@ -248,22 +248,21 @@ void WalletInit::Start(CScheduler& scheduler) const\n \n void WalletInit::Flush() const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         pwallet->Flush(false);\n     }\n }\n \n void WalletInit::Stop() const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         pwallet->Flush(true);\n     }\n }\n \n void WalletInit::Close() const\n {\n-    for (CWallet* pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         RemoveWallet(pwallet);\n-        delete pwallet;\n     }\n }"
      },
      {
        "sha": "249c1f60258e18546f094e07e45aece0aadf73d7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 11,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -56,7 +56,7 @@ static std::string DecodeDumpString(const std::string &str) {\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n         if (c == '%' && pos+2 < str.length()) {\n-            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) | \n+            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) |\n                 ((str[pos+2]>>6)*9+((str[pos+2]-'0')&15));\n             pos += 2;\n         }\n@@ -89,7 +89,8 @@ static bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyi\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -185,7 +186,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n UniValue abortrescan(const JSONRPCRequest& request)\n {\n-    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -246,7 +248,8 @@ static void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, co\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -330,7 +333,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -392,7 +396,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -430,7 +435,8 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -506,7 +512,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -640,7 +647,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -683,7 +691,8 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1127,7 +1136,8 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n+    CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n         return NullUniValue;\n     }"
      },
      {
        "sha": "3809eb3dd7f944b13ef702c02373f92badd930dc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 145,
        "deletions": 54,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -40,17 +40,17 @@\n \n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n \n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n+std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n         // wallet endpoint was used\n         std::string requestedWallet = urlDecode(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n-        CWallet* pwallet = GetWallet(requestedWallet);\n+        std::shared_ptr<CWallet> pwallet = GetWallet(requestedWallet);\n         if (!pwallet) throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n         return pwallet;\n     }\n \n-    std::vector<CWallet*> wallets = GetWallets();\n+    std::vector<std::shared_ptr<CWallet>> wallets = GetWallets();\n     return wallets.size() == 1 || (request.fHelp && wallets.size() > 0) ? wallets[0] : nullptr;\n }\n \n@@ -134,7 +134,9 @@ static std::string LabelFromValue(const UniValue& value)\n \n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -198,7 +200,9 @@ CTxDestination GetLabelDestination(CWallet* const pwallet, const std::string& la\n \n static UniValue getlabeladdress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -256,7 +260,9 @@ static UniValue getlabeladdress(const JSONRPCRequest& request)\n \n static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -304,7 +310,9 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n static UniValue setlabel(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -358,7 +366,9 @@ static UniValue setlabel(const JSONRPCRequest& request)\n \n static UniValue getaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -401,7 +411,9 @@ static UniValue getaccount(const JSONRPCRequest& request)\n \n static UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -487,7 +499,9 @@ static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -574,7 +588,9 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -631,7 +647,9 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n static UniValue signmessage(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -692,7 +710,9 @@ static UniValue signmessage(const JSONRPCRequest& request)\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -757,7 +777,9 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -827,7 +849,9 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n static UniValue getbalance(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -910,7 +934,9 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -932,7 +958,9 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n static UniValue movecmd(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -989,7 +1017,9 @@ static UniValue movecmd(const JSONRPCRequest& request)\n \n static UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1062,7 +1092,9 @@ static UniValue sendfrom(const JSONRPCRequest& request)\n \n static UniValue sendmany(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1257,7 +1289,9 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n static UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1392,7 +1426,9 @@ class Witnessifier : public boost::static_visitor<bool>\n \n static UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1624,7 +1660,9 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n \n static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1673,7 +1711,9 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1838,7 +1878,9 @@ static void AcentryToJSON(const CAccountingEntry& acentry, const std::string& st\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2026,7 +2068,9 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n static UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2119,7 +2163,9 @@ static UniValue listaccounts(const JSONRPCRequest& request)\n \n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2258,7 +2304,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n static UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2352,7 +2400,9 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n static UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2396,7 +2446,9 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n static UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2429,7 +2481,9 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n \n static UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2476,7 +2530,9 @@ static void LockWallet(CWallet* pWallet)\n \n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2549,7 +2605,9 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n \n static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2598,7 +2656,9 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n static UniValue walletlock(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2636,7 +2696,9 @@ static UniValue walletlock(const JSONRPCRequest& request)\n \n static UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2696,7 +2758,9 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n \n static UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2823,7 +2887,9 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n \n static UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2874,7 +2940,9 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n \n static UniValue settxfee(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2903,7 +2971,9 @@ static UniValue settxfee(const JSONRPCRequest& request)\n \n static UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2984,14 +3054,14 @@ static UniValue listwallets(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VARR);\n \n-    for (CWallet* pwallet : GetWallets()) {\n-        if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n+        if (!EnsureWalletIsAvailable(wallet.get(), request.fHelp)) {\n             return NullUniValue;\n         }\n \n-        LOCK(pwallet->cs_wallet);\n+        LOCK(wallet->cs_wallet);\n \n-        obj.push_back(pwallet->GetName());\n+        obj.push_back(wallet->GetName());\n     }\n \n     return obj;\n@@ -3029,7 +3099,7 @@ UniValue loadwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    CWallet * const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n     }\n@@ -3046,7 +3116,9 @@ UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -3081,7 +3153,9 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n static UniValue listunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -3252,7 +3326,9 @@ static UniValue listunspent(const JSONRPCRequest& request)\n \n static UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -3452,7 +3528,9 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -3521,7 +3599,9 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n@@ -3670,7 +3750,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n UniValue generate(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3715,7 +3797,9 @@ UniValue generate(const JSONRPCRequest& request)\n \n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -3920,7 +4004,9 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n \n UniValue getaddressinfo(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -4038,7 +4124,9 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -4081,7 +4169,9 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n \n static UniValue listlabels(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -4133,7 +4223,8 @@ static UniValue listlabels(const JSONRPCRequest& request)\n \n UniValue sethdseed(const JSONRPCRequest& request)\n {\n-    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;"
      },
      {
        "sha": "b841f3e424e201ec20a4b258cf535a4d42815ce5",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -20,7 +20,7 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  * @param[in] request JSONRPCRequest that wishes to access a wallet\n  * @return nullptr if no wallet should be used, or a pointer to the CWallet\n  */\n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n+std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);"
      },
      {
        "sha": "03754154fc913baa87b2cc32b8cb0fabfa4dd206",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -73,8 +73,8 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n-        AddWallet(&wallet);\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n         UniValue key;\n@@ -105,7 +105,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(&wallet);\n+        RemoveWallet(wallet);\n     }\n }\n \n@@ -132,36 +132,36 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n-        LOCK(wallet.cs_wallet);\n-        wallet.mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        LOCK(wallet->cs_wallet);\n+        wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n+        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back((pathTemp / \"wallet.backup\").string());\n-        AddWallet(&wallet);\n+        AddWallet(wallet);\n         ::dumpwallet(request);\n-        RemoveWallet(&wallet);\n+        RemoveWallet(wallet);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back((pathTemp / \"wallet.backup\").string());\n-        AddWallet(&wallet);\n+        AddWallet(wallet);\n         ::importwallet(request);\n-        RemoveWallet(&wallet);\n+        RemoveWallet(wallet);\n \n-        LOCK(wallet.cs_wallet);\n-        BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3U);\n+        LOCK(wallet->cs_wallet);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);\n         for (size_t i = 0; i < m_coinbase_txns.size(); ++i) {\n-            bool found = wallet.GetWalletTx(m_coinbase_txns[i]->GetHash());\n+            bool found = wallet->GetWalletTx(m_coinbase_txns[i]->GetHash());\n             bool expected = i >= 100;\n             BOOST_CHECK_EQUAL(found, expected);\n         }"
      },
      {
        "sha": "eff17cce9a594d541a1fca981cfdafc43a5121d3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -36,23 +36,23 @@\n #include <boost/algorithm/string/replace.hpp>\n \n static CCriticalSection cs_wallets;\n-static std::vector<CWallet*> vpwallets GUARDED_BY(cs_wallets);\n+static std::vector<std::shared_ptr<CWallet>> vpwallets GUARDED_BY(cs_wallets);\n \n-bool AddWallet(CWallet* wallet)\n+bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n {\n     LOCK(cs_wallets);\n     assert(wallet);\n-    std::vector<CWallet*>::const_iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n+    std::vector<std::shared_ptr<CWallet>>::const_iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n     if (i != vpwallets.end()) return false;\n     vpwallets.push_back(wallet);\n     return true;\n }\n \n-bool RemoveWallet(CWallet* wallet)\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet)\n {\n     LOCK(cs_wallets);\n     assert(wallet);\n-    std::vector<CWallet*>::iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n+    std::vector<std::shared_ptr<CWallet>>::iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n     if (i == vpwallets.end()) return false;\n     vpwallets.erase(i);\n     return true;\n@@ -64,16 +64,16 @@ bool HasWallets()\n     return !vpwallets.empty();\n }\n \n-std::vector<CWallet*> GetWallets()\n+std::vector<std::shared_ptr<CWallet>> GetWallets()\n {\n     LOCK(cs_wallets);\n     return vpwallets;\n }\n \n-CWallet* GetWallet(const std::string& name)\n+std::shared_ptr<CWallet> GetWallet(const std::string& name)\n {\n     LOCK(cs_wallets);\n-    for (CWallet* wallet : vpwallets) {\n+    for (const std::shared_ptr<CWallet>& wallet : vpwallets) {\n         if (wallet->GetName() == name) return wallet;\n     }\n     return nullptr;\n@@ -3201,8 +3201,6 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n         return nLoadWalletRet;\n \n-    uiInterface.LoadWallet(this);\n-\n     return DBErrors::LOAD_OK;\n }\n \n@@ -4038,7 +4036,7 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n {\n     const std::string& walletFile = name;\n \n@@ -4060,10 +4058,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    // Make a temporary wallet unique pointer so memory doesn't get leaked if\n-    // wallet creation fails.\n-    auto temp_wallet = MakeUnique<CWallet>(name, WalletDatabase::Create(path));\n-    CWallet* walletInstance = temp_wallet.get();\n+    std::shared_ptr<CWallet> walletInstance = std::make_shared<CWallet>(name, WalletDatabase::Create(path));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n@@ -4092,6 +4087,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n     }\n \n+    uiInterface.LoadWallet(walletInstance);\n+\n     int prev_version = walletInstance->nWalletVersion;\n     if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n     {\n@@ -4304,7 +4301,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n         nStart = GetTimeMillis();\n         {\n-            WalletRescanReserver reserver(walletInstance);\n+            WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve()) {\n                 InitError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n@@ -4342,7 +4339,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     }\n \n     // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.\n-    RegisterValidationInterface(temp_wallet.release());\n+    RegisterValidationInterface(walletInstance.get());\n \n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n "
      },
      {
        "sha": "b972bd9e289317d92b229df4823ba00d20d5a22a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -32,11 +32,11 @@\n #include <utility>\n #include <vector>\n \n-bool AddWallet(CWallet* wallet);\n-bool RemoveWallet(CWallet* wallet);\n+bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n-std::vector<CWallet*> GetWallets();\n-CWallet* GetWallet(const std::string& name);\n+std::vector<std::shared_ptr<CWallet>> GetWallets();\n+std::shared_ptr<CWallet> GetWallet(const std::string& name);\n \n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n@@ -1122,7 +1122,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static bool Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string& name, const fs::path& path);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "4b4460a794fca343304748172cfecab395217549",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b4910f7d87983f50047074c3c2397b0a5c4e92/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=80b4910f7d87983f50047074c3c2397b0a5c4e92",
        "patch": "@@ -756,7 +756,7 @@ void MaybeCompactWalletDB()\n         return;\n     }\n \n-    for (CWallet* pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n         WalletDatabase& dbh = pwallet->GetDBHandle();\n \n         unsigned int nUpdateCounter = dbh.nUpdateCounter;"
      }
    ]
  }
]