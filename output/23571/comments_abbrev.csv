dongcarl,2021-11-22 17:50:59,"Concept ACK, perhaps we can use variable names like `CC_FOR_BUILD` to distinguish? This is what [autoconf](https://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html) uses, and is used in secp256k1: https://github.com/bitcoin-core/secp256k1/blob/793ad9016a09c3bf5a5f280c812c46526250d839/configure.ac#L342",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-975774282,975774282,
hebasto,2021-11-22 19:01:47,"> Concept ACK, perhaps we can use variable names like `CC_FOR_BUILD` to distinguish? This is what [autoconf](https://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html) uses, and is used in secp256k1: https://github.com/bitcoin-core/secp256k1/blob/793ad9016a09c3bf5a5f280c812c46526250d839/configure.ac#L342\n\nIt makes sense within a build system which is based on Autotools. Is there ",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-975828527,975828527,
dongcarl,2021-11-22 19:11:28,"The benefit is just that the user can specify a different CC for build vs target, e.g.:\n```sh\n$ make -C depends CC_FOR_BUILD=clang CC=x86_64-w64-mingw32-gcc\n```",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-975836989,975836989,
hebasto,2021-11-22 19:15:15,"> The benefit is just that the user can specify a different CC for build vs target, e.g.:\n> \n> ```shell\n> $ make -C depends CC_FOR_BUILD=clang CC=x86_64-w64-mingw32-gcc\n> ```\n\nShould new variables be limited to compilers only, i.e, `CC_FOR_BUILD` and `CXX_FOR_BUILD`, or cover the whole tool set?",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-975839866,975839866,
dongcarl,2021-11-22 19:32:44,"> Should new variables be limited to compilers only, i.e, `CC_FOR_BUILD` and `CXX_FOR_BUILD`, or cover the whole tool set?\n\nUp to you! It seems like CC and CXX would be useful enough, so whatever's easy to do I guess",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-975852823,975852823,
hebasto,2021-11-28 16:06:12,"Updated 557d4d5d74219b38d0c1a37b7e30122db3e575a8 -> 0ac8f23a040a997aa545c054b7806a2a98aaca45 ([pr23571.01](https://github.com/hebasto/bitcoin/commits/pr23571.01) -> [pr23571.02](https://github.com/hebasto/bitcoin/commits/pr23571.02)).\n\nAdded a commit which addresses  @dongcarl's [comment](https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-975774282):\n\n\n\n> Concept ACK, perhaps w",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-981110104,981110104,
DrahtBot,2021-11-29 02:28:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23611](https://github.com/bitcoin/bitcoin/pull/23611) (build: add `LTO` option to depends by fanquake)\n\nIf you conside",https://github.com/bitcoin/bitcoin/pull/23571#issuecomment-981236722,981236722,
dongcarl,2021-11-30 17:42:32,Perhaps we should establish a style for Makefiles... But I find it more explicit to say `$($(1)_FOR_BUILD)` like we do for `$($(1)_postprocessed)` etc.,https://github.com/bitcoin/bitcoin/pull/23571#discussion_r759517867,759517867,depends/builders/default.mk
hebasto,2021-11-30 19:25:32,"Sorry Carl, but I'm not sure if I understand you correctly...\n\nIf you mean s/`$($1_FOR_BUILD)`/`$($(1)_FOR_BUILD)`/, both are not equivalent though.",https://github.com/bitcoin/bitcoin/pull/23571#discussion_r759592764,759592764,depends/builders/default.mk
dongcarl,2021-11-30 20:30:30,"Oh, then in that case shouldn't we be using `$($(1)_FOR_BUILD)` in these cases for correctness' sake? ",https://github.com/bitcoin/bitcoin/pull/23571#discussion_r759636575,759636575,depends/builders/default.mk
