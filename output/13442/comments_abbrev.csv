theuni,2018-06-12T03:00:22Z,"Nice!\n\n@sipa See https://github.com/theuni/bitcoin/commit/d79fb1d9328ad793932f7f8c29bd907803db4c73 for clang compile fixes, and https://github.com/theuni/bitcoin/commit/4ee6fbb8b7525988783030eb0799bbc7293d50a0 for a change that may or may not be needed to avoid a performance hit on AMD.",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-396450436,396450436,
sipa,2018-06-12T16:47:06Z,@theuni Included the clang compile fixes. I'm going to benchmark to see whether to include the other changes.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-396657885,396657885,
sipa,2018-06-14T19:43:54Z,It would be worthwhile to benchmark this on reasonably recent clang versions as well - the performance impact may be very different depending on how good the compiler is at ordering parallel instruction paths.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-397415687,397415687,
sipa,2018-06-18T22:20:28Z,"Some more benchmarks, comparing GCC 7.3 and clang 6.0, for the `SHA256` benchmark (i7-7820HQ, fixed to 2.2 GHz).\n\n* GCC, master: 4.4 ms\n* GCC, this PR: 4.3 ms\n* clang, master: 4.4 ms\n* clang, this PR: 4.8 ms\n\nUnfortunately, it seems that clang isn't as good in producing as performant code from intrinsics.",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-398213812,398213812,
theuni,2018-07-19T19:59:01Z,@sipa Mind rebasing? I'd like to add the lib-per-cpu changes on top of this.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-406395961,406395961,
sipa,2018-07-19T21:12:34Z,"Rebased, though I don't think this PR is acceptable until we have a way to avoid the performance loss in clang.",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-406416040,406416040,
DrahtBot,2018-07-28T20:56:59Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13789](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13789.html) (crypto/sha256: Use pragmas to enforce neces",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-408634415,408634415,
MarcoFalke,2019-05-20T17:53:28Z,Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-494087868,494087868,
sipa,2019-05-20T17:55:05Z,What version of clang are we using now? It's probably not a good idea to proceed with this unless it can be shown it doesn't have negative impact on performance on all release platforms.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-494088457,494088457,
MarcoFalke,2019-05-20T18:12:41Z,"* 3.7 (#16052) for gitian\n* FreeBSD 12: clang version 6.0.1\n* not sure what the default is on macos when self-compiled",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-494094418,494094418,
sipa,2019-05-20T18:24:15Z,"I'll close this for now, then.",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-494098387,494098387,
fanquake,2019-05-21T04:55:18Z,"@MarcoFalke, Clang on my macOS machine (Xcode 10.2.1) is:\n```\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\nTarget: x86_64-apple-darwin18.6.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n```",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-494239125,494239125,
DesWurstes,2019-05-21T12:46:04Z,...which is actually Clang 5.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-494375870,494375870,
fanquake,2019-05-23T18:34:34Z,"I'm going to reopen this, as we will be switching to a newer version of `Clang` in gitian. ",https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-495334642,495334642,
sipa,2019-05-23T19:05:13Z,I'll benchmark again in clang-7.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-495345637,495345637,
MarcoFalke,2019-05-23T19:16:41Z,I see a slowdown in `SHA256` and `SHA256_32b` with both gcc-9 and clang-8,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-495349438,495349438,
fanquake,2019-06-24T08:09:31Z,Futher benchmarking reported here and outside this PR have shown that there are likely slowdown issues with this change and recent versions of Clang. Closing again for now.,https://github.com/bitcoin/bitcoin/pull/13442#issuecomment-504905736,504905736,
theuni,2018-06-12T03:33:18Z,"Is there some voodoo here, why not just use XTMP3 below? Does this avoid a pipeline stall or something?",https://github.com/bitcoin/bitcoin/pull/13442#discussion_r194606668,194606668,src/crypto/sha256_sse41.cpp
sipa,2018-06-12T16:50:49Z,No idea. It's just a translation of the existing assembly code.,https://github.com/bitcoin/bitcoin/pull/13442#discussion_r194813005,194813005,src/crypto/sha256_sse41.cpp
practicalswift,2018-10-04T20:39:43Z,Is the value read from `w32[0]` is guaranteed to be initialised here?,https://github.com/bitcoin/bitcoin/pull/13442#discussion_r222819351,222819351,src/crypto/sha256_sse41.cpp
practicalswift,2018-10-04T20:40:25Z,Same here and throughout this function :-),https://github.com/bitcoin/bitcoin/pull/13442#discussion_r222819584,222819584,src/crypto/sha256_sse41.cpp
practicalswift,2018-10-04T20:44:06Z,Move the `if` statement inside of the `#if defined(ENABLE_SSE41) && !defined(BUILD_BITCOIN_INTERNAL)` to remove the possibility of an empty if statement.,https://github.com/bitcoin/bitcoin/pull/13442#discussion_r222820713,222820713,src/crypto/sha256.cpp
sipa,2019-05-20T18:13:57Z,"Yes, in the line above.",https://github.com/bitcoin/bitcoin/pull/13442#discussion_r285711058,285711058,src/crypto/sha256_sse41.cpp
